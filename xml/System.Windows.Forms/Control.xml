<Type Name="Control" FullName="System.Windows.Forms.Control">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b22340694e57f750afc1932d0f64fb6beb6b55ac" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83447592" /></Metadata><TypeSignature Language="C#" Value="public class Control : System.ComponentModel.Component, IDisposable, System.ComponentModel.ISynchronizeInvoke, System.Windows.Forms.IBindableComponent, System.Windows.Forms.IDropTarget, System.Windows.Forms.IWin32Window" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Control extends System.ComponentModel.Component implements class System.ComponentModel.IComponent, class System.ComponentModel.ISynchronizeInvoke, class System.IDisposable, class System.Windows.Forms.IBindableComponent, class System.Windows.Forms.IDropTarget, class System.Windows.Forms.IWin32Window" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Control" />
  <TypeSignature Language="VB.NET" Value="Public Class Control&#xA;Inherits Component&#xA;Implements IBindableComponent, IDisposable, IDropTarget, ISynchronizeInvoke, IWin32Window" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="C++ CLI" Value="public ref class Control : System::ComponentModel::Component, IDisposable, System::ComponentModel::ISynchronizeInvoke, System::Windows::Forms::IBindableComponent, System::Windows::Forms::IDropTarget, System::Windows::Forms::IWin32Window" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="F#" Value="type Control = class&#xA;    inherit Component&#xA;    interface Interop.Ole32.IOleControl&#xA;    interface Interop.Ole32.IOleObject&#xA;    interface Interop.Ole32.IOleInPlaceObject&#xA;    interface Interop.Ole32.IOleInPlaceActiveObject&#xA;    interface Interop.Ole32.IOleWindow&#xA;    interface Interop.Ole32.IViewObject&#xA;    interface Interop.Ole32.IViewObject2&#xA;    interface Interop.Ole32.IPersist&#xA;    interface Interop.Ole32.IPersistStreamInit&#xA;    interface Interop.Ole32.IPersistPropertyBag&#xA;    interface Interop.Ole32.IPersistStorage&#xA;    interface Interop.Ole32.IQuickActivate&#xA;    interface IDropTarget&#xA;    interface ISynchronizeInvoke&#xA;    interface IWin32Window&#xA;    interface IComponent&#xA;    interface IDisposable&#xA;    interface IBindableComponent" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0" />
  <TypeSignature Language="F#" Value="type Control = class&#xA;    inherit Component&#xA;    interface UnsafeNativeMethods.IOleControl&#xA;    interface UnsafeNativeMethods.IOleObject&#xA;    interface UnsafeNativeMethods.IOleInPlaceObject&#xA;    interface UnsafeNativeMethods.IOleInPlaceActiveObject&#xA;    interface UnsafeNativeMethods.IOleWindow&#xA;    interface UnsafeNativeMethods.IViewObject&#xA;    interface UnsafeNativeMethods.IViewObject2&#xA;    interface UnsafeNativeMethods.IPersist&#xA;    interface Interop.Ole32.IPersistStreamInit&#xA;    interface UnsafeNativeMethods.IPersistPropertyBag&#xA;    interface Interop.Ole32.IPersistStorage&#xA;    interface UnsafeNativeMethods.IQuickActivate&#xA;    interface IDropTarget&#xA;    interface ISynchronizeInvoke&#xA;    interface IWin32Window&#xA;    interface IComponent&#xA;    interface IDisposable&#xA;    interface IBindableComponent" FrameworkAlternate="netcore-3.0;netcore-3.1" />
  <TypeSignature Language="C#" Value="public class Control : System.ComponentModel.Component, System.ComponentModel.ISynchronizeInvoke, System.Windows.Forms.IWin32Window" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Control extends System.ComponentModel.Component implements class System.ComponentModel.ISynchronizeInvoke, class System.Windows.Forms.IWin32Window" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="VB.NET" Value="Public Class Control&#xA;Inherits Component&#xA;Implements ISynchronizeInvoke, IWin32Window" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class Control : System::ComponentModel::Component, System::ComponentModel::ISynchronizeInvoke, System::Windows::Forms::IWin32Window" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="F#" Value="type Control = class&#xA;    inherit Component&#xA;    interface UnsafeNativeMethods.IOleControl&#xA;    interface UnsafeNativeMethods.IOleObject&#xA;    interface UnsafeNativeMethods.IOleInPlaceObject&#xA;    interface UnsafeNativeMethods.IOleInPlaceActiveObject&#xA;    interface UnsafeNativeMethods.IOleWindow&#xA;    interface UnsafeNativeMethods.IViewObject&#xA;    interface UnsafeNativeMethods.IViewObject2&#xA;    interface UnsafeNativeMethods.IPersist&#xA;    interface UnsafeNativeMethods.IPersistStreamInit&#xA;    interface UnsafeNativeMethods.IPersistPropertyBag&#xA;    interface UnsafeNativeMethods.IPersistStorage&#xA;    interface UnsafeNativeMethods.IQuickActivate&#xA;    interface ISynchronizeInvoke&#xA;    interface IWin32Window" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Control extends System.ComponentModel.Component implements class System.ComponentModel.IComponent, class System.ComponentModel.ISynchronizeInvoke, class System.IDisposable, class System.Windows.Forms.IBindableComponent, class System.Windows.Forms.IDropTarget, class System.Windows.Forms.IWin32Window" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="F#" Value="type Control = class&#xA;    inherit Component&#xA;    interface UnsafeNativeMethods.IOleControl&#xA;    interface UnsafeNativeMethods.IOleObject&#xA;    interface UnsafeNativeMethods.IOleInPlaceObject&#xA;    interface UnsafeNativeMethods.IOleInPlaceActiveObject&#xA;    interface UnsafeNativeMethods.IOleWindow&#xA;    interface UnsafeNativeMethods.IViewObject&#xA;    interface UnsafeNativeMethods.IViewObject2&#xA;    interface UnsafeNativeMethods.IPersist&#xA;    interface UnsafeNativeMethods.IPersistStreamInit&#xA;    interface UnsafeNativeMethods.IPersistPropertyBag&#xA;    interface UnsafeNativeMethods.IPersistStorage&#xA;    interface UnsafeNativeMethods.IQuickActivate&#xA;    interface IDropTarget&#xA;    interface ISynchronizeInvoke&#xA;    interface IWin32Window&#xA;    interface IBindableComponent&#xA;    interface IComponent&#xA;    interface IDisposable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <TypeSignature Language="F#" Value="type Control = class&#xA;    inherit Component&#xA;    interface IDropTarget&#xA;    interface ISynchronizeInvoke&#xA;    interface IWin32Window&#xA;    interface IBindableComponent&#xA;    interface IComponent&#xA;    interface IDisposable" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
  <TypeSignature Language="F#" Value="type Control = class&#xA;    inherit Component&#xA;    interface IDropTarget&#xA;    interface ISynchronizeInvoke&#xA;    interface IWin32Window&#xA;    interface IComponent&#xA;    interface IDisposable&#xA;    interface IBindableComponent" FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IComponent</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.ISynchronizeInvoke</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Forms.IBindableComponent</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Forms.IDropTarget</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Forms.IWin32Window</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Click")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Text")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
      <AttributeName>System.ComponentModel.Design.Serialization.DesignerSerializer("System.Windows.Forms.Design.ControlCodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.ControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Windows.Forms")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.Design.Serialization.DesignerSerializer("System.Windows.Forms.Design.ControlCodeDomSerializer, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.ControlDesigner, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Design.Serialization.DesignerSerializer("System.Windows.Forms.Design.ControlCodeDomSerializer, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.ControlDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="6dc4f-101">視覚的に表現されるコンポーネントであるコントロールの基本クラスを定義します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-101">Defines the base class for controls, which are components with visual representation.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-102">独自のコントロールクラスを作成するには、<xref:System.Windows.Forms.UserControl>、<xref:System.Windows.Forms.Control> クラス、または他の Windows フォーム用意されているコントロールから継承します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-102">To create your own control class, inherit from the <xref:System.Windows.Forms.UserControl>, <xref:System.Windows.Forms.Control> classes, or from the other Windows Forms provided controls.</span></span> <span data-ttu-id="6dc4f-103">カスタムコントロールの作成の詳細については、「 [.NET Framework を使用したカスタム Windows フォームコントロールの開発](~/docs/framework/winforms/controls/developing-custom-windows-forms-controls.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-103">For more information about authoring custom controls, see [Developing Custom Windows Forms Controls with the .NET Framework](~/docs/framework/winforms/controls/developing-custom-windows-forms-controls.md).</span></span>  
  
 <span data-ttu-id="6dc4f-104"><xref:System.Windows.Forms.Control> クラスは、ユーザーに情報を表示するクラスに必要な非常に基本的な機能を実装します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-104">The <xref:System.Windows.Forms.Control> class implements very basic functionality required by classes that display information to the user.</span></span> <span data-ttu-id="6dc4f-105">キーボードとポインティングデバイスを使用してユーザー入力を処理します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-105">It handles user input through the keyboard and pointing devices.</span></span> <span data-ttu-id="6dc4f-106">メッセージのルーティングとセキュリティを処理します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-106">It handles message routing and security.</span></span> <span data-ttu-id="6dc4f-107">これは、コントロールの境界 (位置とサイズ) を定義しますが、描画を実装しません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-107">It defines the bounds of a control (its position and size), although it does not implement painting.</span></span> <span data-ttu-id="6dc4f-108">ウィンドウハンドル (`hWnd`) を提供します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-108">It provides a window handle (`hWnd`).</span></span>  
  
 <span data-ttu-id="6dc4f-109">Windows フォームコントロールはアンビエントプロパティを使用するので、子コントロールを周囲の環境と同様に表示できます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-109">Windows Forms controls use ambient properties so child controls can appear like their surrounding environment.</span></span> <span data-ttu-id="6dc4f-110">*アンビエントプロパティ*は、設定されていない場合、親コントロールから取得されるコントロールプロパティです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-110">An *ambient property* is a control property that, if not set, is retrieved from the parent control.</span></span> <span data-ttu-id="6dc4f-111">コントロールに <xref:System.Windows.Forms.Control.Parent%2A>がなく、プロパティが設定されていない場合、コントロールは <xref:System.Windows.Forms.Control.Site%2A> プロパティを使用してアンビエントプロパティの値を決定しようとします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-111">If the control does not have a <xref:System.Windows.Forms.Control.Parent%2A>, and the property is not set, the control attempts to determine the value of the ambient property through the <xref:System.Windows.Forms.Control.Site%2A> property.</span></span> <span data-ttu-id="6dc4f-112">コントロールが配置されていない場合、サイトがアンビエントプロパティをサポートしていない場合、またはプロパティが <xref:System.Windows.Forms.AmbientProperties>に設定されていない場合、コントロールは独自の既定値を使用します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-112">If the control is not sited, if the site does not support ambient properties, or if the property is not set on the <xref:System.Windows.Forms.AmbientProperties>, the control uses its own default values.</span></span> <span data-ttu-id="6dc4f-113">通常、アンビエントプロパティは、子コントロールに伝達されるコントロール (<xref:System.Windows.Forms.Control.BackColor%2A>など) の特性を表します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-113">Typically, an ambient property represents a characteristic of a control, such as <xref:System.Windows.Forms.Control.BackColor%2A>, that is communicated to a child control.</span></span> <span data-ttu-id="6dc4f-114">たとえば、<xref:System.Windows.Forms.Button> は、既定では親 <xref:System.Windows.Forms.Form> と同じ <xref:System.Windows.Forms.Control.BackColor%2A> を持ちます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-114">For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default.</span></span> <span data-ttu-id="6dc4f-115"><xref:System.Windows.Forms.Control> クラスによって提供されるアンビエントプロパティには、<xref:System.Windows.Forms.Control.Cursor%2A>、<xref:System.Windows.Forms.Control.Font%2A>、<xref:System.Windows.Forms.Control.BackColor%2A>、<xref:System.Windows.Forms.Control.ForeColor%2A>、および <xref:System.Windows.Forms.Control.RightToLeft%2A>があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-115">Ambient properties provided by the <xref:System.Windows.Forms.Control> class include: <xref:System.Windows.Forms.Control.Cursor%2A>, <xref:System.Windows.Forms.Control.Font%2A>, <xref:System.Windows.Forms.Control.BackColor%2A>, <xref:System.Windows.Forms.Control.ForeColor%2A>, and <xref:System.Windows.Forms.Control.RightToLeft%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-116">Windows フォームアプリケーションが視覚スタイルをサポートするようにするには、<xref:System.Windows.Forms.FlatStyle> プロパティを `System` に設定し、実行可能ファイルにマニフェストを含めてください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-116">To make your Windows Forms application support visual styles, be sure to set the <xref:System.Windows.Forms.FlatStyle> property to `System` and include a manifest with your executable.</span></span> <span data-ttu-id="6dc4f-117">マニフェストは、アプリケーションの実行可能ファイル内のリソースとして、または実行可能ファイルと同じディレクトリに存在する別のファイルとして含まれている XML ファイルです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-117">A manifest is an XML file that is included either as a resource within your application executable or as a separate file that resides in the same directory as the executable file.</span></span> <span data-ttu-id="6dc4f-118">マニフェストの例については、<xref:System.Windows.Forms.FlatStyle> 列挙体の「例」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-118">For an example of a manifest, see the Example section of the <xref:System.Windows.Forms.FlatStyle> enumeration.</span></span> <span data-ttu-id="6dc4f-119">Visual スタイルの使用方法の詳細については、「 [Visual スタイル](/windows/win32/controls/themes-overview)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-119">For more information about using visual styles, see [Visual Styles](/windows/win32/controls/themes-overview).</span></span>  
  
 <span data-ttu-id="6dc4f-120">Windows フォームには、ユーザー補助機能のサポートが組み込まれています。また、画面たまに、レビューアーユーティリティ、音声入力ユーティリティ、スクリーンキーボード、代替入力デバイス、キーボード拡張ユーティリティなどのユーザー補助クライアントアプリケーションと連携できるように、アプリケーションに関する情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-120">Windows Forms has accessibility support built in, and provides information about your application that enables it to work with accessibility client applications such as screen enlarger and reviewer utilities, voice input utilities, on-screen keyboards, alternative input devices, and keyboard enhancement utilities.</span></span> <span data-ttu-id="6dc4f-121">場合によっては、ユーザー補助クライアントアプリケーションに追加情報を提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-121">Sometimes you will want to provide additional information to accessibility client applications.</span></span> <span data-ttu-id="6dc4f-122">この追加情報を提供するには、2つの方法があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-122">There are two ways of providing this additional information.</span></span> <span data-ttu-id="6dc4f-123"><xref:System.Windows.Forms.Control.AccessibleName%2A>、<xref:System.Windows.Forms.Control.AccessibleDescription%2A>、<xref:System.Windows.Forms.Control.AccessibleDefaultActionDescription%2A>、および <xref:System.Windows.Forms.Control.AccessibleRole%2A> プロパティ値を設定できます。これは、ユーザー補助クライアントアプリケーションに報告されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-123">You can set the <xref:System.Windows.Forms.Control.AccessibleName%2A>, <xref:System.Windows.Forms.Control.AccessibleDescription%2A>, <xref:System.Windows.Forms.Control.AccessibleDefaultActionDescription%2A>, and <xref:System.Windows.Forms.Control.AccessibleRole%2A> property values, which will be reported to accessibility client applications.</span></span> <span data-ttu-id="6dc4f-124">このメソッドは、通常、既存のコントロールに対して限られたアクセシビリティ情報を提供するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-124">This method is typically used to provide limited accessibility information for existing controls.</span></span> <span data-ttu-id="6dc4f-125">または、<xref:System.Windows.Forms.AccessibleObject> クラスまたは <xref:System.Windows.Forms.Control.ControlAccessibleObject> クラスから派生した独自のクラスを記述し、必要に応じてユーザー補助情報を提供することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-125">Alternatively, you can write your own class deriving from the <xref:System.Windows.Forms.AccessibleObject> or <xref:System.Windows.Forms.Control.ControlAccessibleObject> classes, providing as much accessibility information as needed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-126">パフォーマンスを向上させるには、コンストラクターにコントロールのサイズを設定しないでください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-126">To maintain better performance, do not set the size of a control in its constructor.</span></span> <span data-ttu-id="6dc4f-127"><xref:System.Windows.Forms.Control.DefaultSize%2A> プロパティをオーバーライドする方法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-127">The preferred method is to override the <xref:System.Windows.Forms.Control.DefaultSize%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-128"><xref:System.Windows.Forms.Control> のデータバインディングをコンストラクターに追加しないでください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-128">Do not add data bindings for a <xref:System.Windows.Forms.Control> in its constructor.</span></span> <span data-ttu-id="6dc4f-129">そうすると、コード生成時にエラーが発生し、望ましくない動作が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-129">Doing so will cause errors in code generation and can cause unwanted behavior.</span></span>  
  
 <span data-ttu-id="6dc4f-130"><xref:System.Windows.Forms> 名前空間のコントロールの大部分では、基になる Windows コモンコントロールがベースとして使用されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-130">The majority of the controls in the <xref:System.Windows.Forms> namespace use the underlying Windows common control as a base to build on.</span></span> <span data-ttu-id="6dc4f-131">Windows コモンコントロールの詳細については、「 [General Control Reference](/windows/win32/controls/common-control-reference)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-131">For more information about the Windows common controls, see [General Control Reference](/windows/win32/controls/common-control-reference).</span></span>  
  
 <span data-ttu-id="6dc4f-132">Windows フォームコントロールを別のプロセスから識別するには、標準の `SendMessage` 呼び出しを使用して WM_GETCONTROLNAME メッセージを渡します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-132">To identify Windows Forms controls from a separate process, use a standard `SendMessage` call to pass the WM_GETCONTROLNAME message.</span></span> <span data-ttu-id="6dc4f-133">WM_GETCONTROLNAME は、言語と Windows 階層に依存しません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-133">WM_GETCONTROLNAME is independent of the language and Windows hierarchy.</span></span> <span data-ttu-id="6dc4f-134">詳細については、「 [Windows フォームの自動化](https://docs.microsoft.com/previous-versions/dotnet/articles/ms996405(v=msdn.10))」の「Windows フォームの推奨される解決方法」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-134">For more information, see the "Recommended Solution for Windows Forms" topic in [Automating Windows Forms](https://docs.microsoft.com/previous-versions/dotnet/articles/ms996405(v=msdn.10)).</span></span>  
  
 <span data-ttu-id="6dc4f-135">複数のスレッドからコントロールへのアクセスを同期するには、<xref:System.Windows.Forms.Control.InvokeRequired%2A> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-135">Use the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property to synchronize access to the control from multiple threads.</span></span> <span data-ttu-id="6dc4f-136">マルチスレッド Windows フォームコントロールの詳細については、「[方法: Windows フォームコントロールのスレッドセーフな呼び出しを行う](~/docs/framework/winforms/controls/how-to-make-thread-safe-calls-to-windows-forms-controls.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-136">For more information about multithreaded Windows Forms controls, see [How to: Make Thread-Safe Calls to Windows Forms Controls](~/docs/framework/winforms/controls/how-to-make-thread-safe-calls-to-windows-forms-controls.md)</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="6dc4f-137">スレッドセーフであるのは、<see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" />、<see cref="M:System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)" />、<see cref="M:System.Windows.Forms.Control.Invoke(System.Delegate)" />、<see cref="P:System.Windows.Forms.Control.InvokeRequired" />、および <see cref="M:System.Windows.Forms.Control.CreateGraphics" /> コントロールのハンドルが既に作成されている場合のみです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-137">Only the following members are thread safe: <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" />, <see cref="M:System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)" />, <see cref="M:System.Windows.Forms.Control.Invoke(System.Delegate)" />, <see cref="P:System.Windows.Forms.Control.InvokeRequired" />, and <see cref="M:System.Windows.Forms.Control.CreateGraphics" /> if the handle for the control has already been created.</span></span> <span data-ttu-id="6dc4f-138">バックグラウンドスレッドでコントロールのハンドルが作成される前に <see cref="M:System.Windows.Forms.Control.CreateGraphics" /> を呼び出すと、無効なクロススレッド呼び出しが発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-138">Calling <see cref="M:System.Windows.Forms.Control.CreateGraphics" /> before the control's handle has been created on a background thread can cause illegal cross thread calls.</span></span></threadsafe>
    <altmember cref="T:System.Windows.Forms.Form" />
    <altmember cref="T:System.Windows.Forms.ScrollableControl" />
    <altmember cref="T:System.Windows.Forms.ContainerControl" />
    <altmember cref="T:System.ComponentModel.Component" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6dc4f-139"><see cref="T:System.Windows.Forms.Control" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-139">Initializes a new instance of the <see cref="T:System.Windows.Forms.Control" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Control ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Control();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6dc4f-140"><see cref="T:System.Windows.Forms.Control" /> クラスの新しいインスタンスを既定の設定で初期化します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-140">Initializes a new instance of the <see cref="T:System.Windows.Forms.Control" /> class with default settings.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-141"><xref:System.Windows.Forms.Control> クラスは、Windows フォームアプリケーションで使用されるすべてのコントロールの基本クラスです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-141">The <xref:System.Windows.Forms.Control> class is the base class for all controls used in a Windows Forms application.</span></span> <span data-ttu-id="6dc4f-142">このクラスは通常、クラスのインスタンスを作成するためには使用されないため、このコンストラクターは通常は直接呼び出されませんが、代わりに派生クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-142">Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Control (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Control(System::String ^ text);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Control : string -&gt; System.Windows.Forms.Control" Usage="new System.Windows.Forms.Control text" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="6dc4f-143">コントロールによって表示されるテキスト。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-143">The text displayed by the control.</span></span></param>
        <summary><span data-ttu-id="6dc4f-144">テキストを指定して、<see cref="T:System.Windows.Forms.Control" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-144">Initializes a new instance of the <see cref="T:System.Windows.Forms.Control" /> class with specific text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-145"><xref:System.Windows.Forms.Control> クラスは、Windows フォームアプリケーションで使用されるすべてのコントロールの基本クラスです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-145">The <xref:System.Windows.Forms.Control> class is the base class for all controls used in a Windows Forms application.</span></span> <span data-ttu-id="6dc4f-146">このクラスは通常、クラスのインスタンスを作成するためには使用されないため、このコンストラクターは通常は直接呼び出されませんが、代わりに派生クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-146">Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.</span></span>  
  
 <span data-ttu-id="6dc4f-147">このバージョンの <xref:System.Windows.Forms.Control.%23ctor%2A> コンストラクターは、初期 <xref:System.Windows.Forms.Control.Text%2A> プロパティ値を `text` パラメーター値に設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-147">This version of the <xref:System.Windows.Forms.Control.%23ctor%2A> constructor sets the initial <xref:System.Windows.Forms.Control.Text%2A> property value to the `text` parameter value.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Control (System.Windows.Forms.Control parent, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.Control parent, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (parent As Control, text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Control(System::Windows::Forms::Control ^ parent, System::String ^ text);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Control : System.Windows.Forms.Control * string -&gt; System.Windows.Forms.Control" Usage="new System.Windows.Forms.Control (parent, text)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parent" Type="System.Windows.Forms.Control" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parent"><span data-ttu-id="6dc4f-148">コントロールの親である <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-148">The <see cref="T:System.Windows.Forms.Control" /> to be the parent of the control.</span></span></param>
        <param name="text"><span data-ttu-id="6dc4f-149">コントロールによって表示されるテキスト。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-149">The text displayed by the control.</span></span></param>
        <summary><span data-ttu-id="6dc4f-150">テキストを指定して、<see cref="T:System.Windows.Forms.Control" /> クラスの新しいインスタンスを子コントロールとして初期化します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-150">Initializes a new instance of the <see cref="T:System.Windows.Forms.Control" /> class as a child control, with specific text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-151"><xref:System.Windows.Forms.Control> クラスは、Windows フォームアプリケーションで使用されるすべてのコントロールの基本クラスです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-151">The <xref:System.Windows.Forms.Control> class is the base class for all controls used in a Windows Forms application.</span></span> <span data-ttu-id="6dc4f-152">このクラスは通常、クラスのインスタンスを作成するためには使用されないため、このコンストラクターは通常は直接呼び出されませんが、代わりに派生クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-152">Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.</span></span>  
  
 <span data-ttu-id="6dc4f-153">このバージョンの <xref:System.Windows.Forms.Control.%23ctor%2A> コンストラクターは、初期 <xref:System.Windows.Forms.Control.Text%2A> プロパティ値を `text` パラメーター値に設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-153">This version of the <xref:System.Windows.Forms.Control.%23ctor%2A> constructor sets the initial <xref:System.Windows.Forms.Control.Text%2A> property value to the `text` parameter value.</span></span> <span data-ttu-id="6dc4f-154">また、このコンストラクターは、親コントロールの <xref:System.Windows.Forms.Control.ControlCollection>にコントロールを追加します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-154">The constructor also adds the control to the parent control's <xref:System.Windows.Forms.Control.ControlCollection>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Control (string text, int left, int top, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, int32 left, int32 top, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String, left As Integer, top As Integer, width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Control(System::String ^ text, int left, int top, int width, int height);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Control : string * int * int * int * int -&gt; System.Windows.Forms.Control" Usage="new System.Windows.Forms.Control (text, left, top, width, height)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="top" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="6dc4f-155">コントロールによって表示されるテキスト。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-155">The text displayed by the control.</span></span></param>
        <param name="left"><span data-ttu-id="6dc4f-156">コントロールのコンテナーの左端からのコントロールの <see cref="P:System.Drawing.Point.X" /> 位置 (ピクセル単位)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-156">The <see cref="P:System.Drawing.Point.X" /> position of the control, in pixels, from the left edge of the control's container.</span></span> <span data-ttu-id="6dc4f-157">値は <see cref="P:System.Windows.Forms.Control.Left" /> プロパティに代入されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-157">The value is assigned to the <see cref="P:System.Windows.Forms.Control.Left" /> property.</span></span></param>
        <param name="top"><span data-ttu-id="6dc4f-158">コントロールのコンテナーの上端からのコントロールの <see cref="P:System.Drawing.Point.Y" /> 位置 (ピクセル単位)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-158">The <see cref="P:System.Drawing.Point.Y" /> position of the control, in pixels, from the top edge of the control's container.</span></span> <span data-ttu-id="6dc4f-159">値は <see cref="P:System.Windows.Forms.Control.Top" /> プロパティに代入されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-159">The value is assigned to the <see cref="P:System.Windows.Forms.Control.Top" /> property.</span></span></param>
        <param name="width"><span data-ttu-id="6dc4f-160">コントロールの幅 (ピクセル単位)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-160">The width of the control, in pixels.</span></span> <span data-ttu-id="6dc4f-161">値は <see cref="P:System.Windows.Forms.Control.Width" /> プロパティに代入されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-161">The value is assigned to the <see cref="P:System.Windows.Forms.Control.Width" /> property.</span></span></param>
        <param name="height"><span data-ttu-id="6dc4f-162">コントロールの高さ (ピクセル単位)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-162">The height of the control, in pixels.</span></span> <span data-ttu-id="6dc4f-163">値は <see cref="P:System.Windows.Forms.Control.Height" /> プロパティに代入されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-163">The value is assigned to the <see cref="P:System.Windows.Forms.Control.Height" /> property.</span></span></param>
        <summary><span data-ttu-id="6dc4f-164">テキスト、サイズ、および位置を指定して、<see cref="T:System.Windows.Forms.Control" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-164">Initializes a new instance of the <see cref="T:System.Windows.Forms.Control" /> class with specific text, size, and location.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-165"><xref:System.Windows.Forms.Control> クラスは、Windows フォームアプリケーションで使用されるすべてのコントロールの基本クラスです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-165">The <xref:System.Windows.Forms.Control> class is the base class for all controls used in a Windows Forms application.</span></span> <span data-ttu-id="6dc4f-166">このクラスは通常、クラスのインスタンスを作成するためには使用されないため、このコンストラクターは通常は直接呼び出されませんが、代わりに派生クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-166">Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.</span></span>  
  
 <span data-ttu-id="6dc4f-167">このバージョンの <xref:System.Windows.Forms.Control.%23ctor%2A> コンストラクターは、初期 <xref:System.Windows.Forms.Control.Text%2A> プロパティ値を `text` パラメーター値に設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-167">This version of the <xref:System.Windows.Forms.Control.%23ctor%2A> constructor sets the initial <xref:System.Windows.Forms.Control.Text%2A> property value to the `text` parameter value.</span></span> <span data-ttu-id="6dc4f-168">コントロールの初期 <xref:System.Windows.Forms.Control.Size%2A> と <xref:System.Windows.Forms.Control.Location%2A> は、`left`、`top`、`width`、および `height` パラメーター値によって決定されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-168">The initial <xref:System.Windows.Forms.Control.Size%2A> and <xref:System.Windows.Forms.Control.Location%2A> of the control are determined by the `left`, `top`, `width` and `height` parameter values.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-169">パフォーマンスを向上させるには、コンストラクターにコントロールのサイズを設定しないでください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-169">To maintain better performance, do not set the size of a control in its constructor.</span></span> <span data-ttu-id="6dc4f-170"><xref:System.Windows.Forms.Control.DefaultSize%2A> プロパティをオーバーライドする方法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-170">The preferred method is to override the <xref:System.Windows.Forms.Control.DefaultSize%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Control (System.Windows.Forms.Control parent, string text, int left, int top, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.Control parent, string text, int32 left, int32 top, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (parent As Control, text As String, left As Integer, top As Integer, width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Control(System::Windows::Forms::Control ^ parent, System::String ^ text, int left, int top, int width, int height);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Control : System.Windows.Forms.Control * string * int * int * int * int -&gt; System.Windows.Forms.Control" Usage="new System.Windows.Forms.Control (parent, text, left, top, width, height)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parent" Type="System.Windows.Forms.Control" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="top" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parent"><span data-ttu-id="6dc4f-171">コントロールの親である <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-171">The <see cref="T:System.Windows.Forms.Control" /> to be the parent of the control.</span></span></param>
        <param name="text"><span data-ttu-id="6dc4f-172">コントロールによって表示されるテキスト。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-172">The text displayed by the control.</span></span></param>
        <param name="left"><span data-ttu-id="6dc4f-173">コントロールのコンテナーの左端からのコントロールの <see cref="P:System.Drawing.Point.X" /> 位置 (ピクセル単位)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-173">The <see cref="P:System.Drawing.Point.X" /> position of the control, in pixels, from the left edge of the control's container.</span></span> <span data-ttu-id="6dc4f-174">値は <see cref="P:System.Windows.Forms.Control.Left" /> プロパティに代入されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-174">The value is assigned to the <see cref="P:System.Windows.Forms.Control.Left" /> property.</span></span></param>
        <param name="top"><span data-ttu-id="6dc4f-175">コントロールのコンテナーの上端からのコントロールの <see cref="P:System.Drawing.Point.Y" /> 位置 (ピクセル単位)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-175">The <see cref="P:System.Drawing.Point.Y" /> position of the control, in pixels, from the top edge of the control's container.</span></span> <span data-ttu-id="6dc4f-176">値は <see cref="P:System.Windows.Forms.Control.Top" /> プロパティに代入されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-176">The value is assigned to the <see cref="P:System.Windows.Forms.Control.Top" /> property.</span></span></param>
        <param name="width"><span data-ttu-id="6dc4f-177">コントロールの幅 (ピクセル単位)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-177">The width of the control, in pixels.</span></span> <span data-ttu-id="6dc4f-178">値は <see cref="P:System.Windows.Forms.Control.Width" /> プロパティに代入されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-178">The value is assigned to the <see cref="P:System.Windows.Forms.Control.Width" /> property.</span></span></param>
        <param name="height"><span data-ttu-id="6dc4f-179">コントロールの高さ (ピクセル単位)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-179">The height of the control, in pixels.</span></span> <span data-ttu-id="6dc4f-180">値は <see cref="P:System.Windows.Forms.Control.Height" /> プロパティに代入されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-180">The value is assigned to the <see cref="P:System.Windows.Forms.Control.Height" /> property.</span></span></param>
        <summary><span data-ttu-id="6dc4f-181">テキスト、サイズ、および位置を指定して、<see cref="T:System.Windows.Forms.Control" /> クラスの新しいインスタンスを子コントロールとして初期化します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-181">Initializes a new instance of the <see cref="T:System.Windows.Forms.Control" /> class as a child control, with specific text, size, and location.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-182"><xref:System.Windows.Forms.Control> クラスは、Windows フォームアプリケーションで使用されるすべてのコントロールの基本クラスです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-182">The <xref:System.Windows.Forms.Control> class is the base class for all controls used in a Windows Forms application.</span></span> <span data-ttu-id="6dc4f-183">このクラスは通常、クラスのインスタンスを作成するためには使用されないため、このコンストラクターは通常は直接呼び出されませんが、代わりに派生クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-183">Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.</span></span>  
  
 <span data-ttu-id="6dc4f-184">このバージョンの <xref:System.Windows.Forms.Control.%23ctor%2A> コンストラクターは、初期 <xref:System.Windows.Forms.Control.Text%2A> プロパティ値を `text` パラメーター値に設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-184">This version of the <xref:System.Windows.Forms.Control.%23ctor%2A> constructor sets the initial <xref:System.Windows.Forms.Control.Text%2A> property value to the `text` parameter value.</span></span> <span data-ttu-id="6dc4f-185">また、このコンストラクターは、親コントロールの <xref:System.Windows.Forms.Control.ControlCollection>にコントロールを追加します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-185">The constructor also adds the control to the parent control's <xref:System.Windows.Forms.Control.ControlCollection>.</span></span> <span data-ttu-id="6dc4f-186">コントロールの初期 <xref:System.Windows.Forms.Control.Size%2A> と <xref:System.Windows.Forms.Control.Location%2A> は、`left`、`top`、`width`、および `height` パラメーター値によって決定されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-186">The initial <xref:System.Windows.Forms.Control.Size%2A> and <xref:System.Windows.Forms.Control.Location%2A> of the control are determined by the `left`, `top`, `width` and `height` parameter values.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-187">パフォーマンスを向上させるには、コンストラクターにコントロールのサイズを設定しないでください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-187">To maintain better performance, do not set the size of a control in its constructor.</span></span> <span data-ttu-id="6dc4f-188"><xref:System.Windows.Forms.Control.DefaultSize%2A> プロパティをオーバーライドする方法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-188">The preferred method is to override the <xref:System.Windows.Forms.Control.DefaultSize%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AccessibilityNotifyClients">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6dc4f-189">ユーザー補助クライアント アプリケーションに <see cref="T:System.Windows.Forms.AccessibleEvents" /> を通知します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-189">Notifies the accessibility client applications of <see cref="T:System.Windows.Forms.AccessibleEvents" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AccessibilityNotifyClients">
      <MemberSignature Language="C#" Value="protected internal void AccessibilityNotifyClients (System.Windows.Forms.AccessibleEvents accEvent, int childID);" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void AccessibilityNotifyClients(valuetype System.Windows.Forms.AccessibleEvents accEvent, int32 childID) cil managed" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.AccessibilityNotifyClients(System.Windows.Forms.AccessibleEvents,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub AccessibilityNotifyClients (accEvent As AccessibleEvents, childID As Integer)" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void AccessibilityNotifyClients(System::Windows::Forms::AccessibleEvents accEvent, int childID);" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="member this.AccessibilityNotifyClients : System.Windows.Forms.AccessibleEvents * int -&gt; unit" Usage="control.AccessibilityNotifyClients (accEvent, childID)" />
      <MemberSignature Language="C#" Value="protected void AccessibilityNotifyClients (System.Windows.Forms.AccessibleEvents accEvent, int childID);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AccessibilityNotifyClients(valuetype System.Windows.Forms.AccessibleEvents accEvent, int32 childID) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Protected Sub AccessibilityNotifyClients (accEvent As AccessibleEvents, childID As Integer)" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void AccessibilityNotifyClients(System::Windows::Forms::AccessibleEvents accEvent, int childID);" FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accEvent" Type="System.Windows.Forms.AccessibleEvents" />
        <Parameter Name="childID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="accEvent"><span data-ttu-id="6dc4f-190">ユーザー補助クライアント アプリケーションに通知する <see cref="T:System.Windows.Forms.AccessibleEvents" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-190">The <see cref="T:System.Windows.Forms.AccessibleEvents" /> to notify the accessibility client applications of.</span></span></param>
        <param name="childID"><span data-ttu-id="6dc4f-191">ユーザー補助対象のイベントを通知する子 <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-191">The child <see cref="T:System.Windows.Forms.Control" /> to notify of the accessible event.</span></span></param>
        <summary><span data-ttu-id="6dc4f-192">指定した子コントロールの指定した <see cref="T:System.Windows.Forms.AccessibleEvents" /> をユーザー補助クライアント アプリケーションに通知します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-192">Notifies the accessibility client applications of the specified <see cref="T:System.Windows.Forms.AccessibleEvents" /> for the specified child control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-193">ユーザー補助クライアントアプリケーションに通知される <xref:System.Windows.Forms.AccessibleEvents> ごとに、<xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A?displayProperty=nameWithType> メソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-193">You must call the <xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A?displayProperty=nameWithType> method for each <xref:System.Windows.Forms.AccessibleEvents> the accessibility client applications are to be notified of.</span></span> <span data-ttu-id="6dc4f-194"><xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A> メソッドは、通常、プロパティが設定されたとき、またはイベントハンドラー内から呼び出されたときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-194">The <xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A> method is typically called when a property is set or from within an event handler.</span></span> <span data-ttu-id="6dc4f-195">たとえば、<xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A> メソッドを呼び出し、<xref:System.Windows.Forms.Control.VisibleChanged?displayProperty=nameWithType> イベントのイベントハンドラー内から `Hide` の <xref:System.Windows.Forms.AccessibleEvents> 値を渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-195">For example, you might call the <xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A> method and pass in an <xref:System.Windows.Forms.AccessibleEvents> value of `Hide` from within the event handler for the <xref:System.Windows.Forms.Control.VisibleChanged?displayProperty=nameWithType> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-196">次のコード例は、<xref:System.Windows.Forms.AccessibleObject> クラスと <xref:System.Windows.Forms.Control.ControlAccessibleObject> クラスを使用してアクセス可能な情報を公開する、アクセシビリティ対応のグラフコントロールを作成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-196">The following code example demonstrates the creation of an accessibility-aware chart control, using the <xref:System.Windows.Forms.AccessibleObject> and <xref:System.Windows.Forms.Control.ControlAccessibleObject> classes to expose accessible information.</span></span> <span data-ttu-id="6dc4f-197">コントロールは、凡例と共に2つの曲線をプロットします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-197">The control plots two curves along with a legend.</span></span> <span data-ttu-id="6dc4f-198">`ControlAccessibleObject`から派生した `ChartControlAccessibleObject` クラスは、<xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> メソッドでグラフコントロールにカスタムのユーザー補助情報を提供するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-198">The `ChartControlAccessibleObject` class, which derives from `ControlAccessibleObject`, is used in the <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> method to provide custom accessible information for the chart control.</span></span> <span data-ttu-id="6dc4f-199">グラフの凡例は実際の <xref:System.Windows.Forms.Control> ベースのコントロールではなく、グラフコントロールによって描画されるため、組み込みのアクセス可能な情報は含まれません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-199">Since the chart legend is not an actual <xref:System.Windows.Forms.Control> -based control, but instead is drawn by the chart control, it does not any built-in accessible information.</span></span> <span data-ttu-id="6dc4f-200">このため、`ChartControlAccessibleObject` クラスは <xref:System.Windows.Forms.AccessibleObject.GetChild%2A> メソッドをオーバーライドして、凡例の各部分のアクセス可能な情報を表す `CurveLegendAccessibleObject` を返します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-200">Because of this, the `ChartControlAccessibleObject` class overrides the <xref:System.Windows.Forms.AccessibleObject.GetChild%2A> method to return the `CurveLegendAccessibleObject` that represents accessible information for each part of the legend.</span></span> <span data-ttu-id="6dc4f-201">アクセス可能なアプリケーションがこのコントロールを使用する場合、コントロールは必要なアクセス可能な情報を提供できます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-201">When an accessible-aware application uses this control, the control can provide the necessary accessible information.</span></span>  
  
 <span data-ttu-id="6dc4f-202">このコード抜粋は、<xref:System.Windows.Forms.Control.AccessibilityNotifyClients%2A> メソッドの呼び出しを示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-202">This code excerpt demonstrates calling the <xref:System.Windows.Forms.Control.AccessibilityNotifyClients%2A> method.</span></span> <span data-ttu-id="6dc4f-203">完全なコード例については、<xref:System.Windows.Forms.AccessibleObject> クラスの概要を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-203">See the <xref:System.Windows.Forms.AccessibleObject> class overview for the complete code example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.AccessibleObject#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/CPP/chartcontrol.cpp#5)]
 [!code-csharp[System.Windows.Forms.AccessibleObject#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/CS/chartcontrol.cs#5)]
 [!code-vb[System.Windows.Forms.AccessibleObject#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/VB/chartcontrol.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.AccessibleEvents" />
        <altmember cref="P:System.Windows.Forms.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="AccessibilityNotifyClients">
      <MemberSignature Language="C#" Value="protected void AccessibilityNotifyClients (System.Windows.Forms.AccessibleEvents accEvent, int objectID, int childID);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AccessibilityNotifyClients(valuetype System.Windows.Forms.AccessibleEvents accEvent, int32 objectID, int32 childID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.AccessibilityNotifyClients(System.Windows.Forms.AccessibleEvents,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub AccessibilityNotifyClients (accEvent As AccessibleEvents, objectID As Integer, childID As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void AccessibilityNotifyClients(System::Windows::Forms::AccessibleEvents accEvent, int objectID, int childID);" />
      <MemberSignature Language="F#" Value="member this.AccessibilityNotifyClients : System.Windows.Forms.AccessibleEvents * int * int -&gt; unit" Usage="control.AccessibilityNotifyClients (accEvent, objectID, childID)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accEvent" Type="System.Windows.Forms.AccessibleEvents" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="objectID" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="childID" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="accEvent"><span data-ttu-id="6dc4f-204">ユーザー補助クライアント アプリケーションに通知する <see cref="T:System.Windows.Forms.AccessibleEvents" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-204">The <see cref="T:System.Windows.Forms.AccessibleEvents" /> to notify the accessibility client applications of.</span></span></param>
        <param name="objectID"><span data-ttu-id="6dc4f-205"><see cref="T:System.Windows.Forms.AccessibleObject" /> の識別子です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-205">The identifier of the <see cref="T:System.Windows.Forms.AccessibleObject" />.</span></span></param>
        <param name="childID"><span data-ttu-id="6dc4f-206">ユーザー補助対象のイベントを通知する子 <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-206">The child <see cref="T:System.Windows.Forms.Control" /> to notify of the accessible event.</span></span></param>
        <summary><span data-ttu-id="6dc4f-207">指定した子コントロールの指定した <see cref="T:System.Windows.Forms.AccessibleEvents" /> をユーザー補助クライアント アプリケーションに通知します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-207">Notifies the accessibility client applications of the specified <see cref="T:System.Windows.Forms.AccessibleEvents" /> for the specified child control .</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityObject">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.AccessibleObject AccessibilityObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.AccessibleObject AccessibilityObject" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AccessibilityObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AccessibilityObject As AccessibleObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::AccessibleObject ^ AccessibilityObject { System::Windows::Forms::AccessibleObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AccessibilityObject : System.Windows.Forms.AccessibleObject" Usage="System.Windows.Forms.Control.AccessibilityObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-208">コントロールに割り当てられた <see cref="T:System.Windows.Forms.AccessibleObject" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-208">Gets the <see cref="T:System.Windows.Forms.AccessibleObject" /> assigned to the control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-209">コントロールに割り当てられた <see cref="T:System.Windows.Forms.AccessibleObject" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-209">The <see cref="T:System.Windows.Forms.AccessibleObject" /> assigned to the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-210">このメソッドから返されるインスタンスを制御するには、<xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> メソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-210">To control the instance returned from this method, override the <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> method.</span></span>  
  
 <span data-ttu-id="6dc4f-211">コントロールに現在割り当てられている <xref:System.Windows.Forms.AccessibleObject> がない場合は、コントロールの新しいインスタンスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-211">If no <xref:System.Windows.Forms.AccessibleObject> is currently assigned to the control, a new instance of one is created.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-212"><xref:System.Windows.Forms.Control.AccessibilityObject%2A> プロパティを取得または設定するには、[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]と共にインストールされた `Accessibility` アセンブリへの参照を追加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-212">To get or set the <xref:System.Windows.Forms.Control.AccessibilityObject%2A> property, you must add a reference to the `Accessibility` assembly installed with the[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].</span></span>  
  
 <span data-ttu-id="6dc4f-213">ユーザー補助オブジェクトの詳細については、「 [Active Accessibility](/windows/win32/winauto/microsoft-active-accessibility)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-213">For more information about accessible objects, see [Active Accessibility](/windows/win32/winauto/microsoft-active-accessibility).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateAccessibilityInstance" />
        <altmember cref="T:System.Windows.Forms.Control.ControlAccessibleObject" />
        <altmember cref="T:System.Windows.Forms.AccessibleObject" />
      </Docs>
    </Member>
    <Member MemberName="AccessibleDefaultActionDescription">
      <MemberSignature Language="C#" Value="public string AccessibleDefaultActionDescription { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AccessibleDefaultActionDescription" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AccessibleDefaultActionDescription" />
      <MemberSignature Language="VB.NET" Value="Public Property AccessibleDefaultActionDescription As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AccessibleDefaultActionDescription { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AccessibleDefaultActionDescription : string with get, set" Usage="System.Windows.Forms.Control.AccessibleDefaultActionDescription" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-214">アクセシビリティ クライアント アプリケーションで使用されるコントロールの既定のアクションの説明を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-214">Gets or sets the default action description of the control for use by accessibility client applications.</span></span></summary>
        <value><span data-ttu-id="6dc4f-215">ユーザー補助クライアント アプリケーションによって使用される、コントロールの既定のアクションの説明。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-215">The default action description of the control for use by accessibility client applications.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-216">オブジェクトの <xref:System.Windows.Forms.Control.AccessibleDefaultActionDescription%2A> プロパティは、ユーザーの視点からの操作のオブジェクトの主要なメソッドを記述します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-216">An object's <xref:System.Windows.Forms.Control.AccessibleDefaultActionDescription%2A> property describes the object's primary method of manipulation from the user's viewpoint.</span></span> <span data-ttu-id="6dc4f-217">このプロパティは動詞または短い動詞句である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-217">This property should be a verb or a short verb phrase.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-218">すべてのオブジェクトに既定のアクションがあるわけではありません。また、次の例のように、一部のオブジェクトには、<xref:System.Windows.Forms.AccessibleObject.Value%2A?displayProperty=nameWithType> プロパティに関連する既定のアクションがある場合があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-218">Not all objects have default actions, and some objects might have a default action that is related to its <xref:System.Windows.Forms.AccessibleObject.Value%2A?displayProperty=nameWithType> property, such as in the following examples:</span></span>  
  
-   <span data-ttu-id="6dc4f-219">チェックボックスをオンにすると、既定のアクションである "チェックの解除" と "Checked" の値が設定されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-219">A selected check box has a default action of "Uncheck" and a value of "Checked."</span></span>  
  
-   <span data-ttu-id="6dc4f-220">チェックボックスがオフの場合、既定のアクションは "Check" で、値は "Unchecked" になります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-220">A cleared check box has a default action of "Check" and a value of "Unchecked."</span></span>  
  
-   <span data-ttu-id="6dc4f-221">"Print" というラベルが付いたボタンには、値のない "Press" という既定のアクションがあります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-221">A button labeled "Print" has a default action of "Press," with no value.</span></span>  
  
-   <span data-ttu-id="6dc4f-222">"Printer" と表示されるラベルまたはテキストボックスコントロールには、既定の動作はありませんが、"Printer" という値が設定されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-222">A label or a text box control that shows "Printer" has no default action, but would have a value of "Printer."</span></span>  
  
 <span data-ttu-id="6dc4f-223">ユーザー補助オブジェクトのプロパティの詳細については、「[説明プロパティの内容](/windows/win32/winauto/content-of-descriptive-properties)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-223">For more information about properties of accessible objects, see [Content of Descriptive Properties](/windows/win32/winauto/content-of-descriptive-properties).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.AccessibleName" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleRole" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleDescription" />
        <altmember cref="P:System.Windows.Forms.AccessibleObject.DefaultAction" />
      </Docs>
    </Member>
    <Member MemberName="AccessibleDescription">
      <MemberSignature Language="C#" Value="public string AccessibleDescription { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AccessibleDescription" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AccessibleDescription" />
      <MemberSignature Language="VB.NET" Value="Public Property AccessibleDescription As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AccessibleDescription { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AccessibleDescription : string with get, set" Usage="System.Windows.Forms.Control.AccessibleDescription" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-224">ユーザー補助クライアント アプリケーションによって使用される、コントロールの説明を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-224">Gets or sets the description of the control used by accessibility client applications.</span></span></summary>
        <value><span data-ttu-id="6dc4f-225">ユーザー補助クライアント アプリケーションによって使用されるコントロールの説明。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-225">The description of the control used by accessibility client applications.</span></span> <span data-ttu-id="6dc4f-226">既定では、 <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-226">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-227">オブジェクトの <xref:System.Windows.Forms.Control.AccessibleDescription%2A> プロパティは、オブジェクトの外観についての説明テキストを提供します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-227">An object's <xref:System.Windows.Forms.Control.AccessibleDescription%2A> property provides a textual description about an object's visual appearance.</span></span> <span data-ttu-id="6dc4f-228">この説明は、視覚障碍のあるユーザーや視覚障碍のあるユーザーのためにより多くのコンテキストを提供するために主に使用されますが、コンテキストの検索やその他のアプリケーションにも使用できます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-228">The description is primarily used to provide greater context for low-vision or blind users, but can also be used for context searching or other applications.</span></span>  
  
 <span data-ttu-id="6dc4f-229">説明が明確でない場合、またはオブジェクトの <xref:System.Windows.Forms.Control.AccessibleName%2A>、<xref:System.Windows.Forms.Control.AccessibleRole%2A>、<xref:System.Windows.Forms.AccessibleObject.State%2A>、および <xref:System.Windows.Forms.AccessibleObject.Value%2A> の各プロパティに基づいて冗長である場合は、<xref:System.Windows.Forms.Control.AccessibleDescription%2A> プロパティが必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-229">The <xref:System.Windows.Forms.Control.AccessibleDescription%2A> property is needed if the description is not obvious, or if it is redundant based on the object's <xref:System.Windows.Forms.Control.AccessibleName%2A>, <xref:System.Windows.Forms.Control.AccessibleRole%2A>, <xref:System.Windows.Forms.AccessibleObject.State%2A>, and <xref:System.Windows.Forms.AccessibleObject.Value%2A> properties.</span></span> <span data-ttu-id="6dc4f-230">たとえば、"OK" のボタンには追加情報は必要ありませんが、サボテンの画像を表示するボタンがあります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-230">For example, a button with "OK" would not need additional information, but a button that shows a picture of a cactus would.</span></span> <span data-ttu-id="6dc4f-231">[サボテン] ボタンの <xref:System.Windows.Forms.Control.AccessibleName%2A>、<xref:System.Windows.Forms.Control.AccessibleRole%2A> (および <xref:System.Windows.Forms.AccessibleObject.Help%2A>) の各プロパティにはその目的が記述されていますが、<xref:System.Windows.Forms.Control.AccessibleDescription%2A> プロパティでは、"サボテンの画像を表示するボタン" など、あまり明確でない情報が伝えられます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-231">The <xref:System.Windows.Forms.Control.AccessibleName%2A>, and <xref:System.Windows.Forms.Control.AccessibleRole%2A> (and perhaps <xref:System.Windows.Forms.AccessibleObject.Help%2A>) properties for the cactus button would describe its purpose, but the <xref:System.Windows.Forms.Control.AccessibleDescription%2A> property would convey information that is less tangible, such as "A button that shows a picture of a cactus."</span></span>  
  
 <span data-ttu-id="6dc4f-232">ユーザー補助オブジェクトのプロパティの詳細については、「[説明プロパティの内容](/windows/win32/winauto/content-of-descriptive-properties)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-232">For more information about properties of accessible objects, see [Content of Descriptive Properties](/windows/win32/winauto/content-of-descriptive-properties).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-233">次のコード例では、<xref:System.Windows.Forms.CheckBox> 派生クラス `MyCheckBox`のインスタンスを作成し、その <xref:System.Windows.Forms.ButtonBase.Image%2A> プロパティに <xref:System.Drawing.Image> を割り当てて、<xref:System.Windows.Forms.Control.AccessibleName%2A> プロパティと <xref:System.Windows.Forms.Control.AccessibleDescription%2A> プロパティを設定します。これは <xref:System.Windows.Forms.Control.Text%2A> プロパティが `null`ためです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-233">The following code example creates an instance of a <xref:System.Windows.Forms.CheckBox> derived class, `MyCheckBox`, assigns it an <xref:System.Drawing.Image> to its <xref:System.Windows.Forms.ButtonBase.Image%2A> property and sets the <xref:System.Windows.Forms.Control.AccessibleName%2A> and <xref:System.Windows.Forms.Control.AccessibleDescription%2A> properties, because the <xref:System.Windows.Forms.Control.Text%2A> property is `null`.</span></span> <span data-ttu-id="6dc4f-234">この例では、`MyForm`という名前の <xref:System.Windows.Forms.Form> が必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-234">This example requires that you have a <xref:System.Windows.Forms.Form> named `MyForm`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control.ControlAccessibleObject#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control.ControlAccessibleObject/CPP/controlaccessibility.cpp#2)]
 [!code-csharp[Windows.Forms.Control.ControlAccessibleObject#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control.ControlAccessibleObject/CS/controlaccessibility.cs#2)]
 [!code-vb[Windows.Forms.Control.ControlAccessibleObject#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control.ControlAccessibleObject/VB/controlaccessibility.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.AccessibleName" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleRole" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleDefaultActionDescription" />
        <altmember cref="P:System.Windows.Forms.AccessibleObject.Description" />
      </Docs>
    </Member>
    <Member MemberName="AccessibleName">
      <MemberSignature Language="C#" Value="public string AccessibleName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AccessibleName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AccessibleName" />
      <MemberSignature Language="VB.NET" Value="Public Property AccessibleName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AccessibleName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AccessibleName : string with get, set" Usage="System.Windows.Forms.Control.AccessibleName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-235">ユーザー補助クライアント アプリケーションによって使用されるコントロールの名前を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-235">Gets or sets the name of the control used by accessibility client applications.</span></span></summary>
        <value><span data-ttu-id="6dc4f-236">ユーザー補助クライアント アプリケーションによって使用されるコントロールの名前。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-236">The name of the control used by accessibility client applications.</span></span> <span data-ttu-id="6dc4f-237">既定では、 <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-237">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-238"><xref:System.Windows.Forms.Control.AccessibleName%2A> プロパティは、<xref:System.Windows.Forms.Button>内のテキスト、<xref:System.Windows.Forms.MenuItem>の名前、<xref:System.Windows.Forms.TextBox> コントロールの横に表示されるラベルなど、コンテナー内のオブジェクトを簡単に説明して識別するラベルです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-238">The <xref:System.Windows.Forms.Control.AccessibleName%2A> property is a label that briefly describes and identifies the object within its container, such as the text in a <xref:System.Windows.Forms.Button>, the name of a <xref:System.Windows.Forms.MenuItem>, or a label displayed next to a <xref:System.Windows.Forms.TextBox> control.</span></span>  
  
 <span data-ttu-id="6dc4f-239">ユーザー補助オブジェクトのプロパティの詳細については、「[説明プロパティの内容](/windows/win32/winauto/content-of-descriptive-properties)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-239">For more information about properties of accessible objects, see the "[Content of Descriptive Properties](/windows/win32/winauto/content-of-descriptive-properties).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-240">次のコード例では、<xref:System.Windows.Forms.CheckBox> 派生クラス `MyCheckBox`のインスタンスを作成し、その <xref:System.Windows.Forms.ButtonBase.Image%2A> プロパティに <xref:System.Drawing.Image> を割り当て、<xref:System.Windows.Forms.Control.AccessibleName%2A> プロパティが <xref:System.Windows.Forms.Control.AccessibleDescription%2A> ため、<xref:System.Windows.Forms.Control.Text%2A> プロパティと `null`プロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-240">The following code example creates an instance of a <xref:System.Windows.Forms.CheckBox> derived class, `MyCheckBox`, assigns it an <xref:System.Drawing.Image> to its <xref:System.Windows.Forms.ButtonBase.Image%2A> property and sets the <xref:System.Windows.Forms.Control.AccessibleName%2A> and <xref:System.Windows.Forms.Control.AccessibleDescription%2A> properties since the <xref:System.Windows.Forms.Control.Text%2A> property is `null`.</span></span> <span data-ttu-id="6dc4f-241">この例では、`MyForm`という名前の <xref:System.Windows.Forms.Form> が必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-241">This example requires that you have a <xref:System.Windows.Forms.Form> named `MyForm`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control.ControlAccessibleObject#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control.ControlAccessibleObject/CPP/controlaccessibility.cpp#2)]
 [!code-csharp[Windows.Forms.Control.ControlAccessibleObject#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control.ControlAccessibleObject/CS/controlaccessibility.cs#2)]
 [!code-vb[Windows.Forms.Control.ControlAccessibleObject#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control.ControlAccessibleObject/VB/controlaccessibility.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.AccessibleDescription" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleRole" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleDefaultActionDescription" />
        <altmember cref="P:System.Windows.Forms.AccessibleObject.Name" />
      </Docs>
    </Member>
    <Member MemberName="AccessibleRole">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.AccessibleRole AccessibleRole { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.AccessibleRole AccessibleRole" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AccessibleRole" />
      <MemberSignature Language="VB.NET" Value="Public Property AccessibleRole As AccessibleRole" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::AccessibleRole AccessibleRole { System::Windows::Forms::AccessibleRole get(); void set(System::Windows::Forms::AccessibleRole value); };" />
      <MemberSignature Language="F#" Value="member this.AccessibleRole : System.Windows.Forms.AccessibleRole with get, set" Usage="System.Windows.Forms.Control.AccessibleRole" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleRole</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-242">コントロールのアクセスできる役割を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-242">Gets or sets the accessible role of the control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-243"><see cref="T:System.Windows.Forms.AccessibleRole" /> の値の 1 つです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-243">One of the values of <see cref="T:System.Windows.Forms.AccessibleRole" />.</span></span> <span data-ttu-id="6dc4f-244">既定では、 <see langword="Default" />です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-244">The default is <see langword="Default" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-245"><xref:System.Windows.Forms.Control.AccessibleRole%2A> プロパティは、オブジェクトがどのような種類のユーザー インターフェイス要素であるかを説明します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-245">The <xref:System.Windows.Forms.Control.AccessibleRole%2A> property describes what kind of user interface element an object is.</span></span> <span data-ttu-id="6dc4f-246">コントロールの役割が決定できない場合、<xref:System.Windows.Forms.Control.AccessibleRole%2A> プロパティは `Default` に設定されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-246">If the control's role cannot be determined, the <xref:System.Windows.Forms.Control.AccessibleRole%2A> property is set to `Default`.</span></span>  
  
 <span data-ttu-id="6dc4f-247">ユーザー補助オブジェクトのプロパティの詳細については、「[説明プロパティの内容](/windows/win32/winauto/content-of-descriptive-properties)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-247">For more information about properties of accessible objects, see [Content of Descriptive Properties](/windows/win32/winauto/content-of-descriptive-properties).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="6dc4f-248">代入された値が、<see cref="T:System.Windows.Forms.AccessibleRole" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-248">The value assigned is not one of the <see cref="T:System.Windows.Forms.AccessibleRole" /> values.</span></span></exception>
        <altmember cref="T:System.Windows.Forms.AccessibleRole" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleDescription" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleName" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleDefaultActionDescription" />
        <altmember cref="P:System.Windows.Forms.AccessibleObject.Role" />
      </Docs>
    </Member>
    <Member MemberName="AllowDrop">
      <MemberSignature Language="C#" Value="public virtual bool AllowDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDrop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AllowDrop" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AllowDrop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool AllowDrop { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowDrop : bool with get, set" Usage="System.Windows.Forms.Control.AllowDrop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-249">ユーザーがコントロールにドラッグしたデータを、そのコントロールが受け入れることができるかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-249">Gets or sets a value indicating whether the control can accept data that the user drags onto it.</span></span></summary>
        <value><span data-ttu-id="6dc4f-250">コントロールでドラッグ アンド ドロップ操作を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-250"><see langword="true" /> if drag-and-drop operations are allowed in the control; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6dc4f-251">既定では、 <see langword="false" />です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-251">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6dc4f-252">次のコード例では、ユーザーがイメージまたはイメージファイルをフォームにドラッグし、そのファイルがドロップされた時点で表示されるようにすることができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-252">The following code example enables the user to drag an image or image file onto the form, and have it be displayed at the point on it is dropped.</span></span> <span data-ttu-id="6dc4f-253"><xref:System.Windows.Forms.Control.OnPaint%2A> メソッドは、フォームが描画されるたびにイメージを再描画するためにオーバーライドされます。それ以外の場合、イメージは次の再描画が行われるまで保持されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-253">The <xref:System.Windows.Forms.Control.OnPaint%2A> method is overridden to repaint the image each time the form is painted; otherwise the image would only persist until the next repainting.</span></span> <span data-ttu-id="6dc4f-254"><xref:System.Windows.Forms.Control.DragEnter> イベント処理メソッドは、フォームにドラッグされるデータの種類を決定し、適切なフィードバックを提供します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-254">The <xref:System.Windows.Forms.Control.DragEnter> event-handling method determines the type of data being dragged into the form and provides the appropriate feedback.</span></span> <span data-ttu-id="6dc4f-255">データから <xref:System.Drawing.Image> を作成できる場合は、<xref:System.Windows.Forms.Control.DragDrop> イベント処理メソッドによってフォームに画像が表示されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-255">The <xref:System.Windows.Forms.Control.DragDrop> event-handling method displays the image on the form, if an <xref:System.Drawing.Image> can be created from the data.</span></span> <span data-ttu-id="6dc4f-256"><xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType> と <xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType> の値は画面座標であるため、この例では <xref:System.Windows.Forms.Control.PointToClient%2A> メソッドを使用してそれらをクライアント座標に変換します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-256">Because the <xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType> and <xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType> values are screen coordinates, the example uses the <xref:System.Windows.Forms.Control.PointToClient%2A> method to convert them to client coordinates.</span></span>  
  
 [!code-cpp[Windows.Forms.Control.DragOperations#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CPP/imagedrag.cpp#1)]
 [!code-csharp[Windows.Forms.Control.DragOperations#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CS/imagedrag.cs#1)]
 [!code-vb[Windows.Forms.Control.DragOperations#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/VB/imagedrag.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-257">派生クラスの <see cref="P:System.Windows.Forms.Control.AllowDrop" /> プロパティをオーバーライドする場合は、基本クラスの <see cref="P:System.Windows.Forms.Control.AllowDrop" /> プロパティを使用して、基本実装を拡張します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-257">When overriding the <see cref="P:System.Windows.Forms.Control.AllowDrop" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.AllowDrop" /> property to extend the base implementation.</span></span> <span data-ttu-id="6dc4f-258">それ以外の場合は、すべての実装を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-258">Otherwise, you must provide all the implementation.</span></span> <span data-ttu-id="6dc4f-259"><see cref="P:System.Windows.Forms.Control.AllowDrop" /> プロパティの <see langword="get" /> と <see langword="set" /> の両方のアクセサーをオーバーライドする必要はありません。必要に応じて、オーバーライドできるのは1つだけです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-259">You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.AllowDrop" /> property; you can override only one if needed.</span></span></para></block>
        <altmember cref="T:System.Windows.Forms.DragEventArgs" />
        <altmember cref="E:System.Windows.Forms.Control.DragOver" />
        <altmember cref="E:System.Windows.Forms.Control.DragDrop" />
        <altmember cref="E:System.Windows.Forms.Control.DragEnter" />
        <altmember cref="E:System.Windows.Forms.Control.DragLeave" />
        <altmember cref="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)" />
      </Docs>
    </Member>
    <Member MemberName="Anchor">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.AnchorStyles Anchor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.AnchorStyles Anchor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Anchor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Anchor As AnchorStyles" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::AnchorStyles Anchor { System::Windows::Forms::AnchorStyles get(); void set(System::Windows::Forms::AnchorStyles value); };" />
      <MemberSignature Language="F#" Value="member this.Anchor : System.Windows.Forms.AnchorStyles with get, set" Usage="System.Windows.Forms.Control.Anchor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AnchorStyles</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-260">コントロールがバインドされるコンテナーの端を取得または設定し、親のサイズ変更時に、コントロールのサイズがどのように変化するかを決定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-260">Gets or sets the edges of the container to which a control is bound and determines how a control is resized with its parent.</span></span></summary>
        <value><span data-ttu-id="6dc4f-261"><see cref="T:System.Windows.Forms.AnchorStyles" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-261">A bitwise combination of the <see cref="T:System.Windows.Forms.AnchorStyles" /> values.</span></span> <span data-ttu-id="6dc4f-262">既定値は <see langword="Top" /> および <see langword="Left" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-262">The default is <see langword="Top" /> and <see langword="Left" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-263">親コントロールのサイズが変更されたときにコントロールのサイズを自動的に変更する方法を定義するには、<xref:System.Windows.Forms.Control.Anchor%2A> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-263">Use the <xref:System.Windows.Forms.Control.Anchor%2A> property to define how a control is automatically resized as its parent control is resized.</span></span> <span data-ttu-id="6dc4f-264">親コントロールにコントロールを固定すると、親コントロールのサイズが変更されても、固定された端が親コントロールの端と同じ位置に維持されるようになります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-264">Anchoring a control to its parent control ensures that the anchored edges remain in the same position relative to the edges of the parent control when the parent control is resized.</span></span>  
  
 <span data-ttu-id="6dc4f-265">コントロールは、そのコンテナーの1つ以上の端に固定できます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-265">You can anchor a control to one or more edges of its container.</span></span> <span data-ttu-id="6dc4f-266">たとえば、<xref:System.Windows.Forms.Control.Anchor%2A> プロパティ値が `Top` および `Bottom`に設定されている <xref:System.Windows.Forms.Button> の <xref:System.Windows.Forms.Form> がある場合、<xref:System.Windows.Forms.Button> の <xref:System.Windows.Forms.Form> が増加すると <xref:System.Windows.Forms.Control.Height%2A> の上端と下端に固定された距離を維持するために、<xref:System.Windows.Forms.Form> が拡張されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-266">For example, if you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.Button> whose <xref:System.Windows.Forms.Control.Anchor%2A> property value is set to `Top` and `Bottom`, the <xref:System.Windows.Forms.Button> is stretched to maintain the anchored distance to the top and bottom edges of the <xref:System.Windows.Forms.Form> as the <xref:System.Windows.Forms.Control.Height%2A> of the <xref:System.Windows.Forms.Form> is increased.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-267"><xref:System.Windows.Forms.Control.Anchor%2A> プロパティと <xref:System.Windows.Forms.Control.Dock%2A> プロパティは相互に排他的です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-267">The <xref:System.Windows.Forms.Control.Anchor%2A> and <xref:System.Windows.Forms.Control.Dock%2A> properties are mutually exclusive.</span></span> <span data-ttu-id="6dc4f-268">一度に設定できるのは1つだけです。最後の1つのセットが優先されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-268">Only one can be set at a time, and the last one set takes precedence.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-269">次のコード例では、フォームに <xref:System.Windows.Forms.Button> を追加し、その共通プロパティのいくつかを設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-269">The following code example adds a <xref:System.Windows.Forms.Button> to a form and sets some of its common properties.</span></span> <span data-ttu-id="6dc4f-270">この例では、フォームのサイズが変更されたときの相対位置を維持できるように、ボタンをフォームの右下隅に固定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-270">The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized.</span></span> <span data-ttu-id="6dc4f-271">次に、<xref:System.Windows.Forms.Control.BackgroundImage%2A> を設定し、ボタンのサイズを <xref:System.Drawing.Image>と同じサイズに変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-271">Next it sets the <xref:System.Windows.Forms.Control.BackgroundImage%2A> and resizes the button to the same size as the <xref:System.Drawing.Image>.</span></span> <span data-ttu-id="6dc4f-272">この例では、<xref:System.Windows.Forms.Control.TabStop%2A> を `true` に設定し、<xref:System.Windows.Forms.Control.TabIndex%2A> プロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-272">The example then sets the <xref:System.Windows.Forms.Control.TabStop%2A> to `true` and sets the <xref:System.Windows.Forms.Control.TabIndex%2A> property.</span></span> <span data-ttu-id="6dc4f-273">最後に、ボタンの <xref:System.Windows.Forms.Control.Click> イベントを処理するイベントハンドラーを追加します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-273">Lastly, it adds an event handler to handle the <xref:System.Windows.Forms.Control.Click> event of the button.</span></span> <span data-ttu-id="6dc4f-274">この例では、`imageList1`という名前の <xref:System.Windows.Forms.ImageList> が必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-274">This example requires that you have an <xref:System.Windows.Forms.ImageList> named `imageList1`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#3)]
 [!code-csharp[Windows.Forms.Control Properties#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#3)]
 [!code-vb[Windows.Forms.Control Properties#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-275">派生クラスの <see cref="P:System.Windows.Forms.Control.Anchor" /> プロパティをオーバーライドする場合は、基本クラスの <see cref="P:System.Windows.Forms.Control.Anchor" /> プロパティを使用して、基本実装を拡張します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-275">When overriding the <see cref="P:System.Windows.Forms.Control.Anchor" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.Anchor" /> property to extend the base implementation.</span></span> <span data-ttu-id="6dc4f-276">それ以外の場合は、すべての実装を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-276">Otherwise, you must provide all the implementation.</span></span> <span data-ttu-id="6dc4f-277"><see cref="P:System.Windows.Forms.Control.Anchor" /> プロパティの <see langword="get" /> と <see langword="set" /> の両方のアクセサーをオーバーライドする必要はありません。必要に応じて、オーバーライドできるのは1つだけです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-277">You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.Anchor" /> property; you can override only one if needed.</span></span></para></block>
        <altmember cref="T:System.Windows.Forms.AnchorStyles" />
        <altmember cref="P:System.Windows.Forms.Control.Dock" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="AutoScrollOffset">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Point AutoScrollOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point AutoScrollOffset" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AutoScrollOffset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AutoScrollOffset As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Point AutoScrollOffset { System::Drawing::Point get(); void set(System::Drawing::Point value); };" />
      <MemberSignature Language="F#" Value="member this.AutoScrollOffset : System.Drawing.Point with get, set" Usage="System.Windows.Forms.Control.AutoScrollOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Point), "0, 0")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-278"><see cref="M:System.Windows.Forms.ScrollableControl.ScrollControlIntoView(System.Windows.Forms.Control)" /> でのこのコントロールのスクロール先を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-278">Gets or sets where this control is scrolled to in <see cref="M:System.Windows.Forms.ScrollableControl.ScrollControlIntoView(System.Windows.Forms.Control)" />.</span></span></summary>
        <value><span data-ttu-id="6dc4f-279">スクロール位置を指定する <see cref="T:System.Drawing.Point" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-279">A <see cref="T:System.Drawing.Point" /> specifying the scroll location.</span></span> <span data-ttu-id="6dc4f-280">既定値は、コントロールの左上隅です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-280">The default is the upper-left corner of the control.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSize">
      <MemberSignature Language="C#" Value="public virtual bool AutoSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AutoSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AutoSize As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool AutoSize { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoSize : bool with get, set" Usage="System.Windows.Forms.Control.AutoSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-281">このクラスでは、このプロパティは使用されません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-281">This property is not relevant for this class.</span></span></summary>
        <value><span data-ttu-id="6dc4f-282">有効である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-282"><see langword="true" /> if enabled; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-283">このクラスでは、このプロパティは使用されません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-283">This property is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSizeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AutoSizeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AutoSizeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.AutoSizeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AutoSizeChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ AutoSizeChanged;" />
      <MemberSignature Language="F#" Value="member this.AutoSizeChanged : EventHandler " Usage="member this.AutoSizeChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-284">このクラスでは、このイベントは使用されません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-284">This event is not relevant for this class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-285">このクラスでは、このイベントは使用されません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-285">This event is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.BackColor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property BackColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color BackColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.BackColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.Control.BackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-501)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-286">コントロールの背景色を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-286">Gets or sets the background color for the control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-287">コントロールの背景色を表す <see cref="T:System.Drawing.Color" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-287">A <see cref="T:System.Drawing.Color" /> that represents the background color of the control.</span></span> <span data-ttu-id="6dc4f-288">既定値は <see cref="P:System.Windows.Forms.Control.DefaultBackColor" /> プロパティの値です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-288">The default is the value of the <see cref="P:System.Windows.Forms.Control.DefaultBackColor" /> property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-289"><xref:System.Windows.Forms.Control.BackColor%2A> プロパティは、<xref:System.Windows.Forms.ControlStyles?displayProperty=nameWithType> の `SupportsTransparentBackColor` 値が `true`に設定されていない限り、透明色をサポートしません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-289">The <xref:System.Windows.Forms.Control.BackColor%2A> property does not support transparent colors unless the `SupportsTransparentBackColor` value of <xref:System.Windows.Forms.ControlStyles?displayProperty=nameWithType> is set to `true`.</span></span>  
  
 <span data-ttu-id="6dc4f-290"><xref:System.Windows.Forms.Control.BackColor%2A> プロパティはアンビエントプロパティです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-290">The <xref:System.Windows.Forms.Control.BackColor%2A> property is an ambient property.</span></span> <span data-ttu-id="6dc4f-291">アンビエントプロパティは、設定されていない場合、親コントロールから取得されるコントロールプロパティです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-291">An ambient property is a control property that, if not set, is retrieved from the parent control.</span></span> <span data-ttu-id="6dc4f-292">たとえば、<xref:System.Windows.Forms.Button> は、既定では親 <xref:System.Windows.Forms.Form> と同じ <xref:System.Windows.Forms.Control.BackColor%2A> を持ちます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-292">For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default.</span></span> <span data-ttu-id="6dc4f-293">アンビエントプロパティの詳細については、「<xref:System.Windows.Forms.AmbientProperties> クラス」または「<xref:System.Windows.Forms.Control> クラスの概要」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-293">For more information about ambient properties, see the <xref:System.Windows.Forms.AmbientProperties> class or the <xref:System.Windows.Forms.Control> class overview.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-294">次のコード例では、コントロールの <xref:System.Windows.Forms.Control.BackColor%2A> と <xref:System.Windows.Forms.Control.ForeColor%2A> を既定のシステムカラーに設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-294">The following code example sets the <xref:System.Windows.Forms.Control.BackColor%2A> and <xref:System.Windows.Forms.Control.ForeColor%2A> of the controls to the default system colors.</span></span> <span data-ttu-id="6dc4f-295">コントロールに子コントロールがある場合、コードは再帰的にそれ自体を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-295">The code recursively calls itself if the control has any child controls.</span></span> <span data-ttu-id="6dc4f-296">このコード例では、少なくとも1つの子コントロールを持つ <xref:System.Windows.Forms.Form> が必要です。ただし、<xref:System.Windows.Forms.Panel> や <xref:System.Windows.Forms.GroupBox>のように、独自の子コントロールを持つ子コンテナーコントロールは、再帰のデモンストレーションをより適切に行うことができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-296">This code example requires that you have a <xref:System.Windows.Forms.Form> with at least one child control; however, a child container control, like a <xref:System.Windows.Forms.Panel> or <xref:System.Windows.Forms.GroupBox>, with its own child control(s) would better demonstrate the recursion.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#1)]
 [!code-csharp[Windows.Forms.Control Properties#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#1)]
 [!code-vb[Windows.Forms.Control Properties#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-297">派生クラスの <see cref="P:System.Windows.Forms.Control.BackColor" /> プロパティをオーバーライドする場合は、基本クラスの <see cref="P:System.Windows.Forms.Control.BackColor" /> プロパティを使用して、基本実装を拡張します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-297">When overriding the <see cref="P:System.Windows.Forms.Control.BackColor" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.BackColor" /> property to extend the base implementation.</span></span> <span data-ttu-id="6dc4f-298">それ以外の場合は、すべての実装を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-298">Otherwise, you must provide all the implementation.</span></span> <span data-ttu-id="6dc4f-299"><see cref="P:System.Windows.Forms.Control.BackColor" /> プロパティの <see langword="get" /> と <see langword="set" /> の両方のアクセサーをオーバーライドする必要はありません。必要に応じて、オーバーライドできるのは1つだけです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-299">You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.BackColor" /> property; you can override only one if needed.</span></span></para></block>
        <altmember cref="T:System.Windows.Forms.AmbientProperties" />
        <altmember cref="E:System.Windows.Forms.Control.BackColorChanged" />
      </Docs>
    </Member>
    <Member MemberName="BackColorChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackColorChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackColorChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.BackColorChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackColorChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackColorChanged;" />
      <MemberSignature Language="F#" Value="member this.BackColorChanged : EventHandler " Usage="member this.BackColorChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-300"><see cref="P:System.Windows.Forms.Control.BackColor" /> プロパティの値が変化したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-300">Occurs when the value of the <see cref="P:System.Windows.Forms.Control.BackColor" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-301">このイベントは、プログラムによる変更またはユーザーの操作によって <xref:System.Windows.Forms.Control.BackColor%2A> プロパティが変更された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-301">This event is raised if the <xref:System.Windows.Forms.Control.BackColor%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="6dc4f-302">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-302">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-303">次のコード例は、<xref:System.Windows.Forms.Control.Text%2A> プロパティの値が変更されたときに実行されるイベントハンドラーです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-303">The following code example is an event handler that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="6dc4f-304"><xref:System.Windows.Forms.Control> クラスには、対応する*propertyname*値が変更されたときに発生する名前パターン*PropertyName*`Changed` を持ついくつかのメソッドがあります (*propertyname*は対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-304">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern *PropertyName*`Changed` that are raised when the corresponding *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="6dc4f-305">次のコード例では、通貨データを表示する <xref:System.Windows.Forms.TextBox> の <xref:System.Windows.Forms.Control.ForeColor%2A> を変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-305">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data.</span></span> <span data-ttu-id="6dc4f-306">この例では、テキストを10進数に変換し、数値が負の場合は <xref:System.Windows.Forms.Control.ForeColor%2A> を <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> に変更し、数値が正の値の場合は <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> に変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-306">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="6dc4f-307">この例では、<xref:System.Windows.Forms.TextBox>を含む <xref:System.Windows.Forms.Form> が必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-307">This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CPP/propertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CS/propertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/VB/propertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.BackColor" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)" />
        <altmember cref="T:System.Drawing.Color" />
      </Docs>
    </Member>
    <Member MemberName="BackgroundImage">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Image BackgroundImage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Image BackgroundImage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.BackgroundImage" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property BackgroundImage As Image" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Image ^ BackgroundImage { System::Drawing::Image ^ get(); void set(System::Drawing::Image ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BackgroundImage : System.Drawing.Image with get, set" Usage="System.Windows.Forms.Control.BackgroundImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-308">コントロールに表示される背景イメージを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-308">Gets or sets the background image displayed in the control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-309">コントロールの背景に表示するイメージを表す <see cref="T:System.Drawing.Image" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-309">An <see cref="T:System.Drawing.Image" /> that represents the image to display in the background of the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
-   <span data-ttu-id="6dc4f-310">コントロールにグラフィックイメージを配置するには、<xref:System.Windows.Forms.Control.BackgroundImage%2A> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-310">Use the <xref:System.Windows.Forms.Control.BackgroundImage%2A> property to place a graphic image onto a control.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-311">半透明または透明な色の画像は、Windows フォームコントロールでは背景画像としてサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-311">Images with translucent or transparent colors are not supported by Windows Forms controls as background images.</span></span>  
>   
>  <span data-ttu-id="6dc4f-312">このプロパティは、<xref:System.Windows.Forms.Form.RightToLeftLayout%2A> プロパティが `true`子コントロールではサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-312">This property is not supported on child controls whose <xref:System.Windows.Forms.Form.RightToLeftLayout%2A> property is `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-313">次のコード例では、フォームに <xref:System.Windows.Forms.Button> を追加し、その共通プロパティのいくつかを設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-313">The following code example adds a <xref:System.Windows.Forms.Button> to a form and sets some of its common properties.</span></span> <span data-ttu-id="6dc4f-314">この例では、フォームのサイズが変更されたときの相対位置を維持できるように、ボタンをフォームの右下隅に固定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-314">The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized.</span></span> <span data-ttu-id="6dc4f-315">次に、<xref:System.Windows.Forms.Control.BackgroundImage%2A> を設定し、ボタンのサイズを <xref:System.Drawing.Image>と同じサイズに変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-315">Next it sets the <xref:System.Windows.Forms.Control.BackgroundImage%2A> and resizes the button to the same size as the <xref:System.Drawing.Image>.</span></span> <span data-ttu-id="6dc4f-316">この例では、<xref:System.Windows.Forms.Control.TabStop%2A> を `true` に設定し、<xref:System.Windows.Forms.Control.TabIndex%2A> プロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-316">The example then sets the <xref:System.Windows.Forms.Control.TabStop%2A> to `true` and sets the <xref:System.Windows.Forms.Control.TabIndex%2A> property.</span></span> <span data-ttu-id="6dc4f-317">最後に、ボタンの <xref:System.Windows.Forms.Control.Click> イベントを処理するイベントハンドラーを追加します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-317">Lastly, it adds an event handler to handle the <xref:System.Windows.Forms.Control.Click> event of the button.</span></span> <span data-ttu-id="6dc4f-318">この例では、`imageList1`という名前の <xref:System.Windows.Forms.ImageList> が必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-318">This example requires that you have an <xref:System.Windows.Forms.ImageList> named `imageList1`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#3)]
 [!code-csharp[Windows.Forms.Control Properties#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#3)]
 [!code-vb[Windows.Forms.Control Properties#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-319">派生クラスの <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> プロパティをオーバーライドする場合は、基本クラスの <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> プロパティを使用して、基本実装を拡張します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-319">When overriding the <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> property to extend the base implementation.</span></span> <span data-ttu-id="6dc4f-320">それ以外の場合は、すべての実装を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-320">Otherwise, you must provide all the implementation.</span></span> <span data-ttu-id="6dc4f-321"><see cref="P:System.Windows.Forms.Control.BackgroundImage" /> プロパティの <see langword="get" /> と <see langword="set" /> の両方のアクセサーをオーバーライドする必要はありません。必要に応じて、オーバーライドできるのは1つだけです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-321">You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> property; you can override only one if needed.</span></span></para></block>
        <altmember cref="T:System.Drawing.Image" />
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageChanged" />
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImageLayout" />
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.BackgroundImageChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundImageChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundImageChanged;" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageChanged : EventHandler " Usage="member this.BackgroundImageChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-322"><see cref="P:System.Windows.Forms.Control.BackgroundImage" /> プロパティの値が変化したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-322">Occurs when the value of the <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-323">このイベントは、プログラムによる変更またはユーザーの操作によって <xref:System.Windows.Forms.Control.BackgroundImage%2A> プロパティが変更された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-323">This event is raised if the <xref:System.Windows.Forms.Control.BackgroundImage%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="6dc4f-324">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-324">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-325">次のコード例は、<xref:System.Windows.Forms.Control.Text%2A> プロパティの値が変更されたときに実行されるイベントハンドラーです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-325">The following code example is an event handler that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="6dc4f-326"><xref:System.Windows.Forms.Control> クラスには、対応する*propertyname*値が変更されたときに発生する名前パターン*PropertyName*`Changed` を持ついくつかのメソッドがあります (*propertyname*は対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-326">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern *PropertyName*`Changed` that are raised when the corresponding *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="6dc4f-327">次のコード例では、通貨データを表示する <xref:System.Windows.Forms.TextBox> の <xref:System.Windows.Forms.Control.ForeColor%2A> を変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-327">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data.</span></span> <span data-ttu-id="6dc4f-328">この例では、テキストを10進数に変換し、数値が負の場合は <xref:System.Windows.Forms.Control.ForeColor%2A> を <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> に変更し、数値が正の値の場合は <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> に変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-328">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="6dc4f-329">この例では、<xref:System.Windows.Forms.TextBox>を含む <xref:System.Windows.Forms.Form> が必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-329">This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CPP/propertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CS/propertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/VB/propertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImage" />
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImageLayout" />
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" />
        <altmember cref="T:System.Drawing.Image" />
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayout">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.ImageLayout BackgroundImageLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImageLayout BackgroundImageLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.BackgroundImageLayout" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property BackgroundImageLayout As ImageLayout" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::ImageLayout BackgroundImageLayout { System::Windows::Forms::ImageLayout get(); void set(System::Windows::Forms::ImageLayout value); };" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageLayout : System.Windows.Forms.ImageLayout with get, set" Usage="System.Windows.Forms.Control.BackgroundImageLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-330"><see cref="T:System.Windows.Forms.ImageLayout" /> 列挙型で定義される背景画像のレイアウトを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-330">Gets or sets the background image layout as defined in the <see cref="T:System.Windows.Forms.ImageLayout" /> enumeration.</span></span></summary>
        <value><span data-ttu-id="6dc4f-331"><see cref="T:System.Windows.Forms.ImageLayout" /> の値の 1 つ (<see cref="F:System.Windows.Forms.ImageLayout.Center" />、<see cref="F:System.Windows.Forms.ImageLayout.None" />、<see cref="F:System.Windows.Forms.ImageLayout.Stretch" />、<see cref="F:System.Windows.Forms.ImageLayout.Tile" />、または <see cref="F:System.Windows.Forms.ImageLayout.Zoom" />)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-331">One of the values of <see cref="T:System.Windows.Forms.ImageLayout" /> (<see cref="F:System.Windows.Forms.ImageLayout.Center" /> , <see cref="F:System.Windows.Forms.ImageLayout.None" />, <see cref="F:System.Windows.Forms.ImageLayout.Stretch" />, <see cref="F:System.Windows.Forms.ImageLayout.Tile" />, or <see cref="F:System.Windows.Forms.ImageLayout.Zoom" />).</span></span> <span data-ttu-id="6dc4f-332">既定値は <see cref="F:System.Windows.Forms.ImageLayout.Tile" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-332"><see cref="F:System.Windows.Forms.ImageLayout.Tile" /> is the default value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-333">コントロールに配置したイメージの位置と動作を指定するには、<xref:System.Windows.Forms.Control.BackgroundImageLayout%2A> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-333">Use the <xref:System.Windows.Forms.Control.BackgroundImageLayout%2A> property to specify the position and behavior of an image you have placed onto a control.</span></span> <span data-ttu-id="6dc4f-334"><xref:System.Windows.Forms.Control.BackgroundImageLayout%2A> は、<xref:System.Windows.Forms.Control.BackgroundImage%2A> プロパティが設定されている場合にのみ有効になります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-334"><xref:System.Windows.Forms.Control.BackgroundImageLayout%2A> takes effect only if the <xref:System.Windows.Forms.Control.BackgroundImage%2A> property is set.</span></span>  
  
 <span data-ttu-id="6dc4f-335"><xref:System.Windows.Forms.Control.BackgroundImageLayout%2A> を <xref:System.Windows.Forms.ImageLayout.Tile>以外に設定すると、大きなイメージのパフォーマンスを向上させることができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-335">You can increase performance for large images if you set <xref:System.Windows.Forms.Control.BackgroundImageLayout%2A> to something other than <xref:System.Windows.Forms.ImageLayout.Tile>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="6dc4f-336">指定した列挙値が存在しません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-336">The specified enumeration value does not exist.</span></span></exception>
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImage" />
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged" />
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageChanged" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageLayoutChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundImageLayoutChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundImageLayoutChanged;" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageLayoutChanged : EventHandler " Usage="member this.BackgroundImageLayoutChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-337"><see cref="P:System.Windows.Forms.Control.BackgroundImageLayout" /> プロパティが変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-337">Occurs when the <see cref="P:System.Windows.Forms.Control.BackgroundImageLayout" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-338">このイベントは、<xref:System.Windows.Forms.Control.BackgroundImageLayout%2A> プロパティがプログラムによって、またはユーザーの操作によって変更された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-338">This event is raised if the <xref:System.Windows.Forms.Control.BackgroundImageLayout%2A> property changes either programmatically or by user interaction.</span></span>  
  
 <span data-ttu-id="6dc4f-339">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-339">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-340">このメンバーの使用例を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-340">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="6dc4f-341">この例では、イベントハンドラーは、<xref:System.Windows.Forms.Control.BackgroundImageLayoutChanged> イベントの発生を報告します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-341">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.BackgroundImageLayoutChanged> event.</span></span> <span data-ttu-id="6dc4f-342">このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-342">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="6dc4f-343">複数のイベントまたは頻繁に発生するイベントについてレポートするには、<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> を <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> に置き換えるか、複数行 <xref:System.Windows.Forms.TextBox>にメッセージを追加することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-343">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="6dc4f-344">コード例を実行するには、<xref:System.Windows.Forms.Button> や <xref:System.Windows.Forms.ComboBox>などの <xref:System.Windows.Forms.Control>から継承する型のインスタンスを含むプロジェクトに貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-344">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="6dc4f-345">次に、インスタンスに `Control1` という名前を付け、イベントハンドラーが <xref:System.Windows.Forms.Control.BackgroundImageLayoutChanged> イベントに関連付けられていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-345">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.BackgroundImageLayoutChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#9)]
 [!code-vb[System.Windows.Forms.EventExamples#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImage" />
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImageLayout" />
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageChanged" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6dc4f-346">コントロールの基になるハンドルが作成されたスレッドでデリゲートを非同期的に実行します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-346">Executes a delegate asynchronously on the thread that the control's underlying handle was created on.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : Delegate -&gt; IAsyncResult" Usage="control.BeginInvoke method" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="6dc4f-347">パラメーターをとらないメソッドへのデリゲート。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-347">A delegate to a method that takes no parameters.</span></span></param>
        <summary><span data-ttu-id="6dc4f-348">コントロールの基になるハンドルが作成されたスレッド上で、指定したデリゲートを非同期的に実行します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-348">Executes the specified delegate asynchronously on the thread that the control's underlying handle was created on.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-349"><see cref="T:System.IAsyncResult" /> 操作の結果を表す <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-349">An <see cref="T:System.IAsyncResult" /> that represents the result of the <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" /> operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-350">デリゲートは非同期的に呼び出され、このメソッドは直ちに制御を返します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-350">The delegate is called asynchronously, and this method returns immediately.</span></span> <span data-ttu-id="6dc4f-351">このメソッドは、コントロールのハンドルを所有するスレッドでも、任意のスレッドから呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-351">You can call this method from any thread, even the thread that owns the control's handle.</span></span> <span data-ttu-id="6dc4f-352">コントロールのハンドルがまだ存在しない場合、このメソッドは、ウィンドウハンドルを持つコントロールまたはフォームが見つかるまで、コントロールの親チェインを検索します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-352">If the control's handle does not exist yet, this method searches up the control's parent chain until it finds a control or form that does have a window handle.</span></span> <span data-ttu-id="6dc4f-353">適切なハンドルが見つからない場合、<xref:System.Windows.Forms.Control.BeginInvoke%2A> は例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-353">If no appropriate handle can be found, <xref:System.Windows.Forms.Control.BeginInvoke%2A> will throw an exception.</span></span> <span data-ttu-id="6dc4f-354">デリゲートメソッド内の例外は、トラップされていないと見なされ、アプリケーションのトラップされていない例外ハンドラーに送信されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-354">Exceptions within the delegate method are considered untrapped and will be sent to the application's untrapped exception handler.</span></span>  
  
 <span data-ttu-id="6dc4f-355">必要を <xref:System.Windows.Forms.Control.EndInvoke%2A> 呼び出して、デリゲートから戻り値を取得することもできます (の場合)。ただし、これは必須ではありません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-355">You can call <xref:System.Windows.Forms.Control.EndInvoke%2A> to retrieve the return value from the delegate, if neccesary, but this is not required.</span></span> <span data-ttu-id="6dc4f-356">戻り値を取得できるようになるまで、<xref:System.Windows.Forms.Control.EndInvoke%2A> はブロックされます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-356"><xref:System.Windows.Forms.Control.EndInvoke%2A> will block until the return value can be retrieved.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-357">コントロールのほとんどのメソッドは、コントロールが作成されたスレッドからのみ呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-357">Most methods on a control can only be called from the thread where the control was created.</span></span> <span data-ttu-id="6dc4f-358"><xref:System.Windows.Forms.Control.InvokeRequired%2A> プロパティに加えて、スレッドセーフであるコントロールには、<xref:System.Windows.Forms.Control.Invoke%2A>、<xref:System.Windows.Forms.Control.BeginInvoke%2A>、<xref:System.Windows.Forms.Control.EndInvoke%2A>、および <xref:System.Windows.Forms.Control.CreateGraphics%2A> コントロールのハンドルが既に作成されている場合の4つのメソッドがあります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-358">In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe: <xref:System.Windows.Forms.Control.Invoke%2A>, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A>, and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created.</span></span> <span data-ttu-id="6dc4f-359">バックグラウンドスレッドでコントロールのハンドルが作成される前に <xref:System.Windows.Forms.Control.CreateGraphics%2A> を呼び出すと、無効なクロススレッド呼び出しが発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-359">Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control's handle has been created on a background thread can cause illegal cross thread calls.</span></span> <span data-ttu-id="6dc4f-360">その他のすべてのメソッド呼び出しでは、いずれかの invoke メソッドを使用して、コントロールのスレッドへの呼び出しをマーシャリングする必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-360">For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.</span></span> <span data-ttu-id="6dc4f-361">Invoke メソッドは、常にコントロールのスレッドでコールバックを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-361">The invoke methods always invoke their callbacks on the control's thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-362">メッセージを処理する必要があるスレッドがアクティブでなくなった場合は、例外がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-362">An exception might be thrown if the thread that should process the message is no longer active.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-363">次のコード例は、<xref:System.Windows.Forms.Control.BeginInvoke%2A> メソッドの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-363">The following code example demonstrates a use of the <xref:System.Windows.Forms.Control.BeginInvoke%2A> method.</span></span>  
  
 [!code-cpp[Control_BeginInvoke#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_BeginInvoke/CPP/control_begininvoke.cpp#2)]
 [!code-csharp[Control_BeginInvoke#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_BeginInvoke/CS/control_begininvoke.cs#2)]
 [!code-vb[Control_BeginInvoke#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_BeginInvoke/VB/control_begininvoke.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6dc4f-364">適切なウィンドウ ハンドルが見つかりません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-364">No appropriate window handle can be found.</span></span></exception>
        <altmember cref="T:System.IAsyncResult" />
        <altmember cref="M:System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)" />
        <altmember cref="M:System.Windows.Forms.Control.Invoke(System.Delegate)" />
        <altmember cref="M:System.Windows.Forms.Control.CreateGraphics" />
        <altmember cref="P:System.Windows.Forms.Control.InvokeRequired" />
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (Delegate method, params object[] args);" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, ParamArray args As Object()) As IAsyncResult" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginInvoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member BeginInvoke : Delegate * obj[] -&gt; IAsyncResult&#xA;override this.BeginInvoke : Delegate * obj[] -&gt; IAsyncResult" Usage="control.BeginInvoke (method, args)" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (Delegate method, object[] args);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, args As Object()) As IAsyncResult" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginInvoke(Delegate ^ method, cli::array &lt;System::Object ^&gt; ^ args);" FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="6dc4f-365"><paramref name="args" /> パラメーターに指定されている数および型と同じ数および型のパラメーターをとるメソッドへのデリゲート。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-365">A delegate to a method that takes parameters of the same number and type that are contained in the <paramref name="args" /> parameter.</span></span></param>
        <param name="args"><span data-ttu-id="6dc4f-366">特定のメソッドに引数として渡すオブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-366">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="6dc4f-367">引数が必要ない場合は、<see langword="null" /> を指定できます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-367">This can be <see langword="null" /> if no arguments are needed.</span></span></param>
        <summary><span data-ttu-id="6dc4f-368">コントロールの基になるハンドルが作成されたスレッド上で、指定した引数で指定したデリゲートを非同期的に実行します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-368">Executes the specified delegate asynchronously with the specified arguments, on the thread that the control's underlying handle was created on.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-369"><see cref="T:System.IAsyncResult" /> 操作の結果を表す <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-369">An <see cref="T:System.IAsyncResult" /> that represents the result of the <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" /> operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-370">デリゲートは非同期的に呼び出され、このメソッドは直ちに制御を返します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-370">The delegate is called asynchronously, and this method returns immediately.</span></span> <span data-ttu-id="6dc4f-371">このメソッドは、コントロールのハンドルを所有するスレッドでも、任意のスレッドから呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-371">You can call this method from any thread, even the thread that owns the control's handle.</span></span> <span data-ttu-id="6dc4f-372">コントロールのハンドルがまだ存在しない場合、このメソッドは、ウィンドウハンドルを持つコントロールまたはフォームが見つかるまで、コントロールの親チェインを検索します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-372">If the control's handle does not exist yet, this method searches up the control's parent chain until it finds a control or form that does have a window handle.</span></span> <span data-ttu-id="6dc4f-373">適切なハンドルが見つからない場合、<xref:System.Windows.Forms.Control.BeginInvoke%2A> は例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-373">If no appropriate handle can be found, <xref:System.Windows.Forms.Control.BeginInvoke%2A> will throw an exception.</span></span> <span data-ttu-id="6dc4f-374">デリゲートメソッド内の例外は、トラップされていないと見なされ、アプリケーションのトラップされていない例外ハンドラーに送信されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-374">Exceptions within the delegate method are considered untrapped and will be sent to the application's untrapped exception handler.</span></span>  
  
 <span data-ttu-id="6dc4f-375">必要を <xref:System.Windows.Forms.Control.EndInvoke%2A> 呼び出して、デリゲートから戻り値を取得することもできます (の場合)。ただし、これは必須ではありません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-375">You can call <xref:System.Windows.Forms.Control.EndInvoke%2A> to retrieve the return value from the delegate, if neccesary, but this is not required.</span></span> <span data-ttu-id="6dc4f-376">戻り値を取得できるようになるまで、<xref:System.Windows.Forms.Control.EndInvoke%2A> はブロックされます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-376"><xref:System.Windows.Forms.Control.EndInvoke%2A> will block until the return value can be retrieved.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-377">コントロールのほとんどのメソッドは、コントロールが作成されたスレッドからのみ呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-377">Most methods on a control can only be called from the thread where the control was created.</span></span> <span data-ttu-id="6dc4f-378"><xref:System.Windows.Forms.Control.InvokeRequired%2A> プロパティに加えて、スレッドセーフであるコントロールには、<xref:System.Windows.Forms.Control.Invoke%2A>、<xref:System.Windows.Forms.Control.BeginInvoke%2A>、<xref:System.Windows.Forms.Control.EndInvoke%2A>、および <xref:System.Windows.Forms.Control.CreateGraphics%2A> コントロールのハンドルが既に作成されている場合の4つのメソッドがあります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-378">In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe: <xref:System.Windows.Forms.Control.Invoke%2A>, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A>, and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created.</span></span> <span data-ttu-id="6dc4f-379">バックグラウンドスレッドでコントロールのハンドルが作成される前に <xref:System.Windows.Forms.Control.CreateGraphics%2A> を呼び出すと、無効なクロススレッド呼び出しが発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-379">Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control's handle has been created on a background thread can cause illegal cross thread calls.</span></span> <span data-ttu-id="6dc4f-380">その他のすべてのメソッド呼び出しでは、いずれかの invoke メソッドを使用して、コントロールのスレッドへの呼び出しをマーシャリングする必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-380">For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.</span></span> <span data-ttu-id="6dc4f-381">Invoke メソッドは、常にコントロールのスレッドでコールバックを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-381">The invoke methods always invoke their callbacks on the control's thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-382">メッセージを処理する必要があるスレッドがアクティブでなくなった場合は、例外がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-382">An exception might be thrown if the thread that should process the message is no longer active.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-383">次のコード例は、<xref:System.Windows.Forms.Control.BeginInvoke%2A> メソッドの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-383">The following code example demonstrates a use of the <xref:System.Windows.Forms.Control.BeginInvoke%2A> method.</span></span>  
  
 [!code-cpp[Control_BeginInvoke#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_BeginInvoke/CPP/control_begininvoke.cpp#1)]
 [!code-csharp[Control_BeginInvoke#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_BeginInvoke/CS/control_begininvoke.cs#1)]
 [!code-vb[Control_BeginInvoke#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_BeginInvoke/VB/control_begininvoke.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6dc4f-384">適切なウィンドウ ハンドルが見つかりません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-384">No appropriate window handle can be found.</span></span></exception>
        <altmember cref="T:System.IAsyncResult" />
        <altmember cref="M:System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)" />
        <altmember cref="M:System.Windows.Forms.Control.Invoke(System.Delegate)" />
        <altmember cref="M:System.Windows.Forms.Control.CreateGraphics" />
        <altmember cref="P:System.Windows.Forms.Control.InvokeRequired" />
      </Docs>
    </Member>
    <Member MemberName="BindingContext">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.BindingContext BindingContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.BindingContext BindingContext" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.BindingContext" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property BindingContext As BindingContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::BindingContext ^ BindingContext { System::Windows::Forms::BindingContext ^ get(); void set(System::Windows::Forms::BindingContext ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BindingContext : System.Windows.Forms.BindingContext with get, set" Usage="System.Windows.Forms.Control.BindingContext" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IBindableComponent.BindingContext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-385">コントロールの <see cref="T:System.Windows.Forms.BindingContext" /> を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-385">Gets or sets the <see cref="T:System.Windows.Forms.BindingContext" /> for the control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-386">コントロールの <see cref="T:System.Windows.Forms.BindingContext" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-386">A <see cref="T:System.Windows.Forms.BindingContext" /> for the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-387"><xref:System.Windows.Forms.Control> の <xref:System.Windows.Forms.BindingContext> は、<xref:System.Windows.Forms.Control>に含まれるすべてのデータバインドコントロールに対して1つの <xref:System.Windows.Forms.BindingManagerBase> を返すために使用されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-387">The <xref:System.Windows.Forms.BindingContext> of a <xref:System.Windows.Forms.Control> is used to return a single <xref:System.Windows.Forms.BindingManagerBase> for all data-bound controls contained by the <xref:System.Windows.Forms.Control>.</span></span> <span data-ttu-id="6dc4f-388"><xref:System.Windows.Forms.BindingManagerBase> は、同じデータソースにバインドされているすべてのコントロールの同期を維持します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-388">The <xref:System.Windows.Forms.BindingManagerBase> keeps all controls that are bound to the same data source synchronized.</span></span> <span data-ttu-id="6dc4f-389">たとえば、<xref:System.Windows.Forms.BindingManagerBase> の [<xref:System.Windows.Forms.BindingManagerBase.Position%2A>] プロパティを設定すると、すべてのデータバインドコントロールが指す、基になるリスト内の項目が指定されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-389">For example, setting the <xref:System.Windows.Forms.BindingManagerBase.Position%2A> property of the <xref:System.Windows.Forms.BindingManagerBase> specifies the item in the underlying list that all data-bound controls point to.</span></span>  
  
 <span data-ttu-id="6dc4f-390">新しい <xref:System.Windows.Forms.BindingContext> の作成と <xref:System.Windows.Forms.Control.BindingContext%2A> プロパティへの割り当ての詳細については、<xref:System.Windows.Forms.BindingContext.%23ctor%2A>を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-390">For more information about creating a new <xref:System.Windows.Forms.BindingContext> and assigning it to the <xref:System.Windows.Forms.Control.BindingContext%2A> property, see the <xref:System.Windows.Forms.BindingContext.%23ctor%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-391">次のコード例では、4つの <xref:System.Windows.Forms.Binding> オブジェクトを作成して、5つのコントロール (<xref:System.Windows.Forms.DateTimePicker> と4つの <xref:System.Windows.Forms.TextBox> コントロール) を複数のデータソースにバインドします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-391">The following code example creates four <xref:System.Windows.Forms.Binding> objects to bind five controls, a <xref:System.Windows.Forms.DateTimePicker> and four <xref:System.Windows.Forms.TextBox> controls, to several data sources.</span></span> <span data-ttu-id="6dc4f-392"><xref:System.Windows.Forms.BindingContext> は、各データソースの <xref:System.Windows.Forms.BindingManagerBase> を取得するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-392">The <xref:System.Windows.Forms.BindingContext> is then used to get the <xref:System.Windows.Forms.BindingManagerBase> for each data source.</span></span>  
  
 [!code-cpp[Classic BindingContext Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic BindingContext Example/CPP/source.cpp#1)]
 [!code-csharp[Classic BindingContext Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic BindingContext Example/CS/source.cs#1)]
 [!code-vb[Classic BindingContext Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic BindingContext Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-393">派生クラスの <see cref="P:System.Windows.Forms.Control.BindingContext" /> プロパティをオーバーライドする場合は、基本クラスの <see cref="P:System.Windows.Forms.Control.BindingContext" /> プロパティを使用して、基本実装を拡張します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-393">When overriding the <see cref="P:System.Windows.Forms.Control.BindingContext" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.BindingContext" /> property to extend the base implementation.</span></span> <span data-ttu-id="6dc4f-394">それ以外の場合は、すべての実装を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-394">Otherwise, you must provide all the implementation.</span></span> <span data-ttu-id="6dc4f-395"><see cref="P:System.Windows.Forms.Control.BindingContext" /> プロパティの <see langword="get" /> と <see langword="set" /> の両方のアクセサーをオーバーライドする必要はありません。必要に応じて、オーバーライドできるのは1つだけです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-395">You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.BindingContext" /> property; you can override only one if needed.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.BindingContextChanged" />
        <altmember cref="T:System.Windows.Forms.Binding" />
        <altmember cref="T:System.Windows.Forms.BindingManagerBase" />
      </Docs>
    </Member>
    <Member MemberName="BindingContextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BindingContextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BindingContextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.BindingContextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BindingContextChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BindingContextChanged;" />
      <MemberSignature Language="F#" Value="member this.BindingContextChanged : EventHandler " Usage="member this.BindingContextChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-396"><see cref="T:System.Windows.Forms.BindingContext" /> プロパティの値が変化したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-396">Occurs when the value of the <see cref="T:System.Windows.Forms.BindingContext" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-397"><xref:System.Windows.Forms.Control.BindingContext%2A> プロパティを使用して新しい <xref:System.Windows.Forms.BindingContext> を <xref:System.Windows.Forms.Control> に追加するには、<xref:System.Windows.Forms.BindingContext.%23ctor%2A> コンストラクターを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-397">To add a new <xref:System.Windows.Forms.BindingContext> to the <xref:System.Windows.Forms.Control> through the <xref:System.Windows.Forms.Control.BindingContext%2A> property, see the <xref:System.Windows.Forms.BindingContext.%23ctor%2A> constructor.</span></span>  
  
 <span data-ttu-id="6dc4f-398">このイベントは、<xref:System.Windows.Forms.Control.BindingContext%2A> プロパティが変更された場合に、プログラムによる変更またはユーザーの操作によって変更された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-398">This event is raised if the <xref:System.Windows.Forms.Control.BindingContext%2A> property is changed is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="6dc4f-399">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-399">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-400">次のコード例では、<xref:System.Windows.Forms.TextBox> コントロールの <xref:System.Windows.Forms.Control.BindingContextChanged> イベントに <xref:System.EventHandler> デリゲートを追加します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-400">The following code example adds an <xref:System.EventHandler> delegate to the <xref:System.Windows.Forms.Control.BindingContextChanged> event of a <xref:System.Windows.Forms.TextBox> control.</span></span>  
  
 [!code-cpp[Classic Control.BindingContextChanged Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Control.BindingContextChanged Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Control.BindingContextChanged Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Control.BindingContextChanged Example/CS/source.cs#1)]
 [!code-vb[Classic Control.BindingContextChanged Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Control.BindingContextChanged Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.BindingContext" />
        <altmember cref="T:System.Windows.Forms.Binding" />
        <altmember cref="T:System.Windows.Forms.BindingManagerBase" />
        <altmember cref="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Bottom">
      <MemberSignature Language="C#" Value="public int Bottom { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Bottom" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Bottom" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Bottom As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Bottom { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Bottom : int" Usage="System.Windows.Forms.Control.Bottom" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-401">コントロールの下端とコンテナーのクライアント領域の上端の間の距離をピクセルで取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-401">Gets the distance, in pixels, between the bottom edge of the control and the top edge of its container's client area.</span></span></summary>
        <value><span data-ttu-id="6dc4f-402"><see cref="T:System.Int32" /> は、コントロールの下端とコンテナーのクライアント領域の上端の間の距離 (ピクセル単位) を示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-402">An <see cref="T:System.Int32" /> representing the distance, in pixels, between the bottom edge of the control and the top edge of its container's client area.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-403">このプロパティの値は、<xref:System.Windows.Forms.Control.Top%2A> プロパティ値と <xref:System.Windows.Forms.Control.Height%2A> プロパティ値の合計と同じになります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-403">The value of this property is equal to the sum of the <xref:System.Windows.Forms.Control.Top%2A> property value, and the <xref:System.Windows.Forms.Control.Height%2A> property value.</span></span>  
  
 <span data-ttu-id="6dc4f-404"><xref:System.Windows.Forms.Control.Bottom%2A> プロパティは、読み取り専用のプロパティです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-404">The <xref:System.Windows.Forms.Control.Bottom%2A> property is a read-only property.</span></span> <span data-ttu-id="6dc4f-405">このプロパティ値を操作するには、<xref:System.Windows.Forms.Control.Top%2A> または <xref:System.Windows.Forms.Control.Height%2A> プロパティの値を変更するか、<xref:System.Windows.Forms.Control.SetBounds%2A>、<xref:System.Windows.Forms.Control.SetBoundsCore%2A>、<xref:System.Windows.Forms.Control.UpdateBounds%2A>、または <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-405">You can manipulate this property value by changing the value of the <xref:System.Windows.Forms.Control.Top%2A> or <xref:System.Windows.Forms.Control.Height%2A> properties or calling the <xref:System.Windows.Forms.Control.SetBounds%2A>, <xref:System.Windows.Forms.Control.SetBoundsCore%2A>, <xref:System.Windows.Forms.Control.UpdateBounds%2A>, or <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-406">次のコード例では、<xref:System.Windows.Forms.Control.Bottom%2A> プロパティを使用して、コンテナーのクライアント領域に対して相対的な <xref:System.Windows.Forms.TextBox> コントロールの下限を定義します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-406">The following code example uses the <xref:System.Windows.Forms.Control.Bottom%2A> property to define the lower limit of a <xref:System.Windows.Forms.TextBox> control relative to the client area of the container.</span></span>  
  
 [!code-cpp[Control.KeyUp#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyUp/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyUp#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyUp/CS/form1.cs#1)]
 [!code-vb[Control.KeyUp#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyUp/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Top" />
        <altmember cref="P:System.Windows.Forms.Control.Height" />
      </Docs>
    </Member>
    <Member MemberName="Bounds">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle Bounds { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle Bounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Bounds" />
      <MemberSignature Language="VB.NET" Value="Public Property Bounds As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Rectangle Bounds { System::Drawing::Rectangle get(); void set(System::Drawing::Rectangle value); };" />
      <MemberSignature Language="F#" Value="member this.Bounds : System.Drawing.Rectangle with get, set" Usage="System.Windows.Forms.Control.Bounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-407">クライアント以外の要素を含むコントロールの、親コントロールに対する相対的なサイズおよび位置をピクセル単位で取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-407">Gets or sets the size and location of the control including its nonclient elements, in pixels, relative to the parent control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-408">クライアント以外の要素を含むコントロールの、親コントロールに対する相対的なサイズおよび位置を表す <see cref="T:System.Drawing.Rectangle" /> (ピクセル単位)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-408">A <see cref="T:System.Drawing.Rectangle" /> in pixels relative to the parent control that represents the size and location of the control including its nonclient elements.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-409">コントロールの境界には、スクロールバー、境界線、タイトルバー、メニューなど、クライアント以外の要素が含まれます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-409">The bounds of the control include the nonclient elements such as scroll bars, borders, title bars, and menus.</span></span> <span data-ttu-id="6dc4f-410"><xref:System.Windows.Forms.Control.SetBoundsCore%2A> メソッドは、<xref:System.Windows.Forms.Control.Bounds%2A> プロパティを設定するために呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-410">The <xref:System.Windows.Forms.Control.SetBoundsCore%2A> method is called to set the <xref:System.Windows.Forms.Control.Bounds%2A> property.</span></span> <span data-ttu-id="6dc4f-411"><xref:System.Windows.Forms.Control.Bounds%2A> プロパティは、常に `set` メソッドによって変更されるとは限りません。そのため、<xref:System.Windows.Forms.Control.Bounds%2A> プロパティが設定されたときにコードが実行されるように <xref:System.Windows.Forms.Control.SetBoundsCore%2A> メソッドをオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-411">The <xref:System.Windows.Forms.Control.Bounds%2A> property is not always changed through its `set` method so you should override the <xref:System.Windows.Forms.Control.SetBoundsCore%2A> method to ensure that your code is executed when the <xref:System.Windows.Forms.Control.Bounds%2A> property is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-412">次のコード例では、フォームに3つの <xref:System.Windows.Forms.Button> コントロールを作成し、さまざまなサイズ関連のプロパティと場所に関連するプロパティを使用して、サイズと位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-412">The following code example creates three <xref:System.Windows.Forms.Button> controls on a form and sets their size and location by using the various size-related and location-related properties.</span></span> <span data-ttu-id="6dc4f-413">この例では、幅と高さが300ピクセル以上の <xref:System.Windows.Forms.Form> が必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-413">This example requires that you have a <xref:System.Windows.Forms.Form> that has a width and height of at least 300 pixels.</span></span>  
  
 [!code-cpp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CPP/controlsizelocation.cpp#1)]
 [!code-csharp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CS/controlsizelocation.cs#1)]
 [!code-vb[Windows.Forms.Control SizeLocation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/VB/controlsizelocation.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Top" />
        <altmember cref="P:System.Windows.Forms.Control.Left" />
        <altmember cref="P:System.Windows.Forms.Control.Height" />
        <altmember cref="P:System.Windows.Forms.Control.Width" />
      </Docs>
    </Member>
    <Member MemberName="BringToFront">
      <MemberSignature Language="C#" Value="public void BringToFront ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BringToFront() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.BringToFront" />
      <MemberSignature Language="VB.NET" Value="Public Sub BringToFront ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BringToFront();" />
      <MemberSignature Language="F#" Value="member this.BringToFront : unit -&gt; unit" Usage="control.BringToFront " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6dc4f-414">コントロールを z オーダーの最前面へ移動します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-414">Brings the control to the front of the z-order.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-415">コントロールが z オーダーの前に移動します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-415">The control is moved to the front of the z-order.</span></span> <span data-ttu-id="6dc4f-416">コントロールが別のコントロールの子である場合は、子コントロールが z オーダーの前に移動します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-416">If the control is a child of another control, the child control is moved to the front of the z-order.</span></span> <span data-ttu-id="6dc4f-417"><xref:System.Windows.Forms.Control.BringToFront%2A> は、コントロールをトップレベルコントロールとして作成せず、<xref:System.Windows.Forms.Control.Paint> イベントを発生させません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-417"><xref:System.Windows.Forms.Control.BringToFront%2A> does not make a control a top-level control, and it does not raise the <xref:System.Windows.Forms.Control.Paint> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-418">次のコード例では、<xref:System.Windows.Forms.Control.BringToFront%2A> メソッドを呼び出すことによって <xref:System.Windows.Forms.Label> が確実に表示されるようにします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-418">The following code example ensures that a <xref:System.Windows.Forms.Label> is visible by calling its <xref:System.Windows.Forms.Control.BringToFront%2A> method.</span></span> <span data-ttu-id="6dc4f-419">この例では、`panel1`という名前の <xref:System.Windows.Forms.Panel> と、`label1`という名前の <xref:System.Windows.Forms.Label> を持つ <xref:System.Windows.Forms.Form> が必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-419">This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.Panel> named `panel1`, and a <xref:System.Windows.Forms.Label> named `label1`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Members4#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#1)]
 [!code-csharp[Windows.Forms.Control Members4#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#1)]
 [!code-vb[Windows.Forms.Control Members4#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.SendToBack" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateZOrder" />
      </Docs>
    </Member>
    <Member MemberName="CanEnableIme">
      <MemberSignature Language="C#" Value="protected virtual bool CanEnableIme { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanEnableIme" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CanEnableIme" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property CanEnableIme As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool CanEnableIme { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanEnableIme : bool" Usage="System.Windows.Forms.Control.CanEnableIme" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-420"><see cref="P:System.Windows.Forms.Control.ImeMode" /> プロパティをアクティブな値に設定して、IME サポートを有効にできるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-420">Gets a value indicating whether the <see cref="P:System.Windows.Forms.Control.ImeMode" /> property can be set to an active value, to enable IME support.</span></span></summary>
        <value><span data-ttu-id="6dc4f-421">すべてのケースで <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-421"><see langword="true" /> in all cases.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-422">IME がサポートされていない場合は、派生クラスでこのプロパティをオーバーライドして `false` を返すことができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-422">Derived classes can override this property to return `false` if IME is not supported.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanFocus">
      <MemberSignature Language="C#" Value="public bool CanFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanFocus" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CanFocus" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanFocus As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanFocus { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanFocus : bool" Usage="System.Windows.Forms.Control.CanFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-423">コントロールがフォーカスを受け取ることができるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-423">Gets a value indicating whether the control can receive focus.</span></span></summary>
        <value><span data-ttu-id="6dc4f-424">コントロールがフォーカスを受け取ることができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-424"><see langword="true" /> if the control can receive focus; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-425">コントロールが入力フォーカスを受け取るには、コントロールにハンドルが割り当てられている必要があります。また、コントロールとそのすべての親コントロールに対して、<xref:System.Windows.Forms.Control.Visible%2A> プロパティと <xref:System.Windows.Forms.Control.Enabled%2A> プロパティの両方が `true` に設定されている必要があります。また、コントロールはフォームであるか、コントロールが最も外側の親である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-425">In order for a control to receive input focus, the control must have a handle assigned to it, and the <xref:System.Windows.Forms.Control.Visible%2A> and <xref:System.Windows.Forms.Control.Enabled%2A> properties must both be set to `true` for both the control and all its parent controls, and the control must be a form or the control's outermost parent must be a form.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-426">次のコード例では、フォーカスを受け取ることができる場合に、指定された <xref:System.Windows.Forms.Control>にフォーカスを設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-426">The following code example sets focus to the specified <xref:System.Windows.Forms.Control>, if it can receive focus.</span></span>  
  
 [!code-cpp[Windows.Forms.ControlMembers6#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CPP/controlmembers6.cpp#1)]
 [!code-csharp[Windows.Forms.ControlMembers6#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CS/controlmembers6.cs#1)]
 [!code-vb[Windows.Forms.ControlMembers6#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/VB/controlmembers6.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Enabled" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.Visible" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="P:System.Windows.Forms.Control.Focused" />
        <altmember cref="P:System.Windows.Forms.Control.CanSelect" />
      </Docs>
    </Member>
    <Member MemberName="CanRaiseEvents">
      <MemberSignature Language="C#" Value="protected override bool CanRaiseEvents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRaiseEvents" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CanRaiseEvents" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CanRaiseEvents As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool CanRaiseEvents { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRaiseEvents : bool" Usage="System.Windows.Forms.Control.CanRaiseEvents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-427">コントロールでイベントが発生するかどうかを決定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-427">Determines if events can be raised on the control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-428">コントロールが、イベントが固定されていない ActiveX コントロールとしてホストされる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-428"><see langword="true" /> if the control is hosted as an ActiveX control whose events are not frozen; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-429">このコントロールが ActiveX コントロールとしてホストされている場合、ActiveX コントロールのイベントが凍結されている場合、このプロパティは `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-429">If this control is being hosted as an ActiveX control, this property will return `false` if the ActiveX control has its events frozen.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSelect">
      <MemberSignature Language="C#" Value="public bool CanSelect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSelect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CanSelect" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanSelect As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanSelect { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanSelect : bool" Usage="System.Windows.Forms.Control.CanSelect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-430">コントロールを選択できるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-430">Gets a value indicating whether the control can be selected.</span></span></summary>
        <value><span data-ttu-id="6dc4f-431">コントロールを選択できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-431"><see langword="true" /> if the control can be selected; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-432">このプロパティは、<xref:System.Windows.Forms.ControlStyles?displayProperty=nameWithType> の `Selectable` 値が `true`に設定されていて、別のコントロールに含まれていて、コントロール自体が表示され、有効になっていて、すべての親コントロールが表示され、有効になっている場合に `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-432">This property returns `true` if the `Selectable` value of <xref:System.Windows.Forms.ControlStyles?displayProperty=nameWithType> is set to `true`, is contained in another control, the control itself is visible and enabled, and all its parent controls are visible and enabled.</span></span>  
  
 <span data-ttu-id="6dc4f-433">次の一覧の Windows フォームコントロールは選択できません。 <xref:System.Windows.Forms.Control.CanSelect%2A> プロパティの `false` の値が返されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-433">The Windows Forms controls in the following list are not selectable and will return a value of `false` for the <xref:System.Windows.Forms.Control.CanSelect%2A> property.</span></span> <span data-ttu-id="6dc4f-434">これらのコントロールから派生したコントロールも選択できません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-434">Controls derived from these controls are also not selectable.</span></span>  
  
-   <xref:System.Windows.Forms.Panel>  
  
-   <xref:System.Windows.Forms.GroupBox>  
  
-   <xref:System.Windows.Forms.PictureBox>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.Splitter>  
  
-   <xref:System.Windows.Forms.Label>  
  
-   <span data-ttu-id="6dc4f-435"><xref:System.Windows.Forms.LinkLabel> (コントロールにリンクが存在しない場合)</span><span class="sxs-lookup"><span data-stu-id="6dc4f-435"><xref:System.Windows.Forms.LinkLabel> (when there is no link present in the control)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-436">次のコード例では、選択可能な場合に、指定した <xref:System.Windows.Forms.Control>を選択します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-436">The following code example selects the specified <xref:System.Windows.Forms.Control>, if it is selectable.</span></span>  
  
 [!code-cpp[Windows.Forms.ControlMembers6#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CPP/controlmembers6.cpp#2)]
 [!code-csharp[Windows.Forms.ControlMembers6#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CS/controlmembers6.cs#2)]
 [!code-vb[Windows.Forms.ControlMembers6#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/VB/controlmembers6.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Select" />
        <altmember cref="P:System.Windows.Forms.Control.Enabled" />
        <altmember cref="P:System.Windows.Forms.Control.Visible" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="P:System.Windows.Forms.Control.CanFocus" />
      </Docs>
    </Member>
    <Member MemberName="Capture">
      <MemberSignature Language="C#" Value="public bool Capture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Capture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Capture" />
      <MemberSignature Language="VB.NET" Value="Public Property Capture As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Capture { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Capture : bool with get, set" Usage="System.Windows.Forms.Control.Capture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-437">コントロールがマウスをキャプチャしたかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-437">Gets or sets a value indicating whether the control has captured the mouse.</span></span></summary>
        <value><span data-ttu-id="6dc4f-438">コントロールがマウスをキャプチャした場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-438"><see langword="true" /> if the control has captured the mouse; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-439">コントロールは、マウスをキャプチャしたときに、カーソルが境界内にあるかどうかにかかわらず、マウス入力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-439">When a control has captured the mouse, it receives mouse input whether or not the cursor is within its borders.</span></span> <span data-ttu-id="6dc4f-440">通常、マウスはドラッグ操作中にのみキャプチャされます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-440">The mouse is typically only captured during drag operations.</span></span>  
  
 <span data-ttu-id="6dc4f-441">前面のウィンドウだけがマウスをキャプチャできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-441">Only the foreground window can capture the mouse.</span></span> <span data-ttu-id="6dc4f-442">バックグラウンドウィンドウがこれを行おうとすると、ウィンドウは、マウスカーソルがウィンドウの表示部分内にあるときに発生するマウスイベントに対してのみメッセージを受信します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-442">When a background window attempts to do so, the window receives messages only for mouse events that occur when the mouse cursor is within the visible portion of the window.</span></span> <span data-ttu-id="6dc4f-443">また、前景ウィンドウがマウスをキャプチャした場合でも、ユーザーは別のウィンドウをクリックして、前面に表示することができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-443">Also, even if the foreground window has captured the mouse, the user can still click another window, bringing it to the foreground.</span></span>  
  
 <span data-ttu-id="6dc4f-444">マウスがキャプチャされると、ショートカットキーは機能しません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-444">When the mouse is captured, shortcut keys should not work.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-445">次のコード例は、<xref:System.Windows.Forms.Control.Capture%2A> プロパティを示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-445">The following code example demonstrates the <xref:System.Windows.Forms.Control.Capture%2A> property.</span></span> <span data-ttu-id="6dc4f-446">この例を実行するには、listbox2 という名前の <xref:System.Windows.Forms.Label> と、listbox1 およびという名前の2つの <xref:System.Windows.Forms.ListBox> コントロールを含むフォームに次のコードを貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-446">To run this example paste the following code in a form containing a <xref:System.Windows.Forms.Label> named label1 and two <xref:System.Windows.Forms.ListBox> controls named listbox1 and listbox2.</span></span> <span data-ttu-id="6dc4f-447">この例では、フォームとコントロールの <xref:System.Windows.Forms.Control.MouseDown> イベントがメソッドに関連付けられていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-447">Ensure the form and controls' <xref:System.Windows.Forms.Control.MouseDown> event is associated with the method in this example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ControlCapture#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlCapture/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ControlCapture#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlCapture/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ControlCapture#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlCapture/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="CausesValidation">
      <MemberSignature Language="C#" Value="public bool CausesValidation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CausesValidation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CausesValidation" />
      <MemberSignature Language="VB.NET" Value="Public Property CausesValidation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CausesValidation { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CausesValidation : bool with get, set" Usage="System.Windows.Forms.Control.CausesValidation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-448">そのコントロールが原因で、フォーカスを受け取ると検証が必要なコントロールに対して、検証が実行されるかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-448">Gets or sets a value indicating whether the control causes validation to be performed on any controls that require validation when it receives focus.</span></span></summary>
        <value><span data-ttu-id="6dc4f-449">そのコントロールが原因で、フォーカスを受け取ると検証が必要なコントロールに対して検証が実行される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-449"><see langword="true" /> if the control causes validation to be performed on any controls requiring validation when it receives focus; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6dc4f-450">既定では、 <see langword="true" />です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-450">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-451"><xref:System.Windows.Forms.Control.CausesValidation%2A> プロパティが `false`に設定されている場合、<xref:System.Windows.Forms.Control.Validating> および <xref:System.Windows.Forms.Control.Validated> イベントは抑制されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-451">If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.</span></span>  
  
 <span data-ttu-id="6dc4f-452"><xref:System.Windows.Forms.Control.CausesValidation%2A> プロパティ値は、通常、[ヘルプ] ボタンなどのコントロールの `false` に設定されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-452">The <xref:System.Windows.Forms.Control.CausesValidation%2A> property value is typically set to `false` for controls such as a Help button.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-453">次のコード例では、派生クラス <xref:System.Windows.Forms.TextBox> を使用して、ユーザーが入力する電子メールアドレスを検証します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-453">The following code example uses the derived class <xref:System.Windows.Forms.TextBox> and validates an email address that the user enters.</span></span> <span data-ttu-id="6dc4f-454">電子メールアドレスが標準形式 ("@" and "") に含まれていない場合、検証は失敗し、<xref:System.Windows.Forms.ErrorProvider> アイコンが表示され、イベントは取り消されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-454">If the email address is not in the standard format (containing "@" and "."), the validation fails, an <xref:System.Windows.Forms.ErrorProvider> icon is displayed, and the event is canceled.</span></span> <span data-ttu-id="6dc4f-455">フォーム上のボタンの1つに、[<xref:System.Windows.Forms.Control.CausesValidation%2A>] プロパティが `false`に設定されています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-455">One of the buttons on the form has its <xref:System.Windows.Forms.Control.CausesValidation%2A> property set to `false`.</span></span> <span data-ttu-id="6dc4f-456">このボタンをクリックまたは設定すると、検証がトリガーされません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-456">Clicking or setting focus to this button does not trigger validation.</span></span> <span data-ttu-id="6dc4f-457">この例では、<xref:System.Windows.Forms.TextBox>、<xref:System.Windows.Forms.ErrorProvider> コントロール、および <xref:System.Windows.Forms.Button> がフォーム上に作成されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-457">This example requires that a <xref:System.Windows.Forms.TextBox>, an <xref:System.Windows.Forms.ErrorProvider> control, and a <xref:System.Windows.Forms.Button> have been created on a form.</span></span>  
  
 [!code-cpp[Control.Validating#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Validating/CPP/validating.cpp#2)]
 [!code-csharp[Control.Validating#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Validating/CS/validating.cs#2)]
 [!code-vb[Control.Validating#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Validating/VB/validating.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.Validating" />
        <altmember cref="E:System.Windows.Forms.Control.Validated" />
      </Docs>
    </Member>
    <Member MemberName="CausesValidationChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CausesValidationChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CausesValidationChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.CausesValidationChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CausesValidationChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ CausesValidationChanged;" />
      <MemberSignature Language="F#" Value="member this.CausesValidationChanged : EventHandler " Usage="member this.CausesValidationChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-458"><see cref="P:System.Windows.Forms.Control.CausesValidation" /> プロパティの値が変化したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-458">Occurs when the value of the <see cref="P:System.Windows.Forms.Control.CausesValidation" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-459">このイベントは、プログラムによる変更またはユーザーの操作によって <xref:System.Windows.Forms.Control.CausesValidation%2A> プロパティが変更された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-459">This event is raised if the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="6dc4f-460">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-460">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.CausesValidation" />
      </Docs>
    </Member>
    <Member MemberName="ChangeUICues">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.UICuesEventHandler ChangeUICues;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.UICuesEventHandler ChangeUICues" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ChangeUICues" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ChangeUICues As UICuesEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::UICuesEventHandler ^ ChangeUICues;" />
      <MemberSignature Language="F#" Value="member this.ChangeUICues : System.Windows.Forms.UICuesEventHandler " Usage="member this.ChangeUICues : System.Windows.Forms.UICuesEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.UICuesEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-461">フォーカスまたはキーボードのユーザー インターフェイス (UI) キューが変更されるときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-461">Occurs when the focus or keyboard user interface (UI) cues change.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-462">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-462">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-463">このメンバーの使用例を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-463">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="6dc4f-464">この例では、イベントハンドラーは、<xref:System.Windows.Forms.Control.ChangeUICues> イベントの発生を報告します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-464">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.ChangeUICues> event.</span></span> <span data-ttu-id="6dc4f-465">このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-465">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="6dc4f-466">複数のイベントまたは頻繁に発生するイベントについてレポートするには、<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> を <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> に置き換えるか、複数行 <xref:System.Windows.Forms.TextBox>にメッセージを追加することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-466">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="6dc4f-467">コード例を実行するには、<xref:System.Windows.Forms.Button> や <xref:System.Windows.Forms.ComboBox>などの <xref:System.Windows.Forms.Control>から継承する型のインスタンスを含むプロジェクトに貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-467">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="6dc4f-468">次に、インスタンスに `Control1` という名前を付け、イベントハンドラーが <xref:System.Windows.Forms.Control.ChangeUICues> イベントに関連付けられていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-468">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.ChangeUICues> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#67](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#67)]
 [!code-vb[System.Windows.Forms.EventExamples#67](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#67)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.UICues" />
        <altmember cref="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="CheckForIllegalCrossThreadCalls">
      <MemberSignature Language="C#" Value="public static bool CheckForIllegalCrossThreadCalls { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CheckForIllegalCrossThreadCalls" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CheckForIllegalCrossThreadCalls As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CheckForIllegalCrossThreadCalls { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckForIllegalCrossThreadCalls : bool with get, set" Usage="System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-469">アプリケーションのデバッグ中に、コントロールの <see cref="P:System.Windows.Forms.Control.Handle" /> プロパティにアクセスする間違ったスレッドによる呼び出しをキャッチするかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-469">Gets or sets a value indicating whether to catch calls on the wrong thread that access a control's <see cref="P:System.Windows.Forms.Control.Handle" /> property when an application is being debugged.</span></span></summary>
        <value><span data-ttu-id="6dc4f-470">間違ったスレッドによる呼び出しをキャッチする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-470"><see langword="true" /> if calls on the wrong thread are caught; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-471">コントロールの作成スレッド以外のスレッドがそのコントロールのメソッドまたはプロパティのいずれかにアクセスしようとすると、多くの場合、予期しない結果につながることがあります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-471">When a thread other than the creating thread of a control tries to access one of that control's methods or properties, it often leads to unpredictable results.</span></span> <span data-ttu-id="6dc4f-472">一般的な無効なスレッドアクティビティは、コントロールの <xref:System.Windows.Forms.Control.Handle%2A> プロパティにアクセスする間違ったスレッドでの呼び出しです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-472">A common invalid thread activity is a call on the wrong thread that accesses the control's <xref:System.Windows.Forms.Control.Handle%2A> property.</span></span> <span data-ttu-id="6dc4f-473">デバッグ中にこのスレッドアクティビティをより簡単に検索して診断するには、<xref:System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls%2A> を `true` に設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-473">Set <xref:System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls%2A> to `true` to find and diagnose this thread activity more easily while debugging.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event EventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Click" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Click As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Click;" />
      <MemberSignature Language="F#" Value="member this.Click : EventHandler " Usage="member this.Click : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-474">コントロールがクリックされたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-474">Occurs when the control is clicked.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-475"><xref:System.Windows.Forms.Control.Click> イベントは、<xref:System.EventArgs> をそのイベントハンドラーに渡します。そのため、クリックが発生したことのみを示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-475">The <xref:System.Windows.Forms.Control.Click> event passes an <xref:System.EventArgs> to its event handler, so it only indicates that a click has occurred.</span></span> <span data-ttu-id="6dc4f-476">マウスの特定の情報 (ボタン、クリック数、ホイール回転、位置など) が必要な場合は、<xref:System.Windows.Forms.Control.MouseClick> イベントを使用します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-476">If you need more specific mouse information (button, number of clicks, wheel rotation, or location), use the <xref:System.Windows.Forms.Control.MouseClick> event.</span></span> <span data-ttu-id="6dc4f-477">ただし、ENTER キーを押すなどの操作がマウスの操作によって発生した場合、<xref:System.Windows.Forms.Control.MouseClick> イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-477">However, the <xref:System.Windows.Forms.Control.MouseClick> event will not be raised if the click is caused by action other than that of the mouse, such as pressing the ENTER key.</span></span>  
  
 <span data-ttu-id="6dc4f-478">ダブルクリックは、ユーザーのオペレーティングシステムのマウス設定によって決まります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-478">A double-click is determined by the mouse settings of the user's operating system.</span></span> <span data-ttu-id="6dc4f-479">ユーザーは、2 回のクリックではなくダブルクリックと見なされるマウス ボタンのクリック間隔を設定できます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-479">The user can set the time between clicks of a mouse button that should be considered a double-click rather than two clicks.</span></span> <span data-ttu-id="6dc4f-480"><xref:System.Windows.Forms.Control.Click> イベントは、コントロールがダブルクリックされるたびに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-480">The <xref:System.Windows.Forms.Control.Click> event is raised every time a control is double-clicked.</span></span> <span data-ttu-id="6dc4f-481">たとえば、<xref:System.Windows.Forms.Form>の <xref:System.Windows.Forms.Control.Click> イベントと <xref:System.Windows.Forms.Control.DoubleClick> イベントのイベントハンドラーがある場合、フォームがダブルクリックされ、両方のメソッドが呼び出されると、<xref:System.Windows.Forms.Control.Click> イベントと <xref:System.Windows.Forms.Control.DoubleClick> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-481">For example, if you have event handlers for the <xref:System.Windows.Forms.Control.Click> and <xref:System.Windows.Forms.Control.DoubleClick> events of a <xref:System.Windows.Forms.Form>, the <xref:System.Windows.Forms.Control.Click> and <xref:System.Windows.Forms.Control.DoubleClick> events are raised when the form is double-clicked and both methods are called.</span></span> <span data-ttu-id="6dc4f-482">コントロールがダブルクリックされ、そのコントロールが <xref:System.Windows.Forms.Control.DoubleClick> イベントをサポートしていない場合、<xref:System.Windows.Forms.Control.Click> イベントが2回発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-482">If a control is double-clicked and that control does not support the <xref:System.Windows.Forms.Control.DoubleClick> event, the <xref:System.Windows.Forms.Control.Click> event might be raised twice.</span></span>  
  
 <span data-ttu-id="6dc4f-483">このイベントを発生させるには、<xref:System.Windows.Forms.ControlStyles> の `StandardClick` 値を `true` に設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-483">You must set the `StandardClick` value of <xref:System.Windows.Forms.ControlStyles> to `true` for this event to be raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-484"><xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> コレクションに少なくとも1つの <xref:System.Windows.Forms.TabPage> が含まれている場合 (<xref:System.Windows.Forms.Control.Click>、<xref:System.Windows.Forms.Control.DoubleClick>、<xref:System.Windows.Forms.Control.MouseDown>、<xref:System.Windows.Forms.Control.MouseUp>、<xref:System.Windows.Forms.Control.MouseHover>、<xref:System.Windows.Forms.Control.MouseEnter>、<xref:System.Windows.Forms.Control.MouseLeave>、<xref:System.Windows.Forms.Control.MouseMove>)、<xref:System.Windows.Forms.TabControl> クラスでは、次のイベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-484">The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>.</span></span> <span data-ttu-id="6dc4f-485">コレクションに少なくとも1つの <xref:System.Windows.Forms.TabPage> が存在し、ユーザーがタブコントロールのヘッダー (<xref:System.Windows.Forms.TabPage> 名が表示される) と対話する場合、<xref:System.Windows.Forms.TabControl> は適切なイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-485">If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event.</span></span> <span data-ttu-id="6dc4f-486">ただし、ユーザーの操作がタブページのクライアント領域内にある場合、<xref:System.Windows.Forms.TabPage> は適切なイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-486">However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.</span></span>  
  
 <span data-ttu-id="6dc4f-487">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-487">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
## <a name="notes-to-inheritors"></a><span data-ttu-id="6dc4f-488">継承に関する注意事項</span><span class="sxs-lookup"><span data-stu-id="6dc4f-488">Notes to inheritors</span></span>

<span data-ttu-id="6dc4f-489">標準 Windows フォーム制御から継承し、<xref:System.Windows.Forms.ControlStyles> の `StandardClick` または `StandardDoubleClick` 値を `true` に変更すると、予期しない動作が発生したり、コントロールで <xref:System.Windows.Forms.Control.Click> イベントまたは <xref:System.Windows.Forms.Control.DoubleClick> イベントがサポートされていない場合はまったく効果がなくなります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-489">Inheriting from a standard Windows Forms control and changing the `StandardClick` or `StandardDoubleClick` values of <xref:System.Windows.Forms.ControlStyles> to `true` can cause unexpected behavior or have no effect at all if the control does not support the <xref:System.Windows.Forms.Control.Click> or <xref:System.Windows.Forms.Control.DoubleClick> events.</span></span>
  
<span data-ttu-id="6dc4f-490">次の表は、Windows フォームコントロールと、指定されたマウス操作に応答して発生するイベント (<xref:System.Windows.Forms.Control.Click> または <xref:System.Windows.Forms.Control.DoubleClick>) を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-490">The following table lists Windows Forms controls and which event (<xref:System.Windows.Forms.Control.Click> or <xref:System.Windows.Forms.Control.DoubleClick>) is raised in response to the mouse action specified.</span></span>

| <span data-ttu-id="6dc4f-491">コントロール</span><span class="sxs-lookup"><span data-stu-id="6dc4f-491">Control</span></span> | <span data-ttu-id="6dc4f-492">マウスの左クリック</span><span class="sxs-lookup"><span data-stu-id="6dc4f-492">Left Mouse Click</span></span> | <span data-ttu-id="6dc4f-493">マウスの左ダブルクリック</span><span class="sxs-lookup"><span data-stu-id="6dc4f-493">Left Mouse Double Click</span></span> | <span data-ttu-id="6dc4f-494">マウスの右クリック</span><span class="sxs-lookup"><span data-stu-id="6dc4f-494">Right Mouse Click</span></span> | <span data-ttu-id="6dc4f-495">右マウスダブルクリック</span><span class="sxs-lookup"><span data-stu-id="6dc4f-495">Right Mouse Double Click</span></span> | <span data-ttu-id="6dc4f-496">マウスの中央クリック</span><span class="sxs-lookup"><span data-stu-id="6dc4f-496">Middle Mouse Click</span></span> | <span data-ttu-id="6dc4f-497">中央マウスダブルクリック</span><span class="sxs-lookup"><span data-stu-id="6dc4f-497">Middle Mouse Double Click</span></span> | <span data-ttu-id="6dc4f-498">XButton1 マウスクリック</span><span class="sxs-lookup"><span data-stu-id="6dc4f-498">XButton1 Mouse Click</span></span> | <span data-ttu-id="6dc4f-499">XButton1 マウスのダブルクリック</span><span class="sxs-lookup"><span data-stu-id="6dc4f-499">XButton1 Mouse Double-Click</span></span> | <span data-ttu-id="6dc4f-500">XButton2 マウスクリック</span><span class="sxs-lookup"><span data-stu-id="6dc4f-500">XButton2 Mouse Click</span></span> | <span data-ttu-id="6dc4f-501">XButton2 マウスのダブルクリック</span><span class="sxs-lookup"><span data-stu-id="6dc4f-501">XButton2 Mouse Double-Click</span></span> | 
| ------- | ---------------- | ----------------------- | ----------------- | ------------------------ | ------------------ | ------------------------- | -------------------- | --------------------------- | -------------------- | --------------------------- |
| <span data-ttu-id="6dc4f-502"><xref:System.Windows.Forms.MonthCalendar>、<xref:System.Windows.Forms.DateTimePicker>、<xref:System.Windows.Forms.HScrollBar>, <xref:System.Windows.Forms.VScrollBar></span><span class="sxs-lookup"><span data-stu-id="6dc4f-502"><xref:System.Windows.Forms.MonthCalendar>, <xref:System.Windows.Forms.DateTimePicker>, <xref:System.Windows.Forms.HScrollBar>, <xref:System.Windows.Forms.VScrollBar></span></span> | <span data-ttu-id="6dc4f-503">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-503">none</span></span> | <span data-ttu-id="6dc4f-504">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-504">none</span></span> | <span data-ttu-id="6dc4f-505">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-505">none</span></span> | <span data-ttu-id="6dc4f-506">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-506">none</span></span> | <span data-ttu-id="6dc4f-507">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-507">none</span></span> | <span data-ttu-id="6dc4f-508">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-508">none</span></span> | <span data-ttu-id="6dc4f-509">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-509">none</span></span> | <span data-ttu-id="6dc4f-510">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-510">none</span></span> | <span data-ttu-id="6dc4f-511">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-511">none</span></span> | <span data-ttu-id="6dc4f-512">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-512">none</span></span> |
| <span data-ttu-id="6dc4f-513"><xref:System.Windows.Forms.Button>、<xref:System.Windows.Forms.CheckBox>、<xref:System.Windows.Forms.RichTextBox>, <xref:System.Windows.Forms.RadioButton></span><span class="sxs-lookup"><span data-stu-id="6dc4f-513"><xref:System.Windows.Forms.Button>, <xref:System.Windows.Forms.CheckBox>, <xref:System.Windows.Forms.RichTextBox>, <xref:System.Windows.Forms.RadioButton></span></span> | <span data-ttu-id="6dc4f-514">Click</span><span class="sxs-lookup"><span data-stu-id="6dc4f-514">Click</span></span> | <span data-ttu-id="6dc4f-515">をクリックし、</span><span class="sxs-lookup"><span data-stu-id="6dc4f-515">Click, Click</span></span> | <span data-ttu-id="6dc4f-516">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-516">none</span></span> | <span data-ttu-id="6dc4f-517">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-517">none</span></span> | <span data-ttu-id="6dc4f-518">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-518">none</span></span> | <span data-ttu-id="6dc4f-519">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-519">none</span></span> | <span data-ttu-id="6dc4f-520">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-520">none</span></span> | <span data-ttu-id="6dc4f-521">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-521">none</span></span> | <span data-ttu-id="6dc4f-522">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-522">none</span></span> | <span data-ttu-id="6dc4f-523">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-523">none</span></span> |
| <span data-ttu-id="6dc4f-524"><xref:System.Windows.Forms.ListBox>、<xref:System.Windows.Forms.CheckedListBox>、<xref:System.Windows.Forms.ComboBox></span><span class="sxs-lookup"><span data-stu-id="6dc4f-524"><xref:System.Windows.Forms.ListBox>, <xref:System.Windows.Forms.CheckedListBox>, <xref:System.Windows.Forms.ComboBox></span></span> | <span data-ttu-id="6dc4f-525">Click</span><span class="sxs-lookup"><span data-stu-id="6dc4f-525">Click</span></span> | <span data-ttu-id="6dc4f-526">[, DoubleClick] をクリックします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-526">Click, DoubleClick</span></span> | <span data-ttu-id="6dc4f-527">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-527">none</span></span> | <span data-ttu-id="6dc4f-528">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-528">none</span></span> | <span data-ttu-id="6dc4f-529">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-529">none</span></span> | <span data-ttu-id="6dc4f-530">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-530">none</span></span> | <span data-ttu-id="6dc4f-531">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-531">none</span></span> | <span data-ttu-id="6dc4f-532">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-532">none</span></span> | <span data-ttu-id="6dc4f-533">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-533">none</span></span> | <span data-ttu-id="6dc4f-534">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-534">none</span></span> |
| <span data-ttu-id="6dc4f-535"><xref:System.Windows.Forms.TextBox>、<xref:System.Windows.Forms.DomainUpDown>、<xref:System.Windows.Forms.NumericUpDown></span><span class="sxs-lookup"><span data-stu-id="6dc4f-535"><xref:System.Windows.Forms.TextBox>, <xref:System.Windows.Forms.DomainUpDown>, <xref:System.Windows.Forms.NumericUpDown></span></span> | <span data-ttu-id="6dc4f-536">Click</span><span class="sxs-lookup"><span data-stu-id="6dc4f-536">Click</span></span> | <span data-ttu-id="6dc4f-537">[, DoubleClick] をクリックします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-537">Click, DoubleClick</span></span> | <span data-ttu-id="6dc4f-538">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-538">none</span></span> | <span data-ttu-id="6dc4f-539">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-539">none</span></span> | <span data-ttu-id="6dc4f-540">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-540">none</span></span> | <span data-ttu-id="6dc4f-541">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-541">none</span></span> | <span data-ttu-id="6dc4f-542">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-542">none</span></span> | <span data-ttu-id="6dc4f-543">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-543">none</span></span> | <span data-ttu-id="6dc4f-544">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-544">none</span></span> | <span data-ttu-id="6dc4f-545">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-545">none</span></span> |
| <span data-ttu-id="6dc4f-546">\* <xref:System.Windows.Forms.TreeView>、\* <xref:System.Windows.Forms.ListView></span><span class="sxs-lookup"><span data-stu-id="6dc4f-546">\* <xref:System.Windows.Forms.TreeView>, \* <xref:System.Windows.Forms.ListView></span></span> | <span data-ttu-id="6dc4f-547">Click</span><span class="sxs-lookup"><span data-stu-id="6dc4f-547">Click</span></span> | <span data-ttu-id="6dc4f-548">[, DoubleClick] をクリックします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-548">Click, DoubleClick</span></span> | <span data-ttu-id="6dc4f-549">Click</span><span class="sxs-lookup"><span data-stu-id="6dc4f-549">Click</span></span> | <span data-ttu-id="6dc4f-550">[, DoubleClick] をクリックします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-550">Click, DoubleClick</span></span> | <span data-ttu-id="6dc4f-551">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-551">none</span></span> | <span data-ttu-id="6dc4f-552">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-552">none</span></span> | <span data-ttu-id="6dc4f-553">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-553">none</span></span> | <span data-ttu-id="6dc4f-554">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-554">none</span></span> | <span data-ttu-id="6dc4f-555">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-555">none</span></span> | <span data-ttu-id="6dc4f-556">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-556">none</span></span> |
| <span data-ttu-id="6dc4f-557"><xref:System.Windows.Forms.ProgressBar>, <xref:System.Windows.Forms.TrackBar></span><span class="sxs-lookup"><span data-stu-id="6dc4f-557"><xref:System.Windows.Forms.ProgressBar>, <xref:System.Windows.Forms.TrackBar></span></span> | <span data-ttu-id="6dc4f-558">Click</span><span class="sxs-lookup"><span data-stu-id="6dc4f-558">Click</span></span> | <span data-ttu-id="6dc4f-559">をクリックし、</span><span class="sxs-lookup"><span data-stu-id="6dc4f-559">Click, Click</span></span> | <span data-ttu-id="6dc4f-560">Click</span><span class="sxs-lookup"><span data-stu-id="6dc4f-560">Click</span></span> | <span data-ttu-id="6dc4f-561">をクリックし、</span><span class="sxs-lookup"><span data-stu-id="6dc4f-561">Click, Click</span></span> | <span data-ttu-id="6dc4f-562">Click</span><span class="sxs-lookup"><span data-stu-id="6dc4f-562">Click</span></span> | <span data-ttu-id="6dc4f-563">をクリックし、</span><span class="sxs-lookup"><span data-stu-id="6dc4f-563">Click, Click</span></span> | <span data-ttu-id="6dc4f-564">Click</span><span class="sxs-lookup"><span data-stu-id="6dc4f-564">Click</span></span> | <span data-ttu-id="6dc4f-565">をクリックし、</span><span class="sxs-lookup"><span data-stu-id="6dc4f-565">Click, Click</span></span> | <span data-ttu-id="6dc4f-566">Click</span><span class="sxs-lookup"><span data-stu-id="6dc4f-566">Click</span></span> | <span data-ttu-id="6dc4f-567">をクリックし、</span><span class="sxs-lookup"><span data-stu-id="6dc4f-567">Click, Click</span></span> |
| <span data-ttu-id="6dc4f-568"><xref:System.Windows.Forms.Form>、<xref:System.Windows.Forms.DataGrid>、<xref:System.Windows.Forms.Label>、<xref:System.Windows.Forms.LinkLabel>、<xref:System.Windows.Forms.Panel>、<xref:System.Windows.Forms.GroupBox>、<xref:System.Windows.Forms.PictureBox>、<xref:System.Windows.Forms.Splitter>、<xref:System.Windows.Forms.StatusBar>、<xref:System.Windows.Forms.ToolBar>、<xref:System.Windows.Forms.TabPage>、\*\* <xref:System.Windows.Forms.TabControl></span><span class="sxs-lookup"><span data-stu-id="6dc4f-568"><xref:System.Windows.Forms.Form>, <xref:System.Windows.Forms.DataGrid>, <xref:System.Windows.Forms.Label>, <xref:System.Windows.Forms.LinkLabel>, <xref:System.Windows.Forms.Panel>, <xref:System.Windows.Forms.GroupBox>, <xref:System.Windows.Forms.PictureBox>, <xref:System.Windows.Forms.Splitter>, <xref:System.Windows.Forms.StatusBar>, <xref:System.Windows.Forms.ToolBar>, <xref:System.Windows.Forms.TabPage>, \*\* <xref:System.Windows.Forms.TabControl></span></span> | <span data-ttu-id="6dc4f-569">Click</span><span class="sxs-lookup"><span data-stu-id="6dc4f-569">Click</span></span> | <span data-ttu-id="6dc4f-570">[, DoubleClick] をクリックします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-570">Click, DoubleClick</span></span> | <span data-ttu-id="6dc4f-571">Click</span><span class="sxs-lookup"><span data-stu-id="6dc4f-571">Click</span></span> | <span data-ttu-id="6dc4f-572">[, DoubleClick] をクリックします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-572">Click, DoubleClick</span></span> | <span data-ttu-id="6dc4f-573">Click</span><span class="sxs-lookup"><span data-stu-id="6dc4f-573">Click</span></span> | <span data-ttu-id="6dc4f-574">[, DoubleClick] をクリックします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-574">Click, DoubleClick</span></span> | <span data-ttu-id="6dc4f-575">Click</span><span class="sxs-lookup"><span data-stu-id="6dc4f-575">Click</span></span> | <span data-ttu-id="6dc4f-576">[, DoubleClick] をクリックします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-576">Click, DoubleClick</span></span> | <span data-ttu-id="6dc4f-577">Click</span><span class="sxs-lookup"><span data-stu-id="6dc4f-577">Click</span></span> | <span data-ttu-id="6dc4f-578">[, DoubleClick] をクリックします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-578">Click, DoubleClick</span></span> |

<span data-ttu-id="6dc4f-579">マウスポインターが子オブジェクト (<xref:System.Windows.Forms.TreeNode> または <xref:System.Windows.Forms.ListViewItem>) 上にある必要がある \* ます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-579">\* The mouse pointer must be over a child object (<xref:System.Windows.Forms.TreeNode> or <xref:System.Windows.Forms.ListViewItem>).</span></span>  
  
 <span data-ttu-id="6dc4f-580">\* \* <xref:System.Windows.Forms.TabControl> には、<xref:System.Windows.Forms.TabControl.TabPages> コレクションに少なくとも1つの <xref:System.Windows.Forms.TabPage> が必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-580">\*\* The <xref:System.Windows.Forms.TabControl> must have at least one <xref:System.Windows.Forms.TabPage> in its <xref:System.Windows.Forms.TabControl.TabPages> collection.</span></span>

## Examples  
 <span data-ttu-id="6dc4f-581">次のコード例は、イベントハンドラーの <xref:System.Windows.Forms.Control.Click> イベントを示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-581">The following code example shows the <xref:System.Windows.Forms.Control.Click> event in an event handler.</span></span>  
  
 [!code-cpp[Control.FindForm#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.FindForm/CPP/form1.cpp#1)]
 [!code-csharp[Control.FindForm#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.FindForm/CS/form1.cs#1)]
 [!code-vb[Control.FindForm#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.FindForm/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnClick(System.EventArgs)" />
        <altmember cref="F:System.Windows.Forms.ControlStyles.StandardClick" />
        <altmember cref="E:System.Windows.Forms.Control.MouseClick" />
        <altmember cref="E:System.Windows.Forms.Control.DoubleClick" />
        <altmember cref="E:System.Windows.Forms.Control.MouseDoubleClick" />
      </Docs>
    </Member>
    <Member MemberName="ClientRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle ClientRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle ClientRectangle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ClientRectangle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClientRectangle As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Rectangle ClientRectangle { System::Drawing::Rectangle get(); };" />
      <MemberSignature Language="F#" Value="member this.ClientRectangle : System.Drawing.Rectangle" Usage="System.Windows.Forms.Control.ClientRectangle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-582">コントロールのクライアント領域を表す四角形を取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-582">Gets the rectangle that represents the client area of the control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-583">コントロールのクライアント領域を表す <see cref="T:System.Drawing.Rectangle" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-583">A <see cref="T:System.Drawing.Rectangle" /> that represents the client area of the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-584">コントロールのクライアント領域は、スクロールバー、境界線、タイトルバー、メニューなど、非クライアント要素を除いたコントロールの境界です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-584">The client area of a control is the bounds of the control, minus the nonclient elements such as scroll bars, borders, title bars, and menus.</span></span>  
  
 <span data-ttu-id="6dc4f-585">クライアント座標は、コントロールのクライアント領域の左上隅を基準としているため、このプロパティによって返される四角形の左上隅の座標は (0, 0) です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-585">Because client coordinates are relative to the upper-left corner of the client area of the control, the coordinates of the upper-left corner of the rectangle returned by this property are (0,0).</span></span> <span data-ttu-id="6dc4f-586">このプロパティを使用すると、コントロールの画面上での描画などのタスクについて、コントロールのクライアント領域のサイズと座標を取得できます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-586">You can use this property to obtain the size and coordinates of the client area of the control for tasks such as drawing on the surface of the control.</span></span>  
  
 <span data-ttu-id="6dc4f-587">コントロールの描画の詳細については、「 [Windows フォームコントロールのレンダリング](~/docs/framework/winforms/controls/rendering-a-windows-forms-control.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-587">For more information about drawing on controls, see [Rendering a Windows Forms Control](~/docs/framework/winforms/controls/rendering-a-windows-forms-control.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-588">次のコード例では、フォームの自動スクロールを有効にし、フォームのサイズを変更して、フォームのサイズを変更した後もボタンを表示したままにします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-588">The following code example enables auto-scrolling for a form, resizes the form, and ensures that a button remains visible after the form is resized.</span></span> <span data-ttu-id="6dc4f-589">この例では、`button2` という名前の <xref:System.Windows.Forms.Button> を持つ <xref:System.Windows.Forms.Form> が必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-589">This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.Button> named `button2` on it.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Member5#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Member5/CPP/controlmembers5.cpp#2)]
 [!code-csharp[Windows.Forms.Control Member5#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Member5/CS/controlmembers5.cs#2)]
 [!code-vb[Windows.Forms.Control Member5#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Member5/VB/controlmembers5.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.ClientSize" />
        <altmember cref="T:System.Windows.Forms.DrawMode" />
      </Docs>
    </Member>
    <Member MemberName="ClientSize">
      <MemberSignature Language="C#" Value="public System.Drawing.Size ClientSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size ClientSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ClientSize" />
      <MemberSignature Language="VB.NET" Value="Public Property ClientSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size ClientSize { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberSignature Language="F#" Value="member this.ClientSize : System.Drawing.Size with get, set" Usage="System.Windows.Forms.Control.ClientSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-590">コントロールのクライアント領域の高さと幅を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-590">Gets or sets the height and width of the client area of the control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-591">コントロールのクライアント領域の大きさを表す <see cref="T:System.Drawing.Size" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-591">A <see cref="T:System.Drawing.Size" /> that represents the dimensions of the client area of the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-592">コントロールのクライアント領域は、スクロールバー、境界線、タイトルバー、メニューなど、非クライアント要素を除いたコントロールの境界です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-592">The client area of a control is the bounds of the control, minus the nonclient elements such as scroll bars, borders, title bars, and menus.</span></span> <span data-ttu-id="6dc4f-593"><xref:System.Windows.Forms.Control.SetClientSizeCore%2A> メソッドは、<xref:System.Windows.Forms.Control.ClientSize%2A> プロパティを設定するために呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-593">The <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> method is called to set the <xref:System.Windows.Forms.Control.ClientSize%2A> property.</span></span> <span data-ttu-id="6dc4f-594"><xref:System.Windows.Forms.Control.ClientSize%2A> プロパティは、常に `set` メソッドによって変更されるとは限りません。そのため、<xref:System.Windows.Forms.Control.ClientSize%2A> プロパティが設定されたときにコードが実行されるように <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> メソッドをオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-594">The <xref:System.Windows.Forms.Control.ClientSize%2A> property is not always changed through its `set` method so you should override the <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> method to ensure that your code is executed when the <xref:System.Windows.Forms.Control.ClientSize%2A> property is set.</span></span>  
  
 <span data-ttu-id="6dc4f-595"><xref:System.Drawing.Size.Width%2A?displayProperty=nameWithType> プロパティと <xref:System.Drawing.Size.Height%2A?displayProperty=nameWithType> プロパティは、コントロールのクライアント領域の幅と高さを表します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-595">The <xref:System.Drawing.Size.Width%2A?displayProperty=nameWithType> and <xref:System.Drawing.Size.Height%2A?displayProperty=nameWithType> properties represent the width and height of the client area of the control.</span></span> <span data-ttu-id="6dc4f-596">このプロパティを使用すると、コントロールの画面上での描画などのタスクについて、コントロールのクライアント領域のサイズを取得できます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-596">You can use this property to obtain the size of the client area of the control for tasks such as drawing on the surface of the control.</span></span>  
  
 <span data-ttu-id="6dc4f-597">コントロールの描画の詳細については、「 [Windows フォームコントロールのレンダリング](~/docs/framework/winforms/controls/rendering-a-windows-forms-control.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-597">For more information about drawing on controls, see [Rendering a Windows Forms Control](~/docs/framework/winforms/controls/rendering-a-windows-forms-control.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-598">アプリケーション設定をこのプロパティにバインドすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-598">You cannot bind application settings to this property.</span></span> <span data-ttu-id="6dc4f-599">アプリケーション設定の詳細については、「[アプリケーション設定の概要](~/docs/framework/winforms/advanced/application-settings-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-599">For more information on application settings, see [Application Settings Overview](~/docs/framework/winforms/advanced/application-settings-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-600">次のコード例では、指定したコントロールのサイズを変更して、コントロールが書式設定されたテキストに対応するようにします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-600">The following code example resizes the specified control so the control will accommodate its formatted text.</span></span> <span data-ttu-id="6dc4f-601">書式設定されたテキストは、コントロールが割り当てられ <xref:System.Windows.Forms.Control.Font%2A> テキストに適用された <xref:System.Windows.Forms.Control.Text%2A> プロパティです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-601">The formatted text is the <xref:System.Windows.Forms.Control.Text%2A> property with the control's assigned <xref:System.Windows.Forms.Control.Font%2A> applied to the text.</span></span> <span data-ttu-id="6dc4f-602">この例の `AutoSizeControl` メソッドには、コントロールのすべての端に適用する埋め込みを表す `textPadding` パラメーターもあります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-602">The `AutoSizeControl` method in this example also has a `textPadding` parameter that represents the padding to apply to all edges of the control.</span></span> <span data-ttu-id="6dc4f-603">埋め込みを同じにするには、コントロールでサポートされている場合は、テキストを <xref:System.Drawing.ContentAlignment.MiddleCenter?displayProperty=nameWithType> の値に揃えます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-603">To make the padding appear equal, align the text with the <xref:System.Drawing.ContentAlignment.MiddleCenter?displayProperty=nameWithType> value, if your control supports it.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Member5#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Member5/CPP/controlmembers5.cpp#1)]
 [!code-csharp[Windows.Forms.Control Member5#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Member5/CS/controlmembers5.cs#1)]
 [!code-vb[Windows.Forms.Control Member5#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Member5/VB/controlmembers5.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.ClientRectangle" />
        <altmember cref="T:System.Windows.Forms.DrawMode" />
      </Docs>
    </Member>
    <Member MemberName="ClientSizeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ClientSizeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ClientSizeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ClientSizeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ClientSizeChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ClientSizeChanged;" />
      <MemberSignature Language="F#" Value="member this.ClientSizeChanged : EventHandler " Usage="member this.ClientSizeChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-604"><see cref="P:System.Windows.Forms.Control.ClientSize" /> プロパティの値が変化したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-604">Occurs when the value of the <see cref="P:System.Windows.Forms.Control.ClientSize" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-605">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-605">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-606">このメンバーの使用例を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-606">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="6dc4f-607">この例では、イベントハンドラーは、<xref:System.Windows.Forms.Control.ClientSizeChanged> イベントの発生を報告します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-607">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.ClientSizeChanged> event.</span></span> <span data-ttu-id="6dc4f-608">このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-608">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="6dc4f-609">複数のイベントまたは頻繁に発生するイベントについてレポートするには、<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> を <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> に置き換えるか、複数行 <xref:System.Windows.Forms.TextBox>にメッセージを追加することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-609">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="6dc4f-610">コード例を実行するには、<xref:System.Windows.Forms.Button> や <xref:System.Windows.Forms.ComboBox>などの <xref:System.Windows.Forms.Control>から継承する型のインスタンスを含むプロジェクトに貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-610">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="6dc4f-611">次に、インスタンスに `Control1` という名前を付け、イベントハンドラーが <xref:System.Windows.Forms.Control.ClientSizeChanged> イベントに関連付けられていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-611">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.ClientSizeChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#12)]
 [!code-vb[System.Windows.Forms.EventExamples#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompanyName">
      <MemberSignature Language="C#" Value="public string CompanyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CompanyName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CompanyName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CompanyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CompanyName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CompanyName : string" Usage="System.Windows.Forms.Control.CompanyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Description("ControlCompanyNameDescr")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-612">コントロールを含んでいるアプリケーションの会社または作成者の名前を取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-612">Gets the name of the company or creator of the application containing the control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-613">コントロールを含んでいるアプリケーションの会社または作成者の名前。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-613">The company name or creator of the application containing the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-614"><xref:System.Windows.Forms.Control.CompanyName%2A> プロパティは、読み取り専用のプロパティです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-614">The <xref:System.Windows.Forms.Control.CompanyName%2A> property is a read-only property.</span></span> <span data-ttu-id="6dc4f-615">このプロパティの値を変更するには、<xref:System.Reflection.AssemblyCompanyAttribute>の <xref:System.Reflection.AssemblyCompanyAttribute.Company%2A> プロパティの値を設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-615">To change the value of this property, set the <xref:System.Reflection.AssemblyCompanyAttribute.Company%2A> property value of the <xref:System.Reflection.AssemblyCompanyAttribute>.</span></span> <span data-ttu-id="6dc4f-616">次のC#コード行は、<xref:System.Windows.Forms.Control.CompanyName%2A> プロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-616">The following line of C# code sets the <xref:System.Windows.Forms.Control.CompanyName%2A> property.</span></span>  
  
```csharp  
[assembly: AssemblyCompany("Microsoft")]  
```  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-617">アプリの会社名、製品名、製品バージョンを指定することを強くお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-617">It is strongly recommended that you provide the company name, product name, and product version for your app.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-618">次のコード例では、<xref:System.Windows.Forms.Form>に含まれる <xref:System.Windows.Forms.Label> のアプリケーションに関する情報を表示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-618">The following code example displays information about the application in a <xref:System.Windows.Forms.Label> contained by a <xref:System.Windows.Forms.Form>.</span></span> <span data-ttu-id="6dc4f-619">この例では、<xref:System.Windows.Forms.Control.CompanyName%2A>、<xref:System.Windows.Forms.Control.ProductName%2A>、<xref:System.Windows.Forms.Control.ProductVersion%2A> が設定されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-619">This example requires that the <xref:System.Windows.Forms.Control.CompanyName%2A>, <xref:System.Windows.Forms.Control.ProductName%2A> and <xref:System.Windows.Forms.Control.ProductVersion%2A> have been set.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties3/CPP/aboutdialog.cpp#1)]
 [!code-csharp[Windows.Forms.Control Properties3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties3/CS/aboutdialog.cs#1)]
 [!code-vb[Windows.Forms.Control Properties3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties3/VB/aboutdialog.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.AssemblyCompanyAttribute.Company" />
        <altmember cref="P:System.Diagnostics.FileVersionInfo.CompanyName" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Forms.Control ctl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Windows.Forms.Control ctl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Contains(System.Windows.Forms.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (ctl As Control) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Windows::Forms::Control ^ ctl);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.Windows.Forms.Control -&gt; bool" Usage="control.Contains ctl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctl" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="ctl"><span data-ttu-id="6dc4f-620">評価する <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-620">The <see cref="T:System.Windows.Forms.Control" /> to evaluate.</span></span></param>
        <summary><span data-ttu-id="6dc4f-621">指定したコントロールが、コントロールの子かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-621">Retrieves a value indicating whether the specified control is a child of the control.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-622">指定したコントロールがコントロールの子である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-622"><see langword="true" /> if the specified control is a child of the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6dc4f-623">次のコード例では、<xref:System.Windows.Forms.Control.BringToFront%2A> メソッドを呼び出すことによって <xref:System.Windows.Forms.Label> が確実に表示されるようにします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-623">The following code example ensures that a <xref:System.Windows.Forms.Label> is visible by calling its <xref:System.Windows.Forms.Control.BringToFront%2A> method.</span></span> <span data-ttu-id="6dc4f-624">この例では、`panel1`という名前の <xref:System.Windows.Forms.Panel> と、`label1`という名前の <xref:System.Windows.Forms.Label> を持つ <xref:System.Windows.Forms.Form> が必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-624">This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.Panel> named `panel1`, and a <xref:System.Windows.Forms.Label> named `label1`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Members4#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#1)]
 [!code-csharp[Windows.Forms.Control Members4#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#1)]
 [!code-vb[Windows.Forms.Control Members4#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.ControlCollection.Contains(System.Windows.Forms.Control)" />
        <altmember cref="P:System.Windows.Forms.Control.Controls" />
        <altmember cref="P:System.Windows.Forms.Control.Parent" />
      </Docs>
    </Member>
    <Member MemberName="ContainsFocus">
      <MemberSignature Language="C#" Value="public bool ContainsFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContainsFocus" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ContainsFocus" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContainsFocus As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ContainsFocus { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ContainsFocus : bool" Usage="System.Windows.Forms.Control.ContainsFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-625">コントロール、またはその子コントロールの 1 つに、現在入力フォーカスがあるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-625">Gets a value indicating whether the control, or one of its child controls, currently has the input focus.</span></span></summary>
        <value><span data-ttu-id="6dc4f-626">コントロール、またはその子コントロールの 1 つに、現在入力フォーカスがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-626"><see langword="true" /> if the control or one of its child controls currently has the input focus; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-627">このプロパティを使用して、コントロールまたはその中に含まれるコントロールに入力フォーカスがあるかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-627">You can use this property to determine whether a control or any of the controls contained within it has the input focus.</span></span> <span data-ttu-id="6dc4f-628">コントロールにフォーカスがあるかどうかを判断するには、子コントロールのいずれかにフォーカスがあるかどうかに関係なく、<xref:System.Windows.Forms.Control.Focused%2A> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-628">To determine whether the control has focus, regardless of whether any of its child controls have focus, use the <xref:System.Windows.Forms.Control.Focused%2A> property.</span></span> <span data-ttu-id="6dc4f-629">コントロールに入力フォーカスを与えるには、<xref:System.Windows.Forms.Control.Focus%2A> または <xref:System.Windows.Forms.Control.Select%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-629">To give a control the input focus, use the <xref:System.Windows.Forms.Control.Focus%2A> or <xref:System.Windows.Forms.Control.Select%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.CanFocus" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="P:System.Windows.Forms.Control.Focused" />
        <altmember cref="P:System.Windows.Forms.Control.CanSelect" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenu">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.ContextMenu ContextMenu { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ContextMenu ContextMenu" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ContextMenu" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ContextMenu As ContextMenu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::ContextMenu ^ ContextMenu { System::Windows::Forms::ContextMenu ^ get(); void set(System::Windows::Forms::ContextMenu ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContextMenu : System.Windows.Forms.ContextMenu with get, set" Usage="System.Windows.Forms.Control.ContextMenu" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ContextMenu</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-630">コントロールに関連付けられたショートカット メニューを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-630">Gets or sets the shortcut menu associated with the control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-631">コントロールに関連付けられたショートカット メニューを表す <see cref="T:System.Windows.Forms.ContextMenu" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-631">A <see cref="T:System.Windows.Forms.ContextMenu" /> that represents the shortcut menu associated with the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-632">ショートカットメニューを使用して、コントロールを右クリックしたときにコンテキスト固有のメニューオプションをユーザーに提供します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-632">Use a shortcut menus to give context-specific menu options to users when they right-click on the control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-633">次のコード例では、マウスの右ボタンをクリックして離したときに <xref:System.Windows.Forms.TreeView> に割り当てられた <xref:System.Windows.Forms.ContextMenu> を表示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-633">The following code example displays the <xref:System.Windows.Forms.ContextMenu> assigned to a <xref:System.Windows.Forms.TreeView> when the right mouse button is clicked and released.</span></span> <span data-ttu-id="6dc4f-634">このコードでは、<xref:System.Windows.Forms.TreeView> を持つ <xref:System.Windows.Forms.Form> が必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-634">This code requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TreeView> on it.</span></span> <span data-ttu-id="6dc4f-635">また、<xref:System.Windows.Forms.TreeView> に <xref:System.Windows.Forms.Control.ContextMenu%2A> プロパティに割り当てられた <xref:System.Windows.Forms.ContextMenu> があることも必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-635">It is also required that the <xref:System.Windows.Forms.TreeView> has a <xref:System.Windows.Forms.ContextMenu> assigned to its <xref:System.Windows.Forms.Control.ContextMenu%2A> property.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties2#5](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CPP/misccontrolproperties.cpp#5)]
 [!code-csharp[Windows.Forms.Control Properties2#5](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CS/misccontrolproperties.cs#5)]
 [!code-vb[Windows.Forms.Control Properties2#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties2/VB/misccontrolproperties.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-636">派生クラスの <see cref="P:System.Windows.Forms.Control.ContextMenu" /> プロパティをオーバーライドする場合は、基本クラスの <see cref="P:System.Windows.Forms.Control.ContextMenu" /> プロパティを使用して、基本実装を拡張します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-636">When overriding the <see cref="P:System.Windows.Forms.Control.ContextMenu" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.ContextMenu" /> property to extend the base implementation.</span></span> <span data-ttu-id="6dc4f-637">それ以外の場合は、すべての実装を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-637">Otherwise, you must provide all the implementation.</span></span> <span data-ttu-id="6dc4f-638"><see cref="P:System.Windows.Forms.Control.ContextMenu" /> プロパティの <see langword="get" /> と <see langword="set" /> の両方のアクセサーをオーバーライドする必要はありません。必要に応じて、オーバーライドできるのは1つだけです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-638">You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.ContextMenu" /> property; you can override only one if needed.</span></span></para></block>
        <altmember cref="T:System.Windows.Forms.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ContextMenuChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ContextMenuChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ContextMenuChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ContextMenuChanged;" />
      <MemberSignature Language="F#" Value="member this.ContextMenuChanged : EventHandler " Usage="member this.ContextMenuChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-639"><see cref="P:System.Windows.Forms.Control.ContextMenu" /> プロパティの値が変化したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-639">Occurs when the value of the <see cref="P:System.Windows.Forms.Control.ContextMenu" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-640">このイベントは、プログラムによる変更またはユーザーの操作によって <xref:System.Windows.Forms.Control.ContextMenu%2A> プロパティが変更された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-640">This event is raised if the <xref:System.Windows.Forms.Control.ContextMenu%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="6dc4f-641">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-641">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-642">次のコード例では、ショートカットメニューに変更が発生したときにメッセージを表示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-642">The following code example displays a message when a change occurs to the shortcut menu.</span></span>  
  
 [!code-cpp[Control_ContextMenu_CreateGraphics#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_ContextMenu_CreateGraphics/CPP/control_contextmenu_creategraphics.cpp#2)]
 [!code-csharp[Control_ContextMenu_CreateGraphics#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_ContextMenu_CreateGraphics/CS/control_contextmenu_creategraphics.cs#2)]
 [!code-vb[Control_ContextMenu_CreateGraphics#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_ContextMenu_CreateGraphics/VB/control_contextmenu_creategraphics.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.ContextMenu" />
        <altmember cref="T:System.Windows.Forms.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuStrip">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.ContextMenuStrip ContextMenuStrip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ContextMenuStrip ContextMenuStrip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ContextMenuStrip" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ContextMenuStrip As ContextMenuStrip" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::ContextMenuStrip ^ ContextMenuStrip { System::Windows::Forms::ContextMenuStrip ^ get(); void set(System::Windows::Forms::ContextMenuStrip ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContextMenuStrip : System.Windows.Forms.ContextMenuStrip with get, set" Usage="System.Windows.Forms.Control.ContextMenuStrip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ContextMenuStrip</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-643">このコントロールに関連付けられている <see cref="T:System.Windows.Forms.ContextMenuStrip" /> を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-643">Gets or sets the <see cref="T:System.Windows.Forms.ContextMenuStrip" /> associated with this control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-644">このコントロールの <see cref="T:System.Windows.Forms.ContextMenuStrip" />。<see langword="null" /> がない場合は <see cref="T:System.Windows.Forms.ContextMenuStrip" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-644">The <see cref="T:System.Windows.Forms.ContextMenuStrip" /> for this control, or <see langword="null" /> if there is no <see cref="T:System.Windows.Forms.ContextMenuStrip" />.</span></span> <span data-ttu-id="6dc4f-645">既定では、 <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-645">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-646">コントロールに <xref:System.Windows.Forms.ContextMenu> が割り当てられている場合は、<xref:System.Windows.Forms.ContextMenu> が <xref:System.Windows.Forms.ContextMenuStrip>よりも優先されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-646">If a <xref:System.Windows.Forms.ContextMenu> has also been assigned to the control, the <xref:System.Windows.Forms.ContextMenu> takes precedence over the <xref:System.Windows.Forms.ContextMenuStrip>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-647">次のコード例は、3つの <xref:System.Windows.Forms.ToolStripMenuItem> オブジェクトを <xref:System.Windows.Forms.ContextMenuStrip>に追加する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-647">The following code example demonstrates how to add three <xref:System.Windows.Forms.ToolStripMenuItem> objects to a <xref:System.Windows.Forms.ContextMenuStrip>.</span></span> <span data-ttu-id="6dc4f-648">また、フォームの <xref:System.Windows.Forms.Control.ContextMenuStrip%2A> プロパティを設定する方法についても説明します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-648">In addition it demonstrates setting the <xref:System.Windows.Forms.Control.ContextMenuStrip%2A> property of the form.</span></span>  
  
 [!code-csharp[System.Windows.Forms.Control.ContextMenuStrip#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.ContextMenuStrip/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.ContextMenuStrip#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.ContextMenuStrip/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuStripChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ContextMenuStripChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ContextMenuStripChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ContextMenuStripChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuStripChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ContextMenuStripChanged;" />
      <MemberSignature Language="F#" Value="member this.ContextMenuStripChanged : EventHandler " Usage="member this.ContextMenuStripChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-649"><see cref="P:System.Windows.Forms.Control.ContextMenuStrip" /> プロパティの値が変化したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-649">Occurs when the value of the <see cref="P:System.Windows.Forms.Control.ContextMenuStrip" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-650">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-650">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-651">このメンバーの使用例を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-651">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="6dc4f-652">この例では、イベントハンドラーは、<xref:System.Windows.Forms.Control.ContextMenuStripChanged> イベントの発生を報告します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-652">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.ContextMenuStripChanged> event.</span></span> <span data-ttu-id="6dc4f-653">このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-653">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="6dc4f-654">複数のイベントまたは頻繁に発生するイベントについてレポートするには、<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> を <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> に置き換えるか、複数行 <xref:System.Windows.Forms.TextBox>にメッセージを追加することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-654">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="6dc4f-655">コード例を実行するには、<xref:System.Windows.Forms.Button> や <xref:System.Windows.Forms.ComboBox>などの <xref:System.Windows.Forms.Control>から継承する型のインスタンスを含むプロジェクトに貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-655">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="6dc4f-656">次に、インスタンスに `Control1` という名前を付け、イベントハンドラーが <xref:System.Windows.Forms.Control.ContextMenuStripChanged> イベントに関連付けられていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-656">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.ContextMenuStripChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#14](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#14)]
 [!code-vb[System.Windows.Forms.EventExamples#14](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlAdded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ControlEventHandler ControlAdded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ControlEventHandler ControlAdded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ControlAdded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ControlAdded As ControlEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ControlEventHandler ^ ControlAdded;" />
      <MemberSignature Language="F#" Value="member this.ControlAdded : System.Windows.Forms.ControlEventHandler " Usage="member this.ControlAdded : System.Windows.Forms.ControlEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-657">新しいコントロールが <see cref="T:System.Windows.Forms.Control.ControlCollection" /> に追加されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-657">Occurs when a new control is added to the <see cref="T:System.Windows.Forms.Control.ControlCollection" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-658">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-658">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-659">次のコード例では、<xref:System.Windows.Forms.Control.ControlAdded> を使用してコントロールをフォームに追加し、追加したコントロールの名前を <xref:System.Windows.Forms.MessageBox>に表示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-659">The following code example uses <xref:System.Windows.Forms.Control.ControlAdded> to add a control to a form and displays the name of the added control in a <xref:System.Windows.Forms.MessageBox>.</span></span>  
  
 [!code-cpp[Control.ControlRemoved#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.ControlRemoved/CPP/form1.cpp#1)]
 [!code-csharp[Control.ControlRemoved#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.ControlRemoved/CS/form1.cs#1)]
 [!code-vb[Control.ControlRemoved#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.ControlRemoved/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Controls" />
        <altmember cref="T:System.Windows.Forms.Control.ControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="ControlRemoved">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ControlEventHandler ControlRemoved;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ControlEventHandler ControlRemoved" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ControlRemoved" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ControlRemoved As ControlEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ControlEventHandler ^ ControlRemoved;" />
      <MemberSignature Language="F#" Value="member this.ControlRemoved : System.Windows.Forms.ControlEventHandler " Usage="member this.ControlRemoved : System.Windows.Forms.ControlEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-660"><see cref="T:System.Windows.Forms.Control.ControlCollection" /> からコントロールが削除されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-660">Occurs when a control is removed from the <see cref="T:System.Windows.Forms.Control.ControlCollection" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-661">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-661">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-662">次のコード例では、<xref:System.Windows.Forms.Control.ControlRemoved> を使用してフォームからコントロールを削除し、<xref:System.Windows.Forms.MessageBox>に削除されたコントロールの名前を表示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-662">The following code example uses <xref:System.Windows.Forms.Control.ControlRemoved> to remove a control from a form and displays the name of the removed control in a <xref:System.Windows.Forms.MessageBox>.</span></span>  
  
 [!code-cpp[Control.ControlRemoved#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.ControlRemoved/CPP/form1.cpp#1)]
 [!code-csharp[Control.ControlRemoved#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.ControlRemoved/CS/form1.cs#1)]
 [!code-vb[Control.ControlRemoved#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.ControlRemoved/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Controls" />
        <altmember cref="T:System.Windows.Forms.Control.ControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="Controls">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control.ControlCollection Controls { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control/ControlCollection Controls" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Controls" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Controls As Control.ControlCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control::ControlCollection ^ Controls { System::Windows::Forms::Control::ControlCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Controls : System.Windows.Forms.Control.ControlCollection" Usage="System.Windows.Forms.Control.Controls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control+ControlCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-663">コントロール内に格納されているコントロールのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-663">Gets the collection of controls contained within the control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-664">コントロール内に格納されているコントロールのコレクションを表す <see cref="T:System.Windows.Forms.Control.ControlCollection" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-664">A <see cref="T:System.Windows.Forms.Control.ControlCollection" /> representing the collection of controls contained within the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-665"><xref:System.Windows.Forms.Control> は、コントロールのコレクションの親として機能することができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-665">A <xref:System.Windows.Forms.Control> can act as a parent to a collection of controls.</span></span> <span data-ttu-id="6dc4f-666">たとえば、複数のコントロールが <xref:System.Windows.Forms.Form>に追加されると、各コントロールは、<xref:System.Windows.Forms.Control> クラスから派生したフォームの <xref:System.Windows.Forms.Control.Controls%2A> プロパティに割り当てられた <xref:System.Windows.Forms.Control.ControlCollection> のメンバーになります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-666">For example, when several controls are added to a <xref:System.Windows.Forms.Form>, each of the controls is a member of the <xref:System.Windows.Forms.Control.ControlCollection> assigned to the <xref:System.Windows.Forms.Control.Controls%2A> property of the form, which is derived from the <xref:System.Windows.Forms.Control> class.</span></span>  
  
 <span data-ttu-id="6dc4f-667"><xref:System.Windows.Forms.Control.ControlCollection> クラスで使用できるメソッドを使用して、<xref:System.Windows.Forms.Control.Controls%2A> プロパティに割り当てられている <xref:System.Windows.Forms.Control.ControlCollection> 内のコントロールを操作できます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-667">You can manipulate the controls in the <xref:System.Windows.Forms.Control.ControlCollection> assigned to the <xref:System.Windows.Forms.Control.Controls%2A> property by using the methods available in the <xref:System.Windows.Forms.Control.ControlCollection> class.</span></span>  
  
 <span data-ttu-id="6dc4f-668">親コントロールに複数のコントロールを追加する場合は、追加するコントロールを初期化する前に、<xref:System.Windows.Forms.Control.SuspendLayout%2A> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-668">When adding several controls to a parent control, it is recommended that you call the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method before initializing the controls to be added.</span></span> <span data-ttu-id="6dc4f-669">コントロールを親コントロールに追加した後、<xref:System.Windows.Forms.Control.ResumeLayout%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-669">After adding the controls to the parent control, call the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method.</span></span> <span data-ttu-id="6dc4f-670">これにより、多くのコントロールでアプリケーションのパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-670">Doing so will increase the performance of applications with many controls.</span></span>  
  
 <span data-ttu-id="6dc4f-671">入れ子になったコントロールを含め、フォームのすべてのコントロールを反復処理するには、<xref:System.Windows.Forms.Control.Controls%2A> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-671">Use the <xref:System.Windows.Forms.Control.Controls%2A> property to iterate through all controls of a form, including nested controls.</span></span> <span data-ttu-id="6dc4f-672"><xref:System.Windows.Forms.Control.GetNextControl%2A> メソッドを使用して、タブオーダーの前または次の子コントロールを取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-672">Use the <xref:System.Windows.Forms.Control.GetNextControl%2A> method to retrieve the previous or next child control in the tab order.</span></span> <span data-ttu-id="6dc4f-673"><xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> プロパティを使用して、コンテナーコントロールのアクティブなコントロールを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-673">Use the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> property to get or set the active control of a container control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-674">次のコード例では、コレクションのメンバーである場合 <xref:System.Windows.Forms.Panel> 派生クラスの <xref:System.Windows.Forms.Control.ControlCollection> から <xref:System.Windows.Forms.Control> を削除します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-674">The following code example removes a <xref:System.Windows.Forms.Control> from the <xref:System.Windows.Forms.Control.ControlCollection> of the derived class <xref:System.Windows.Forms.Panel> if it is a member of the collection.</span></span> <span data-ttu-id="6dc4f-675">この例では、<xref:System.Windows.Forms.Panel>、<xref:System.Windows.Forms.Button>、および少なくとも1つの <xref:System.Windows.Forms.RadioButton> コントロールを <xref:System.Windows.Forms.Form>に作成しておく必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-675">The example requires that you have created a <xref:System.Windows.Forms.Panel>, a <xref:System.Windows.Forms.Button>, and at least one <xref:System.Windows.Forms.RadioButton> control on a <xref:System.Windows.Forms.Form>.</span></span> <span data-ttu-id="6dc4f-676"><xref:System.Windows.Forms.RadioButton> コントロールが <xref:System.Windows.Forms.Panel> コントロールに追加され、<xref:System.Windows.Forms.Panel> コントロールが <xref:System.Windows.Forms.Form>に追加されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-676">The <xref:System.Windows.Forms.RadioButton> control(s) are added to the <xref:System.Windows.Forms.Panel> control, and the <xref:System.Windows.Forms.Panel> control added to the <xref:System.Windows.Forms.Form>.</span></span> <span data-ttu-id="6dc4f-677">このボタンがクリックされると、`removeButton` という名前のラジオボタンが <xref:System.Windows.Forms.Control.ControlCollection>から削除されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-677">When the button is clicked, the radio button named `removeButton` is removed from the <xref:System.Windows.Forms.Control.ControlCollection>.</span></span>  
  
 [!code-cpp[ControlCollection#4](~/samples/snippets/cpp/VS_Snippets_Winforms/ControlCollection/CPP/controlcollection.cpp#4)]
 [!code-csharp[ControlCollection#4](~/samples/snippets/csharp/VS_Snippets_Winforms/ControlCollection/CS/controlcollection.cs#4)]
 [!code-vb[ControlCollection#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ControlCollection/VB/controlcollection.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Control.ControlCollection" />
        <altmember cref="M:System.Windows.Forms.Control.CreateControlsInstance" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.ResumeLayout" />
      </Docs>
    </Member>
    <Member MemberName="CreateAccessibilityInstance">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.AccessibleObject CreateAccessibilityInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Forms.AccessibleObject CreateAccessibilityInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.CreateAccessibilityInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateAccessibilityInstance () As AccessibleObject" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Forms::AccessibleObject ^ CreateAccessibilityInstance();" />
      <MemberSignature Language="F#" Value="abstract member CreateAccessibilityInstance : unit -&gt; System.Windows.Forms.AccessibleObject&#xA;override this.CreateAccessibilityInstance : unit -&gt; System.Windows.Forms.AccessibleObject" Usage="control.CreateAccessibilityInstance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6dc4f-678">コントロールの新しいユーザー補助オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-678">Creates a new accessibility object for the control.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-679">コントロールの新しい <see cref="T:System.Windows.Forms.AccessibleObject" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-679">A new <see cref="T:System.Windows.Forms.AccessibleObject" /> for the control.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-680">明示的に <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> メソッドを呼び出さない場合は、<xref:System.Windows.Forms.Control.AccessibilityObject%2A> プロパティが参照されると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-680">If you do not explicitly call the <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> method, it will be called when the <xref:System.Windows.Forms.Control.AccessibilityObject%2A> property is referenced.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-681"><xref:System.Windows.Forms.Control.AccessibilityObject%2A> プロパティを取得または設定するには、[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]と共にインストールされた `Accessibility` アセンブリへの参照を追加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-681">To get or set the <xref:System.Windows.Forms.Control.AccessibilityObject%2A> property, you must add a reference to the `Accessibility` assembly installed with the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-682">次のコード例は、<xref:System.Windows.Forms.AccessibleObject> クラスと <xref:System.Windows.Forms.Control.ControlAccessibleObject> クラスを使用してアクセス可能な情報を公開する、アクセシビリティ対応のグラフコントロールを作成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-682">The following code example demonstrates the creation of an accessibility-aware chart control, using the <xref:System.Windows.Forms.AccessibleObject> and <xref:System.Windows.Forms.Control.ControlAccessibleObject> classes to expose accessible information.</span></span> <span data-ttu-id="6dc4f-683">コントロールは、凡例と共に2つの曲線をプロットします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-683">The control plots two curves along with a legend.</span></span> <span data-ttu-id="6dc4f-684">`ControlAccessibleObject`から派生した `ChartControlAccessibleObject` クラスは、<xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> メソッドでグラフコントロールにカスタムのユーザー補助情報を提供するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-684">The `ChartControlAccessibleObject` class, which derives from `ControlAccessibleObject`, is used in the <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> method to provide custom accessible information for the chart control.</span></span> <span data-ttu-id="6dc4f-685">グラフの凡例は実際の <xref:System.Windows.Forms.Control> ベースのコントロールではなく、グラフコントロールによって描画されるため、組み込みのアクセス可能な情報は含まれません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-685">Since the chart legend is not an actual <xref:System.Windows.Forms.Control> -based control, but instead is drawn by the chart control, it does not any built-in accessible information.</span></span> <span data-ttu-id="6dc4f-686">このため、`ChartControlAccessibleObject` クラスは <xref:System.Windows.Forms.AccessibleObject.GetChild%2A> メソッドをオーバーライドして、凡例の各部分のアクセス可能な情報を表す `CurveLegendAccessibleObject` を返します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-686">Because of this, the `ChartControlAccessibleObject` class overrides the <xref:System.Windows.Forms.AccessibleObject.GetChild%2A> method to return the `CurveLegendAccessibleObject` that represents accessible information for each part of the legend.</span></span> <span data-ttu-id="6dc4f-687">アクセス可能なアプリケーションがこのコントロールを使用する場合、コントロールは必要なアクセス可能な情報を提供できます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-687">When an accessible-aware application uses this control, the control can provide the necessary accessible information.</span></span>  
  
 <span data-ttu-id="6dc4f-688">このコード抜粋は、<xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> メソッドをオーバーライドする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-688">This code excerpt demonstrates overriding the <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> method.</span></span> <span data-ttu-id="6dc4f-689">完全なコード例については、<xref:System.Windows.Forms.AccessibleObject> クラスの概要を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-689">See the <xref:System.Windows.Forms.AccessibleObject> class overview for the complete code example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.AccessibleObject#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/CPP/chartcontrol.cpp#2)]
 [!code-csharp[System.Windows.Forms.AccessibleObject#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/CS/chartcontrol.cs#2)]
 [!code-vb[System.Windows.Forms.AccessibleObject#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/VB/chartcontrol.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-690">派生クラスで <see cref="M:System.Windows.Forms.Control.CreateAccessibilityInstance" /> をオーバーライドする場合は、基本クラスの <see cref="M:System.Windows.Forms.Control.CreateAccessibilityInstance" /> メソッドを呼び出さないでください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-690">When overriding <see cref="M:System.Windows.Forms.Control.CreateAccessibilityInstance" /> in a derived class, do not call the base class's <see cref="M:System.Windows.Forms.Control.CreateAccessibilityInstance" /> method.</span></span></para></block>
        <altmember cref="T:System.Windows.Forms.Control.ControlAccessibleObject" />
        <altmember cref="T:System.Windows.Forms.AccessibleObject" />
      </Docs>
    </Member>
    <Member MemberName="CreateControl">
      <MemberSignature Language="C#" Value="public void CreateControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CreateControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.CreateControl" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateControl ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateControl();" />
      <MemberSignature Language="F#" Value="member this.CreateControl : unit -&gt; unit" Usage="control.CreateControl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6dc4f-691">ハンドルおよび子コントロールの作成を含めて、強制的に表示子コントロールを作成します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-691">Forces the creation of the visible control, including the creation of the handle and any visible child controls.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-692"><xref:System.Windows.Forms.Control.CreateControl%2A> メソッドは、コントロールとその子コントロールに対してハンドルを強制的に作成します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-692">The <xref:System.Windows.Forms.Control.CreateControl%2A> method forces a handle to be created for the control and its child controls.</span></span> <span data-ttu-id="6dc4f-693">このメソッドは、コントロールまたはその子をすぐに操作するハンドルが必要な場合に使用されます。単にコントロールのコンストラクターを呼び出すと、<xref:System.Windows.Forms.Control.Handle%2A>は作成されません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-693">This method is used when you need a handle immediately for manipulation of the control or its children; simply calling a control's constructor does not create the <xref:System.Windows.Forms.Control.Handle%2A>.</span></span>  
  
 <span data-ttu-id="6dc4f-694">コントロールの <xref:System.Windows.Forms.Control.Visible%2A> プロパティが `false`場合、<xref:System.Windows.Forms.Control.CreateControl%2A> はコントロールハンドルを作成しません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-694"><xref:System.Windows.Forms.Control.CreateControl%2A> does not create a control handle if the control's <xref:System.Windows.Forms.Control.Visible%2A> property is `false`.</span></span> <span data-ttu-id="6dc4f-695"><xref:System.Windows.Forms.Control.CreateHandle%2A> メソッドを呼び出すか、<xref:System.Windows.Forms.Control.Handle%2A> プロパティにアクセスして、コントロールの可視性に関係なくコントロールのハンドルを作成することができますが、この場合、コントロールの子に対してウィンドウハンドルは作成されません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-695">You can either call the <xref:System.Windows.Forms.Control.CreateHandle%2A> method or access the <xref:System.Windows.Forms.Control.Handle%2A> property to create the control's handle regardless of the control's visibility, but in this case, no window handles are created for the control's children.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="CreateControlsInstance">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.Control.ControlCollection CreateControlsInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Forms.Control/ControlCollection CreateControlsInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.CreateControlsInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateControlsInstance () As Control.ControlCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Forms::Control::ControlCollection ^ CreateControlsInstance();" />
      <MemberSignature Language="F#" Value="abstract member CreateControlsInstance : unit -&gt; System.Windows.Forms.Control.ControlCollection&#xA;override this.CreateControlsInstance : unit -&gt; System.Windows.Forms.Control.ControlCollection" Usage="control.CreateControlsInstance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control+ControlCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6dc4f-696">コントロールのコントロール コレクションの新しいインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-696">Creates a new instance of the control collection for the control.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-697">コントロールに割り当てられた <see cref="T:System.Windows.Forms.Control.ControlCollection" /> の新しいインスタンス。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-697">A new instance of <see cref="T:System.Windows.Forms.Control.ControlCollection" /> assigned to the control.</span></span></returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-698">このメソッドの基本クラスバージョンは、派生クラスによって呼び出されてはなりません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-698">The base class version of this method should not be called by a derived class.</span></span></para></block>
        <altmember cref="P:System.Windows.Forms.Control.Controls" />
        <altmember cref="T:System.Windows.Forms.Control.ControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="Created">
      <MemberSignature Language="C#" Value="public bool Created { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Created" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Created" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Created As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Created { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Created : bool" Usage="System.Windows.Forms.Control.Created" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-699">コントロールが作成されているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-699">Gets a value indicating whether the control has been created.</span></span></summary>
        <value><span data-ttu-id="6dc4f-700">コントロールが作成されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-700"><see langword="true" /> if the control has been created; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-701"><xref:System.Windows.Forms.Control.Created%2A> プロパティは、コントロールのハンドルがまだ作成または再作成されていない場合でも、<xref:System.Windows.Forms.Control> が正常に作成された場合に `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-701">The <xref:System.Windows.Forms.Control.Created%2A> property returns `true` if the <xref:System.Windows.Forms.Control> was successfully created even though the control's handle might not have been created or recreated yet.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.OnCreateControl" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
      </Docs>
    </Member>
    <Member MemberName="CreateGraphics">
      <MemberSignature Language="C#" Value="public System.Drawing.Graphics CreateGraphics ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Graphics CreateGraphics() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.CreateGraphics" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateGraphics () As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Graphics ^ CreateGraphics();" />
      <MemberSignature Language="F#" Value="member this.CreateGraphics : unit -&gt; System.Drawing.Graphics" Usage="control.CreateGraphics " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6dc4f-702">コントロールの <see cref="T:System.Drawing.Graphics" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-702">Creates the <see cref="T:System.Drawing.Graphics" /> for the control.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-703">コントロールの <see cref="T:System.Drawing.Graphics" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-703">The <see cref="T:System.Drawing.Graphics" /> for the control.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-704"><xref:System.Windows.Forms.Control.CreateGraphics%2A> メソッドを通じて取得した <xref:System.Drawing.Graphics> オブジェクトは、通常、現在の Windows メッセージが処理された後は保持されません。そのオブジェクトで描画されたものは、次の WM_PAINT メッセージで消去されるためです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-704">The <xref:System.Drawing.Graphics> object that you retrieve through the <xref:System.Windows.Forms.Control.CreateGraphics%2A> method should not normally be retained after the current Windows message has been processed, because anything painted with that object will be erased with the next WM_PAINT message.</span></span> <span data-ttu-id="6dc4f-705">そのため、<xref:System.Drawing.Graphics> オブジェクトをキャッシュして再利用することはできません。ただし、<xref:System.Drawing.Graphics.MeasureString%2A?displayProperty=nameWithType>のような非ビジュアルメソッドを使用する場合は除きます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-705">Therefore you cannot cache the <xref:System.Drawing.Graphics> object for reuse, except to use non-visual methods like <xref:System.Drawing.Graphics.MeasureString%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="6dc4f-706">代わりに、<xref:System.Drawing.Graphics> オブジェクトを使用するたびに <xref:System.Windows.Forms.Control.CreateGraphics%2A> を呼び出し、使用が終了したら <xref:System.Drawing.Graphics.Dispose%2A> を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-706">Instead, you must call <xref:System.Windows.Forms.Control.CreateGraphics%2A> every time that you want to use the <xref:System.Drawing.Graphics> object, and then call <xref:System.Drawing.Graphics.Dispose%2A> when you are finished using it.</span></span> <span data-ttu-id="6dc4f-707">Windows メッセージの詳細については、「<xref:System.Windows.Forms.Control.WndProc%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-707">For more information about Windows messages, see <xref:System.Windows.Forms.Control.WndProc%2A>.</span></span>  
  
 <span data-ttu-id="6dc4f-708">仕様により、<xref:System.Windows.Forms.Control.CreateGraphics%2A> は呼び出し元のスレッドに所有権を設定し、他のスレッドで呼び出された場合は失敗します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-708">By design, <xref:System.Windows.Forms.Control.CreateGraphics%2A> sets ownership to the calling thread, and fails if it is called on other threads.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-709"><xref:System.Windows.Forms.Control.InvokeRequired%2A> プロパティに加えて、スレッドセーフであるコントロールには、<xref:System.Windows.Forms.Control.Invoke%2A>、<xref:System.Windows.Forms.Control.BeginInvoke%2A>、<xref:System.Windows.Forms.Control.EndInvoke%2A>、および <xref:System.Windows.Forms.Control.CreateGraphics%2A> コントロールのハンドルが既に作成されている場合の4つのメソッドがあります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-709">In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe: <xref:System.Windows.Forms.Control.Invoke%2A>, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A>, and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created.</span></span> <span data-ttu-id="6dc4f-710">バックグラウンドスレッドでコントロールのハンドルが作成される前に <xref:System.Windows.Forms.Control.CreateGraphics%2A> を呼び出すと、無効なクロススレッド呼び出しが発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-710">Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control's handle has been created on a background thread can cause illegal cross thread calls.</span></span> <span data-ttu-id="6dc4f-711">その他のすべてのメソッド呼び出しでは、いずれかの invoke メソッドを使用して、コントロールのスレッドへの呼び出しをマーシャリングする必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-711">For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-712">次のコード例では、指定したコントロールのサイズを変更して、コントロールが書式設定されたテキストに対応するようにします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-712">The following code example resizes the specified control so the control will accommodate its formatted text.</span></span> <span data-ttu-id="6dc4f-713">書式設定されたテキストは、コントロールが割り当てられ <xref:System.Windows.Forms.Control.Font%2A> テキストに適用された <xref:System.Windows.Forms.Control.Text%2A> プロパティです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-713">The formatted text is the <xref:System.Windows.Forms.Control.Text%2A> property with the control's assigned <xref:System.Windows.Forms.Control.Font%2A> applied to the text.</span></span> <span data-ttu-id="6dc4f-714">この例の `AutoSizeControl` メソッドには、コントロールのすべての端に適用する埋め込みを表す `textPadding` パラメーターもあります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-714">The `AutoSizeControl` method in this example also has a `textPadding` parameter that represents the padding to apply to all edges of the control.</span></span> <span data-ttu-id="6dc4f-715">埋め込みを同じにするには、コントロールでサポートされている場合は、テキストを <xref:System.Drawing.ContentAlignment?displayProperty=nameWithType> の `MiddleCenter` 値に揃えます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-715">To make the padding appear equal, align the text with the `MiddleCenter` value of <xref:System.Drawing.ContentAlignment?displayProperty=nameWithType> if your control supports it.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Member5#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Member5/CPP/controlmembers5.cpp#1)]
 [!code-csharp[Windows.Forms.Control Member5#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Member5/CS/controlmembers5.cs#1)]
 [!code-vb[Windows.Forms.Control Member5#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Member5/VB/controlmembers5.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Graphics" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="protected virtual void CreateHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void CreateHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.CreateHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub CreateHandle ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void CreateHandle();" />
      <MemberSignature Language="F#" Value="abstract member CreateHandle : unit -&gt; unit&#xA;override this.CreateHandle : unit -&gt; unit" Usage="control.CreateHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6dc4f-716">コントロールのハンドルを作成します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-716">Creates a handle for the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-717">通常、<xref:System.Windows.Forms.Control.CreateHandle%2A> メソッドを直接呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-717">You typically should not call the <xref:System.Windows.Forms.Control.CreateHandle%2A> method directly.</span></span> <span data-ttu-id="6dc4f-718"><xref:System.Windows.Forms.Control.CreateControl%2A> メソッドを呼び出すことをお勧めします。これにより、コントロールの作成時にコントロールとその子コントロールに対してハンドルが強制的に作成されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-718">The preferred method is to call the <xref:System.Windows.Forms.Control.CreateControl%2A> method, which forces a handle to be created for the control and its child controls when the control is created.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="6dc4f-719">オブジェクトは破棄された状態です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-719">The object is in a disposed state.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-720">派生クラスで <see cref="M:System.Windows.Forms.Control.CreateHandle" /> をオーバーライドする場合は、必ず基底クラスの <see cref="M:System.Windows.Forms.Control.CreateHandle" /> メソッドを呼び出して、ハンドルが確実に作成されるようにしてください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-720">When overriding <see cref="M:System.Windows.Forms.Control.CreateHandle" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.CreateHandle" /> method to ensure that the handle is created.</span></span></para></block>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CreateParams" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property CreateParams As CreateParams" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::CreateParams ^ CreateParams { System::Windows::Forms::CreateParams ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CreateParams : System.Windows.Forms.CreateParams" Usage="System.Windows.Forms.Control.CreateParams" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-721">コントロール ハンドルが作成されるときに必要な作成パラメーターを取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-721">Gets the required creation parameters when the control handle is created.</span></span></summary>
        <value><span data-ttu-id="6dc4f-722">コントロールを識別するハンドルを作成するときに必要な作成パラメーターを格納している <see cref="T:System.Windows.Forms.CreateParams" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-722">A <see cref="T:System.Windows.Forms.CreateParams" /> that contains the required creation parameters when the handle to the control is created.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-723"><xref:System.Windows.Forms.Control.CreateParams%2A> プロパティをオーバーライドして、派生したコントロールのプロパティを調整することはできません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-723">The <xref:System.Windows.Forms.Control.CreateParams%2A> property should not be overridden and used to adjust the properties of your derived control.</span></span> <span data-ttu-id="6dc4f-724"><xref:System.Windows.Forms.CreateParams.Caption%2A?displayProperty=nameWithType>、<xref:System.Windows.Forms.CreateParams.Width%2A?displayProperty=nameWithType>、<xref:System.Windows.Forms.CreateParams.Height%2A?displayProperty=nameWithType> などのプロパティは、コントロールの対応するプロパティ (<xref:System.Windows.Forms.Control.Text%2A?displayProperty=nameWithType>、<xref:System.Windows.Forms.Control.Width%2A?displayProperty=nameWithType>、<xref:System.Windows.Forms.Control.Height%2A?displayProperty=nameWithType>など) によって設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-724">Properties such as the <xref:System.Windows.Forms.CreateParams.Caption%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.CreateParams.Width%2A?displayProperty=nameWithType>, and <xref:System.Windows.Forms.CreateParams.Height%2A?displayProperty=nameWithType> should be set by the corresponding properties in your control such as <xref:System.Windows.Forms.Control.Text%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.Control.Width%2A?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.Height%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="6dc4f-725"><xref:System.Windows.Forms.CreateParams> は、標準の Windows コントロールクラスをラップしている場合、または Windows フォーム名前空間で提供されていないスタイルを設定する場合にのみ拡張する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-725">The <xref:System.Windows.Forms.CreateParams> should only be extended when you are wrapping a standard Windows control class or to set styles not provided by the Windows Forms namespace.</span></span> <span data-ttu-id="6dc4f-726">コントロールパラメーターの作成の詳細については、`CreateWindow` と `CreateWindowEx` の関数と[CREATESTRUCT](/windows/win32/api/winuser/ns-winuser-createstructa) structure のドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-726">For more information about creating control parameters, see the `CreateWindow` and `CreateWindowEx` functions and the [CREATESTRUCT](/windows/win32/api/winuser/ns-winuser-createstructa) structure documentation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-727">次のコード例では、<xref:System.Windows.Forms.Button> 派生クラスの <xref:System.Windows.Forms.Control.CreateParams%2A> プロパティを拡張します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-727">The following code example extends the <xref:System.Windows.Forms.Control.CreateParams%2A> property of a <xref:System.Windows.Forms.Button> derived class.</span></span> <span data-ttu-id="6dc4f-728"><xref:System.Windows.Forms.CreateParams.Style%2A?displayProperty=nameWithType> プロパティが変更されると、ボタンに <xref:System.Drawing.Image>ではなく <xref:System.Drawing.Icon> が表示されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-728">The <xref:System.Windows.Forms.CreateParams.Style%2A?displayProperty=nameWithType> property is changed, which causes the button to display an <xref:System.Drawing.Icon> rather than an <xref:System.Drawing.Image>.</span></span> <span data-ttu-id="6dc4f-729">この例では、<xref:System.Windows.Forms.Button> クラスを継承するクラスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-729">This example requires that you have a class that inherits from the <xref:System.Windows.Forms.Button> class.</span></span>  
  
 [!code-cpp[CreateParams#3](~/samples/snippets/cpp/VS_Snippets_Winforms/CreateParams/CPP/createparams.cpp#3)]
 [!code-csharp[CreateParams#3](~/samples/snippets/csharp/VS_Snippets_Winforms/CreateParams/CS/createparams.cs#3)]
 [!code-vb[CreateParams#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/CreateParams/VB/createparams.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-730">派生クラスの <see cref="P:System.Windows.Forms.Control.CreateParams" /> プロパティをオーバーライドする場合は、基本クラスの <see cref="P:System.Windows.Forms.Control.CreateParams" /> プロパティを使用して、基本実装を拡張します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-730">When overriding the <see cref="P:System.Windows.Forms.Control.CreateParams" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.CreateParams" /> property to extend the base implementation.</span></span> <span data-ttu-id="6dc4f-731">それ以外の場合は、すべての実装を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-731">Otherwise, you must provide all the implementation.</span></span></para></block>
        <altmember cref="T:System.Windows.Forms.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="Cursor">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.Cursor Cursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Cursor Cursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Cursor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Cursor As Cursor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::Cursor ^ Cursor { System::Windows::Forms::Cursor ^ get(); void set(System::Windows::Forms::Cursor ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Cursor : System.Windows.Forms.Cursor with get, set" Usage="System.Windows.Forms.Control.Cursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-732">マウス ポインターがコントロールの上にあるときに表示されるカーソルを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-732">Gets or sets the cursor that is displayed when the mouse pointer is over the control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-733">マウス ポインターがコントロールの上にあるときに表示されるカーソルを表す <see cref="T:System.Windows.Forms.Cursor" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-733">A <see cref="T:System.Windows.Forms.Cursor" /> that represents the cursor to display when the mouse pointer is over the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-734">コントロールの <xref:System.Windows.Forms.Control.Cursor%2A> プロパティに <xref:System.Windows.Forms.Cursor> を割り当てて、マウスポインターがコントロールの上にあるときに表示されるカーソルを変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-734">Assign a <xref:System.Windows.Forms.Cursor> to the <xref:System.Windows.Forms.Control.Cursor%2A> property of the control to change the cursor displayed when the mouse pointer is over the control.</span></span> <span data-ttu-id="6dc4f-735">アプリケーションのすべてのコントロールに対してマウスカーソルを一時的に変更するには、<xref:System.Windows.Forms.Cursor.Current%2A?displayProperty=nameWithType> プロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-735">To temporarily change the mouse cursor for all controls on your application set the <xref:System.Windows.Forms.Cursor.Current%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="6dc4f-736">通常は、<xref:System.Windows.Forms.ComboBox> を設定するとき、またはファイルを保存または読み込むときに、<xref:System.Windows.Forms.Cursor.Current%2A?displayProperty=nameWithType> プロパティを待機カーソルに設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-736">Typically you would set the <xref:System.Windows.Forms.Cursor.Current%2A?displayProperty=nameWithType> property to a wait cursor when populating a <xref:System.Windows.Forms.ComboBox> or saving or loading a file.</span></span>  
  
 <span data-ttu-id="6dc4f-737"><xref:System.Windows.Forms.Control.Cursor%2A> プロパティはアンビエントプロパティです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-737">The <xref:System.Windows.Forms.Control.Cursor%2A> property is an ambient property.</span></span> <span data-ttu-id="6dc4f-738">アンビエントプロパティは、設定されていない場合、親コントロールから取得されるコントロールプロパティです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-738">An ambient property is a control property that, if not set, is retrieved from the parent control.</span></span> <span data-ttu-id="6dc4f-739">たとえば、<xref:System.Windows.Forms.Button> は、既定では親 <xref:System.Windows.Forms.Form> と同じ <xref:System.Windows.Forms.Control.BackColor%2A> を持ちます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-739">For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default.</span></span> <span data-ttu-id="6dc4f-740">アンビエントプロパティの詳細については、「<xref:System.Windows.Forms.AmbientProperties> クラス」または「<xref:System.Windows.Forms.Control> クラスの概要」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-740">For more information about ambient properties, see the <xref:System.Windows.Forms.AmbientProperties> class or the <xref:System.Windows.Forms.Control> class overview.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-741">次のコード例では、ユーザーの使用可能な論理ドライブを使用して <xref:System.Windows.Forms.ComboBox> を設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-741">The following code example fills a <xref:System.Windows.Forms.ComboBox> with the user's available logical drives.</span></span> <span data-ttu-id="6dc4f-742">また、この例では、コンボボックスの <xref:System.Windows.Forms.Cursor> プロパティを設定して、マウスポインターがドロップダウンボタンの上にあるときに <xref:System.Windows.Forms.Cursors.Hand%2A?displayProperty=nameWithType> カーソルが表示されるようにします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-742">The example also sets the combo box's <xref:System.Windows.Forms.Cursor> property so the <xref:System.Windows.Forms.Cursors.Hand%2A?displayProperty=nameWithType> cursor is displayed when the mouse pointer is over the drop-down button.</span></span> <span data-ttu-id="6dc4f-743">このコードでは、<xref:System.Windows.Forms.ComboBox> を持つ <xref:System.Windows.Forms.Form> が必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-743">This code requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.ComboBox> on it.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CPP/misccontrolproperties.cpp#1)]
 [!code-csharp[Windows.Forms.Control Properties2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CS/misccontrolproperties.cs#1)]
 [!code-vb[Windows.Forms.Control Properties2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties2/VB/misccontrolproperties.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-744">派生クラスの <see cref="P:System.Windows.Forms.Control.Cursor" /> プロパティをオーバーライドする場合は、基本クラスの <see cref="P:System.Windows.Forms.Control.Cursor" /> プロパティを使用して、基本実装を拡張します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-744">When overriding the <see cref="P:System.Windows.Forms.Control.Cursor" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.Cursor" /> property to extend the base implementation.</span></span> <span data-ttu-id="6dc4f-745">それ以外の場合は、すべての実装を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-745">Otherwise, you must provide all the implementation.</span></span> <span data-ttu-id="6dc4f-746"><see cref="P:System.Windows.Forms.Control.Cursor" /> プロパティの <see langword="get" /> と <see langword="set" /> の両方のメソッドをオーバーライドする必要はありません。必要に応じて、オーバーライドできるのは1つだけです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-746">You are not required to override both the <see langword="get" /> and <see langword="set" /> methods of the <see cref="P:System.Windows.Forms.Control.Cursor" /> property; you can override only one if needed.</span></span></para></block>
        <altmember cref="T:System.Windows.Forms.Cursor" />
        <altmember cref="T:System.Windows.Forms.Cursors" />
      </Docs>
    </Member>
    <Member MemberName="CursorChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CursorChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CursorChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.CursorChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CursorChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ CursorChanged;" />
      <MemberSignature Language="F#" Value="member this.CursorChanged : EventHandler " Usage="member this.CursorChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-747"><see cref="P:System.Windows.Forms.Control.Cursor" /> プロパティの値が変化したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-747">Occurs when the value of the <see cref="P:System.Windows.Forms.Control.Cursor" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-748">このイベントは、プログラムによる変更またはユーザーの操作によって <xref:System.Windows.Forms.Control.Cursor%2A> プロパティが変更された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-748">This event is raised if the <xref:System.Windows.Forms.Control.Cursor%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="6dc4f-749">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-749">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-750">次のコード例は、<xref:System.Windows.Forms.Control.Cursor%2A?displayProperty=nameWithType> プロパティ、<xref:System.Windows.Forms.Cursor> クラス、および <xref:System.Windows.Forms.Cursors> クラスを使用してマウスカーソルを変更する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-750">The following code example demonstrates changing the mouse cursor using the <xref:System.Windows.Forms.Control.Cursor%2A?displayProperty=nameWithType> property, the <xref:System.Windows.Forms.Cursor> class, and the <xref:System.Windows.Forms.Cursors> class.</span></span> <span data-ttu-id="6dc4f-751">この例では、<xref:System.Windows.Forms.ComboBox> コントロール、<xref:System.Windows.Forms.Panel> コントロール、および <xref:System.Windows.Forms.ListView> コントロールを含むフォームを作成します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-751">The example creates a form that contains a <xref:System.Windows.Forms.ComboBox> control, a <xref:System.Windows.Forms.Panel> control, and a <xref:System.Windows.Forms.ListView> control.</span></span> <span data-ttu-id="6dc4f-752"><xref:System.Windows.Forms.ComboBox> には、<xref:System.Windows.Forms.Cursors> クラスによって提供されるすべてのカーソルが含まれています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-752">The <xref:System.Windows.Forms.ComboBox> contains all cursors provided by the <xref:System.Windows.Forms.Cursors> class.</span></span> <span data-ttu-id="6dc4f-753">ユーザーが <xref:System.Windows.Forms.ComboBox>でマウスカーソルを選択すると、選択したカーソルに <xref:System.Windows.Forms.Control.Cursor%2A?displayProperty=nameWithType> プロパティが設定され、<xref:System.Windows.Forms.Panel>のカーソルが更新されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-753">When the user selects a mouse cursor in the <xref:System.Windows.Forms.ComboBox>, the <xref:System.Windows.Forms.Control.Cursor%2A?displayProperty=nameWithType> property is set to the selected cursor, which updates the cursor for the <xref:System.Windows.Forms.Panel>.</span></span> <span data-ttu-id="6dc4f-754"><xref:System.Windows.Forms.ListView> は、<xref:System.Windows.Forms.Control.CursorChanged?displayProperty=nameWithType> イベントが発生するたびに更新されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-754">The <xref:System.Windows.Forms.ListView> is updated every time the <xref:System.Windows.Forms.Control.CursorChanged?displayProperty=nameWithType> event occurs.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Cursors#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Cursors/CPP/cursorexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.Cursors#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Cursors/CS/cursorexample.cs#1)]
 [!code-vb[System.Windows.Forms.Cursors#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Cursors/VB/cursorexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Cursor" />
        <altmember cref="T:System.Windows.Forms.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="DataBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ControlBindingsCollection DataBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ControlBindingsCollection DataBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DataBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DataBindings As ControlBindingsCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ControlBindingsCollection ^ DataBindings { System::Windows::Forms::ControlBindingsCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DataBindings : System.Windows.Forms.ControlBindingsCollection" Usage="System.Windows.Forms.Control.DataBindings" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IBindableComponent.DataBindings</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.ParenthesizePropertyName(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlBindingsCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-755">コントロールのデータ連結を取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-755">Gets the data bindings for the control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-756">コントロールの <see cref="T:System.Windows.Forms.ControlBindingsCollection" /> オブジェクトを格納している <see cref="T:System.Windows.Forms.Binding" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-756">A <see cref="T:System.Windows.Forms.ControlBindingsCollection" /> that contains the <see cref="T:System.Windows.Forms.Binding" /> objects for the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-757"><xref:System.Windows.Forms.ControlBindingsCollection>にアクセスするには、<xref:System.Windows.Forms.Control.DataBindings%2A> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-757">Use the <xref:System.Windows.Forms.Control.DataBindings%2A> property to access the <xref:System.Windows.Forms.ControlBindingsCollection>.</span></span> <span data-ttu-id="6dc4f-758"><xref:System.Windows.Forms.Binding> オブジェクトをコレクションに追加することによって、コントロールの任意のプロパティをオブジェクトのプロパティにバインドできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-758">By adding <xref:System.Windows.Forms.Binding> objects to the collection, you can bind any property of a control to the property of an object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-759">次のコード例では <xref:System.Windows.Forms.Binding> オブジェクトを5つのコントロールの <xref:System.Windows.Forms.ControlBindingsCollection> に追加します。4つの <xref:System.Windows.Forms.TextBox> コントロールと <xref:System.Windows.Forms.DateTimePicker> コントロールです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-759">The following code example adds <xref:System.Windows.Forms.Binding> objects to the <xref:System.Windows.Forms.ControlBindingsCollection> of five controls: four <xref:System.Windows.Forms.TextBox> controls and a <xref:System.Windows.Forms.DateTimePicker> control.</span></span> <span data-ttu-id="6dc4f-760"><xref:System.Windows.Forms.ControlBindingsCollection> には、<xref:System.Windows.Forms.Control.DataBindings%2A> クラスの <xref:System.Windows.Forms.Control> プロパティを使用してアクセスします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-760">The <xref:System.Windows.Forms.ControlBindingsCollection> is accessed through the <xref:System.Windows.Forms.Control.DataBindings%2A> property of the <xref:System.Windows.Forms.Control> class.</span></span>  
  
 [!code-cpp[Classic Control.DataBindings Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Control.DataBindings Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Control.DataBindings Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Control.DataBindings Example/CS/source.cs#1)]
 [!code-vb[Classic Control.DataBindings Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Control.DataBindings Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.BindingContext" />
        <altmember cref="T:System.Windows.Forms.Binding" />
        <altmember cref="T:System.Windows.Forms.BindingManagerBase" />
      </Docs>
    </Member>
    <Member MemberName="DefaultBackColor">
      <MemberSignature Language="C#" Value="public static System.Drawing.Color DefaultBackColor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Drawing.Color DefaultBackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultBackColor" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultBackColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Color DefaultBackColor { System::Drawing::Color get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultBackColor : System.Drawing.Color" Usage="System.Windows.Forms.Control.DefaultBackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-761">コントロールの既定の背景色を取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-761">Gets the default background color of the control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-762">コントロールの既定の背景の <see cref="T:System.Drawing.Color" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-762">The default background <see cref="T:System.Drawing.Color" /> of the control.</span></span> <span data-ttu-id="6dc4f-763">既定では、 <see cref="P:System.Drawing.SystemColors.Control" />です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-763">The default is <see cref="P:System.Drawing.SystemColors.Control" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-764">これは、汎用トップレベルコントロールの既定の <xref:System.Windows.Forms.Control.BackColor%2A> プロパティ値です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-764">This is the default <xref:System.Windows.Forms.Control.BackColor%2A> property value of a generic top-level control.</span></span> <span data-ttu-id="6dc4f-765">派生クラスは、異なる既定値を持つことができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-765">Derived classes can have different defaults.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-766">次のコード例は、<xref:System.Windows.Forms.Control.DefaultBackColor%2A>、<xref:System.Windows.Forms.Control.DefaultFont%2A>、および <xref:System.Windows.Forms.Control.DefaultForeColor%2A> メンバーを使用する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-766">The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.DefaultBackColor%2A>, <xref:System.Windows.Forms.Control.DefaultFont%2A>, and <xref:System.Windows.Forms.Control.DefaultForeColor%2A> members.</span></span> <span data-ttu-id="6dc4f-767">この例を実行するには、ListBox1 という <xref:System.Windows.Forms.ListBox> を含むフォームに次のコードを貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-767">To run the example, paste the following code in a form containing a <xref:System.Windows.Forms.ListBox> called ListBox1.</span></span> <span data-ttu-id="6dc4f-768">フォームのコンストラクターまたは <xref:System.Windows.Forms.Form.Load> イベント処理メソッドで `Populate_ListBox` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-768">Call the `Populate_ListBox` method in the form's constructor or <xref:System.Windows.Forms.Form.Load> event-handling method.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ControlDefaultProperties#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ControlDefaultProperties#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ControlDefaultProperties#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.BackColor" />
        <altmember cref="T:System.Drawing.Color" />
        <altmember cref="T:System.Drawing.SystemColors" />
      </Docs>
    </Member>
    <Member MemberName="DefaultCursor">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.Cursor DefaultCursor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Cursor DefaultCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultCursor" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property DefaultCursor As Cursor" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::Cursor ^ DefaultCursor { System::Windows::Forms::Cursor ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultCursor : System.Windows.Forms.Cursor" Usage="System.Windows.Forms.Control.DefaultCursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-769">コントロールの既定のカーソルを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-769">Gets or sets the default cursor for the control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-770">現在の既定のカーソルを表す <see cref="T:System.Windows.Forms.Cursor" /> 型のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-770">An object of type <see cref="T:System.Windows.Forms.Cursor" /> representing the current default cursor.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-771"><xref:System.Windows.Forms.Control.DefaultCursor%2A> をオーバーライドして、コントロールの既定のカーソルを構成します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-771">Override <xref:System.Windows.Forms.Control.DefaultCursor%2A> to configure a default cursor for your control.</span></span> <span data-ttu-id="6dc4f-772">これは、コントロールのコンストラクターでカーソルを設定するよりも効率的で、特定のカーソル関連のデザイナー関数に対する自動サポートが提供されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-772">This is more efficient than setting the cursor in the control's constructor, and gives automatic support for certain cursor-related designer functions.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultFont">
      <MemberSignature Language="C#" Value="public static System.Drawing.Font DefaultFont { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Font DefaultFont" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultFont" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultFont As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Font ^ DefaultFont { System::Drawing::Font ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultFont : System.Drawing.Font" Usage="System.Windows.Forms.Control.DefaultFont" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-773">コントロールの既定のフォントを取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-773">Gets the default font of the control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-774">コントロールの既定の <see cref="T:System.Drawing.Font" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-774">The default <see cref="T:System.Drawing.Font" /> of the control.</span></span> <span data-ttu-id="6dc4f-775">返される値は、ユーザーのオペレーティング システム、およびシステムのローカル カルチャの設定によって異なります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-775">The value returned will vary depending on the user's operating system the local culture setting of their system.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-776">次の表では、オペレーティングシステムとローカルカルチャに応じて <xref:System.Windows.Forms.Control.DefaultFont%2A> によって返される値について説明します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-776">The following table describes the value returned by <xref:System.Windows.Forms.Control.DefaultFont%2A> depending on the operating system and local culture.</span></span>  
  
|<span data-ttu-id="6dc4f-777">システム/またはカルチャ</span><span class="sxs-lookup"><span data-stu-id="6dc4f-777">System/and or Culture</span></span>|<span data-ttu-id="6dc4f-778">フォント</span><span class="sxs-lookup"><span data-stu-id="6dc4f-778">Font</span></span>|  
|----------------------------|----------|  
|<span data-ttu-id="6dc4f-779">Windows NT 4x、日本語版</span><span class="sxs-lookup"><span data-stu-id="6dc4f-779">Windows NT 4x, Japanese version</span></span>|<span data-ttu-id="6dc4f-780">MS UI ゴシック、9ポイント。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-780">MS UI Gothic, 9 point.</span></span>|  
|<span data-ttu-id="6dc4f-781">アラビア語ウィンドウ</span><span class="sxs-lookup"><span data-stu-id="6dc4f-781">Arabic Windows</span></span>|<span data-ttu-id="6dc4f-782">Tahoma、8ポイント。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-782">Tahoma, 8 point.</span></span>|  
|<span data-ttu-id="6dc4f-783">その他のオペレーティングシステム/カルチャ</span><span class="sxs-lookup"><span data-stu-id="6dc4f-783">Other operating system/culture</span></span>|<span data-ttu-id="6dc4f-784">MS Shell Dlg 論理フォント。通常は Microsoft sans Serif 8 ポイントです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-784">MS Shell Dlg logical font, typically Microsoft San Serif 8 point.</span></span>|  
  
 <span data-ttu-id="6dc4f-785">MS Shell Dlg は、システムレジストリのフォントセットにマップされます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-785">MS Shell Dlg maps to a font set in the system registry.</span></span>  
  
 <span data-ttu-id="6dc4f-786">以前のフォントがインストールされていない場合、既定のフォントは Tahoma、8ポイントです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-786">If the previous fonts are not installed, the default font is Tahoma, 8 point.</span></span> <span data-ttu-id="6dc4f-787">Tahoma、8ポイントがインストールされていない場合、<xref:System.Windows.Forms.Control.DefaultFont%2A> は <xref:System.Drawing.FontFamily.GenericSansSerif%2A> プロパティの値を返します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-787">If Tahoma, 8 point, is not installed, <xref:System.Windows.Forms.Control.DefaultFont%2A> returns the value of the <xref:System.Drawing.FontFamily.GenericSansSerif%2A> property</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-788">次のコード例は、<xref:System.Windows.Forms.Control.DefaultBackColor%2A>、<xref:System.Windows.Forms.Control.DefaultFont%2A>、および <xref:System.Windows.Forms.Control.DefaultForeColor%2A> メンバーを使用する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-788">The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.DefaultBackColor%2A>, <xref:System.Windows.Forms.Control.DefaultFont%2A>, and <xref:System.Windows.Forms.Control.DefaultForeColor%2A> members.</span></span> <span data-ttu-id="6dc4f-789">この例を実行するには、ListBox1 という <xref:System.Windows.Forms.ListBox> を含むフォームに次のコードを貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-789">To run the example, paste the following code in a form containing a <xref:System.Windows.Forms.ListBox> called ListBox1.</span></span> <span data-ttu-id="6dc4f-790">フォームのコンストラクターまたは <xref:System.Windows.Forms.Form.Load> イベント処理メソッドで `Populate_ListBox` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-790">Call the `Populate_ListBox` method in the form's constructor or <xref:System.Windows.Forms.Form.Load> event-handling method.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ControlDefaultProperties#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ControlDefaultProperties#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ControlDefaultProperties#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6dc4f-791">既定のフォントまたは地域設定の代替フォントが、クライアント コンピューターにインストールされていません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-791">The default font or the regional alternative fonts are not installed on the client computer.</span></span></exception>
        <altmember cref="P:System.Windows.Forms.Control.Font" />
        <altmember cref="T:System.Drawing.Font" />
      </Docs>
    </Member>
    <Member MemberName="DefaultForeColor">
      <MemberSignature Language="C#" Value="public static System.Drawing.Color DefaultForeColor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Drawing.Color DefaultForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Color DefaultForeColor { System::Drawing::Color get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultForeColor : System.Drawing.Color" Usage="System.Windows.Forms.Control.DefaultForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-792">コントロールの既定の前景色を取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-792">Gets the default foreground color of the control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-793">コントロールの既定の前景の <see cref="T:System.Drawing.Color" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-793">The default foreground <see cref="T:System.Drawing.Color" /> of the control.</span></span> <span data-ttu-id="6dc4f-794">既定では、 <see cref="P:System.Drawing.SystemColors.ControlText" />です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-794">The default is <see cref="P:System.Drawing.SystemColors.ControlText" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-795">これは、親以外のコントロールの既定の <xref:System.Windows.Forms.Control.ForeColor%2A> プロパティ値です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-795">This is the default <xref:System.Windows.Forms.Control.ForeColor%2A> property value of a nonparented control.</span></span> <span data-ttu-id="6dc4f-796">派生クラスは、異なる既定値を持つことができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-796">Derived classes can have different defaults.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-797">次のコード例は、<xref:System.Windows.Forms.Control.DefaultBackColor%2A>、<xref:System.Windows.Forms.Control.DefaultFont%2A>、および <xref:System.Windows.Forms.Control.DefaultForeColor%2A> メンバーを使用する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-797">The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.DefaultBackColor%2A>, <xref:System.Windows.Forms.Control.DefaultFont%2A>, and <xref:System.Windows.Forms.Control.DefaultForeColor%2A> members.</span></span> <span data-ttu-id="6dc4f-798">この例を実行するには、ListBox1 という <xref:System.Windows.Forms.ListBox> を含むフォームに次のコードを貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-798">To run the example, paste the following code in a form containing a <xref:System.Windows.Forms.ListBox> called ListBox1.</span></span> <span data-ttu-id="6dc4f-799">フォームのコンストラクターまたは <xref:System.Windows.Forms.Form.Load> イベント処理メソッドで `Populate_ListBox` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-799">Call the `Populate_ListBox` method in the form's constructor or <xref:System.Windows.Forms.Form.Load> event-handling method.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ControlDefaultProperties#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ControlDefaultProperties#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ControlDefaultProperties#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.ForeColor" />
        <altmember cref="T:System.Drawing.Color" />
        <altmember cref="T:System.Drawing.SystemColors" />
      </Docs>
    </Member>
    <Member MemberName="DefaultImeMode">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.ImeMode DefaultImeMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImeMode DefaultImeMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultImeMode" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property DefaultImeMode As ImeMode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::ImeMode DefaultImeMode { System::Windows::Forms::ImeMode get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultImeMode : System.Windows.Forms.ImeMode" Usage="System.Windows.Forms.Control.DefaultImeMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-800">コントロールがサポートしている既定の IME (Input Method Editor) モードを取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-800">Gets the default Input Method Editor (IME) mode supported by the control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-801"><see cref="T:System.Windows.Forms.ImeMode" /> 値のいずれか 1 つです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-801">One of the <see cref="T:System.Windows.Forms.ImeMode" /> values.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-802">IME (Input Method Editor) は、標準キーボードを使用して、ユーザーが日本語の漢字などの複雑な文字や記号を入力できるようにするプログラムです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-802">An Input Method Editor (IME) is a program that enables users to enter complex characters and symbols, such as Japanese Kanji characters, by using a standard keyboard.</span></span>  
  
 <span data-ttu-id="6dc4f-803"><xref:System.Windows.Forms.Control> クラスに実装されている場合、このプロパティは常に <xref:System.Windows.Forms.ImeMode.Inherit?displayProperty=nameWithType> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-803">As implemented in the <xref:System.Windows.Forms.Control> class, this property always returns the <xref:System.Windows.Forms.ImeMode.Inherit?displayProperty=nameWithType> value.</span></span> <span data-ttu-id="6dc4f-804"><xref:System.Windows.Forms.ImeMode.Inherit> 値は、IME モードが親コントロールから継承されることを指定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-804">The <xref:System.Windows.Forms.ImeMode.Inherit> value specifies that the IME mode is inherited from the parent control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-805">次のコード例では、<xref:System.Windows.Forms.Control.DefaultImeMode%2A> プロパティをオーバーライドして、入力方式エディターをオフにします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-805">The following code example overrides the <xref:System.Windows.Forms.Control.DefaultImeMode%2A> property to turn off the Input Method Editor.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties2#4](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CPP/misccontrolproperties.cpp#4)]
 [!code-csharp[Windows.Forms.Control Properties2#4](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CS/misccontrolproperties.cs#4)]
 [!code-vb[Windows.Forms.Control Properties2#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties2/VB/misccontrolproperties.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-806">派生クラスの <see cref="P:System.Windows.Forms.Control.DefaultImeMode" /> プロパティをオーバーライドする場合は、基本クラスの <see cref="P:System.Windows.Forms.Control.DefaultImeMode" /> プロパティを使用して、基本実装を拡張します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-806">When overriding the <see cref="P:System.Windows.Forms.Control.DefaultImeMode" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.DefaultImeMode" /> property to extend the base implementation.</span></span> <span data-ttu-id="6dc4f-807">それ以外の場合は、すべての実装を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-807">Otherwise, you must provide all the implementation.</span></span></para></block>
        <altmember cref="T:System.Windows.Forms.ImeMode" />
        <altmember cref="P:System.Windows.Forms.Control.ImeMode" />
      </Docs>
    </Member>
    <Member MemberName="DefaultMargin">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.Padding DefaultMargin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding DefaultMargin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultMargin" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property DefaultMargin As Padding" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::Padding DefaultMargin { System::Windows::Forms::Padding get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultMargin : System.Windows.Forms.Padding" Usage="System.Windows.Forms.Control.DefaultMargin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-808">コントロール間に既定で指定されている空白をピクセル単位で取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-808">Gets the space, in pixels, that is specified by default between controls.</span></span></summary>
        <value><span data-ttu-id="6dc4f-809">コントロール間の既定の空白を表す <see cref="T:System.Windows.Forms.Padding" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-809">A <see cref="T:System.Windows.Forms.Padding" /> that represents the default space between controls.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultMaximumSize">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Size DefaultMaximumSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultMaximumSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultMaximumSize" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property DefaultMaximumSize As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Drawing::Size DefaultMaximumSize { System::Drawing::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultMaximumSize : System.Drawing.Size" Usage="System.Windows.Forms.Control.DefaultMaximumSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-810">コントロールの既定の最大サイズとして指定されている長さおよび高さをピクセル単位で取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-810">Gets the length and height, in pixels, that is specified as the default maximum size of a control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-811">コントロールのサイズを表す <see cref="M:System.Drawing.Point.#ctor(System.Drawing.Size)" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-811">A <see cref="M:System.Drawing.Point.#ctor(System.Drawing.Size)" /> representing the size of the control.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultMinimumSize">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Size DefaultMinimumSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultMinimumSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultMinimumSize" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property DefaultMinimumSize As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Drawing::Size DefaultMinimumSize { System::Drawing::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultMinimumSize : System.Drawing.Size" Usage="System.Windows.Forms.Control.DefaultMinimumSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-812">コントロールの既定の最小サイズとして指定されている長さおよび高さをピクセル単位で取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-812">Gets the length and height, in pixels, that is specified as the default minimum size of a control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-813">コントロールのサイズを表す <see cref="T:System.Drawing.Size" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-813">A <see cref="T:System.Drawing.Size" /> representing the size of the control.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultPadding">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.Padding DefaultPadding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding DefaultPadding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultPadding" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property DefaultPadding As Padding" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::Padding DefaultPadding { System::Windows::Forms::Padding get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultPadding : System.Windows.Forms.Padding" Usage="System.Windows.Forms.Control.DefaultPadding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-814">コントロールのコンテンツ内のスペースをピクセル単位で取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-814">Gets the internal spacing, in pixels, of the contents of a control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-815">コントロールの内容の内部間隔を表す <see cref="T:System.Windows.Forms.Padding" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-815">A <see cref="T:System.Windows.Forms.Padding" /> that represents the internal spacing of the contents of a control.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultSize">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Size DefaultSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultSize" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property DefaultSize As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Drawing::Size DefaultSize { System::Drawing::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultSize : System.Drawing.Size" Usage="System.Windows.Forms.Control.DefaultSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-816">コントロールの既定のサイズを取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-816">Gets the default size of the control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-817">コントロールの既定の <see cref="T:System.Drawing.Size" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-817">The default <see cref="T:System.Drawing.Size" /> of the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-818"><xref:System.Windows.Forms.Control.DefaultSize%2A> プロパティは、コントロールが最初に作成されたときの <xref:System.Drawing.Size> を表します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-818">The <xref:System.Windows.Forms.Control.DefaultSize%2A> property represents the <xref:System.Drawing.Size> of the control when it is initially created.</span></span> <span data-ttu-id="6dc4f-819">コントロールのサイズを調整するには、その <xref:System.Windows.Forms.Control.Size%2A> プロパティ値を設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-819">You can adjust the size of the control by setting its <xref:System.Windows.Forms.Control.Size%2A> property value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-820">パフォーマンスを向上させるには、コントロールの <xref:System.Drawing.Size> をコンストラクターに設定しないでください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-820">To maintain better performance, do not set the <xref:System.Drawing.Size> of a control in its constructor.</span></span> <span data-ttu-id="6dc4f-821"><xref:System.Windows.Forms.Control.DefaultSize%2A> プロパティをオーバーライドする方法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-821">The preferred method is to override the <xref:System.Windows.Forms.Control.DefaultSize%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-822">Windows Server 2003 システムでは、<xref:System.Windows.Forms.Form> のサイズは、モニターの最大ピクセル幅と高さによって制限されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-822">On Windows Server 2003 systems, the size of a <xref:System.Windows.Forms.Form> is restricted by the maximum pixel width and height of the monitor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-823">次のコード例では、<xref:System.Windows.Forms.Control.DefaultSize%2A> プロパティをオーバーライドし、フォームの既定のサイズを500ピクセルの四角形にします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-823">The following code example overrides the <xref:System.Windows.Forms.Control.DefaultSize%2A> property, and makes the default size of the form 500 pixels square.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties2#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CPP/misccontrolproperties.cpp#3)]
 [!code-csharp[Windows.Forms.Control Properties2#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CS/misccontrolproperties.cs#3)]
 [!code-vb[Windows.Forms.Control Properties2#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties2/VB/misccontrolproperties.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-824">派生クラスの <see cref="P:System.Windows.Forms.Control.DefaultSize" /> プロパティをオーバーライドする場合は、すべての実装をオーバーライドするのではなく、目的のディメンションを持つ <see cref="T:System.Drawing.Size" /> を返すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-824">When overriding the <see cref="P:System.Windows.Forms.Control.DefaultSize" /> property in a derived class, it is preferable to return a <see cref="T:System.Drawing.Size" /> with the desired dimensions rather than to override all the implementation.</span></span></para></block>
        <altmember cref="P:System.Windows.Forms.Control.Size" />
        <altmember cref="T:System.Drawing.Size" />
      </Docs>
    </Member>
    <Member MemberName="DefWndProc">
      <MemberSignature Language="C#" Value="protected virtual void DefWndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DefWndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.DefWndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub DefWndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void DefWndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member DefWndProc : Message -&gt; unit&#xA;override this.DefWndProc : Message -&gt; unit" Usage="control.DefWndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="6dc4f-825">処理する Windows <see cref="T:System.Windows.Forms.Message" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-825">The Windows <see cref="T:System.Windows.Forms.Message" /> to process.</span></span></param>
        <summary><span data-ttu-id="6dc4f-826">指定したメッセージを既定のウィンドウ プロシージャに送信します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-826">Sends the specified message to the default window procedure.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-827">Windows メッセージの処理の詳細については、「 [WindowProc 関数](https://go.microsoft.com/fwlink/?LinkId=181565)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-827">For more information about processing Windows messages, see the [WindowProc function](https://go.microsoft.com/fwlink/?LinkId=181565).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="DestroyHandle">
      <MemberSignature Language="C#" Value="protected virtual void DestroyHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DestroyHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.DestroyHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub DestroyHandle ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void DestroyHandle();" />
      <MemberSignature Language="F#" Value="abstract member DestroyHandle : unit -&gt; unit&#xA;override this.DestroyHandle : unit -&gt; unit" Usage="control.DestroyHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6dc4f-828">コントロールに関連付けられたハンドルを破棄します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-828">Destroys the handle associated with the control.</span></span></summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-829">派生クラスで <see cref="M:System.Windows.Forms.Control.DestroyHandle" /> をオーバーライドする場合は、必ず基底クラスの <see cref="M:System.Windows.Forms.Control.DestroyHandle" /> メソッドを呼び出して、ハンドルが破棄されるようにしてください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-829">When overriding <see cref="M:System.Windows.Forms.Control.DestroyHandle" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.DestroyHandle" /> method to ensure that the handle is destroyed.</span></span></para></block>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="DeviceDpi">
      <MemberSignature Language="C#" Value="public int DeviceDpi { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DeviceDpi" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DeviceDpi" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeviceDpi As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DeviceDpi { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DeviceDpi : int" Usage="System.Windows.Forms.Control.DeviceDpi" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-830">コントロールが現在表示されているディスプレイ デバイスの DPI 値を取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-830">Gets the DPI value for the display device where the control is currently being displayed.</span></span></summary>
        <value><span data-ttu-id="6dc4f-831">ディスプレイ デバイスの DPI 値。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-831">The DPI value of the display device.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayRectangle">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Rectangle DisplayRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle DisplayRectangle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DisplayRectangle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DisplayRectangle As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Rectangle DisplayRectangle { System::Drawing::Rectangle get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayRectangle : System.Drawing.Rectangle" Usage="System.Windows.Forms.Control.DisplayRectangle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-832">コントロールの表示領域を表す四角形を取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-832">Gets the rectangle that represents the display area of the control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-833">コントロールの表示領域を表す <see cref="T:System.Drawing.Rectangle" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-833">A <see cref="T:System.Drawing.Rectangle" /> that represents the display area of the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-834"><xref:System.Windows.Forms.Control.DisplayRectangle%2A> プロパティは、コントロールの表示領域のクライアントの四角形を返します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-834">The <xref:System.Windows.Forms.Control.DisplayRectangle%2A> property returns the client rectangle of the display area of the control.</span></span> <span data-ttu-id="6dc4f-835">基本コントロールクラスの場合、これはクライアントの四角形に相当します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-835">For the base control class, this is equal to the client rectangle.</span></span> <span data-ttu-id="6dc4f-836">ただし、クライアント領域が表示領域と異なる場合は、コントロールの継承によってこの変更が必要になることがあります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-836">However, inheriting controls might want to change this if their client area differs from their display area.</span></span> <span data-ttu-id="6dc4f-837">表示四角形は、コントロールを囲む最小の <xref:System.Drawing.Rectangle> で、コントロールを配置するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-837">The display rectangle is the smallest <xref:System.Drawing.Rectangle> that encloses a control and is used to lay out controls.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-838">派生クラスの <see cref="P:System.Windows.Forms.Control.DisplayRectangle" /> プロパティをオーバーライドする場合は、基本クラスの <see cref="P:System.Windows.Forms.Control.DisplayRectangle" /> プロパティを使用して、基本実装を拡張します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-838">When overriding the <see cref="P:System.Windows.Forms.Control.DisplayRectangle" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.DisplayRectangle" /> property to extend the base implementation.</span></span> <span data-ttu-id="6dc4f-839">または、すべての実装を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-839">Alternatively, you must provide all the implementation.</span></span></para></block>
        <altmember cref="P:System.Windows.Forms.Control.ClientRectangle" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="control.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="6dc4f-840">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-840"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="6dc4f-841"><see cref="T:System.Windows.Forms.Control" /> とその子コントロールが使用しているアンマネージド リソースを解放します。オプションで、マネージド リソースも解放します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-841">Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.Control" /> and its child controls and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-842">このメソッドは、パブリック `Dispose()` メソッドと <xref:System.Object.Finalize%2A> メソッドによって呼び出されます。`Dispose()`</span><span class="sxs-lookup"><span data-stu-id="6dc4f-842">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.`Dispose()`</span></span> <span data-ttu-id="6dc4f-843">`disposing` パラメーターを `true`に設定して、protected `Dispose(Boolean)` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-843">invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="6dc4f-844"><xref:System.Object.Finalize%2A> は `disposing` を `false`に設定して `Dispose` を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-844"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="6dc4f-845">`disposing` パラメーターが `true` の場合、このメソッドは、この <xref:System.Windows.Forms.Control> が参照しているすべてのマネージド オブジェクトによって保持されているリソースをすべて解放します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-845">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Windows.Forms.Control> references.</span></span> <span data-ttu-id="6dc4f-846">このメソッドは、参照される各オブジェクトの `Dispose()` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-846">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-847">
            <see langword="Dispose" /> は、他のオブジェクトから複数回呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-847">
            <see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="6dc4f-848">をオーバーライドする場合は <see langword="Dispose(Boolean)" /> 以前に <see langword="Dispose" />を呼び出したときに破棄されたオブジェクトを参照しないように注意してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-848">When overriding <see langword="Dispose(Boolean)" /> be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="6dc4f-849"><see langword="Dispose(Boolean)" />を実装する方法の詳細については、「 [Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-849">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
<span data-ttu-id="6dc4f-850"><see langword="Dispose" /> と <see cref="M:System.Object.Finalize" />の詳細については、「[アンマネージリソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)」と「 [Finalize メソッドのオーバーライド](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-850">For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Disposing">
      <MemberSignature Language="C#" Value="public bool Disposing { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Disposing" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Disposing" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Disposing As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Disposing { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Disposing : bool" Usage="System.Windows.Forms.Control.Disposing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-851">基本 <see cref="T:System.Windows.Forms.Control" /> クラスが破棄処理中かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-851">Gets a value indicating whether the base <see cref="T:System.Windows.Forms.Control" /> class is in the process of disposing.</span></span></summary>
        <value><span data-ttu-id="6dc4f-852">基本 <see cref="T:System.Windows.Forms.Control" /> クラスが破棄処理中の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-852"><see langword="true" /> if the base <see cref="T:System.Windows.Forms.Control" /> class is in the process of disposing; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-853">このプロパティが `true`を返す場合、基本 <xref:System.Windows.Forms.Control> クラスは破棄処理を実行します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-853">When this property returns `true`, the base <xref:System.Windows.Forms.Control> class is in the process of disposing.</span></span> <span data-ttu-id="6dc4f-854">コントロールが破棄されると、有効な Windows コントロールとして参照できなくなります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-854">After the control is disposed of, it can no longer be referenced as a valid Windows control.</span></span> <span data-ttu-id="6dc4f-855">コントロールのインスタンスは破棄されていますが、ガベージコレクションによってメモリから削除されるまで、メモリ内に保持されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-855">Even though the instance of a control is disposed of, it is still maintained in memory until it is removed from memory through garbage collection.</span></span> <span data-ttu-id="6dc4f-856">コントロールが破棄されると、その <xref:System.Windows.Forms.Control.RecreateHandle%2A> メソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-856">When a control is disposed of, you cannot call its <xref:System.Windows.Forms.Control.RecreateHandle%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)" />
        <altmember cref="T:System.GC" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
      </Docs>
    </Member>
    <Member MemberName="Dock">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.DockStyle Dock { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DockStyle Dock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Dock" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Dock As DockStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::DockStyle Dock { System::Windows::Forms::DockStyle get(); void set(System::Windows::Forms::DockStyle value); };" />
      <MemberSignature Language="F#" Value="member this.Dock : System.Windows.Forms.DockStyle with get, set" Usage="System.Windows.Forms.Control.Dock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DockStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-857">コントロールの境界のうち、親コントロールにドッキングする境界を取得または設定します。また、コントロールのサイズが親コントロール内でどのように変化するかを決定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-857">Gets or sets which control borders are docked to its parent control and determines how a control is resized with its parent.</span></span></summary>
        <value><span data-ttu-id="6dc4f-858"><see cref="T:System.Windows.Forms.DockStyle" /> 値のいずれか 1 つです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-858">One of the <see cref="T:System.Windows.Forms.DockStyle" /> values.</span></span> <span data-ttu-id="6dc4f-859">既定では、 <see cref="F:System.Windows.Forms.DockStyle.None" />です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-859">The default is <see cref="F:System.Windows.Forms.DockStyle.None" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-860">親コントロールのサイズが変更されたときにコントロールのサイズを自動的に変更する方法を定義するには、<xref:System.Windows.Forms.Control.Dock%2A> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-860">Use the <xref:System.Windows.Forms.Control.Dock%2A> property to define how a control is automatically resized as its parent control is resized.</span></span> <span data-ttu-id="6dc4f-861">たとえば、<xref:System.Windows.Forms.Control.Dock%2A> を <xref:System.Windows.Forms.DockStyle.Left?displayProperty=nameWithType> に設定すると、コントロールは親コントロールの左端に揃えられ、親コントロールのサイズが変更されるにつれてサイズが変更されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-861">For example, setting <xref:System.Windows.Forms.Control.Dock%2A> to <xref:System.Windows.Forms.DockStyle.Left?displayProperty=nameWithType> causes the control to align itself with the left edges of its parent control and to resize as the parent control is resized.</span></span> <span data-ttu-id="6dc4f-862">コントロールは Z オーダーにドッキングされます。これは、フォームの Z 軸 (深度) に沿ってフォーム上のコントロールを視覚的に重ねたものです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-862">Controls are docked in their Z-order, which is the visual layering of controls on a form along the form's Z-axis (depth).</span></span>  
  
 <span data-ttu-id="6dc4f-863">コントロールは、その親コンテナーの1つの端にドッキングできます。または、すべての端にドッキングして、親コンテナーを塗りつぶすことができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-863">A control can be docked to one edge of its parent container or can be docked to all edges and fill the parent container.</span></span>  
  
 <span data-ttu-id="6dc4f-864">ドッキングされたコントロールの <xref:System.Windows.Forms.Control.Margin%2A> プロパティを設定しても、コンテナーの端からコントロールまでの距離には影響しません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-864">Setting the <xref:System.Windows.Forms.Control.Margin%2A> property on a docked control has no effect on the distance of the control from the edges of its container.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-865"><xref:System.Windows.Forms.Control.Anchor%2A> プロパティと <xref:System.Windows.Forms.Control.Dock%2A> プロパティは相互に排他的です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-865">The <xref:System.Windows.Forms.Control.Anchor%2A> and <xref:System.Windows.Forms.Control.Dock%2A> properties are mutually exclusive.</span></span> <span data-ttu-id="6dc4f-866">一度に設定できるのは1つだけです。最後の1つのセットが優先されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-866">Only one can be set at a time, and the last one set takes precedence.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-867">次のコード例では、<xref:System.Windows.Forms.GroupBox> を作成し、その共通プロパティのいくつかを設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-867">The following code example creates a <xref:System.Windows.Forms.GroupBox> and sets some of its common properties.</span></span> <span data-ttu-id="6dc4f-868">この例では、<xref:System.Windows.Forms.TextBox> を作成し、その <xref:System.Windows.Forms.Control.Location%2A> をグループボックス内に設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-868">The example creates a <xref:System.Windows.Forms.TextBox> and sets its <xref:System.Windows.Forms.Control.Location%2A> within the group box.</span></span> <span data-ttu-id="6dc4f-869">次に、グループボックスの <xref:System.Windows.Forms.Control.Text%2A> プロパティを設定し、グループボックスをフォームの上部にドッキングします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-869">Next, it sets the <xref:System.Windows.Forms.Control.Text%2A> property of the group box, and docks the group box to the top of the form.</span></span> <span data-ttu-id="6dc4f-870">最後に、[<xref:System.Windows.Forms.Control.Enabled%2A>] プロパティを [`false`] に設定して、グループボックスを無効にします。これにより、[グループ] ボックスに含まれるすべてのコントロールが無効になります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-870">Lastly, it disables the group box by setting the <xref:System.Windows.Forms.Control.Enabled%2A> property to `false`, which causes all controls contained within the group box to be disabled.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#2)]
 [!code-csharp[Windows.Forms.Control Properties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#2)]
 [!code-vb[Windows.Forms.Control Properties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="6dc4f-871">代入された値が、<see cref="T:System.Windows.Forms.DockStyle" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-871">The value assigned is not one of the <see cref="T:System.Windows.Forms.DockStyle" /> values.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-872">派生クラスの <see cref="P:System.Windows.Forms.Control.Dock" /> プロパティをオーバーライドする場合は、基本クラスの <see cref="P:System.Windows.Forms.Control.Dock" /> プロパティを使用して、基本実装を拡張します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-872">When overriding the <see cref="P:System.Windows.Forms.Control.Dock" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.Dock" /> property to extend the base implementation.</span></span> <span data-ttu-id="6dc4f-873">それ以外の場合は、すべての実装を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-873">Otherwise, you must provide all the implementation.</span></span> <span data-ttu-id="6dc4f-874"><see cref="P:System.Windows.Forms.Control.Dock" /> プロパティの <see langword="get" /> と <see langword="set" /> の両方のメソッドをオーバーライドする必要はありません。必要に応じて、オーバーライドできるのは1つだけです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-874">You are not required to override both the <see langword="get" /> and <see langword="set" /> methods of the <see cref="P:System.Windows.Forms.Control.Dock" /> property; you can override only one if needed.</span></span></para></block>
        <altmember cref="T:System.Windows.Forms.DockStyle" />
        <altmember cref="P:System.Windows.Forms.Control.Anchor" />
        <altmember cref="T:System.Windows.Forms.ScrollableControl.DockPaddingEdges" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="DockChanged">
      <MemberSignature Language="C#" Value="public event EventHandler DockChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DockChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DockChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DockChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DockChanged;" />
      <MemberSignature Language="F#" Value="member this.DockChanged : EventHandler " Usage="member this.DockChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-875"><see cref="P:System.Windows.Forms.Control.Dock" /> プロパティの値が変化したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-875">Occurs when the value of the <see cref="P:System.Windows.Forms.Control.Dock" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-876">このイベントは、プログラムによる変更またはユーザーの操作によって <xref:System.Windows.Forms.Control.Dock%2A> プロパティが変更された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-876">This event is raised if the <xref:System.Windows.Forms.Control.Dock%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="6dc4f-877">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-877">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-878">次のコード例は、<xref:System.Windows.Forms.Control.Text%2A> プロパティの値が変更されたときに実行されるイベントハンドラーです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-878">The following code example is an event handler that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="6dc4f-879"><xref:System.Windows.Forms.Control> クラスには、対応する*propertyname*値が変更されたときに発生する名前パターン*PropertyName*`Changed` を持ついくつかのメソッドがあります (*propertyname*は対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-879">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern *PropertyName*`Changed` that are raised when the corresponding *PropertyName* value changes(*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="6dc4f-880">次のコード例では、通貨データを表示する <xref:System.Windows.Forms.TextBox> の <xref:System.Windows.Forms.Control.ForeColor%2A> を変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-880">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data.</span></span> <span data-ttu-id="6dc4f-881">この例では、テキストを10進数に変換し、数値が負の場合は <xref:System.Windows.Forms.Control.ForeColor%2A> を <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> に変更し、数値が正の値の場合は <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> に変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-881">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="6dc4f-882">この例では、<xref:System.Windows.Forms.TextBox>を含む <xref:System.Windows.Forms.Form> が必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-882">This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CPP/propertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CS/propertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/VB/propertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Dock" />
        <altmember cref="T:System.Windows.Forms.DockStyle" />
      </Docs>
    </Member>
    <Member MemberName="DoDragDrop">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DragDropEffects DoDragDrop (object data, System.Windows.Forms.DragDropEffects allowedEffects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Forms.DragDropEffects DoDragDrop(object data, valuetype System.Windows.Forms.DragDropEffects allowedEffects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)" />
      <MemberSignature Language="VB.NET" Value="Public Function DoDragDrop (data As Object, allowedEffects As DragDropEffects) As DragDropEffects" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::DragDropEffects DoDragDrop(System::Object ^ data, System::Windows::Forms::DragDropEffects allowedEffects);" />
      <MemberSignature Language="F#" Value="member this.DoDragDrop : obj * System.Windows.Forms.DragDropEffects -&gt; System.Windows.Forms.DragDropEffects" Usage="control.DoDragDrop (data, allowedEffects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragDropEffects</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
        <Parameter Name="allowedEffects" Type="System.Windows.Forms.DragDropEffects" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="6dc4f-883">ドラッグするデータ。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-883">The data to drag.</span></span></param>
        <param name="allowedEffects"><span data-ttu-id="6dc4f-884"><see cref="T:System.Windows.Forms.DragDropEffects" /> 値のいずれか 1 つです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-884">One of the <see cref="T:System.Windows.Forms.DragDropEffects" /> values.</span></span></param>
        <summary><span data-ttu-id="6dc4f-885">ドラッグ アンド ドロップ操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-885">Begins a drag-and-drop operation.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-886">ドラッグ アンド ドロップ操作中に実行された最終的な効果を表す、<see cref="T:System.Windows.Forms.DragDropEffects" /> 列挙体からの値。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-886">A value from the <see cref="T:System.Windows.Forms.DragDropEffects" /> enumeration that represents the final effect that was performed during the drag-and-drop operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-887">`allowedEffects` パラメーターは、どのドラッグ操作を実行できるかを決定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-887">The `allowedEffects` parameter determines which drag operations can occur.</span></span> <span data-ttu-id="6dc4f-888">ドラッグ操作を別のプロセスのアプリケーションと相互運用する必要がある場合、データは基本マネージクラス (<xref:System.String>、<xref:System.Drawing.Bitmap>、または <xref:System.Drawing.Imaging.Metafile>)、または <xref:System.Runtime.Serialization.ISerializable> または <xref:System.Windows.Forms.IDataObject>を実装するオブジェクトである必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-888">If the drag operation needs to interoperate with applications in another process, data should either be a base managed class (<xref:System.String>, <xref:System.Drawing.Bitmap>, or <xref:System.Drawing.Imaging.Metafile>), or an object that implements <xref:System.Runtime.Serialization.ISerializable> or <xref:System.Windows.Forms.IDataObject>.</span></span>  
  
 <span data-ttu-id="6dc4f-889">ドラッグ アンド ドロップ操作関連のイベントがどのように、いつ発生するかについて次に示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-889">The following describes how and when events related to drag-and-drop operations are raised.</span></span>  
  
 <span data-ttu-id="6dc4f-890"><xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッドは、現在のカーソル位置の下にあるコントロールを決定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-890">The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method determines the control under the current cursor location.</span></span> <span data-ttu-id="6dc4f-891">次に、コントロールが有効なドロップ先であるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-891">It then checks to see if the control is a valid drop target.</span></span>  
  
 <span data-ttu-id="6dc4f-892">コントロールが有効なドロップ先である場合、ドラッグアンドドロップ効果が指定された状態で <xref:System.Windows.Forms.Control.GiveFeedback> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-892">If the control is a valid drop target, the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the drag-and-drop effect specified.</span></span> <span data-ttu-id="6dc4f-893">ドラッグ アンド ドロップ効果の一覧については、<xref:System.Windows.Forms.DragDropEffects> 列挙体を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-893">For a list of drag-and-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
 <span data-ttu-id="6dc4f-894">マウス カーソルの位置、キーボードの状態、およびマウス ボタンの状態の変更が監視されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-894">Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.</span></span>  
  
-   <span data-ttu-id="6dc4f-895">ユーザーがウィンドウの外に移動した場合、<xref:System.Windows.Forms.Control.DragLeave> イベントが生成されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-895">If the user moves out of a window, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
-   <span data-ttu-id="6dc4f-896">マウスが別のコントロールに移動した場合は、そのコントロールの <xref:System.Windows.Forms.Control.DragEnter> が生成されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-896">If the mouse enters another control, the <xref:System.Windows.Forms.Control.DragEnter> for that control is raised.</span></span>  
  
-   <span data-ttu-id="6dc4f-897">マウスが移動しても同じコントロール内の場合は、<xref:System.Windows.Forms.Control.DragOver> イベントが生成されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-897">If the mouse moves but stays within the same control, the <xref:System.Windows.Forms.Control.DragOver> event is raised.</span></span>  
  
 <span data-ttu-id="6dc4f-898">キーボードまたはマウスボタンの状態が変化した場合は、<xref:System.Windows.Forms.Control.QueryContinueDrag> イベントが発生し、ドラッグを続行するか、データを削除するか、またはイベントの <xref:System.Windows.Forms.QueryContinueDragEventArgs>の <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> プロパティの値に基づいて操作をキャンセルするかが決定されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-898">If there is a change in the keyboard or mouse button state, the <xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event's <xref:System.Windows.Forms.QueryContinueDragEventArgs>.</span></span>  
  
-   <span data-ttu-id="6dc4f-899"><xref:System.Windows.Forms.DragAction> の値が `Continue`場合は、操作を続行するために <xref:System.Windows.Forms.Control.DragOver> イベントが発生し、適切な視覚的フィードバックを設定できるように、新しい効果を使用して <xref:System.Windows.Forms.Control.GiveFeedback> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-899">If the value of <xref:System.Windows.Forms.DragAction> is `Continue`, the <xref:System.Windows.Forms.Control.DragOver> event is raised to continue the operation and the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the new effect so appropriate visual feedback can be set.</span></span> <span data-ttu-id="6dc4f-900">有効なドロップ効果の一覧については、<xref:System.Windows.Forms.DragDropEffects> 列挙体を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-900">For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6dc4f-901"><xref:System.Windows.Forms.Control.DragOver> イベントと <xref:System.Windows.Forms.Control.GiveFeedback> イベントがペアになっているため、マウスがドロップ先の上に移動すると、マウスの位置に関する最新のフィードバックがユーザーに与えられます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-901">The <xref:System.Windows.Forms.Control.DragOver> and <xref:System.Windows.Forms.Control.GiveFeedback> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.</span></span>  
  
-   <span data-ttu-id="6dc4f-902"><xref:System.Windows.Forms.DragAction> の値が `Drop`場合は、ドロップ効果の値がソースに返されるため、ソースアプリケーションはソースデータに対して適切な操作を実行できます。たとえば、操作が移動だった場合は、データを切り取ります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-902">If the value of <xref:System.Windows.Forms.DragAction> is `Drop`, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</span></span>  
  
-   <span data-ttu-id="6dc4f-903"><xref:System.Windows.Forms.DragAction> の値が `Cancel`場合、<xref:System.Windows.Forms.Control.DragLeave> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-903">If the value of <xref:System.Windows.Forms.DragAction> is `Cancel`, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-904"><xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッドは、すべての例外をキャッチし、次のセキュリティまたは重大な例外のみを再スローします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-904">The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method catches all exceptions and rethrows only the following security or critical exceptions:</span></span>  
  
-   <span data-ttu-id="6dc4f-905">SecurityException</span><span class="sxs-lookup"><span data-stu-id="6dc4f-905">SecurityException</span></span>  
  
-   <span data-ttu-id="6dc4f-906">NullReferenceException</span><span class="sxs-lookup"><span data-stu-id="6dc4f-906">NullReferenceException</span></span>  
  
-   <span data-ttu-id="6dc4f-907">StackOverflowException</span><span class="sxs-lookup"><span data-stu-id="6dc4f-907">StackOverflowException</span></span>  
  
-   <span data-ttu-id="6dc4f-908">OutOfMemoryException</span><span class="sxs-lookup"><span data-stu-id="6dc4f-908">OutOfMemoryException</span></span>  
  
-   <span data-ttu-id="6dc4f-909">ThreadAbortException</span><span class="sxs-lookup"><span data-stu-id="6dc4f-909">ThreadAbortException</span></span>  
  
-   <span data-ttu-id="6dc4f-910">ExecutionEngineException</span><span class="sxs-lookup"><span data-stu-id="6dc4f-910">ExecutionEngineException</span></span>  
  
-   <span data-ttu-id="6dc4f-911">IndexOutOfRangeException</span><span class="sxs-lookup"><span data-stu-id="6dc4f-911">IndexOutOfRangeException</span></span>  
  
-   <span data-ttu-id="6dc4f-912">AccessViolationException</span><span class="sxs-lookup"><span data-stu-id="6dc4f-912">AccessViolationException</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-913">次のコード例は、2つの <xref:System.Windows.Forms.ListBox> コントロール間のドラッグアンドドロップ操作を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-913">The following code example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls.</span></span> <span data-ttu-id="6dc4f-914">この例では、ドラッグ操作の開始時に <xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-914">The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts.</span></span> <span data-ttu-id="6dc4f-915">マウスが <xref:System.Windows.Forms.Control.MouseDown> イベント中にマウスの位置から <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> を超えて移動した場合、ドラッグ操作が開始されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-915">The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event.</span></span> <span data-ttu-id="6dc4f-916"><xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> メソッドは、`MouseDown` イベント中にドラッグする項目のインデックスを決定するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-916">The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.</span></span>  
  
 <span data-ttu-id="6dc4f-917">この例では、ドラッグアンドドロップ操作にカスタムカーソルを使用する方法も示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-917">The example also demonstrates using custom cursors for the drag-and-drop operation.</span></span> <span data-ttu-id="6dc4f-918">この例では、2つのカーソルファイル (`3dwarro.cur` と `3dwno.cur`) がアプリケーションディレクトリに存在する必要があります。これには、それぞれカスタムドラッグアンドドロップカーソルを使用します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-918">The example requires that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively.</span></span> <span data-ttu-id="6dc4f-919">`UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> がオンになっている場合は、カスタムカーソルが使用されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-919">The custom cursors will be used if the `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> is checked.</span></span> <span data-ttu-id="6dc4f-920">カスタムカーソルは <xref:System.Windows.Forms.Control.GiveFeedback> イベントハンドラーで設定されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-920">The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.</span></span>  
  
 <span data-ttu-id="6dc4f-921">キーボードの状態は、右 `ListBox`の <xref:System.Windows.Forms.Control.DragOver> イベントハンドラーで評価され、SHIFT、CTRL、ALT、CTRL + ALT の各キーの状態に基づいてドラッグ操作がどのように行われるかを決定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-921">The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys.</span></span> <span data-ttu-id="6dc4f-922">ドロップが発生する `ListBox` 内の場所は、`DragOver` イベント中にも決定されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-922">The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event.</span></span> <span data-ttu-id="6dc4f-923">削除するデータが `String`でない場合、<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> は <xref:System.Windows.Forms.DragDropEffects>で `None` に設定されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-923">If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> is set to `None` in <xref:System.Windows.Forms.DragDropEffects>.</span></span> <span data-ttu-id="6dc4f-924">最後に、ドロップの状態が `DropLocationLabel` <xref:System.Windows.Forms.Label>に表示されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-924">Finally, the status of the drop is displayed in the `DropLocationLabel` <xref:System.Windows.Forms.Label>.</span></span>  
  
 <span data-ttu-id="6dc4f-925">右側の `ListBox` にドロップするデータは、<xref:System.Windows.Forms.Control.DragDrop> イベントハンドラーで決定され、`ListBox`内の適切な場所に `String` 値が追加されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-925">The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`.</span></span> <span data-ttu-id="6dc4f-926">ドラッグ操作がフォームの境界の外に移動した場合、<xref:System.Windows.Forms.Control.QueryContinueDrag> イベントハンドラーでドラッグアンドドロップ操作が取り消されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-926">If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#1)]  
  
 <span data-ttu-id="6dc4f-927">次のコード例は、<xref:System.Windows.Forms.DragDropEffects> 列挙体を使用して、ドラッグアンドドロップ操作に関係するコントロール間でデータを転送する方法を指定する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-927">The following code example shows how to use the <xref:System.Windows.Forms.DragDropEffects> enumeration to specify how data should be transferred between the controls involved in a drag-and-drop operation.</span></span> <span data-ttu-id="6dc4f-928">この例では、フォームに <xref:System.Windows.Forms.RichTextBox> コントロールと <xref:System.Windows.Forms.ListBox> コントロールが含まれており、<xref:System.Windows.Forms.ListBox> コントロールに有効なファイル名の一覧が設定されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-928">This example requires that your form includes a <xref:System.Windows.Forms.RichTextBox> control and a <xref:System.Windows.Forms.ListBox> control and that the <xref:System.Windows.Forms.ListBox> control is populated with a list of valid file names.</span></span> <span data-ttu-id="6dc4f-929">ユーザーがファイル名を <xref:System.Windows.Forms.RichTextBox> コントロールにドラッグすると、コントロールの <xref:System.Windows.Forms.Control.DragEnter> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-929">When the user drags a file name onto the <xref:System.Windows.Forms.RichTextBox> control, the control's <xref:System.Windows.Forms.Control.DragEnter> event is raised.</span></span> <span data-ttu-id="6dc4f-930">イベントハンドラー内では、<xref:System.Windows.Forms.DragEventArgs> の <xref:System.Windows.Forms.DragEventArgs.Effect%2A> プロパティが <xref:System.Windows.Forms.DragDropEffects> に初期化され、ファイルパスによって参照されるデータを <xref:System.Windows.Forms.RichTextBox> コントロールにコピーする必要があることを示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-930">Within the event handler, the <xref:System.Windows.Forms.DragEventArgs.Effect%2A> property of the <xref:System.Windows.Forms.DragEventArgs> is initialized to <xref:System.Windows.Forms.DragDropEffects> to indicate that the data referenced by the file path should be copied to the <xref:System.Windows.Forms.RichTextBox> control.</span></span>  
  
 [!code-cpp[RichTextDragDrop#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextDragDrop/CPP/form1.cpp#1)]
 [!code-csharp[RichTextDragDrop#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextDragDrop/CS/form1.cs#1)]
 [!code-vb[RichTextDragDrop#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextDragDrop/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.AllowDrop" />
        <altmember cref="E:System.Windows.Forms.Control.DragDrop" />
      </Docs>
    </Member>
    <Member MemberName="DoubleBuffered">
      <MemberSignature Language="C#" Value="protected virtual bool DoubleBuffered { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DoubleBuffered" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DoubleBuffered" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Property DoubleBuffered As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool DoubleBuffered { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DoubleBuffered : bool with get, set" Usage="System.Windows.Forms.Control.DoubleBuffered" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-931">ちらつきを軽減または回避するために、2 次バッファーを使用してコントロールの表面を再描画するかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-931">Gets or sets a value indicating whether this control should redraw its surface using a secondary buffer to reduce or prevent flicker.</span></span></summary>
        <value><span data-ttu-id="6dc4f-932">ダブル バッファリングを使用してコントロールの表面を再描画する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-932"><see langword="true" /> if the surface of the control should be drawn using double buffering; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-933">バッファリングされたグラフィックスは、表示されたサーフェイスの一部のプログレッシブ再描画によって発生するちらつきを軽減または除去できます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-933">Buffered graphics can reduce or eliminate flicker that is caused by progressive redrawing of parts of a displayed surface.</span></span> <span data-ttu-id="6dc4f-934">バッファリングされたグラフィックスでは、更新されたグラフィックスデータが最初にバッファーに書き込まれる必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-934">Buffered graphics require that the updated graphics data is first written to a buffer.</span></span> <span data-ttu-id="6dc4f-935">次に、グラフィックスバッファー内のデータが、表示されている表面メモリにすばやく書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-935">The data in the graphics buffer is then quickly written to displayed surface memory.</span></span> <span data-ttu-id="6dc4f-936">通常は、表示されるグラフィックスメモリの比較的クイックスイッチによって、発生する可能性のあるちらつきが軽減されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-936">The relatively quick switch of the displayed graphics memory typically reduces the flicker that can otherwise occur.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-937"><xref:System.Windows.Forms.Control.DoubleBuffered%2A> はバインド可能なプロパティではありません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-937"><xref:System.Windows.Forms.Control.DoubleBuffered%2A> is not a bindable property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.BufferedGraphics" />
        <altmember cref="T:System.Drawing.BufferedGraphicsContext" />
        <altmember cref="T:System.Drawing.BufferedGraphicsManager" />
        <altmember cref="F:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer" />
      </Docs>
    </Member>
    <Member MemberName="DoubleClick">
      <MemberSignature Language="C#" Value="public event EventHandler DoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DoubleClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DoubleClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DoubleClick As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DoubleClick;" />
      <MemberSignature Language="F#" Value="member this.DoubleClick : EventHandler " Usage="member this.DoubleClick : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-938">コントロールがダブルクリックされたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-938">Occurs when the control is double-clicked.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-939">ダブルクリックは、ユーザーのオペレーティングシステムのマウス設定によって決まります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-939">A double-click is determined by the mouse settings of the user's operating system.</span></span> <span data-ttu-id="6dc4f-940">ユーザーは、2 回のクリックではなくダブルクリックと見なされるマウス ボタンのクリック間隔を設定できます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-940">The user can set the time between clicks of a mouse button that should be considered a double-click rather than two clicks.</span></span> <span data-ttu-id="6dc4f-941"><xref:System.Windows.Forms.Control.Click> イベントは、コントロールがダブルクリックされるたびに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-941">The <xref:System.Windows.Forms.Control.Click> event is raised every time a control is double-clicked.</span></span> <span data-ttu-id="6dc4f-942">たとえば、<xref:System.Windows.Forms.Form>の <xref:System.Windows.Forms.Control.Click> イベントと <xref:System.Windows.Forms.Control.DoubleClick> イベントのイベントハンドラーがある場合、フォームがダブルクリックされ、両方のメソッドが呼び出されると、<xref:System.Windows.Forms.Control.Click> イベントと <xref:System.Windows.Forms.Control.DoubleClick> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-942">For example, if you have event handlers for the <xref:System.Windows.Forms.Control.Click> and <xref:System.Windows.Forms.Control.DoubleClick> events of a <xref:System.Windows.Forms.Form>, the <xref:System.Windows.Forms.Control.Click> and <xref:System.Windows.Forms.Control.DoubleClick> events are raised when the form is double-clicked and both methods are called.</span></span> <span data-ttu-id="6dc4f-943">コントロールがダブルクリックされ、そのコントロールが <xref:System.Windows.Forms.Control.DoubleClick> イベントをサポートしていない場合、<xref:System.Windows.Forms.Control.Click> イベントが2回発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-943">If a control is double-clicked and that control does not support the <xref:System.Windows.Forms.Control.DoubleClick> event, the <xref:System.Windows.Forms.Control.Click> event might be raised twice.</span></span>  
  
 <span data-ttu-id="6dc4f-944">このイベントを発生させるには、<xref:System.Windows.Forms.ControlStyles> の `StandardDoubleClick` と `StandardClick` の値を `true` に設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-944">You must set the `StandardDoubleClick` and `StandardClick` values of <xref:System.Windows.Forms.ControlStyles> to `true` for this event to be raised.</span></span> <span data-ttu-id="6dc4f-945">既存の Windows フォームコントロールから継承している場合、これらの値は既に `true` に設定されている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-945">These values might already be set to `true` if you are inheriting from existing Windows Forms controls.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-946"><xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> コレクションに少なくとも1つの <xref:System.Windows.Forms.TabPage> が含まれている場合 (<xref:System.Windows.Forms.Control.Click>、<xref:System.Windows.Forms.Control.DoubleClick>、<xref:System.Windows.Forms.Control.MouseDown>、<xref:System.Windows.Forms.Control.MouseUp>、<xref:System.Windows.Forms.Control.MouseHover>、<xref:System.Windows.Forms.Control.MouseEnter>、<xref:System.Windows.Forms.Control.MouseLeave>、<xref:System.Windows.Forms.Control.MouseMove>)、<xref:System.Windows.Forms.TabControl> クラスでは、次のイベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-946">The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>.</span></span> <span data-ttu-id="6dc4f-947">コレクションに少なくとも1つの <xref:System.Windows.Forms.TabPage> が存在し、ユーザーがタブコントロールのヘッダー (<xref:System.Windows.Forms.TabPage> 名が表示される) と対話する場合、<xref:System.Windows.Forms.TabControl> は適切なイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-947">If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event.</span></span> <span data-ttu-id="6dc4f-948">ただし、ユーザーの操作がタブページのクライアント領域内にある場合、<xref:System.Windows.Forms.TabPage> は適切なイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-948">However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.</span></span>  
  
 <span data-ttu-id="6dc4f-949">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-949">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-950">次のコード例では、<xref:System.Windows.Forms.ListBox> の <xref:System.Windows.Forms.Control.DoubleClick> イベントを使用して、<xref:System.Windows.Forms.ListBox> に一覧表示されているテキストファイルを <xref:System.Windows.Forms.TextBox> コントロールに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-950">The following code example uses the <xref:System.Windows.Forms.Control.DoubleClick> event of a <xref:System.Windows.Forms.ListBox> to load text files listed in the <xref:System.Windows.Forms.ListBox> into a <xref:System.Windows.Forms.TextBox> control.</span></span>  
  
 [!code-cpp[Control.DoubleClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.DoubleClick/CPP/form1.cpp#1)]
 [!code-csharp[Control.DoubleClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.DoubleClick/CS/form1.cs#1)]
 [!code-vb[Control.DoubleClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.DoubleClick/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-951">標準 Windows フォーム制御から継承し、<see cref="T:System.Windows.Forms.ControlStyles" /> の <see langword="StandardClick" /> または <see langword="StandardDoubleClick" /> 値を <see langword="true" /> に変更すると、予期しない動作が発生したり、コントロールで <see cref="E:System.Windows.Forms.Control.Click" /> イベントまたは <see cref="E:System.Windows.Forms.Control.DoubleClick" /> イベントがサポートされていない場合はまったく効果がなくなります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-951">Inheriting from a standard Windows Forms control and changing the <see langword="StandardClick" /> or <see langword="StandardDoubleClick" /> values of <see cref="T:System.Windows.Forms.ControlStyles" /> to <see langword="true" /> can cause unexpected behavior or have no effect at all if the control does not support the <see cref="E:System.Windows.Forms.Control.Click" /> or <see cref="E:System.Windows.Forms.Control.DoubleClick" /> events.</span></span>  
  
<span data-ttu-id="6dc4f-952">次の表は、Windows フォームコントロールと、指定されたマウス操作に応答して発生するイベント (<see cref="E:System.Windows.Forms.Control.Click" /> または <see cref="E:System.Windows.Forms.Control.DoubleClick" />) を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-952">The following table lists Windows Forms controls and which event (<see cref="E:System.Windows.Forms.Control.Click" /> or <see cref="E:System.Windows.Forms.Control.DoubleClick" />) is raised in response to the mouse action specified.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="6dc4f-953">コントロール</span><span class="sxs-lookup"><span data-stu-id="6dc4f-953">Control</span></span> 
 </term><description> <span data-ttu-id="6dc4f-954">マウスの左クリック</span><span class="sxs-lookup"><span data-stu-id="6dc4f-954">Left Mouse Click</span></span> 
 </description><description> <span data-ttu-id="6dc4f-955">マウスの左ダブルクリック</span><span class="sxs-lookup"><span data-stu-id="6dc4f-955">Left Mouse Double Click</span></span> 
 </description><description> <span data-ttu-id="6dc4f-956">マウスの右クリック</span><span class="sxs-lookup"><span data-stu-id="6dc4f-956">Right Mouse Click</span></span> 
 </description><description> <span data-ttu-id="6dc4f-957">右マウスダブルクリック</span><span class="sxs-lookup"><span data-stu-id="6dc4f-957">Right Mouse Double Click</span></span> 
 </description><description> <span data-ttu-id="6dc4f-958">マウスの中央クリック</span><span class="sxs-lookup"><span data-stu-id="6dc4f-958">Middle Mouse Click</span></span> 
 </description><description> <span data-ttu-id="6dc4f-959">中央マウスダブルクリック</span><span class="sxs-lookup"><span data-stu-id="6dc4f-959">Middle Mouse Double Click</span></span> 
 </description><description> <span data-ttu-id="6dc4f-960">XButton1 マウスクリック</span><span class="sxs-lookup"><span data-stu-id="6dc4f-960">XButton1 Mouse Click</span></span> 
 </description><description> <span data-ttu-id="6dc4f-961">XButton1 マウスのダブルクリック</span><span class="sxs-lookup"><span data-stu-id="6dc4f-961">XButton1 Mouse Double-Click</span></span> 
 </description><description> <span data-ttu-id="6dc4f-962">XButton2 マウスクリック</span><span class="sxs-lookup"><span data-stu-id="6dc4f-962">XButton2 Mouse Click</span></span> 
 </description><description> <span data-ttu-id="6dc4f-963">XButton2 マウスのダブルクリック</span><span class="sxs-lookup"><span data-stu-id="6dc4f-963">XButton2 Mouse Double-Click</span></span> 
 </description></listheader><item><term><span data-ttu-id="6dc4f-964"><see cref="T:System.Windows.Forms.MonthCalendar" />,</span><span class="sxs-lookup"><span data-stu-id="6dc4f-964"><see cref="T:System.Windows.Forms.MonthCalendar" />,</span></span> 
 <span data-ttu-id="6dc4f-965"><see cref="T:System.Windows.Forms.DateTimePicker" />,</span><span class="sxs-lookup"><span data-stu-id="6dc4f-965"><see cref="T:System.Windows.Forms.DateTimePicker" />,</span></span> 
 <span data-ttu-id="6dc4f-966"><see cref="T:System.Windows.Forms.RichTextBox" />,</span><span class="sxs-lookup"><span data-stu-id="6dc4f-966"><see cref="T:System.Windows.Forms.RichTextBox" />,</span></span> 
 <span data-ttu-id="6dc4f-967"><see cref="T:System.Windows.Forms.HScrollBar" />,</span><span class="sxs-lookup"><span data-stu-id="6dc4f-967"><see cref="T:System.Windows.Forms.HScrollBar" />,</span></span> 
 <see cref="T:System.Windows.Forms.VScrollBar" /></term><description> <span data-ttu-id="6dc4f-968">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-968">none</span></span> 
 </description><description> <span data-ttu-id="6dc4f-969">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-969">none</span></span> 
 </description><description> <span data-ttu-id="6dc4f-970">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-970">none</span></span> 
 </description><description> <span data-ttu-id="6dc4f-971">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-971">none</span></span> 
 </description><description> <span data-ttu-id="6dc4f-972">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-972">none</span></span> 
 </description><description> <span data-ttu-id="6dc4f-973">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-973">none</span></span> 
 </description><description> <span data-ttu-id="6dc4f-974">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-974">none</span></span> 
 </description><description> <span data-ttu-id="6dc4f-975">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-975">none</span></span> 
 </description><description> <span data-ttu-id="6dc4f-976">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-976">none</span></span> 
 </description><description> <span data-ttu-id="6dc4f-977">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-977">none</span></span> 
 </description></item><item><term><span data-ttu-id="6dc4f-978"><see cref="T:System.Windows.Forms.Button" />,</span><span class="sxs-lookup"><span data-stu-id="6dc4f-978"><see cref="T:System.Windows.Forms.Button" />,</span></span> 
 <span data-ttu-id="6dc4f-979"><see cref="T:System.Windows.Forms.CheckBox" />,</span><span class="sxs-lookup"><span data-stu-id="6dc4f-979"><see cref="T:System.Windows.Forms.CheckBox" />,</span></span> 
 <see cref="T:System.Windows.Forms.RadioButton" /></term><description> <span data-ttu-id="6dc4f-980">Click</span><span class="sxs-lookup"><span data-stu-id="6dc4f-980">Click</span></span> 
 </description><description> <span data-ttu-id="6dc4f-981">をクリックし、</span><span class="sxs-lookup"><span data-stu-id="6dc4f-981">Click, Click</span></span> 
 </description><description> <span data-ttu-id="6dc4f-982">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-982">none</span></span> 
 </description><description> <span data-ttu-id="6dc4f-983">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-983">none</span></span> 
 </description><description> <span data-ttu-id="6dc4f-984">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-984">none</span></span> 
 </description><description> <span data-ttu-id="6dc4f-985">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-985">none</span></span> 
 </description><description> <span data-ttu-id="6dc4f-986">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-986">none</span></span> 
 </description><description> <span data-ttu-id="6dc4f-987">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-987">none</span></span> 
 </description><description> <span data-ttu-id="6dc4f-988">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-988">none</span></span> 
 </description><description> <span data-ttu-id="6dc4f-989">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-989">none</span></span> 
 </description></item><item><term><span data-ttu-id="6dc4f-990"><see cref="T:System.Windows.Forms.ListBox" />,</span><span class="sxs-lookup"><span data-stu-id="6dc4f-990"><see cref="T:System.Windows.Forms.ListBox" />,</span></span> 
 <span data-ttu-id="6dc4f-991"><see cref="T:System.Windows.Forms.CheckedListBox" />,</span><span class="sxs-lookup"><span data-stu-id="6dc4f-991"><see cref="T:System.Windows.Forms.CheckedListBox" />,</span></span> 
 <see cref="T:System.Windows.Forms.ComboBox" /></term><description> <span data-ttu-id="6dc4f-992">Click</span><span class="sxs-lookup"><span data-stu-id="6dc4f-992">Click</span></span> 
 </description><description> <span data-ttu-id="6dc4f-993">[, DoubleClick] をクリックします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-993">Click, DoubleClick</span></span> 
 </description><description> <span data-ttu-id="6dc4f-994">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-994">none</span></span> 
 </description><description> <span data-ttu-id="6dc4f-995">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-995">none</span></span> 
 </description><description> <span data-ttu-id="6dc4f-996">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-996">none</span></span> 
 </description><description> <span data-ttu-id="6dc4f-997">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-997">none</span></span> 
 </description><description> <span data-ttu-id="6dc4f-998">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-998">none</span></span> 
 </description><description> <span data-ttu-id="6dc4f-999">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-999">none</span></span> 
 </description><description> <span data-ttu-id="6dc4f-1000">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1000">none</span></span> 
 </description><description> <span data-ttu-id="6dc4f-1001">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1001">none</span></span> 
 </description></item><item><term><span data-ttu-id="6dc4f-1002"><see cref="T:System.Windows.Forms.TextBox" />,</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1002"><see cref="T:System.Windows.Forms.TextBox" />,</span></span> 
 <span data-ttu-id="6dc4f-1003"><see cref="T:System.Windows.Forms.DomainUpDown" />,</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1003"><see cref="T:System.Windows.Forms.DomainUpDown" />,</span></span> 
 <see cref="T:System.Windows.Forms.NumericUpDown" /></term><description> <span data-ttu-id="6dc4f-1004">Click</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1004">Click</span></span> 
 </description><description> <span data-ttu-id="6dc4f-1005">[, DoubleClick] をクリックします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1005">Click, DoubleClick</span></span> 
 </description><description> <span data-ttu-id="6dc4f-1006">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1006">none</span></span> 
 </description><description> <span data-ttu-id="6dc4f-1007">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1007">none</span></span> 
 </description><description> <span data-ttu-id="6dc4f-1008">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1008">none</span></span> 
 </description><description> <span data-ttu-id="6dc4f-1009">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1009">none</span></span> 
 </description><description> <span data-ttu-id="6dc4f-1010">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1010">none</span></span> 
 </description><description> <span data-ttu-id="6dc4f-1011">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1011">none</span></span> 
 </description><description> <span data-ttu-id="6dc4f-1012">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1012">none</span></span> 
 </description><description> <span data-ttu-id="6dc4f-1013">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1013">none</span></span> 
 </description></item><item><term> <span data-ttu-id="6dc4f-1014">\* <see cref="T:System.Windows.Forms.TreeView" />、</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1014">\* <see cref="T:System.Windows.Forms.TreeView" />,</span></span> 
<span data-ttu-id="6dc4f-1015">\* <see cref="T:System.Windows.Forms.ListView" /></span><span class="sxs-lookup"><span data-stu-id="6dc4f-1015">\* <see cref="T:System.Windows.Forms.ListView" /></span></span></term><description> <span data-ttu-id="6dc4f-1016">Click</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1016">Click</span></span> 
 </description><description> <span data-ttu-id="6dc4f-1017">[, DoubleClick] をクリックします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1017">Click, DoubleClick</span></span> 
 </description><description> <span data-ttu-id="6dc4f-1018">Click</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1018">Click</span></span> 
 </description><description> <span data-ttu-id="6dc4f-1019">[, DoubleClick] をクリックします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1019">Click, DoubleClick</span></span> 
 </description><description> <span data-ttu-id="6dc4f-1020">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1020">none</span></span> 
 </description><description> <span data-ttu-id="6dc4f-1021">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1021">none</span></span> 
 </description><description> <span data-ttu-id="6dc4f-1022">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1022">none</span></span> 
 </description><description> <span data-ttu-id="6dc4f-1023">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1023">none</span></span> 
 </description><description> <span data-ttu-id="6dc4f-1024">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1024">none</span></span> 
 </description><description> <span data-ttu-id="6dc4f-1025">なし</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1025">none</span></span> 
 </description></item><item><term><span data-ttu-id="6dc4f-1026"><see cref="T:System.Windows.Forms.ProgressBar" />,</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1026"><see cref="T:System.Windows.Forms.ProgressBar" />,</span></span> 
 <see cref="T:System.Windows.Forms.TrackBar" /></term><description> <span data-ttu-id="6dc4f-1027">Click</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1027">Click</span></span> 
 </description><description> <span data-ttu-id="6dc4f-1028">をクリックし、</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1028">Click, Click</span></span> 
 </description><description> <span data-ttu-id="6dc4f-1029">Click</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1029">Click</span></span> 
 </description><description> <span data-ttu-id="6dc4f-1030">をクリックし、</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1030">Click, Click</span></span> 
 </description><description> <span data-ttu-id="6dc4f-1031">Click</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1031">Click</span></span> 
 </description><description> <span data-ttu-id="6dc4f-1032">をクリックし、</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1032">Click, Click</span></span> 
 </description><description> <span data-ttu-id="6dc4f-1033">Click</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1033">Click</span></span> 
 </description><description> <span data-ttu-id="6dc4f-1034">をクリックし、</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1034">Click, Click</span></span> 
 </description><description> <span data-ttu-id="6dc4f-1035">Click</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1035">Click</span></span> 
 </description><description> <span data-ttu-id="6dc4f-1036">をクリックし、</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1036">Click, Click</span></span> 
 </description></item><item><term><span data-ttu-id="6dc4f-1037"><see cref="T:System.Windows.Forms.Form" />,</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1037"><see cref="T:System.Windows.Forms.Form" />,</span></span> 
 <span data-ttu-id="6dc4f-1038"><see cref="T:System.Windows.Forms.DataGrid" />,</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1038"><see cref="T:System.Windows.Forms.DataGrid" />,</span></span> 
 <span data-ttu-id="6dc4f-1039"><see cref="T:System.Windows.Forms.Label" />,</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1039"><see cref="T:System.Windows.Forms.Label" />,</span></span> 
 <span data-ttu-id="6dc4f-1040"><see cref="T:System.Windows.Forms.LinkLabel" />,</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1040"><see cref="T:System.Windows.Forms.LinkLabel" />,</span></span> 
 <span data-ttu-id="6dc4f-1041"><see cref="T:System.Windows.Forms.Panel" />,</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1041"><see cref="T:System.Windows.Forms.Panel" />,</span></span> 
 <span data-ttu-id="6dc4f-1042"><see cref="T:System.Windows.Forms.GroupBox" />,</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1042"><see cref="T:System.Windows.Forms.GroupBox" />,</span></span> 
 <span data-ttu-id="6dc4f-1043"><see cref="T:System.Windows.Forms.PictureBox" />,</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1043"><see cref="T:System.Windows.Forms.PictureBox" />,</span></span> 
 <span data-ttu-id="6dc4f-1044"><see cref="T:System.Windows.Forms.Splitter" />,</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1044"><see cref="T:System.Windows.Forms.Splitter" />,</span></span> 
 <span data-ttu-id="6dc4f-1045"><see cref="T:System.Windows.Forms.StatusBar" />,</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1045"><see cref="T:System.Windows.Forms.StatusBar" />,</span></span> 
 <span data-ttu-id="6dc4f-1046"><see cref="T:System.Windows.Forms.ToolBar" />,</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1046"><see cref="T:System.Windows.Forms.ToolBar" />,</span></span> 
 <span data-ttu-id="6dc4f-1047"><see cref="T:System.Windows.Forms.TabPage" />,</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1047"><see cref="T:System.Windows.Forms.TabPage" />,</span></span> 
 ** <see cref="T:System.Windows.Forms.TabControl" /></term><description> <span data-ttu-id="6dc4f-1048">Click</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1048">Click</span></span> 
 </description><description> <span data-ttu-id="6dc4f-1049">[, DoubleClick] をクリックします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1049">Click, DoubleClick</span></span> 
 </description><description> <span data-ttu-id="6dc4f-1050">Click</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1050">Click</span></span> 
 </description><description> <span data-ttu-id="6dc4f-1051">[, DoubleClick] をクリックします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1051">Click, DoubleClick</span></span> 
 </description><description> <span data-ttu-id="6dc4f-1052">Click</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1052">Click</span></span> 
 </description><description> <span data-ttu-id="6dc4f-1053">[, DoubleClick] をクリックします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1053">Click, DoubleClick</span></span> 
 </description><description> <span data-ttu-id="6dc4f-1054">Click</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1054">Click</span></span> 
 </description><description> <span data-ttu-id="6dc4f-1055">[, DoubleClick] をクリックします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1055">Click, DoubleClick</span></span> 
 </description><description> <span data-ttu-id="6dc4f-1056">Click</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1056">Click</span></span> 
 </description><description> <span data-ttu-id="6dc4f-1057">[, DoubleClick] をクリックします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1057">Click, DoubleClick</span></span> 
 </description></item></list>  

 <span data-ttu-id="6dc4f-1058">マウスポインターが子オブジェクト (<see cref="T:System.Windows.Forms.TreeNode" /> または <see cref="T:System.Windows.Forms.ListViewItem" />) 上にある必要がある \* ます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1058">\* The mouse pointer must be over a child object (<see cref="T:System.Windows.Forms.TreeNode" /> or <see cref="T:System.Windows.Forms.ListViewItem" />).</span></span>  
  
<span data-ttu-id="6dc4f-1059">\* \* <see cref="T:System.Windows.Forms.TabControl" /> には、<see cref="P:System.Windows.Forms.TabControl.TabPages" /> コレクションに少なくとも1つの <see cref="T:System.Windows.Forms.TabPage" /> が必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1059">\*\* The <see cref="T:System.Windows.Forms.TabControl" /> must have at least one <see cref="T:System.Windows.Forms.TabPage" /> in its <see cref="P:System.Windows.Forms.TabControl.TabPages" /> collection.</span></span></para></block>
        <altmember cref="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)" />
        <altmember cref="F:System.Windows.Forms.ControlStyles.StandardClick" />
        <altmember cref="F:System.Windows.Forms.ControlStyles.StandardDoubleClick" />
        <altmember cref="E:System.Windows.Forms.Control.Click" />
        <altmember cref="E:System.Windows.Forms.Control.MouseClick" />
        <altmember cref="E:System.Windows.Forms.Control.MouseDoubleClick" />
      </Docs>
    </Member>
    <Member MemberName="DpiChangedAfterParent">
      <MemberSignature Language="C#" Value="public event EventHandler DpiChangedAfterParent;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DpiChangedAfterParent" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DpiChangedAfterParent" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DpiChangedAfterParent As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DpiChangedAfterParent;" />
      <MemberSignature Language="F#" Value="member this.DpiChangedAfterParent : EventHandler " Usage="member this.DpiChangedAfterParent : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1060">親コントロールまたはフォームの DPI が変更された後に、コントロールの DPI 設定がプログラムで変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1060">Occurs when the DPI setting for a control is changed programmatically after the DPI of its parent control or form has changed.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DpiChangedBeforeParent">
      <MemberSignature Language="C#" Value="public event EventHandler DpiChangedBeforeParent;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DpiChangedBeforeParent" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DpiChangedBeforeParent" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DpiChangedBeforeParent As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DpiChangedBeforeParent;" />
      <MemberSignature Language="F#" Value="member this.DpiChangedBeforeParent : EventHandler " Usage="member this.DpiChangedBeforeParent : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1061">親コントロールまたはフォームの DPI 変更イベントが発生する前に、コントロールの DPI 設定がプログラムで変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1061">Occurs when the DPI setting for a control is changed programmatically before a DPI change event for its parent control or form has occurred.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DragDrop">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DragEventHandler DragDrop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DragEventHandler DragDrop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DragDrop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragDrop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DragEventHandler ^ DragDrop;" />
      <MemberSignature Language="F#" Value="member this.DragDrop : System.Windows.Forms.DragEventHandler " Usage="member this.DragDrop : System.Windows.Forms.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1062">ドラッグ アンド ドロップ操作が完了したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1062">Occurs when a drag-and-drop operation is completed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1063"><xref:System.Windows.Forms.DragEventArgs> の <xref:System.Windows.Forms.DragEventArgs.X%2A> と <xref:System.Windows.Forms.DragEventArgs.Y%2A> のプロパティは、クライアント座標ではなく画面座標です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1063">The <xref:System.Windows.Forms.DragEventArgs.X%2A> and <xref:System.Windows.Forms.DragEventArgs.Y%2A> properties of the <xref:System.Windows.Forms.DragEventArgs> are in screen coordinates, not client coordinates.</span></span> <span data-ttu-id="6dc4f-1064">次のビジュアルC#コード行は、プロパティをクライアント <xref:System.Drawing.Point>に変換します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1064">The following line of Visual C# code converts the properties to a client <xref:System.Drawing.Point>.</span></span>  
  
```  
Point clientPoint = targetControl.PointToClient(new Point(de.X, de.Y));  
```  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-1065">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]よりも前のバージョンでは、Windows フォームに <xref:System.Windows.Forms.Control.DragEnter> および <xref:System.Windows.Forms.Control.DragDrop> イベントを含む <xref:System.Windows.Forms.UserControl> を配置し、デザイン時に <xref:System.Windows.Forms.UserControl> にドラッグアンドドロップすると、`DropDrop` イベントと `DropEnter` イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1065">In versions earlier than [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], if you put a <xref:System.Windows.Forms.UserControl> with <xref:System.Windows.Forms.Control.DragEnter> and <xref:System.Windows.Forms.Control.DragDrop> events on a Windows Form and drag and drop something onto the <xref:System.Windows.Forms.UserControl> at design time, the `DropDrop` and `DropEnter` events are raised.</span></span> <span data-ttu-id="6dc4f-1066">ただし、ソリューションを閉じて再度開くと、<xref:System.Windows.Forms.Control.DragEnter> イベントと <xref:System.Windows.Forms.Control.DragDrop> イベントは再び発生しません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1066">However, when you close and reopen the solution, the <xref:System.Windows.Forms.Control.DragEnter> and <xref:System.Windows.Forms.Control.DragDrop> events are not raised again.</span></span>  
  
 <span data-ttu-id="6dc4f-1067">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1067">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1068">このコード抜粋では、<xref:System.Windows.Forms.Control.DragDrop> イベントの使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1068">This code excerpt demonstrates using the <xref:System.Windows.Forms.Control.DragDrop> event.</span></span> <span data-ttu-id="6dc4f-1069">完全なコード例については、<xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッドを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1069">See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#5)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#5)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.DragEnter" />
        <altmember cref="E:System.Windows.Forms.Control.DragLeave" />
        <altmember cref="E:System.Windows.Forms.Control.DragOver" />
        <altmember cref="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)" />
        <altmember cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DragEventHandler DragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DragEventHandler DragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DragEventHandler ^ DragEnter;" />
      <MemberSignature Language="F#" Value="member this.DragEnter : System.Windows.Forms.DragEventHandler " Usage="member this.DragEnter : System.Windows.Forms.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1070">オブジェクトがコントロールの境界内にドラッグされると発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1070">Occurs when an object is dragged into the control's bounds.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1071"><xref:System.Windows.Forms.Control.DragEnter> イベントは、ユーザーがドラッグアンドドロップ操作中にマウスカーソルをコントロールの上にドラッグしたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1071">The <xref:System.Windows.Forms.Control.DragEnter> event is raised when the user first drags the mouse cursor over the control during a drag-and-drop operation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-1072">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]よりも前のバージョンでは、Windows フォームに <xref:System.Windows.Forms.Control.DragEnter> および <xref:System.Windows.Forms.Control.DragDrop> イベントを含む <xref:System.Windows.Forms.UserControl> を配置し、デザイン時に <xref:System.Windows.Forms.UserControl> にドラッグアンドドロップすると、`DropDrop` イベントと `DropEnter` イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1072">In versions earlier than [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], if you put a <xref:System.Windows.Forms.UserControl> with <xref:System.Windows.Forms.Control.DragEnter> and <xref:System.Windows.Forms.Control.DragDrop> events on a Windows Form and drag and drop something onto the <xref:System.Windows.Forms.UserControl> at design time, the `DropDrop` and `DropEnter` events are raised.</span></span> <span data-ttu-id="6dc4f-1073">ただし、ソリューションを閉じて再度開くと、<xref:System.Windows.Forms.Control.DragEnter> イベントと <xref:System.Windows.Forms.Control.DragDrop> イベントは再び発生しません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1073">However, when you close and reopen the solution, the <xref:System.Windows.Forms.Control.DragEnter> and <xref:System.Windows.Forms.Control.DragDrop> events are not raised again.</span></span>  
  
 <span data-ttu-id="6dc4f-1074">ドラッグ アンド ドロップ操作関連のイベントがどのように、いつ発生するかについて次に示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1074">The following describes how and when events related to drag-and-drop operations are raised.</span></span>  
  
 <span data-ttu-id="6dc4f-1075"><xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッドは、現在のカーソル位置の下にあるコントロールを決定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1075">The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method determines the control under the current cursor location.</span></span> <span data-ttu-id="6dc4f-1076">次に、コントロールが有効なドロップ先であるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1076">It then checks to see if the control is a valid drop target.</span></span>  
  
 <span data-ttu-id="6dc4f-1077">コントロールが有効なドロップ先である場合、ドラッグアンドドロップ効果が指定された状態で <xref:System.Windows.Forms.Control.GiveFeedback> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1077">If the control is a valid drop target, the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the drag-and-drop effect specified.</span></span> <span data-ttu-id="6dc4f-1078">ドラッグ アンド ドロップ効果の一覧については、<xref:System.Windows.Forms.DragDropEffects> 列挙体を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1078">For a list of drag-and-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
 <span data-ttu-id="6dc4f-1079">マウス カーソルの位置、キーボードの状態、およびマウス ボタンの状態の変更が監視されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1079">Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.</span></span>  
  
-   <span data-ttu-id="6dc4f-1080">ユーザーがウィンドウの外に移動した場合、<xref:System.Windows.Forms.Control.DragLeave> イベントが生成されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1080">If the user moves out of a window, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
-   <span data-ttu-id="6dc4f-1081">マウスが別のコントロールに移動した場合は、そのコントロールの <xref:System.Windows.Forms.Control.DragEnter> が生成されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1081">If the mouse enters another control, the <xref:System.Windows.Forms.Control.DragEnter> for that control is raised.</span></span>  
  
-   <span data-ttu-id="6dc4f-1082">マウスが移動しても同じコントロール内の場合は、<xref:System.Windows.Forms.Control.DragOver> イベントが生成されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1082">If the mouse moves but stays within the same control, the <xref:System.Windows.Forms.Control.DragOver> event is raised.</span></span>  
  
 <span data-ttu-id="6dc4f-1083">キーボードまたはマウスボタンの状態が変化した場合は、<xref:System.Windows.Forms.Control.QueryContinueDrag> イベントが発生し、ドラッグを続行するか、データを削除するか、またはイベントの <xref:System.Windows.Forms.QueryContinueDragEventArgs>の <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> プロパティの値に基づいて操作をキャンセルするかが決定されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1083">If there is a change in the keyboard or mouse button state, the <xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event's <xref:System.Windows.Forms.QueryContinueDragEventArgs>.</span></span>  
  
-   <span data-ttu-id="6dc4f-1084"><xref:System.Windows.Forms.DragAction> の値が `Continue`場合は、操作を続行するために <xref:System.Windows.Forms.Control.DragOver> イベントが発生し、適切な視覚的フィードバックを設定できるように、新しい効果を使用して <xref:System.Windows.Forms.Control.GiveFeedback> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1084">If the value of <xref:System.Windows.Forms.DragAction> is `Continue`, the <xref:System.Windows.Forms.Control.DragOver> event is raised to continue the operation and the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the new effect so appropriate visual feedback can be set.</span></span> <span data-ttu-id="6dc4f-1085">有効なドロップ効果の一覧については、<xref:System.Windows.Forms.DragDropEffects> 列挙体を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1085">For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6dc4f-1086"><xref:System.Windows.Forms.Control.DragOver> イベントと <xref:System.Windows.Forms.Control.GiveFeedback> イベントがペアになっているため、マウスがドロップ先の上に移動すると、マウスの位置に関する最新のフィードバックがユーザーに与えられます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1086">The <xref:System.Windows.Forms.Control.DragOver> and <xref:System.Windows.Forms.Control.GiveFeedback> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.</span></span>  
  
-   <span data-ttu-id="6dc4f-1087"><xref:System.Windows.Forms.DragAction> の値が `Drop`場合は、ドロップ効果の値がソースに返されるため、ソースアプリケーションはソースデータに対して適切な操作を実行できます。たとえば、操作が移動だった場合は、データを切り取ります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1087">If the value of <xref:System.Windows.Forms.DragAction> is `Drop`, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</span></span>  
  
-   <span data-ttu-id="6dc4f-1088"><xref:System.Windows.Forms.DragAction> の値が `Cancel`場合、<xref:System.Windows.Forms.Control.DragLeave> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1088">If the value of <xref:System.Windows.Forms.DragAction> is `Cancel`, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6dc4f-1089"><xref:System.Windows.Forms.DragEventArgs> の <xref:System.Windows.Forms.DragEventArgs.X%2A> と <xref:System.Windows.Forms.DragEventArgs.Y%2A> のプロパティは、クライアント座標ではなく画面座標です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1089">The <xref:System.Windows.Forms.DragEventArgs.X%2A> and <xref:System.Windows.Forms.DragEventArgs.Y%2A> properties of the <xref:System.Windows.Forms.DragEventArgs> are in screen coordinates, not client coordinates.</span></span> <span data-ttu-id="6dc4f-1090">次のビジュアルC#コード行は、プロパティをクライアント <xref:System.Drawing.Point>に変換します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1090">The following line of Visual C# code converts the properties to a client <xref:System.Drawing.Point>.</span></span>  
  
    ```  
    Point clientPoint = targetControl.PointToClient(new Point(de.X, de.Y));  
    ```  
  
 <span data-ttu-id="6dc4f-1091">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1091">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1092">次のコード例は、2つの <xref:System.Windows.Forms.ListBox> コントロール間のドラッグアンドドロップ操作を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1092">The following code example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls.</span></span> <span data-ttu-id="6dc4f-1093">この例では、ドラッグ操作の開始時に <xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1093">The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts.</span></span> <span data-ttu-id="6dc4f-1094">マウスが <xref:System.Windows.Forms.Control.MouseDown> イベント中にマウスの位置から <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> を超えて移動した場合、ドラッグ操作が開始されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1094">The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event.</span></span> <span data-ttu-id="6dc4f-1095"><xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> メソッドは、`MouseDown` イベント中にドラッグする項目のインデックスを決定するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1095">The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.</span></span>  
  
 <span data-ttu-id="6dc4f-1096">この例では、ドラッグアンドドロップ操作にカスタムカーソルを使用する方法も示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1096">The example also demonstrates using custom cursors for the drag-and-drop operation.</span></span> <span data-ttu-id="6dc4f-1097">この例では、2つのカーソルファイル (`3dwarro.cur` と `3dwno.cur`) がアプリケーションディレクトリに存在する必要があります。これには、それぞれカスタムドラッグアンドドロップカーソルを使用します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1097">The example requires that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively.</span></span> <span data-ttu-id="6dc4f-1098">`UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> がオンになっている場合は、カスタムカーソルが使用されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1098">The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked.</span></span> <span data-ttu-id="6dc4f-1099">カスタムカーソルは <xref:System.Windows.Forms.Control.GiveFeedback> イベントハンドラーで設定されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1099">The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.</span></span>  
  
 <span data-ttu-id="6dc4f-1100">キーボードの状態は、右 `ListBox`の <xref:System.Windows.Forms.Control.DragOver> イベントハンドラーで評価され、SHIFT、CTRL、ALT、CTRL + ALT の各キーの状態に基づいてドラッグ操作がどのように行われるかを決定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1100">The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys.</span></span> <span data-ttu-id="6dc4f-1101">ドロップが発生する `ListBox` 内の場所は、`DragOver` イベント中にも決定されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1101">The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event.</span></span> <span data-ttu-id="6dc4f-1102">削除するデータが `String`でない場合、<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> は <xref:System.Windows.Forms.DragDropEffects>で `None` に設定されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1102">If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> is set to `None` in <xref:System.Windows.Forms.DragDropEffects>.</span></span> <span data-ttu-id="6dc4f-1103">最後に、ドロップの状態が `DropLocationLabel`<xref:System.Windows.Forms.Label>に表示されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1103">Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.</span></span>  
  
 <span data-ttu-id="6dc4f-1104">右側の `ListBox` にドロップするデータは、<xref:System.Windows.Forms.Control.DragDrop> イベントハンドラーで決定され、`ListBox`内の適切な場所に `String` 値が追加されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1104">The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`.</span></span> <span data-ttu-id="6dc4f-1105">ドラッグ操作がフォームの境界の外に移動した場合、<xref:System.Windows.Forms.Control.QueryContinueDrag> イベントハンドラーでドラッグアンドドロップ操作が取り消されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1105">If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.</span></span>  
  
 <span data-ttu-id="6dc4f-1106">このコード抜粋では、<xref:System.Windows.Forms.Control.DragEnter> イベントの使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1106">This code excerpt demonstrates using the <xref:System.Windows.Forms.Control.DragEnter> event.</span></span> <span data-ttu-id="6dc4f-1107">完全なコード例については、<xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッドを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1107">See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#7)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#7)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event EventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragLeave As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DragLeave;" />
      <MemberSignature Language="F#" Value="member this.DragLeave : EventHandler " Usage="member this.DragLeave : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1108">オブジェクトがコントロールの境界外にドラッグされたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1108">Occurs when an object is dragged out of the control's bounds.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1109"><xref:System.Windows.Forms.Control.DragLeave> イベントは、ユーザーがカーソルをコントロールの外にドラッグしたとき、またはユーザーが現在のドラッグアンドドロップ操作をキャンセルしたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1109">The <xref:System.Windows.Forms.Control.DragLeave> event is raised when the user drags the cursor out of the control or the user cancels the current drag-and-drop operation.</span></span>  
  
 <span data-ttu-id="6dc4f-1110">ドラッグ アンド ドロップ操作関連のイベントがどのように、いつ発生するかについて次に示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1110">The following describes how and when events related to drag-and-drop operations are raised.</span></span>  
  
 <span data-ttu-id="6dc4f-1111"><xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッドは、現在のカーソル位置の下にあるコントロールを決定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1111">The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method determines the control under the current cursor location.</span></span> <span data-ttu-id="6dc4f-1112">次に、コントロールが有効なドロップ先であるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1112">It then checks to see if the control is a valid drop target.</span></span>  
  
 <span data-ttu-id="6dc4f-1113">コントロールが有効なドロップ先である場合、ドラッグアンドドロップ効果が指定された状態で <xref:System.Windows.Forms.Control.GiveFeedback> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1113">If the control is a valid drop target, the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the drag-and-drop effect specified.</span></span> <span data-ttu-id="6dc4f-1114">ドラッグ アンド ドロップ効果の一覧については、<xref:System.Windows.Forms.DragDropEffects> 列挙体を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1114">For a list of drag-and-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
 <span data-ttu-id="6dc4f-1115">マウス カーソルの位置、キーボードの状態、およびマウス ボタンの状態の変更が監視されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1115">Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.</span></span>  
  
-   <span data-ttu-id="6dc4f-1116">ユーザーがウィンドウの外に移動した場合、<xref:System.Windows.Forms.Control.DragLeave> イベントが生成されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1116">If the user moves out of a window, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
-   <span data-ttu-id="6dc4f-1117">マウスが別のコントロールに移動した場合は、そのコントロールの <xref:System.Windows.Forms.Control.DragEnter> が生成されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1117">If the mouse enters another control, the <xref:System.Windows.Forms.Control.DragEnter> for that control is raised.</span></span>  
  
-   <span data-ttu-id="6dc4f-1118">マウスが移動しても同じコントロール内の場合は、<xref:System.Windows.Forms.Control.DragOver> イベントが生成されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1118">If the mouse moves but stays within the same control, the <xref:System.Windows.Forms.Control.DragOver> event is raised.</span></span>  
  
 <span data-ttu-id="6dc4f-1119">キーボードまたはマウスボタンの状態が変化した場合は、<xref:System.Windows.Forms.Control.QueryContinueDrag> イベントが発生し、ドラッグを続行するか、データを削除するか、またはイベントの <xref:System.Windows.Forms.QueryContinueDragEventArgs>の <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> プロパティの値に基づいて操作をキャンセルするかが決定されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1119">If there is a change in the keyboard or mouse button state, the <xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event's <xref:System.Windows.Forms.QueryContinueDragEventArgs>.</span></span>  
  
-   <span data-ttu-id="6dc4f-1120"><xref:System.Windows.Forms.DragAction> の値が `Continue`場合は、操作を続行するために <xref:System.Windows.Forms.Control.DragOver> イベントが発生し、適切な視覚的フィードバックを設定できるように、新しい効果を使用して <xref:System.Windows.Forms.Control.GiveFeedback> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1120">If the value of <xref:System.Windows.Forms.DragAction> is `Continue`, the <xref:System.Windows.Forms.Control.DragOver> event is raised to continue the operation and the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the new effect so appropriate visual feedback can be set.</span></span> <span data-ttu-id="6dc4f-1121">有効なドロップ効果の一覧については、<xref:System.Windows.Forms.DragDropEffects> 列挙体を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1121">For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6dc4f-1122"><xref:System.Windows.Forms.Control.DragOver> イベントと <xref:System.Windows.Forms.Control.GiveFeedback> イベントがペアになっているため、マウスがドロップ先の上に移動すると、マウスの位置に関する最新のフィードバックがユーザーに与えられます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1122">The <xref:System.Windows.Forms.Control.DragOver> and <xref:System.Windows.Forms.Control.GiveFeedback> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.</span></span>  
  
-   <span data-ttu-id="6dc4f-1123"><xref:System.Windows.Forms.DragAction> の値が `Drop`場合は、ドロップ効果の値がソースに返されるため、ソースアプリケーションはソースデータに対して適切な操作を実行できます。たとえば、操作が移動だった場合は、データを切り取ります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1123">If the value of <xref:System.Windows.Forms.DragAction> is `Drop`, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</span></span>  
  
-   <span data-ttu-id="6dc4f-1124"><xref:System.Windows.Forms.DragAction> の値が `Cancel`場合、<xref:System.Windows.Forms.Control.DragLeave> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1124">If the value of <xref:System.Windows.Forms.DragAction> is `Cancel`, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
 <span data-ttu-id="6dc4f-1125">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1125">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1126">次のコード例は、2つの <xref:System.Windows.Forms.ListBox> コントロール間のドラッグアンドドロップ操作を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1126">The following code example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls.</span></span> <span data-ttu-id="6dc4f-1127">この例では、ドラッグ操作の開始時に <xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1127">The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts.</span></span> <span data-ttu-id="6dc4f-1128">マウスが <xref:System.Windows.Forms.Control.MouseDown> イベント中にマウスの位置から <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> を超えて移動した場合、ドラッグ操作が開始されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1128">The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event.</span></span> <span data-ttu-id="6dc4f-1129"><xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> メソッドは、`MouseDown` イベント中にドラッグする項目のインデックスを決定するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1129">The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.</span></span>  
  
 <span data-ttu-id="6dc4f-1130">この例では、ドラッグアンドドロップ操作にカスタムカーソルを使用する方法も示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1130">The example also demonstrates using custom cursors for the drag-and-drop operation.</span></span> <span data-ttu-id="6dc4f-1131">この例では、2つのカーソルファイル (`3dwarro.cur` と `3dwno.cur`) がアプリケーションディレクトリに存在する必要があります。これには、それぞれカスタムドラッグアンドドロップカーソルを使用します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1131">The example requires that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively.</span></span> <span data-ttu-id="6dc4f-1132">`UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> がオンになっている場合は、カスタムカーソルが使用されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1132">The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked.</span></span> <span data-ttu-id="6dc4f-1133">カスタムカーソルは <xref:System.Windows.Forms.Control.GiveFeedback> イベントハンドラーで設定されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1133">The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.</span></span>  
  
 <span data-ttu-id="6dc4f-1134">キーボードの状態は、右 `ListBox`の <xref:System.Windows.Forms.Control.DragOver> イベントハンドラーで評価され、SHIFT、CTRL、ALT、CTRL + ALT の各キーの状態に基づいてドラッグ操作がどのように行われるかを決定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1134">The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys.</span></span> <span data-ttu-id="6dc4f-1135">ドロップが発生する `ListBox` 内の場所は、`DragOver` イベント中にも決定されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1135">The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event.</span></span> <span data-ttu-id="6dc4f-1136">削除するデータが `String`でない場合、<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> は <xref:System.Windows.Forms.DragDropEffects>で `None` に設定されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1136">If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> is set to `None` in <xref:System.Windows.Forms.DragDropEffects>.</span></span> <span data-ttu-id="6dc4f-1137">最後に、ドロップの状態が `DropLocationLabel`<xref:System.Windows.Forms.Label>に表示されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1137">Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.</span></span>  
  
 <span data-ttu-id="6dc4f-1138">右側の `ListBox` にドロップするデータは、<xref:System.Windows.Forms.Control.DragDrop> イベントハンドラーで決定され、`ListBox`内の適切な場所に `String` 値が追加されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1138">The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`.</span></span> <span data-ttu-id="6dc4f-1139">ドラッグ操作がフォームの境界の外に移動した場合、<xref:System.Windows.Forms.Control.QueryContinueDrag> イベントハンドラーでドラッグアンドドロップ操作が取り消されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1139">If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.</span></span>  
  
 <span data-ttu-id="6dc4f-1140">このコード抜粋では、<xref:System.Windows.Forms.Control.DragLeave> イベントの使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1140">This code excerpt demonstrates using the <xref:System.Windows.Forms.Control.DragLeave> event.</span></span> <span data-ttu-id="6dc4f-1141">完全なコード例については、<xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッドを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1141">See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#8)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#8)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DragEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DragEventHandler DragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DragEventHandler ^ DragOver;" />
      <MemberSignature Language="F#" Value="member this.DragOver : System.Windows.Forms.DragEventHandler " Usage="member this.DragOver : System.Windows.Forms.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1142">オブジェクトがコントロールの境界を越えてドラッグされると発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1142">Occurs when an object is dragged over the control's bounds.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1143"><xref:System.Windows.Forms.Control.DragOver> イベントは、ドラッグアンドドロップ操作中にマウスカーソルがコントロールの境界内を移動すると発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1143">The <xref:System.Windows.Forms.Control.DragOver> event is raised when the mouse cursor moves within the bounds of the control during a drag-and-drop operation.</span></span>  
  
 <span data-ttu-id="6dc4f-1144">ドラッグ アンド ドロップ操作関連のイベントがどのように、いつ発生するかについて次に示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1144">The following describes how and when events related to drag-and-drop operations are raised.</span></span>  
  
 <span data-ttu-id="6dc4f-1145"><xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッドは、現在のカーソル位置の下にあるコントロールを決定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1145">The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method determines the control under the current cursor location.</span></span> <span data-ttu-id="6dc4f-1146">次に、コントロールが有効なドロップ先であるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1146">It then checks to see if the control is a valid drop target.</span></span>  
  
 <span data-ttu-id="6dc4f-1147">コントロールが有効なドロップ先である場合、ドラッグアンドドロップ効果が指定された状態で <xref:System.Windows.Forms.Control.GiveFeedback> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1147">If the control is a valid drop target, the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the drag-and-drop effect specified.</span></span> <span data-ttu-id="6dc4f-1148">ドラッグ アンド ドロップ効果の一覧については、<xref:System.Windows.Forms.DragDropEffects> 列挙体を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1148">For a list of drag-and-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
 <span data-ttu-id="6dc4f-1149">マウス カーソルの位置、キーボードの状態、およびマウス ボタンの状態の変更が監視されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1149">Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.</span></span>  
  
-   <span data-ttu-id="6dc4f-1150">ユーザーがウィンドウの外に移動した場合、<xref:System.Windows.Forms.Control.DragLeave> イベントが生成されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1150">If the user moves out of a window, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
-   <span data-ttu-id="6dc4f-1151">マウスが別のコントロールに移動した場合は、そのコントロールの <xref:System.Windows.Forms.Control.DragEnter> が生成されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1151">If the mouse enters another control, the <xref:System.Windows.Forms.Control.DragEnter> for that control is raised.</span></span>  
  
-   <span data-ttu-id="6dc4f-1152">マウスが移動しても同じコントロール内の場合は、<xref:System.Windows.Forms.Control.DragOver> イベントが生成されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1152">If the mouse moves but stays within the same control, the <xref:System.Windows.Forms.Control.DragOver> event is raised.</span></span>  
  
 <span data-ttu-id="6dc4f-1153">キーボードまたはマウスボタンの状態が変化した場合は、<xref:System.Windows.Forms.Control.QueryContinueDrag> イベントが発生し、ドラッグを続行するか、データを削除するか、またはイベントの <xref:System.Windows.Forms.QueryContinueDragEventArgs>の <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> プロパティの値に基づいて操作をキャンセルするかが決定されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1153">If there is a change in the keyboard or mouse button state, the <xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event's <xref:System.Windows.Forms.QueryContinueDragEventArgs>.</span></span>  
  
-   <span data-ttu-id="6dc4f-1154"><xref:System.Windows.Forms.DragAction> 値の値が `Continue`場合は、操作を続行するために <xref:System.Windows.Forms.Control.DragOver> イベントが発生し、適切な視覚的フィードバックを設定できるように、新しい効果を使用して <xref:System.Windows.Forms.Control.GiveFeedback> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1154">If the value of <xref:System.Windows.Forms.DragAction> value is `Continue`, the <xref:System.Windows.Forms.Control.DragOver> event is raised to continue the operation and the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the new effect so appropriate visual feedback can be set.</span></span> <span data-ttu-id="6dc4f-1155">有効なドロップ効果の一覧については、<xref:System.Windows.Forms.DragDropEffects> 列挙体を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1155">For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6dc4f-1156"><xref:System.Windows.Forms.Control.DragOver> イベントと <xref:System.Windows.Forms.Control.GiveFeedback> イベントがペアになっているため、マウスがドロップ先の上に移動すると、マウスの位置に関する最新のフィードバックがユーザーに与えられます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1156">The <xref:System.Windows.Forms.Control.DragOver> and <xref:System.Windows.Forms.Control.GiveFeedback> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.</span></span>  
  
-   <span data-ttu-id="6dc4f-1157"><xref:System.Windows.Forms.DragAction> の値が `Drop`場合は、ドロップ効果の値がソースに返されるため、ソースアプリケーションはソースデータに対して適切な操作を実行できます。たとえば、操作が移動だった場合は、データを切り取ります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1157">If the value of <xref:System.Windows.Forms.DragAction> is `Drop`, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</span></span>  
  
-   <span data-ttu-id="6dc4f-1158"><xref:System.Windows.Forms.DragAction> の値が `Cancel`場合、<xref:System.Windows.Forms.Control.DragLeave> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1158">If the value of <xref:System.Windows.Forms.DragAction> is `Cancel`, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6dc4f-1159"><xref:System.Windows.Forms.DragEventArgs> の <xref:System.Windows.Forms.DragEventArgs.X%2A> と <xref:System.Windows.Forms.DragEventArgs.Y%2A> のプロパティは、クライアント座標ではなく画面座標です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1159">The <xref:System.Windows.Forms.DragEventArgs.X%2A> and <xref:System.Windows.Forms.DragEventArgs.Y%2A> properties of the <xref:System.Windows.Forms.DragEventArgs> are in screen coordinates, not client coordinates.</span></span> <span data-ttu-id="6dc4f-1160">次のC#コード行は、プロパティをクライアント <xref:System.Drawing.Point>に変換します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1160">The following line of C# code converts the properties to a client <xref:System.Drawing.Point>:</span></span>  
    >   
    >  <span data-ttu-id="6dc4f-1161">Point clientPoint = targetControl.PointToClient(new Point(de.X, de.Y));</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1161">Point clientPoint = targetControl.PointToClient(new Point(de.X, de.Y));</span></span>  
  
 <span data-ttu-id="6dc4f-1162">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1162">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1163">次のコード例は、2つの <xref:System.Windows.Forms.ListBox> コントロール間のドラッグアンドドロップ操作を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1163">The following code example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls.</span></span> <span data-ttu-id="6dc4f-1164">この例では、ドラッグ操作の開始時に <xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1164">The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts.</span></span> <span data-ttu-id="6dc4f-1165">マウスが <xref:System.Windows.Forms.Control.MouseDown> イベント中にマウスの位置から <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> を超えて移動した場合、ドラッグ操作が開始されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1165">The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event.</span></span> <span data-ttu-id="6dc4f-1166"><xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> メソッドは、`MouseDown` イベント中にドラッグする項目のインデックスを決定するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1166">The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.</span></span>  
  
 <span data-ttu-id="6dc4f-1167">この例では、ドラッグアンドドロップ操作にカスタムカーソルを使用する方法も示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1167">The example also demonstrates using custom cursors for the drag-and-drop operation.</span></span> <span data-ttu-id="6dc4f-1168">この例では、2つのカーソルファイル (`3dwarro.cur` と `3dwno.cur`) がアプリケーションディレクトリに存在する必要があります。これには、それぞれカスタムドラッグアンドドロップカーソルを使用します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1168">The example requires that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively.</span></span> <span data-ttu-id="6dc4f-1169">`UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> がオンになっている場合は、カスタムカーソルが使用されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1169">The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked.</span></span> <span data-ttu-id="6dc4f-1170">カスタムカーソルは <xref:System.Windows.Forms.Control.GiveFeedback> イベントハンドラーで設定されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1170">The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.</span></span>  
  
 <span data-ttu-id="6dc4f-1171">キーボードの状態は、右 `ListBox`の <xref:System.Windows.Forms.Control.DragOver> イベントハンドラーで評価され、SHIFT、CTRL、ALT、CTRL + ALT の各キーの状態に基づいてドラッグ操作がどのように行われるかを決定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1171">The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys.</span></span> <span data-ttu-id="6dc4f-1172">ドロップが発生する `ListBox` 内の場所は、`DragOver` イベント中にも決定されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1172">The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event.</span></span> <span data-ttu-id="6dc4f-1173">削除するデータが `String`でない場合、<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> は <xref:System.Windows.Forms.DragDropEffects>で `None` に設定されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1173">If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> is set to `None` in <xref:System.Windows.Forms.DragDropEffects>.</span></span> <span data-ttu-id="6dc4f-1174">最後に、ドロップの状態が `DropLocationLabel`<xref:System.Windows.Forms.Label>に表示されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1174">Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.</span></span>  
  
 <span data-ttu-id="6dc4f-1175">右側の `ListBox` にドロップするデータは、<xref:System.Windows.Forms.Control.DragDrop> イベントハンドラーで決定され、`ListBox`内の適切な場所に `String` 値が追加されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1175">The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`.</span></span> <span data-ttu-id="6dc4f-1176">ドラッグ操作がフォームの境界の外に移動した場合、<xref:System.Windows.Forms.Control.QueryContinueDrag> イベントハンドラーでドラッグアンドドロップ操作が取り消されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1176">If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.</span></span>  
  
 <span data-ttu-id="6dc4f-1177">このコード抜粋では、<xref:System.Windows.Forms.Control.DragOver> イベントの使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1177">This code excerpt demonstrates using the <xref:System.Windows.Forms.Control.DragOver> event.</span></span> <span data-ttu-id="6dc4f-1178">完全なコード例については、<xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッドを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1178">See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DrawToBitmap">
      <MemberSignature Language="C#" Value="public void DrawToBitmap (System.Drawing.Bitmap bitmap, System.Drawing.Rectangle targetBounds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawToBitmap(class System.Drawing.Bitmap bitmap, valuetype System.Drawing.Rectangle targetBounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.DrawToBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DrawToBitmap (bitmap As Bitmap, targetBounds As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawToBitmap(System::Drawing::Bitmap ^ bitmap, System::Drawing::Rectangle targetBounds);" />
      <MemberSignature Language="F#" Value="member this.DrawToBitmap : System.Drawing.Bitmap * System.Drawing.Rectangle -&gt; unit" Usage="control.DrawToBitmap (bitmap, targetBounds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitmap" Type="System.Drawing.Bitmap" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="targetBounds" Type="System.Drawing.Rectangle" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="bitmap"><span data-ttu-id="6dc4f-1179">描画されるビットマップ。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1179">The bitmap to be drawn to.</span></span></param>
        <param name="targetBounds"><span data-ttu-id="6dc4f-1180">コントロールが描画される範囲。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1180">The bounds within which the control is rendered.</span></span></param>
        <summary><span data-ttu-id="6dc4f-1181">指定したビットマップへのレンダリングをサポートします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1181">Supports rendering to the specified bitmap.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1182"><xref:System.Windows.Forms.Control.DrawToBitmap%2A> メソッドは、ActiveX コントロールではサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1182">The <xref:System.Windows.Forms.Control.DrawToBitmap%2A> method is not supported for ActiveX controls.</span></span> <span data-ttu-id="6dc4f-1183">必要に応じて、<xref:System.Windows.Forms.Control.OnPrint%2A> イベントをオーバーライドし、カスタムの印刷ロジックを提供できます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1183">You can override the <xref:System.Windows.Forms.Control.OnPrint%2A> event and provide custom printing logic if required.</span></span>  
  
 <span data-ttu-id="6dc4f-1184"><xref:System.Windows.Forms.Control.DrawToBitmap%2A> メソッドには、次の制限があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1184">The <xref:System.Windows.Forms.Control.DrawToBitmap%2A> method has the following limitations:</span></span>  
  
-   <span data-ttu-id="6dc4f-1185">大きなビットマップの場合、<xref:System.ArgumentException> がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1185">An <xref:System.ArgumentException> might be thrown for large bitmaps.</span></span> <span data-ttu-id="6dc4f-1186">許容される最大サイズはコンピューターによって異なります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1186">The maximum allowable size varies by machine.</span></span>  
  
-   <span data-ttu-id="6dc4f-1187"><xref:System.Windows.Forms.Control.DrawToBitmap%2A> は、Windows XP Tablet PC Edition 2005 オペレーティングシステムの `Ink` コントロールをサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1187"><xref:System.Windows.Forms.Control.DrawToBitmap%2A> does not support the `Ink` controls for the Windows XP Tablet PC Edition 2005 operating system.</span></span>  
  
-   <span data-ttu-id="6dc4f-1188"><xref:System.Windows.Forms.TextBox> の <xref:System.Windows.Forms.Control.Visible%2A> プロパティが `false`に設定されている場合、<xref:System.Windows.Forms.Control.DrawToBitmap%2A> は子 <xref:System.Windows.Forms.TextBox> を描画しません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1188"><xref:System.Windows.Forms.Control.DrawToBitmap%2A> does not draw a child <xref:System.Windows.Forms.TextBox> if the <xref:System.Windows.Forms.Control.Visible%2A> property of the <xref:System.Windows.Forms.TextBox> is set to `false`.</span></span>  
  
-   <span data-ttu-id="6dc4f-1189">コンテナー内のコントロールは逆の順序でレンダリングされます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1189">Controls inside containers are rendered in reverse order.</span></span>  
  
-   <span data-ttu-id="6dc4f-1190"><xref:System.Windows.Forms.RichTextBox>に対して <xref:System.Windows.Forms.Control.DrawToBitmap%2A> が完全に機能していません。ビットマップの境界線だけが描画されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1190"><xref:System.Windows.Forms.Control.DrawToBitmap%2A> is not fully functional for the <xref:System.Windows.Forms.RichTextBox>; only the border of a bitmap is drawn.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnPrint(System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Windows.Forms.Control.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-514)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1191">コントロールがユーザーとの対話に応答できるかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1191">Gets or sets a value indicating whether the control can respond to user interaction.</span></span></summary>
        <value><span data-ttu-id="6dc4f-1192">コントロールがユーザーとの対話に応答できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1192"><see langword="true" /> if the control can respond to user interaction; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6dc4f-1193">既定では、 <see langword="true" />です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1193">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1194"><xref:System.Windows.Forms.Control.Enabled%2A> プロパティを使用すると、実行時にコントロールを有効または無効にすることができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1194">With the <xref:System.Windows.Forms.Control.Enabled%2A> property, you can enable or disable controls at run time.</span></span> <span data-ttu-id="6dc4f-1195">たとえば、アプリケーションの現在の状態には適用されないコントロールを無効にすることができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1195">For example, you can disable controls that do not apply to the current state of the application.</span></span> <span data-ttu-id="6dc4f-1196">コントロールを無効にして使用を制限することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1196">You can also disable a control to restrict its use.</span></span> <span data-ttu-id="6dc4f-1197">たとえば、ボタンを無効にして、ユーザーがクリックできないようにすることができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1197">For example, a button can be disabled to prevent the user from clicking it.</span></span> <span data-ttu-id="6dc4f-1198">コントロールが無効になっている場合は、選択できません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1198">If a control is disabled, it cannot be selected.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6dc4f-1199"><xref:System.Windows.Forms.Control.Enabled%2A> プロパティを `false` に設定しても、アプリケーションのコントロールボックスを無効にしたり、アプリケーションウィンドウがフォーカスを受け取らないようにしたりすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1199">Setting the <xref:System.Windows.Forms.Control.Enabled%2A> property to `false` does not disable the application's control box or prevent the application window from receiving the focus.</span></span>  
  
 <span data-ttu-id="6dc4f-1200">コンテナーコントロールの enabled プロパティが `false`に設定されている場合、それに含まれるすべてのコントロールも無効になります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1200">When a container control has its enabled property set to `false`, all its contained controls are disabled, as well.</span></span> <span data-ttu-id="6dc4f-1201">たとえば、ユーザーが無効な <xref:System.Windows.Forms.GroupBox> コントロールに含まれるコントロールのいずれかをクリックすると、イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1201">For example, if the user clicks on any of the controls contained in a disabled <xref:System.Windows.Forms.GroupBox> control, no events are raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-1202">スクロール可能なコントロールが無効になっている場合は、スクロールバーも無効になります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1202">When a scrollable control is disabled, the scroll bars are also disabled.</span></span> <span data-ttu-id="6dc4f-1203">たとえば、無効な複数行テキストボックスをスクロールして、テキストのすべての行を表示することはできません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1203">For example, a disabled multiline textbox is unable to scroll to display all the lines of text.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1204">次のコード例では、<xref:System.Windows.Forms.GroupBox> を作成し、その共通プロパティのいくつかを設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1204">The following code example creates a <xref:System.Windows.Forms.GroupBox> and sets some of its common properties.</span></span> <span data-ttu-id="6dc4f-1205">この例では、<xref:System.Windows.Forms.TextBox> を作成し、その <xref:System.Windows.Forms.Control.Location%2A> をグループボックス内に設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1205">The example creates a <xref:System.Windows.Forms.TextBox> and sets its <xref:System.Windows.Forms.Control.Location%2A> within the group box.</span></span> <span data-ttu-id="6dc4f-1206">次に、グループボックスの <xref:System.Windows.Forms.Control.Text%2A> プロパティを設定し、グループボックスをフォームの上部にドッキングします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1206">Next, it sets the <xref:System.Windows.Forms.Control.Text%2A> property of the group box, and docks the group box to the top of the form.</span></span> <span data-ttu-id="6dc4f-1207">最後に、[<xref:System.Windows.Forms.Control.Enabled%2A>] プロパティを [`false`] に設定して、グループボックスを無効にします。これにより、[グループ] ボックスに含まれるすべてのコントロールが無効になります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1207">Lastly, it disables the group box by setting the <xref:System.Windows.Forms.Control.Enabled%2A> property to `false`, which causes all controls contained within the group box to be disabled.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#2)]
 [!code-csharp[Windows.Forms.Control Properties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#2)]
 [!code-vb[Windows.Forms.Control Properties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ScrollableControl" />
      </Docs>
    </Member>
    <Member MemberName="EnabledChanged">
      <MemberSignature Language="C#" Value="public event EventHandler EnabledChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler EnabledChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.EnabledChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event EnabledChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ EnabledChanged;" />
      <MemberSignature Language="F#" Value="member this.EnabledChanged : EventHandler " Usage="member this.EnabledChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1208"><see cref="P:System.Windows.Forms.Control.Enabled" /> プロパティ値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1208">Occurs when the <see cref="P:System.Windows.Forms.Control.Enabled" /> property value has changed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1209">このイベントは、プログラムによる変更またはユーザーの操作によって <xref:System.Windows.Forms.Control.Enabled%2A> プロパティが変更された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1209">This event is raised if the <xref:System.Windows.Forms.Control.Enabled%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="6dc4f-1210">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1210">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1211">次のコード例では、2つの <xref:System.Windows.Forms.RadioButton> コントロールを使用して、<xref:System.Windows.Forms.Control.EnabledChanged> イベントを示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1211">The following code example uses two <xref:System.Windows.Forms.RadioButton> controls to demonstrate the <xref:System.Windows.Forms.Control.EnabledChanged> event.</span></span> <span data-ttu-id="6dc4f-1212">1つのボタンをクリックすると、[その他] ボタンの [<xref:System.Windows.Forms.Control.Enabled%2A>] プロパティの値が `false` に変わり、<xref:System.Windows.Forms.MessageBox>が表示されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1212">Clicking one button changes the value of the <xref:System.Windows.Forms.Control.Enabled%2A> property of the other button to `false` and displays a <xref:System.Windows.Forms.MessageBox>.</span></span>  
  
 [!code-csharp[System.Windows.Forms.Control.EnabledChanged#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.EnabledChanged/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.EnabledChanged#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.EnabledChanged/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public object EndInvoke (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EndInvoke(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndInvoke (asyncResult As IAsyncResult) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ EndInvoke(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="abstract member EndInvoke : IAsyncResult -&gt; obj&#xA;override this.EndInvoke : IAsyncResult -&gt; obj" Usage="control.EndInvoke asyncResult" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="6dc4f-1213"><see cref="T:System.IAsyncResult" /> を呼び出したときに返された、特定の呼び出しの非同期操作を表す<see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1213">The <see cref="T:System.IAsyncResult" /> that represents a specific invoke asynchronous operation, returned when calling <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" />.</span></span></param>
        <summary><span data-ttu-id="6dc4f-1214">渡された <see cref="T:System.IAsyncResult" /> によって表される、非同期操作の戻り値を取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1214">Retrieves the return value of the asynchronous operation represented by the <see cref="T:System.IAsyncResult" /> passed.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-1215">非同期操作によって生成された <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1215">The <see cref="T:System.Object" /> generated by the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1216">非同期操作が完了していない場合、この関数は結果が使用可能になるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1216">If the asynchronous operation has not been completed, this function will block until the result is available.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-1217"><xref:System.Windows.Forms.Control.InvokeRequired%2A> プロパティに加えて、スレッドセーフであるコントロールには、<xref:System.Windows.Forms.Control.Invoke%2A>、<xref:System.Windows.Forms.Control.BeginInvoke%2A>、<xref:System.Windows.Forms.Control.EndInvoke%2A>、および <xref:System.Windows.Forms.Control.CreateGraphics%2A> コントロールのハンドルが既に作成されている場合の4つのメソッドがあります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1217">In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe: <xref:System.Windows.Forms.Control.Invoke%2A>, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A>, and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created.</span></span> <span data-ttu-id="6dc4f-1218">バックグラウンドスレッドでコントロールのハンドルが作成される前に <xref:System.Windows.Forms.Control.CreateGraphics%2A> を呼び出すと、無効なクロススレッド呼び出しが発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1218">Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control's handle has been created on a background thread can cause illegal cross thread calls.</span></span> <span data-ttu-id="6dc4f-1219">その他のすべてのメソッド呼び出しでは、いずれかの invoke メソッドを使用して、コントロールのスレッドへの呼び出しをマーシャリングする必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1219">For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6dc4f-1220"><paramref name="asyncResult" /> パラメーター値が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1220">The <paramref name="asyncResult" /> parameter value is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6dc4f-1221"><paramref name="asyncResult" /> オブジェクトが、同じコントロールからの先行する <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" /> メソッドの呼び出しによって作成されていません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1221">The <paramref name="asyncResult" /> object was not created by a preceding call of the <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" /> method from the same control.</span></span></exception>
        <altmember cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" />
        <altmember cref="P:System.Windows.Forms.Control.InvokeRequired" />
        <altmember cref="M:System.Windows.Forms.Control.Invoke(System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public event EventHandler Enter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Enter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Enter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Enter As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Enter;" />
      <MemberSignature Language="F#" Value="member this.Enter : EventHandler " Usage="member this.Enter : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1222">コントロールが入力されると発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1222">Occurs when the control is entered.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1223">キーボード (タブ、SHIFT + TAB など) を使用してフォーカスを変更した場合、<xref:System.Windows.Forms.Control.Select%2A> または <xref:System.Windows.Forms.Control.SelectNextControl%2A> メソッドを呼び出した場合、または <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> プロパティを現在のフォームに設定した場合、フォーカスイベントは次の順序で発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1223">When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> property to the current form, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 <span data-ttu-id="6dc4f-1224">マウスを使用するか <xref:System.Windows.Forms.Control.Focus%2A> メソッドを呼び出すことによってフォーカスを変更すると、フォーカスイベントは次の順序で発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1224">When you change the focus by using the mouse or by calling the <xref:System.Windows.Forms.Control.Focus%2A> method, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.LostFocus>  
  
4.  <xref:System.Windows.Forms.Control.Leave>  
  
5.  <xref:System.Windows.Forms.Control.Validating>  
  
6.  <xref:System.Windows.Forms.Control.Validated>  
  
 <span data-ttu-id="6dc4f-1225"><xref:System.Windows.Forms.Control.CausesValidation%2A> プロパティが `false`に設定されている場合、<xref:System.Windows.Forms.Control.Validating> および <xref:System.Windows.Forms.Control.Validated> イベントは抑制されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1225">If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-1226"><xref:System.Windows.Forms.Control.Enter> イベントと <xref:System.Windows.Forms.Control.Leave> イベントは <xref:System.Windows.Forms.Form> クラスによって抑制されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1226">The <xref:System.Windows.Forms.Control.Enter> and <xref:System.Windows.Forms.Control.Leave> events are suppressed by the <xref:System.Windows.Forms.Form> class.</span></span> <span data-ttu-id="6dc4f-1227"><xref:System.Windows.Forms.Form> クラスの同等のイベントは、<xref:System.Windows.Forms.Form.Activated> イベントと <xref:System.Windows.Forms.Form.Deactivate> イベントです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1227">The equivalent events in the <xref:System.Windows.Forms.Form> class are the <xref:System.Windows.Forms.Form.Activated> and <xref:System.Windows.Forms.Form.Deactivate> events.</span></span> <span data-ttu-id="6dc4f-1228"><xref:System.Windows.Forms.Control.Enter> イベントと <xref:System.Windows.Forms.Control.Leave> イベントは階層的であり、適切なコントロールに到達するまで、親チェーンを上下に重ねて表示されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1228">The <xref:System.Windows.Forms.Control.Enter> and <xref:System.Windows.Forms.Control.Leave> events are hierarchical and will cascade up and down the parent chain until the appropriate control is reached.</span></span> <span data-ttu-id="6dc4f-1229">たとえば、2つの <xref:System.Windows.Forms.GroupBox> コントロールを持つ <xref:System.Windows.Forms.Form> があり、各 <xref:System.Windows.Forms.GroupBox> コントロールに1つの <xref:System.Windows.Forms.TextBox> コントロールがあるとします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1229">For example, assume you have a <xref:System.Windows.Forms.Form> with two <xref:System.Windows.Forms.GroupBox> controls, and each <xref:System.Windows.Forms.GroupBox> control has one <xref:System.Windows.Forms.TextBox> control.</span></span> <span data-ttu-id="6dc4f-1230">カーソルがある <xref:System.Windows.Forms.TextBox> から別のに移動されると、<xref:System.Windows.Forms.TextBox> と <xref:System.Windows.Forms.GroupBox>に対して <xref:System.Windows.Forms.Control.Leave> イベントが発生し、他の <xref:System.Windows.Forms.Control.Enter> と <xref:System.Windows.Forms.GroupBox> に対して <xref:System.Windows.Forms.TextBox>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1230">When the caret is moved from one <xref:System.Windows.Forms.TextBox> to the other, the <xref:System.Windows.Forms.Control.Leave> event is raised for the <xref:System.Windows.Forms.TextBox> and <xref:System.Windows.Forms.GroupBox>, and the <xref:System.Windows.Forms.Control.Enter> event is raised for the other <xref:System.Windows.Forms.GroupBox> and <xref:System.Windows.Forms.TextBox>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="6dc4f-1231"><xref:System.Windows.Forms.Control.Enter>、<xref:System.Windows.Forms.Control.GotFocus>、<xref:System.Windows.Forms.Control.Leave>、<xref:System.Windows.Forms.Control.LostFocus>、<xref:System.Windows.Forms.Control.Validating>、または <xref:System.Windows.Forms.Control.Validated> のイベントハンドラー内からフォーカスを設定しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1231">Do not attempt to set focus from within the <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>, <xref:System.Windows.Forms.Control.Validating>, or <xref:System.Windows.Forms.Control.Validated> event handlers.</span></span> <span data-ttu-id="6dc4f-1232">これにより、アプリケーションまたはオペレーティングシステムが応答を停止する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1232">Doing so can cause your application or the operating system to stop responding.</span></span> <span data-ttu-id="6dc4f-1233">詳細については、「キーボード入力リファレンス」セクションの `WM_KILLFOCUS` に関するトピックと、「 [About Messages And Message Queues](/windows/win32/winmsg/about-messages-and-message-queues) 」トピックの「Message デッドロック」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1233">For more information, see the `WM_KILLFOCUS` topic in the "Keyboard Input Reference" section and the "Message Deadlocks" section of the [About Messages and Message Queues](/windows/win32/winmsg/about-messages-and-message-queues) topic.</span></span>  
  
 <span data-ttu-id="6dc4f-1234">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1234">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1235">次のコード例では、<xref:System.Windows.Forms.Control.Enter> イベントを使用して、特定の条件下で <xref:System.Windows.Forms.TextBox> の前景色と背景色を変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1235">The following code example uses the <xref:System.Windows.Forms.Control.Enter> event to change the foreground and background colors of a <xref:System.Windows.Forms.TextBox> under particular conditions.</span></span>  
  
 [!code-cpp[Control.Enter#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Enter/CPP/form1.cpp#1)]
 [!code-csharp[Control.Enter#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Enter/CS/form1.cs#1)]
 [!code-vb[Control.Enter#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Enter/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="FindForm">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Form FindForm ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Form FindForm() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.FindForm" />
      <MemberSignature Language="VB.NET" Value="Public Function FindForm () As Form" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::Form ^ FindForm();" />
      <MemberSignature Language="F#" Value="member this.FindForm : unit -&gt; System.Windows.Forms.Form" Usage="control.FindForm " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Form</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6dc4f-1236">コントロールがあるフォームを取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1236">Retrieves the form that the control is on.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-1237">コントロールがある <see cref="T:System.Windows.Forms.Form" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1237">The <see cref="T:System.Windows.Forms.Form" /> that the control is on.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1238">コントロールの <xref:System.Windows.Forms.Control.Parent%2A> プロパティ値は、<xref:System.Windows.Forms.Control.FindForm%2A> メソッドによって返された <xref:System.Windows.Forms.Form> と同じではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1238">The control's <xref:System.Windows.Forms.Control.Parent%2A> property value might not be the same as the <xref:System.Windows.Forms.Form> returned by <xref:System.Windows.Forms.Control.FindForm%2A> method.</span></span> <span data-ttu-id="6dc4f-1239">たとえば、<xref:System.Windows.Forms.RadioButton> コントロールが <xref:System.Windows.Forms.GroupBox> コントロールに含まれており、<xref:System.Windows.Forms.GroupBox> が <xref:System.Windows.Forms.Form>上にある場合、<xref:System.Windows.Forms.RadioButton> コントロールの <xref:System.Windows.Forms.Control.Parent%2A> は <xref:System.Windows.Forms.GroupBox>、<xref:System.Windows.Forms.GroupBox> コントロールの <xref:System.Windows.Forms.Control.Parent%2A> は <xref:System.Windows.Forms.Form>です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1239">For example, if a <xref:System.Windows.Forms.RadioButton> control is contained within a <xref:System.Windows.Forms.GroupBox> control, and the <xref:System.Windows.Forms.GroupBox> is on a <xref:System.Windows.Forms.Form>, the <xref:System.Windows.Forms.RadioButton> control's <xref:System.Windows.Forms.Control.Parent%2A> is the <xref:System.Windows.Forms.GroupBox> and the <xref:System.Windows.Forms.GroupBox> control's <xref:System.Windows.Forms.Control.Parent%2A> is the <xref:System.Windows.Forms.Form>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1240">次のコード例では、指定されたボタンを含むフォームを検索します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1240">The following code example finds the form that contains the specified button.</span></span>  
  
 [!code-cpp[Control.FindForm#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.FindForm/CPP/form1.cpp#1)]
 [!code-csharp[Control.FindForm#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.FindForm/CS/form1.cs#1)]
 [!code-vb[Control.FindForm#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.FindForm/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.GetTopLevel" />
        <altmember cref="T:System.Windows.Forms.Form" />
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public bool Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Function Focus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Focus();" />
      <MemberSignature Language="F#" Value="member this.Focus : unit -&gt; bool" Usage="control.Focus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6dc4f-1241">コントロールに入力フォーカスを設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1241">Sets input focus to the control.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-1242">入力フォーカス要求が成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1242"><see langword="true" /> if the input focus request was successful; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1243"><xref:System.Windows.Forms.Control.Focus%2A> メソッドは、コントロールが入力フォーカスを正常に受信した場合に `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1243">The <xref:System.Windows.Forms.Control.Focus%2A> method returns `true` if the control successfully received input focus.</span></span> <span data-ttu-id="6dc4f-1244">コントロールは、フォーカスを持つ視覚的な合図を表示せずに、入力フォーカスを持つことができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1244">The control can have the input focus while not displaying any visual cues of having the focus.</span></span> <span data-ttu-id="6dc4f-1245">この動作は、主に次に示す選択不可能なコントロール、またはそれらから派生したコントロールによって監視されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1245">This behavior is primarily observed by the nonselectable controls listed below, or any controls derived from them.</span></span>  
  
 <span data-ttu-id="6dc4f-1246">次のすべてが当てはまる場合は、コントロールを選択し、入力フォーカスを受け取ることができます。 <xref:System.Windows.Forms.ControlStyles> の `Selectable` 値は `true`に設定され、別のコントロールに含まれ、すべての親コントロールが表示され、有効になります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1246">A control can be selected and receive input focus if all the following are true: the `Selectable` value of <xref:System.Windows.Forms.ControlStyles> is set to `true`, it is contained in another control, and all its parent controls are both visible and enabled.</span></span>  
  
 <span data-ttu-id="6dc4f-1247">次の一覧の Windows フォームコントロールは選択できません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1247">The Windows Forms controls in the following list are not selectable.</span></span> <span data-ttu-id="6dc4f-1248">これらのコントロールから派生したコントロールも選択できません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1248">Controls derived from these controls are also not selectable.</span></span>  
  
-   <xref:System.Windows.Forms.Panel>  
  
-   <xref:System.Windows.Forms.GroupBox>  
  
-   <xref:System.Windows.Forms.PictureBox>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.Splitter>  
  
-   <xref:System.Windows.Forms.Label>  
  
-   <span data-ttu-id="6dc4f-1249"><xref:System.Windows.Forms.LinkLabel> (コントロールにリンクが存在しない場合)</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1249"><xref:System.Windows.Forms.LinkLabel> (when there is no link present in the control)</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-1250"><xref:System.Windows.Forms.Control.Focus%2A> は、主にカスタムコントロールの作成者を対象とした低レベルのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1250"><xref:System.Windows.Forms.Control.Focus%2A> is a low-level method intended primarily for custom control authors.</span></span> <span data-ttu-id="6dc4f-1251">代わりに、アプリケーションプログラマは、<xref:System.Windows.Forms.Control.Select%2A> メソッドまたは子コントロールの <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> プロパティ、またはフォームの <xref:System.Windows.Forms.Form.Activate%2A> メソッドを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1251">Instead, application programmers should use the <xref:System.Windows.Forms.Control.Select%2A> method or the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> property for child controls, or the <xref:System.Windows.Forms.Form.Activate%2A> method for forms.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1252">次のコード例では、フォーカスを受け取ることができる場合に、指定された <xref:System.Windows.Forms.Control>にフォーカスを設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1252">The following code example sets focus to the specified <xref:System.Windows.Forms.Control>, if it can receive focus.</span></span>  
  
 [!code-cpp[Windows.Forms.ControlMembers6#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CPP/controlmembers6.cpp#1)]
 [!code-csharp[Windows.Forms.ControlMembers6#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CS/controlmembers6.cs#1)]
 [!code-vb[Windows.Forms.ControlMembers6#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/VB/controlmembers6.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.CanFocus" />
        <altmember cref="P:System.Windows.Forms.Control.ContainsFocus" />
        <altmember cref="P:System.Windows.Forms.Control.Focused" />
        <altmember cref="P:System.Windows.Forms.Control.CanSelect" />
        <altmember cref="M:System.Windows.Forms.Control.Select" />
        <altmember cref="P:System.Windows.Forms.ContainerControl.ActiveControl" />
        <altmember cref="M:System.Windows.Forms.Form.Activate" />
      </Docs>
    </Member>
    <Member MemberName="Focused">
      <MemberSignature Language="C#" Value="public virtual bool Focused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Focused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Focused" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Focused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Focused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Focused : bool" Usage="System.Windows.Forms.Control.Focused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1253">コントロールに入力フォーカスがあるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1253">Gets a value indicating whether the control has input focus.</span></span></summary>
        <value><span data-ttu-id="6dc4f-1254">コントロールにフォーカスがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1254"><see langword="true" /> if the control has focus; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6dc4f-1255"><xref:System.Windows.Forms.TextBox> にフォーカスがない場合に <xref:System.Windows.Forms.MenuItem> を無効にするコード例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1255">The following code example disables a <xref:System.Windows.Forms.MenuItem> if a <xref:System.Windows.Forms.TextBox> does not have focus.</span></span> <span data-ttu-id="6dc4f-1256">この例では、`textBox1` という名前の <xref:System.Windows.Forms.TextBox> を持つ <xref:System.Windows.Forms.Form> と、`menuItemEdit` と `menuItemEditInsertCustomerInfo`という名前の <xref:System.Windows.Forms.MenuItem> オブジェクトが2つ必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1256">This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TextBox> named `textBox1` and two <xref:System.Windows.Forms.MenuItem> objects named `menuItemEdit` and `menuItemEditInsertCustomerInfo`.</span></span>  
  
 [!code-cpp[Windows.FOrms.Control Members2#4](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CPP/controlmembers2.cpp#4)]
 [!code-csharp[Windows.FOrms.Control Members2#4](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CS/controlmembers2.cs#4)]
 [!code-vb[Windows.FOrms.Control Members2#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members2/VB/controlmembers2.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-1257">派生クラスの <see cref="P:System.Windows.Forms.Control.Focused" /> プロパティをオーバーライドする場合は、基本クラスの <see cref="P:System.Windows.Forms.Control.Focused" /> プロパティを使用して、基本実装を拡張します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1257">When overriding the <see cref="P:System.Windows.Forms.Control.Focused" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.Focused" /> property to extend the base implementation.</span></span> <span data-ttu-id="6dc4f-1258">それ以外の場合は、すべての実装を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1258">Otherwise, you must provide all the implementation.</span></span></para></block>
        <altmember cref="P:System.Windows.Forms.Control.CanFocus" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="P:System.Windows.Forms.Control.CanSelect" />
        <altmember cref="P:System.Windows.Forms.Control.ContainsFocus" />
      </Docs>
    </Member>
    <Member MemberName="Font">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Font Font { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Font Font" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Font" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Font As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Font ^ Font { System::Drawing::Font ^ get(); void set(System::Drawing::Font ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Font : System.Drawing.Font with get, set" Usage="System.Windows.Forms.Control.Font" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-512)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1259">コントロールによって表示されるテキストのフォントを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1259">Gets or sets the font of the text displayed by the control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-1260">コントロールによって表示されるテキストに適用される <see cref="T:System.Drawing.Font" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1260">The <see cref="T:System.Drawing.Font" /> to apply to the text displayed by the control.</span></span> <span data-ttu-id="6dc4f-1261">既定値は <see cref="P:System.Windows.Forms.Control.DefaultFont" /> プロパティの値です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1261">The default is the value of the <see cref="P:System.Windows.Forms.Control.DefaultFont" /> property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1262"><xref:System.Windows.Forms.Control.Font%2A> プロパティはアンビエントプロパティです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1262">The <xref:System.Windows.Forms.Control.Font%2A> property is an ambient property.</span></span> <span data-ttu-id="6dc4f-1263">アンビエントプロパティは、設定されていない場合、親コントロールから取得されるコントロールプロパティです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1263">An ambient property is a control property that, if not set, is retrieved from the parent control.</span></span> <span data-ttu-id="6dc4f-1264">たとえば、<xref:System.Windows.Forms.Button> は、既定では親 <xref:System.Windows.Forms.Form> と同じ <xref:System.Windows.Forms.Control.BackColor%2A> を持ちます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1264">For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default.</span></span> <span data-ttu-id="6dc4f-1265">アンビエントプロパティの詳細については、「<xref:System.Windows.Forms.AmbientProperties> クラス」または「<xref:System.Windows.Forms.Control> クラスの概要」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1265">For more information about ambient properties, see the <xref:System.Windows.Forms.AmbientProperties> class or the <xref:System.Windows.Forms.Control> class overview.</span></span>  
  
 <span data-ttu-id="6dc4f-1266"><xref:System.Drawing.Font> は不変であるため (つまり、プロパティを調整することはできません)、<xref:System.Windows.Forms.Control.Font%2A> プロパティは新しい <xref:System.Drawing.Font>にのみ割り当てることができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1266">Because the <xref:System.Drawing.Font> is immutable (meaning that you cannot adjust any of its properties), you can only assign the <xref:System.Windows.Forms.Control.Font%2A> property a new <xref:System.Drawing.Font>.</span></span> <span data-ttu-id="6dc4f-1267">ただし、既存のフォントに基づいて新しいフォントを作成することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1267">However, you can base the new font on the existing font.</span></span>  
  
 <span data-ttu-id="6dc4f-1268">[Visual Basic、 C#]</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1268">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="6dc4f-1269">次に、既存のフォントを太字に調整する方法の例を示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1269">The following is an example of how to adjust the existing font to make it bold:</span></span>  
  
```csharp  
myControl.Font = new Font(myControl.Font,   
    myControl.Font.Style | FontStyle.Bold);  
```  
  
```vb  
MyControl.Font = New Font(MyControl.Font, _   
    MyControl.Font.Style Or FontStyle.Bold)  
```  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1270">次のコード例では、ユーザーに <xref:System.Windows.Forms.FontDialog> を表示し、<xref:System.Windows.Forms.DateTimePicker> コントロールの <xref:System.Drawing.Font> を変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1270">The following code example displays a <xref:System.Windows.Forms.FontDialog> to the user and changes the <xref:System.Drawing.Font> of a <xref:System.Windows.Forms.DateTimePicker> control.</span></span> <span data-ttu-id="6dc4f-1271">この例では、<xref:System.Windows.Forms.Button> と <xref:System.Windows.Forms.DateTimePicker> を持つ <xref:System.Windows.Forms.Form> が必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1271">This example requires that you have a <xref:System.Windows.Forms.Form> with <xref:System.Windows.Forms.Button> and a <xref:System.Windows.Forms.DateTimePicker> on it.</span></span>  
  
 [!code-cpp[Control_Font#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_Font/CPP/control_font.cpp#1)]
 [!code-csharp[Control_Font#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_Font/CS/control_font.cs#1)]
 [!code-vb[Control_Font#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_Font/VB/control_font.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-1272">派生クラスの <see cref="P:System.Windows.Forms.Control.Font" /> プロパティをオーバーライドする場合は、基本クラスの <see cref="P:System.Windows.Forms.Control.Font" /> プロパティを使用して、基本実装を拡張します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1272">When overriding the <see cref="P:System.Windows.Forms.Control.Font" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.Font" /> property to extend the base implementation.</span></span> <span data-ttu-id="6dc4f-1273">それ以外の場合は、すべての実装を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1273">Otherwise, you must provide all the implementation.</span></span> <span data-ttu-id="6dc4f-1274"><see cref="P:System.Windows.Forms.Control.Font" /> プロパティの <see langword="get" /> と <see langword="set" /> の両方のアクセサーをオーバーライドする必要はありません。必要に応じて、オーバーライドできるのは1つだけです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1274">You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.Font" /> property; you can override only one if needed.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.FontChanged" />
        <altmember cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)" />
        <altmember cref="T:System.Drawing.Font" />
      </Docs>
    </Member>
    <Member MemberName="FontChanged">
      <MemberSignature Language="C#" Value="public event EventHandler FontChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler FontChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.FontChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FontChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ FontChanged;" />
      <MemberSignature Language="F#" Value="member this.FontChanged : EventHandler " Usage="member this.FontChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1275"><see cref="P:System.Windows.Forms.Control.Font" /> プロパティの値が変化すると発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1275">Occurs when the <see cref="P:System.Windows.Forms.Control.Font" /> property value changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1276">このイベントは、<xref:System.Windows.Forms.Control.Font%2A> プロパティがプログラムによる変更または対話によって変更された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1276">This event is raised if the <xref:System.Windows.Forms.Control.Font%2A> property is changed by either a programmatic modification or through interaction.</span></span>  
  
 <span data-ttu-id="6dc4f-1277">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1277">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1278">次のコード例は、<xref:System.Windows.Forms.Control.FontChanged> イベントを示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1278">The following code example demonstrates the <xref:System.Windows.Forms.Control.FontChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.Control.FontChanged#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.FontChanged/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.FontChanged#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.FontChanged/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Font" />
        <altmember cref="T:System.Drawing.Font" />
      </Docs>
    </Member>
    <Member MemberName="FontHeight">
      <MemberSignature Language="C#" Value="protected int FontHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FontHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.FontHeight" />
      <MemberSignature Language="VB.NET" Value="Protected Property FontHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property int FontHeight { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.FontHeight : int with get, set" Usage="System.Windows.Forms.Control.FontHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1279">コントロールのフォントの高さを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1279">Gets or sets the height of the font of the control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-1280">コントロールの <see cref="T:System.Drawing.Font" /> の高さ (ピクセル単位)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1280">The height of the <see cref="T:System.Drawing.Font" /> of the control in pixels.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-1281"><xref:System.Windows.Forms.Control.FontHeight%2A> プロパティを、コントロールの <xref:System.Drawing.Font.Height%2A?displayProperty=nameWithType> 値以外の値に設定することはできません。または-1 を指定してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1281">The <xref:System.Windows.Forms.Control.FontHeight%2A> property should not be set to any value other than the control's <xref:System.Drawing.Font.Height%2A?displayProperty=nameWithType> value, or -1.</span></span> <span data-ttu-id="6dc4f-1282"><xref:System.Windows.Forms.Control.FontHeight%2A> を-1 に設定すると、キャッシュされた高さの値がクリアされ、次にプロパティが参照されるときに値が再計算されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1282">Setting <xref:System.Windows.Forms.Control.FontHeight%2A> to -1 has the effect of clearing the cached height value, and the value is recalculated the next time the property is referenced.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Drawing.Font.Height" />
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color ForeColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.ForeColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.Control.ForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-513)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1283">コントロールの前景色を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1283">Gets or sets the foreground color of the control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-1284">コントロールの前景の <see cref="T:System.Drawing.Color" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1284">The foreground <see cref="T:System.Drawing.Color" /> of the control.</span></span> <span data-ttu-id="6dc4f-1285">既定値は <see cref="P:System.Windows.Forms.Control.DefaultForeColor" /> プロパティの値です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1285">The default is the value of the <see cref="P:System.Windows.Forms.Control.DefaultForeColor" /> property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1286"><xref:System.Windows.Forms.Control.ForeColor%2A> プロパティはアンビエントプロパティです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1286">The <xref:System.Windows.Forms.Control.ForeColor%2A> property is an ambient property.</span></span> <span data-ttu-id="6dc4f-1287">アンビエントプロパティは、設定されていない場合、親コントロールから取得されるコントロールプロパティです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1287">An ambient property is a control property that, if not set, is retrieved from the parent control.</span></span> <span data-ttu-id="6dc4f-1288">たとえば、<xref:System.Windows.Forms.Button> は、既定では親 <xref:System.Windows.Forms.Form> と同じ <xref:System.Windows.Forms.Control.BackColor%2A> を持ちます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1288">For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default.</span></span> <span data-ttu-id="6dc4f-1289">アンビエントプロパティの詳細については、「<xref:System.Windows.Forms.AmbientProperties> クラス」または「<xref:System.Windows.Forms.Control> クラスの概要」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1289">For more information about ambient properties, see the <xref:System.Windows.Forms.AmbientProperties> class or the <xref:System.Windows.Forms.Control> class overview.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1290">次のコード例では、コントロールの <xref:System.Windows.Forms.Control.BackColor%2A> と <xref:System.Windows.Forms.Control.ForeColor%2A> を既定のシステムカラーに設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1290">The following code example sets the <xref:System.Windows.Forms.Control.BackColor%2A> and <xref:System.Windows.Forms.Control.ForeColor%2A> of the controls to the default system colors.</span></span> <span data-ttu-id="6dc4f-1291">コントロールに子コントロールがある場合、コードは再帰的にそれ自体を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1291">The code recursively calls itself if the control has any child controls.</span></span> <span data-ttu-id="6dc4f-1292">このコード例では、少なくとも1つの子コントロールを持つ <xref:System.Windows.Forms.Form> が必要です。ただし、<xref:System.Windows.Forms.Panel> や <xref:System.Windows.Forms.GroupBox>のように、独自の子コントロールを持つ子コンテナーコントロールは、再帰のデモンストレーションをより適切に行うことができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1292">This code example requires that you have a <xref:System.Windows.Forms.Form> with at least one child control; however, a child container control, like a <xref:System.Windows.Forms.Panel> or <xref:System.Windows.Forms.GroupBox>, with its own child control(s) would better demonstrate the recursion.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#1)]
 [!code-csharp[Windows.Forms.Control Properties#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#1)]
 [!code-vb[Windows.Forms.Control Properties#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-1293">派生クラスの <see cref="P:System.Windows.Forms.Control.ForeColor" /> プロパティをオーバーライドする場合は、基本クラスの <see cref="P:System.Windows.Forms.Control.ForeColor" /> プロパティを使用して、基本実装を拡張します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1293">When overriding the <see cref="P:System.Windows.Forms.Control.ForeColor" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.ForeColor" /> property to extend the base implementation.</span></span> <span data-ttu-id="6dc4f-1294">それ以外の場合は、すべての実装を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1294">Otherwise, you must provide all the implementation.</span></span> <span data-ttu-id="6dc4f-1295"><see cref="P:System.Windows.Forms.Control.ForeColor" /> プロパティの <see langword="get" /> と <see langword="set" /> の両方のアクセサーをオーバーライドする必要はありません。必要に応じて、オーバーライドできるのは1つだけです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1295">You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.ForeColor" /> property; you can override only one if needed.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.ForeColorChanged" />
        <altmember cref="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)" />
        <altmember cref="T:System.Drawing.Color" />
      </Docs>
    </Member>
    <Member MemberName="ForeColorChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ForeColorChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ForeColorChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ForeColorChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ForeColorChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ForeColorChanged;" />
      <MemberSignature Language="F#" Value="member this.ForeColorChanged : EventHandler " Usage="member this.ForeColorChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1296"><see cref="P:System.Windows.Forms.Control.ForeColor" /> プロパティの値が変化すると発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1296">Occurs when the <see cref="P:System.Windows.Forms.Control.ForeColor" /> property value changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1297">このイベントは、<xref:System.Windows.Forms.Control.ForeColor%2A> プロパティがプログラムによる変更または対話によって変更された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1297">This event is raised if the <xref:System.Windows.Forms.Control.ForeColor%2A> property is changed by either a programmatic modification or through interaction.</span></span>  
  
 <span data-ttu-id="6dc4f-1298">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1298">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1299">次のコード例は、<xref:System.Windows.Forms.Control.Text%2A> プロパティの値が変更されたときに実行されるイベントハンドラーです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1299">The following code example is an event handler that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="6dc4f-1300"><xref:System.Windows.Forms.Control> クラスには、対応する*propertyname*値が変更されたときに発生する名前パターン*PropertyName*`Changed` を持ついくつかのメソッドがあります (*propertyname*は対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1300">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern *PropertyName*`Changed` that are raised when the corresponding *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="6dc4f-1301">次のコード例では、通貨データを表示する <xref:System.Windows.Forms.TextBox> の <xref:System.Windows.Forms.Control.ForeColor%2A> を変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1301">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data.</span></span> <span data-ttu-id="6dc4f-1302">この例では、テキストを10進数に変換し、数値が負の場合は <xref:System.Windows.Forms.Control.ForeColor%2A> を <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> に変更し、数値が正の値の場合は <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> に変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1302">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="6dc4f-1303">この例では、<xref:System.Windows.Forms.TextBox>を含む <xref:System.Windows.Forms.Form> が必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1303">This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CPP/propertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CS/propertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/VB/propertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.ForeColor" />
        <altmember cref="T:System.Drawing.Color" />
      </Docs>
    </Member>
    <Member MemberName="FromChildHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.Control FromChildHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.Control FromChildHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.FromChildHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromChildHandle (handle As IntPtr) As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Forms::Control ^ FromChildHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="static member FromChildHandle : nativeint -&gt; System.Windows.Forms.Control" Usage="System.Windows.Forms.Control.FromChildHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="6dc4f-1304">検索する対象となるウィンドウ ハンドル (<see langword="HWND" />)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1304">The window handle (<see langword="HWND" />) to search for.</span></span></param>
        <summary><span data-ttu-id="6dc4f-1305">指定したハンドルを格納しているコントロールを取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1305">Retrieves the control that contains the specified handle.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-1306">指定したハンドルに関連付けられたコントロールを表す <see cref="T:System.Windows.Forms.Control" />。指定したハンドルを持つコントロールが見つからない場合は <see langword="null" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1306">The <see cref="T:System.Windows.Forms.Control" /> that represents the control associated with the specified handle; returns <see langword="null" /> if no control with the specified handle is found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1307">このメソッドは、コントロールに関連付けられているハンドルが見つかるまで、ウィンドウハンドルの親チェインを検索します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1307">This method searches up the window handle parent chain until it finds a handle that is associated with a control.</span></span> <span data-ttu-id="6dc4f-1308">このメソッドは、複数のハンドルを所有するコントロールを正しく返すため、<xref:System.Windows.Forms.Control.FromHandle%2A> メソッドよりも信頼性が高くなります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1308">This method is more reliable than the <xref:System.Windows.Forms.Control.FromHandle%2A> method, because it correctly returns controls that own more than one handle.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.Parent" />
      </Docs>
    </Member>
    <Member MemberName="FromHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.Control FromHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.Control FromHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.FromHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHandle (handle As IntPtr) As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Forms::Control ^ FromHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="static member FromHandle : nativeint -&gt; System.Windows.Forms.Control" Usage="System.Windows.Forms.Control.FromHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="6dc4f-1309">検索する対象となるウィンドウ ハンドル (<see langword="HWND" />)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1309">The window handle (<see langword="HWND" />) to search for.</span></span></param>
        <summary><span data-ttu-id="6dc4f-1310">指定したハンドルに現在関連付けられているコントロールを返します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1310">Returns the control that is currently associated with the specified handle.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-1311">指定したハンドルに関連付けられたコントロールを表す <see cref="T:System.Windows.Forms.Control" />。指定したハンドルを持つコントロールが見つからない場合は <see langword="null" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1311">A <see cref="T:System.Windows.Forms.Control" /> that represents the control associated with the specified handle; returns <see langword="null" /> if no control with the specified handle is found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1312">複数のハンドルを所有するコントロールを返す必要がある場合は、<xref:System.Windows.Forms.Control.FromChildHandle%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1312">Use the <xref:System.Windows.Forms.Control.FromChildHandle%2A> method if you need to return controls that own more than one handle.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.Parent" />
      </Docs>
    </Member>
    <Member MemberName="GetAccessibilityObjectById">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.AccessibleObject GetAccessibilityObjectById (int objectId);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Forms.AccessibleObject GetAccessibilityObjectById(int32 objectId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetAccessibilityObjectById(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetAccessibilityObjectById (objectId As Integer) As AccessibleObject" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Forms::AccessibleObject ^ GetAccessibilityObjectById(int objectId);" />
      <MemberSignature Language="F#" Value="abstract member GetAccessibilityObjectById : int -&gt; System.Windows.Forms.AccessibleObject&#xA;override this.GetAccessibilityObjectById : int -&gt; System.Windows.Forms.AccessibleObject" Usage="control.GetAccessibilityObjectById objectId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectId" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="objectId"><span data-ttu-id="6dc4f-1313">取得する <see cref="T:System.Int32" /> を識別する <see cref="T:System.Windows.Forms.AccessibleObject" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1313">An <see cref="T:System.Int32" /> that identifies the <see cref="T:System.Windows.Forms.AccessibleObject" /> to retrieve.</span></span></param>
        <summary><span data-ttu-id="6dc4f-1314">指定した <see cref="T:System.Windows.Forms.AccessibleObject" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1314">Retrieves the specified <see cref="T:System.Windows.Forms.AccessibleObject" />.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-1315">指定した <see cref="T:System.Windows.Forms.AccessibleObject" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1315">The specified <see cref="T:System.Windows.Forms.AccessibleObject" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.AccessibleObject" />
      </Docs>
    </Member>
    <Member MemberName="GetAutoSizeMode">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.AutoSizeMode GetAutoSizeMode ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Windows.Forms.AutoSizeMode GetAutoSizeMode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetAutoSizeMode" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetAutoSizeMode () As AutoSizeMode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Windows::Forms::AutoSizeMode GetAutoSizeMode();" />
      <MemberSignature Language="F#" Value="member this.GetAutoSizeMode : unit -&gt; System.Windows.Forms.AutoSizeMode" Usage="control.GetAutoSizeMode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AutoSizeMode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6dc4f-1316"><see cref="P:System.Windows.Forms.Control.AutoSize" /> プロパティが有効なときのコントロールの動作を示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1316">Retrieves a value indicating how a control will behave when its <see cref="P:System.Windows.Forms.Control.AutoSize" /> property is enabled.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-1317"><see cref="T:System.Windows.Forms.AutoSizeMode" /> 値のいずれか 1 つです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1317">One of the <see cref="T:System.Windows.Forms.AutoSizeMode" /> values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChildAtPoint">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1318">指定した位置にある子コントロールを取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1318">Retrieves the child control at a specified location.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChildAtPoint">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control GetChildAtPoint (System.Drawing.Point pt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Control GetChildAtPoint(valuetype System.Drawing.Point pt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetChildAtPoint(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChildAtPoint (pt As Point) As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::Control ^ GetChildAtPoint(System::Drawing::Point pt);" />
      <MemberSignature Language="F#" Value="member this.GetChildAtPoint : System.Drawing.Point -&gt; System.Windows.Forms.Control" Usage="control.GetChildAtPoint pt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pt"><span data-ttu-id="6dc4f-1319">コントロールを検索する座標を格納している <see cref="T:System.Drawing.Point" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1319">A <see cref="T:System.Drawing.Point" /> that contains the coordinates where you want to look for a control.</span></span> <span data-ttu-id="6dc4f-1320">座標は、コントロールのクライアント領域の左上隅に対する相対座標として表されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1320">Coordinates are expressed relative to the upper-left corner of the control's client area.</span></span></param>
        <summary><span data-ttu-id="6dc4f-1321">指定した座標にある子コントロールを取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1321">Retrieves the child control that is located at the specified coordinates.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-1322">指定したポイントにあるコントロールを表す <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1322">A <see cref="T:System.Windows.Forms.Control" /> that represents the control that is located at the specified point.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1323">指定したポイントに子コントロールが存在しない場合、<xref:System.Windows.Forms.Control.GetChildAtPoint%2A> メソッドは `null`を返します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1323">If there is no child control at the specified point, the <xref:System.Windows.Forms.Control.GetChildAtPoint%2A> method returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Parent" />
        <altmember cref="T:System.Windows.Forms.Control.ControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="GetChildAtPoint">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control GetChildAtPoint (System.Drawing.Point pt, System.Windows.Forms.GetChildAtPointSkip skipValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Control GetChildAtPoint(valuetype System.Drawing.Point pt, valuetype System.Windows.Forms.GetChildAtPointSkip skipValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetChildAtPoint(System.Drawing.Point,System.Windows.Forms.GetChildAtPointSkip)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChildAtPoint (pt As Point, skipValue As GetChildAtPointSkip) As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::Control ^ GetChildAtPoint(System::Drawing::Point pt, System::Windows::Forms::GetChildAtPointSkip skipValue);" />
      <MemberSignature Language="F#" Value="member this.GetChildAtPoint : System.Drawing.Point * System.Windows.Forms.GetChildAtPointSkip -&gt; System.Windows.Forms.Control" Usage="control.GetChildAtPoint (pt, skipValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="skipValue" Type="System.Windows.Forms.GetChildAtPointSkip" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="pt"><span data-ttu-id="6dc4f-1324">コントロールを検索する座標を格納している <see cref="T:System.Drawing.Point" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1324">A <see cref="T:System.Drawing.Point" /> that contains the coordinates where you want to look for a control.</span></span> <span data-ttu-id="6dc4f-1325">座標は、コントロールのクライアント領域の左上隅に対する相対座標として表されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1325">Coordinates are expressed relative to the upper-left corner of the control's client area.</span></span></param>
        <param name="skipValue"><span data-ttu-id="6dc4f-1326">特定の種類の子コントロールを無視するかどうかを決定する <see cref="T:System.Windows.Forms.GetChildAtPointSkip" /> の値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1326">One of the values of <see cref="T:System.Windows.Forms.GetChildAtPointSkip" />, determining whether to ignore child controls of a certain type.</span></span></param>
        <summary><span data-ttu-id="6dc4f-1327">特定の種類の子コントロールを無視するかどうかを指定して、指定した座標にある子コントロールを取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1327">Retrieves the child control that is located at the specified coordinates, specifying whether to ignore child controls of a certain type.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-1328">指定した座標にある子 <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1328">The child <see cref="T:System.Windows.Forms.Control" /> at the specified coordinates.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainerControl">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.IContainerControl GetContainerControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.IContainerControl GetContainerControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetContainerControl" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContainerControl () As IContainerControl" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::IContainerControl ^ GetContainerControl();" />
      <MemberSignature Language="F#" Value="member this.GetContainerControl : unit -&gt; System.Windows.Forms.IContainerControl" Usage="control.GetContainerControl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.IContainerControl</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6dc4f-1329">コントロールの親チェインの 1 つ上の <see cref="T:System.Windows.Forms.ContainerControl" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1329">Returns the next <see cref="T:System.Windows.Forms.ContainerControl" /> up the control's chain of parent controls.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-1330"><see cref="T:System.Windows.Forms.IContainerControl" /> の親を表す <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1330">An <see cref="T:System.Windows.Forms.IContainerControl" />, that represents the parent of the <see cref="T:System.Windows.Forms.Control" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.Control.Parent" />
        <altmember cref="T:System.Windows.Forms.ContainerControl" />
        <altmember cref="T:System.Windows.Forms.IContainerControl" />
      </Docs>
    </Member>
    <Member MemberName="GetNextControl">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control GetNextControl (System.Windows.Forms.Control ctl, bool forward);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Control GetNextControl(class System.Windows.Forms.Control ctl, bool forward) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetNextControl(System.Windows.Forms.Control,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNextControl (ctl As Control, forward As Boolean) As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::Control ^ GetNextControl(System::Windows::Forms::Control ^ ctl, bool forward);" />
      <MemberSignature Language="F#" Value="member this.GetNextControl : System.Windows.Forms.Control * bool -&gt; System.Windows.Forms.Control" Usage="control.GetNextControl (ctl, forward)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctl" Type="System.Windows.Forms.Control" />
        <Parameter Name="forward" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="ctl"><span data-ttu-id="6dc4f-1331">検索を開始する <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1331">The <see cref="T:System.Windows.Forms.Control" /> to start the search with.</span></span></param>
        <param name="forward"><span data-ttu-id="6dc4f-1332">タブ オーダー内を前方に検索する場合は <see langword="true" />。後方に検索する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1332"><see langword="true" /> to search forward in the tab order; <see langword="false" /> to search backward.</span></span></param>
        <summary><span data-ttu-id="6dc4f-1333">子コントロールのタブ オーダー内の 1 つ前または 1 つ後ろのコントロールを取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1333">Retrieves the next control forward or back in the tab order of child controls.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-1334">タブ オーダー内の次の <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1334">The next <see cref="T:System.Windows.Forms.Control" /> in the tab order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1335"><xref:System.Windows.Forms.Control.GetNextControl%2A> メソッドは、タブオーダーに依存します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1335">The <xref:System.Windows.Forms.Control.GetNextControl%2A> method is dependent on tab order.</span></span> <span data-ttu-id="6dc4f-1336">入れ子になったコントロールを含め、フォームのすべてのコントロールを反復処理するには、<xref:System.Windows.Forms.Control.Controls%2A> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1336">To iterate through all controls of a form, including nested controls, use the <xref:System.Windows.Forms.Control.Controls%2A> property.</span></span> <span data-ttu-id="6dc4f-1337">コンテナーコントロールのアクティブなコントロールを取得または設定するには、<xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1337">To get or set the active control of a container control, use the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.TabIndex" />
      </Docs>
    </Member>
    <Member MemberName="GetPreferredSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Size GetPreferredSize (System.Drawing.Size proposedSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.Size GetPreferredSize(valuetype System.Drawing.Size proposedSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPreferredSize (proposedSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Drawing::Size GetPreferredSize(System::Drawing::Size proposedSize);" />
      <MemberSignature Language="F#" Value="abstract member GetPreferredSize : System.Drawing.Size -&gt; System.Drawing.Size&#xA;override this.GetPreferredSize : System.Drawing.Size -&gt; System.Drawing.Size" Usage="control.GetPreferredSize proposedSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="proposedSize" Type="System.Drawing.Size" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="proposedSize"><span data-ttu-id="6dc4f-1338">サイズがカスタマイズされたコントロール用の領域です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1338">The custom-sized area for a control.</span></span></param>
        <summary><span data-ttu-id="6dc4f-1339">コントロールが収まる四角形の領域のサイズを取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1339">Retrieves the size of a rectangular area into which a control can be fitted.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-1340">四角形の幅と高さを表す、順序を付与した <see cref="T:System.Drawing.Size" /> 型のペア。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1340">An ordered pair of type <see cref="T:System.Drawing.Size" /> representing the width and height of a rectangle.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1341"><xref:System.Windows.Forms.Control.GetPreferredSize%2A> の動作は、コントロールによって異なります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1341">The behavior of <xref:System.Windows.Forms.Control.GetPreferredSize%2A> differs by control.</span></span> <span data-ttu-id="6dc4f-1342"><xref:System.Windows.Forms.Control.LayoutEngine%2A> が、返されたサイズをコントロールに割り当てることができない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1342">The <xref:System.Windows.Forms.Control.LayoutEngine%2A> might be unable to assign the returned size to the control.</span></span> <span data-ttu-id="6dc4f-1343">`proposedSize` パラメーターに示されている制約よりも大きいサイズを返すことができますが、制約が減少すると `proposedSize` が減少します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1343">You can return a size larger than the constraints indicated in the `proposedSize` parameter, but `proposedSize` should decrease as the constraint decreases.</span></span> <span data-ttu-id="6dc4f-1344">たとえば、`GetPreferredSize(new Size(100, 0))` を `GetPreferredSize(new Size(200, 0))`よりも大きくすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1344">For example, `GetPreferredSize(new Size(100, 0))` should not be wider than `GetPreferredSize(new Size(200, 0))`.</span></span> <span data-ttu-id="6dc4f-1345">この例外は、無制限として定義されている0または `Size.Empty`の `proposedSize` です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1345">The exception is a `proposedSize` of 0 or `Size.Empty`, which are defined as unconstrained.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetScaledBounds">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Rectangle GetScaledBounds (System.Drawing.Rectangle bounds, System.Drawing.SizeF factor, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Drawing.Rectangle GetScaledBounds(valuetype System.Drawing.Rectangle bounds, valuetype System.Drawing.SizeF factor, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetScaledBounds (bounds As Rectangle, factor As SizeF, specified As BoundsSpecified) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Drawing::Rectangle GetScaledBounds(System::Drawing::Rectangle bounds, System::Drawing::SizeF factor, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberSignature Language="F#" Value="abstract member GetScaledBounds : System.Drawing.Rectangle * System.Drawing.SizeF * System.Windows.Forms.BoundsSpecified -&gt; System.Drawing.Rectangle&#xA;override this.GetScaledBounds : System.Drawing.Rectangle * System.Drawing.SizeF * System.Windows.Forms.BoundsSpecified -&gt; System.Drawing.Rectangle" Usage="control.GetScaledBounds (bounds, factor, specified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bounds" Type="System.Drawing.Rectangle" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="factor" Type="System.Drawing.SizeF" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" Index="2" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="bounds"><span data-ttu-id="6dc4f-1346">ディスプレイの範囲の取得条件となる領域を指定する <see cref="T:System.Drawing.Rectangle" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1346">A <see cref="T:System.Drawing.Rectangle" /> that specifies the area for which to retrieve the display bounds.</span></span></param>
        <param name="factor"><span data-ttu-id="6dc4f-1347">コントロールの境界の高さおよび幅。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1347">The height and width of the control's bounds.</span></span></param>
        <param name="specified"><span data-ttu-id="6dc4f-1348">コントロールのサイズと位置を定義するときに使用するコントロールの境界を指定する <see cref="T:System.Windows.Forms.BoundsSpecified" /> の値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1348">One of the values of <see cref="T:System.Windows.Forms.BoundsSpecified" /> that specifies the bounds of the control to use when defining its size and position.</span></span></param>
        <summary><span data-ttu-id="6dc4f-1349">コントロールのスケールが設定される境界を取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1349">Retrieves the bounds within which the control is scaled.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-1350">コントロールのスケールが設定される境界を表す <see cref="T:System.Drawing.Rectangle" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1350">A <see cref="T:System.Drawing.Rectangle" /> representing the bounds within which the control is scaled.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1351">これは、コントロールがスケーリングされる範囲を取得するために <xref:System.Windows.Forms.Control.ScaleControl%2A> によって呼び出されるヘルパーメソッドです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1351">This is a helper method that is called by <xref:System.Windows.Forms.Control.ScaleControl%2A> to retrieve the bounds within which the control is scaled.</span></span> <span data-ttu-id="6dc4f-1352">このメソッドをオーバーライドして <xref:System.Windows.Forms.Control.ScaleControl%2A> スケーリングロジックを再利用できますが、独自の境界を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1352">You can override this method to reuse the <xref:System.Windows.Forms.Control.ScaleControl%2A> scaling logic, but you must supply your own bounds.</span></span> <span data-ttu-id="6dc4f-1353">既定の実装では、`specified` の境界、コントロールが最上位であるかどうか、コントロールが固定幅と自動サイズのどちらであるか、およびコントロールに含まれるすべての修飾があるかどうかを考慮した、スケールされた境界が返されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1353">The default implementation returns scaled bounds that take into account the `specified` bounds, whether the control is top level, whether the control is fixed width or auto size, and any adornments the control might have.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
        <altmember cref="M:System.Windows.Forms.Control.Scale(System.Single)" />
        <altmember cref="P:System.Windows.Forms.Control.ScaleChildren" />
      </Docs>
    </Member>
    <Member MemberName="GetStyle">
      <MemberSignature Language="C#" Value="protected bool GetStyle (System.Windows.Forms.ControlStyles flag);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool GetStyle(valuetype System.Windows.Forms.ControlStyles flag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetStyle(System.Windows.Forms.ControlStyles)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetStyle (flag As ControlStyles) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool GetStyle(System::Windows::Forms::ControlStyles flag);" />
      <MemberSignature Language="F#" Value="member this.GetStyle : System.Windows.Forms.ControlStyles -&gt; bool" Usage="control.GetStyle flag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flag" Type="System.Windows.Forms.ControlStyles" />
      </Parameters>
      <Docs>
        <param name="flag"><span data-ttu-id="6dc4f-1354">値を返す <see cref="T:System.Windows.Forms.ControlStyles" /> ビット。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1354">The <see cref="T:System.Windows.Forms.ControlStyles" /> bit to return the value from.</span></span></param>
        <summary><span data-ttu-id="6dc4f-1355">コントロールの指定したコントロール スタイル ビットの値を取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1355">Retrieves the value of the specified control style bit for the control.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-1356">指定したコントロール スタイル ビットが <see langword="true" /> に設定されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1356"><see langword="true" /> if the specified control style bit is set to <see langword="true" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1357">コントロールスタイルのビットフラグは、サポートされる動作を分類するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1357">Control style bit flags are used to categorize supported behavior.</span></span> <span data-ttu-id="6dc4f-1358">コントロールでは、<xref:System.Windows.Forms.Control.SetStyle%2A> メソッドを呼び出し、適切な <xref:System.Windows.Forms.ControlStyles> ビットと、ビットを設定するブール値を渡すことによってスタイルを有効にすることができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1358">A control can enable a style by calling the <xref:System.Windows.Forms.Control.SetStyle%2A> method and passing in the appropriate <xref:System.Windows.Forms.ControlStyles> bit and the Boolean value to set the bit to.</span></span> <span data-ttu-id="6dc4f-1359">指定された <xref:System.Windows.Forms.ControlStyles> ビットに割り当てられた値を確認するには、<xref:System.Windows.Forms.Control.GetStyle%2A> メソッドを使用して、評価する <xref:System.Windows.Forms.ControlStyles> メンバーを渡します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1359">To determine the value assigned to a specified <xref:System.Windows.Forms.ControlStyles> bit, use the <xref:System.Windows.Forms.Control.GetStyle%2A> method and pass in the <xref:System.Windows.Forms.ControlStyles> member to evaluate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1360">次のコード例では、<xref:System.Windows.Forms.Form>のダブルバッファリングに関連するスタイルビットの値を返します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1360">The following code example returns the value of the double-buffering related style bits for a <xref:System.Windows.Forms.Form>.</span></span> <span data-ttu-id="6dc4f-1361">この例では、すべてのスタイルビットが `true`に設定されている場合にのみ `true` が返されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1361">This example returns `true` only if all the style bits are set to `true`.</span></span>  
  
 [!code-cpp[Windows.Forms.ControlMembers6#4](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CPP/controlmembers6.cpp#4)]
 [!code-csharp[Windows.Forms.ControlMembers6#4](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CS/controlmembers6.cs#4)]
 [!code-vb[Windows.Forms.ControlMembers6#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/VB/controlmembers6.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.ControlStyles" />
      </Docs>
    </Member>
    <Member MemberName="GetTopLevel">
      <MemberSignature Language="C#" Value="protected bool GetTopLevel ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool GetTopLevel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetTopLevel" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetTopLevel () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool GetTopLevel();" />
      <MemberSignature Language="F#" Value="member this.GetTopLevel : unit -&gt; bool" Usage="control.GetTopLevel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6dc4f-1362">コントロールがトップレベル コントロールかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1362">Determines if the control is a top-level control.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-1363">コントロールがトップレベル コントロールである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1363"><see langword="true" /> if the control is a top-level control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.SetTopLevel(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.GiveFeedbackEventHandler GiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.GiveFeedbackEventHandler GiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.GiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::GiveFeedbackEventHandler ^ GiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.GiveFeedback : System.Windows.Forms.GiveFeedbackEventHandler " Usage="member this.GiveFeedback : System.Windows.Forms.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1364">ドラッグ操作中に発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1364">Occurs during a drag operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1365"><xref:System.Windows.Forms.Control.GiveFeedback> イベントは、ドラッグアンドドロップ操作が開始されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1365">The <xref:System.Windows.Forms.Control.GiveFeedback> event is raised when a drag-and-drop operation is started.</span></span> <span data-ttu-id="6dc4f-1366"><xref:System.Windows.Forms.Control.GiveFeedback> イベントの場合、ドラッグイベントのソースは、ドラッグアンドドロップ操作中にユーザーに視覚的なフィードバックを提供するために、マウスポインターの外観を変更することができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1366">With the <xref:System.Windows.Forms.Control.GiveFeedback> event, the source of a drag event can modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation.</span></span>  
  
 <span data-ttu-id="6dc4f-1367">ドラッグ アンド ドロップ操作関連のイベントがどのように、いつ発生するかについて次に示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1367">The following describes how and when events related to drag-and-drop operations are raised.</span></span>  
  
 <span data-ttu-id="6dc4f-1368"><xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッドは、現在のカーソル位置の下にあるコントロールを決定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1368">The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method determines the control under the current cursor location.</span></span> <span data-ttu-id="6dc4f-1369">次に、コントロールが有効なドロップ先であるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1369">It then checks to see if the control is a valid drop target.</span></span>  
  
 <span data-ttu-id="6dc4f-1370">コントロールが有効なドロップ先である場合、ドラッグアンドドロップ効果が指定された状態で <xref:System.Windows.Forms.Control.GiveFeedback> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1370">If the control is a valid drop target, the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the drag-and-drop effect specified.</span></span> <span data-ttu-id="6dc4f-1371">ドラッグ アンド ドロップ効果の一覧については、<xref:System.Windows.Forms.DragDropEffects> 列挙体を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1371">For a list of drag-and-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
 <span data-ttu-id="6dc4f-1372">マウス カーソルの位置、キーボードの状態、およびマウス ボタンの状態の変更が監視されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1372">Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.</span></span>  
  
-   <span data-ttu-id="6dc4f-1373">ユーザーがウィンドウの外に移動した場合、<xref:System.Windows.Forms.Control.DragLeave> イベントが生成されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1373">If the user moves out of a window, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
-   <span data-ttu-id="6dc4f-1374">マウスが別のコントロールに移動した場合は、そのコントロールの <xref:System.Windows.Forms.Control.DragEnter> が生成されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1374">If the mouse enters another control, the <xref:System.Windows.Forms.Control.DragEnter> for that control is raised.</span></span>  
  
-   <span data-ttu-id="6dc4f-1375">マウスが移動しても同じコントロール内の場合は、<xref:System.Windows.Forms.Control.DragOver> イベントが生成されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1375">If the mouse moves but stays within the same control, the <xref:System.Windows.Forms.Control.DragOver> event is raised.</span></span>  
  
 <span data-ttu-id="6dc4f-1376">キーボードまたはマウスボタンの状態が変化した場合は、<xref:System.Windows.Forms.Control.QueryContinueDrag> イベントが発生し、ドラッグを続行するか、データを削除するか、またはイベントの <xref:System.Windows.Forms.QueryContinueDragEventArgs>の <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> プロパティの値に基づいて操作をキャンセルするかが決定されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1376">If there is a change in the keyboard or mouse button state, the <xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event's <xref:System.Windows.Forms.QueryContinueDragEventArgs>.</span></span>  
  
-   <span data-ttu-id="6dc4f-1377"><xref:System.Windows.Forms.DragAction> の値が `Continue`場合は、操作を続行するために <xref:System.Windows.Forms.Control.DragOver> イベントが発生し、適切な視覚的フィードバックを設定できるように、新しい効果を使用して <xref:System.Windows.Forms.Control.GiveFeedback> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1377">If the value of <xref:System.Windows.Forms.DragAction> is `Continue`, the <xref:System.Windows.Forms.Control.DragOver> event is raised to continue the operation and the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the new effect so appropriate visual feedback can be set.</span></span> <span data-ttu-id="6dc4f-1378">有効なドロップ効果の一覧については、<xref:System.Windows.Forms.DragDropEffects> 列挙体を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1378">For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6dc4f-1379"><xref:System.Windows.Forms.Control.DragOver> イベントと <xref:System.Windows.Forms.Control.GiveFeedback> イベントがペアになっているため、マウスがドロップ先の上に移動すると、マウスの位置に関する最新のフィードバックがユーザーに与えられます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1379">The <xref:System.Windows.Forms.Control.DragOver> and <xref:System.Windows.Forms.Control.GiveFeedback> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.</span></span>  
  
-   <span data-ttu-id="6dc4f-1380"><xref:System.Windows.Forms.DragAction> の値が `Drop`場合は、ドロップ効果の値がソースに返されるため、ソースアプリケーションはソースデータに対して適切な操作を実行できます。たとえば、操作が移動だった場合は、データを切り取ります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1380">If the value of <xref:System.Windows.Forms.DragAction> is `Drop`, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</span></span>  
  
-   <span data-ttu-id="6dc4f-1381"><xref:System.Windows.Forms.DragAction> の値が `Cancel`場合、<xref:System.Windows.Forms.Control.DragLeave> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1381">If the value of <xref:System.Windows.Forms.DragAction> is `Cancel`, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
 <span data-ttu-id="6dc4f-1382">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1382">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1383">次のコード例は、2つの <xref:System.Windows.Forms.ListBox> コントロール間のドラッグアンドドロップ操作を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1383">The following code example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls.</span></span> <span data-ttu-id="6dc4f-1384">この例では、ドラッグ操作の開始時に <xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1384">The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts.</span></span> <span data-ttu-id="6dc4f-1385">マウスが <xref:System.Windows.Forms.Control.MouseDown> イベント中にマウスの位置から <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> を超えて移動した場合、ドラッグ操作が開始されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1385">The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event.</span></span> <span data-ttu-id="6dc4f-1386"><xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> メソッドは、`MouseDown` イベント中にドラッグする項目のインデックスを決定するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1386">The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.</span></span>  
  
 <span data-ttu-id="6dc4f-1387">この例では、ドラッグアンドドロップ操作にカスタムカーソルを使用する方法も示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1387">The example also demonstrates using custom cursors for the drag-and-drop operation.</span></span> <span data-ttu-id="6dc4f-1388">この例では、2つのカーソルファイル (`3dwarro.cur` と `3dwno.cur`) がアプリケーションディレクトリに存在する必要があります。これには、それぞれカスタムドラッグアンドドロップカーソルを使用します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1388">The example requires that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively.</span></span> <span data-ttu-id="6dc4f-1389">`UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> がオンになっている場合は、カスタムカーソルが使用されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1389">The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked.</span></span> <span data-ttu-id="6dc4f-1390">カスタムカーソルは <xref:System.Windows.Forms.Control.GiveFeedback> イベントハンドラーで設定されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1390">The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.</span></span>  
  
 <span data-ttu-id="6dc4f-1391">キーボードの状態は、右 `ListBox`の <xref:System.Windows.Forms.Control.DragOver> イベントハンドラーで評価され、SHIFT、CTRL、ALT、CTRL + ALT の各キーの状態に基づいてドラッグ操作がどのように行われるかを決定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1391">The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys.</span></span> <span data-ttu-id="6dc4f-1392">ドロップが発生する `ListBox` 内の場所は、`DragOver` イベント中にも決定されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1392">The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event.</span></span> <span data-ttu-id="6dc4f-1393">削除するデータが `String`でない場合、<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> は <xref:System.Windows.Forms.DragDropEffects>で `None` に設定されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1393">If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> is set to `None` in <xref:System.Windows.Forms.DragDropEffects>.</span></span> <span data-ttu-id="6dc4f-1394">最後に、ドロップの状態が `DropLocationLabel`<xref:System.Windows.Forms.Label>に表示されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1394">Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.</span></span>  
  
 <span data-ttu-id="6dc4f-1395">右側の `ListBox` にドロップするデータは、<xref:System.Windows.Forms.Control.DragDrop> イベントハンドラーで決定され、`ListBox`内の適切な場所に `String` 値が追加されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1395">The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`.</span></span> <span data-ttu-id="6dc4f-1396">ドラッグ操作がフォームの境界の外に移動した場合、<xref:System.Windows.Forms.Control.QueryContinueDrag> イベントハンドラーでドラッグアンドドロップ操作が取り消されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1396">If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.</span></span>  
  
 <span data-ttu-id="6dc4f-1397">このコード抜粋では、<xref:System.Windows.Forms.Control.GiveFeedback> イベントの使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1397">This code excerpt demonstrates using the <xref:System.Windows.Forms.Control.GiveFeedback> event.</span></span> <span data-ttu-id="6dc4f-1398">完全なコード例については、<xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッドを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1398">See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#3)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event EventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ GotFocus;" />
      <MemberSignature Language="F#" Value="member this.GotFocus : EventHandler " Usage="member this.GotFocus : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1399">コントロールがフォーカスを受け取ると発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1399">Occurs when the control receives focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1400">キーボード (タブ、SHIFT + TAB など) を使用してフォーカスを変更した場合、<xref:System.Windows.Forms.Control.Select%2A> または <xref:System.Windows.Forms.Control.SelectNextControl%2A> メソッドを呼び出した場合、または <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> プロパティを現在のフォームに設定した場合、フォーカスイベントは次の順序で発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1400">When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> property to the current form, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 <span data-ttu-id="6dc4f-1401">マウスを使用するか <xref:System.Windows.Forms.Control.Focus%2A> メソッドを呼び出すことによってフォーカスを変更すると、フォーカスイベントは次の順序で発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1401">When you change the focus by using the mouse or by calling the <xref:System.Windows.Forms.Control.Focus%2A> method, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.LostFocus>  
  
4.  <xref:System.Windows.Forms.Control.Leave>  
  
5.  <xref:System.Windows.Forms.Control.Validating>  
  
6.  <xref:System.Windows.Forms.Control.Validated>  
  
 <span data-ttu-id="6dc4f-1402"><xref:System.Windows.Forms.Control.CausesValidation%2A> プロパティが `false`に設定されている場合、<xref:System.Windows.Forms.Control.Validating> および <xref:System.Windows.Forms.Control.Validated> イベントは抑制されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1402">If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.</span></span>  
  
 <span data-ttu-id="6dc4f-1403">**メモ**<xref:System.Windows.Forms.Control.GotFocus> イベントと <xref:System.Windows.Forms.Control.LostFocus> イベントは、WM_KILLFOCUS および WM_SETFOCUS Windows メッセージに関連付けられている下位レベルのフォーカスイベントです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1403">**Note** The <xref:System.Windows.Forms.Control.GotFocus> and <xref:System.Windows.Forms.Control.LostFocus> events are low-level focus events that are tied to the WM_KILLFOCUS and WM_SETFOCUS Windows messages.</span></span> <span data-ttu-id="6dc4f-1404">通常、<xref:System.Windows.Forms.Control.GotFocus> イベントと <xref:System.Windows.Forms.Control.LostFocus> イベントは <xref:System.Windows.Forms.UICues> を更新する場合、またはカスタムコントロールを作成する場合にのみ使用されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1404">Typically, the <xref:System.Windows.Forms.Control.GotFocus> and <xref:System.Windows.Forms.Control.LostFocus> events are only used when updating <xref:System.Windows.Forms.UICues> or when writing custom controls.</span></span> <span data-ttu-id="6dc4f-1405">代わりに、<xref:System.Windows.Forms.Form.Activated> イベントと <xref:System.Windows.Forms.Form.Deactivate> イベントを使用する <xref:System.Windows.Forms.Form> クラスを除くすべてのコントロールに、<xref:System.Windows.Forms.Control.Enter> イベントと <xref:System.Windows.Forms.Control.Leave> イベントを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1405">Instead the <xref:System.Windows.Forms.Control.Enter> and <xref:System.Windows.Forms.Control.Leave> events should be used for all controls except the <xref:System.Windows.Forms.Form> class, which uses the <xref:System.Windows.Forms.Form.Activated> and <xref:System.Windows.Forms.Form.Deactivate> events.</span></span> <span data-ttu-id="6dc4f-1406"><xref:System.Windows.Forms.Control.GotFocus> イベントと <xref:System.Windows.Forms.Control.LostFocus> イベントの詳細については、 [WM_SETFOCUS](/windows/win32/inputdev/wm-setfocus)と[WM_KILLFOCUS](/windows/win32/inputdev/wm-killfocus)のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1406">For more information about the <xref:System.Windows.Forms.Control.GotFocus> and <xref:System.Windows.Forms.Control.LostFocus> events, see the [WM_SETFOCUS](/windows/win32/inputdev/wm-setfocus) and [WM_KILLFOCUS](/windows/win32/inputdev/wm-killfocus) topics.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="6dc4f-1407"><xref:System.Windows.Forms.Control.Enter>、<xref:System.Windows.Forms.Control.GotFocus>、<xref:System.Windows.Forms.Control.Leave>、<xref:System.Windows.Forms.Control.LostFocus>、<xref:System.Windows.Forms.Control.Validating>、または <xref:System.Windows.Forms.Control.Validated> のイベントハンドラー内からフォーカスを設定しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1407">Do not attempt to set focus from within the <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>, <xref:System.Windows.Forms.Control.Validating>, or <xref:System.Windows.Forms.Control.Validated> event handlers.</span></span> <span data-ttu-id="6dc4f-1408">これにより、アプリケーションまたはオペレーティングシステムが応答を停止する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1408">Doing so can cause your application or the operating system to stop responding.</span></span> <span data-ttu-id="6dc4f-1409">詳細については、 [WM_KILLFOCUS](/windows/win32/inputdev/wm-killfocus)のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1409">For more information, see the [WM_KILLFOCUS](/windows/win32/inputdev/wm-killfocus) topic.</span></span>  
  
 <span data-ttu-id="6dc4f-1410">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1410">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1411">このメンバーの使用例を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1411">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="6dc4f-1412">この例では、イベントハンドラーは、<xref:System.Windows.Forms.Control.GotFocus> イベントの発生を報告します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1412">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.GotFocus> event.</span></span> <span data-ttu-id="6dc4f-1413">このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1413">This report helps you to learn when the event occurs and can assist you in debugging.</span></span>  
  
 <span data-ttu-id="6dc4f-1414">コード例を実行するには、<xref:System.Windows.Forms.Button> や <xref:System.Windows.Forms.ComboBox>などの <xref:System.Windows.Forms.Control>から継承する型のインスタンスを含むプロジェクトに貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1414">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="6dc4f-1415">次に、インスタンスに `Control1` という名前を付け、イベントハンドラーが <xref:System.Windows.Forms.Control.GotFocus> イベントに関連付けられていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1415">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.GotFocus> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#47](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#47)]
 [!code-vb[System.Windows.Forms.EventExamples#47](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#47)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.LostFocus" />
        <altmember cref="E:System.Windows.Forms.Control.Enter" />
        <altmember cref="E:System.Windows.Forms.Form.Activated" />
        <altmember cref="M:System.Windows.Forms.Form.Activate" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Forms.Control.Handle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IWin32Window.Handle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-515)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1416">コントロールのバインド先のウィンドウ ハンドルを取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1416">Gets the window handle that the control is bound to.</span></span></summary>
        <value><span data-ttu-id="6dc4f-1417">コントロールのウィンドウ ハンドル (<see cref="T:System.IntPtr" />) を格納する <see langword="HWND" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1417">An <see cref="T:System.IntPtr" /> that contains the window handle (<see langword="HWND" />) of the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1418"><xref:System.Windows.Forms.Control.Handle%2A> プロパティの値は Windows `HWND`です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1418">The value of the <xref:System.Windows.Forms.Control.Handle%2A> property is a Windows `HWND`.</span></span> <span data-ttu-id="6dc4f-1419">ハンドルがまだ作成されていない場合、このプロパティを参照すると、ハンドルが強制的に作成されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1419">If the handle has not yet been created, referencing this property will force the handle to be created.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1420">次のコード例は、<xref:System.Windows.Forms.ControlPaint.DrawFocusRectangle%2A?displayProperty=nameWithType> と <xref:System.Windows.Forms.Control.Handle%2A> プロパティの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1420">The following code example demonstrates using the <xref:System.Windows.Forms.ControlPaint.DrawFocusRectangle%2A?displayProperty=nameWithType> and the <xref:System.Windows.Forms.Control.Handle%2A> property.</span></span> <span data-ttu-id="6dc4f-1421">この例を実行するには、フォームに次のコードを貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1421">To run the example paste the following code in a form.</span></span> <span data-ttu-id="6dc4f-1422">`Button1` と `Button2` という名前の2つのボタンをフォームに追加し、すべてのイベントがイベントハンドラーに接続されていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1422">Add two buttons named `Button1` and `Button2` to the form and ensure all events are connected to their event handlers.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ControlPaint1#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlPaint1/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ControlPaint1#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlPaint1/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ControlPaint1#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlPaint1/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="HandleCreated">
      <MemberSignature Language="C#" Value="public event EventHandler HandleCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler HandleCreated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.HandleCreated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event HandleCreated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ HandleCreated;" />
      <MemberSignature Language="F#" Value="member this.HandleCreated : EventHandler " Usage="member this.HandleCreated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1423">コントロールに対してハンドルが作成されると発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1423">Occurs when a handle is created for the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1424"><xref:System.Windows.Forms.Control> が初めて表示されるときにハンドルが作成されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1424">A handle is created when the <xref:System.Windows.Forms.Control> is displayed for the first time.</span></span> <span data-ttu-id="6dc4f-1425">たとえば、<xref:System.Windows.Forms.Control.Visible%2A> が `false`に設定されている <xref:System.Windows.Forms.Control> を作成した場合、<xref:System.Windows.Forms.Control.Visible%2A> が `true`に設定されるまで、<xref:System.Windows.Forms.Control.HandleCreated> イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1425">For example, if a <xref:System.Windows.Forms.Control> is created that has <xref:System.Windows.Forms.Control.Visible%2A> set to `false`, the <xref:System.Windows.Forms.Control.HandleCreated> event will not be raised until <xref:System.Windows.Forms.Control.Visible%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="6dc4f-1426">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1426">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1427">このメンバーの使用例を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1427">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="6dc4f-1428">この例では、イベントハンドラーは、<xref:System.Windows.Forms.Control.HandleCreated> イベントの発生を報告します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1428">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.HandleCreated> event.</span></span> <span data-ttu-id="6dc4f-1429">このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1429">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="6dc4f-1430">複数のイベントまたは頻繁に発生するイベントについてレポートするには、<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> を <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> に置き換えるか、複数行 <xref:System.Windows.Forms.TextBox>にメッセージを追加することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1430">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="6dc4f-1431">コード例を実行するには、<xref:System.Windows.Forms.Button> や <xref:System.Windows.Forms.ComboBox>などの <xref:System.Windows.Forms.Control>から継承する型のインスタンスを含むプロジェクトに貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1431">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="6dc4f-1432">次に、インスタンスに `Control1` という名前を付け、イベントハンドラーが <xref:System.Windows.Forms.Control.HandleCreated> イベントに関連付けられていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1432">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.HandleCreated> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#37](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#37)]
 [!code-vb[System.Windows.Forms.EventExamples#37](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="HandleDestroyed">
      <MemberSignature Language="C#" Value="public event EventHandler HandleDestroyed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler HandleDestroyed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.HandleDestroyed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event HandleDestroyed As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ HandleDestroyed;" />
      <MemberSignature Language="F#" Value="member this.HandleDestroyed : EventHandler " Usage="member this.HandleDestroyed : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1433">コントロールのハンドルが破棄されているときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1433">Occurs when the control's handle is in the process of being destroyed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1434"><xref:System.Windows.Forms.Control.HandleDestroyed> イベント中、コントロールは引き続き有効な Windows コントロールであり、<xref:System.Windows.Forms.Control.RecreateHandle%2A> メソッドを呼び出すことによって <xref:System.Windows.Forms.Control.Handle%2A> を再作成できます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1434">During the <xref:System.Windows.Forms.Control.HandleDestroyed> event, the control is still a valid Windows control and the <xref:System.Windows.Forms.Control.Handle%2A> can be recreated by calling the <xref:System.Windows.Forms.Control.RecreateHandle%2A> method.</span></span>  
  
 <span data-ttu-id="6dc4f-1435">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1435">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1436">このメンバーの使用例を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1436">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="6dc4f-1437">この例では、イベントハンドラーは、<xref:System.Windows.Forms.Control.HandleDestroyed> イベントの発生を報告します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1437">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.HandleDestroyed> event.</span></span> <span data-ttu-id="6dc4f-1438">このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1438">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="6dc4f-1439">複数のイベントまたは頻繁に発生するイベントについてレポートするには、<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> を <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> に置き換えるか、複数行 <xref:System.Windows.Forms.TextBox>にメッセージを追加することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1439">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="6dc4f-1440">コード例を実行するには、<xref:System.Windows.Forms.Button> や <xref:System.Windows.Forms.ComboBox>などの <xref:System.Windows.Forms.Control>から継承する型のインスタンスを含むプロジェクトに貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1440">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="6dc4f-1441">次に、インスタンスに `Control1` という名前を付け、イベントハンドラーが <xref:System.Windows.Forms.Control.HandleDestroyed> イベントに関連付けられていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1441">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.HandleDestroyed> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#38](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#38)]
 [!code-vb[System.Windows.Forms.EventExamples#38](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#38)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="HasChildren">
      <MemberSignature Language="C#" Value="public bool HasChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.HasChildren" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasChildren As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasChildren { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasChildren : bool" Usage="System.Windows.Forms.Control.HasChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1442">コントロールに 1 つ以上の子コントロールが格納されているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1442">Gets a value indicating whether the control contains one or more child controls.</span></span></summary>
        <value><span data-ttu-id="6dc4f-1443">コントロールに 1 つ以上の子コントロールが格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1443"><see langword="true" /> if the control contains one or more child controls; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1444"><xref:System.Windows.Forms.Control.Controls%2A> コレクションの <xref:System.Windows.Forms.Layout.ArrangedElementCollection.Count%2A> が0よりも大きい場合、<xref:System.Windows.Forms.Control.HasChildren%2A> プロパティは `true`を返します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1444">If the <xref:System.Windows.Forms.Control.Controls%2A> collection has a <xref:System.Windows.Forms.Layout.ArrangedElementCollection.Count%2A> greater than zero, the <xref:System.Windows.Forms.Control.HasChildren%2A> property will return `true`.</span></span> <span data-ttu-id="6dc4f-1445">コントロールに子がない場合、<xref:System.Windows.Forms.Control.HasChildren%2A> プロパティにアクセスしても、<xref:System.Windows.Forms.Control.ControlCollection> は強制的に作成されません。そのため、このプロパティを参照すると、コントロールのツリーをウォークするときにパフォーマンス上の利点が得られます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1445">Accessing the <xref:System.Windows.Forms.Control.HasChildren%2A> property does not force the creation of a <xref:System.Windows.Forms.Control.ControlCollection> if the control has no children, so referencing this property can provide a performance benefit when walking a tree of controls.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1446">次のコード例では、コントロールの <xref:System.Windows.Forms.Control.BackColor%2A> と <xref:System.Windows.Forms.Control.ForeColor%2A> を既定のシステムカラーに設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1446">The following code example sets the <xref:System.Windows.Forms.Control.BackColor%2A> and <xref:System.Windows.Forms.Control.ForeColor%2A> of the controls to the default system colors.</span></span> <span data-ttu-id="6dc4f-1447">コントロールに子コントロールがある場合、コードは再帰的にそれ自体を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1447">The code recursively calls itself if the control has any child controls.</span></span> <span data-ttu-id="6dc4f-1448">このコード例では、少なくとも1つの子コントロールを持つ <xref:System.Windows.Forms.Form> が必要です。ただし、<xref:System.Windows.Forms.Panel> や <xref:System.Windows.Forms.GroupBox>のように、独自の子コントロールを持つ子コンテナーコントロールは、再帰のデモンストレーションをより適切に行うことができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1448">This code example requires that you have a <xref:System.Windows.Forms.Form> with at least one child control; however, a child container control, like a <xref:System.Windows.Forms.Panel> or <xref:System.Windows.Forms.GroupBox>, with its own child control(s) would better demonstrate the recursion.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#1)]
 [!code-csharp[Windows.Forms.Control Properties#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#1)]
 [!code-vb[Windows.Forms.Control Properties#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Layout.ArrangedElementCollection.Count" />
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public int Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Height" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Height" />
      <MemberSignature Language="VB.NET" Value="Public Property Height As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Height { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Height : int with get, set" Usage="System.Windows.Forms.Control.Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1449">コントロールの高さを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1449">Gets or sets the height of the control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-1450">コントロールの高さ (ピクセル単位)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1450">The height of the control in pixels.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1451"><xref:System.Windows.Forms.Control.Height%2A> プロパティと <xref:System.Windows.Forms.Control.Top%2A> プロパティ値を変更すると、コントロールの <xref:System.Windows.Forms.Control.Bottom%2A> プロパティ値が変更されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1451">Changes made to the <xref:System.Windows.Forms.Control.Height%2A> and <xref:System.Windows.Forms.Control.Top%2A> property values cause the <xref:System.Windows.Forms.Control.Bottom%2A> property value of the control to change.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-1452">派生コントロール <xref:System.Windows.Forms.Splitter> の高さの最小値は1ピクセルです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1452">The minimum height for the derived control <xref:System.Windows.Forms.Splitter> is one pixel.</span></span> <span data-ttu-id="6dc4f-1453"><xref:System.Windows.Forms.Splitter> コントロールの既定の高さは3ピクセルです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1453">The default height for the <xref:System.Windows.Forms.Splitter> control is three pixels.</span></span> <span data-ttu-id="6dc4f-1454"><xref:System.Windows.Forms.Splitter> コントロールの高さを1未満の値に設定すると、プロパティ値が既定の高さにリセットされます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1454">Setting the height of the <xref:System.Windows.Forms.Splitter> control to a value less than one will reset the property value to the default height.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1455">次のコード例では、フォームに3つの <xref:System.Windows.Forms.Button> コントロールを作成し、さまざまなサイズ関連のプロパティと場所に関連するプロパティを使用して、サイズと位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1455">The following code example creates three <xref:System.Windows.Forms.Button> controls on a form and sets their size and location by using the various size-related and location-related properties.</span></span> <span data-ttu-id="6dc4f-1456">この例では、幅と高さが300ピクセル以上の <xref:System.Windows.Forms.Form> が必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1456">This example requires that you have a <xref:System.Windows.Forms.Form> that has a width and height of at least 300 pixels.</span></span>  
  
 [!code-cpp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CPP/controlsizelocation.cpp#1)]
 [!code-csharp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CS/controlsizelocation.cs#1)]
 [!code-vb[Windows.Forms.Control SizeLocation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/VB/controlsizelocation.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Bounds" />
        <altmember cref="P:System.Windows.Forms.Control.Width" />
        <altmember cref="P:System.Drawing.Size.Height" />
      </Docs>
    </Member>
    <Member MemberName="HelpRequested">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HelpEventHandler HelpRequested;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HelpEventHandler HelpRequested" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.HelpRequested" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event HelpRequested As HelpEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HelpEventHandler ^ HelpRequested;" />
      <MemberSignature Language="F#" Value="member this.HelpRequested : System.Windows.Forms.HelpEventHandler " Usage="member this.HelpRequested : System.Windows.Forms.HelpEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HelpEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1457">ユーザーがコントロールのヘルプを要求すると発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1457">Occurs when the user requests help for a control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1458"><xref:System.Windows.Forms.Control.HelpRequested> イベントは、通常、ユーザーが F1 キーを押すか、関連する状況依存のヘルプボタンがクリックされると発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1458">The <xref:System.Windows.Forms.Control.HelpRequested> event is commonly raised when the user presses the F1 key or an associated context-sensitive help button is clicked.</span></span>  
  
 <span data-ttu-id="6dc4f-1459">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1459">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1460">次のコード例は、4つのアドレスフィールドを含むフォームにカスタムヘルプコンテンツを表示するための <xref:System.Windows.Forms.Control.HelpRequested> イベントの処理を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1460">The following code example demonstrates handling the <xref:System.Windows.Forms.Control.HelpRequested> event to display custom Help content on a form containing four address fields.</span></span> <span data-ttu-id="6dc4f-1461"><xref:System.Windows.Forms.Control.HelpRequested> イベントは、アドレスフィールドにフォーカスがある F1 キーを押すか、または状況依存のヘルプボタンを使用してアドレスフィールドのヘルプカーソルをクリックすることによって発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1461">The <xref:System.Windows.Forms.Control.HelpRequested> event is raised either by pressing the F1 key with the focus in an address field, or by the using the context-sensitive Help button and clicking the Help cursor on an address field.</span></span> <span data-ttu-id="6dc4f-1462">`HelpRequested` イベントが処理されることを示すには、<xref:System.Windows.Forms.HelpEventArgs.Handled%2A> プロパティが true に設定されています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1462">The <xref:System.Windows.Forms.HelpEventArgs.Handled%2A> property is set to true to indicate that the `HelpRequested` event is handled.</span></span> <span data-ttu-id="6dc4f-1463">また、この例では、<xref:System.Windows.Forms.Control.Tag%2A?displayProperty=nameWithType> プロパティにヘルプテキストを格納する方法も示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1463">The example also demonstrates storing the Help text in the <xref:System.Windows.Forms.Control.Tag%2A?displayProperty=nameWithType> property.</span></span>  
  
 [!code-cpp[System.Windows.Forms.HelpEventHandler#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.HelpEventHandler/CPP/helpevent.cpp#1)]
 [!code-csharp[System.Windows.Forms.HelpEventHandler#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HelpEventHandler/CS/helpevent.cs#1)]
 [!code-vb[System.Windows.Forms.HelpEventHandler#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HelpEventHandler/VB/helpevent.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)" />
        <altmember cref="T:System.Windows.Forms.HelpProvider" />
        <altmember cref="T:System.Windows.Forms.Help" />
      </Docs>
    </Member>
    <Member MemberName="Hide">
      <MemberSignature Language="C#" Value="public void Hide ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Hide() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Hide" />
      <MemberSignature Language="VB.NET" Value="Public Sub Hide ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Hide();" />
      <MemberSignature Language="F#" Value="member this.Hide : unit -&gt; unit" Usage="control.Hide " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6dc4f-1464">コントロールをユーザーに対して非表示にします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1464">Conceals the control from the user.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1465">コントロールを非表示にすることは、<xref:System.Windows.Forms.Control.Visible%2A> プロパティを `false`に設定することと同じです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1465">Hiding the control is equivalent to setting the <xref:System.Windows.Forms.Control.Visible%2A> property to `false`.</span></span> <span data-ttu-id="6dc4f-1466"><xref:System.Windows.Forms.Control.Hide%2A> メソッドが呼び出されると、<xref:System.Windows.Forms.Control.Show%2A> メソッドが呼び出されるまで、<xref:System.Windows.Forms.Control.Visible%2A> プロパティは `false` の値を返します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1466">After the <xref:System.Windows.Forms.Control.Hide%2A> method is called, the <xref:System.Windows.Forms.Control.Visible%2A> property returns a value of `false` until the <xref:System.Windows.Forms.Control.Show%2A> method is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1467">次のコード例では、ボタンがクリックされたときに CTRL キーが押された場合、ボタンが非表示になります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1467">The following code example hides a button if the CTRL key is pressed when the button is clicked.</span></span> <span data-ttu-id="6dc4f-1468">この例では、<xref:System.Windows.Forms.Form>に `button1` という名前の <xref:System.Windows.Forms.Button> が必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1468">This example requires that you have a <xref:System.Windows.Forms.Button> named `button1` on a <xref:System.Windows.Forms.Form>.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Members4#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#2)]
 [!code-csharp[Windows.Forms.Control Members4#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#2)]
 [!code-vb[Windows.Forms.Control Members4#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Visible" />
        <altmember cref="M:System.Windows.Forms.Control.Show" />
      </Docs>
    </Member>
    <Member MemberName="ImeMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImeMode ImeMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImeMode ImeMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ImeMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ImeMode As ImeMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ImeMode ImeMode { System::Windows::Forms::ImeMode get(); void set(System::Windows::Forms::ImeMode value); };" />
      <MemberSignature Language="F#" Value="member this.ImeMode : System.Windows.Forms.ImeMode with get, set" Usage="System.Windows.Forms.Control.ImeMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1469">コントロールの IME (Input Method Editor) モードを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1469">Gets or sets the Input Method Editor (IME) mode of the control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-1470"><see cref="T:System.Windows.Forms.ImeMode" /> 値のいずれか 1 つです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1470">One of the <see cref="T:System.Windows.Forms.ImeMode" /> values.</span></span> <span data-ttu-id="6dc4f-1471">既定では、 <see cref="F:System.Windows.Forms.ImeMode.Inherit" />です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1471">The default is <see cref="F:System.Windows.Forms.ImeMode.Inherit" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1472">IME は、標準のキーボードを使用して、ユーザーが日本語の漢字などの複雑な文字や記号を入力できるようにするプログラムです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1472">An IME is a program that enables users to enter complex characters and symbols, such as Japanese Kanji characters, using a standard keyboard.</span></span> <span data-ttu-id="6dc4f-1473"><xref:System.Windows.Forms.Control.ImeMode%2A> プロパティは、通常、数値のみを入力することを目的とした <xref:System.Windows.Forms.TextBox> コントロールの <xref:System.Windows.Forms.ImeMode.Off?displayProperty=nameWithType> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1473">The <xref:System.Windows.Forms.Control.ImeMode%2A> property is typically set to <xref:System.Windows.Forms.ImeMode.Off?displayProperty=nameWithType> for a <xref:System.Windows.Forms.TextBox> control that is intended to only enter numeric values.</span></span> <span data-ttu-id="6dc4f-1474"><xref:System.Windows.Forms.Control.ImeMode%2A> プロパティの値は、<xref:System.Windows.Forms.Form> クラスの <xref:System.Windows.Forms.ImeMode.NoControl?displayProperty=nameWithType> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1474">The <xref:System.Windows.Forms.Control.ImeMode%2A> property value is set to <xref:System.Windows.Forms.ImeMode.NoControl?displayProperty=nameWithType> for the <xref:System.Windows.Forms.Form> class.</span></span>  
  
 <span data-ttu-id="6dc4f-1475">入力方式エディターを直接サポートしていないクラスや IME からの直接入力を許可するクラスのほとんどは、このプロパティの値を <xref:System.Windows.Forms.ImeMode.NoControl>に設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1475">Most classes that do not directly support Input Method Editors, or allow direct input from an IME, will set the value of this property to <xref:System.Windows.Forms.ImeMode.NoControl>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6dc4f-1476">プログラムによって <xref:System.Windows.Forms.ImeMode.Disable?displayProperty=nameWithType>に設定されていない限り、ユーザーは <xref:System.Windows.Forms.Control.ImeMode%2A> を対話的に変更できます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1476">The user can interactively change the <xref:System.Windows.Forms.Control.ImeMode%2A> unless it has been programmatically set to <xref:System.Windows.Forms.ImeMode.Disable?displayProperty=nameWithType>.</span></span> <span data-ttu-id="6dc4f-1477">この場合、ユーザーは IME を使用できません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1477">In this case, the user will not be able to use the IME.</span></span>  
>   
>  <span data-ttu-id="6dc4f-1478">グローバル入力モードが有効になっている場合、Windows 8 では <xref:System.Windows.Forms.Control.ImeMode%2A> プロパティは無視されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1478">The <xref:System.Windows.Forms.Control.ImeMode%2A> property is ignored on Windows 8 when the global input mode is in effect.</span></span> <span data-ttu-id="6dc4f-1479">詳細については、「[[テキスト入力の切り替え] をスレッド単位からユーザーごとに変更する](https://go.microsoft.com/fwlink/?LinkID=256509)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1479">For more info, see [Switch Text Input Changed from Per-Thread to Per-User](https://go.microsoft.com/fwlink/?LinkID=256509).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="6dc4f-1480">代入された値が、<see cref="T:System.Windows.Forms.ImeMode" /> 列挙値ではありません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1480">The assigned value is not one of the <see cref="T:System.Windows.Forms.ImeMode" /> enumeration values.</span></span></exception>
        <altmember cref="T:System.Windows.Forms.ImeMode" />
        <altmember cref="P:System.Windows.Forms.Control.DefaultImeMode" />
      </Docs>
    </Member>
    <Member MemberName="ImeModeBase">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.ImeMode ImeModeBase { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImeMode ImeModeBase" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ImeModeBase" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Property ImeModeBase As ImeMode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::ImeMode ImeModeBase { System::Windows::Forms::ImeMode get(); void set(System::Windows::Forms::ImeMode value); };" />
      <MemberSignature Language="F#" Value="member this.ImeModeBase : System.Windows.Forms.ImeMode with get, set" Usage="System.Windows.Forms.Control.ImeModeBase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1481">コントロールの IME モードを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1481">Gets or sets the IME mode of a control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-1482">コントロールの IME モード。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1482">The IME mode of the control.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImeModeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ImeModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ImeModeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ImeModeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ImeModeChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ImeModeChanged;" />
      <MemberSignature Language="F#" Value="member this.ImeModeChanged : EventHandler " Usage="member this.ImeModeChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1483"><see cref="P:System.Windows.Forms.Control.ImeMode" /> プロパティが変更された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1483">Occurs when the <see cref="P:System.Windows.Forms.Control.ImeMode" /> property has changed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1484">このイベントは、<xref:System.Windows.Forms.Control.ImeMode%2A> プロパティがプログラムによる変更または対話によって変更された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1484">This event is raised if the <xref:System.Windows.Forms.Control.ImeMode%2A> property is changed by either a programmatic modification or through interaction.</span></span>  
  
 <span data-ttu-id="6dc4f-1485">入力方式マネージャーをサポートしていないコントロールは、このイベントを発生させません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1485">Controls that do not support Input Method Managers will never raise this event.</span></span>  
  
 <span data-ttu-id="6dc4f-1486">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1486">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1487">次のコード例は、<xref:System.Windows.Forms.Control.Text%2A> プロパティの値が変更されたときに実行されるイベントハンドラーです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1487">The following code example is an event handler that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="6dc4f-1488"><xref:System.Windows.Forms.Control> クラスには、対応する*propertyname*値が変更されたときに発生する名前パターン*PropertyName*`Changed` を持ついくつかのメソッドがあります (*propertyname*は対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1488">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern *PropertyName*`Changed` that are raised when the corresponding *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="6dc4f-1489">次のコード例では、通貨データを表示する <xref:System.Windows.Forms.TextBox> の <xref:System.Windows.Forms.Control.ForeColor%2A> を変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1489">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data.</span></span> <span data-ttu-id="6dc4f-1490">この例では、テキストを10進数に変換し、数値が負の場合は <xref:System.Windows.Forms.Control.ForeColor%2A> を <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> に変更し、数値が正の値の場合は <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> に変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1490">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="6dc4f-1491">この例では、<xref:System.Windows.Forms.TextBox>を含む <xref:System.Windows.Forms.Form> が必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1491">This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CPP/propertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CS/propertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/VB/propertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.ImeMode" />
        <altmember cref="T:System.Windows.Forms.ImeMode" />
      </Docs>
    </Member>
    <Member MemberName="InitLayout">
      <MemberSignature Language="C#" Value="protected virtual void InitLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.InitLayout" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub InitLayout ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InitLayout();" />
      <MemberSignature Language="F#" Value="abstract member InitLayout : unit -&gt; unit&#xA;override this.InitLayout : unit -&gt; unit" Usage="control.InitLayout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6dc4f-1492">コントロールが別のコンテナーに追加された後、呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1492">Called after the control has been added to another container.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1493"><xref:System.Windows.Forms.Control.InitLayout%2A> メソッドは、コンテナーにコントロールを追加した直後に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1493">The <xref:System.Windows.Forms.Control.InitLayout%2A> method is called immediately after adding a control to a container.</span></span> <span data-ttu-id="6dc4f-1494"><xref:System.Windows.Forms.Control.InitLayout%2A> メソッドを使用すると、コントロールはそのコンテナーに基づいてレイアウト状態を初期化できます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1494">The <xref:System.Windows.Forms.Control.InitLayout%2A> method enables a control to initialize its layout state based on its container.</span></span> <span data-ttu-id="6dc4f-1495">たとえば、通常は、<xref:System.Windows.Forms.Control.InitLayout%2A> メソッドのコントロールにアンカーとドッキングを適用します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1495">For example, you would typically apply anchoring and docking to the control in the <xref:System.Windows.Forms.Control.InitLayout%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-1496">派生クラスで <see cref="M:System.Windows.Forms.Control.InitLayout" /> をオーバーライドする場合は、コントロールが正しく表示されるように、基本クラスの <see cref="M:System.Windows.Forms.Control.InitLayout" /> メソッドを必ず呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1496">When overriding <see cref="M:System.Windows.Forms.Control.InitLayout" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.InitLayout" /> method so that the control is displayed correctly.</span></span></para></block>
        <altmember cref="P:System.Windows.Forms.Control.Anchor" />
        <altmember cref="P:System.Windows.Forms.Control.Dock" />
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Invalidate">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1497">コントロールの特定の領域を無効にし、そのコントロールに描画メッセージを送信します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1497">Invalidates a specific region of the control and causes a paint message to be sent to the control.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invalidate" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invalidate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate();" />
      <MemberSignature Language="F#" Value="member this.Invalidate : unit -&gt; unit" Usage="control.Invalidate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6dc4f-1498">コントロールのサーフェス全体を無効にし、コントロールを再描画します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1498">Invalidates the entire surface of the control and causes the control to be redrawn.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1499"><xref:System.Windows.Forms.Control.Invalidate%2A> メソッドを呼び出すと、同期描画は強制されません。同期描画を強制するには、<xref:System.Windows.Forms.Control.Invalidate%2A> メソッドを呼び出した後に <xref:System.Windows.Forms.Control.Update%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1499">Calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method does not force a synchronous paint; to force a synchronous paint, call the <xref:System.Windows.Forms.Control.Update%2A> method after calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method.</span></span> <span data-ttu-id="6dc4f-1500">パラメーターを使用せずにこのメソッドを呼び出すと、クライアント領域全体が更新領域に追加されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1500">When this method is called with no parameters, the entire client area is added to the update region.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1501">次のコード例では、ユーザーがイメージまたはイメージファイルをフォームにドラッグし、そのファイルがドロップされた時点で表示されるようにすることができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1501">The following code example enables the user to drag an image or image file onto the form, and have it be displayed at the point on it is dropped.</span></span> <span data-ttu-id="6dc4f-1502"><xref:System.Windows.Forms.Control.OnPaint%2A> メソッドは、フォームが描画されるたびにイメージを再描画するためにオーバーライドされます。それ以外の場合、イメージは次の再描画が行われるまで保持されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1502">The <xref:System.Windows.Forms.Control.OnPaint%2A> method is overridden to repaint the image each time the form is painted; otherwise the image would only persist until the next repainting.</span></span> <span data-ttu-id="6dc4f-1503"><xref:System.Windows.Forms.Control.DragEnter> イベント処理メソッドは、フォームにドラッグされるデータの種類を決定し、適切なフィードバックを提供します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1503">The <xref:System.Windows.Forms.Control.DragEnter> event-handling method determines the type of data being dragged into the form and provides the appropriate feedback.</span></span> <span data-ttu-id="6dc4f-1504">データから <xref:System.Drawing.Image> を作成できる場合は、<xref:System.Windows.Forms.Control.DragDrop> イベント処理メソッドによってフォームに画像が表示されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1504">The <xref:System.Windows.Forms.Control.DragDrop> event-handling method displays the image on the form, if an <xref:System.Drawing.Image> can be created from the data.</span></span> <span data-ttu-id="6dc4f-1505"><xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType> と <xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType> の値は画面座標であるため、この例では <xref:System.Windows.Forms.Control.PointToClient%2A> メソッドを使用してそれらをクライアント座標に変換します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1505">Because the <xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType> and <xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType> values are screen coordinates, the example uses the <xref:System.Windows.Forms.Control.PointToClient%2A> method to convert them to client coordinates.</span></span>  
  
 [!code-cpp[Windows.Forms.Control.DragOperations#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CPP/imagedrag.cpp#1)]
 [!code-csharp[Windows.Forms.Control.DragOperations#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CS/imagedrag.cs#1)]
 [!code-vb[Windows.Forms.Control.DragOperations#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/VB/imagedrag.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Refresh" />
        <altmember cref="M:System.Windows.Forms.Control.Update" />
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate (bool invalidateChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate(bool invalidateChildren) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invalidate(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invalidate (invalidateChildren As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate(bool invalidateChildren);" />
      <MemberSignature Language="F#" Value="member this.Invalidate : bool -&gt; unit" Usage="control.Invalidate invalidateChildren" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="invalidateChildren" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="invalidateChildren"><span data-ttu-id="6dc4f-1506">コントロールの子コントロールを無効にする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1506"><see langword="true" /> to invalidate the control's child controls; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="6dc4f-1507">コントロールの特定の領域を無効にし、そのコントロールに描画メッセージを送信します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1507">Invalidates a specific region of the control and causes a paint message to be sent to the control.</span></span> <span data-ttu-id="6dc4f-1508">オプションとして、そのコントロールに割り当てられている子コントロールも無効にします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1508">Optionally, invalidates the child controls assigned to the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1509"><xref:System.Windows.Forms.Control.Invalidate%2A> メソッドを呼び出すと、同期描画は強制されません。同期描画を強制するには、<xref:System.Windows.Forms.Control.Invalidate%2A> メソッドを呼び出した後に <xref:System.Windows.Forms.Control.Update%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1509">Calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method does not force a synchronous paint; to force a synchronous paint, call the <xref:System.Windows.Forms.Control.Update%2A> method after calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method.</span></span> <span data-ttu-id="6dc4f-1510">パラメーターを使用せずにこのメソッドを呼び出すと、クライアント領域全体が更新領域に追加されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1510">When this method is called with no parameters, the entire client area is added to the update region.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Refresh" />
        <altmember cref="M:System.Windows.Forms.Control.Update" />
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate (System.Drawing.Rectangle rc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate(valuetype System.Drawing.Rectangle rc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invalidate (rc As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate(System::Drawing::Rectangle rc);" />
      <MemberSignature Language="F#" Value="member this.Invalidate : System.Drawing.Rectangle -&gt; unit" Usage="control.Invalidate rc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rc" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rc"><span data-ttu-id="6dc4f-1511">無効化する領域を表す <see cref="T:System.Drawing.Rectangle" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1511">A <see cref="T:System.Drawing.Rectangle" /> that represents the region to invalidate.</span></span></param>
        <summary><span data-ttu-id="6dc4f-1512">コントロールの指定した領域を無効にし (そのコントロールの次の描画操作で再描画される領域を示す更新領域に追加し)、描画メッセージがそのコントロールに送信されるようにします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1512">Invalidates the specified region of the control (adds it to the control's update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1513"><xref:System.Windows.Forms.Control.Invalidate%2A> メソッドを呼び出すと、同期描画は強制されません。同期描画を強制するには、<xref:System.Windows.Forms.Control.Invalidate%2A> メソッドを呼び出した後に <xref:System.Windows.Forms.Control.Update%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1513">Calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method does not force a synchronous paint; to force a synchronous paint, call the <xref:System.Windows.Forms.Control.Update%2A> method after calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method.</span></span> <span data-ttu-id="6dc4f-1514">パラメーターを使用せずにこのメソッドを呼び出すと、クライアント領域全体が更新領域に追加されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1514">When this method is called with no parameters, the entire client area is added to the update region.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Refresh" />
        <altmember cref="M:System.Windows.Forms.Control.Update" />
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate (System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate(class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invalidate (region As Region)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate(System::Drawing::Region ^ region);" />
      <MemberSignature Language="F#" Value="member this.Invalidate : System.Drawing.Region -&gt; unit" Usage="control.Invalidate region" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="region"><span data-ttu-id="6dc4f-1515">無効化する <see cref="T:System.Drawing.Region" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1515">The <see cref="T:System.Drawing.Region" /> to invalidate.</span></span></param>
        <summary><span data-ttu-id="6dc4f-1516">コントロールの指定した領域を無効にし (そのコントロールの次の描画操作で再描画される領域を示す更新領域に追加し)、描画メッセージがそのコントロールに送信されるようにします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1516">Invalidates the specified region of the control (adds it to the control's update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1517"><xref:System.Windows.Forms.Control.Invalidate%2A> メソッドを呼び出すと、同期描画は強制されません。同期描画を強制するには、<xref:System.Windows.Forms.Control.Invalidate%2A> メソッドを呼び出した後に <xref:System.Windows.Forms.Control.Update%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1517">Calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method does not force a synchronous paint; to force a synchronous paint, call the <xref:System.Windows.Forms.Control.Update%2A> method after calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method.</span></span> <span data-ttu-id="6dc4f-1518">パラメーターを使用せずにこのメソッドを呼び出すと、クライアント領域全体が更新領域に追加されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1518">When this method is called with no parameters, the entire client area is added to the update region.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Refresh" />
        <altmember cref="M:System.Windows.Forms.Control.Update" />
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate (System.Drawing.Rectangle rc, bool invalidateChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate(valuetype System.Drawing.Rectangle rc, bool invalidateChildren) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invalidate (rc As Rectangle, invalidateChildren As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate(System::Drawing::Rectangle rc, bool invalidateChildren);" />
      <MemberSignature Language="F#" Value="member this.Invalidate : System.Drawing.Rectangle * bool -&gt; unit" Usage="control.Invalidate (rc, invalidateChildren)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rc" Type="System.Drawing.Rectangle" />
        <Parameter Name="invalidateChildren" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rc"><span data-ttu-id="6dc4f-1519">無効化する領域を表す <see cref="T:System.Drawing.Rectangle" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1519">A <see cref="T:System.Drawing.Rectangle" /> that represents the region to invalidate.</span></span></param>
        <param name="invalidateChildren"><span data-ttu-id="6dc4f-1520">コントロールの子コントロールを無効にする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1520"><see langword="true" /> to invalidate the control's child controls; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="6dc4f-1521">コントロールの指定した領域を無効にし (そのコントロールの次の描画操作で再描画される領域を示す更新領域に追加し)、描画メッセージがそのコントロールに送信されるようにします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1521">Invalidates the specified region of the control (adds it to the control's update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control.</span></span> <span data-ttu-id="6dc4f-1522">オプションとして、そのコントロールに割り当てられている子コントロールも無効にします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1522">Optionally, invalidates the child controls assigned to the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1523"><xref:System.Windows.Forms.Control.Invalidate%2A> メソッドを呼び出すと、同期描画は強制されません。同期描画を強制するには、<xref:System.Windows.Forms.Control.Invalidate%2A> メソッドを呼び出した後に <xref:System.Windows.Forms.Control.Update%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1523">Calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method does not force a synchronous paint; to force a synchronous paint, call the <xref:System.Windows.Forms.Control.Update%2A> method after calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method.</span></span> <span data-ttu-id="6dc4f-1524">パラメーターを使用せずにこのメソッドを呼び出すと、クライアント領域全体が更新領域に追加されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1524">When this method is called with no parameters, the entire client area is added to the update region.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Refresh" />
        <altmember cref="M:System.Windows.Forms.Control.Update" />
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate (System.Drawing.Region region, bool invalidateChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate(class System.Drawing.Region region, bool invalidateChildren) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invalidate (region As Region, invalidateChildren As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate(System::Drawing::Region ^ region, bool invalidateChildren);" />
      <MemberSignature Language="F#" Value="member this.Invalidate : System.Drawing.Region * bool -&gt; unit" Usage="control.Invalidate (region, invalidateChildren)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
        <Parameter Name="invalidateChildren" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="region"><span data-ttu-id="6dc4f-1525">無効化する <see cref="T:System.Drawing.Region" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1525">The <see cref="T:System.Drawing.Region" /> to invalidate.</span></span></param>
        <param name="invalidateChildren"><span data-ttu-id="6dc4f-1526">コントロールの子コントロールを無効にする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1526"><see langword="true" /> to invalidate the control's child controls; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="6dc4f-1527">コントロールの指定した領域を無効にし (そのコントロールの次の描画操作で再描画される領域を示す更新領域に追加し)、描画メッセージがそのコントロールに送信されるようにします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1527">Invalidates the specified region of the control (adds it to the control's update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control.</span></span> <span data-ttu-id="6dc4f-1528">オプションとして、そのコントロールに割り当てられている子コントロールも無効にします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1528">Optionally, invalidates the child controls assigned to the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1529"><xref:System.Windows.Forms.Control.Invalidate%2A> メソッドを呼び出すと、同期描画は強制されません。同期描画を強制するには、<xref:System.Windows.Forms.Control.Invalidate%2A> メソッドを呼び出した後に <xref:System.Windows.Forms.Control.Update%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1529">Calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method does not force a synchronous paint; to force a synchronous paint, call the <xref:System.Windows.Forms.Control.Update%2A> method after calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method.</span></span> <span data-ttu-id="6dc4f-1530">パラメーターを使用せずにこのメソッドを呼び出すと、クライアント領域全体が更新領域に追加されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1530">When this method is called with no parameters, the entire client area is added to the update region.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Refresh" />
        <altmember cref="M:System.Windows.Forms.Control.Update" />
      </Docs>
    </Member>
    <Member MemberName="Invalidated">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.InvalidateEventHandler Invalidated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.InvalidateEventHandler Invalidated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Invalidated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Invalidated As InvalidateEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::InvalidateEventHandler ^ Invalidated;" />
      <MemberSignature Language="F#" Value="member this.Invalidated : System.Windows.Forms.InvalidateEventHandler " Usage="member this.Invalidated : System.Windows.Forms.InvalidateEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.InvalidateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1531">コントロールの表示に再描画が必要なときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1531">Occurs when a control's display requires redrawing.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1532">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1532">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1533">このメンバーの使用例を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1533">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="6dc4f-1534">この例では、イベントハンドラーは、<xref:System.Windows.Forms.Control.Invalidated> イベントの発生を報告します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1534">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.Invalidated> event.</span></span> <span data-ttu-id="6dc4f-1535">このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1535">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="6dc4f-1536">複数のイベントまたは頻繁に発生するイベントについてレポートするには、<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> を <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> に置き換えるか、複数行 <xref:System.Windows.Forms.TextBox>にメッセージを追加することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1536">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="6dc4f-1537">コード例を実行するには、<xref:System.Windows.Forms.Button> や <xref:System.Windows.Forms.ComboBox>などの <xref:System.Windows.Forms.Control>から継承する型のインスタンスを含むプロジェクトに貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1537">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="6dc4f-1538">次に、インスタンスに `Control1` という名前を付け、イベントハンドラーが <xref:System.Windows.Forms.Control.Invalidated> イベントに関連付けられていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1538">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.Invalidated> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#40](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#40)]
 [!code-vb[System.Windows.Forms.EventExamples#40](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#40)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1539">コントロールの基になるウィンドウ ハンドルを所有するスレッド上で、デリゲートを実行します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1539">Executes a delegate on the thread that owns the control's underlying window handle.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invoke(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate -&gt; obj" Usage="control.Invoke method" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="6dc4f-1540">コントロールのスレッド コンテキストで呼び出されるメソッドを格納しているデリゲート。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1540">A delegate that contains a method to be called in the control's thread context.</span></span></param>
        <summary><span data-ttu-id="6dc4f-1541">コントロールの基になっているウィンドウ ハンドルを所有するスレッドに対して指定したデリゲートを実行します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1541">Executes the specified delegate on the thread that owns the control's underlying window handle.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-1542">呼び出されるデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1542">The return value from the delegate being invoked, or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1543">デリゲートは、C またはC++言語の関数ポインターに似ています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1543">Delegates are similar to function pointers in C or C++ languages.</span></span> <span data-ttu-id="6dc4f-1544">デリゲートは、デリゲートオブジェクト内のメソッドへの参照をカプセル化します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1544">Delegates encapsulate a reference to a method inside a delegate object.</span></span> <span data-ttu-id="6dc4f-1545">デリゲートオブジェクトは、参照されたメソッドを呼び出すコードに渡すことができます。また、呼び出すメソッドはコンパイル時に不明な場合があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1545">The delegate object can then be passed to code that calls the referenced method, and the method to be invoked can be unknown at compile time.</span></span> <span data-ttu-id="6dc4f-1546">C またはC++の関数ポインターとは異なり、デリゲートはオブジェクト指向でタイプセーフであり、セキュリティが強化されています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1546">Unlike function pointers in C or C++, delegates are object-oriented, type-safe, and more secure.</span></span>  
  
 <span data-ttu-id="6dc4f-1547"><xref:System.Windows.Forms.Control.Invoke%2A> メソッドは、現在のコントロールの基になるウィンドウハンドルがまだ存在しない場合にウィンドウハンドルを持つコントロールまたはフォームが見つかるまで、コントロールの親チェインを検索します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1547">The <xref:System.Windows.Forms.Control.Invoke%2A> method searches up the control's parent chain until it finds a control or form that has a window handle if the current control's underlying window handle does not exist yet.</span></span> <span data-ttu-id="6dc4f-1548">適切なハンドルが見つからない場合は、<xref:System.Windows.Forms.Control.Invoke%2A> メソッドによって例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1548">If no appropriate handle can be found, the <xref:System.Windows.Forms.Control.Invoke%2A> method will throw an exception.</span></span> <span data-ttu-id="6dc4f-1549">呼び出し中に発生した例外は、呼び出し元に反映されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1549">Exceptions that are raised during the call will be propagated back to the caller.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-1550"><xref:System.Windows.Forms.Control.InvokeRequired%2A> プロパティに加えて、スレッドセーフであるコントロールには、<xref:System.Windows.Forms.Control.Invoke%2A>、<xref:System.Windows.Forms.Control.BeginInvoke%2A>、<xref:System.Windows.Forms.Control.EndInvoke%2A>、および <xref:System.Windows.Forms.Control.CreateGraphics%2A> コントロールのハンドルが既に作成されている場合の4つのメソッドがあります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1550">In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe: <xref:System.Windows.Forms.Control.Invoke%2A>, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A>, and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created.</span></span> <span data-ttu-id="6dc4f-1551">バックグラウンドスレッドでコントロールのハンドルが作成される前に <xref:System.Windows.Forms.Control.CreateGraphics%2A> を呼び出すと、無効なクロススレッド呼び出しが発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1551">Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control's handle has been created on a background thread can cause illegal cross thread calls.</span></span> <span data-ttu-id="6dc4f-1552">その他のすべてのメソッド呼び出しでは、いずれかの invoke メソッドを使用して、コントロールのスレッドへの呼び出しをマーシャリングする必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1552">For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.</span></span>  
  
 <span data-ttu-id="6dc4f-1553">デリゲートは <xref:System.EventHandler>のインスタンスにすることができます。この場合、sender パラメーターにこのコントロールが含まれ、イベントパラメーターには <xref:System.EventArgs.Empty?displayProperty=nameWithType>が含まれます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1553">The delegate can be an instance of <xref:System.EventHandler>, in which case the sender parameter will contain this control, and the event parameter will contain <xref:System.EventArgs.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="6dc4f-1554">デリゲートは、<xref:System.Windows.Forms.MethodInvoker>のインスタンス、または void パラメーターリストを受け取るその他のデリゲートにすることもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1554">The delegate can also be an instance of <xref:System.Windows.Forms.MethodInvoker>, or any other delegate that takes a void parameter list.</span></span> <span data-ttu-id="6dc4f-1555"><xref:System.EventHandler> または <xref:System.Windows.Forms.MethodInvoker> デリゲートの呼び出しは、別の種類のデリゲートの呼び出しよりも高速になります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1555">A call to an <xref:System.EventHandler> or <xref:System.Windows.Forms.MethodInvoker> delegate will be faster than a call to another type of delegate.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-1556">メッセージを処理する必要があるスレッドがアクティブでなくなった場合は、例外がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1556">An exception might be thrown if the thread that should process the message is no longer active.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1557">次のコード例は、デリゲートを含むコントロールを示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1557">The following code example shows controls that contain a delegate.</span></span> <span data-ttu-id="6dc4f-1558">デリゲートは、リストボックスに項目を追加するメソッドをカプセル化します。このメソッドは、フォームの基になるハンドルを所有するスレッド上で実行されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1558">The delegate encapsulates a method that adds items to the list box, and this method is executed on the thread that owns the underlying handle of the form.</span></span> <span data-ttu-id="6dc4f-1559">ユーザーがボタンをクリックすると、`Invoke` はデリゲートを実行します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1559">When the user clicks on the button, `Invoke` runs the delegate.</span></span>  
  
 [!code-cpp[Control_Invoke2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_Invoke2/CPP/control_invoke2.cpp#1)]
 [!code-csharp[Control_Invoke2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_Invoke2/CS/control_invoke2.cs#1)]
 [!code-vb[Control_Invoke2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_Invoke2/VB/control_invoke2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MethodInvoker" />
        <altmember cref="P:System.Windows.Forms.Control.InvokeRequired" />
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, params object[] args);" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, ParamArray args As Object()) As Object" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Invoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member Invoke : Delegate * obj[] -&gt; obj&#xA;override this.Invoke : Delegate * obj[] -&gt; obj" Usage="control.Invoke (method, args)" />
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, object[] args);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, args As Object()) As Object" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Invoke(Delegate ^ method, cli::array &lt;System::Object ^&gt; ^ args);" FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="6dc4f-1560"><paramref name="args" /> パラメーターに指定されている数および型と同じ数および型のパラメーターをとるメソッドへのデリゲート。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1560">A delegate to a method that takes parameters of the same number and type that are contained in the <paramref name="args" /> parameter.</span></span></param>
        <param name="args"><span data-ttu-id="6dc4f-1561">指定したメソッドに引数として渡すオブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1561">An array of objects to pass as arguments to the specified method.</span></span> <span data-ttu-id="6dc4f-1562">メソッドが引数をとらない場合、このパラメーターは <see langword="null" /> にすることができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1562">This parameter can be <see langword="null" /> if the method takes no arguments.</span></span></param>
        <summary><span data-ttu-id="6dc4f-1563">コントロールの基になるウィンドウ ハンドルを所有するスレッド上で、指定した引数リストを使用して、指定したデリゲートを実行します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1563">Executes the specified delegate, on the thread that owns the control's underlying window handle, with the specified list of arguments.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-1564">呼び出されるデリゲートからの戻り値を格納する <see cref="T:System.Object" />。デリゲートに戻り値がない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1564">An <see cref="T:System.Object" /> that contains the return value from the delegate being invoked, or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1565">デリゲートは、C またはC++言語の関数ポインターに似ています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1565">Delegates are similar to function pointers in C or C++ languages.</span></span> <span data-ttu-id="6dc4f-1566">デリゲートは、デリゲートオブジェクト内のメソッドへの参照をカプセル化します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1566">Delegates encapsulate a reference to a method inside a delegate object.</span></span> <span data-ttu-id="6dc4f-1567">デリゲートオブジェクトは、参照されたメソッドを呼び出すコードに渡すことができます。また、呼び出すメソッドはコンパイル時に不明な場合があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1567">The delegate object can then be passed to code that calls the referenced method, and the method to be invoked can be unknown at compile time.</span></span> <span data-ttu-id="6dc4f-1568">C またはC++の関数ポインターとは異なり、デリゲートはオブジェクト指向でタイプセーフであり、セキュリティが強化されています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1568">Unlike function pointers in C or C++, delegates are object-oriented, type-safe, and more secure.</span></span>  
  
 <span data-ttu-id="6dc4f-1569">コントロールのハンドルがまだ存在しない場合、このメソッドは、ウィンドウハンドルを持つコントロールまたはフォームが見つかるまで、コントロールの親チェインを検索します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1569">If the control's handle does not exist yet, this method searches up the control's parent chain until it finds a control or form that does have a window handle.</span></span> <span data-ttu-id="6dc4f-1570">適切なハンドルが見つからない場合、このメソッドは例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1570">If no appropriate handle can be found, this method throws an exception.</span></span> <span data-ttu-id="6dc4f-1571">呼び出し中に発生した例外は、呼び出し元に反映されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1571">Exceptions that are raised during the call will be propagated back to the caller.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-1572"><xref:System.Windows.Forms.Control.InvokeRequired%2A> プロパティに加えて、スレッドセーフであるコントロールには、<xref:System.Windows.Forms.Control.Invoke%2A>、<xref:System.Windows.Forms.Control.BeginInvoke%2A>、<xref:System.Windows.Forms.Control.EndInvoke%2A>、および <xref:System.Windows.Forms.Control.CreateGraphics%2A> コントロールのハンドルが既に作成されている場合の4つのメソッドがあります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1572">In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe: <xref:System.Windows.Forms.Control.Invoke%2A>, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A>, and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created.</span></span> <span data-ttu-id="6dc4f-1573">バックグラウンドスレッドでコントロールのハンドルが作成される前に <xref:System.Windows.Forms.Control.CreateGraphics%2A> を呼び出すと、無効なクロススレッド呼び出しが発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1573">Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control's handle has been created on a background thread can cause illegal cross thread calls.</span></span> <span data-ttu-id="6dc4f-1574">その他のすべてのメソッド呼び出しでは、いずれかの invoke メソッドを使用して、コントロールのスレッドへの呼び出しをマーシャリングする必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1574">For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.</span></span>  
  
 <span data-ttu-id="6dc4f-1575">デリゲートは <xref:System.EventHandler>のインスタンスにすることができます。この場合、sender パラメーターにこのコントロールが含まれ、イベントパラメーターには <xref:System.EventArgs.Empty?displayProperty=nameWithType>が含まれます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1575">The delegate can be an instance of <xref:System.EventHandler>, in which case the sender parameter will contain this control, and the event parameter will contain <xref:System.EventArgs.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="6dc4f-1576">デリゲートは、<xref:System.Windows.Forms.MethodInvoker>のインスタンス、または void パラメーターリストを受け取るその他のデリゲートにすることもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1576">The delegate can also be an instance of <xref:System.Windows.Forms.MethodInvoker>, or any other delegate that takes a void parameter list.</span></span> <span data-ttu-id="6dc4f-1577"><xref:System.EventHandler> または <xref:System.Windows.Forms.MethodInvoker> デリゲートの呼び出しは、別の種類のデリゲートの呼び出しよりも高速になります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1577">A call to an <xref:System.EventHandler> or <xref:System.Windows.Forms.MethodInvoker> delegate will be faster than a call to another type of delegate.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-1578">メッセージを処理する必要があるスレッドがアクティブでなくなった場合は、例外がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1578">An exception might be thrown if the thread that should process the message is no longer active.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1579">次のコード例は、デリゲートを含むコントロールを示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1579">The following code example shows controls that contain a delegate.</span></span> <span data-ttu-id="6dc4f-1580">デリゲートは、リストボックスに項目を追加するメソッドをカプセル化します。このメソッドは、指定された引数を使用して、フォームの基になるハンドルを所有するスレッド上で実行されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1580">The delegate encapsulates a method that adds items to the list box, and this method is executed on the thread that owns the underlying handle of the form, using the specified arguments.</span></span> <span data-ttu-id="6dc4f-1581">ユーザーがボタンをクリックすると、`Invoke` はデリゲートを実行します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1581">When the user clicks on the button, `Invoke` runs the delegate.</span></span>  
  
 [!code-cpp[Control_Invoke1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_Invoke1/CPP/control_invoke1.cpp#1)]
 [!code-csharp[Control_Invoke1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_Invoke1/CS/control_invoke1.cs#1)]
 [!code-vb[Control_Invoke1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_Invoke1/VB/control_invoke1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MethodInvoker" />
        <altmember cref="P:System.Windows.Forms.Control.InvokeRequired" />
      </Docs>
    </Member>
    <Member MemberName="InvokeGotFocus">
      <MemberSignature Language="C#" Value="protected void InvokeGotFocus (System.Windows.Forms.Control toInvoke, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeGotFocus(class System.Windows.Forms.Control toInvoke, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.InvokeGotFocus(System.Windows.Forms.Control,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokeGotFocus (toInvoke As Control, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokeGotFocus(System::Windows::Forms::Control ^ toInvoke, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.InvokeGotFocus : System.Windows.Forms.Control * EventArgs -&gt; unit" Usage="control.InvokeGotFocus (toInvoke, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toInvoke" Type="System.Windows.Forms.Control" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="toInvoke"><span data-ttu-id="6dc4f-1582">イベントの割り当て先の <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1582">The <see cref="T:System.Windows.Forms.Control" /> to assign the event to.</span></span></param>
        <param name="e"><span data-ttu-id="6dc4f-1583">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1583">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-1584">指定したコントロールの <see cref="E:System.Windows.Forms.Control.GotFocus" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1584">Raises the <see cref="E:System.Windows.Forms.Control.GotFocus" /> event for the specified control.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.Forms.Control.GotFocus" />
        <altmember cref="M:System.Windows.Forms.Control.InvokeLostFocus(System.Windows.Forms.Control,System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="InvokeLostFocus">
      <MemberSignature Language="C#" Value="protected void InvokeLostFocus (System.Windows.Forms.Control toInvoke, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeLostFocus(class System.Windows.Forms.Control toInvoke, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.InvokeLostFocus(System.Windows.Forms.Control,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokeLostFocus (toInvoke As Control, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokeLostFocus(System::Windows::Forms::Control ^ toInvoke, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.InvokeLostFocus : System.Windows.Forms.Control * EventArgs -&gt; unit" Usage="control.InvokeLostFocus (toInvoke, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toInvoke" Type="System.Windows.Forms.Control" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="toInvoke"><span data-ttu-id="6dc4f-1585">イベントの割り当て先の <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1585">The <see cref="T:System.Windows.Forms.Control" /> to assign the event to.</span></span></param>
        <param name="e"><span data-ttu-id="6dc4f-1586">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1586">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-1587">指定したコントロールの <see cref="E:System.Windows.Forms.Control.LostFocus" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1587">Raises the <see cref="E:System.Windows.Forms.Control.LostFocus" /> event for the specified control.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.Forms.Control.LostFocus" />
        <altmember cref="M:System.Windows.Forms.Control.InvokeGotFocus(System.Windows.Forms.Control,System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="InvokeOnClick">
      <MemberSignature Language="C#" Value="protected void InvokeOnClick (System.Windows.Forms.Control toInvoke, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeOnClick(class System.Windows.Forms.Control toInvoke, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.InvokeOnClick(System.Windows.Forms.Control,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokeOnClick (toInvoke As Control, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokeOnClick(System::Windows::Forms::Control ^ toInvoke, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.InvokeOnClick : System.Windows.Forms.Control * EventArgs -&gt; unit" Usage="control.InvokeOnClick (toInvoke, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toInvoke" Type="System.Windows.Forms.Control" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="toInvoke"><span data-ttu-id="6dc4f-1588"><see cref="T:System.Windows.Forms.Control" /> イベントの割り当て先の <see cref="E:System.Windows.Forms.Control.Click" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1588">The <see cref="T:System.Windows.Forms.Control" /> to assign the <see cref="E:System.Windows.Forms.Control.Click" /> event to.</span></span></param>
        <param name="e"><span data-ttu-id="6dc4f-1589">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1589">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-1590">指定したコントロールの <see cref="E:System.Windows.Forms.Control.Click" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1590">Raises the <see cref="E:System.Windows.Forms.Control.Click" /> event for the specified control.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokePaint">
      <MemberSignature Language="C#" Value="protected void InvokePaint (System.Windows.Forms.Control c, System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokePaint(class System.Windows.Forms.Control c, class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.InvokePaint(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokePaint (c As Control, e As PaintEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokePaint(System::Windows::Forms::Control ^ c, System::Windows::Forms::PaintEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.InvokePaint : System.Windows.Forms.Control * System.Windows.Forms.PaintEventArgs -&gt; unit" Usage="control.InvokePaint (c, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Windows.Forms.Control" />
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="6dc4f-1591"><see cref="T:System.Windows.Forms.Control" /> イベントの割り当て先の <see cref="E:System.Windows.Forms.Control.Paint" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1591">The <see cref="T:System.Windows.Forms.Control" /> to assign the <see cref="E:System.Windows.Forms.Control.Paint" /> event to.</span></span></param>
        <param name="e"><span data-ttu-id="6dc4f-1592">イベント データを格納している <see cref="T:System.Windows.Forms.PaintEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1592">An <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-1593">指定したコントロールの <see cref="E:System.Windows.Forms.Control.Paint" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1593">Raises the <see cref="E:System.Windows.Forms.Control.Paint" /> event for the specified control.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.Paint" />
      </Docs>
    </Member>
    <Member MemberName="InvokePaintBackground">
      <MemberSignature Language="C#" Value="protected void InvokePaintBackground (System.Windows.Forms.Control c, System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokePaintBackground(class System.Windows.Forms.Control c, class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.InvokePaintBackground(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokePaintBackground (c As Control, e As PaintEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokePaintBackground(System::Windows::Forms::Control ^ c, System::Windows::Forms::PaintEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.InvokePaintBackground : System.Windows.Forms.Control * System.Windows.Forms.PaintEventArgs -&gt; unit" Usage="control.InvokePaintBackground (c, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Windows.Forms.Control" />
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="6dc4f-1594"><see cref="T:System.Windows.Forms.Control" /> イベントの割り当て先の <see cref="E:System.Windows.Forms.Control.Paint" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1594">The <see cref="T:System.Windows.Forms.Control" /> to assign the <see cref="E:System.Windows.Forms.Control.Paint" /> event to.</span></span></param>
        <param name="e"><span data-ttu-id="6dc4f-1595">イベント データを格納している <see cref="T:System.Windows.Forms.PaintEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1595">An <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-1596">指定したコントロールの <see langword="PaintBackground" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1596">Raises the <see langword="PaintBackground" /> event for the specified control.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="InvokeRequired">
      <MemberSignature Language="C#" Value="public bool InvokeRequired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InvokeRequired" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.InvokeRequired" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InvokeRequired As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InvokeRequired { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.InvokeRequired : bool" Usage="System.Windows.Forms.Control.InvokeRequired" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1597">呼び出し元がコントロールの作成されたスレッドと異なるスレッド上にあるため、コントロールに対してメソッドの呼び出しを実行するときに、呼び出し元で invoke メソッドを呼び出す必要があるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1597">Gets a value indicating whether the caller must call an invoke method when making method calls to the control because the caller is on a different thread than the one the control was created on.</span></span></summary>
        <value><span data-ttu-id="6dc4f-1598">コントロールの <see langword="true" /> が、呼び出し元スレッドと異なるスレッド上で作成された (invoke メソッドを通じてコントロールを呼び出す必要があることを示す) 場合は <see cref="P:System.Windows.Forms.Control.Handle" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1598"><see langword="true" /> if the control's <see cref="P:System.Windows.Forms.Control.Handle" /> was created on a different thread than the calling thread (indicating that you must make calls to the control through an invoke method); otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1599">Windows フォームのコントロールは特定のスレッドにバインドされ、スレッドセーフではありません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1599">Controls in Windows Forms are bound to a specific thread and are not thread safe.</span></span> <span data-ttu-id="6dc4f-1600">そのため、別のスレッドからコントロールのメソッドを呼び出している場合は、コントロールの invoke メソッドの1つを使用して、適切なスレッドへの呼び出しをマーシャリングする必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1600">Therefore, if you are calling a control's method from a different thread, you must use one of the control's invoke methods to marshal the call to the proper thread.</span></span> <span data-ttu-id="6dc4f-1601">このプロパティを使用して、invoke メソッドを呼び出す必要があるかどうかを判断できます。これは、どのスレッドがコントロールを所有しているかわからない場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1601">This property can be used to determine if you must call an invoke method, which can be useful if you do not know what thread owns a control.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-1602"><xref:System.Windows.Forms.Control.InvokeRequired%2A> プロパティに加えて、コントロールのハンドルが既に作成されている場合は、<xref:System.Windows.Forms.Control.Invoke%2A>、<xref:System.Windows.Forms.Control.BeginInvoke%2A>、<xref:System.Windows.Forms.Control.CreateGraphics%2A> <xref:System.Windows.Forms.Control.EndInvoke%2A> の4つのメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1602">In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe to call: <xref:System.Windows.Forms.Control.Invoke%2A>,<xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A> and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created.</span></span> <span data-ttu-id="6dc4f-1603">バックグラウンドスレッドでコントロールのハンドルが作成される前に <xref:System.Windows.Forms.Control.CreateGraphics%2A> を呼び出すと、無効なクロススレッド呼び出しが発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1603">Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control's handle has been created on a background thread can cause illegal cross thread calls.</span></span> <span data-ttu-id="6dc4f-1604">他のすべてのメソッド呼び出しでは、別のスレッドからを呼び出すときに、これらの呼び出しメソッドのいずれかを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1604">For all other method calls, you should use one of these invoke methods when calling from a different thread.</span></span>  
  
 <span data-ttu-id="6dc4f-1605">コントロールのハンドルがまだ存在しない場合、<xref:System.Windows.Forms.Control.InvokeRequired%2A> は、ウィンドウハンドルを持つコントロールまたはフォームが見つかるまで、コントロールの親チェインを検索します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1605">If the control's handle does not yet exist, <xref:System.Windows.Forms.Control.InvokeRequired%2A> searches up the control's parent chain until it finds a control or form that does have a window handle.</span></span> <span data-ttu-id="6dc4f-1606">適切なハンドルが見つからない場合、<xref:System.Windows.Forms.Control.InvokeRequired%2A> メソッドは `false`を返します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1606">If no appropriate handle can be found, the <xref:System.Windows.Forms.Control.InvokeRequired%2A> method returns `false`.</span></span>  
  
 <span data-ttu-id="6dc4f-1607">つまり、<xref:System.Windows.Forms.Control.InvokeRequired%2A> は <xref:System.Windows.Forms.Control.Invoke%2A> が不要な場合 (同じスレッドで呼び出された場合)、またはコントロールのハンドルがまだ作成されていない場合に、`false` を返すことができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1607">This means that <xref:System.Windows.Forms.Control.InvokeRequired%2A> can return `false` if <xref:System.Windows.Forms.Control.Invoke%2A> is not required (the call occurs on the same thread), or if the control was created on a different thread but the control's handle has not yet been created.</span></span>  
  
 <span data-ttu-id="6dc4f-1608">コントロールのハンドルがまだ作成されていない場合は、単にコントロールのプロパティ、メソッド、またはイベントを呼び出さないようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1608">In the case where the control's handle has not yet been created, you should not simply call properties, methods, or events on the control.</span></span> <span data-ttu-id="6dc4f-1609">これにより、コントロールのハンドルがバックグラウンドスレッドで作成され、メッセージポンプがなくても、アプリケーションが不安定になる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1609">This might cause the control's handle to be created on the background thread, isolating the control on a thread without a message pump and making the application unstable.</span></span>  
  
 <span data-ttu-id="6dc4f-1610">この場合は、<xref:System.Windows.Forms.Control.InvokeRequired%2A> がバックグラウンドスレッドで `false` を返したときに <xref:System.Windows.Forms.Control.IsHandleCreated%2A> の値も確認することで保護できます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1610">You can protect against this case by also checking the value of <xref:System.Windows.Forms.Control.IsHandleCreated%2A> when <xref:System.Windows.Forms.Control.InvokeRequired%2A> returns `false` on a background thread.</span></span> <span data-ttu-id="6dc4f-1611">コントロールハンドルがまだ作成されていない場合は、<xref:System.Windows.Forms.Control.Invoke%2A> または <xref:System.Windows.Forms.Control.BeginInvoke%2A>を呼び出す前に、それが作成されるまで待機する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1611">If the control handle has not yet been created, you must wait until it has been created before calling <xref:System.Windows.Forms.Control.Invoke%2A> or <xref:System.Windows.Forms.Control.BeginInvoke%2A>.</span></span> <span data-ttu-id="6dc4f-1612">通常、このような状況が発生するのは、フォームが表示される前、または `Application.Run` が呼び出された前に、アプリケーションのプライマリフォームのコンストラクターにバックグラウンドスレッドが作成された場合のみです (`Application.Run(new MainForm())`の場合)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1612">Typically, this happens only if a background thread is created in the constructor of the primary form for the application (as in `Application.Run(new MainForm())`, before the form has been shown or `Application.Run` has been called.</span></span>  
  
 <span data-ttu-id="6dc4f-1613">1つの解決策は、バックグラウンドスレッドを開始する前に、フォームのハンドルが作成されるまで待機することです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1613">One solution is to wait until the form's handle has been created before starting the background thread.</span></span> <span data-ttu-id="6dc4f-1614"><xref:System.Windows.Forms.Control.Handle%2A> プロパティを呼び出してハンドルを強制的に作成するか、<xref:System.Windows.Forms.Form.Load> イベントがバックグラウンドプロセスを開始するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1614">Either force handle creation by calling the <xref:System.Windows.Forms.Control.Handle%2A> property, or wait until the <xref:System.Windows.Forms.Form.Load> event to start the background process.</span></span>  
  
 <span data-ttu-id="6dc4f-1615">さらに優れた解決策は、スレッド間のマーシャリングの制御ではなく、<xref:System.Threading.SynchronizationContext> によって返される `SynchronizationContext` を使用することです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1615">An even better solution is to use the `SynchronizationContext` returned by <xref:System.Threading.SynchronizationContext> rather than a control for cross-thread marshaling.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-1616">メッセージを処理する必要があるスレッドがアクティブでなくなった場合は、例外がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1616">An exception might be thrown if the thread that should process the message is no longer active.</span></span>  
  
 <span data-ttu-id="6dc4f-1617">マルチスレッド Windows フォームコントロールの詳細については、「[方法: バックグラウンドスレッドを使用してファイルを検索](~/docs/framework/winforms/controls/how-to-use-a-background-thread-to-search-for-files.md)する」および「[方法: Windows フォームコントロールに対してスレッドセーフな呼び出しを行う](~/docs/framework/winforms/controls/how-to-make-thread-safe-calls-to-windows-forms-controls.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1617">For more information about multithreaded Windows Forms controls, see [How to: Use a Background Thread to Search for Files](~/docs/framework/winforms/controls/how-to-use-a-background-thread-to-search-for-files.md) and [How to: Make Thread-Safe Calls to Windows Forms Controls](~/docs/framework/winforms/controls/how-to-make-thread-safe-calls-to-windows-forms-controls.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Invoke(System.Delegate)" />
        <altmember cref="M:System.Windows.Forms.Control.InvokeGotFocus(System.Windows.Forms.Control,System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.InvokeLostFocus(System.Windows.Forms.Control,System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.InvokeOnClick(System.Windows.Forms.Control,System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.InvokePaint(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.InvokePaintBackground(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="IsAccessible">
      <MemberSignature Language="C#" Value="public bool IsAccessible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAccessible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.IsAccessible" />
      <MemberSignature Language="VB.NET" Value="Public Property IsAccessible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAccessible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsAccessible : bool with get, set" Usage="System.Windows.Forms.Control.IsAccessible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1618">コントロールがユーザー補助アプリケーションに表示されるかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1618">Gets or sets a value indicating whether the control is visible to accessibility applications.</span></span></summary>
        <value><span data-ttu-id="6dc4f-1619">コントロールがユーザー補助アプリケーションに表示される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1619"><see langword="true" /> if the control is visible to accessibility applications; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.AccessibleObject" />
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="public bool IsDisposed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.IsDisposed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDisposed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDisposed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDisposed : bool" Usage="System.Windows.Forms.Control.IsDisposed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1620">コントロールが破棄されているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1620">Gets a value indicating whether the control has been disposed of.</span></span></summary>
        <value><span data-ttu-id="6dc4f-1621">コントロールが破棄されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1621"><see langword="true" /> if the control has been disposed of; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1622">このプロパティが `true`を返すと、コントロールは破棄され、有効な Windows コントロールとして参照できなくなります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1622">When this property returns `true`, the control is disposed of and can no longer be referenced as a valid Windows control.</span></span> <span data-ttu-id="6dc4f-1623">コントロールのインスタンスは破棄されていますが、ガベージコレクションによってメモリから削除されるまで、メモリ内に保持されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1623">Even though the instance of a control is disposed of, it is still maintained in memory until it is removed from memory through garbage collection.</span></span> <span data-ttu-id="6dc4f-1624">コントロールが破棄された場合、その <xref:System.Windows.Forms.Control.RecreateHandle%2A> メソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1624">When a control is disposed, you cannot call its <xref:System.Windows.Forms.Control.RecreateHandle%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)" />
        <altmember cref="T:System.GC" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
      </Docs>
    </Member>
    <Member MemberName="IsHandleCreated">
      <MemberSignature Language="C#" Value="public bool IsHandleCreated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHandleCreated" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.IsHandleCreated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHandleCreated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHandleCreated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsHandleCreated : bool" Usage="System.Windows.Forms.Control.IsHandleCreated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1625">コントロールにハンドルが関連付けられているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1625">Gets a value indicating whether the control has a handle associated with it.</span></span></summary>
        <value><span data-ttu-id="6dc4f-1626">コントロールにハンドルが関連付けられている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1626"><see langword="true" /> if a handle has been assigned to the control; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1627"><xref:System.Windows.Forms.Control.CreateHandle%2A> が呼び出されたかどうかを確認するには、<xref:System.Windows.Forms.Control.IsHandleCreated%2A> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1627">Use the <xref:System.Windows.Forms.Control.IsHandleCreated%2A> property to determine whether <xref:System.Windows.Forms.Control.CreateHandle%2A> has been called.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="IsInputChar">
      <MemberSignature Language="C#" Value="protected virtual bool IsInputChar (char charCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsInputChar(char charCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.IsInputChar(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsInputChar (charCode As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsInputChar(char charCode);" />
      <MemberSignature Language="F#" Value="abstract member IsInputChar : char -&gt; bool&#xA;override this.IsInputChar : char -&gt; bool" Usage="control.IsInputChar charCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCode" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="charCode"><span data-ttu-id="6dc4f-1628">テスト対象の文字。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1628">The character to test.</span></span></param>
        <summary><span data-ttu-id="6dc4f-1629">文字が、コントロールによって認識される入力文字かどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1629">Determines if a character is an input character that the control recognizes.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-1630">文字をコントロールに直接送信する必要があり、プリプロセスしない場合は <see langword="true" />。それ以外の場合は、<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1630"><see langword="true" /> if the character should be sent directly to the control and not preprocessed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1631"><xref:System.Windows.Forms.Control.IsInputChar%2A> メソッドを呼び出して、`charCode` パラメーターで指定された文字がコントロールが必要とする入力文字かどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1631">Call the <xref:System.Windows.Forms.Control.IsInputChar%2A> method to determine whether the character specified by the `charCode` parameter is an input character that the control wants.</span></span> <span data-ttu-id="6dc4f-1632">このメソッドは、指定された入力文字をプリプロセスするか、コントロールに直接送信するかを決定するために、ウィンドウメッセージのプリプロセス中に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1632">This method is called during window message preprocessing to determine whether the specified input character should be preprocessed or sent directly to the control.</span></span> <span data-ttu-id="6dc4f-1633"><xref:System.Windows.Forms.Control.IsInputChar%2A> が `true`を返す場合、指定された文字はコントロールに直接送信されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1633">If <xref:System.Windows.Forms.Control.IsInputChar%2A> returns `true`, the specified character is sent directly to the control.</span></span> <span data-ttu-id="6dc4f-1634"><xref:System.Windows.Forms.Control.IsInputChar%2A> が `false`を返す場合、指定された文字は前処理され、プリプロセスフェーズで使用されていない場合にのみコントロールに送信されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1634">If <xref:System.Windows.Forms.Control.IsInputChar%2A> returns `false`, the specified character is preprocessed and only sent to the control if it is not consumed by the preprocessing phase.</span></span> <span data-ttu-id="6dc4f-1635">文字のプリプロセスには、その文字が別のコントロールのニーモニックであるかどうかの確認が含まれます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1635">The preprocessing of a character includes checking whether the character is a mnemonic of another control.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)" />
      </Docs>
    </Member>
    <Member MemberName="IsInputKey">
      <MemberSignature Language="C#" Value="protected virtual bool IsInputKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsInputKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsInputKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsInputKey(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="abstract member IsInputKey : System.Windows.Forms.Keys -&gt; bool&#xA;override this.IsInputKey : System.Windows.Forms.Keys -&gt; bool" Usage="control.IsInputKey keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData"><span data-ttu-id="6dc4f-1636"><see cref="T:System.Windows.Forms.Keys" /> 値のいずれか 1 つです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1636">One of the <see cref="T:System.Windows.Forms.Keys" /> values.</span></span></param>
        <summary><span data-ttu-id="6dc4f-1637">指定されたキーが、標準の入力キーと前処理が必要な特殊キーのどちらであるかを判別します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1637">Determines whether the specified key is a regular input key or a special key that requires preprocessing.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-1638">指定されているキーが通常の入力キーである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1638"><see langword="true" /> if the specified key is a regular input key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1639"><xref:System.Windows.Forms.Control.IsInputKey%2A> メソッドを呼び出して、`keyData` パラメーターによって指定されたキーが、コントロールが必要とする入力キーであるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1639">Call the <xref:System.Windows.Forms.Control.IsInputKey%2A> method to determine whether the key specified by the `keyData` parameter is an input key that the control wants.</span></span> <span data-ttu-id="6dc4f-1640">このメソッドは、指定された入力キーを前処理するか、またはコントロールに直接送信する必要があるかを判断するために、ウィンドウメッセージのプリプロセス中に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1640">This method is called during window message preprocessing to determine whether the specified input key should be preprocessed or sent directly to the control.</span></span> <span data-ttu-id="6dc4f-1641"><xref:System.Windows.Forms.Control.IsInputKey%2A> が `true`を返す場合、指定されたキーはコントロールに直接送信されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1641">If <xref:System.Windows.Forms.Control.IsInputKey%2A> returns `true`, the specified key is sent directly to the control.</span></span> <span data-ttu-id="6dc4f-1642"><xref:System.Windows.Forms.Control.IsInputKey%2A> が `false`を返す場合、指定されたキーは前処理され、プリプロセスフェーズで使用されていない場合にのみコントロールに送信されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1642">If <xref:System.Windows.Forms.Control.IsInputKey%2A> returns `false`, the specified key is preprocessed and only sent to the control if it is not consumed by the preprocessing phase.</span></span> <span data-ttu-id="6dc4f-1643">プリプロセスされるキーには、TAB、RETURN、ESC、↑、↓、←、→の各キーが含まれます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1643">Keys that are preprocessed include the TAB, RETURN, ESC, and the UP ARROW, DOWN ARROW, LEFT ARROW, and RIGHT ARROW keys.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1644">次のコード例は、<xref:System.Windows.Forms.TextBox> コントロールの <xref:System.Windows.Forms.Control.IsInputKey%2A> メソッドをオーバーライドする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1644">The following code example shows you how to override the <xref:System.Windows.Forms.Control.IsInputKey%2A> method for a <xref:System.Windows.Forms.TextBox> control.</span></span> <span data-ttu-id="6dc4f-1645">この例では、`TabTextBox` クラスが TAB キーを処理します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1645">In this example, the `TabTextBox` class handles the TAB key.</span></span> <span data-ttu-id="6dc4f-1646">`TabTextBox` にフォーカスがあり、ユーザーが TAB キーを押すと、テキスト挿入ポイントに4つのスペースが追加され、選択したテキストが置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1646">When the `TabTextBox` has the focus and the user presses the TAB key four spaces are added at the text insertion point, replacing any selected text.</span></span> <span data-ttu-id="6dc4f-1647">既定では、<xref:System.Windows.Forms.TextBox> コントロールは、入力フォーカスを次のコントロールに移動することによって、TAB キーを処理します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1647">By default, the <xref:System.Windows.Forms.TextBox> control handles the TAB key by moving the input focus to the next control.</span></span> <span data-ttu-id="6dc4f-1648">この場合、keypress は <xref:System.Windows.Forms.Control.OnKeyDown%2A> メソッドのオーバーライドには到達しません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1648">In this case, the keypress never reaches the <xref:System.Windows.Forms.Control.OnKeyDown%2A> method override.</span></span> <span data-ttu-id="6dc4f-1649">この既定の動作を回避するために、ユーザーが TAB キーを押したときに、<xref:System.Windows.Forms.Control.IsInputKey%2A> メソッドのオーバーライドによって `true` が返されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1649">To prevent this default behavior, the <xref:System.Windows.Forms.Control.IsInputKey%2A> method override returns `true` when the user presses the TAB key.</span></span> <span data-ttu-id="6dc4f-1650">それ以外のすべての keypresses では、<xref:System.Windows.Forms.Control.IsInputKey%2A> メソッドのオーバーライドは、メソッドの基本クラスバージョンを呼び出した結果を返します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1650">For all other keypresses, the <xref:System.Windows.Forms.Control.IsInputKey%2A> method override returns the result of calling the base-class version of the method.</span></span>  
  
 [!code-csharp[System.Windows.Forms.Control.IsInputKey#0](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.IsInputKey/cs/form1.cs#0)]
 [!code-vb[System.Windows.Forms.Control.IsInputKey#0](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.IsInputKey/vb/form1.vb#0)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Keys" />
        <altmember cref="M:System.Windows.Forms.Control.IsInputChar(System.Char)" />
        <altmember cref="P:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyLocked">
      <MemberSignature Language="C#" Value="public static bool IsKeyLocked (System.Windows.Forms.Keys keyVal);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsKeyLocked(valuetype System.Windows.Forms.Keys keyVal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.IsKeyLocked(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsKeyLocked (keyVal As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsKeyLocked(System::Windows::Forms::Keys keyVal);" />
      <MemberSignature Language="F#" Value="static member IsKeyLocked : System.Windows.Forms.Keys -&gt; bool" Usage="System.Windows.Forms.Control.IsKeyLocked keyVal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyVal" Type="System.Windows.Forms.Keys" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="keyVal"><span data-ttu-id="6dc4f-1651"><see cref="T:System.Windows.Forms.Keys" /> 列挙体の CAPS LOCK、NUM LOCK、または SCROLL LOCK の各メンバー。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1651">The CAPS LOCK, NUM LOCK, or SCROLL LOCK member of the <see cref="T:System.Windows.Forms.Keys" /> enumeration.</span></span></param>
        <summary><span data-ttu-id="6dc4f-1652">CapsLock、NumLock、または ScrollLock の各キーが有効かどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1652">Determines whether the CAPS LOCK, NUM LOCK, or SCROLL LOCK key is in effect.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-1653">指定されたキーが有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1653"><see langword="true" /> if the specified key or keys are in effect; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1654"><xref:System.Windows.Forms.Control.IsKeyLocked%2A> プロパティを使用して、CAPS lock、NUM lock、または SCROLL LOCK の各キーが、個別または組み合わせのいずれであるかにかかわらずオンになっているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1654">Use the <xref:System.Windows.Forms.Control.IsKeyLocked%2A> property to determine whether the CAPS LOCK, NUM LOCK, or SCROLL LOCK keys are on, whether individually or in combination.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1655">次のコード例では、指定されたキー (この場合は Caps Lock キー) が有効かどうかを示すメッセージボックスを表示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1655">The following code example displays a message box indicating whether the specified key (the Caps Lock key in this case) is in effect.</span></span>  
  
 [!code-cpp[ControlIsKeyLocked#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ControlIsKeyLocked/CPP/controliskeylocked.cpp#1)]
 [!code-csharp[ControlIsKeyLocked#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ControlIsKeyLocked/CS/controliskeylocked.cs#1)]
 [!code-vb[ControlIsKeyLocked#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ControlIsKeyLocked/VB/controliskeylocked.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="6dc4f-1656"><paramref name="keyVal" /> パラメーターは、CapsLock、NumLock、または ScrollLock の各キー以外のキーを参照します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1656">The <paramref name="keyVal" /> parameter refers to a key other than the CAPS LOCK, NUM LOCK, or SCROLL LOCK key.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsMirrored">
      <MemberSignature Language="C#" Value="public bool IsMirrored { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMirrored" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.IsMirrored" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMirrored As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMirrored { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMirrored : bool" Usage="System.Windows.Forms.Control.IsMirrored" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1657">コントロールがミラー化されるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1657">Gets a value indicating whether the control is mirrored.</span></span></summary>
        <value><span data-ttu-id="6dc4f-1658">コントロールがミラー化される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1658"><see langword="true" /> if the control is mirrored; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1659">ミラー化されたコントロールは、レイアウトとテキストの両方を右から左に表示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1659">A mirrored control displays both layout and text from right to left.</span></span> <span data-ttu-id="6dc4f-1660">詳細については、「[方法: ミラー化された Windows フォームとコントロールを作成する](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2010/xwbz5ws0(v=vs.100))」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1660">For more information, see [How to: Create Mirrored Windows Forms and Controls](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2010/xwbz5ws0(v=vs.100)).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMnemonic">
      <MemberSignature Language="C#" Value="public static bool IsMnemonic (char charCode, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsMnemonic(char charCode, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.IsMnemonic(System.Char,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsMnemonic (charCode As Char, text As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsMnemonic(char charCode, System::String ^ text);" />
      <MemberSignature Language="F#" Value="static member IsMnemonic : char * string -&gt; bool" Usage="System.Windows.Forms.Control.IsMnemonic (charCode, text)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCode" Type="System.Char" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="charCode"><span data-ttu-id="6dc4f-1661">テスト対象の文字。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1661">The character to test.</span></span></param>
        <param name="text"><span data-ttu-id="6dc4f-1662">検索対象の文字列。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1662">The string to search.</span></span></param>
        <summary><span data-ttu-id="6dc4f-1663">指定した文字が、指定した文字列内のコントロールに割り当てられたニーモニック文字かどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1663">Determines if the specified character is the mnemonic character assigned to the control in the specified string.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-1664"><paramref name="charCode" /> 文字が、コントロールに割り当てられたニーモニック文字である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1664"><see langword="true" /> if the <paramref name="charCode" /> character is the mnemonic character assigned to the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1665">ニーモニック文字は、<xref:System.String>内の "&" の最初のインスタンスの直後にある文字です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1665">The mnemonic character is the character immediately following the first instance of "&" in a <xref:System.String>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1666">次のコード例は、カスタム動作を示すために <xref:System.Windows.Forms.Control.ProcessMnemonic%2A> メソッドをオーバーライドする button クラスの拡張を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1666">The following code example demonstrates an extension of the button class that overrides the <xref:System.Windows.Forms.Control.ProcessMnemonic%2A> method to exhibit custom behavior.</span></span> <span data-ttu-id="6dc4f-1667">この例では、<xref:System.Windows.Forms.Control.CanSelect%2A> と <xref:System.Windows.Forms.Control.IsMnemonic%2A> プロパティの使用方法も示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1667">The example also demonstrates the use of the <xref:System.Windows.Forms.Control.CanSelect%2A> and <xref:System.Windows.Forms.Control.IsMnemonic%2A> properties.</span></span> <span data-ttu-id="6dc4f-1668">この例を実行するには、同じファイル内のフォームクラスの後に次のコードを貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1668">To run this example paste the following code after a form class, in the same file.</span></span> <span data-ttu-id="6dc4f-1669">`MnemonicButton` 型のボタンをフォームに追加します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1669">Add a button of type `MnemonicButton` to the form.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ProcessMnemonic#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ProcessMnemonic/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ProcessMnemonic#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ProcessMnemonic/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ProcessMnemonic#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ProcessMnemonic/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.ProcessMnemonic(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.KeyEventHandler KeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.KeyEventHandler KeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.KeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::KeyEventHandler ^ KeyDown;" />
      <MemberSignature Language="F#" Value="member this.KeyDown : System.Windows.Forms.KeyEventHandler " Usage="member this.KeyDown : System.Windows.Forms.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1670">コントロールにフォーカスがあるときにキーが押されると発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1670">Occurs when a key is pressed while the control has focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1671">キーイベントは、次の順序で発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1671">Key events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.KeyDown>  
  
2.  <xref:System.Windows.Forms.Control.KeyPress>  
  
3.  <xref:System.Windows.Forms.Control.KeyUp>  
  
 <span data-ttu-id="6dc4f-1672">キーボードイベントをフォームレベルでのみ処理し、他のコントロールがキーボードイベントを受信できないようにするには、フォームの <xref:System.Windows.Forms.Control.KeyPress> イベント処理メソッドの <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=nameWithType> プロパティを `true`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1672">To handle keyboard events only at the form level and not enable other controls to receive keyboard events, set the <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=nameWithType> property in your form's <xref:System.Windows.Forms.Control.KeyPress> event-handling method to `true`.</span></span> <span data-ttu-id="6dc4f-1673">TAB、RETURN、ESC、方向キーなど、特定のキーは、コントロールによって自動的に処理されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1673">Certain keys, such as the TAB, RETURN, ESC, and arrow keys are handled by controls automatically.</span></span> <span data-ttu-id="6dc4f-1674">これらのキーによって <xref:System.Windows.Forms.Control.KeyDown> イベントが発生するようにするには、フォーム上の各コントロールの <xref:System.Windows.Forms.Control.IsInputKey%2A> メソッドをオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1674">To have these keys raise the <xref:System.Windows.Forms.Control.KeyDown> event, you must override the <xref:System.Windows.Forms.Control.IsInputKey%2A> method in each control on your form.</span></span> <span data-ttu-id="6dc4f-1675"><xref:System.Windows.Forms.Control.IsInputKey%2A> のオーバーライドのコードでは、特殊キーのいずれかが押されているかどうかを判断し、`true`の値を返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1675">The code for the override of the <xref:System.Windows.Forms.Control.IsInputKey%2A> would need to determine if one of the special keys is pressed and return a value of `true`.</span></span> <span data-ttu-id="6dc4f-1676"><xref:System.Windows.Forms.Control.IsInputKey%2A> メソッドをオーバーライドする代わりに、<xref:System.Windows.Forms.Control.PreviewKeyDown> イベントを処理し、<xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A> プロパティを `true`に設定することができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1676">Instead of overriding the <xref:System.Windows.Forms.Control.IsInputKey%2A> method, you can handle the <xref:System.Windows.Forms.Control.PreviewKeyDown> event and set the <xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A> property to `true`.</span></span> <span data-ttu-id="6dc4f-1677">コード例については、<xref:System.Windows.Forms.Control.PreviewKeyDown> イベントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1677">For a code example, see the <xref:System.Windows.Forms.Control.PreviewKeyDown> event.</span></span>  
  
 <span data-ttu-id="6dc4f-1678">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1678">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1679">次のコード例では、<xref:System.Windows.Forms.Control.KeyDown> イベントを使用して、コントロールに入力された文字の型を確認します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1679">The following code example uses the <xref:System.Windows.Forms.Control.KeyDown> event to determine the type of character entered into the control.</span></span>  
  
 [!code-cpp[Control.KeyDown#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
 
 
 <span data-ttu-id="6dc4f-1680">次のコード例は、<xref:System.Windows.Forms.Control.KeyDown>、<xref:System.Windows.Forms.Control.KeyUp>、<xref:System.Windows.Forms.Control.KeyPress> イベントの発生順序、およびイベントハンドラーにイベントハンドラーを登録する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1680">The following code example demonstrates the order of raising the <xref:System.Windows.Forms.Control.KeyDown>, <xref:System.Windows.Forms.Control.KeyUp>, <xref:System.Windows.Forms.Control.KeyPress> events, and how to register event handlers on them.</span></span>  
 
 [!code-csharp[Control.KeyDown#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form2.cs#1)]
 [!code-vb[Control.KeyDown#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/Form2.vb#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.KeyEventArgs" />
        <altmember cref="T:System.Windows.Forms.KeyEventHandler" />
        <altmember cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
        <altmember cref="E:System.Windows.Forms.Control.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="KeyPress">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.KeyPressEventHandler KeyPress;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.KeyPressEventHandler KeyPress" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.KeyPress" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyPress As KeyPressEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::KeyPressEventHandler ^ KeyPress;" />
      <MemberSignature Language="F#" Value="member this.KeyPress : System.Windows.Forms.KeyPressEventHandler " Usage="member this.KeyPress : System.Windows.Forms.KeyPressEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.KeyPressEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1681">コントロールにフォーカスがあるときに、文字、</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1681">Occurs when a character.</span></span> <span data-ttu-id="6dc4f-1682">スペース、または Backspace キーが押された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1682">space or backspace key is pressed while the control has focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1683">キーイベントは、次の順序で発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1683">Key events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.KeyDown>  
  
2.  <xref:System.Windows.Forms.Control.KeyPress>  
  
3.  <xref:System.Windows.Forms.Control.KeyUp>  
  
 <span data-ttu-id="6dc4f-1684"><xref:System.Windows.Forms.Control.KeyPress> イベントは、space および backspace 以外の文字以外のキーでは発生しません。ただし、文字以外のキーによって、<xref:System.Windows.Forms.Control.KeyDown> イベントと <xref:System.Windows.Forms.Control.KeyUp> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1684">The <xref:System.Windows.Forms.Control.KeyPress> event is not raised by non-character keys other than space and backspace; however, the non-character keys do raise the <xref:System.Windows.Forms.Control.KeyDown> and <xref:System.Windows.Forms.Control.KeyUp> events.</span></span>  
  
 <span data-ttu-id="6dc4f-1685">実行時にキーストロークをサンプリングし、一般的なキーストロークのサブセットを使用または変更するには、<xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1685">Use the <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> property to sample keystrokes at run time and to consume or modify a subset of common keystrokes.</span></span>  
  
 <span data-ttu-id="6dc4f-1686">キーボードイベントをフォームレベルでのみ処理し、他のコントロールがキーボードイベントを受信できないようにするには、フォームの <xref:System.Windows.Forms.Control.KeyPress> イベント処理メソッドの <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=nameWithType> プロパティを `true`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1686">To handle keyboard events only at the form level and not enable other controls to receive keyboard events, set the <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=nameWithType> property in your form's <xref:System.Windows.Forms.Control.KeyPress> event-handling method to `true`.</span></span>  
  
 <span data-ttu-id="6dc4f-1687">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1687">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1688">次のコード例では、<xref:System.Windows.Forms.Control.KeyPress> イベントを使用して、文字がコントロールに入力されないようにします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1688">The following code example uses the <xref:System.Windows.Forms.Control.KeyPress> event to prevent characters from entering the control.</span></span>  
  
 [!code-cpp[Control.KeyDown#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
 
 
  <span data-ttu-id="6dc4f-1689">次のコード例では、<xref:System.Windows.Forms.Control.KeyDown>イベント、<xref:System.Windows.Forms.Control.KeyUp> イベント、および <xref:System.Windows.Forms.Control.KeyPress> イベントの増加順序、およびイベントハンドラーにイベントハンドラーを登録する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1689">The following code example demonstrates the order of rising the <xref:System.Windows.Forms.Control.KeyDown>, <xref:System.Windows.Forms.Control.KeyUp> and <xref:System.Windows.Forms.Control.KeyPress> events, also how to register event handlers on them.</span></span>  
 
 [!code-csharp[Control.KeyPress#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form2.cs#1)]
 [!code-vb[Control.KeyPress#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/Form2.vb#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyPressEventArgs.KeyChar" />
        <altmember cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.IsInputChar(System.Char)" />
        <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
        <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.KeyEventHandler KeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.KeyEventHandler KeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.KeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::KeyEventHandler ^ KeyUp;" />
      <MemberSignature Language="F#" Value="member this.KeyUp : System.Windows.Forms.KeyEventHandler " Usage="member this.KeyUp : System.Windows.Forms.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1690">コントロールにフォーカスがあるときにキーが離されると発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1690">Occurs when a key is released while the control has focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1691">キーイベントは、次の順序で発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1691">Key events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.KeyDown>  
  
2.  <xref:System.Windows.Forms.Control.KeyPress>  
  
3.  <xref:System.Windows.Forms.Control.KeyUp>  
  
 <span data-ttu-id="6dc4f-1692">キーボードイベントをフォームレベルでのみ処理し、他のコントロールがキーボードイベントを受信できないようにするには、フォームの <xref:System.Windows.Forms.Control.KeyPress> イベント処理メソッドの <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=nameWithType> プロパティを `true`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1692">To handle keyboard events only at the form level and not enable other controls to receive keyboard events, set the <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=nameWithType> property in your form's <xref:System.Windows.Forms.Control.KeyPress> event-handling method to `true`.</span></span> <span data-ttu-id="6dc4f-1693">TAB、RETURN、ESC、方向キーなど、特定のキーは、コントロールによって自動的に処理されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1693">Certain keys, such as the TAB, RETURN, ESC, and arrow keys are handled by controls automatically.</span></span> <span data-ttu-id="6dc4f-1694">これらのキーによって <xref:System.Windows.Forms.Control.KeyUp> イベントが発生するようにするには、フォーム上の各コントロールの <xref:System.Windows.Forms.Control.IsInputKey%2A> メソッドをオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1694">To have these keys raise the <xref:System.Windows.Forms.Control.KeyUp> event, you must override the <xref:System.Windows.Forms.Control.IsInputKey%2A> method in each control on your form.</span></span> <span data-ttu-id="6dc4f-1695"><xref:System.Windows.Forms.Control.IsInputKey%2A> をオーバーライドするコードでは、特殊キーのいずれかが押されているかどうかを判断し、`true`の値を返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1695">The code for the override of <xref:System.Windows.Forms.Control.IsInputKey%2A> would need to determine if one of the special keys is pressed and return a value of `true`.</span></span>  
  
 <span data-ttu-id="6dc4f-1696">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1696">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1697">次のコード例では、<xref:System.Windows.Forms.Help> クラスで <xref:System.Windows.Forms.Control.KeyUp> イベントを使用して、ユーザーにポップアップスタイルのヘルプを表示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1697">The following code example uses the <xref:System.Windows.Forms.Control.KeyUp> event with the <xref:System.Windows.Forms.Help> class to display pop-up style help to the user.</span></span>  
  
 [!code-cpp[Control.KeyUp#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyUp/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyUp#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyUp/CS/form1.cs#1)]
 [!code-vb[Control.KeyUp#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyUp/VB/form1.vb#1)]  
 
 
  <span data-ttu-id="6dc4f-1698">次のコード例では、<xref:System.Windows.Forms.Control.KeyDown>イベント、<xref:System.Windows.Forms.Control.KeyUp> イベント、および <xref:System.Windows.Forms.Control.KeyPress> イベントの増加順序、およびイベントハンドラーにイベントハンドラーを登録する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1698">The following code example demonstrates the order of rising the <xref:System.Windows.Forms.Control.KeyDown>, <xref:System.Windows.Forms.Control.KeyUp> and <xref:System.Windows.Forms.Control.KeyPress> events, also how to register event handlers on them.</span></span>  
 
 [!code-csharp[Control.KeyUp#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form2.cs#1)]
 [!code-vb[Control.KeyUp#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/Form2.vb#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
      </Docs>
    </Member>
    <Member MemberName="Layout">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.LayoutEventHandler Layout;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.LayoutEventHandler Layout" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Layout" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Layout As LayoutEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::LayoutEventHandler ^ Layout;" />
      <MemberSignature Language="F#" Value="member this.Layout : System.Windows.Forms.LayoutEventHandler " Usage="member this.Layout : System.Windows.Forms.LayoutEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LayoutEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1699">コントロールの子コントロールの位置を変更する必要があるときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1699">Occurs when a control should reposition its child controls.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1700"><xref:System.Windows.Forms.Control.Layout> イベントは、子コントロールが追加または削除されたとき、コントロールの境界が変化したとき、およびコントロールのレイアウトに影響を与える可能性があるその他の変更が発生したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1700">The <xref:System.Windows.Forms.Control.Layout> event occurs when child controls are added or removed, when the bounds of the control changes, and when other changes occur that can affect the layout of the control.</span></span> <span data-ttu-id="6dc4f-1701">Layout イベントは、<xref:System.Windows.Forms.Control.SuspendLayout%2A> および <xref:System.Windows.Forms.Control.ResumeLayout%2A> メソッドを使用して抑制できます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1701">The layout event can be suppressed using the <xref:System.Windows.Forms.Control.SuspendLayout%2A> and <xref:System.Windows.Forms.Control.ResumeLayout%2A> methods.</span></span> <span data-ttu-id="6dc4f-1702">レイアウトを中断すると、コントロールに対して複数のアクションを実行できます。その際、変更ごとにレイアウトを実行する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1702">Suspending layout enables you to perform multiple actions on a control without having to perform a layout for each change.</span></span> <span data-ttu-id="6dc4f-1703">たとえば、コントロールのサイズを変更したり移動したりすると、各操作で <xref:System.Windows.Forms.Control.Layout> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1703">For example, if you resize and move a control, each operation would raise a <xref:System.Windows.Forms.Control.Layout> event.</span></span>  
  
 <span data-ttu-id="6dc4f-1704">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1704">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1705">次のコード例では、<xref:System.Windows.Forms.Control.Layout> イベントの画面に <xref:System.Windows.Forms.Form> を中心にしています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1705">The following code example centers a <xref:System.Windows.Forms.Form> on the screen in the <xref:System.Windows.Forms.Control.Layout> event.</span></span> <span data-ttu-id="6dc4f-1706">これにより、ユーザーがサイズを変更したときにフォームが中央揃えで表示されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1706">This will keep the form centered as the user resizes it.</span></span> <span data-ttu-id="6dc4f-1707">この例では、<xref:System.Windows.Forms.Form> コントロールを作成しておく必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1707">This example requires that you have created a <xref:System.Windows.Forms.Form> control.</span></span>  
  
 [!code-cpp[Control.Layout#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Layout/CPP/layout.cpp#1)]
 [!code-csharp[Control.Layout#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Layout/CS/layout.cs#1)]
 [!code-vb[Control.Layout#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Layout/VB/layout.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.ResumeLayout" />
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
      </Docs>
    </Member>
    <Member MemberName="LayoutEngine">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.Layout.LayoutEngine LayoutEngine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Layout.LayoutEngine LayoutEngine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.LayoutEngine" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LayoutEngine As LayoutEngine" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::Layout::LayoutEngine ^ LayoutEngine { System::Windows::Forms::Layout::LayoutEngine ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LayoutEngine : System.Windows.Forms.Layout.LayoutEngine" Usage="System.Windows.Forms.Control.LayoutEngine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Layout.LayoutEngine</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1708">コントロールのレイアウト エンジンのキャッシュ インスタンスを取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1708">Gets a cached instance of the control's layout engine.</span></span></summary>
        <value><span data-ttu-id="6dc4f-1709">コントロールの内容の <see cref="T:System.Windows.Forms.Layout.LayoutEngine" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1709">The <see cref="T:System.Windows.Forms.Layout.LayoutEngine" /> for the control's contents.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1710"><xref:System.Windows.Forms.Control.LayoutEngine%2A> プロパティは、コントロール自体ではなく、コントロールの子のレイアウトエンジンを取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1710">The <xref:System.Windows.Forms.Control.LayoutEngine%2A> property gets the layout engine for the control's children rather than for the control itself.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Layout.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.ResumeLayout" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImageLayout" />
      </Docs>
    </Member>
    <Member MemberName="Leave">
      <MemberSignature Language="C#" Value="public event EventHandler Leave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Leave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Leave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Leave As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Leave;" />
      <MemberSignature Language="F#" Value="member this.Leave : EventHandler " Usage="member this.Leave : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1711">入力フォーカスがコントロールを離れると発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1711">Occurs when the input focus leaves the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1712">キーボード (タブ、SHIFT + TAB など) を使用してフォーカスを変更した場合、<xref:System.Windows.Forms.Control.Select%2A> または <xref:System.Windows.Forms.Control.SelectNextControl%2A> メソッドを呼び出した場合、または <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> プロパティを現在のフォームに設定した場合、フォーカスイベントは次の順序で発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1712">When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> property to the current form, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 <span data-ttu-id="6dc4f-1713">マウスを使用するか <xref:System.Windows.Forms.Control.Focus%2A> メソッドを呼び出すことによってフォーカスを変更すると、フォーカスイベントは次の順序で発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1713">When you change the focus by using the mouse or by calling the <xref:System.Windows.Forms.Control.Focus%2A> method, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.LostFocus>  
  
4.  <xref:System.Windows.Forms.Control.Leave>  
  
5.  <xref:System.Windows.Forms.Control.Validating>  
  
6.  <xref:System.Windows.Forms.Control.Validated>  
  
 <span data-ttu-id="6dc4f-1714"><xref:System.Windows.Forms.Control.CausesValidation%2A> プロパティが `false`に設定されている場合、<xref:System.Windows.Forms.Control.Validating> および <xref:System.Windows.Forms.Control.Validated> イベントは抑制されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1714">If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-1715"><xref:System.Windows.Forms.Control.Enter> イベントと <xref:System.Windows.Forms.Control.Leave> イベントは <xref:System.Windows.Forms.Form> クラスによって抑制されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1715">The <xref:System.Windows.Forms.Control.Enter> and <xref:System.Windows.Forms.Control.Leave> events are suppressed by the <xref:System.Windows.Forms.Form> class.</span></span> <span data-ttu-id="6dc4f-1716"><xref:System.Windows.Forms.Form> クラスの同等のイベントは、<xref:System.Windows.Forms.Form.Activated> イベントと <xref:System.Windows.Forms.Form.Deactivate> イベントです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1716">The equivalent events in the <xref:System.Windows.Forms.Form> class are the <xref:System.Windows.Forms.Form.Activated> and <xref:System.Windows.Forms.Form.Deactivate> events.</span></span> <span data-ttu-id="6dc4f-1717"><xref:System.Windows.Forms.Control.Enter> イベントと <xref:System.Windows.Forms.Control.Leave> イベントは階層的であり、適切なコントロールに到達するまで、親チェーンを上下に重ねて表示されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1717">The <xref:System.Windows.Forms.Control.Enter> and <xref:System.Windows.Forms.Control.Leave> events are hierarchical and will cascade up and down the parent chain until the appropriate control is reached.</span></span> <span data-ttu-id="6dc4f-1718">たとえば、2つの <xref:System.Windows.Forms.GroupBox> コントロールを持つ <xref:System.Windows.Forms.Form> があり、各 <xref:System.Windows.Forms.GroupBox> コントロールに1つの <xref:System.Windows.Forms.TextBox> コントロールがあるとします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1718">For example, assume you have a <xref:System.Windows.Forms.Form> with two <xref:System.Windows.Forms.GroupBox> controls, and each <xref:System.Windows.Forms.GroupBox> control has one <xref:System.Windows.Forms.TextBox> control.</span></span> <span data-ttu-id="6dc4f-1719">カーソルがある <xref:System.Windows.Forms.TextBox> から別のに移動されると、<xref:System.Windows.Forms.TextBox> と <xref:System.Windows.Forms.GroupBox>に対して <xref:System.Windows.Forms.Control.Leave> イベントが発生し、他の <xref:System.Windows.Forms.Control.Enter> と <xref:System.Windows.Forms.GroupBox> に対して <xref:System.Windows.Forms.TextBox>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1719">When the caret is moved from one <xref:System.Windows.Forms.TextBox> to the other, the <xref:System.Windows.Forms.Control.Leave> event is raised for the <xref:System.Windows.Forms.TextBox> and <xref:System.Windows.Forms.GroupBox>, and the <xref:System.Windows.Forms.Control.Enter> event is raised for the other <xref:System.Windows.Forms.GroupBox> and <xref:System.Windows.Forms.TextBox>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="6dc4f-1720"><xref:System.Windows.Forms.Control.Enter>、<xref:System.Windows.Forms.Control.GotFocus>、<xref:System.Windows.Forms.Control.Leave>、<xref:System.Windows.Forms.Control.LostFocus>、<xref:System.Windows.Forms.Control.Validating>、または <xref:System.Windows.Forms.Control.Validated> のイベントハンドラー内からフォーカスを設定しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1720">Do not attempt to set focus from within the <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>, <xref:System.Windows.Forms.Control.Validating>, or <xref:System.Windows.Forms.Control.Validated> event handlers.</span></span> <span data-ttu-id="6dc4f-1721">これにより、アプリケーションまたはオペレーティングシステムが応答を停止する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1721">Doing so can cause your application or the operating system to stop responding.</span></span> <span data-ttu-id="6dc4f-1722">詳細については、 [WM_KILLFOCUS](/windows/win32/inputdev/wm-killfocus)のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1722">For more information, see the [WM_KILLFOCUS](/windows/win32/inputdev/wm-killfocus) topic.</span></span>  
  
 <span data-ttu-id="6dc4f-1723">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1723">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1724">次のコード例では、<xref:System.Windows.Forms.Control.Leave> イベントを使用して、コントロールを元の状態にリセットします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1724">The following code example uses the <xref:System.Windows.Forms.Control.Leave> event to reset a control to its former state.</span></span>  
  
 [!code-cpp[Control.Enter#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Enter/CPP/form1.cpp#1)]
 [!code-csharp[Control.Enter#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Enter/CS/form1.cs#1)]
 [!code-vb[Control.Enter#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Enter/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.Enter" />
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public int Left { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Left" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Left" />
      <MemberSignature Language="VB.NET" Value="Public Property Left As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Left { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Left : int with get, set" Usage="System.Windows.Forms.Control.Left" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1725">コントロールの左端とコンテナーのクライアント領域の左端の間の距離をピクセルで取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1725">Gets or sets the distance, in pixels, between the left edge of the control and the left edge of its container's client area.</span></span></summary>
        <value><span data-ttu-id="6dc4f-1726"><see cref="T:System.Int32" /> は、コントロールの左端とコンテナーのクライアント領域の左端の間の距離 (ピクセル単位) を示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1726">An <see cref="T:System.Int32" /> representing the distance, in pixels, between the left edge of the control and the left edge of its container's client area.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1727"><xref:System.Windows.Forms.Control.Left%2A> プロパティ値は、コントロールの <xref:System.Windows.Forms.Control.Location%2A> プロパティ値の <xref:System.Drawing.Point.X%2A?displayProperty=nameWithType> プロパティと同じです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1727">The <xref:System.Windows.Forms.Control.Left%2A> property value is equivalent to the <xref:System.Drawing.Point.X%2A?displayProperty=nameWithType> property of the <xref:System.Windows.Forms.Control.Location%2A> property value of the control.</span></span>  
  
 <span data-ttu-id="6dc4f-1728"><xref:System.Windows.Forms.Control.Width%2A> プロパティと <xref:System.Windows.Forms.Control.Left%2A> プロパティ値を変更すると、コントロールの <xref:System.Windows.Forms.Control.Right%2A> プロパティ値が変更されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1728">Changes made to the <xref:System.Windows.Forms.Control.Width%2A> and <xref:System.Windows.Forms.Control.Left%2A> property values cause the <xref:System.Windows.Forms.Control.Right%2A> property value of the control to change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1729">次のコード例では、フォームに3つの <xref:System.Windows.Forms.Button> コントロールを作成し、さまざまなサイズ関連のプロパティと場所に関連するプロパティを使用して、サイズと位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1729">The following code example creates three <xref:System.Windows.Forms.Button> controls on a form and sets their size and location by using the various size-related and location-related properties.</span></span> <span data-ttu-id="6dc4f-1730">この例では、幅と高さが300ピクセル以上の <xref:System.Windows.Forms.Form> が必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1730">This example requires that you have a <xref:System.Windows.Forms.Form> that has a width and height of at least 300 pixels.</span></span>  
  
 [!code-cpp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CPP/controlsizelocation.cpp#1)]
 [!code-csharp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CS/controlsizelocation.cs#1)]
 [!code-vb[Windows.Forms.Control SizeLocation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/VB/controlsizelocation.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Drawing.Point.X" />
        <altmember cref="P:System.Windows.Forms.Control.Right" />
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public System.Drawing.Point Location { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point Location" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Location" />
      <MemberSignature Language="VB.NET" Value="Public Property Location As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Point Location { System::Drawing::Point get(); void set(System::Drawing::Point value); };" />
      <MemberSignature Language="F#" Value="member this.Location : System.Drawing.Point with get, set" Usage="System.Windows.Forms.Control.Location" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1731">コンテナーの左上隅に対する相対座標として、コントロールの左上隅の座標を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1731">Gets or sets the coordinates of the upper-left corner of the control relative to the upper-left corner of its container.</span></span></summary>
        <value><span data-ttu-id="6dc4f-1732">コントロールの左上隅をコンテナーの左上隅に対して相対的に表す <see cref="T:System.Drawing.Point" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1732">The <see cref="T:System.Drawing.Point" /> that represents the upper-left corner of the control relative to the upper-left corner of its container.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1733"><xref:System.Drawing.Point> クラスは値型 (Visual Basic では`Structure`、Visual C#では `struct`) であるため、値によって返されます。これは、プロパティにアクセスすると、コントロールの左上点のコピーが返されることを意味します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1733">Because the <xref:System.Drawing.Point> class is a value type (`Structure` in Visual Basic, `struct` in Visual C#), it is returned by value, meaning accessing the property returns a copy of the upper-left point of the control.</span></span> <span data-ttu-id="6dc4f-1734">そのため、このプロパティから返された <xref:System.Drawing.Point> の <xref:System.Drawing.Point.X%2A> または <xref:System.Drawing.Point.Y%2A> プロパティを調整しても、コントロールの <xref:System.Windows.Forms.Control.Left%2A>、<xref:System.Windows.Forms.Control.Right%2A>、<xref:System.Windows.Forms.Control.Top%2A>、または <xref:System.Windows.Forms.Control.Bottom%2A> の各プロパティ値には影響しません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1734">So, adjusting the <xref:System.Drawing.Point.X%2A> or <xref:System.Drawing.Point.Y%2A> properties of the <xref:System.Drawing.Point> returned from this property will not affect the <xref:System.Windows.Forms.Control.Left%2A>, <xref:System.Windows.Forms.Control.Right%2A>, <xref:System.Windows.Forms.Control.Top%2A>, or <xref:System.Windows.Forms.Control.Bottom%2A> property values of the control.</span></span> <span data-ttu-id="6dc4f-1735">これらのプロパティを調整するには、各プロパティ値を個別に設定するか、<xref:System.Windows.Forms.Control.Location%2A> プロパティに新しい <xref:System.Drawing.Point>を設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1735">To adjust these properties set each property value individually, or set the <xref:System.Windows.Forms.Control.Location%2A> property with a new <xref:System.Drawing.Point>.</span></span>  
  
 <span data-ttu-id="6dc4f-1736"><xref:System.Windows.Forms.Control> が <xref:System.Windows.Forms.Form>の場合、<xref:System.Windows.Forms.Control.Location%2A> プロパティの値は <xref:System.Windows.Forms.Form> の左上隅を画面座標で表します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1736">If the <xref:System.Windows.Forms.Control> is a <xref:System.Windows.Forms.Form>, the <xref:System.Windows.Forms.Control.Location%2A> property value represents the upper-left corner of the <xref:System.Windows.Forms.Form> in screen coordinates.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1737">次のコード例では、<xref:System.Windows.Forms.GroupBox> を作成し、その共通プロパティのいくつかを設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1737">The following code example creates a <xref:System.Windows.Forms.GroupBox> and sets some of its common properties.</span></span> <span data-ttu-id="6dc4f-1738">この例では、<xref:System.Windows.Forms.TextBox> を作成し、その <xref:System.Windows.Forms.Control.Location%2A> をグループボックス内に設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1738">The example creates a <xref:System.Windows.Forms.TextBox> and sets its <xref:System.Windows.Forms.Control.Location%2A> within the group box.</span></span> <span data-ttu-id="6dc4f-1739">次に、グループボックスの <xref:System.Windows.Forms.Control.Text%2A> プロパティを設定し、グループボックスをフォームの上部にドッキングします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1739">Next, it sets the <xref:System.Windows.Forms.Control.Text%2A> property of the group box, and docks the group box to the top of the form.</span></span> <span data-ttu-id="6dc4f-1740">最後に、[<xref:System.Windows.Forms.Control.Enabled%2A>] プロパティを [`false`] に設定して、グループボックスを無効にします。これにより、[グループ] ボックスに含まれるすべてのコントロールが無効になります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1740">Lastly, it disables the group box by setting the <xref:System.Windows.Forms.Control.Enabled%2A> property to `false`, which causes all controls contained within the group box to be disabled.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#2)]
 [!code-csharp[Windows.Forms.Control Properties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#2)]
 [!code-vb[Windows.Forms.Control Properties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
        <altmember cref="T:System.Windows.Forms.ContainerControl" />
      </Docs>
    </Member>
    <Member MemberName="LocationChanged">
      <MemberSignature Language="C#" Value="public event EventHandler LocationChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LocationChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.LocationChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LocationChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ LocationChanged;" />
      <MemberSignature Language="F#" Value="member this.LocationChanged : EventHandler " Usage="member this.LocationChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1741"><see cref="P:System.Windows.Forms.Control.Location" /> プロパティ値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1741">Occurs when the <see cref="P:System.Windows.Forms.Control.Location" /> property value has changed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1742">このイベントは、<xref:System.Windows.Forms.Control.Location%2A> プロパティがプログラムによる変更または対話によって変更された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1742">This event is raised if the <xref:System.Windows.Forms.Control.Location%2A> property is changed by either a programmatic modification or through interaction.</span></span>  
  
 <span data-ttu-id="6dc4f-1743">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1743">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1744">次のコード例では、フォームのサイズが変更されると、<xref:System.Windows.Forms.StatusStrip> の <xref:System.Windows.Forms.Control.LocationChanged> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1744">The following code example raises the <xref:System.Windows.Forms.Control.LocationChanged> event on a <xref:System.Windows.Forms.StatusStrip> when the form is resized.</span></span>  
  
 [!code-csharp[System.Windows.Forms.LocationChanged#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.LocationChanged/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.LocationChanged#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.LocationChanged/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Location" />
      </Docs>
    </Member>
    <Member MemberName="LogicalToDeviceUnits">
      <MemberSignature Language="C#" Value="public System.Drawing.Size LogicalToDeviceUnits (System.Drawing.Size value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Size LogicalToDeviceUnits(valuetype System.Drawing.Size value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.LogicalToDeviceUnits(System.Drawing.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogicalToDeviceUnits (value As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Size LogicalToDeviceUnits(System::Drawing::Size value);" />
      <MemberSignature Language="F#" Value="member this.LogicalToDeviceUnits : System.Drawing.Size -&gt; System.Drawing.Size" Usage="control.LogicalToDeviceUnits value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Drawing.Size" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="6dc4f-1745">拡大縮小するサイズ。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1745">The size to be scaled.</span></span></param>
        <summary><span data-ttu-id="6dc4f-1746">現在の DPI に合わせて拡大縮小し、幅と高さを最も近い整数値に丸めることで論理単位からデバイス単位にサイズを変換します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1746">Transforms a size from logical to device units by scaling it for the current DPI and rounding down to the nearest integer value for width and height.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-1747">拡大縮小されたサイズ。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1747">The scaled size.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalToDeviceUnits">
      <MemberSignature Language="C#" Value="public int LogicalToDeviceUnits (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LogicalToDeviceUnits(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.LogicalToDeviceUnits(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogicalToDeviceUnits (value As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LogicalToDeviceUnits(int value);" />
      <MemberSignature Language="F#" Value="member this.LogicalToDeviceUnits : int -&gt; int" Usage="control.LogicalToDeviceUnits value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="6dc4f-1748">変換する論理値。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1748">The Logical value to convert.</span></span></param>
        <summary><span data-ttu-id="6dc4f-1749">論理 DPI 値をその同等 DeviceUnit DPI 値に変換します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1749">Converts a Logical DPI value to its equivalent DeviceUnit DPI value.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-1750">結果の DeviceUnit 値。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1750">The resulting DeviceUnit value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event EventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ LostFocus;" />
      <MemberSignature Language="F#" Value="member this.LostFocus : EventHandler " Usage="member this.LostFocus : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1751">コントロールがフォーカスを失ったときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1751">Occurs when the control loses focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1752">キーボード (タブ、SHIFT + TAB など) を使用してフォーカスを変更した場合、<xref:System.Windows.Forms.Control.Select%2A> または <xref:System.Windows.Forms.Control.SelectNextControl%2A> メソッドを呼び出した場合、または <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> プロパティを現在のフォームに設定した場合、フォーカスイベントは次の順序で発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1752">When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> property to the current form, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 <span data-ttu-id="6dc4f-1753">マウスを使用するか <xref:System.Windows.Forms.Control.Focus%2A> メソッドを呼び出すことによってフォーカスを変更すると、フォーカスイベントは次の順序で発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1753">When you change the focus by using the mouse or by calling the <xref:System.Windows.Forms.Control.Focus%2A> method, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.LostFocus>  
  
4.  <xref:System.Windows.Forms.Control.Leave>  
  
5.  <xref:System.Windows.Forms.Control.Validating>  
  
6.  <xref:System.Windows.Forms.Control.Validated>  
  
 <span data-ttu-id="6dc4f-1754"><xref:System.Windows.Forms.Control.CausesValidation%2A> プロパティが `false`に設定されている場合、<xref:System.Windows.Forms.Control.Validating> および <xref:System.Windows.Forms.Control.Validated> イベントは抑制されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1754">If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.</span></span>  
  
 <span data-ttu-id="6dc4f-1755"><xref:System.ComponentModel.CancelEventArgs> の <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> プロパティが <xref:System.Windows.Forms.Control.Validating> イベントデリゲートで `true` に設定されている場合、通常は、<xref:System.Windows.Forms.Control.Validating> イベントの後に発生するすべてのイベントが抑制されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1755">If the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.ComponentModel.CancelEventArgs> is set to `true` in the <xref:System.Windows.Forms.Control.Validating> event delegate, all events that would usually occur after the <xref:System.Windows.Forms.Control.Validating> event are suppressed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-1756"><xref:System.Windows.Forms.Control.GotFocus> イベントと <xref:System.Windows.Forms.Control.LostFocus> イベントは、WM_KILLFOCUS および WM_SETFOCUS Windows メッセージに関連付けられている下位レベルのフォーカスイベントです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1756">The <xref:System.Windows.Forms.Control.GotFocus> and <xref:System.Windows.Forms.Control.LostFocus> events are low-level focus events that are tied to the WM_KILLFOCUS and WM_SETFOCUS Windows messages.</span></span> <span data-ttu-id="6dc4f-1757">通常、<xref:System.Windows.Forms.Control.GotFocus> イベントと <xref:System.Windows.Forms.Control.LostFocus> イベントは <xref:System.Windows.Forms.UICues> を更新する場合、またはカスタムコントロールを作成する場合にのみ使用されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1757">Typically, the <xref:System.Windows.Forms.Control.GotFocus> and <xref:System.Windows.Forms.Control.LostFocus> events are only used when updating <xref:System.Windows.Forms.UICues> or when writing custom controls.</span></span> <span data-ttu-id="6dc4f-1758">代わりに、<xref:System.Windows.Forms.Form.Activated> イベントと <xref:System.Windows.Forms.Form.Deactivate> イベントを使用する <xref:System.Windows.Forms.Form> クラスを除くすべてのコントロールに、<xref:System.Windows.Forms.Control.Enter> イベントと <xref:System.Windows.Forms.Control.Leave> イベントを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1758">Instead the <xref:System.Windows.Forms.Control.Enter> and <xref:System.Windows.Forms.Control.Leave> events should be used for all controls except the <xref:System.Windows.Forms.Form> class, which uses the <xref:System.Windows.Forms.Form.Activated> and <xref:System.Windows.Forms.Form.Deactivate> events.</span></span> <span data-ttu-id="6dc4f-1759"><xref:System.Windows.Forms.Control.GotFocus> イベントと <xref:System.Windows.Forms.Control.LostFocus> イベントの詳細については、 [WM_KILLFOCUS](/windows/win32/inputdev/wm-killfocus)と[WM_KILLFOCUS](/windows/win32/inputdev/wm-killfocus)のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1759">For more information about the <xref:System.Windows.Forms.Control.GotFocus> and <xref:System.Windows.Forms.Control.LostFocus> events, see the [WM_KILLFOCUS](/windows/win32/inputdev/wm-killfocus) and [WM_KILLFOCUS](/windows/win32/inputdev/wm-killfocus) topics.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="6dc4f-1760"><xref:System.Windows.Forms.Control.Enter>、<xref:System.Windows.Forms.Control.GotFocus>、<xref:System.Windows.Forms.Control.Leave>、<xref:System.Windows.Forms.Control.LostFocus>、<xref:System.Windows.Forms.Control.Validating>、または <xref:System.Windows.Forms.Control.Validated> のイベントハンドラー内からフォーカスを設定しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1760">Do not attempt to set focus from within the <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>, <xref:System.Windows.Forms.Control.Validating>, or <xref:System.Windows.Forms.Control.Validated> event handlers.</span></span> <span data-ttu-id="6dc4f-1761">これにより、アプリケーションまたはオペレーティングシステムが応答を停止する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1761">Doing so can cause your application or the operating system to stop responding.</span></span> <span data-ttu-id="6dc4f-1762">詳細については、 [WM_KILLFOCUS](/windows/win32/inputdev/wm-killfocus)のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1762">For more information, see the [WM_KILLFOCUS](/windows/win32/inputdev/wm-killfocus) topic.</span></span>  
  
 <span data-ttu-id="6dc4f-1763">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1763">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1764">次のコード例は、TextBox1 のテキストを検証する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1764">The following code example demonstrates validating the text for TextBox1.</span></span> <span data-ttu-id="6dc4f-1765">また、<xref:System.Windows.Forms.FileDialog.InitialDirectory%2A?displayProperty=nameWithType> プロパティを TextBox1 のテキストに設定することによって <xref:System.Windows.Forms.Control.LostFocus> イベントを処理する方法も示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1765">It also demonstrates handling the <xref:System.Windows.Forms.Control.LostFocus> event by setting the <xref:System.Windows.Forms.FileDialog.InitialDirectory%2A?displayProperty=nameWithType> property to the text in TextBox1.</span></span> <span data-ttu-id="6dc4f-1766">このコード例では、<xref:System.Windows.Forms.ErrorProvider.GetError%2A?displayProperty=nameWithType> メソッドを使用して、[ファイル] ダイアログボックスを開く前にエラーを確認しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1766">The code example used the <xref:System.Windows.Forms.ErrorProvider.GetError%2A?displayProperty=nameWithType> method to check for an error before opening the file dialog box.</span></span> <span data-ttu-id="6dc4f-1767">この例を実行するには、`TextBox1`という名前の <xref:System.Windows.Forms.TextBox>、`OpenFileDialog1`という名前の <xref:System.Windows.Forms.OpenFileDialog>、<xref:System.Windows.Forms.Button> という名前の `Button1`、<xref:System.Windows.Forms.ErrorProvider> という名前の `ErrorProvider1`を含むフォームに次のコードを貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1767">To run this example, paste the following code into a form containing a <xref:System.Windows.Forms.TextBox> named `TextBox1`, an <xref:System.Windows.Forms.OpenFileDialog> named `OpenFileDialog1`, a <xref:System.Windows.Forms.Button> named `Button1`, and an <xref:System.Windows.Forms.ErrorProvider> named `ErrorProvider1`.</span></span> <span data-ttu-id="6dc4f-1768">すべてのイベントがイベントハンドラーに関連付けられていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1768">Ensure all events are associated with their event handlers.</span></span>  
  
 [!code-cpp[System.Windows.Forms.FileDialog#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CPP/filedialogform.cpp#2)]
 [!code-csharp[System.Windows.Forms.FileDialog#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CS/filedialogform.cs#2)]
 [!code-vb[System.Windows.Forms.FileDialog#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/VB/filedialogform.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.GotFocus" />
        <altmember cref="E:System.Windows.Forms.Control.Leave" />
        <altmember cref="E:System.Windows.Forms.Form.Deactivate" />
      </Docs>
    </Member>
    <Member MemberName="Margin">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Margin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Margin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Margin" />
      <MemberSignature Language="VB.NET" Value="Public Property Margin As Padding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Padding Margin { System::Windows::Forms::Padding get(); void set(System::Windows::Forms::Padding value); };" />
      <MemberSignature Language="F#" Value="member this.Margin : System.Windows.Forms.Padding with get, set" Usage="System.Windows.Forms.Control.Margin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1769">コントロール間の空白を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1769">Gets or sets the space between controls.</span></span></summary>
        <value><span data-ttu-id="6dc4f-1770">コントロール間の空白を表す <see cref="T:System.Windows.Forms.Padding" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1770">A <see cref="T:System.Windows.Forms.Padding" /> representing the space between controls.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1771">コントロールは、Windows ユーザーインターフェイスガイドラインに近い <xref:System.Windows.Forms.Control.Margin%2A> の既定値を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1771">Controls receive default values for <xref:System.Windows.Forms.Control.Margin%2A> that are reasonably close to Windows user interface guidelines.</span></span> <span data-ttu-id="6dc4f-1772">一部の調整は、特定のアプリケーションに必要な場合もあります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1772">Some adjustments might still be necessary for particular applications.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-1773">ドッキングされたコントロールの <xref:System.Windows.Forms.Control.Margin%2A> プロパティを設定しても、コンテナーの端からコントロールまでの距離には影響しません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1773">Setting the <xref:System.Windows.Forms.Control.Margin%2A> property on a docked control has no effect on the distance of the control from the edges of its container.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MarginChanged">
      <MemberSignature Language="C#" Value="public event EventHandler MarginChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MarginChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MarginChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MarginChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MarginChanged;" />
      <MemberSignature Language="F#" Value="member this.MarginChanged : EventHandler " Usage="member this.MarginChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1774">コントロールのマージンが変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1774">Occurs when the control's margin changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1775">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1775">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1776">このメンバーの使用例を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1776">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="6dc4f-1777">この例では、イベントハンドラーは、<xref:System.Windows.Forms.Control.MarginChanged> イベントの発生を報告します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1777">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.MarginChanged> event.</span></span> <span data-ttu-id="6dc4f-1778">このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1778">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="6dc4f-1779">複数のイベントまたは頻繁に発生するイベントについてレポートするには、<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> を <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> に置き換えるか、複数行 <xref:System.Windows.Forms.TextBox>にメッセージを追加することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1779">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="6dc4f-1780">コード例を実行するには、<xref:System.Windows.Forms.Button> や <xref:System.Windows.Forms.ComboBox>などの <xref:System.Windows.Forms.Control>から継承する型のインスタンスを含むプロジェクトに貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1780">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="6dc4f-1781">次に、インスタンスに `Control1` という名前を付け、イベントハンドラーが <xref:System.Windows.Forms.Control.MarginChanged> イベントに関連付けられていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1781">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.MarginChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#21](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#21)]
 [!code-vb[System.Windows.Forms.EventExamples#21](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Size MaximumSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size MaximumSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.MaximumSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property MaximumSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Size MaximumSize { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberSignature Language="F#" Value="member this.MaximumSize : System.Drawing.Size with get, set" Usage="System.Windows.Forms.Control.MaximumSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.AmbientValue(typeof(System.Drawing.Size), "0, 0")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1782"><see cref="M:System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)" /> が指定できる上限のサイズを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1782">Gets or sets the size that is the upper limit that <see cref="M:System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)" /> can specify.</span></span></summary>
        <value><span data-ttu-id="6dc4f-1783">四角形の幅と高さを表す、順序を付与した <see cref="T:System.Drawing.Size" /> 型のペア。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1783">An ordered pair of type <see cref="T:System.Drawing.Size" /> representing the width and height of a rectangle.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinimumSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Size MinimumSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size MinimumSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.MinimumSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property MinimumSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Size MinimumSize { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberSignature Language="F#" Value="member this.MinimumSize : System.Drawing.Size with get, set" Usage="System.Windows.Forms.Control.MinimumSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1784"><see cref="M:System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)" /> が指定できる下限のサイズを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1784">Gets or sets the size that is the lower limit that <see cref="M:System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)" /> can specify.</span></span></summary>
        <value><span data-ttu-id="6dc4f-1785">四角形の幅と高さを表す、順序を付与した <see cref="T:System.Drawing.Size" /> 型のペア。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1785">An ordered pair of type <see cref="T:System.Drawing.Size" /> representing the width and height of a rectangle.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModifierKeys">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.Keys ModifierKeys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Forms.Keys ModifierKeys" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ModifierKeys" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ModifierKeys As Keys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Forms::Keys ModifierKeys { System::Windows::Forms::Keys get(); };" />
      <MemberSignature Language="F#" Value="member this.ModifierKeys : System.Windows.Forms.Keys" Usage="System.Windows.Forms.Control.ModifierKeys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Keys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1786">どの修飾子キー (Shift キー、Ctrl キーおよび Alt キー) が押された状態であるかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1786">Gets a value indicating which of the modifier keys (SHIFT, CTRL, and ALT) is in a pressed state.</span></span></summary>
        <value><span data-ttu-id="6dc4f-1787"><see cref="T:System.Windows.Forms.Keys" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1787">A bitwise combination of the <see cref="T:System.Windows.Forms.Keys" /> values.</span></span> <span data-ttu-id="6dc4f-1788">既定では、 <see cref="F:System.Windows.Forms.Keys.None" />です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1788">The default is <see cref="F:System.Windows.Forms.Keys.None" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6dc4f-1789">次のコード例では、ボタンがクリックされたときに CTRL キーが押されたときにボタンを非表示にします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1789">The following code example hides a button when the CTRL key is pressed while the button is clicked.</span></span> <span data-ttu-id="6dc4f-1790">この例では、<xref:System.Windows.Forms.Form>に `button1` という名前の <xref:System.Windows.Forms.Button> が必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1790">This example requires that you have a <xref:System.Windows.Forms.Button> named `button1` on a <xref:System.Windows.Forms.Form>.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Members4#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#2)]
 [!code-csharp[Windows.Forms.Control Members4#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#2)]
 [!code-vb[Windows.Forms.Control Members4#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Keys" />
      </Docs>
    </Member>
    <Member MemberName="MouseButtons">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.MouseButtons MouseButtons { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Forms.MouseButtons MouseButtons" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.MouseButtons" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MouseButtons As MouseButtons" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Forms::MouseButtons MouseButtons { System::Windows::Forms::MouseButtons get(); };" />
      <MemberSignature Language="F#" Value="member this.MouseButtons : System.Windows.Forms.MouseButtons" Usage="System.Windows.Forms.Control.MouseButtons" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseButtons</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1791">どのマウス ボタンが押されている状態であるかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1791">Gets a value indicating which of the mouse buttons is in a pressed state.</span></span></summary>
        <value><span data-ttu-id="6dc4f-1792"><see cref="T:System.Windows.Forms.MouseButtons" /> 列挙値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1792">A bitwise combination of the <see cref="T:System.Windows.Forms.MouseButtons" /> enumeration values.</span></span> <span data-ttu-id="6dc4f-1793">既定では、 <see cref="F:System.Windows.Forms.MouseButtons.None" />です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1793">The default is <see cref="F:System.Windows.Forms.MouseButtons.None" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6dc4f-1794">次のコード例は、<xref:System.Windows.Forms.Control.BackColor%2A>、<xref:System.Windows.Forms.Control.RectangleToScreen%2A>、<xref:System.Windows.Forms.Control.PointToScreen%2A>、<xref:System.Windows.Forms.Control.MouseButtons%2A>、<xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=nameWithType>、および <xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=nameWithType> の各メンバーを使用する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1794">The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.BackColor%2A>, <xref:System.Windows.Forms.Control.RectangleToScreen%2A>, <xref:System.Windows.Forms.Control.PointToScreen%2A>, <xref:System.Windows.Forms.Control.MouseButtons%2A>, <xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=nameWithType>, and <xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=nameWithType> members.</span></span> <span data-ttu-id="6dc4f-1795">この例を実行するには、いくつかのコントロールを含む Form1 という名前のフォームに次のコードを貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1795">To run the example, paste the following code in a form called Form1 containing several controls.</span></span> <span data-ttu-id="6dc4f-1796">この例では、<xref:System.Windows.Forms.Control.MouseDown>、<xref:System.Windows.Forms.Control.MouseMove>、および <xref:System.Windows.Forms.Control.MouseUp> イベントが、この例で定義されているイベントハンドラーに接続されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1796">This example requires that the <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseMove>, and <xref:System.Windows.Forms.Control.MouseUp> events are connected to the event handlers defined in the example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MouseButtons" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseCaptureChanged">
      <MemberSignature Language="C#" Value="public event EventHandler MouseCaptureChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MouseCaptureChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseCaptureChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseCaptureChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MouseCaptureChanged;" />
      <MemberSignature Language="F#" Value="member this.MouseCaptureChanged : EventHandler " Usage="member this.MouseCaptureChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1797">コントロールがマウスのキャプチャを失うと発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1797">Occurs when the control loses mouse capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1798">まれなシナリオでは、予期しない入力の検出が必要になることがあります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1798">In rare scenarios, you might need to detect unexpected input.</span></span> <span data-ttu-id="6dc4f-1799">たとえば、次のようなシナリオを考えてみます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1799">For example, consider the following scenarios.</span></span>  
  
-   <span data-ttu-id="6dc4f-1800">ユーザーは、マウス操作中に、Windows キーまたは CTRL + ESC キーを押して [スタート] メニューを開きます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1800">During a mouse operation, the user opens the Start menu by pressing the Windows key or CTRL+ESC.</span></span>  
  
-   <span data-ttu-id="6dc4f-1801">マウス操作中、ユーザーは ALT + TAB キーを押して別のプログラムに切り替えます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1801">During a mouse operation, the user switches to another program by pressing ALT+TAB.</span></span>  
  
-   <span data-ttu-id="6dc4f-1802">マウス操作中に、別のプログラムによって、現在のアプリケーションからフォーカスを取得するウィンドウまたはメッセージボックスが表示されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1802">During a mouse operation, another program displays a window or a message box that takes focus away from the current application.</span></span>  
  
 <span data-ttu-id="6dc4f-1803">マウス操作には、フォームまたはコントロールへのマウスのクリックと保持、またはマウスのドラッグ操作を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1803">Mouse operations can include clicking and holding the mouse on a form or a control, or performing a mouse drag operation.</span></span> <span data-ttu-id="6dc4f-1804">フォームまたはコントロールが、これらおよび関連する予期しないシナリオでマウスキャプチャを失ったことを検出する必要がある場合は、<xref:System.Windows.Forms.Control.MouseCaptureChanged> イベントを使用できます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1804">If you have to detect when a form or a control loses mouse capture for these and related unexpected scenarios, you can use the <xref:System.Windows.Forms.Control.MouseCaptureChanged> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1805">次のコード例は、<xref:System.Windows.Forms.Button> コントロールの <xref:System.Windows.Forms.Control.MouseCaptureChanged> イベントを示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1805">The following code example demonstrates the <xref:System.Windows.Forms.Control.MouseCaptureChanged> event for a <xref:System.Windows.Forms.Button> control.</span></span>  
  
 [!code-csharp[System.Windows.Forms.Control.MouseCaptureChanged#1](~/samples/snippets/csharp/VS_Snippets_Winforms/system.windows.forms.control.mousecapturechanged/cs/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.MouseCaptureChanged#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/system.windows.forms.control.mousecapturechanged/vb/form1.vb#1)]  
  
 <span data-ttu-id="6dc4f-1806">この例をテストするには、F5 キーを押してデバッガーで実行します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1806">To test this example, run it in the debugger by pressing F5.</span></span> <span data-ttu-id="6dc4f-1807">イベントが発生したタイミングを確認できるように、Visual Studio の **[出力]** ウィンドウを開きます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1807">Open the **Output** window in Visual Studio so that you can see when events are raised.</span></span> <span data-ttu-id="6dc4f-1808"><xref:System.Windows.Forms.Button> をクリックすると、次の出力が表示されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1808">Click the <xref:System.Windows.Forms.Button> and notice the following output.</span></span>  
  
 `button1_MouseDown`  
  
 `button1_MouseUp`  
  
 `button1_MouseCaptureChanged`  
  
 <span data-ttu-id="6dc4f-1809">次に、<xref:System.Windows.Forms.Button> コントロールのマウスの左ボタンをクリックしたままにします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1809">Now, click and hold the left mouse button on the <xref:System.Windows.Forms.Button> control.</span></span> <span data-ttu-id="6dc4f-1810">マウスをクリックしたまま、ALT キーを押しながら TAB キーを押して別のプログラムに切り替えます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1810">While still clicking the mouse, press ALT+TAB to switch to another program.</span></span> <span data-ttu-id="6dc4f-1811"><xref:System.Windows.Forms.Control.MouseCaptureChanged> イベントが発生して、このシナリオを処理できる可能性があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1811">Notice that the <xref:System.Windows.Forms.Control.MouseCaptureChanged> event is raised enabling you to potentially handle this scenario.</span></span> <span data-ttu-id="6dc4f-1812">アクションによっては、<xref:System.Windows.Forms.Control.MouseUp> イベントが発生しないことがあります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1812">Depending on your actions, the <xref:System.Windows.Forms.Control.MouseUp> event might not be raised.</span></span> <span data-ttu-id="6dc4f-1813">Windows キーまたは CTRL + ESC キーを使用して、このテストを試すこともできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1813">You can also try this test with the Windows key or CTRL+ESC.</span></span>  
  
 `button1_MouseDown`  
  
 `button1_MouseCaptureChanged`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseClick As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MouseEventHandler ^ MouseClick;" />
      <MemberSignature Language="F#" Value="member this.MouseClick : System.Windows.Forms.MouseEventHandler " Usage="member this.MouseClick : System.Windows.Forms.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1814">マウスでコントロールをクリックしたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1814">Occurs when the control is clicked by the mouse.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1815">カーソルがコントロール上にあるときにマウスボタンをクリックすると、通常、コントロールから次の一連のイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1815">Depressing a mouse button when the cursor is over a control typically raises the following series of events from the control:</span></span>  
  
1.  <span data-ttu-id="6dc4f-1816"><xref:System.Windows.Forms.Control.MouseDown> イベント。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1816"><xref:System.Windows.Forms.Control.MouseDown> event.</span></span>  
  
2.  <span data-ttu-id="6dc4f-1817"><xref:System.Windows.Forms.Control.Click> イベント。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1817"><xref:System.Windows.Forms.Control.Click> event.</span></span>  
  
3.  <span data-ttu-id="6dc4f-1818"><xref:System.Windows.Forms.Control.MouseClick> イベント。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1818"><xref:System.Windows.Forms.Control.MouseClick> event.</span></span>  
  
4.  <span data-ttu-id="6dc4f-1819"><xref:System.Windows.Forms.Control.MouseUp> イベント。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1819"><xref:System.Windows.Forms.Control.MouseUp> event.</span></span>  
  
 <span data-ttu-id="6dc4f-1820">これを行うために、コントロールのクラスでさまざまなイベントを無効にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1820">For this to occur, the various events cannot be disabled in the control's class.</span></span>  
  
 <span data-ttu-id="6dc4f-1821">ユーザーのオペレーティングシステムのマウス設定によって決定されるように、すぐに終了する2回のクリックは、2番目の <xref:System.Windows.Forms.Control.MouseClick> イベントではなく、<xref:System.Windows.Forms.Control.MouseDoubleClick> イベントを生成します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1821">Two single clicks that occur close enough in time, as determined by the mouse settings of the user's operating system, will generate a <xref:System.Windows.Forms.Control.MouseDoubleClick> event instead of the second <xref:System.Windows.Forms.Control.MouseClick> event.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6dc4f-1822"><xref:System.Windows.Forms.Control.Click> イベントは、論理的にはコントロールの上位レベルのイベントです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1822"><xref:System.Windows.Forms.Control.Click> events are logically higher-level events of a control.</span></span> <span data-ttu-id="6dc4f-1823">多くの場合、コントロールにフォーカスがあるときに ENTER キーを押すなど、他のアクションによって発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1823">They are often raised by other actions, such as pressing the ENTER key when the control has focus.</span></span>  
  
 <span data-ttu-id="6dc4f-1824">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1824">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1825">このメンバーの使用例を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1825">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="6dc4f-1826">この例では、イベントハンドラーは、<xref:System.Windows.Forms.Control.MouseClick> イベントの発生を報告します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1826">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.MouseClick> event.</span></span> <span data-ttu-id="6dc4f-1827">このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1827">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="6dc4f-1828">複数のイベントまたは頻繁に発生するイベントについてレポートするには、<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> を <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> に置き換えるか、複数行 <xref:System.Windows.Forms.TextBox>にメッセージを追加することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1828">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="6dc4f-1829">コード例を実行するには、<xref:System.Windows.Forms.Button> や <xref:System.Windows.Forms.ComboBox>などの <xref:System.Windows.Forms.Control>から継承する型のインスタンスを含むプロジェクトに貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1829">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="6dc4f-1830">次に、インスタンスに `Control1` という名前を付け、イベントハンドラーが <xref:System.Windows.Forms.Control.MouseClick> イベントに関連付けられていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1830">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.MouseClick> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#54](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#54)]
 [!code-vb[System.Windows.Forms.EventExamples#54](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.MouseDoubleClick" />
        <altmember cref="E:System.Windows.Forms.Control.MouseDown" />
        <altmember cref="E:System.Windows.Forms.Control.MouseUp" />
        <altmember cref="E:System.Windows.Forms.Control.Click" />
        <altmember cref="E:System.Windows.Forms.Control.DoubleClick" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseDoubleClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseDoubleClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseDoubleClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDoubleClick As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MouseEventHandler ^ MouseDoubleClick;" />
      <MemberSignature Language="F#" Value="member this.MouseDoubleClick : System.Windows.Forms.MouseEventHandler " Usage="member this.MouseDoubleClick : System.Windows.Forms.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1831">マウスでコントロールをダブルクリックしたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1831">Occurs when the control is double clicked by the mouse.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1832"><xref:System.Windows.Forms.Control.MouseDoubleClick> イベントは、カーソルがコントロール上にあるときに、ユーザーがマウスボタンを2回押したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1832">The <xref:System.Windows.Forms.Control.MouseDoubleClick> event occurs when the user depresses a mouse button twice in quick succession when the cursor is over the control.</span></span> <span data-ttu-id="6dc4f-1833">ダブルクリックから2回のシングルクリックを分離する時間間隔は、ユーザーのオペレーティングシステムのマウス設定によって決まります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1833">The time interval that separates two single clicks from a double-click is determined by the mouse settings of the user's operating system.</span></span>  
  
 <span data-ttu-id="6dc4f-1834">このようなユーザー操作が行われると、コントロールによって次の一連のイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1834">The following series of events is raised by the control when such a user action takes place:</span></span>  
  
1.  <span data-ttu-id="6dc4f-1835"><xref:System.Windows.Forms.Control.MouseDown> イベント。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1835"><xref:System.Windows.Forms.Control.MouseDown> event.</span></span>  
  
2.  <span data-ttu-id="6dc4f-1836"><xref:System.Windows.Forms.Control.Click> イベント。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1836"><xref:System.Windows.Forms.Control.Click> event.</span></span>  
  
3.  <span data-ttu-id="6dc4f-1837"><xref:System.Windows.Forms.Control.MouseClick> イベント。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1837"><xref:System.Windows.Forms.Control.MouseClick> event.</span></span>  
  
4.  <span data-ttu-id="6dc4f-1838"><xref:System.Windows.Forms.Control.MouseUp> イベント。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1838"><xref:System.Windows.Forms.Control.MouseUp> event.</span></span>  
  
5.  <span data-ttu-id="6dc4f-1839"><xref:System.Windows.Forms.Control.MouseDown> イベント。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1839"><xref:System.Windows.Forms.Control.MouseDown> event.</span></span>  
  
6.  <span data-ttu-id="6dc4f-1840"><xref:System.Windows.Forms.Control.DoubleClick> イベント。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1840"><xref:System.Windows.Forms.Control.DoubleClick> event.</span></span>  
  
7.  <span data-ttu-id="6dc4f-1841"><xref:System.Windows.Forms.Control.MouseDoubleClick> イベント。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1841"><xref:System.Windows.Forms.Control.MouseDoubleClick> event.</span></span>  
  
8.  <span data-ttu-id="6dc4f-1842"><xref:System.Windows.Forms.Control.MouseUp> イベント。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1842"><xref:System.Windows.Forms.Control.MouseUp> event.</span></span>  
  
 <span data-ttu-id="6dc4f-1843">これを行うために、コントロールのクラスでさまざまなイベントを無効にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1843">For this to occur, the various events cannot be disabled in the control's class.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6dc4f-1844"><xref:System.Windows.Forms.Control.DoubleClick> イベントは、論理的にはコントロールの上位レベルのイベントです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1844"><xref:System.Windows.Forms.Control.DoubleClick> events are logically higher-level events of a control.</span></span> <span data-ttu-id="6dc4f-1845">ショートカットキーの組み合わせなど、他のユーザーの操作によって発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1845">They may be raised by other user actions, such as shortcut key combinations.</span></span>  
  
 <span data-ttu-id="6dc4f-1846">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1846">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1847">このメンバーの使用例を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1847">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="6dc4f-1848">この例では、イベントハンドラーは、<xref:System.Windows.Forms.Control.MouseDoubleClick> イベントの発生を報告します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1848">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.MouseDoubleClick> event.</span></span> <span data-ttu-id="6dc4f-1849">このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1849">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="6dc4f-1850">複数のイベントまたは頻繁に発生するイベントについてレポートするには、<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> を <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> に置き換えるか、複数行 <xref:System.Windows.Forms.TextBox>にメッセージを追加することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1850">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="6dc4f-1851">コード例を実行するには、<xref:System.Windows.Forms.Button> や <xref:System.Windows.Forms.ComboBox>などの <xref:System.Windows.Forms.Control>から継承する型のインスタンスを含むプロジェクトに貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1851">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="6dc4f-1852">次に、インスタンスに `Control1` という名前を付け、イベントハンドラーが <xref:System.Windows.Forms.Control.MouseDoubleClick> イベントに関連付けられていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1852">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.MouseDoubleClick> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#55](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#55)]
 [!code-vb[System.Windows.Forms.EventExamples#55](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#55)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.MouseClick" />
        <altmember cref="E:System.Windows.Forms.Control.DoubleClick" />
        <altmember cref="E:System.Windows.Forms.Control.Click" />
        <altmember cref="E:System.Windows.Forms.Control.MouseDoubleClick" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MouseEventHandler ^ MouseDown;" />
      <MemberSignature Language="F#" Value="member this.MouseDown : System.Windows.Forms.MouseEventHandler " Usage="member this.MouseDown : System.Windows.Forms.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1853">マウス ポインターがコントロール上にあり、マウス ボタンがクリックされると発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1853">Occurs when the mouse pointer is over the control and a mouse button is pressed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1854">マウス イベントは次の順序で発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1854">Mouse events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> / <xref:System.Windows.Forms.Control.MouseDown> / <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-1855"><xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> コレクションに少なくとも1つの <xref:System.Windows.Forms.TabPage> が含まれている場合 (<xref:System.Windows.Forms.Control.Click>、<xref:System.Windows.Forms.Control.DoubleClick>、<xref:System.Windows.Forms.Control.MouseDown>、<xref:System.Windows.Forms.Control.MouseUp>、<xref:System.Windows.Forms.Control.MouseHover>、<xref:System.Windows.Forms.Control.MouseEnter>、<xref:System.Windows.Forms.Control.MouseLeave>、<xref:System.Windows.Forms.Control.MouseMove>)、<xref:System.Windows.Forms.TabControl> クラスでは、次のイベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1855">The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>.</span></span> <span data-ttu-id="6dc4f-1856">コレクションに少なくとも1つの <xref:System.Windows.Forms.TabPage> が存在し、ユーザーがタブコントロールのヘッダー (<xref:System.Windows.Forms.TabPage> 名が表示される) と対話する場合、<xref:System.Windows.Forms.TabControl> は適切なイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1856">If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event.</span></span> <span data-ttu-id="6dc4f-1857">ただし、ユーザーの操作がタブページのクライアント領域内にある場合、<xref:System.Windows.Forms.TabPage> は適切なイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1857">However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.</span></span>  
  
 <span data-ttu-id="6dc4f-1858">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1858">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1859">次のコード例は、さまざまなマウスイベントを使用して、<xref:System.Windows.Forms.Panel>上のマウスのパスを描画する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1859">The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>.</span></span> <span data-ttu-id="6dc4f-1860">各 <xref:System.Windows.Forms.Control.MouseMove> および発生した <xref:System.Windows.Forms.Control.MouseDown> イベントの <xref:System.Drawing.Drawing2D.GraphicsPath> に線分が追加されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1860">A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and <xref:System.Windows.Forms.Control.MouseDown> events that occur.</span></span> <span data-ttu-id="6dc4f-1861">グラフィックスを更新するために、各 `MouseDown` および `MouseUp` イベントの <xref:System.Windows.Forms.Panel> に対して <xref:System.Windows.Forms.Control.Invalidate%2A> メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1861">To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event.</span></span> <span data-ttu-id="6dc4f-1862">さらに、<xref:System.Windows.Forms.Control.MouseWheel> イベントが発生したときに、グラフィックパスが上下にスクロールされます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1862">In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs.</span></span> <span data-ttu-id="6dc4f-1863"><xref:System.Windows.Forms.Control.MouseHover>などの追加のマウスイベントも画面で識別されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1863">Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well.</span></span> <span data-ttu-id="6dc4f-1864">また、画面には、<xref:System.Windows.Forms.SystemInformation> クラスのマウスに関する追加情報も表示されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1864">Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.</span></span>  
  
 [!code-cpp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CPP/mouseeventexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CS/mouseeventexample.cs#1)]
 [!code-vb[System.Windows.Forms.MouseEvent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/VB/mouseeventexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.MouseClick" />
        <altmember cref="E:System.Windows.Forms.Control.MouseUp" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="public event EventHandler MouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MouseEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseEnter As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MouseEnter;" />
      <MemberSignature Language="F#" Value="member this.MouseEnter : EventHandler " Usage="member this.MouseEnter : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1865">マウス ポインターによってコントロールが入力されると発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1865">Occurs when the mouse pointer enters the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1866">マウス イベントは次の順序で発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1866">Mouse events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> / <xref:System.Windows.Forms.Control.MouseDown> / <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-1867"><xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> コレクションに少なくとも1つの <xref:System.Windows.Forms.TabPage> が含まれている場合 (<xref:System.Windows.Forms.Control.Click>、<xref:System.Windows.Forms.Control.DoubleClick>、<xref:System.Windows.Forms.Control.MouseDown>、<xref:System.Windows.Forms.Control.MouseUp>、<xref:System.Windows.Forms.Control.MouseHover>、<xref:System.Windows.Forms.Control.MouseEnter>、<xref:System.Windows.Forms.Control.MouseLeave>、<xref:System.Windows.Forms.Control.MouseMove>)、<xref:System.Windows.Forms.TabControl> クラスでは、次のイベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1867">The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>.</span></span> <span data-ttu-id="6dc4f-1868">コレクションに少なくとも1つの <xref:System.Windows.Forms.TabPage> が存在し、ユーザーがタブコントロールのヘッダー (<xref:System.Windows.Forms.TabPage> 名が表示される) と対話する場合、<xref:System.Windows.Forms.TabControl> は適切なイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1868">If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event.</span></span> <span data-ttu-id="6dc4f-1869">ただし、ユーザーの操作がタブページのクライアント領域内にある場合、<xref:System.Windows.Forms.TabPage> は適切なイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1869">However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.</span></span>  
  
 <span data-ttu-id="6dc4f-1870">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1870">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1871">次のコード例は、さまざまなマウスイベントを使用して、<xref:System.Windows.Forms.Panel>上のマウスのパスを描画する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1871">The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>.</span></span> <span data-ttu-id="6dc4f-1872">各 <xref:System.Windows.Forms.Control.MouseMove> および発生した <xref:System.Windows.Forms.Control.MouseDown> イベントの <xref:System.Drawing.Drawing2D.GraphicsPath> に線分が追加されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1872">A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and <xref:System.Windows.Forms.Control.MouseDown> events that occur.</span></span> <span data-ttu-id="6dc4f-1873">グラフィックスを更新するために、各 `MouseDown` および `MouseUp` イベントの <xref:System.Windows.Forms.Panel> に対して <xref:System.Windows.Forms.Control.Invalidate%2A> メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1873">To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event.</span></span> <span data-ttu-id="6dc4f-1874">さらに、<xref:System.Windows.Forms.Control.MouseWheel> イベントが発生したときに、グラフィックパスが上下にスクロールされます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1874">In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs.</span></span> <span data-ttu-id="6dc4f-1875"><xref:System.Windows.Forms.Control.MouseHover>などの追加のマウスイベントも画面で識別されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1875">Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well.</span></span> <span data-ttu-id="6dc4f-1876">また、画面には、<xref:System.Windows.Forms.SystemInformation> クラスのマウスに関する追加情報も表示されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1876">Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.</span></span>  
  
 [!code-cpp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CPP/mouseeventexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CS/mouseeventexample.cs#1)]
 [!code-vb[System.Windows.Forms.MouseEvent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/VB/mouseeventexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.MouseLeave" />
        <altmember cref="E:System.Windows.Forms.Control.MouseHover" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseHover">
      <MemberSignature Language="C#" Value="public event EventHandler MouseHover;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MouseHover" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseHover" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseHover As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MouseHover;" />
      <MemberSignature Language="F#" Value="member this.MouseHover : EventHandler " Usage="member this.MouseHover : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1877">マウス ポインターをコントロールの上に重ねると発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1877">Occurs when the mouse pointer rests on the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1878"><xref:System.Windows.Forms.Control.MouseHover> の一般的な使用方法は、コントロールの周囲の指定した領域 ("ホバー四角形") 内のコントロール上でマウスを置いたときにツールヒントを表示することです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1878">A typical use of <xref:System.Windows.Forms.Control.MouseHover> is to display a tool tip when the mouse pauses on a control within a specified area around the control (the "hover rectangle").</span></span> <span data-ttu-id="6dc4f-1879">このイベントを発生させるために必要な pause は、<xref:System.Windows.Forms.SystemInformation.MouseHoverTime%2A> プロパティによってミリ秒単位で指定されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1879">The pause required for this event to be raised is specified in milliseconds by the <xref:System.Windows.Forms.SystemInformation.MouseHoverTime%2A> property.</span></span>  
  
 <span data-ttu-id="6dc4f-1880"><xref:System.Windows.Forms.Control.MouseHover> イベントは、<xref:System.Windows.Forms.SystemInformation.MouseHoverSize%2A> プロパティと <xref:System.Windows.Forms.SystemInformation.MouseHoverTime%2A> プロパティとの接続で定義され、検出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1880">The <xref:System.Windows.Forms.Control.MouseHover> event is defined and detected in connection with the <xref:System.Windows.Forms.SystemInformation.MouseHoverSize%2A> and <xref:System.Windows.Forms.SystemInformation.MouseHoverTime%2A> properties.</span></span>  
  
 <span data-ttu-id="6dc4f-1881">マウス イベントは次の順序で発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1881">Mouse events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> / <xref:System.Windows.Forms.Control.MouseDown> / <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-1882"><xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> コレクションに少なくとも1つの <xref:System.Windows.Forms.TabPage> が含まれている場合 (<xref:System.Windows.Forms.Control.Click>、<xref:System.Windows.Forms.Control.DoubleClick>、<xref:System.Windows.Forms.Control.MouseDown>、<xref:System.Windows.Forms.Control.MouseUp>、<xref:System.Windows.Forms.Control.MouseHover>、<xref:System.Windows.Forms.Control.MouseEnter>、<xref:System.Windows.Forms.Control.MouseLeave>、<xref:System.Windows.Forms.Control.MouseMove>)、<xref:System.Windows.Forms.TabControl> クラスでは、次のイベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1882">The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>.</span></span> <span data-ttu-id="6dc4f-1883">コレクションに少なくとも1つの <xref:System.Windows.Forms.TabPage> が存在し、ユーザーがタブコントロールのヘッダー (<xref:System.Windows.Forms.TabPage> 名が表示される) と対話する場合、<xref:System.Windows.Forms.TabControl> は適切なイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1883">If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event.</span></span> <span data-ttu-id="6dc4f-1884">ただし、ユーザーの操作がタブページのクライアント領域内にある場合、<xref:System.Windows.Forms.TabPage> は適切なイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1884">However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.</span></span>  
  
 <span data-ttu-id="6dc4f-1885">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1885">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1886">次のコード例は、さまざまなマウスイベントを使用して、<xref:System.Windows.Forms.Panel>上のマウスのパスを描画する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1886">The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>.</span></span> <span data-ttu-id="6dc4f-1887">各 <xref:System.Windows.Forms.Control.MouseMove> および発生した <xref:System.Windows.Forms.Control.MouseDown> イベントの <xref:System.Drawing.Drawing2D.GraphicsPath> に線分が追加されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1887">A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and <xref:System.Windows.Forms.Control.MouseDown> events that occur.</span></span> <span data-ttu-id="6dc4f-1888">グラフィックスを更新するために、各 `MouseDown` および `MouseUp` イベントの <xref:System.Windows.Forms.Panel> に対して <xref:System.Windows.Forms.Control.Invalidate%2A> メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1888">To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event.</span></span> <span data-ttu-id="6dc4f-1889">さらに、<xref:System.Windows.Forms.Control.MouseWheel> イベントが発生したときに、グラフィックパスが上下にスクロールされます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1889">In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs.</span></span> <span data-ttu-id="6dc4f-1890"><xref:System.Windows.Forms.Control.MouseHover>などの追加のマウスイベントも画面で識別されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1890">Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well.</span></span> <span data-ttu-id="6dc4f-1891">また、画面には、<xref:System.Windows.Forms.SystemInformation> クラスのマウスに関する追加情報も表示されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1891">Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.</span></span>  
  
 [!code-cpp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CPP/mouseeventexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CS/mouseeventexample.cs#1)]
 [!code-vb[System.Windows.Forms.MouseEvent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/VB/mouseeventexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.SystemInformation.MouseHoverTime" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event EventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MouseLeave;" />
      <MemberSignature Language="F#" Value="member this.MouseLeave : EventHandler " Usage="member this.MouseLeave : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1892">マウス ポインターがコントロールを離れると発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1892">Occurs when the mouse pointer leaves the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1893">マウス イベントは次の順序で発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1893">Mouse events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> / <xref:System.Windows.Forms.Control.MouseDown> / <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-1894"><xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> コレクションに少なくとも1つの <xref:System.Windows.Forms.TabPage> が含まれている場合 (<xref:System.Windows.Forms.Control.Click>、<xref:System.Windows.Forms.Control.DoubleClick>、<xref:System.Windows.Forms.Control.MouseDown>、<xref:System.Windows.Forms.Control.MouseUp>、<xref:System.Windows.Forms.Control.MouseHover>、<xref:System.Windows.Forms.Control.MouseEnter>、<xref:System.Windows.Forms.Control.MouseLeave>、<xref:System.Windows.Forms.Control.MouseMove>)、<xref:System.Windows.Forms.TabControl> クラスでは、次のイベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1894">The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>.</span></span> <span data-ttu-id="6dc4f-1895">コレクションに少なくとも1つの <xref:System.Windows.Forms.TabPage> が存在し、ユーザーがタブコントロールのヘッダー (<xref:System.Windows.Forms.TabPage> 名が表示される) と対話する場合、<xref:System.Windows.Forms.TabControl> は適切なイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1895">If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event.</span></span> <span data-ttu-id="6dc4f-1896">ただし、ユーザーの操作がタブページのクライアント領域内にある場合、<xref:System.Windows.Forms.TabPage> は適切なイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1896">However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.</span></span>  
  
 <span data-ttu-id="6dc4f-1897">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1897">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1898">次のコード例は、さまざまなマウスイベントを使用して、<xref:System.Windows.Forms.Panel>上のマウスのパスを描画する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1898">The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>.</span></span> <span data-ttu-id="6dc4f-1899">各 <xref:System.Windows.Forms.Control.MouseMove> および発生した <xref:System.Windows.Forms.Control.MouseDown> イベントの <xref:System.Drawing.Drawing2D.GraphicsPath> に線分が追加されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1899">A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and <xref:System.Windows.Forms.Control.MouseDown> events that occur.</span></span> <span data-ttu-id="6dc4f-1900">グラフィックスを更新するために、各 `MouseDown` および `MouseUp` イベントの <xref:System.Windows.Forms.Panel> に対して <xref:System.Windows.Forms.Control.Invalidate%2A> メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1900">To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event.</span></span> <span data-ttu-id="6dc4f-1901">さらに、<xref:System.Windows.Forms.Control.MouseWheel> イベントが発生したときに、グラフィックパスが上下にスクロールされます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1901">In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs.</span></span> <span data-ttu-id="6dc4f-1902"><xref:System.Windows.Forms.Control.MouseHover>などの追加のマウスイベントも画面で識別されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1902">Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well.</span></span> <span data-ttu-id="6dc4f-1903">また、画面には、<xref:System.Windows.Forms.SystemInformation> クラスのマウスに関する追加情報も表示されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1903">Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.</span></span>  
  
 [!code-cpp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CPP/mouseeventexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CS/mouseeventexample.cs#1)]
 [!code-vb[System.Windows.Forms.MouseEvent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/VB/mouseeventexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MouseEventHandler ^ MouseMove;" />
      <MemberSignature Language="F#" Value="member this.MouseMove : System.Windows.Forms.MouseEventHandler " Usage="member this.MouseMove : System.Windows.Forms.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1904">マウス ポインターがコントロール上を移動すると発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1904">Occurs when the mouse pointer is moved over the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1905"><xref:System.Windows.Forms.Control.MouseMove> の一般的な使用方法は、コントロールの色を変更するか、コントロールの周囲に浮き出し四角形を描画することです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1905">Typical uses of <xref:System.Windows.Forms.Control.MouseMove> are to change the control's color or to paint a raised rectangle around the control.</span></span>  
  
 <span data-ttu-id="6dc4f-1906">マウス イベントは次の順序で発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1906">Mouse events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> / <xref:System.Windows.Forms.Control.MouseDown> / <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-1907"><xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> コレクションに少なくとも1つの <xref:System.Windows.Forms.TabPage> が含まれている場合 (<xref:System.Windows.Forms.Control.Click>、<xref:System.Windows.Forms.Control.DoubleClick>、<xref:System.Windows.Forms.Control.MouseDown>、<xref:System.Windows.Forms.Control.MouseUp>、<xref:System.Windows.Forms.Control.MouseHover>、<xref:System.Windows.Forms.Control.MouseEnter>、<xref:System.Windows.Forms.Control.MouseLeave>、<xref:System.Windows.Forms.Control.MouseMove>)、<xref:System.Windows.Forms.TabControl> クラスでは、次のイベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1907">The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>.</span></span> <span data-ttu-id="6dc4f-1908">コレクションに少なくとも1つの <xref:System.Windows.Forms.TabPage> が存在し、ユーザーがタブコントロールのヘッダー (<xref:System.Windows.Forms.TabPage> 名が表示される) と対話する場合、<xref:System.Windows.Forms.TabControl> は適切なイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1908">If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event.</span></span> <span data-ttu-id="6dc4f-1909">ただし、ユーザーの操作がタブページのクライアント領域内にある場合、<xref:System.Windows.Forms.TabPage> は適切なイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1909">However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.</span></span>  
  
 <span data-ttu-id="6dc4f-1910">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1910">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1911">次のコード例は、さまざまなマウスイベントを使用して、<xref:System.Windows.Forms.Panel>上のマウスのパスを描画する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1911">The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>.</span></span> <span data-ttu-id="6dc4f-1912">各 <xref:System.Windows.Forms.Control.MouseMove> および発生した <xref:System.Windows.Forms.Control.MouseDown> イベントの <xref:System.Drawing.Drawing2D.GraphicsPath> に線分が追加されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1912">A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and <xref:System.Windows.Forms.Control.MouseDown> events that occur.</span></span> <span data-ttu-id="6dc4f-1913">グラフィックスを更新するために、各 `MouseDown` および `MouseUp` イベントの <xref:System.Windows.Forms.Panel> に対して <xref:System.Windows.Forms.Control.Invalidate%2A> メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1913">To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event.</span></span> <span data-ttu-id="6dc4f-1914">さらに、<xref:System.Windows.Forms.Control.MouseWheel> イベントが発生したときに、グラフィックパスが上下にスクロールされます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1914">In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs.</span></span> <span data-ttu-id="6dc4f-1915"><xref:System.Windows.Forms.Control.MouseHover>などの追加のマウスイベントも画面で識別されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1915">Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well.</span></span> <span data-ttu-id="6dc4f-1916">また、画面には、<xref:System.Windows.Forms.SystemInformation> クラスのマウスに関する追加情報も表示されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1916">Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.</span></span>  
  
 [!code-cpp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CPP/mouseeventexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CS/mouseeventexample.cs#1)]
 [!code-vb[System.Windows.Forms.MouseEvent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/VB/mouseeventexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MousePosition">
      <MemberSignature Language="C#" Value="public static System.Drawing.Point MousePosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Drawing.Point MousePosition" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.MousePosition" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MousePosition As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Point MousePosition { System::Drawing::Point get(); };" />
      <MemberSignature Language="F#" Value="member this.MousePosition : System.Drawing.Point" Usage="System.Windows.Forms.Control.MousePosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1917">マウス カーソルの位置を画面座標で取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1917">Gets the position of the mouse cursor in screen coordinates.</span></span></summary>
        <value><span data-ttu-id="6dc4f-1918">画面の左上隅に対する相対座標として、マウス カーソルの座標を格納している <see cref="T:System.Drawing.Point" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1918">A <see cref="T:System.Drawing.Point" /> that contains the coordinates of the mouse cursor relative to the upper-left corner of the screen.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1919"><xref:System.Windows.Forms.Control.MousePosition%2A> プロパティは、プロパティが参照されたときのマウスカーソル位置を表す <xref:System.Drawing.Point> を返します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1919">The <xref:System.Windows.Forms.Control.MousePosition%2A> property returns a <xref:System.Drawing.Point> that represents the mouse cursor position at the time the property was referenced.</span></span> <span data-ttu-id="6dc4f-1920">座標は、コントロールに対して相対的ではなく、画面上の位置を示し、カーソルがコントロール上に配置されているかどうかに関係なく返されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1920">The coordinates indicate the position on the screen, not relative to the control, and are returned regardless of whether the cursor is positioned over the control.</span></span> <span data-ttu-id="6dc4f-1921">画面の左上隅の座標は 0, 0 です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1921">The coordinates of the upper-left corner of the screen are 0,0.</span></span>  
  
 <span data-ttu-id="6dc4f-1922"><xref:System.Windows.Forms.Control.MousePosition%2A> プロパティは、<xref:System.Windows.Forms.Cursor.Position%2A?displayProperty=nameWithType> プロパティと同じです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1922">The <xref:System.Windows.Forms.Control.MousePosition%2A> property is identical to the <xref:System.Windows.Forms.Cursor.Position%2A?displayProperty=nameWithType> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1923">次のコード例では、マウスカーソルがツリーノードの上にあるときに、ユーザーが ALT + E キーを押したときに、<xref:System.Windows.Forms.TreeNode> ラベルを編集可能な状態にします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1923">The following code example puts a <xref:System.Windows.Forms.TreeNode> label into an editable state when the user presses ALT+E while the mouse cursor is over the tree node.</span></span> <span data-ttu-id="6dc4f-1924">ユーザーがラベルの編集を完了した後、ALT + E キーの組み合わせが再び押されるまで、ラベルを再度編集することはできません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1924">After the user is done editing the label, the labels cannot be edited again until the ALT+E key combination is pressed again.</span></span> <span data-ttu-id="6dc4f-1925">この例では、<xref:System.Windows.Forms.Form>に <xref:System.Windows.Forms.TreeView> が必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1925">This example requires that you have a <xref:System.Windows.Forms.TreeView> on a <xref:System.Windows.Forms.Form>.</span></span> <span data-ttu-id="6dc4f-1926">ツリービューには、少なくとも1つの <xref:System.Windows.Forms.TreeNode> が <xref:System.Windows.Forms.TreeView.Nodes%2A> コレクションに含まれている必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1926">The tree view should also have at least one <xref:System.Windows.Forms.TreeNode> in its <xref:System.Windows.Forms.TreeView.Nodes%2A> collection.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Members4#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#3)]
 [!code-csharp[Windows.Forms.Control Members4#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#3)]
 [!code-vb[Windows.Forms.Control Members4#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Point" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MouseEventHandler ^ MouseUp;" />
      <MemberSignature Language="F#" Value="member this.MouseUp : System.Windows.Forms.MouseEventHandler " Usage="member this.MouseUp : System.Windows.Forms.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1927">マウス ポインターがコントロール上にある状態でマウス ボタンが離されると発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1927">Occurs when the mouse pointer is over the control and a mouse button is released.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1928">マウス イベントは次の順序で発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1928">Mouse events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> / <xref:System.Windows.Forms.Control.MouseDown> / <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-1929"><xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> コレクションに少なくとも1つの <xref:System.Windows.Forms.TabPage> が含まれている場合 (<xref:System.Windows.Forms.Control.Click>、<xref:System.Windows.Forms.Control.DoubleClick>、<xref:System.Windows.Forms.Control.MouseDown>、<xref:System.Windows.Forms.Control.MouseUp>、<xref:System.Windows.Forms.Control.MouseHover>、<xref:System.Windows.Forms.Control.MouseEnter>、<xref:System.Windows.Forms.Control.MouseLeave>、<xref:System.Windows.Forms.Control.MouseMove>)、<xref:System.Windows.Forms.TabControl> クラスでは、次のイベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1929">The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>.</span></span> <span data-ttu-id="6dc4f-1930">コレクションに少なくとも1つの <xref:System.Windows.Forms.TabPage> が存在し、ユーザーがタブコントロールのヘッダー (<xref:System.Windows.Forms.TabPage> 名が表示される) と対話する場合、<xref:System.Windows.Forms.TabControl> は適切なイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1930">If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event.</span></span> <span data-ttu-id="6dc4f-1931">ただし、ユーザーの操作がタブページのクライアント領域内にある場合、<xref:System.Windows.Forms.TabPage> は適切なイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1931">However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.</span></span>  
  
 <span data-ttu-id="6dc4f-1932">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1932">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1933">次のコード例は、さまざまなマウスイベントを使用して、<xref:System.Windows.Forms.Panel>上のマウスのパスを描画する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1933">The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>.</span></span> <span data-ttu-id="6dc4f-1934">各 <xref:System.Windows.Forms.Control.MouseMove> および発生した <xref:System.Windows.Forms.Control.MouseDown> イベントの <xref:System.Drawing.Drawing2D.GraphicsPath> に線分が追加されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1934">A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and <xref:System.Windows.Forms.Control.MouseDown> events that occur.</span></span> <span data-ttu-id="6dc4f-1935">グラフィックスを更新するために、各 `MouseDown` および `MouseUp` イベントの <xref:System.Windows.Forms.Panel> に対して <xref:System.Windows.Forms.Control.Invalidate%2A> メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1935">To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event.</span></span> <span data-ttu-id="6dc4f-1936">さらに、<xref:System.Windows.Forms.Control.MouseWheel> イベントが発生したときに、グラフィックパスが上下にスクロールされます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1936">In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs.</span></span> <span data-ttu-id="6dc4f-1937"><xref:System.Windows.Forms.Control.MouseHover>などの追加のマウスイベントも画面で識別されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1937">Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well.</span></span> <span data-ttu-id="6dc4f-1938">また、画面には、<xref:System.Windows.Forms.SystemInformation> クラスのマウスに関する追加情報も表示されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1938">Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.</span></span>  
  
 [!code-cpp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CPP/mouseeventexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CS/mouseeventexample.cs#1)]
 [!code-vb[System.Windows.Forms.MouseEvent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/VB/mouseeventexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseWheel As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MouseEventHandler ^ MouseWheel;" />
      <MemberSignature Language="F#" Value="member this.MouseWheel : System.Windows.Forms.MouseEventHandler " Usage="member this.MouseWheel : System.Windows.Forms.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1939">コントロールにフォーカスがある間に、マウスのホイールを移動したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1939">Occurs when the mouse wheel moves while the control has focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1940"><xref:System.Windows.Forms.Control.MouseWheel> イベントを処理するときは、マウスホイールに関連付けられているユーザーインターフェイス (UI) 標準に従うことが重要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1940">When handling the <xref:System.Windows.Forms.Control.MouseWheel> event it is important to follow the user interface (UI) standards associated with the mouse wheel.</span></span> <span data-ttu-id="6dc4f-1941"><xref:System.Windows.Forms.MouseEventArgs.Delta%2A?displayProperty=nameWithType> プロパティ値は、マウスホイールが移動された量を示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1941">The <xref:System.Windows.Forms.MouseEventArgs.Delta%2A?displayProperty=nameWithType> property value indicates the amount the mouse wheel has been moved.</span></span> <span data-ttu-id="6dc4f-1942">累積デルタが120以上の場合、UI はスクロールする必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1942">The UI should scroll when the accumulated delta is plus or minus 120.</span></span> <span data-ttu-id="6dc4f-1943">UI では、<xref:System.Windows.Forms.SystemInformation.MouseWheelScrollLines%2A?displayProperty=nameWithType> プロパティによって返される論理行の数が、すべての差分値に対してスクロールされます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1943">The UI should scroll the number of logical lines returned by the <xref:System.Windows.Forms.SystemInformation.MouseWheelScrollLines%2A?displayProperty=nameWithType> property for every delta value reached.</span></span> <span data-ttu-id="6dc4f-1944">さらに、120単位でより滑らかにスクロールすることもできます。ただし、比率は一定のままである必要があります。これは、ホイール移動の120デルタ単位ごとにスクロールされた行数 <xref:System.Windows.Forms.SystemInformation.MouseWheelScrollLines%2A?displayProperty=nameWithType> ます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1944">You can also scroll more smoothly in smaller that 120 unit increments, however the ratio should remain constant, that is <xref:System.Windows.Forms.SystemInformation.MouseWheelScrollLines%2A?displayProperty=nameWithType> lines scrolled per 120 delta units of wheel movement.</span></span>  
  
 <span data-ttu-id="6dc4f-1945">マウスホイールメッセージの処理の詳細については、「 [WM_MOUSEWHEEL](/windows/win32/inputdev/wm-mousewheel) 」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1945">For more information about handling mouse wheel messages, see the [WM_MOUSEWHEEL](/windows/win32/inputdev/wm-mousewheel) topic.</span></span>  
  
 <span data-ttu-id="6dc4f-1946">マウス イベントは次の順序で発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1946">Mouse events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> / <xref:System.Windows.Forms.Control.MouseDown> / <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
 <span data-ttu-id="6dc4f-1947">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1947">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1948">次のコード例は、さまざまなマウスイベントを使用して、<xref:System.Windows.Forms.Panel>上のマウスのパスを描画する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1948">The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>.</span></span> <span data-ttu-id="6dc4f-1949">各 <xref:System.Windows.Forms.Control.MouseMove> および発生した <xref:System.Windows.Forms.Control.MouseDown> イベントの <xref:System.Drawing.Drawing2D.GraphicsPath> に線分が追加されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1949">A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and <xref:System.Windows.Forms.Control.MouseDown> events that occur.</span></span> <span data-ttu-id="6dc4f-1950">グラフィックスを更新するために、各 `MouseDown` および `MouseUp` イベントの <xref:System.Windows.Forms.Panel> に対して <xref:System.Windows.Forms.Control.Invalidate%2A> メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1950">To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event.</span></span> <span data-ttu-id="6dc4f-1951">さらに、<xref:System.Windows.Forms.Control.MouseWheel> イベントが発生したときに、グラフィックパスが上下にスクロールされます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1951">In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs.</span></span> <span data-ttu-id="6dc4f-1952"><xref:System.Windows.Forms.Control.MouseHover>などの追加のマウスイベントも画面で識別されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1952">Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well.</span></span> <span data-ttu-id="6dc4f-1953">また、画面には、<xref:System.Windows.Forms.SystemInformation> クラスのマウスに関する追加情報も表示されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1953">Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.</span></span>  
  
 [!code-cpp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CPP/mouseeventexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CS/mouseeventexample.cs#1)]
 [!code-vb[System.Windows.Forms.MouseEvent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/VB/mouseeventexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="Move">
      <MemberSignature Language="C#" Value="public event EventHandler Move;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Move" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Move" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Move As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Move;" />
      <MemberSignature Language="F#" Value="member this.Move : EventHandler " Usage="member this.Move : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1954">コントロールが移動されると発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1954">Occurs when the control is moved.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1955">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1955">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1956">次のコード例では、<xref:System.Windows.Forms.Control.Move> イベントを使用して、フォームのキャプションバーにフォームの位置を画面座標で表示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1956">The following code example uses the <xref:System.Windows.Forms.Control.Move> event to display the location of the form in screen coordinates on the caption bar of the form.</span></span>  
  
 [!code-cpp[Control.Move#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Move/CPP/form1.cpp#1)]
 [!code-csharp[Control.Move#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Move/CS/form1.cs#1)]
 [!code-vb[Control.Move#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Move/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMove(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.Forms.Control.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-1957">コントロールの名前を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1957">Gets or sets the name of the control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-1958">コントロールの名前。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1958">The name of the control.</span></span> <span data-ttu-id="6dc4f-1959">既定値は、空の文字列 ("") です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1959">The default is an empty string ("").</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1960"><xref:System.Windows.Forms.Control.Name%2A> プロパティは、実行時に型およびプログラム名ではなく名前でオブジェクトを評価するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1960">The <xref:System.Windows.Forms.Control.Name%2A> property can be used at run time to evaluate the object by name rather than type and programmatic name.</span></span> <span data-ttu-id="6dc4f-1961"><xref:System.Windows.Forms.Control.Name%2A> プロパティは <xref:System.String> 型を返すため、大文字と小文字を区別するロジックステートメント (Visual Basic の`Select` ステートメント、および Visual C#および `switch` の [!INCLUDE[vcprvc](~/includes/vcprvc-md.md)]ステートメント) で評価できます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1961">Because the <xref:System.Windows.Forms.Control.Name%2A> property returns a <xref:System.String> type, it can be evaluated in case-style logic statements (`Select` statement in Visual Basic, `switch` statement in Visual C# and [!INCLUDE[vcprvc](~/includes/vcprvc-md.md)]).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1962">次のコード例では、コントロールがフォームから追加または削除されたときに、<xref:System.Windows.Forms.MessageBox> 内のコントロールの <xref:System.Windows.Forms.Control.Name%2A> を表示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1962">The following code example displays the <xref:System.Windows.Forms.Control.Name%2A> of a control in a <xref:System.Windows.Forms.MessageBox> when the control is added or removed from a form.</span></span>  
  
 [!code-cpp[Control.ControlRemoved#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.ControlRemoved/CPP/form1.cpp#1)]
 [!code-csharp[Control.ControlRemoved#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.ControlRemoved/CS/form1.cs#1)]
 [!code-vb[Control.ControlRemoved#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.ControlRemoved/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.ISite.Name" />
      </Docs>
    </Member>
    <Member MemberName="NotifyInvalidate">
      <MemberSignature Language="C#" Value="protected virtual void NotifyInvalidate (System.Drawing.Rectangle invalidatedArea);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void NotifyInvalidate(valuetype System.Drawing.Rectangle invalidatedArea) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.NotifyInvalidate(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub NotifyInvalidate (invalidatedArea As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void NotifyInvalidate(System::Drawing::Rectangle invalidatedArea);" />
      <MemberSignature Language="F#" Value="abstract member NotifyInvalidate : System.Drawing.Rectangle -&gt; unit&#xA;override this.NotifyInvalidate : System.Drawing.Rectangle -&gt; unit" Usage="control.NotifyInvalidate invalidatedArea" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="invalidatedArea" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="invalidatedArea"><span data-ttu-id="6dc4f-1963">無効化する領域を表す <see cref="T:System.Drawing.Rectangle" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1963">A <see cref="T:System.Drawing.Rectangle" /> representing the area to invalidate.</span></span></param>
        <summary><span data-ttu-id="6dc4f-1964">無効化するコントロールの領域を指定して、<see cref="E:System.Windows.Forms.Control.Invalidated" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1964">Raises the <see cref="E:System.Windows.Forms.Control.Invalidated" /> event with a specified region of the control to invalidate.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAutoSizeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAutoSizeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAutoSizeChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnAutoSizeChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAutoSizeChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAutoSizeChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnAutoSizeChanged : EventArgs -&gt; unit&#xA;override this.OnAutoSizeChanged : EventArgs -&gt; unit" Usage="control.OnAutoSizeChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-1965">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1965">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-1966"><see cref="E:System.Windows.Forms.Control.AutoSizeChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1966">Raises the <see cref="E:System.Windows.Forms.Control.AutoSizeChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1967">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1967">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-1968">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1968">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-1969"><xref:System.Windows.Forms.Control.OnAutoSizeChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1969">The <xref:System.Windows.Forms.Control.OnAutoSizeChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-1970">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1970">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-1971">派生クラスで <see cref="M:System.Windows.Forms.Control.OnAutoSizeChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnAutoSizeChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1971">When overriding <see cref="M:System.Windows.Forms.Control.OnAutoSizeChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnAutoSizeChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnBackColorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnBackColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBackColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBackColorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBackColorChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnBackColorChanged : EventArgs -&gt; unit&#xA;override this.OnBackColorChanged : EventArgs -&gt; unit" Usage="control.OnBackColorChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-1972">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1972">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-1973"><see cref="E:System.Windows.Forms.Control.BackColorChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1973">Raises the <see cref="E:System.Windows.Forms.Control.BackColorChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1974">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1974">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-1975">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1975">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-1976"><xref:System.Windows.Forms.Control.OnBackColorChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1976">The <xref:System.Windows.Forms.Control.OnBackColorChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-1977">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1977">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1978">次のコード例は、<xref:System.Windows.Forms.Control.Text%2A> プロパティの値が変更されたときに実行されるイベント発生メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1978">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="6dc4f-1979"><xref:System.Windows.Forms.Control> クラスには、 *propertyname 値が*変更されたときに対応する*propertyname*`Changed` イベントを発生させる name pattern `On`*propertyname*`Changed` を持ついくつかのメソッドがあります (*propertyname*は対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1979">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="6dc4f-1980">次のコード例では、通貨データを表示している <xref:System.Windows.Forms.TextBox> 派生クラスの <xref:System.Windows.Forms.Control.ForeColor%2A> を変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1980">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="6dc4f-1981">この例では、テキストを10進数に変換し、数値が負の場合は <xref:System.Windows.Forms.Control.ForeColor%2A> を <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> に変更し、数値が正の値の場合は <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> に変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1981">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="6dc4f-1982">この例では、<xref:System.Windows.Forms.TextBox> クラスから派生したクラスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1982">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-1983">派生クラスで <see cref="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1983">When overriding <see cref="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.BackColorChanged" />
        <altmember cref="P:System.Windows.Forms.Control.BackColor" />
      </Docs>
    </Member>
    <Member MemberName="OnBackgroundImageChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnBackgroundImageChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBackgroundImageChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBackgroundImageChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBackgroundImageChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnBackgroundImageChanged : EventArgs -&gt; unit&#xA;override this.OnBackgroundImageChanged : EventArgs -&gt; unit" Usage="control.OnBackgroundImageChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-1984">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1984">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-1985"><see cref="E:System.Windows.Forms.Control.BackgroundImageChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1985">Raises the <see cref="E:System.Windows.Forms.Control.BackgroundImageChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1986">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1986">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-1987">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1987">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-1988"><xref:System.Windows.Forms.Control.OnBackgroundImageChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1988">The <xref:System.Windows.Forms.Control.OnBackgroundImageChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-1989">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1989">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-1990">次のコード例は、<xref:System.Windows.Forms.Control.Text%2A> プロパティの値が変更されたときに実行されるイベント発生メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1990">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="6dc4f-1991"><xref:System.Windows.Forms.Control> クラスには、 *propertyname 値が*変更されたときに対応する*propertyname*`Changed` イベントを発生させる name pattern `On`*propertyname*`Changed` を持ついくつかのメソッドがあります (*propertyname*は対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1991">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="6dc4f-1992">次のコード例では、通貨データを表示している <xref:System.Windows.Forms.TextBox> 派生クラスの <xref:System.Windows.Forms.Control.ForeColor%2A> を変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1992">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="6dc4f-1993">この例では、テキストを10進数に変換し、数値が負の場合は <xref:System.Windows.Forms.Control.ForeColor%2A> を <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> に変更し、数値が正の値の場合は <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> に変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1993">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="6dc4f-1994">この例では、<xref:System.Windows.Forms.TextBox> クラスから派生したクラスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1994">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-1995">派生クラスで <see cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1995">When overriding <see cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageChanged" />
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImage" />
      </Docs>
    </Member>
    <Member MemberName="OnBackgroundImageLayoutChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnBackgroundImageLayoutChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBackgroundImageLayoutChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBackgroundImageLayoutChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBackgroundImageLayoutChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnBackgroundImageLayoutChanged : EventArgs -&gt; unit&#xA;override this.OnBackgroundImageLayoutChanged : EventArgs -&gt; unit" Usage="control.OnBackgroundImageLayoutChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-1996">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1996">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-1997"><see cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1997">Raises the <see cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-1998">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1998">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-1999">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-1999">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2000"><xref:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2000">The <xref:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2001">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2001">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2002">派生クラスで <see cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2002">When overriding <see cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImageLayout" />
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnBindingContextChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnBindingContextChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBindingContextChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBindingContextChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBindingContextChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnBindingContextChanged : EventArgs -&gt; unit&#xA;override this.OnBindingContextChanged : EventArgs -&gt; unit" Usage="control.OnBindingContextChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2003">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2003">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2004"><see cref="E:System.Windows.Forms.Control.BindingContextChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2004">Raises the <see cref="E:System.Windows.Forms.Control.BindingContextChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2005">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2005">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2006">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2006">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2007"><xref:System.Windows.Forms.Control.OnBindingContextChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2007">The <xref:System.Windows.Forms.Control.OnBindingContextChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2008">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2008">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2009">派生クラスで <see cref="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2009">When overriding <see cref="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.BindingContextChanged" />
        <altmember cref="P:System.Windows.Forms.Control.BindingContext" />
      </Docs>
    </Member>
    <Member MemberName="OnCausesValidationChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCausesValidationChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCausesValidationChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCausesValidationChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCausesValidationChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCausesValidationChanged : EventArgs -&gt; unit&#xA;override this.OnCausesValidationChanged : EventArgs -&gt; unit" Usage="control.OnCausesValidationChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2010">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2010">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2011"><see cref="E:System.Windows.Forms.Control.CausesValidationChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2011">Raises the <see cref="E:System.Windows.Forms.Control.CausesValidationChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2012">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2012">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2013">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2013">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2014"><xref:System.Windows.Forms.Control.OnCausesValidationChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2014">The <xref:System.Windows.Forms.Control.OnCausesValidationChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2015">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2015">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2016">次のコード例は、<xref:System.Windows.Forms.Control.Text%2A> プロパティの値が変更されたときに実行されるイベント発生メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2016">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="6dc4f-2017"><xref:System.Windows.Forms.Control> クラスには、 *propertyname 値が*変更されたときに対応する*propertyname*`Changed` イベントを発生させる name pattern `On`*propertyname*`Changed` を持ついくつかのメソッドがあります (*propertyname*は対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2017">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="6dc4f-2018">次のコード例では、通貨データを表示している <xref:System.Windows.Forms.TextBox> 派生クラスの <xref:System.Windows.Forms.Control.ForeColor%2A> を変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2018">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="6dc4f-2019">この例では、テキストを10進数に変換し、数値が負の場合は <xref:System.Windows.Forms.Control.ForeColor%2A> を <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> に変更し、数値が正の値の場合は <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> に変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2019">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="6dc4f-2020">この例では、<xref:System.Windows.Forms.TextBox> クラスから派生したクラスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2020">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2021">派生クラスで <see cref="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2021">When overriding <see cref="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.CausesValidationChanged" />
        <altmember cref="P:System.Windows.Forms.Control.CausesValidation" />
      </Docs>
    </Member>
    <Member MemberName="OnChangeUICues">
      <MemberSignature Language="C#" Value="protected virtual void OnChangeUICues (System.Windows.Forms.UICuesEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnChangeUICues(class System.Windows.Forms.UICuesEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnChangeUICues (e As UICuesEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnChangeUICues(System::Windows::Forms::UICuesEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnChangeUICues : System.Windows.Forms.UICuesEventArgs -&gt; unit&#xA;override this.OnChangeUICues : System.Windows.Forms.UICuesEventArgs -&gt; unit" Usage="control.OnChangeUICues e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.UICuesEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2022">イベント データを含んでいる <see cref="T:System.Windows.Forms.UICuesEventArgs" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2022">A <see cref="T:System.Windows.Forms.UICuesEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2023"><see cref="E:System.Windows.Forms.Control.ChangeUICues" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2023">Raises the <see cref="E:System.Windows.Forms.Control.ChangeUICues" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2024">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2024">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2025">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2025">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2026"><xref:System.Windows.Forms.Control.OnChangeUICues%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2026">The <xref:System.Windows.Forms.Control.OnChangeUICues%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2027">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2027">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2028">派生クラスで <see cref="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2028">When overriding <see cref="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.ChangeUICues" />
        <altmember cref="T:System.Windows.Forms.UICues" />
      </Docs>
    </Member>
    <Member MemberName="OnClick">
      <MemberSignature Language="C#" Value="protected virtual void OnClick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnClick(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClick (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClick(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnClick : EventArgs -&gt; unit&#xA;override this.OnClick : EventArgs -&gt; unit" Usage="control.OnClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2029">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2029">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2030"><see cref="E:System.Windows.Forms.Control.Click" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2030">Raises the <see cref="E:System.Windows.Forms.Control.Click" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2031">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2031">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2032">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2032">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2033"><xref:System.Windows.Forms.Control.OnClick%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2033">The <xref:System.Windows.Forms.Control.OnClick%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2034">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2034">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2035">次のコード例は、派生クラスの <xref:System.Windows.Forms.Control.OnClick%2A> メソッドをオーバーライドする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2035">The following code example demonstrates overriding the <xref:System.Windows.Forms.Control.OnClick%2A> method in a derived class.</span></span> <span data-ttu-id="6dc4f-2036">この例を実行するには、同じファイル内のフォームクラスの後に次のコードを貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2036">To run the example, paste the following code after a form class, in the same file.</span></span> <span data-ttu-id="6dc4f-2037">`SingleClickTextBox` 型のテキストボックスをフォームに追加します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2037">Add a textbox of type `SingleClickTextBox` to the form.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ControlOnClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlOnClick/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ControlOnClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlOnClick/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ControlOnClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlOnClick/VB/form1.vb#1)]  
  
 <span data-ttu-id="6dc4f-2038">次のコード例は、<xref:System.Windows.Forms.Control.Click> イベントとイベントハンドラーの多くの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2038">The following code example shows one of the many uses of the <xref:System.Windows.Forms.Control.Click> event and event handler.</span></span>  
  
 [!code-cpp[Control.FindForm#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.FindForm/CPP/form1.cpp#1)]
 [!code-csharp[Control.FindForm#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.FindForm/CS/form1.cs#1)]
 [!code-vb[Control.FindForm#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.FindForm/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2039">派生クラスで <see cref="M:System.Windows.Forms.Control.OnClick(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnClick(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2039">When overriding <see cref="M:System.Windows.Forms.Control.OnClick(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnClick(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.Click" />
      </Docs>
    </Member>
    <Member MemberName="OnClientSizeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnClientSizeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClientSizeChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClientSizeChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClientSizeChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnClientSizeChanged : EventArgs -&gt; unit&#xA;override this.OnClientSizeChanged : EventArgs -&gt; unit" Usage="control.OnClientSizeChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2040">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2040">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2041"><see cref="E:System.Windows.Forms.Control.ClientSizeChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2041">Raises the <see cref="E:System.Windows.Forms.Control.ClientSizeChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2042">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2042">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2043">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2043">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2044"><xref:System.Windows.Forms.Control.OnClientSizeChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2044">The <xref:System.Windows.Forms.Control.OnClientSizeChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2045">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2045">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2046">派生クラスで <see cref="M:System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2046">When overriding <see cref="M:System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContextMenuChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContextMenuChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContextMenuChanged : EventArgs -&gt; unit&#xA;override this.OnContextMenuChanged : EventArgs -&gt; unit" Usage="control.OnContextMenuChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2047">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2047">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2048"><see cref="E:System.Windows.Forms.Control.ContextMenuChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2048">Raises the <see cref="E:System.Windows.Forms.Control.ContextMenuChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2049">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2049">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2050">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2050">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2051"><xref:System.Windows.Forms.Control.OnContextMenuChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2051">The <xref:System.Windows.Forms.Control.OnContextMenuChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2052">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2052">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2053">次のコード例は、<xref:System.Windows.Forms.Control.Text%2A> プロパティの値が変更されたときに実行されるイベント発生メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2053">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="6dc4f-2054"><xref:System.Windows.Forms.Control> クラスには、 *propertyname 値が*変更されたときに対応する*propertyname*`Changed` イベントを発生させる name pattern `On`*propertyname*`Changed` を持ついくつかのメソッドがあります (*propertyname*は対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2054">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="6dc4f-2055">次のコード例では、通貨データを表示している <xref:System.Windows.Forms.TextBox> 派生クラスの <xref:System.Windows.Forms.Control.ForeColor%2A> を変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2055">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="6dc4f-2056">この例では、テキストを10進数に変換し、数値が負の場合は <xref:System.Windows.Forms.Control.ForeColor%2A> を <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> に変更し、数値が正の値の場合は <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> に変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2056">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="6dc4f-2057">この例では、<xref:System.Windows.Forms.TextBox> クラスから派生したクラスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2057">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2058">派生クラスで <see cref="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2058">When overriding <see cref="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.ContextMenuChanged" />
        <altmember cref="P:System.Windows.Forms.Control.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuStripChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuStripChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuStripChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnContextMenuStripChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContextMenuStripChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContextMenuStripChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContextMenuStripChanged : EventArgs -&gt; unit&#xA;override this.OnContextMenuStripChanged : EventArgs -&gt; unit" Usage="control.OnContextMenuStripChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2059">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2059">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2060"><see cref="E:System.Windows.Forms.Control.ContextMenuStripChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2060">Raises the <see cref="E:System.Windows.Forms.Control.ContextMenuStripChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2061">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2061">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2062">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2062">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2063"><xref:System.Windows.Forms.Control.OnContextMenuStripChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2063">The <xref:System.Windows.Forms.Control.OnContextMenuStripChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2064">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2064">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2065">派生クラスで <see cref="M:System.Windows.Forms.Control.OnContextMenuStripChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnContextMenuStripChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2065">When overriding <see cref="M:System.Windows.Forms.Control.OnContextMenuStripChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnContextMenuStripChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnControlAdded">
      <MemberSignature Language="C#" Value="protected virtual void OnControlAdded (System.Windows.Forms.ControlEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnControlAdded(class System.Windows.Forms.ControlEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnControlAdded (e As ControlEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnControlAdded(System::Windows::Forms::ControlEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnControlAdded : System.Windows.Forms.ControlEventArgs -&gt; unit&#xA;override this.OnControlAdded : System.Windows.Forms.ControlEventArgs -&gt; unit" Usage="control.OnControlAdded e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ControlEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2066">イベント データを含んでいる <see cref="T:System.Windows.Forms.ControlEventArgs" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2066">A <see cref="T:System.Windows.Forms.ControlEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2067"><see cref="E:System.Windows.Forms.Control.ControlAdded" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2067">Raises the <see cref="E:System.Windows.Forms.Control.ControlAdded" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2068">コントロールに子コントロールが追加されたときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2068">Called when a child control is added to the control.</span></span>  
  
 <span data-ttu-id="6dc4f-2069">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2069">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2070">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2070">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2071"><xref:System.Windows.Forms.Control.OnControlAdded%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2071">The <xref:System.Windows.Forms.Control.OnControlAdded%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2072">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2072">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2073">次のコード例では、<xref:System.Windows.Forms.Control.ControlAdded> を使用してコントロールをフォームに追加し、追加したコントロールの名前を <xref:System.Windows.Forms.MessageBox>に表示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2073">The following code example uses <xref:System.Windows.Forms.Control.ControlAdded> to add a control to a form and displays the name of the added control in a <xref:System.Windows.Forms.MessageBox>.</span></span>  
  
 [!code-cpp[Control.ControlRemoved#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.ControlRemoved/CPP/form1.cpp#1)]
 [!code-csharp[Control.ControlRemoved#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.ControlRemoved/CS/form1.cs#1)]
 [!code-vb[Control.ControlRemoved#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.ControlRemoved/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2074">派生クラスで <see cref="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2074">When overriding <see cref="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.ControlAdded" />
      </Docs>
    </Member>
    <Member MemberName="OnControlRemoved">
      <MemberSignature Language="C#" Value="protected virtual void OnControlRemoved (System.Windows.Forms.ControlEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnControlRemoved(class System.Windows.Forms.ControlEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnControlRemoved (e As ControlEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnControlRemoved(System::Windows::Forms::ControlEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnControlRemoved : System.Windows.Forms.ControlEventArgs -&gt; unit&#xA;override this.OnControlRemoved : System.Windows.Forms.ControlEventArgs -&gt; unit" Usage="control.OnControlRemoved e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ControlEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2075">イベント データを含んでいる <see cref="T:System.Windows.Forms.ControlEventArgs" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2075">A <see cref="T:System.Windows.Forms.ControlEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2076"><see cref="E:System.Windows.Forms.Control.ControlRemoved" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2076">Raises the <see cref="E:System.Windows.Forms.Control.ControlRemoved" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2077">子コントロールがコントロールから削除されたときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2077">Called when a child control is removed from the control.</span></span>  
  
 <span data-ttu-id="6dc4f-2078">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2078">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2079">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2079">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2080"><xref:System.Windows.Forms.Control.OnControlRemoved%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2080">The <xref:System.Windows.Forms.Control.OnControlRemoved%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2081">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2081">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2082">次のコード例では、<xref:System.Windows.Forms.Control.ControlRemoved> を使用してフォームからコントロールを削除し、<xref:System.Windows.Forms.MessageBox>に削除されたコントロールの名前を表示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2082">The following code example uses <xref:System.Windows.Forms.Control.ControlRemoved> to remove a control from a form and displays the name of the removed control in a <xref:System.Windows.Forms.MessageBox>.</span></span>  
  
 [!code-cpp[Control.ControlRemoved#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.ControlRemoved/CPP/form1.cpp#1)]
 [!code-csharp[Control.ControlRemoved#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.ControlRemoved/CS/form1.cs#1)]
 [!code-vb[Control.ControlRemoved#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.ControlRemoved/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2083">派生クラスで <see cref="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2083">When overriding <see cref="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.ControlRemoved" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateControl">
      <MemberSignature Language="C#" Value="protected virtual void OnCreateControl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCreateControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnCreateControl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCreateControl ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCreateControl();" />
      <MemberSignature Language="F#" Value="abstract member OnCreateControl : unit -&gt; unit&#xA;override this.OnCreateControl : unit -&gt; unit" Usage="control.OnCreateControl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6dc4f-2084"><see cref="M:System.Windows.Forms.Control.CreateControl" /> メソッドを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2084">Raises the <see cref="M:System.Windows.Forms.Control.CreateControl" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2085"><xref:System.Windows.Forms.Control.OnCreateControl%2A> メソッドは、コントロールが最初に作成されたときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2085">The <xref:System.Windows.Forms.Control.OnCreateControl%2A> method is called when the control is first created.</span></span>  
  
 <span data-ttu-id="6dc4f-2086"><xref:System.Windows.Forms.Control.OnCreateControl%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2086">The <xref:System.Windows.Forms.Control.OnCreateControl%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2087">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2087">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2088">派生クラスで <see cref="M:System.Windows.Forms.Control.OnCreateControl" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnCreateControl" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2088">When overriding <see cref="M:System.Windows.Forms.Control.OnCreateControl" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnCreateControl" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
      </Docs>
    </Member>
    <Member MemberName="OnCursorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCursorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCursorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCursorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCursorChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCursorChanged : EventArgs -&gt; unit&#xA;override this.OnCursorChanged : EventArgs -&gt; unit" Usage="control.OnCursorChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2089">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2089">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2090"><see cref="E:System.Windows.Forms.Control.CursorChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2090">Raises the <see cref="E:System.Windows.Forms.Control.CursorChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2091">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2091">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2092">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2092">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2093"><xref:System.Windows.Forms.Control.OnCursorChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2093">The <xref:System.Windows.Forms.Control.OnCursorChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2094">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2094">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2095">次のコード例は、<xref:System.Windows.Forms.Control.Text%2A> プロパティの値が変更されたときに実行されるイベント発生メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2095">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="6dc4f-2096"><xref:System.Windows.Forms.Control> クラスには、 *propertyname 値が*変更されたときに対応する*propertyname*`Changed` イベントを発生させる name pattern `On`*propertyname*`Changed` を持ついくつかのメソッドがあります (*propertyname*は対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2096">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="6dc4f-2097">次のコード例では、通貨データを表示している <xref:System.Windows.Forms.TextBox> 派生クラスの <xref:System.Windows.Forms.Control.ForeColor%2A> を変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2097">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="6dc4f-2098">この例では、テキストを10進数に変換し、数値が負の場合は <xref:System.Windows.Forms.Control.ForeColor%2A> を <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> に変更し、数値が正の値の場合は <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> に変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2098">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="6dc4f-2099">この例では、<xref:System.Windows.Forms.TextBox> クラスから派生したクラスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2099">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2100">派生クラスで <see cref="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2100">When overriding <see cref="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.CursorChanged" />
        <altmember cref="P:System.Windows.Forms.Control.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="OnDockChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnDockChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDockChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDockChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDockChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDockChanged : EventArgs -&gt; unit&#xA;override this.OnDockChanged : EventArgs -&gt; unit" Usage="control.OnDockChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2101">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2101">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2102"><see cref="E:System.Windows.Forms.Control.DockChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2102">Raises the <see cref="E:System.Windows.Forms.Control.DockChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2103">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2103">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2104">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2104">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2105"><xref:System.Windows.Forms.Control.OnDockChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2105">The <xref:System.Windows.Forms.Control.OnDockChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2106">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2106">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2107">次のコード例は、<xref:System.Windows.Forms.Control.Text%2A> プロパティの値が変更されたときに実行されるイベント発生メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2107">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="6dc4f-2108"><xref:System.Windows.Forms.Control> クラスには、 *propertyname 値が*変更されたときに対応する*propertyname*`Changed` イベントを発生させる name pattern `On`*propertyname*`Changed` を持ついくつかのメソッドがあります (*propertyname*は対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2108">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="6dc4f-2109">次のコード例では、通貨データを表示している <xref:System.Windows.Forms.TextBox> 派生クラスの <xref:System.Windows.Forms.Control.ForeColor%2A> を変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2109">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="6dc4f-2110">この例では、テキストを10進数に変換し、数値が負の場合は <xref:System.Windows.Forms.Control.ForeColor%2A> を <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> に変更し、数値が正の値の場合は <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> に変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2110">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="6dc4f-2111">この例では、<xref:System.Windows.Forms.TextBox> クラスから派生したクラスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2111">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2112">派生クラスで <see cref="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2112">When overriding <see cref="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.DockChanged" />
        <altmember cref="P:System.Windows.Forms.Control.Dock" />
      </Docs>
    </Member>
    <Member MemberName="OnDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnDoubleClick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDoubleClick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDoubleClick (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDoubleClick(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDoubleClick : EventArgs -&gt; unit&#xA;override this.OnDoubleClick : EventArgs -&gt; unit" Usage="control.OnDoubleClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2113">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2113">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2114"><see cref="E:System.Windows.Forms.Control.DoubleClick" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2114">Raises the <see cref="E:System.Windows.Forms.Control.DoubleClick" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2115">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2115">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2116">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2116">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2117"><xref:System.Windows.Forms.Control.OnDoubleClick%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2117">The <xref:System.Windows.Forms.Control.OnDoubleClick%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2118">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2118">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2119">次のコード例では、<xref:System.Windows.Forms.ListBox> の <xref:System.Windows.Forms.Control.DoubleClick> イベントを使用して、<xref:System.Windows.Forms.ListBox> に一覧表示されているテキストファイルを <xref:System.Windows.Forms.TextBox> コントロールに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2119">The following code example uses the <xref:System.Windows.Forms.Control.DoubleClick> event of a <xref:System.Windows.Forms.ListBox> to load text files listed in the <xref:System.Windows.Forms.ListBox> into a <xref:System.Windows.Forms.TextBox> control.</span></span>  
  
 [!code-cpp[Control.DoubleClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.DoubleClick/CPP/form1.cpp#1)]
 [!code-csharp[Control.DoubleClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.DoubleClick/CS/form1.cs#1)]
 [!code-vb[Control.DoubleClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.DoubleClick/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2120">派生クラスで <see cref="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2120">When overriding <see cref="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.DoubleClick" />
      </Docs>
    </Member>
    <Member MemberName="OnDpiChangedAfterParent">
      <MemberSignature Language="C#" Value="protected virtual void OnDpiChangedAfterParent (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDpiChangedAfterParent(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDpiChangedAfterParent(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDpiChangedAfterParent (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDpiChangedAfterParent(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDpiChangedAfterParent : EventArgs -&gt; unit&#xA;override this.OnDpiChangedAfterParent : EventArgs -&gt; unit" Usage="control.OnDpiChangedAfterParent e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2121">イベント データを格納している <see cref="T:System.Windows.Forms.DpiChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2121">An <see cref="T:System.Windows.Forms.DpiChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2122"><see cref="E:System.Windows.Forms.Control.DpiChangedAfterParent" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2122">Raises the <see cref="E:System.Windows.Forms.Control.DpiChangedAfterParent" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDpiChangedBeforeParent">
      <MemberSignature Language="C#" Value="protected virtual void OnDpiChangedBeforeParent (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDpiChangedBeforeParent(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDpiChangedBeforeParent(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDpiChangedBeforeParent (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDpiChangedBeforeParent(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDpiChangedBeforeParent : EventArgs -&gt; unit&#xA;override this.OnDpiChangedBeforeParent : EventArgs -&gt; unit" Usage="control.OnDpiChangedBeforeParent e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2123">イベント データを格納している <see cref="T:System.Windows.Forms.DpiChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2123">An <see cref="T:System.Windows.Forms.DpiChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2124"><see cref="E:System.Windows.Forms.Control.DpiChangedBeforeParent" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2124">Raises the <see cref="E:System.Windows.Forms.Control.DpiChangedBeforeParent" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDragDrop">
      <MemberSignature Language="C#" Value="protected virtual void OnDragDrop (System.Windows.Forms.DragEventArgs drgevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragDrop(class System.Windows.Forms.DragEventArgs drgevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragDrop (drgevent As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragDrop(System::Windows::Forms::DragEventArgs ^ drgevent);" />
      <MemberSignature Language="F#" Value="abstract member OnDragDrop : System.Windows.Forms.DragEventArgs -&gt; unit&#xA;override this.OnDragDrop : System.Windows.Forms.DragEventArgs -&gt; unit" Usage="control.OnDragDrop drgevent" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IDropTarget.OnDragDrop(System.Windows.Forms.DragEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drgevent" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="drgevent"><span data-ttu-id="6dc4f-2125">イベント データを含んでいる <see cref="T:System.Windows.Forms.DragEventArgs" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2125">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2126"><see cref="E:System.Windows.Forms.Control.DragDrop" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2126">Raises the <see cref="E:System.Windows.Forms.Control.DragDrop" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2127">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2127">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2128">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2128">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2129"><xref:System.Windows.Forms.Control.OnDragDrop%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2129">The <xref:System.Windows.Forms.Control.OnDragDrop%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2130">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2130">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2131">派生クラスで <see cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2131">When overriding <see cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.DragDrop" />
      </Docs>
    </Member>
    <Member MemberName="OnDragEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnDragEnter (System.Windows.Forms.DragEventArgs drgevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragEnter(class System.Windows.Forms.DragEventArgs drgevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragEnter (drgevent As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragEnter(System::Windows::Forms::DragEventArgs ^ drgevent);" />
      <MemberSignature Language="F#" Value="abstract member OnDragEnter : System.Windows.Forms.DragEventArgs -&gt; unit&#xA;override this.OnDragEnter : System.Windows.Forms.DragEventArgs -&gt; unit" Usage="control.OnDragEnter drgevent" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IDropTarget.OnDragEnter(System.Windows.Forms.DragEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drgevent" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="drgevent"><span data-ttu-id="6dc4f-2132">イベント データを含んでいる <see cref="T:System.Windows.Forms.DragEventArgs" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2132">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2133"><see cref="E:System.Windows.Forms.Control.DragEnter" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2133">Raises the <see cref="E:System.Windows.Forms.Control.DragEnter" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2134">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2134">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2135">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2135">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2136"><xref:System.Windows.Forms.Control.OnDragEnter%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2136">The <xref:System.Windows.Forms.Control.OnDragEnter%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2137">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2137">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2138">派生クラスで <see cref="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2138">When overriding <see cref="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.DragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnDragLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragLeave (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragLeave(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragLeave : EventArgs -&gt; unit&#xA;override this.OnDragLeave : EventArgs -&gt; unit" Usage="control.OnDragLeave e" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IDropTarget.OnDragLeave(System.EventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2139">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2139">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2140"><see cref="E:System.Windows.Forms.Control.DragLeave" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2140">Raises the <see cref="E:System.Windows.Forms.Control.DragLeave" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2141">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2141">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2142">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2142">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2143"><xref:System.Windows.Forms.Control.OnDragLeave%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2143">The <xref:System.Windows.Forms.Control.OnDragLeave%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2144">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2144">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2145">派生クラスで <see cref="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2145">When overriding <see cref="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnDragOver">
      <MemberSignature Language="C#" Value="protected virtual void OnDragOver (System.Windows.Forms.DragEventArgs drgevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragOver(class System.Windows.Forms.DragEventArgs drgevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragOver (drgevent As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragOver(System::Windows::Forms::DragEventArgs ^ drgevent);" />
      <MemberSignature Language="F#" Value="abstract member OnDragOver : System.Windows.Forms.DragEventArgs -&gt; unit&#xA;override this.OnDragOver : System.Windows.Forms.DragEventArgs -&gt; unit" Usage="control.OnDragOver drgevent" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IDropTarget.OnDragOver(System.Windows.Forms.DragEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drgevent" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="drgevent"><span data-ttu-id="6dc4f-2146">イベント データを含んでいる <see cref="T:System.Windows.Forms.DragEventArgs" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2146">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2147"><see cref="E:System.Windows.Forms.Control.DragOver" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2147">Raises the <see cref="E:System.Windows.Forms.Control.DragOver" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2148">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2148">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2149">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2149">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2150"><xref:System.Windows.Forms.Control.OnDragOver%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2150">The <xref:System.Windows.Forms.Control.OnDragOver%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2151">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2151">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2152">派生クラスで <see cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2152">When overriding <see cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnEnabledChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnEnabledChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnEnabledChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnEnabledChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnEnabledChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnEnabledChanged : EventArgs -&gt; unit&#xA;override this.OnEnabledChanged : EventArgs -&gt; unit" Usage="control.OnEnabledChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2153">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2153">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2154"><see cref="E:System.Windows.Forms.Control.EnabledChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2154">Raises the <see cref="E:System.Windows.Forms.Control.EnabledChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2155">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2155">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2156">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2156">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2157"><xref:System.Windows.Forms.Control.OnEnabledChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2157">The <xref:System.Windows.Forms.Control.OnEnabledChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2158">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2158">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2159">派生クラスで <see cref="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2159">When overriding <see cref="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.EnabledChanged" />
        <altmember cref="P:System.Windows.Forms.Control.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="OnEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnEnter (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnEnter(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnEnter (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnEnter(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnEnter : EventArgs -&gt; unit&#xA;override this.OnEnter : EventArgs -&gt; unit" Usage="control.OnEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2160">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2160">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2161"><see cref="E:System.Windows.Forms.Control.Enter" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2161">Raises the <see cref="E:System.Windows.Forms.Control.Enter" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2162">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2162">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2163">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2163">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2164"><xref:System.Windows.Forms.Control.OnEnter%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2164">The <xref:System.Windows.Forms.Control.OnEnter%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2165">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2165">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2166">次のコード例では、<xref:System.Windows.Forms.Control.Enter> イベントを使用して、特定の条件下で <xref:System.Windows.Forms.TextBox> の前景色と背景色を変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2166">The following code example uses the <xref:System.Windows.Forms.Control.Enter> event to change the foreground and background colors of a <xref:System.Windows.Forms.TextBox> under particular conditions.</span></span>  
  
 [!code-cpp[Control.Enter#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Enter/CPP/form1.cpp#1)]
 [!code-csharp[Control.Enter#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Enter/CS/form1.cs#1)]
 [!code-vb[Control.Enter#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Enter/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2167">派生クラスで <see cref="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2167">When overriding <see cref="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.Enter" />
      </Docs>
    </Member>
    <Member MemberName="OnFontChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFontChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnFontChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnFontChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnFontChanged : EventArgs -&gt; unit&#xA;override this.OnFontChanged : EventArgs -&gt; unit" Usage="control.OnFontChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2168">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2168">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2169"><see cref="E:System.Windows.Forms.Control.FontChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2169">Raises the <see cref="E:System.Windows.Forms.Control.FontChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2170">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2170">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2171">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2171">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2172"><xref:System.Windows.Forms.Control.OnFontChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2172">The <xref:System.Windows.Forms.Control.OnFontChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2173">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2173">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2174">次のコード例は、<xref:System.Windows.Forms.Control.Text%2A> プロパティの値が変更されたときに実行されるイベント発生メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2174">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="6dc4f-2175"><xref:System.Windows.Forms.Control> クラスには、 *propertyname 値が*変更されたときに対応する*propertyname*`Changed` イベントを発生させる name pattern `On`*propertyname*`Changed` を持ついくつかのメソッドがあります (*propertyname*は対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2175">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="6dc4f-2176">次のコード例では、通貨データを表示している <xref:System.Windows.Forms.TextBox> 派生クラスの <xref:System.Windows.Forms.Control.ForeColor%2A> を変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2176">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="6dc4f-2177">この例では、テキストを10進数に変換し、数値が負の場合は <xref:System.Windows.Forms.Control.ForeColor%2A> を <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> に変更し、数値が正の値の場合は <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> に変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2177">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="6dc4f-2178">この例では、<xref:System.Windows.Forms.TextBox> クラスから派生したクラスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2178">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2179">派生クラスで <see cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2179">When overriding <see cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.FontChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnForeColorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnForeColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnForeColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnForeColorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnForeColorChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnForeColorChanged : EventArgs -&gt; unit&#xA;override this.OnForeColorChanged : EventArgs -&gt; unit" Usage="control.OnForeColorChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2180">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2180">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2181"><see cref="E:System.Windows.Forms.Control.ForeColorChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2181">Raises the <see cref="E:System.Windows.Forms.Control.ForeColorChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2182">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2182">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2183">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2183">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2184"><xref:System.Windows.Forms.Control.OnForeColorChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2184">The <xref:System.Windows.Forms.Control.OnForeColorChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2185">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2185">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2186">次のコード例は、<xref:System.Windows.Forms.Control.Text%2A> プロパティの値が変更されたときに実行されるイベント発生メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2186">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="6dc4f-2187"><xref:System.Windows.Forms.Control> クラスには、 *propertyname 値が*変更されたときに対応する*propertyname*`Changed` イベントを発生させる name pattern `On`*propertyname*`Changed` を持ついくつかのメソッドがあります (*propertyname*は対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2187">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="6dc4f-2188">次のコード例では、通貨データを表示している <xref:System.Windows.Forms.TextBox> 派生クラスの <xref:System.Windows.Forms.Control.ForeColor%2A> を変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2188">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="6dc4f-2189">この例では、テキストを10進数に変換し、数値が負の場合は <xref:System.Windows.Forms.Control.ForeColor%2A> を <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> に変更し、数値が正の値の場合は <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> に変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2189">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="6dc4f-2190">この例では、<xref:System.Windows.Forms.TextBox> クラスから派生したクラスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2190">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2191">派生クラスで <see cref="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2191">When overriding <see cref="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.ForeColorChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnGiveFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnGiveFeedback (System.Windows.Forms.GiveFeedbackEventArgs gfbevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGiveFeedback(class System.Windows.Forms.GiveFeedbackEventArgs gfbevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGiveFeedback (gfbevent As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGiveFeedback(System::Windows::Forms::GiveFeedbackEventArgs ^ gfbevent);" />
      <MemberSignature Language="F#" Value="abstract member OnGiveFeedback : System.Windows.Forms.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnGiveFeedback : System.Windows.Forms.GiveFeedbackEventArgs -&gt; unit" Usage="control.OnGiveFeedback gfbevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gfbevent" Type="System.Windows.Forms.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="gfbevent"><span data-ttu-id="6dc4f-2192">イベント データを含んでいる <see cref="T:System.Windows.Forms.GiveFeedbackEventArgs" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2192">A <see cref="T:System.Windows.Forms.GiveFeedbackEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2193"><see cref="E:System.Windows.Forms.Control.GiveFeedback" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2193">Raises the <see cref="E:System.Windows.Forms.Control.GiveFeedback" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2194">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2194">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2195">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2195">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2196"><xref:System.Windows.Forms.Control.OnGiveFeedback%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2196">The <xref:System.Windows.Forms.Control.OnGiveFeedback%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2197">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2197">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2198">派生クラスで <see cref="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2198">When overriding <see cref="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotFocus (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotFocus(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotFocus (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotFocus(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotFocus : EventArgs -&gt; unit&#xA;override this.OnGotFocus : EventArgs -&gt; unit" Usage="control.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2199">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2199">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2200"><see cref="E:System.Windows.Forms.Control.GotFocus" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2200">Raises the <see cref="E:System.Windows.Forms.Control.GotFocus" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2201">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2201">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2202">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2202">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2203"><xref:System.Windows.Forms.Control.OnGotFocus%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2203">The <xref:System.Windows.Forms.Control.OnGotFocus%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2204">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2204">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2205">派生クラスで <see cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2205">When overriding <see cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.GotFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected virtual void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHandleCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHandleCreated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnHandleCreated : EventArgs -&gt; unit&#xA;override this.OnHandleCreated : EventArgs -&gt; unit" Usage="control.OnHandleCreated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2206">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2206">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2207"><see cref="E:System.Windows.Forms.Control.HandleCreated" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2207">Raises the <see cref="E:System.Windows.Forms.Control.HandleCreated" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2208">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2208">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2209">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2209">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2210"><xref:System.Windows.Forms.Control.OnHandleCreated%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2210">The <xref:System.Windows.Forms.Control.OnHandleCreated%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2211">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2211">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2212">派生クラスで <see cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2212">When overriding <see cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.HandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="OnHandleDestroyed">
      <MemberSignature Language="C#" Value="protected virtual void OnHandleDestroyed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHandleDestroyed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHandleDestroyed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHandleDestroyed(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnHandleDestroyed : EventArgs -&gt; unit&#xA;override this.OnHandleDestroyed : EventArgs -&gt; unit" Usage="control.OnHandleDestroyed e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2213">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2213">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2214"><see cref="E:System.Windows.Forms.Control.HandleDestroyed" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2214">Raises the <see cref="E:System.Windows.Forms.Control.HandleDestroyed" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2215">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2215">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2216">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2216">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2217"><xref:System.Windows.Forms.Control.OnHandleDestroyed%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2217">The <xref:System.Windows.Forms.Control.OnHandleDestroyed%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2218">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2218">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2219">派生クラスで <see cref="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2219">When overriding <see cref="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.HandleDestroyed" />
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="OnHelpRequested">
      <MemberSignature Language="C#" Value="protected virtual void OnHelpRequested (System.Windows.Forms.HelpEventArgs hevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHelpRequested(class System.Windows.Forms.HelpEventArgs hevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHelpRequested (hevent As HelpEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHelpRequested(System::Windows::Forms::HelpEventArgs ^ hevent);" />
      <MemberSignature Language="F#" Value="abstract member OnHelpRequested : System.Windows.Forms.HelpEventArgs -&gt; unit&#xA;override this.OnHelpRequested : System.Windows.Forms.HelpEventArgs -&gt; unit" Usage="control.OnHelpRequested hevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hevent" Type="System.Windows.Forms.HelpEventArgs" />
      </Parameters>
      <Docs>
        <param name="hevent"><span data-ttu-id="6dc4f-2220">イベント データを含んでいる <see cref="T:System.Windows.Forms.HelpEventArgs" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2220">A <see cref="T:System.Windows.Forms.HelpEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2221"><see cref="E:System.Windows.Forms.Control.HelpRequested" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2221">Raises the <see cref="E:System.Windows.Forms.Control.HelpRequested" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2222">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2222">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2223">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2223">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2224"><xref:System.Windows.Forms.Control.OnHelpRequested%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2224">The <xref:System.Windows.Forms.Control.OnHelpRequested%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2225">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2225">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2226">派生クラスで <see cref="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2226">When overriding <see cref="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.HelpRequested" />
      </Docs>
    </Member>
    <Member MemberName="OnImeModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnImeModeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnImeModeChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnImeModeChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnImeModeChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnImeModeChanged : EventArgs -&gt; unit&#xA;override this.OnImeModeChanged : EventArgs -&gt; unit" Usage="control.OnImeModeChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2227">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2227">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2228"><see cref="E:System.Windows.Forms.Control.ImeModeChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2228">Raises the <see cref="E:System.Windows.Forms.Control.ImeModeChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2229">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2229">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2230">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2230">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2231"><xref:System.Windows.Forms.Control.OnImeModeChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2231">The <xref:System.Windows.Forms.Control.OnImeModeChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2232">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2232">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2233">次のコード例は、<xref:System.Windows.Forms.Control.Text%2A> プロパティの値が変更されたときに実行されるイベント発生メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2233">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="6dc4f-2234"><xref:System.Windows.Forms.Control> クラスには、 *propertyname 値が*変更されたときに対応する*propertyname*`Changed` イベントを発生させる name pattern `On`*propertyname*`Changed` を持ついくつかのメソッドがあります (*propertyname*は対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2234">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="6dc4f-2235">次のコード例では、通貨データを表示している <xref:System.Windows.Forms.TextBox> 派生クラスの <xref:System.Windows.Forms.Control.ForeColor%2A> を変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2235">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="6dc4f-2236">この例では、テキストを10進数に変換し、数値が負の場合は <xref:System.Windows.Forms.Control.ForeColor%2A> を <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> に変更し、数値が正の値の場合は <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> に変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2236">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="6dc4f-2237">この例では、<xref:System.Windows.Forms.TextBox> クラスから派生したクラスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2237">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2238">派生クラスで <see cref="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2238">When overriding <see cref="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.ImeModeChanged" />
        <altmember cref="P:System.Windows.Forms.Control.ImeMode" />
      </Docs>
    </Member>
    <Member MemberName="OnInvalidated">
      <MemberSignature Language="C#" Value="protected virtual void OnInvalidated (System.Windows.Forms.InvalidateEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInvalidated(class System.Windows.Forms.InvalidateEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInvalidated (e As InvalidateEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInvalidated(System::Windows::Forms::InvalidateEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnInvalidated : System.Windows.Forms.InvalidateEventArgs -&gt; unit&#xA;override this.OnInvalidated : System.Windows.Forms.InvalidateEventArgs -&gt; unit" Usage="control.OnInvalidated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.InvalidateEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2239">イベント データを格納している <see cref="T:System.Windows.Forms.InvalidateEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2239">An <see cref="T:System.Windows.Forms.InvalidateEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2240"><see cref="E:System.Windows.Forms.Control.Invalidated" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2240">Raises the <see cref="E:System.Windows.Forms.Control.Invalidated" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2241">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2241">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2242">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2242">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2243"><xref:System.Windows.Forms.Control.OnInvalidated%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2243">The <xref:System.Windows.Forms.Control.OnInvalidated%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2244">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2244">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2245">派生クラスで <see cref="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2245">When overriding <see cref="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.Invalidated" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyDown (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyDown(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyDown(System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyDown : System.Windows.Forms.KeyEventArgs -&gt; unit&#xA;override this.OnKeyDown : System.Windows.Forms.KeyEventArgs -&gt; unit" Usage="control.OnKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2246">イベント データを含んでいる <see cref="T:System.Windows.Forms.KeyEventArgs" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2246">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2247"><see cref="E:System.Windows.Forms.Control.KeyDown" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2247">Raises the <see cref="E:System.Windows.Forms.Control.KeyDown" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2248">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2248">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2249">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2249">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2250"><xref:System.Windows.Forms.Control.OnKeyDown%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2250">The <xref:System.Windows.Forms.Control.OnKeyDown%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2251">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2251">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2252">次のコード例では、<xref:System.Windows.Forms.Control.KeyDown> イベントを使用して、コントロールに入力された文字の型を確認します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2252">The following code example uses the <xref:System.Windows.Forms.Control.KeyDown> event to determine the type of character entered into the control.</span></span>  
  
 [!code-cpp[Control.KeyDown#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2253">派生クラスで <see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2253">When overriding <see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyPress">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyPress (System.Windows.Forms.KeyPressEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyPress(class System.Windows.Forms.KeyPressEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyPress (e As KeyPressEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyPress(System::Windows::Forms::KeyPressEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyPress : System.Windows.Forms.KeyPressEventArgs -&gt; unit&#xA;override this.OnKeyPress : System.Windows.Forms.KeyPressEventArgs -&gt; unit" Usage="control.OnKeyPress e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyPressEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2254">イベント データを含んでいる <see cref="T:System.Windows.Forms.KeyPressEventArgs" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2254">A <see cref="T:System.Windows.Forms.KeyPressEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2255"><see cref="E:System.Windows.Forms.Control.KeyPress" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2255">Raises the <see cref="E:System.Windows.Forms.Control.KeyPress" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2256">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2256">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2257">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2257">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2258"><xref:System.Windows.Forms.Control.OnKeyPress%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2258">The <xref:System.Windows.Forms.Control.OnKeyPress%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2259">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2259">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2260">次のコード例では、<xref:System.Windows.Forms.Control.KeyPress> イベントを使用して、文字がコントロールに入力されないようにします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2260">The following code example uses the <xref:System.Windows.Forms.Control.KeyPress> event to prevent characters from entering the control.</span></span>  
  
 [!code-cpp[Control.KeyDown#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2261">派生クラスで <see cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2261">When overriding <see cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyUp (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyUp(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyUp(System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyUp : System.Windows.Forms.KeyEventArgs -&gt; unit&#xA;override this.OnKeyUp : System.Windows.Forms.KeyEventArgs -&gt; unit" Usage="control.OnKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2262">イベント データを含んでいる <see cref="T:System.Windows.Forms.KeyEventArgs" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2262">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2263"><see cref="E:System.Windows.Forms.Control.KeyUp" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2263">Raises the <see cref="E:System.Windows.Forms.Control.KeyUp" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2264">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2264">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2265">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2265">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2266"><xref:System.Windows.Forms.Control.OnKeyUp%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2266">The <xref:System.Windows.Forms.Control.OnKeyUp%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2267">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2267">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2268">次のコード例では、<xref:System.Windows.Forms.Help> クラスで <xref:System.Windows.Forms.Control.KeyUp> イベントを使用して、ユーザーにポップアップスタイルのヘルプを表示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2268">The following code example uses the <xref:System.Windows.Forms.Control.KeyUp> event with the <xref:System.Windows.Forms.Help> class to display pop-up style help to the user.</span></span>  
  
 [!code-cpp[Control.KeyUp#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyUp/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyUp#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyUp/CS/form1.cs#1)]
 [!code-vb[Control.KeyUp#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyUp/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2269">派生クラスで <see cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2269">When overriding <see cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnLayout">
      <MemberSignature Language="C#" Value="protected virtual void OnLayout (System.Windows.Forms.LayoutEventArgs levent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLayout(class System.Windows.Forms.LayoutEventArgs levent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLayout (levent As LayoutEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLayout(System::Windows::Forms::LayoutEventArgs ^ levent);" />
      <MemberSignature Language="F#" Value="abstract member OnLayout : System.Windows.Forms.LayoutEventArgs -&gt; unit&#xA;override this.OnLayout : System.Windows.Forms.LayoutEventArgs -&gt; unit" Usage="control.OnLayout levent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="levent" Type="System.Windows.Forms.LayoutEventArgs" />
      </Parameters>
      <Docs>
        <param name="levent"><span data-ttu-id="6dc4f-2270">イベント データを含んでいる <see cref="T:System.Windows.Forms.LayoutEventArgs" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2270">A <see cref="T:System.Windows.Forms.LayoutEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2271"><see cref="E:System.Windows.Forms.Control.Layout" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2271">Raises the <see cref="E:System.Windows.Forms.Control.Layout" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2272">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2272">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2273">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2273">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2274"><xref:System.Windows.Forms.Control.OnLayout%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2274">The <xref:System.Windows.Forms.Control.OnLayout%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2275">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2275">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2276">派生クラスで <see cref="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受信し、一般的なドッキング関数と固定関数が動作するように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)" /> メソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2276">When overriding <see cref="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)" /> method so that registered delegates receive the event and for typical docking and anchoring functions to work.</span></span> <span data-ttu-id="6dc4f-2277">派生クラスは、カスタムレイアウトロジックを実行するために、このメソッドをオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2277">Derived classes should override this method to do any custom layout logic.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="OnLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLeave (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLeave(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLeave : EventArgs -&gt; unit&#xA;override this.OnLeave : EventArgs -&gt; unit" Usage="control.OnLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2278">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2278">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2279"><see cref="E:System.Windows.Forms.Control.Leave" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2279">Raises the <see cref="E:System.Windows.Forms.Control.Leave" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2280">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2280">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2281">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2281">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2282"><xref:System.Windows.Forms.Control.OnLeave%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2282">The <xref:System.Windows.Forms.Control.OnLeave%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2283">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2283">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2284">次のコード例では、<xref:System.Windows.Forms.Control.Leave> イベントを使用して、コントロールを元の状態にリセットします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2284">The following code example uses the <xref:System.Windows.Forms.Control.Leave> event to reset a control to its former state.</span></span>  
  
 [!code-cpp[Control.Enter#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Enter/CPP/form1.cpp#1)]
 [!code-csharp[Control.Enter#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Enter/CS/form1.cs#1)]
 [!code-vb[Control.Enter#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Enter/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2285">派生クラスで <see cref="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2285">When overriding <see cref="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.Leave" />
      </Docs>
    </Member>
    <Member MemberName="OnLocationChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnLocationChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLocationChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLocationChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLocationChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLocationChanged : EventArgs -&gt; unit&#xA;override this.OnLocationChanged : EventArgs -&gt; unit" Usage="control.OnLocationChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2286">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2286">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2287"><see cref="E:System.Windows.Forms.Control.LocationChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2287">Raises the <see cref="E:System.Windows.Forms.Control.LocationChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2288">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2288">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2289">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2289">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2290"><xref:System.Windows.Forms.Control.OnLocationChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2290">The <xref:System.Windows.Forms.Control.OnLocationChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2291">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2291">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2292">次のコード例は、<xref:System.Windows.Forms.Control.Text%2A> プロパティの値が変更されたときに実行されるイベント発生メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2292">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="6dc4f-2293"><xref:System.Windows.Forms.Control> クラスには、 *propertyname 値が*変更されたときに対応する*propertyname* `Changed` イベントを発生させる name pattern `On`*propertyname*`Changed` を持ついくつかのメソッドがあります (*propertyname*は対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2293">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName* `Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="6dc4f-2294">次のコード例では、通貨データを表示している <xref:System.Windows.Forms.TextBox> 派生クラスの <xref:System.Windows.Forms.Control.ForeColor%2A> を変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2294">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="6dc4f-2295">この例では、テキストを10進数に変換し、数値が負の場合は <xref:System.Windows.Forms.Control.ForeColor%2A> を <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> に変更し、数値が正の値の場合は <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> に変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2295">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="6dc4f-2296">この例では、<xref:System.Windows.Forms.TextBox> クラスから派生したクラスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2296">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2297">派生クラスで <see cref="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2297">When overriding <see cref="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.LocationChanged" />
        <altmember cref="P:System.Windows.Forms.Control.Location" />
      </Docs>
    </Member>
    <Member MemberName="OnLostFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostFocus (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostFocus(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostFocus (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostFocus(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostFocus : EventArgs -&gt; unit&#xA;override this.OnLostFocus : EventArgs -&gt; unit" Usage="control.OnLostFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2298">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2298">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2299"><see cref="E:System.Windows.Forms.Control.LostFocus" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2299">Raises the <see cref="E:System.Windows.Forms.Control.LostFocus" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2300">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2300">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2301">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2301">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2302"><xref:System.Windows.Forms.Control.OnLostFocus%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2302">The <xref:System.Windows.Forms.Control.OnLostFocus%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2303">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2303">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2304">派生クラスで <see cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2304">When overriding <see cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.LostFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnMarginChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnMarginChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMarginChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMarginChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMarginChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMarginChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMarginChanged : EventArgs -&gt; unit&#xA;override this.OnMarginChanged : EventArgs -&gt; unit" Usage="control.OnMarginChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2305">イベント データを含んでいる <see cref="T:System.EventArgs" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2305">A <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2306"><see cref="E:System.Windows.Forms.Control.MarginChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2306">Raises the <see cref="E:System.Windows.Forms.Control.MarginChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2307">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2307">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2308">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2308">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2309"><xref:System.Windows.Forms.Control.OnMarginChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2309">The <xref:System.Windows.Forms.Control.OnMarginChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2310">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2310">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2311">派生クラスで <see cref="M:System.Windows.Forms.Control.OnMarginChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnMarginChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2311">When overriding <see cref="M:System.Windows.Forms.Control.OnMarginChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMarginChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseCaptureChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseCaptureChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseCaptureChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseCaptureChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseCaptureChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseCaptureChanged : EventArgs -&gt; unit&#xA;override this.OnMouseCaptureChanged : EventArgs -&gt; unit" Usage="control.OnMouseCaptureChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2312">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2312">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2313"><see cref="E:System.Windows.Forms.Control.MouseCaptureChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2313">Raises the <see cref="E:System.Windows.Forms.Control.MouseCaptureChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2314">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2314">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2315">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2315">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2316"><xref:System.Windows.Forms.Control.OnMouseCaptureChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2316">The <xref:System.Windows.Forms.Control.OnMouseCaptureChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2317">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2317">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2318">派生クラスで <see cref="M:System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2318">When overriding <see cref="M:System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseClick">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseClick (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseClick(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseClick (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseClick(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseClick : System.Windows.Forms.MouseEventArgs -&gt; unit&#xA;override this.OnMouseClick : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="control.OnMouseClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2319">イベント データを格納している <see cref="T:System.Windows.Forms.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2319">An <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2320"><see cref="E:System.Windows.Forms.Control.MouseClick" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2320">Raises the <see cref="E:System.Windows.Forms.Control.MouseClick" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2321">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2321">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2322">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2322">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2323"><xref:System.Windows.Forms.Control.OnMouseClick%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2323">The <xref:System.Windows.Forms.Control.OnMouseClick%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2324">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2324">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2325">派生クラスで <see cref="M:System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2325">When overriding <see cref="M:System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseDoubleClick (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseDoubleClick(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseDoubleClick (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseDoubleClick(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseDoubleClick : System.Windows.Forms.MouseEventArgs -&gt; unit&#xA;override this.OnMouseDoubleClick : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="control.OnMouseDoubleClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2326">イベント データを格納している <see cref="T:System.Windows.Forms.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2326">An <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2327"><see cref="E:System.Windows.Forms.Control.MouseDoubleClick" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2327">Raises the <see cref="E:System.Windows.Forms.Control.MouseDoubleClick" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2328">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2328">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2329">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2329">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2330"><xref:System.Windows.Forms.Control.OnMouseDoubleClick%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2330">The <xref:System.Windows.Forms.Control.OnMouseDoubleClick%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2331">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2331">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2332">派生クラスで <see cref="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2332">When overriding <see cref="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseDown (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseDown(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseDown (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseDown(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseDown : System.Windows.Forms.MouseEventArgs -&gt; unit&#xA;override this.OnMouseDown : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="control.OnMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2333">イベント データを含んでいる <see cref="T:System.Windows.Forms.MouseEventArgs" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2333">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2334"><see cref="E:System.Windows.Forms.Control.MouseDown" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2334">Raises the <see cref="E:System.Windows.Forms.Control.MouseDown" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2335">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2335">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2336">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2336">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2337"><xref:System.Windows.Forms.Control.OnMouseDown%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2337">The <xref:System.Windows.Forms.Control.OnMouseDown%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2338">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2338">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2339">派生クラスで <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2339">When overriding <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.MouseDown" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseEnter (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseEnter(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseEnter (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseEnter(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseEnter : EventArgs -&gt; unit&#xA;override this.OnMouseEnter : EventArgs -&gt; unit" Usage="control.OnMouseEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2340">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2340">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2341"><see cref="E:System.Windows.Forms.Control.MouseEnter" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2341">Raises the <see cref="E:System.Windows.Forms.Control.MouseEnter" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2342">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2342">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2343">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2343">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2344"><xref:System.Windows.Forms.Control.OnMouseEnter%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2344">The <xref:System.Windows.Forms.Control.OnMouseEnter%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2345">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2345">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2346">派生クラスで <see cref="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2346">When overriding <see cref="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.MouseEnter" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseHover">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseHover (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseHover(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseHover (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseHover(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseHover : EventArgs -&gt; unit&#xA;override this.OnMouseHover : EventArgs -&gt; unit" Usage="control.OnMouseHover e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2347">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2347">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2348"><see cref="E:System.Windows.Forms.Control.MouseHover" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2348">Raises the <see cref="E:System.Windows.Forms.Control.MouseHover" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2349">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2349">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2350">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2350">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2351"><xref:System.Windows.Forms.Control.OnMouseHover%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2351">The <xref:System.Windows.Forms.Control.OnMouseHover%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2352">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2352">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2353">次のコード例は、派生クラスの <xref:System.Windows.Forms.Control.OnMouseHover%2A> および <xref:System.Windows.Forms.Control.OnMouseMove%2A> メソッドをオーバーライドする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2353">The following code example demonstrates how to override the <xref:System.Windows.Forms.Control.OnMouseHover%2A> and <xref:System.Windows.Forms.Control.OnMouseMove%2A> methods in a derived class.</span></span> <span data-ttu-id="6dc4f-2354">この例を実行するには、次のコードを新しいフォームに貼り付け、同じファイルをフォームの後に貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2354">To run the example, paste the following code in a new form and paste this class, forming the same file, after the form.</span></span> <span data-ttu-id="6dc4f-2355">`FunButton` 型のボタンをフォームに追加します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2355">Add a button of type `FunButton` to the form.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ControlDefaultProperties#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ControlDefaultProperties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ControlDefaultProperties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2356">派生クラスで <see cref="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2356">When overriding <see cref="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.MouseHover" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeave (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeave(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeave : EventArgs -&gt; unit&#xA;override this.OnMouseLeave : EventArgs -&gt; unit" Usage="control.OnMouseLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2357">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2357">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2358"><see cref="E:System.Windows.Forms.Control.MouseLeave" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2358">Raises the <see cref="E:System.Windows.Forms.Control.MouseLeave" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2359">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2359">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2360">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2360">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2361"><xref:System.Windows.Forms.Control.OnMouseLeave%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2361">The <xref:System.Windows.Forms.Control.OnMouseLeave%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2362">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2362">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2363">派生クラスで <see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2363">When overriding <see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.MouseLeave" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseMove (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseMove(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseMove(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseMove : System.Windows.Forms.MouseEventArgs -&gt; unit&#xA;override this.OnMouseMove : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="control.OnMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2364">イベント データを含んでいる <see cref="T:System.Windows.Forms.MouseEventArgs" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2364">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2365"><see cref="E:System.Windows.Forms.Control.MouseMove" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2365">Raises the <see cref="E:System.Windows.Forms.Control.MouseMove" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2366">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2366">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2367">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2367">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2368"><xref:System.Windows.Forms.Control.OnMouseMove%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2368">The <xref:System.Windows.Forms.Control.OnMouseMove%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2369">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2369">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2370">次のコード例は、派生クラスの <xref:System.Windows.Forms.Control.OnMouseHover%2A> および <xref:System.Windows.Forms.Control.OnMouseMove%2A> メソッドをオーバーライドする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2370">The following code example demonstrates how to override the <xref:System.Windows.Forms.Control.OnMouseHover%2A> and <xref:System.Windows.Forms.Control.OnMouseMove%2A> methods in a derived class.</span></span> <span data-ttu-id="6dc4f-2371">この例を実行するには、次のコードを新しいフォームに貼り付け、同じファイルをフォームの後に貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2371">To run the example, paste the following code in a new form and paste this class, forming the same file, after the form.</span></span> <span data-ttu-id="6dc4f-2372">`FunButton` 型のボタンをフォームに追加します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2372">Add a button of type `FunButton` to the form.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ControlDefaultProperties#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ControlDefaultProperties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ControlDefaultProperties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2373">派生クラスで <see cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2373">When overriding <see cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.MouseMove" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseUp (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseUp(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseUp (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseUp(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseUp : System.Windows.Forms.MouseEventArgs -&gt; unit&#xA;override this.OnMouseUp : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="control.OnMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2374">イベント データを含んでいる <see cref="T:System.Windows.Forms.MouseEventArgs" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2374">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2375"><see cref="E:System.Windows.Forms.Control.MouseUp" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2375">Raises the <see cref="E:System.Windows.Forms.Control.MouseUp" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2376">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2376">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2377">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2377">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2378"><xref:System.Windows.Forms.Control.OnMouseUp%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2378">The <xref:System.Windows.Forms.Control.OnMouseUp%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2379">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2379">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2380">派生クラスで <see cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2380">When overriding <see cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.MouseUp" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseWheel">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseWheel (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseWheel(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseWheel (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseWheel(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseWheel : System.Windows.Forms.MouseEventArgs -&gt; unit&#xA;override this.OnMouseWheel : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="control.OnMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2381">イベント データを含んでいる <see cref="T:System.Windows.Forms.MouseEventArgs" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2381">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2382"><see cref="E:System.Windows.Forms.Control.MouseWheel" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2382">Raises the <see cref="E:System.Windows.Forms.Control.MouseWheel" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2383">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2383">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2384">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2384">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2385"><xref:System.Windows.Forms.Control.OnMouseWheel%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2385">The <xref:System.Windows.Forms.Control.OnMouseWheel%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2386">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2386">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2387">派生クラスで <see cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2387">When overriding <see cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.MouseWheel" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMove">
      <MemberSignature Language="C#" Value="protected virtual void OnMove (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMove(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMove(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMove (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMove(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMove : EventArgs -&gt; unit&#xA;override this.OnMove : EventArgs -&gt; unit" Usage="control.OnMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2388">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2388">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2389"><see cref="E:System.Windows.Forms.Control.Move" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2389">Raises the <see cref="E:System.Windows.Forms.Control.Move" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2390">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2390">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2391">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2391">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2392"><xref:System.Windows.Forms.Control.OnMove%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2392">The <xref:System.Windows.Forms.Control.OnMove%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2393">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2393">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2394">次のコード例では、<xref:System.Windows.Forms.Control.Move> イベントを使用して、フォームのキャプションバーにフォームの位置を画面座標で表示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2394">The following code example uses the <xref:System.Windows.Forms.Control.Move> event to display the location of the form in screen coordinates on the caption bar of the form.</span></span>  
  
 [!code-cpp[Control.Move#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Move/CPP/form1.cpp#1)]
 [!code-csharp[Control.Move#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Move/CS/form1.cs#1)]
 [!code-vb[Control.Move#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Move/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2395">派生クラスで <see cref="M:System.Windows.Forms.Control.OnMove(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnMove(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2395">When overriding <see cref="M:System.Windows.Forms.Control.OnMove(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMove(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.Move" />
      </Docs>
    </Member>
    <Member MemberName="OnNotifyMessage">
      <MemberSignature Language="C#" Value="protected virtual void OnNotifyMessage (System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnNotifyMessage(valuetype System.Windows.Forms.Message m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnNotifyMessage (m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnNotifyMessage(System::Windows::Forms::Message m);" />
      <MemberSignature Language="F#" Value="abstract member OnNotifyMessage : System.Windows.Forms.Message -&gt; unit&#xA;override this.OnNotifyMessage : System.Windows.Forms.Message -&gt; unit" Usage="control.OnNotifyMessage m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="6dc4f-2396">Windows メッセージを表す <see cref="T:System.Windows.Forms.Message" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2396">A <see cref="T:System.Windows.Forms.Message" /> that represents the Windows message.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2397">コントロールに Windows メッセージを通知します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2397">Notifies the control of Windows messages.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2398"><xref:System.Windows.Forms.Control.OnNotifyMessage%2A> メソッドは、コントロールの `EnableNotifyMessage` スタイルビットが <xref:System.Windows.Forms.ControlStyles>に設定されている場合に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2398">The <xref:System.Windows.Forms.Control.OnNotifyMessage%2A> method is called if the control's `EnableNotifyMessage` style bit is set in <xref:System.Windows.Forms.ControlStyles>.</span></span> <span data-ttu-id="6dc4f-2399"><xref:System.Windows.Forms.ControlStyles> の `EnableNotifyMessage` スタイルを使用すると、<xref:System.Windows.Forms.Control.WndProc%2A> メソッドが Windows メッセージを受信したときに、コントロールに通知を送信できます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2399">The `EnableNotifyMessage` style in <xref:System.Windows.Forms.ControlStyles> enables the control to be notified when the <xref:System.Windows.Forms.Control.WndProc%2A> method receives a Windows message.</span></span> <span data-ttu-id="6dc4f-2400">このメソッドを使用すると、部分的に信頼されたコントロールは、メッセージを変更することなく、Windows メッセージをリッスンできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2400">With this method, semi-trusted controls can listen for Windows messages without enabling them to modify the message.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2401">派生クラスで <see cref="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)" /> をオーバーライドする場合、基本クラスの <see cref="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)" /> メソッドを呼び出す必要はありません。初期実装がないためです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2401">When overriding <see cref="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)" /> in a derived class, calling the base class's <see cref="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)" /> method is not necessary because there is no initial implementation.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnPaddingChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPaddingChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPaddingChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnPaddingChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPaddingChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPaddingChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPaddingChanged : EventArgs -&gt; unit&#xA;override this.OnPaddingChanged : EventArgs -&gt; unit" Usage="control.OnPaddingChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2402">イベント データを含んでいる <see cref="T:System.EventArgs" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2402">A <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2403"><see cref="E:System.Windows.Forms.Control.PaddingChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2403">Raises the <see cref="E:System.Windows.Forms.Control.PaddingChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2404">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2404">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2405">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2405">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2406"><xref:System.Windows.Forms.Control.OnPaddingChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2406">The <xref:System.Windows.Forms.Control.OnPaddingChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2407">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2407">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2408">派生クラスで <see cref="M:System.Windows.Forms.Control.OnPaddingChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnPaddingChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2408">When overriding <see cref="M:System.Windows.Forms.Control.OnPaddingChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnPaddingChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnPaint">
      <MemberSignature Language="C#" Value="protected virtual void OnPaint (System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPaint(class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPaint (e As PaintEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPaint(System::Windows::Forms::PaintEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPaint : System.Windows.Forms.PaintEventArgs -&gt; unit&#xA;override this.OnPaint : System.Windows.Forms.PaintEventArgs -&gt; unit" Usage="control.OnPaint e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2409">イベント データを含んでいる <see cref="T:System.Windows.Forms.PaintEventArgs" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2409">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2410"><see cref="E:System.Windows.Forms.Control.Paint" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2410">Raises the <see cref="E:System.Windows.Forms.Control.Paint" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2411">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2411">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2412">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2412">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2413"><xref:System.Windows.Forms.Control.OnPaint%2A> メソッドを使用すると、デリゲートをアタッチせずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2413">The <xref:System.Windows.Forms.Control.OnPaint%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2414">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2414">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2415">次のコード例では、ユーザーがイメージまたはイメージファイルをフォームにドラッグし、ドロップしたポイントに表示することができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2415">The following code example enables the user to drag an image or image file onto the form, and have it be displayed at the point on which it is dropped.</span></span> <span data-ttu-id="6dc4f-2416"><xref:System.Windows.Forms.Control.OnPaint%2A> メソッドは、フォームが描画されるたびにイメージを再描画するためにオーバーライドされます。それ以外の場合、イメージは次の再描画が行われるまで保持されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2416">The <xref:System.Windows.Forms.Control.OnPaint%2A> method is overridden to repaint the image each time the form is painted; otherwise the image would only persist until the next repainting.</span></span> <span data-ttu-id="6dc4f-2417"><xref:System.Windows.Forms.Control.DragEnter> イベント処理メソッドは、フォームにドラッグされるデータの種類を決定し、適切なフィードバックを提供します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2417">The <xref:System.Windows.Forms.Control.DragEnter> event-handling method determines the type of data being dragged into the form and provides the appropriate feedback.</span></span> <span data-ttu-id="6dc4f-2418">データから <xref:System.Drawing.Image> を作成できる場合は、<xref:System.Windows.Forms.Control.DragDrop> イベント処理メソッドによってフォームに画像が表示されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2418">The <xref:System.Windows.Forms.Control.DragDrop> event-handling method displays the image on the form, if an <xref:System.Drawing.Image> can be created from the data.</span></span> <span data-ttu-id="6dc4f-2419"><xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType> と <xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType> の値は画面座標であるため、この例では <xref:System.Windows.Forms.Control.PointToClient%2A> メソッドを使用してそれらをクライアント座標に変換します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2419">Because the <xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType> and <xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType> values are screen coordinates, the example uses the <xref:System.Windows.Forms.Control.PointToClient%2A> method to convert them to client coordinates.</span></span>  
  
 [!code-cpp[Windows.Forms.Control.DragOperations#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CPP/imagedrag.cpp#1)]
 [!code-csharp[Windows.Forms.Control.DragOperations#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CS/imagedrag.cs#1)]
 [!code-vb[Windows.Forms.Control.DragOperations#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/VB/imagedrag.vb#1)]  
  
 [!code-cpp[Control.Paint#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Paint/CPP/form1.cpp#1)]
 [!code-csharp[Control.Paint#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Paint/CS/form1.cs#1)]
 [!code-vb[Control.Paint#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Paint/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2420">派生クラスで <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2420">When overriding <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.Paint" />
      </Docs>
    </Member>
    <Member MemberName="OnPaintBackground">
      <MemberSignature Language="C#" Value="protected virtual void OnPaintBackground (System.Windows.Forms.PaintEventArgs pevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPaintBackground(class System.Windows.Forms.PaintEventArgs pevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPaintBackground (pevent As PaintEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPaintBackground(System::Windows::Forms::PaintEventArgs ^ pevent);" />
      <MemberSignature Language="F#" Value="abstract member OnPaintBackground : System.Windows.Forms.PaintEventArgs -&gt; unit&#xA;override this.OnPaintBackground : System.Windows.Forms.PaintEventArgs -&gt; unit" Usage="control.OnPaintBackground pevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pevent" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="pevent"><span data-ttu-id="6dc4f-2421">描画するコントロールに関する情報を格納する <see cref="T:System.Windows.Forms.PaintEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2421">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains information about the control to paint.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2422">コントロールの背景を描画します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2422">Paints the background of the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2423"><xref:System.Windows.Forms.Control.OnPaintBackground%2A> メソッドを使用すると、派生クラスで Windows のバックグラウンド消去要求を処理できます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2423">The <xref:System.Windows.Forms.Control.OnPaintBackground%2A> method enables derived classes to handle Windows background erase requests.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2424">継承クラスでは、このメソッドをオーバーライドして、windows からの erase background 要求を処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2424">Inheriting classes should override this method to handle the erase background request from windows.</span></span> <span data-ttu-id="6dc4f-2425">派生クラスで <see cref="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)" /> をオーバーライドする場合、基本クラスの <see cref="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)" />を呼び出す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2425">When overriding <see cref="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)" /> in a derived class it is not necessary to call the base class's <see cref="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)" />.</span></span></para></block>
        <altmember cref="M:System.Windows.Forms.Control.InvokePaintBackground(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnParentBackColorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentBackColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentBackColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentBackColorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentBackColorChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentBackColorChanged : EventArgs -&gt; unit&#xA;override this.OnParentBackColorChanged : EventArgs -&gt; unit" Usage="control.OnParentBackColorChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2426">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2426">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2427">コントロールのコンテナーの <see cref="E:System.Windows.Forms.Control.BackColorChanged" /> プロパティ値が変更された場合に、<see cref="P:System.Windows.Forms.Control.BackColor" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2427">Raises the <see cref="E:System.Windows.Forms.Control.BackColorChanged" /> event when the <see cref="P:System.Windows.Forms.Control.BackColor" /> property value of the control's container changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2428">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2428">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2429">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2429">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2430"><xref:System.Windows.Forms.Control.OnParentBackColorChanged%2A> メソッドを使用すると、デリゲートをアタッチせずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2430">The <xref:System.Windows.Forms.Control.OnParentBackColorChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2431">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2431">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2432">次のコード例は、<xref:System.Windows.Forms.Control.Text%2A> プロパティの値が変更されたときに実行されるイベント発生メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2432">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="6dc4f-2433"><xref:System.Windows.Forms.Control> クラスには、 *propertyname 値が*変更されたときに対応する*propertyname*`Changed` イベントを発生させる name pattern `On`*propertyname*`Changed` を持ついくつかのメソッドがあります (*propertyname*は対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2433">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="6dc4f-2434">次のコード例では、通貨データを表示している <xref:System.Windows.Forms.TextBox> 派生クラスの <xref:System.Windows.Forms.Control.ForeColor%2A> を変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2434">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="6dc4f-2435">この例では、テキストを10進数に変換し、数値が負の場合は <xref:System.Windows.Forms.Control.ForeColor%2A> を <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> に変更し、数値が正の値の場合は <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> に変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2435">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="6dc4f-2436">この例では、<xref:System.Windows.Forms.TextBox> クラスから派生したクラスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2436">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2437">派生クラスで <see cref="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2437">When overriding <see cref="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.BackColorChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentBackgroundImageChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentBackgroundImageChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentBackgroundImageChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentBackgroundImageChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentBackgroundImageChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentBackgroundImageChanged : EventArgs -&gt; unit&#xA;override this.OnParentBackgroundImageChanged : EventArgs -&gt; unit" Usage="control.OnParentBackgroundImageChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2438">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2438">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2439">コントロールのコンテナーの <see cref="E:System.Windows.Forms.Control.BackgroundImageChanged" /> プロパティ値が変更された場合に、<see cref="P:System.Windows.Forms.Control.BackgroundImage" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2439">Raises the <see cref="E:System.Windows.Forms.Control.BackgroundImageChanged" /> event when the <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> property value of the control's container changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2440">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2440">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2441">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2441">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2442"><xref:System.Windows.Forms.Control.OnParentBackgroundImageChanged%2A> メソッドを使用すると、デリゲートをアタッチせずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2442">The <xref:System.Windows.Forms.Control.OnParentBackgroundImageChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2443">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2443">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2444">次のコード例は、<xref:System.Windows.Forms.Control.Text%2A> プロパティの値が変更されたときに実行されるイベント発生メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2444">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="6dc4f-2445"><xref:System.Windows.Forms.Control> クラスには、 *propertyname 値が*変更されたときに対応する*propertyname*`Changed` イベントを発生させる name pattern `On`*propertyname*`Changed` を持ついくつかのメソッドがあります (*propertyname*は対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2445">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="6dc4f-2446">次のコード例では、通貨データを表示している <xref:System.Windows.Forms.TextBox> 派生クラスの <xref:System.Windows.Forms.Control.ForeColor%2A> を変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2446">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="6dc4f-2447">この例では、テキストを10進数に変換し、数値が負の場合は <xref:System.Windows.Forms.Control.ForeColor%2A> を <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> に変更し、数値が正の値の場合は <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> に変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2447">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="6dc4f-2448">この例では、<xref:System.Windows.Forms.TextBox> クラスから派生したクラスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2448">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2449">派生クラスで <see cref="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2449">When overriding <see cref="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentBindingContextChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentBindingContextChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentBindingContextChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentBindingContextChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentBindingContextChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentBindingContextChanged : EventArgs -&gt; unit&#xA;override this.OnParentBindingContextChanged : EventArgs -&gt; unit" Usage="control.OnParentBindingContextChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2450">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2450">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2451">コントロールのコンテナーの <see cref="E:System.Windows.Forms.Control.BindingContextChanged" /> プロパティ値が変更された場合に、<see cref="P:System.Windows.Forms.Control.BindingContext" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2451">Raises the <see cref="E:System.Windows.Forms.Control.BindingContextChanged" /> event when the <see cref="P:System.Windows.Forms.Control.BindingContext" /> property value of the control's container changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2452">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2452">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2453">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2453">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2454"><xref:System.Windows.Forms.Control.OnParentBindingContextChanged%2A> メソッドを使用すると、デリゲートをアタッチせずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2454">The <xref:System.Windows.Forms.Control.OnParentBindingContextChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2455">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2455">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2456">次のコード例は、<xref:System.Windows.Forms.Control.Text%2A> プロパティの値が変更されたときに実行されるイベント発生メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2456">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="6dc4f-2457"><xref:System.Windows.Forms.Control> クラスには、 *propertyname 値が*変更されたときに対応する*propertyname*`Changed` イベントを発生させる name pattern `On`*propertyname*`Changed` を持ついくつかのメソッドがあります (*propertyname*は対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2457">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="6dc4f-2458">次のコード例では、通貨データを表示している <xref:System.Windows.Forms.TextBox> 派生クラスの <xref:System.Windows.Forms.Control.ForeColor%2A> を変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2458">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="6dc4f-2459">この例では、テキストを10進数に変換し、数値が負の場合は <xref:System.Windows.Forms.Control.ForeColor%2A> を <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> に変更し、数値が正の値の場合は <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> に変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2459">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="6dc4f-2460">この例では、<xref:System.Windows.Forms.TextBox> クラスから派生したクラスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2460">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2461">派生クラスで <see cref="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2461">When overriding <see cref="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.BindingContextChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentChanged : EventArgs -&gt; unit&#xA;override this.OnParentChanged : EventArgs -&gt; unit" Usage="control.OnParentChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2462">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2462">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2463"><see cref="E:System.Windows.Forms.Control.ParentChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2463">Raises the <see cref="E:System.Windows.Forms.Control.ParentChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2464">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2464">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2465">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2465">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2466"><xref:System.Windows.Forms.Control.OnParentChanged%2A> メソッドを使用すると、デリゲートをアタッチせずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2466">The <xref:System.Windows.Forms.Control.OnParentChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2467">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2467">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2468">次のコード例は、<xref:System.Windows.Forms.Control.Text%2A> プロパティの値が変更されたときに実行されるイベント発生メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2468">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="6dc4f-2469"><xref:System.Windows.Forms.Control> クラスには、 *propertyname 値が*変更されたときに対応する*propertyname*`Changed` イベントを発生させる name pattern `On`*propertyname*`Changed` を持ついくつかのメソッドがあります (*propertyname*は対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2469">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="6dc4f-2470">次のコード例では、通貨データを表示している <xref:System.Windows.Forms.TextBox> 派生クラスの <xref:System.Windows.Forms.Control.ForeColor%2A> を変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2470">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="6dc4f-2471">この例では、テキストを10進数に変換し、数値が負の場合は <xref:System.Windows.Forms.Control.ForeColor%2A> を <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> に変更し、数値が正の値の場合は <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> に変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2471">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="6dc4f-2472">この例では、<xref:System.Windows.Forms.TextBox> クラスから派生したクラスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2472">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2473">派生クラスで <see cref="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2473">When overriding <see cref="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.ParentChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentCursorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentCursorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentCursorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentCursorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentCursorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentCursorChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentCursorChanged : EventArgs -&gt; unit&#xA;override this.OnParentCursorChanged : EventArgs -&gt; unit" Usage="control.OnParentCursorChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2474">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2474">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2475"><see cref="E:System.Windows.Forms.Control.CursorChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2475">Raises the <see cref="E:System.Windows.Forms.Control.CursorChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2476">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2476">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2477">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2477">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2478"><xref:System.Windows.Forms.Control.OnParentCursorChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2478">The <xref:System.Windows.Forms.Control.OnParentCursorChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2479">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2479">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2480">派生クラスで <see cref="M:System.Windows.Forms.Control.OnParentCursorChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnParentCursorChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2480">When overriding <see cref="M:System.Windows.Forms.Control.OnParentCursorChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentCursorChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnParentEnabledChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentEnabledChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentEnabledChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentEnabledChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentEnabledChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentEnabledChanged : EventArgs -&gt; unit&#xA;override this.OnParentEnabledChanged : EventArgs -&gt; unit" Usage="control.OnParentEnabledChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2481">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2481">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2482">コントロールのコンテナーの <see cref="E:System.Windows.Forms.Control.EnabledChanged" /> プロパティ値が変更された場合に、<see cref="P:System.Windows.Forms.Control.Enabled" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2482">Raises the <see cref="E:System.Windows.Forms.Control.EnabledChanged" /> event when the <see cref="P:System.Windows.Forms.Control.Enabled" /> property value of the control's container changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2483">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2483">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2484">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2484">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2485"><xref:System.Windows.Forms.Control.OnParentEnabledChanged%2A> メソッドを使用すると、デリゲートをアタッチせずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2485">The <xref:System.Windows.Forms.Control.OnParentEnabledChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2486">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2486">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2487">次のコード例は、<xref:System.Windows.Forms.Control.Text%2A> プロパティの値が変更されたときに実行されるイベント発生メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2487">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="6dc4f-2488"><xref:System.Windows.Forms.Control> クラスには、 *propertyname 値が*変更されたときに対応する*propertyname*`Changed` イベントを発生させる name pattern `On`*propertyname*`Changed` を持ついくつかのメソッドがあります (*propertyname*は対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2488">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="6dc4f-2489">次のコード例では、通貨データを表示している <xref:System.Windows.Forms.TextBox> 派生クラスの <xref:System.Windows.Forms.Control.ForeColor%2A> を変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2489">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="6dc4f-2490">この例では、テキストを10進数に変換し、数値が負の場合は <xref:System.Windows.Forms.Control.ForeColor%2A> を <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> に変更し、数値が正の値の場合は <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> に変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2490">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="6dc4f-2491">この例では、<xref:System.Windows.Forms.TextBox> クラスから派生したクラスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2491">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2492">派生クラスで <see cref="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2492">When overriding <see cref="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.EnabledChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentFontChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentFontChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentFontChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentFontChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentFontChanged : EventArgs -&gt; unit&#xA;override this.OnParentFontChanged : EventArgs -&gt; unit" Usage="control.OnParentFontChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2493">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2493">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2494">コントロールのコンテナーの <see cref="E:System.Windows.Forms.Control.FontChanged" /> プロパティ値が変更された場合に、<see cref="P:System.Windows.Forms.Control.Font" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2494">Raises the <see cref="E:System.Windows.Forms.Control.FontChanged" /> event when the <see cref="P:System.Windows.Forms.Control.Font" /> property value of the control's container changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2495">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2495">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2496">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2496">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2497"><xref:System.Windows.Forms.Control.OnParentFontChanged%2A> メソッドを使用すると、デリゲートをアタッチせずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2497">The <xref:System.Windows.Forms.Control.OnParentFontChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2498">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2498">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2499">次のコード例は、<xref:System.Windows.Forms.Control.Text%2A> プロパティの値が変更されたときに実行されるイベント発生メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2499">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="6dc4f-2500"><xref:System.Windows.Forms.Control> クラスには、 *propertyname 値が*変更されたときに対応する*propertyname*`Changed` イベントを発生させる name pattern `On`*propertyname*`Changed` を持ついくつかのメソッドがあります (*propertyname*は対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2500">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="6dc4f-2501">次のコード例では、通貨データを表示している <xref:System.Windows.Forms.TextBox> 派生クラスの <xref:System.Windows.Forms.Control.ForeColor%2A> を変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2501">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="6dc4f-2502">この例では、テキストを10進数に変換し、数値が負の場合は <xref:System.Windows.Forms.Control.ForeColor%2A> を <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> に変更し、数値が正の値の場合は <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> に変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2502">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="6dc4f-2503">この例では、<xref:System.Windows.Forms.TextBox> クラスから派生したクラスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2503">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2504">派生クラスで <see cref="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2504">When overriding <see cref="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.FontChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentForeColorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentForeColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentForeColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentForeColorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentForeColorChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentForeColorChanged : EventArgs -&gt; unit&#xA;override this.OnParentForeColorChanged : EventArgs -&gt; unit" Usage="control.OnParentForeColorChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2505">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2505">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2506">コントロールのコンテナーの <see cref="E:System.Windows.Forms.Control.ForeColorChanged" /> プロパティ値が変更された場合に、<see cref="P:System.Windows.Forms.Control.ForeColor" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2506">Raises the <see cref="E:System.Windows.Forms.Control.ForeColorChanged" /> event when the <see cref="P:System.Windows.Forms.Control.ForeColor" /> property value of the control's container changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2507">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2507">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2508">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2508">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2509"><xref:System.Windows.Forms.Control.OnParentForeColorChanged%2A> メソッドを使用すると、デリゲートをアタッチせずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2509">The <xref:System.Windows.Forms.Control.OnParentForeColorChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2510">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2510">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2511">次のコード例は、<xref:System.Windows.Forms.Control.Text%2A> プロパティの値が変更されたときに実行されるイベント発生メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2511">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="6dc4f-2512"><xref:System.Windows.Forms.Control> クラスには、 *propertyname 値が*変更されたときに対応する*propertyname*`Changed` イベントを発生させる name pattern `On`*propertyname*`Changed` を持ついくつかのメソッドがあります (*propertyname*は対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2512">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="6dc4f-2513">次のコード例では、通貨データを表示している <xref:System.Windows.Forms.TextBox> 派生クラスの <xref:System.Windows.Forms.Control.ForeColor%2A> を変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2513">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="6dc4f-2514">この例では、テキストを10進数に変換し、数値が負の場合は <xref:System.Windows.Forms.Control.ForeColor%2A> を <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> に変更し、数値が正の値の場合は <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> に変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2514">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="6dc4f-2515">この例では、<xref:System.Windows.Forms.TextBox> クラスから派生したクラスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2515">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2516">派生クラスで <see cref="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2516">When overriding <see cref="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.ForeColorChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentRightToLeftChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentRightToLeftChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentRightToLeftChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentRightToLeftChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentRightToLeftChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentRightToLeftChanged : EventArgs -&gt; unit&#xA;override this.OnParentRightToLeftChanged : EventArgs -&gt; unit" Usage="control.OnParentRightToLeftChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2517">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2517">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2518">コントロールのコンテナーの <see cref="E:System.Windows.Forms.Control.RightToLeftChanged" /> プロパティ値が変更された場合に、<see cref="P:System.Windows.Forms.Control.RightToLeft" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2518">Raises the <see cref="E:System.Windows.Forms.Control.RightToLeftChanged" /> event when the <see cref="P:System.Windows.Forms.Control.RightToLeft" /> property value of the control's container changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2519">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2519">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2520">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2520">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2521"><xref:System.Windows.Forms.Control.OnParentRightToLeftChanged%2A> メソッドを使用すると、デリゲートをアタッチせずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2521">The <xref:System.Windows.Forms.Control.OnParentRightToLeftChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2522">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2522">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2523">次のコード例は、<xref:System.Windows.Forms.Control.Text%2A> プロパティの値が変更されたときに実行されるイベント発生メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2523">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="6dc4f-2524"><xref:System.Windows.Forms.Control> クラスには、 *propertyname 値が*変更されたときに対応する*propertyname*`Changed` イベントを発生させる name pattern `On`*propertyname*`Changed` を持ついくつかのメソッドがあります (*propertyname*は対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2524">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="6dc4f-2525">次のコード例では、通貨データを表示している <xref:System.Windows.Forms.TextBox> 派生クラスの <xref:System.Windows.Forms.Control.ForeColor%2A> を変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2525">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="6dc4f-2526">この例では、テキストを10進数に変換し、数値が負の場合は <xref:System.Windows.Forms.Control.ForeColor%2A> を <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> に変更し、数値が正の値の場合は <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> に変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2526">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="6dc4f-2527">この例では、<xref:System.Windows.Forms.TextBox> クラスから派生したクラスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2527">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2528">派生クラスで <see cref="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2528">When overriding <see cref="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.RightToLeftChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentVisibleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentVisibleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentVisibleChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentVisibleChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentVisibleChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentVisibleChanged : EventArgs -&gt; unit&#xA;override this.OnParentVisibleChanged : EventArgs -&gt; unit" Usage="control.OnParentVisibleChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2529">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2529">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2530">コントロールのコンテナーの <see cref="E:System.Windows.Forms.Control.VisibleChanged" /> プロパティ値が変更された場合に、<see cref="P:System.Windows.Forms.Control.Visible" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2530">Raises the <see cref="E:System.Windows.Forms.Control.VisibleChanged" /> event when the <see cref="P:System.Windows.Forms.Control.Visible" /> property value of the control's container changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2531">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2531">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2532">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2532">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2533"><xref:System.Windows.Forms.Control.OnParentVisibleChanged%2A> メソッドを使用すると、デリゲートをアタッチせずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2533">The <xref:System.Windows.Forms.Control.OnParentVisibleChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2534">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2534">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2535">次のコード例は、<xref:System.Windows.Forms.Control.Text%2A> プロパティの値が変更されたときに実行されるイベント発生メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2535">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="6dc4f-2536"><xref:System.Windows.Forms.Control> クラスには、 *propertyname 値が*変更されたときに対応する*propertyname*`Changed` イベントを発生させる name pattern `On`*propertyname*`Changed` を持ついくつかのメソッドがあります (*propertyname*は対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2536">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="6dc4f-2537">次のコード例では、通貨データを表示している <xref:System.Windows.Forms.TextBox> 派生クラスの <xref:System.Windows.Forms.Control.ForeColor%2A> を変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2537">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="6dc4f-2538">この例では、テキストを10進数に変換し、数値が負の場合は <xref:System.Windows.Forms.Control.ForeColor%2A> を <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> に変更し、数値が正の値の場合は <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> に変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2538">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="6dc4f-2539">この例では、<xref:System.Windows.Forms.TextBox> クラスから派生したクラスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2539">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2540">派生クラスで <see cref="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2540">When overriding <see cref="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.VisibleChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewKeyDown (System.Windows.Forms.PreviewKeyDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewKeyDown(class System.Windows.Forms.PreviewKeyDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewKeyDown (e As PreviewKeyDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewKeyDown(System::Windows::Forms::PreviewKeyDownEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewKeyDown : System.Windows.Forms.PreviewKeyDownEventArgs -&gt; unit&#xA;override this.OnPreviewKeyDown : System.Windows.Forms.PreviewKeyDownEventArgs -&gt; unit" Usage="control.OnPreviewKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.PreviewKeyDownEventArgs" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2541">イベント データを含んでいる <see cref="T:System.Windows.Forms.PreviewKeyDownEventArgs" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2541">A <see cref="T:System.Windows.Forms.PreviewKeyDownEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2542"><see cref="E:System.Windows.Forms.Control.PreviewKeyDown" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2542">Raises the <see cref="E:System.Windows.Forms.Control.PreviewKeyDown" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2543">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2543">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2544">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2544">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2545"><xref:System.Windows.Forms.Control.OnPreviewKeyDown%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2545">The <xref:System.Windows.Forms.Control.OnPreviewKeyDown%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2546">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2546">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2547">派生クラスで <see cref="M:System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2547">When overriding <see cref="M:System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnPrint">
      <MemberSignature Language="C#" Value="protected virtual void OnPrint (System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPrint(class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnPrint(System.Windows.Forms.PaintEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPrint (e As PaintEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPrint(System::Windows::Forms::PaintEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPrint : System.Windows.Forms.PaintEventArgs -&gt; unit&#xA;override this.OnPrint : System.Windows.Forms.PaintEventArgs -&gt; unit" Usage="control.OnPrint e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2548">イベント データを含んでいる <see cref="T:System.Windows.Forms.PaintEventArgs" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2548">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2549"><see cref="E:System.Windows.Forms.Control.Paint" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2549">Raises the <see cref="E:System.Windows.Forms.Control.Paint" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2550"><xref:System.Windows.Forms.ControlStyles> の `UserPaint` ビットが設定されている場合は、<xref:System.Windows.Forms.Control.OnPrint%2A> をオーバーライドしてレイヤー描画を行うことができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2550">If the `UserPaint` bit of the <xref:System.Windows.Forms.ControlStyles> is set, you can override <xref:System.Windows.Forms.Control.OnPrint%2A> to do layered painting.</span></span> <span data-ttu-id="6dc4f-2551">詳細については、「 <xref:System.Windows.Forms.Control.SetStyle%2A> 」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2551">See <xref:System.Windows.Forms.Control.SetStyle%2A> for more information.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6dc4f-2552"><paramref name="e" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2552">The <paramref name="e" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Windows.Forms.Control.DrawToBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)" />
      </Docs>
    </Member>
    <Member MemberName="OnQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnQueryContinueDrag (System.Windows.Forms.QueryContinueDragEventArgs qcdevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnQueryContinueDrag(class System.Windows.Forms.QueryContinueDragEventArgs qcdevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnQueryContinueDrag (qcdevent As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnQueryContinueDrag(System::Windows::Forms::QueryContinueDragEventArgs ^ qcdevent);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryContinueDrag : System.Windows.Forms.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnQueryContinueDrag : System.Windows.Forms.QueryContinueDragEventArgs -&gt; unit" Usage="control.OnQueryContinueDrag qcdevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="qcdevent" Type="System.Windows.Forms.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="qcdevent"><span data-ttu-id="6dc4f-2553">イベント データを含んでいる <see cref="T:System.Windows.Forms.QueryContinueDragEventArgs" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2553">A <see cref="T:System.Windows.Forms.QueryContinueDragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2554"><see cref="E:System.Windows.Forms.Control.QueryContinueDrag" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2554">Raises the <see cref="E:System.Windows.Forms.Control.QueryContinueDrag" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2555">ドラッグが開始されると、このメソッドは、ドラッグ操作が取り消されるか完了するまで、[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] によって繰り返し呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2555">After dragging has begun, this method is called repeatedly by the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] until the drag operation is either canceled or completed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-2556">ドラッグが取り消された時点、またはドロップが発生したポイントを変更する場合は、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2556">Override this method if you want to change the point at which dragging is canceled or at which a drop occurs.</span></span>  
  
 <span data-ttu-id="6dc4f-2557">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2557">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2558">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2558">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2559"><xref:System.Windows.Forms.Control.OnQueryContinueDrag%2A> メソッドを使用すると、デリゲートをアタッチせずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2559">The <xref:System.Windows.Forms.Control.OnQueryContinueDrag%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2560">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2560">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2561">派生クラスで <see cref="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2561">When overriding <see cref="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.QueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnRegionChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRegionChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRegionChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRegionChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRegionChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRegionChanged : EventArgs -&gt; unit&#xA;override this.OnRegionChanged : EventArgs -&gt; unit" Usage="control.OnRegionChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2562">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2562">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2563"><see cref="E:System.Windows.Forms.Control.RegionChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2563">Raises the <see cref="E:System.Windows.Forms.Control.RegionChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2564">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2564">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2565">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2565">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2566"><xref:System.Windows.Forms.Control.OnRegionChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2566">The <xref:System.Windows.Forms.Control.OnRegionChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2567">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2567">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2568">派生クラスで <see cref="M:System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2568">When overriding <see cref="M:System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnResize">
      <MemberSignature Language="C#" Value="protected virtual void OnResize (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnResize(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnResize (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnResize(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnResize : EventArgs -&gt; unit&#xA;override this.OnResize : EventArgs -&gt; unit" Usage="control.OnResize e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2569">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2569">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2570"><see cref="E:System.Windows.Forms.Control.Resize" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2570">Raises the <see cref="E:System.Windows.Forms.Control.Resize" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2571">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2571">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2572">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2572">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2573"><xref:System.Windows.Forms.Control.OnResize%2A> メソッドを使用すると、デリゲートをアタッチせずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2573">The <xref:System.Windows.Forms.Control.OnResize%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2574">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2574">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2575">派生クラスで <see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2575">When overriding <see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" /> method so that registered delegates receive the event.</span></span> <span data-ttu-id="6dc4f-2576"><see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" /> メソッドは構築中に呼び出すことができるため、をオーバーライドすると、コントロールコンストラクターを呼び出す前に呼び出すことができ <see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" /> ます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2576">The <see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" /> method can be called during construction, so if you override <see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" /> it can be called before the control constructor is called.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.Resize" />
      </Docs>
    </Member>
    <Member MemberName="OnRightToLeftChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRightToLeftChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRightToLeftChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRightToLeftChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRightToLeftChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRightToLeftChanged : EventArgs -&gt; unit&#xA;override this.OnRightToLeftChanged : EventArgs -&gt; unit" Usage="control.OnRightToLeftChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2577">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2577">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2578"><see cref="E:System.Windows.Forms.Control.RightToLeftChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2578">Raises the <see cref="E:System.Windows.Forms.Control.RightToLeftChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2579">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2579">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2580">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2580">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2581"><xref:System.Windows.Forms.Control.OnRightToLeftChanged%2A> メソッドを使用すると、デリゲートをアタッチせずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2581">The <xref:System.Windows.Forms.Control.OnRightToLeftChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2582">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2582">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2583">次のコード例は、<xref:System.Windows.Forms.Control.Text%2A> プロパティの値が変更されたときに実行されるイベント発生メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2583">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="6dc4f-2584"><xref:System.Windows.Forms.Control> クラスには、 *propertyname 値が*変更されたときに対応する*propertyname*`Changed` イベントを発生させる name pattern `On`*propertyname*`Changed` を持ついくつかのメソッドがあります (*propertyname*は対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2584">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="6dc4f-2585">次のコード例では、通貨データを表示している <xref:System.Windows.Forms.TextBox> 派生クラスの <xref:System.Windows.Forms.Control.ForeColor%2A> を変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2585">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="6dc4f-2586">この例では、テキストを10進数に変換し、数値が負の場合は <xref:System.Windows.Forms.Control.ForeColor%2A> を <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> に変更し、数値が正の値の場合は <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> に変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2586">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="6dc4f-2587">この例では、<xref:System.Windows.Forms.TextBox> クラスから派生したクラスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2587">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2588">派生クラスで <see cref="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2588">When overriding <see cref="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.RightToLeftChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnSizeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSizeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSizeChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSizeChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSizeChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSizeChanged : EventArgs -&gt; unit&#xA;override this.OnSizeChanged : EventArgs -&gt; unit" Usage="control.OnSizeChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2589">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2589">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2590"><see cref="E:System.Windows.Forms.Control.SizeChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2590">Raises the <see cref="E:System.Windows.Forms.Control.SizeChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2591">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2591">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2592">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2592">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2593"><xref:System.Windows.Forms.Control.OnSizeChanged%2A> メソッドを使用すると、デリゲートをアタッチせずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2593">The <xref:System.Windows.Forms.Control.OnSizeChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2594">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2594">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2595">派生クラスで <see cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2595">When overriding <see cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.SizeChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnStyleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStyleChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStyleChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStyleChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStyleChanged : EventArgs -&gt; unit&#xA;override this.OnStyleChanged : EventArgs -&gt; unit" Usage="control.OnStyleChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2596">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2596">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2597"><see cref="E:System.Windows.Forms.Control.StyleChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2597">Raises the <see cref="E:System.Windows.Forms.Control.StyleChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2598">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2598">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2599">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2599">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2600"><xref:System.Windows.Forms.Control.OnStyleChanged%2A> メソッドを使用すると、デリゲートをアタッチせずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2600">The <xref:System.Windows.Forms.Control.OnStyleChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2601">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2601">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2602">派生クラスで <see cref="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2602">When overriding <see cref="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.StyleChanged" />
        <altmember cref="M:System.Windows.Forms.Control.GetStyle(System.Windows.Forms.ControlStyles)" />
        <altmember cref="M:System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.ControlStyles" />
      </Docs>
    </Member>
    <Member MemberName="OnSystemColorsChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSystemColorsChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSystemColorsChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSystemColorsChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSystemColorsChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSystemColorsChanged : EventArgs -&gt; unit&#xA;override this.OnSystemColorsChanged : EventArgs -&gt; unit" Usage="control.OnSystemColorsChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2603">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2603">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2604"><see cref="E:System.Windows.Forms.Control.SystemColorsChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2604">Raises the <see cref="E:System.Windows.Forms.Control.SystemColorsChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2605">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2605">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2606">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2606">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2607"><xref:System.Windows.Forms.Control.OnSystemColorsChanged%2A> メソッドを使用すると、デリゲートをアタッチせずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2607">The <xref:System.Windows.Forms.Control.OnSystemColorsChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2608">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2608">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2609">派生クラスで <see cref="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2609">When overriding <see cref="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.SystemColorsChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnTabIndexChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnTabIndexChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTabIndexChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTabIndexChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTabIndexChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTabIndexChanged : EventArgs -&gt; unit&#xA;override this.OnTabIndexChanged : EventArgs -&gt; unit" Usage="control.OnTabIndexChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2610">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2610">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2611"><see cref="E:System.Windows.Forms.Control.TabIndexChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2611">Raises the <see cref="E:System.Windows.Forms.Control.TabIndexChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2612">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2612">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2613">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2613">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2614"><xref:System.Windows.Forms.Control.OnTabIndexChanged%2A> メソッドを使用すると、デリゲートをアタッチせずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2614">The <xref:System.Windows.Forms.Control.OnTabIndexChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2615">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2615">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2616">派生クラスで <see cref="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2616">When overriding <see cref="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.TabIndexChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnTabStopChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnTabStopChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTabStopChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTabStopChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTabStopChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTabStopChanged : EventArgs -&gt; unit&#xA;override this.OnTabStopChanged : EventArgs -&gt; unit" Usage="control.OnTabStopChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2617">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2617">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2618"><see cref="E:System.Windows.Forms.Control.TabStopChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2618">Raises the <see cref="E:System.Windows.Forms.Control.TabStopChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2619">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2619">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2620">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2620">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2621"><xref:System.Windows.Forms.Control.OnTabStopChanged%2A> メソッドを使用すると、デリゲートをアタッチせずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2621">The <xref:System.Windows.Forms.Control.OnTabStopChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2622">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2622">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2623">次のコード例は、<xref:System.Windows.Forms.Control.Text%2A> プロパティの値が変更されたときに実行されるイベント発生メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2623">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="6dc4f-2624"><xref:System.Windows.Forms.Control> クラスには、 *propertyname 値が*変更されたときに対応する*propertyname*`Changed` イベントを発生させる name pattern `On`*propertyname*`Changed` を持ついくつかのメソッドがあります (*propertyname*は対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2624">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="6dc4f-2625">次のコード例では、通貨データを表示している <xref:System.Windows.Forms.TextBox> 派生クラスの <xref:System.Windows.Forms.Control.ForeColor%2A> を変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2625">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="6dc4f-2626">この例では、テキストを10進数に変換し、数値が負の場合は <xref:System.Windows.Forms.Control.ForeColor%2A> を <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> に変更し、数値が正の値の場合は <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> に変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2626">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="6dc4f-2627">この例では、<xref:System.Windows.Forms.TextBox> クラスから派生したクラスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2627">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2628">派生クラスで <see cref="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2628">When overriding <see cref="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.TabStopChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnTextChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnTextChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTextChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTextChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTextChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTextChanged : EventArgs -&gt; unit&#xA;override this.OnTextChanged : EventArgs -&gt; unit" Usage="control.OnTextChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2629">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2629">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2630"><see cref="E:System.Windows.Forms.Control.TextChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2630">Raises the <see cref="E:System.Windows.Forms.Control.TextChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2631">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2631">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2632">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2632">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2633"><xref:System.Windows.Forms.Control.OnTextChanged%2A> メソッドを使用すると、デリゲートをアタッチせずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2633">The <xref:System.Windows.Forms.Control.OnTextChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2634">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2634">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2635">次のコード例では、通貨データを表示している <xref:System.Windows.Forms.TextBox> 派生クラスの <xref:System.Windows.Forms.Control.ForeColor%2A> を変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2635">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="6dc4f-2636">この例では、テキストを10進数に変換し、数値が負の場合は <xref:System.Windows.Forms.Control.ForeColor%2A> を <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> に変更し、数値が正の値の場合は <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> に変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2636">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="6dc4f-2637">この例では、<xref:System.Windows.Forms.TextBox> クラスから派生したクラスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2637">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2638">派生クラスで <see cref="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2638">When overriding <see cref="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.TextChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnValidated">
      <MemberSignature Language="C#" Value="protected virtual void OnValidated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnValidated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnValidated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnValidated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnValidated : EventArgs -&gt; unit&#xA;override this.OnValidated : EventArgs -&gt; unit" Usage="control.OnValidated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2639">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2639">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2640"><see cref="E:System.Windows.Forms.Control.Validated" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2640">Raises the <see cref="E:System.Windows.Forms.Control.Validated" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2641">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2641">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2642">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2642">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2643"><xref:System.Windows.Forms.Control.OnValidated%2A> メソッドを使用すると、デリゲートをアタッチせずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2643">The <xref:System.Windows.Forms.Control.OnValidated%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2644">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2644">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2645">派生クラスで <see cref="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2645">When overriding <see cref="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.Validated" />
      </Docs>
    </Member>
    <Member MemberName="OnValidating">
      <MemberSignature Language="C#" Value="protected virtual void OnValidating (System.ComponentModel.CancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnValidating(class System.ComponentModel.CancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnValidating (e As CancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnValidating(System::ComponentModel::CancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnValidating : System.ComponentModel.CancelEventArgs -&gt; unit&#xA;override this.OnValidating : System.ComponentModel.CancelEventArgs -&gt; unit" Usage="control.OnValidating e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.CancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2646">イベント データを含んでいる <see cref="T:System.ComponentModel.CancelEventArgs" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2646">A <see cref="T:System.ComponentModel.CancelEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2647"><see cref="E:System.Windows.Forms.Control.Validating" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2647">Raises the <see cref="E:System.Windows.Forms.Control.Validating" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2648">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2648">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2649">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2649">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2650"><xref:System.Windows.Forms.Control.OnValidating%2A> メソッドを使用すると、デリゲートをアタッチせずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2650">The <xref:System.Windows.Forms.Control.OnValidating%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2651">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2651">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2652">派生クラスで <see cref="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2652">When overriding <see cref="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.Validating" />
      </Docs>
    </Member>
    <Member MemberName="OnVisibleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnVisibleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnVisibleChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnVisibleChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnVisibleChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnVisibleChanged : EventArgs -&gt; unit&#xA;override this.OnVisibleChanged : EventArgs -&gt; unit" Usage="control.OnVisibleChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-2653">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2653">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2654"><see cref="E:System.Windows.Forms.Control.VisibleChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2654">Raises the <see cref="E:System.Windows.Forms.Control.VisibleChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2655">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2655">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6dc4f-2656">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2656">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2657"><xref:System.Windows.Forms.Control.OnVisibleChanged%2A> メソッドを使用すると、デリゲートをアタッチせずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2657">The <xref:System.Windows.Forms.Control.OnVisibleChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6dc4f-2658">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2658">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2659">次のコード例は、<xref:System.Windows.Forms.Control.Text%2A> プロパティの値が変更されたときに実行されるイベント発生メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2659">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="6dc4f-2660"><xref:System.Windows.Forms.Control> クラスには、 *propertyname 値が*変更されたときに対応する*propertyname*`Changed` イベントを発生させる name pattern `On`*propertyname*`Changed` を持ついくつかのメソッドがあります (*propertyname*は対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2660">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="6dc4f-2661">次のコード例では、通貨データを表示している <xref:System.Windows.Forms.TextBox> 派生クラスの <xref:System.Windows.Forms.Control.ForeColor%2A> を変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2661">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="6dc4f-2662">この例では、テキストを10進数に変換し、数値が負の場合は <xref:System.Windows.Forms.Control.ForeColor%2A> を <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> に変更し、数値が正の値の場合は <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> に変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2662">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="6dc4f-2663">この例では、<xref:System.Windows.Forms.TextBox> クラスから派生したクラスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2663">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2664">派生クラスで <see cref="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2664">When overriding <see cref="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.VisibleChanged" />
        <altmember cref="P:System.Windows.Forms.Control.Visible" />
        <altmember cref="M:System.Windows.Forms.Control.Show" />
        <altmember cref="M:System.Windows.Forms.Control.Hide" />
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Padding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Padding" />
      <MemberSignature Language="VB.NET" Value="Public Property Padding As Padding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Padding Padding { System::Windows::Forms::Padding get(); void set(System::Windows::Forms::Padding value); };" />
      <MemberSignature Language="F#" Value="member this.Padding : System.Windows.Forms.Padding with get, set" Usage="System.Windows.Forms.Control.Padding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-2665">コントロールの埋め込みを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2665">Gets or sets padding within the control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-2666">コントロールの内部の間隔特性を表す <see cref="T:System.Windows.Forms.Padding" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2666">A <see cref="T:System.Windows.Forms.Padding" /> representing the control's internal spacing characteristics.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2667"><xref:System.Windows.Forms.GroupBox> や <xref:System.Windows.Forms.TabControl>などのコンテナーの場合、<xref:System.Windows.Forms.Control.Padding%2A> プロパティはそれぞれの <xref:System.Windows.Forms.Control.DisplayRectangle%2A> プロパティを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2667">For containers such as <xref:System.Windows.Forms.GroupBox> and <xref:System.Windows.Forms.TabControl>, the <xref:System.Windows.Forms.Control.Padding%2A> property gets or sets their respective <xref:System.Windows.Forms.Control.DisplayRectangle%2A> properties.</span></span> <span data-ttu-id="6dc4f-2668"><xref:System.Windows.Forms.ScrollableControl.DockPadding%2A?displayProperty=nameWithType> プロパティは、<xref:System.Windows.Forms.Control.Padding%2A?displayProperty=nameWithType> プロパティと同じです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2668">The <xref:System.Windows.Forms.ScrollableControl.DockPadding%2A?displayProperty=nameWithType> property is equal to its <xref:System.Windows.Forms.Control.Padding%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="6dc4f-2669">コントロールは、Windows ユーザーインターフェイスガイドラインに近い <xref:System.Windows.Forms.Control.Padding%2A> の既定値を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2669">Controls receive default values for <xref:System.Windows.Forms.Control.Padding%2A> that are reasonably close to Windows user interface guidelines.</span></span> <span data-ttu-id="6dc4f-2670">一部の調整は、特定のアプリケーションに必要な場合もあります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2670">Some adjustments might still be necessary for particular applications.</span></span>  
  
 <span data-ttu-id="6dc4f-2671"><xref:System.Windows.Forms.Control.AutoSize%2A> を `true`すると、<xref:System.Windows.Forms.Control.GetPreferredSize%2A> を実装するすべてのコントロールが <xref:System.Windows.Forms.Control.Padding%2A> の量で拡大されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2671">All controls that implement <xref:System.Windows.Forms.Control.GetPreferredSize%2A> are enlarged by the amount in <xref:System.Windows.Forms.Control.Padding%2A> when <xref:System.Windows.Forms.Control.AutoSize%2A> is `true`.</span></span>  
  
 <span data-ttu-id="6dc4f-2672">次のコントロールは <xref:System.Windows.Forms.Control.Padding%2A>を使用しません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2672">The following controls do not use <xref:System.Windows.Forms.Control.Padding%2A>:</span></span>  
  
-   <span data-ttu-id="6dc4f-2673"><xref:System.Windows.Forms.Control.AutoSize%2A> を実装していないコントロール <xref:System.Windows.Forms.Control.GetPreferredSize%2A></span><span class="sxs-lookup"><span data-stu-id="6dc4f-2673">Controls that do not implement <xref:System.Windows.Forms.Control.AutoSize%2A> through <xref:System.Windows.Forms.Control.GetPreferredSize%2A></span></span>  
  
-   <span data-ttu-id="6dc4f-2674"><xref:System.Windows.Forms.Control> から直接継承するカスタムコントロール</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2674">Custom controls that directly inherit from <xref:System.Windows.Forms.Control></span></span>  
  
-   <xref:System.Windows.Forms.AxHost>  
  
-   <xref:System.Windows.Forms.ComboBox>  
  
-   <xref:System.Windows.Forms.DataGridView>  
  
-   <xref:System.Windows.Forms.DateTimePicker>  
  
-   <xref:System.Windows.Forms.HScrollBar>  
  
-   <xref:System.Windows.Forms.ListView>  
  
-   <xref:System.Windows.Forms.MaskedTextBox>  
  
-   <xref:System.Windows.Forms.MonthCalendar>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.PropertyGrid>  
  
-   <xref:System.Windows.Forms.RichTextBox>  
  
-   <xref:System.Windows.Forms.SplitContainer>  
  
-   <xref:System.Windows.Forms.TextBox>  
  
-   <xref:System.Windows.Forms.TextBoxBase>  
  
-   <xref:System.Windows.Forms.TreeView>  
  
-   <xref:System.Windows.Forms.VScrollBar>  
  
-   <xref:System.Windows.Forms.WebBrowser>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PaddingChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PaddingChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PaddingChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.PaddingChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PaddingChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PaddingChanged;" />
      <MemberSignature Language="F#" Value="member this.PaddingChanged : EventHandler " Usage="member this.PaddingChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-2675">コントロールの埋め込みが変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2675">Occurs when the control's padding changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2676">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2676">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2677">このメンバーの使用例を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2677">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="6dc4f-2678">この例では、イベントハンドラーは、<xref:System.Windows.Forms.Control.PaddingChanged> イベントの発生を報告します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2678">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.PaddingChanged> event.</span></span> <span data-ttu-id="6dc4f-2679">このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2679">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="6dc4f-2680">複数のイベントまたは頻繁に発生するイベントについてレポートするには、<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> を <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> に置き換えるか、複数行 <xref:System.Windows.Forms.TextBox>にメッセージを追加することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2680">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="6dc4f-2681">コード例を実行するには、<xref:System.Windows.Forms.Button> や <xref:System.Windows.Forms.ComboBox>などの <xref:System.Windows.Forms.Control>から継承する型のインスタンスを含むプロジェクトに貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2681">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="6dc4f-2682">次に、インスタンスに `Control1` という名前を付け、イベントハンドラーが <xref:System.Windows.Forms.Control.PaddingChanged> イベントに関連付けられていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2682">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.PaddingChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#41](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#41)]
 [!code-vb[System.Windows.Forms.EventExamples#41](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#41)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Paint">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.PaintEventHandler Paint;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.PaintEventHandler Paint" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Paint" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Paint As PaintEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::PaintEventHandler ^ Paint;" />
      <MemberSignature Language="F#" Value="member this.Paint : System.Windows.Forms.PaintEventHandler " Usage="member this.Paint : System.Windows.Forms.PaintEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.PaintEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-2683">コントロールが再描画されると発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2683">Occurs when the control is redrawn.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2684">コントロールが再描画されると、<xref:System.Windows.Forms.Control.Paint> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2684">The <xref:System.Windows.Forms.Control.Paint> event is raised when the control is redrawn.</span></span> <span data-ttu-id="6dc4f-2685">このメソッドは、<xref:System.Windows.Forms.PaintEventArgs> のインスタンスを、<xref:System.Windows.Forms.Control.Paint> イベントを処理するメソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2685">It passes an instance of <xref:System.Windows.Forms.PaintEventArgs> to the method(s) that handles the <xref:System.Windows.Forms.Control.Paint> event.</span></span>  
  
 <span data-ttu-id="6dc4f-2686">新しいカスタムコントロールを作成するとき、または別の視覚的な外観で継承されたコントロールを作成する場合は、<xref:System.Windows.Forms.Control.OnPaint%2A> メソッドをオーバーライドすることによって、コントロールを表示するコードを指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2686">When creating a new custom control or an inherited control with a different visual appearance, you must provide code to render the control by overriding the <xref:System.Windows.Forms.Control.OnPaint%2A> method.</span></span> <span data-ttu-id="6dc4f-2687">詳細については、「 [OnPaint メソッドのオーバーライド](~/docs/framework/winforms/controls/overriding-the-onpaint-method.md)」と「[カスタムコントロールの描画およびレンダリング](~/docs/framework/winforms/controls/custom-control-painting-and-rendering.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2687">For more information, see [Overriding the OnPaint Method](~/docs/framework/winforms/controls/overriding-the-onpaint-method.md) and [Custom Control Painting and Rendering](~/docs/framework/winforms/controls/custom-control-painting-and-rendering.md).</span></span>  
  
 <span data-ttu-id="6dc4f-2688">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2688">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2689">次のコード例では、フォームに <xref:System.Windows.Forms.PictureBox> コントロールを作成し、<xref:System.Windows.Forms.Control.Paint> イベントを使用してそれに描画します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2689">The following code example creates a <xref:System.Windows.Forms.PictureBox> control on the form and uses the <xref:System.Windows.Forms.Control.Paint> event to draw to it.</span></span>  
  
 [!code-cpp[Control.Paint#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Paint/CPP/form1.cpp#1)]
 [!code-csharp[Control.Paint#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Paint/CS/form1.cs#1)]
 [!code-vb[Control.Paint#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Paint/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control Parent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Parent" />
      <MemberSignature Language="VB.NET" Value="Public Property Parent As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ Parent { System::Windows::Forms::Control ^ get(); void set(System::Windows::Forms::Control ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Windows.Forms.Control with get, set" Usage="System.Windows.Forms.Control.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-2690">コントロールの親コンテナーを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2690">Gets or sets the parent container of the control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-2691">コントロールの親コントロールまたはコンテナー コントロールを表す <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2691">A <see cref="T:System.Windows.Forms.Control" /> that represents the parent or container control of the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2692"><xref:System.Windows.Forms.Control.Parent%2A> プロパティの値を `null` に設定すると、現在の親コントロールの <xref:System.Windows.Forms.Control.ControlCollection> からコントロールが削除されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2692">Setting the <xref:System.Windows.Forms.Control.Parent%2A> property value to `null` removes the control from the <xref:System.Windows.Forms.Control.ControlCollection> of its current parent control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2693">次のコード例では、<xref:System.Windows.Forms.Control.Parent%2A> プロパティと <xref:System.Windows.Forms.Control.FindForm%2A> メソッドを使用して、ボタンとそのフォームの親コントロールのプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2693">The following code example uses the <xref:System.Windows.Forms.Control.Parent%2A> property and the <xref:System.Windows.Forms.Control.FindForm%2A> method to set properties on the parent control of a button and its form.</span></span>  
  
 [!code-cpp[Control.FindForm#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.FindForm/CPP/form1.cpp#1)]
 [!code-csharp[Control.FindForm#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.FindForm/CS/form1.cs#1)]
 [!code-vb[Control.FindForm#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.FindForm/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Controls" />
        <altmember cref="T:System.Windows.Forms.Control.ControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="ParentChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ParentChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ParentChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ParentChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ParentChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ParentChanged;" />
      <MemberSignature Language="F#" Value="member this.ParentChanged : EventHandler " Usage="member this.ParentChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-2694"><see cref="P:System.Windows.Forms.Control.Parent" /> プロパティの値が変化すると発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2694">Occurs when the <see cref="P:System.Windows.Forms.Control.Parent" /> property value changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2695">このイベントは、プログラムによる変更またはユーザーの操作によって <xref:System.Windows.Forms.Control.Parent%2A> プロパティが変更された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2695">This event is raised if the <xref:System.Windows.Forms.Control.Parent%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="6dc4f-2696">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2696">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Parent" />
      </Docs>
    </Member>
    <MemberGroup MemberName="PerformLayout">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6dc4f-2697">コントロールがレイアウト ロジックを子コントロールに適用するように強制します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2697">Forces the control to apply layout logic to child controls.</span></span></summary>
        <altmember cref="M:System.Windows.Forms.Control.ResumeLayout" />
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
      </Docs>
    </MemberGroup>
    <Member MemberName="PerformLayout">
      <MemberSignature Language="C#" Value="public void PerformLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PerformLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.PerformLayout" />
      <MemberSignature Language="VB.NET" Value="Public Sub PerformLayout ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PerformLayout();" />
      <MemberSignature Language="F#" Value="member this.PerformLayout : unit -&gt; unit" Usage="control.PerformLayout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6dc4f-2698">コントロールがレイアウト ロジックをすべての子コントロールに適用するように強制します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2698">Forces the control to apply layout logic to all its child controls.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2699"><xref:System.Windows.Forms.Control.PerformLayout%2A> メソッドを呼び出す前に <xref:System.Windows.Forms.Control.SuspendLayout%2A> メソッドが呼び出された場合、<xref:System.Windows.Forms.Control.Layout> イベントは抑制されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2699">If the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method was called before calling the <xref:System.Windows.Forms.Control.PerformLayout%2A> method, the <xref:System.Windows.Forms.Control.Layout> event is suppressed.</span></span>  
  
 <span data-ttu-id="6dc4f-2700"><xref:System.Windows.Forms.Control.PerformLayout%2A> メソッドが呼び出されたときに値が指定されていない場合は、作成された <xref:System.Windows.Forms.LayoutEventArgs> の <xref:System.Windows.Forms.LayoutEventArgs.AffectedControl%2A> と <xref:System.Windows.Forms.LayoutEventArgs.AffectedProperty%2A> のプロパティが `null` に設定されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2700">The <xref:System.Windows.Forms.LayoutEventArgs.AffectedControl%2A> and <xref:System.Windows.Forms.LayoutEventArgs.AffectedProperty%2A> properties of the <xref:System.Windows.Forms.LayoutEventArgs> created are set to `null` if no values were provided when the <xref:System.Windows.Forms.Control.PerformLayout%2A> method was called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2701">次のコード例は、<xref:System.Windows.Forms.Control.PerformLayout%2A> メソッドの使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2701">The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.PerformLayout%2A> method.</span></span> <span data-ttu-id="6dc4f-2702">また、<xref:System.Windows.Forms.Control.Layout> イベントの発生方法も示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2702">It also demonstrates ways in which the <xref:System.Windows.Forms.Control.Layout> event is raised.</span></span> <span data-ttu-id="6dc4f-2703">この例では、`Button1` の `Click` イベントハンドラーは、明示的に <xref:System.Windows.Forms.Control.PerformLayout%2A>を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2703">In this example, the `Click` event handler for `Button1` explicitly calls <xref:System.Windows.Forms.Control.PerformLayout%2A>.</span></span> <span data-ttu-id="6dc4f-2704">`Button2` の `Click` イベントハンドラーは、暗黙的に <xref:System.Windows.Forms.Control.PerformLayout%2A>を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2704">The `Click` event handler for `Button2` implicitly calls <xref:System.Windows.Forms.Control.PerformLayout%2A>.</span></span> <span data-ttu-id="6dc4f-2705"><xref:System.Windows.Forms.Control.PerformLayout%2A> は、フォームが読み込まれるときにも呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2705"><xref:System.Windows.Forms.Control.PerformLayout%2A> is also called when the form is loaded.</span></span> <span data-ttu-id="6dc4f-2706">`Button3` は、コントロールが読み込まれたときの状態に戻ります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2706">`Button3` returns the control to the state it was in when loaded.</span></span> <span data-ttu-id="6dc4f-2707">どちらの場合も、<xref:System.Windows.Forms.Control.Layout> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2707">In each case, the <xref:System.Windows.Forms.Control.Layout> event is raised.</span></span>  
  
 <span data-ttu-id="6dc4f-2708">完全な例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2708">This is a complete example.</span></span> <span data-ttu-id="6dc4f-2709">この例を実行するには、空白のフォームに次のコードを貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2709">To run the example, paste the following code in a blank form.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.PerformLayout#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.PerformLayout/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.Control.PerformLayout#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.PerformLayout/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.PerformLayout#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.PerformLayout/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.ResumeLayout" />
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImageLayout" />
      </Docs>
    </Member>
    <Member MemberName="PerformLayout">
      <MemberSignature Language="C#" Value="public void PerformLayout (System.Windows.Forms.Control affectedControl, string affectedProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PerformLayout(class System.Windows.Forms.Control affectedControl, string affectedProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.PerformLayout(System.Windows.Forms.Control,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PerformLayout (affectedControl As Control, affectedProperty As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PerformLayout(System::Windows::Forms::Control ^ affectedControl, System::String ^ affectedProperty);" />
      <MemberSignature Language="F#" Value="member this.PerformLayout : System.Windows.Forms.Control * string -&gt; unit" Usage="control.PerformLayout (affectedControl, affectedProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="affectedControl" Type="System.Windows.Forms.Control" />
        <Parameter Name="affectedProperty" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="affectedControl"><span data-ttu-id="6dc4f-2710">最近変更されたコントロールを表す <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2710">A <see cref="T:System.Windows.Forms.Control" /> that represents the most recently changed control.</span></span></param>
        <param name="affectedProperty"><span data-ttu-id="6dc4f-2711">コントロールで最近変更されたプロパティの名前。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2711">The name of the most recently changed property on the control.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2712">コントロールがレイアウト ロジックをすべての子コントロールに適用するように強制します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2712">Forces the control to apply layout logic to all its child controls.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2713"><xref:System.Windows.Forms.Control.PerformLayout%2A> メソッドを呼び出す前に <xref:System.Windows.Forms.Control.SuspendLayout%2A> メソッドが呼び出された場合、<xref:System.Windows.Forms.Control.Layout> イベントは抑制されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2713">If the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method was called before calling the <xref:System.Windows.Forms.Control.PerformLayout%2A> method, the <xref:System.Windows.Forms.Control.Layout> event is suppressed.</span></span>  
  
 <span data-ttu-id="6dc4f-2714">`affectedControl` パラメーターと `affectedProperty` パラメーターは両方とも `null`に設定できます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2714">The `affectedControl` and `affectedProperty` parameters can both be set to `null`.</span></span> <span data-ttu-id="6dc4f-2715">これにより、作成された <xref:System.Windows.Forms.LayoutEventArgs> の <xref:System.Windows.Forms.LayoutEventArgs.AffectedControl%2A> と <xref:System.Windows.Forms.LayoutEventArgs.AffectedProperty%2A> プロパティが `null`に設定されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2715">Doing so causes the <xref:System.Windows.Forms.LayoutEventArgs.AffectedControl%2A> and <xref:System.Windows.Forms.LayoutEventArgs.AffectedProperty%2A> properties of the <xref:System.Windows.Forms.LayoutEventArgs> created to be set to `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2716">次のコード例は、<xref:System.Windows.Forms.Control.PerformLayout%2A> メソッドの使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2716">The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.PerformLayout%2A> method.</span></span> <span data-ttu-id="6dc4f-2717">また、<xref:System.Windows.Forms.Control.Layout> イベントの発生方法も示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2717">It also demonstrates ways in which the <xref:System.Windows.Forms.Control.Layout> event is raised.</span></span> <span data-ttu-id="6dc4f-2718">この例では、`Button1` の `Click` イベントハンドラーは、明示的に <xref:System.Windows.Forms.Control.PerformLayout%2A>を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2718">In this example, the `Click` event handler for `Button1` explicitly calls <xref:System.Windows.Forms.Control.PerformLayout%2A>.</span></span> <span data-ttu-id="6dc4f-2719">`Button2` の `Click` イベントハンドラーは、暗黙的に <xref:System.Windows.Forms.Control.PerformLayout%2A>を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2719">The `Click` event handler for `Button2` implicitly calls <xref:System.Windows.Forms.Control.PerformLayout%2A>.</span></span> <span data-ttu-id="6dc4f-2720"><xref:System.Windows.Forms.Control.PerformLayout%2A> は、フォームが読み込まれるときにも呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2720"><xref:System.Windows.Forms.Control.PerformLayout%2A> is also called when the form is loaded.</span></span> <span data-ttu-id="6dc4f-2721">`Button3` は、コントロールが読み込まれたときの状態に戻ります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2721">`Button3` returns the control to the state it was in when loaded.</span></span> <span data-ttu-id="6dc4f-2722">どちらの場合も、<xref:System.Windows.Forms.Control.Layout> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2722">In each case, the <xref:System.Windows.Forms.Control.Layout> event is raised.</span></span>  
  
 <span data-ttu-id="6dc4f-2723">完全な例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2723">This is a complete example.</span></span> <span data-ttu-id="6dc4f-2724">この例を実行するには、空白のフォームに次のコードを貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2724">To run the example, paste the following code in a blank form.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.PerformLayout#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.PerformLayout/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.Control.PerformLayout#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.PerformLayout/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.PerformLayout#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.PerformLayout/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.ResumeLayout" />
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImageLayout" />
      </Docs>
    </Member>
    <Member MemberName="PointToClient">
      <MemberSignature Language="C#" Value="public System.Drawing.Point PointToClient (System.Drawing.Point p);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Point PointToClient(valuetype System.Drawing.Point p) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.PointToClient(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Function PointToClient (p As Point) As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Point PointToClient(System::Drawing::Point p);" />
      <MemberSignature Language="F#" Value="member this.PointToClient : System.Drawing.Point -&gt; System.Drawing.Point" Usage="control.PointToClient p" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="p"><span data-ttu-id="6dc4f-2725">画面座標で示された変換対象の <see cref="T:System.Drawing.Point" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2725">The screen coordinate <see cref="T:System.Drawing.Point" /> to convert.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2726">指定した画面上のポイントを計算してクライアント座標を算出します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2726">Computes the location of the specified screen point into client coordinates.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-2727">変換された <see cref="T:System.Drawing.Point" />、<see cref="T:System.Drawing.Point" /> をクライアント座標で表す <paramref name="p" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2727">A <see cref="T:System.Drawing.Point" /> that represents the converted <see cref="T:System.Drawing.Point" />, <paramref name="p" />, in client coordinates.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6dc4f-2728">次のコード例では、ユーザーがイメージまたはイメージファイルをフォームにドラッグし、そのファイルがドロップされた時点で表示されるようにすることができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2728">The following code example enables the user to drag an image or image file onto the form, and have it be displayed at the point on it is dropped.</span></span> <span data-ttu-id="6dc4f-2729"><xref:System.Windows.Forms.Control.OnPaint%2A> メソッドは、フォームが描画されるたびにイメージを再描画するためにオーバーライドされます。それ以外の場合、イメージは次の再描画が行われるまで保持されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2729">The <xref:System.Windows.Forms.Control.OnPaint%2A> method is overridden to repaint the image each time the form is painted; otherwise the image would only persist until the next repainting.</span></span> <span data-ttu-id="6dc4f-2730"><xref:System.Windows.Forms.Control.DragEnter> イベント処理メソッドは、フォームにドラッグされるデータの種類を決定し、適切なフィードバックを提供します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2730">The <xref:System.Windows.Forms.Control.DragEnter> event-handling method determines the type of data being dragged into the form and provides the appropriate feedback.</span></span> <span data-ttu-id="6dc4f-2731">データから <xref:System.Drawing.Image> を作成できる場合は、<xref:System.Windows.Forms.Control.DragDrop> イベント処理メソッドによってフォームに画像が表示されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2731">The <xref:System.Windows.Forms.Control.DragDrop> event-handling method displays the image on the form, if an <xref:System.Drawing.Image> can be created from the data.</span></span> <span data-ttu-id="6dc4f-2732"><xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType> と <xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType> の値は画面座標であるため、この例では <xref:System.Windows.Forms.Control.PointToClient%2A> メソッドを使用してそれらをクライアント座標に変換します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2732">Because the <xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType> and <xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType> values are screen coordinates, the example uses the <xref:System.Windows.Forms.Control.PointToClient%2A> method to convert them to client coordinates.</span></span>  
  
 [!code-cpp[Windows.Forms.Control.DragOperations#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CPP/imagedrag.cpp#1)]
 [!code-csharp[Windows.Forms.Control.DragOperations#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CS/imagedrag.cs#1)]
 [!code-vb[Windows.Forms.Control.DragOperations#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/VB/imagedrag.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Point" />
        <altmember cref="M:System.Windows.Forms.Control.PointToScreen(System.Drawing.Point)" />
      </Docs>
    </Member>
    <Member MemberName="PointToScreen">
      <MemberSignature Language="C#" Value="public System.Drawing.Point PointToScreen (System.Drawing.Point p);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Point PointToScreen(valuetype System.Drawing.Point p) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.PointToScreen(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Function PointToScreen (p As Point) As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Point PointToScreen(System::Drawing::Point p);" />
      <MemberSignature Language="F#" Value="member this.PointToScreen : System.Drawing.Point -&gt; System.Drawing.Point" Usage="control.PointToScreen p" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="p"><span data-ttu-id="6dc4f-2733">クライアント座標で示された変換対象の <see cref="T:System.Drawing.Point" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2733">The client coordinate <see cref="T:System.Drawing.Point" /> to convert.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2734">指定したクライアント ポイントを計算して画面座標を算出します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2734">Computes the location of the specified client point into screen coordinates.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-2735">変換された <see cref="T:System.Drawing.Point" />、<see cref="T:System.Drawing.Point" /> を画面座標で表す <paramref name="p" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2735">A <see cref="T:System.Drawing.Point" /> that represents the converted <see cref="T:System.Drawing.Point" />, <paramref name="p" />, in screen coordinates.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6dc4f-2736">次のコード例は、<xref:System.Windows.Forms.Control.BackColor%2A>、<xref:System.Windows.Forms.Control.RectangleToScreen%2A>、<xref:System.Windows.Forms.Control.PointToScreen%2A>、<xref:System.Windows.Forms.Control.MouseButtons%2A>、<xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=nameWithType>、および <xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=nameWithType> の各メンバーを使用する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2736">The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.BackColor%2A>, <xref:System.Windows.Forms.Control.RectangleToScreen%2A>, <xref:System.Windows.Forms.Control.PointToScreen%2A>, <xref:System.Windows.Forms.Control.MouseButtons%2A>, <xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=nameWithType>, and <xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=nameWithType> members.</span></span> <span data-ttu-id="6dc4f-2737">この例を実行するには、いくつかのコントロールを含む Form1 という名前のフォームに次のコードを貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2737">To run the example, paste the following code in a form called Form1 containing several controls.</span></span> <span data-ttu-id="6dc4f-2738">この例では、<xref:System.Windows.Forms.Control.MouseDown>、<xref:System.Windows.Forms.Control.MouseMove>、および <xref:System.Windows.Forms.Control.MouseUp> イベントが、この例で定義されているイベントハンドラーに接続されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2738">This example requires that the <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseMove>, and <xref:System.Windows.Forms.Control.MouseUp> events are connected to the event handlers defined in the example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Point" />
        <altmember cref="M:System.Windows.Forms.Control.PointToClient(System.Drawing.Point)" />
      </Docs>
    </Member>
    <Member MemberName="PreferredSize">
      <MemberSignature Language="C#" Value="public System.Drawing.Size PreferredSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size PreferredSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.PreferredSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PreferredSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size PreferredSize { System::Drawing::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.PreferredSize : System.Drawing.Size" Usage="System.Windows.Forms.Control.PreferredSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-2739">コントロールが適合する四角形領域のサイズを取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2739">Gets the size of a rectangular area into which the control can fit.</span></span></summary>
        <value><span data-ttu-id="6dc4f-2740">高さおよび幅をピクセル単位で格納した <see cref="T:System.Drawing.Size" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2740">A <see cref="T:System.Drawing.Size" /> containing the height and width, in pixels.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreProcessControlMessage">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.PreProcessControlState PreProcessControlMessage (ref System.Windows.Forms.Message msg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Forms.PreProcessControlState PreProcessControlMessage(valuetype System.Windows.Forms.Message&amp; msg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.PreProcessControlMessage(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Function PreProcessControlMessage (ByRef msg As Message) As PreProcessControlState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::PreProcessControlState PreProcessControlMessage(System::Windows::Forms::Message % msg);" />
      <MemberSignature Language="F#" Value="member this.PreProcessControlMessage : Message -&gt; System.Windows.Forms.PreProcessControlState" Usage="control.PreProcessControlMessage msg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.PreProcessControlState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="msg"><span data-ttu-id="6dc4f-2741">処理するメッセージを表す <see cref="T:System.Windows.Forms.Message" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2741">A <see cref="T:System.Windows.Forms.Message" /> that represents the message to process.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2742">キーボード メッセージまたは入力メッセージがディスパッチされる前に、メッセージ ループ内の入力メッセージを前処理します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2742">Preprocesses keyboard or input messages within the message loop before they are dispatched.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-2743"><see cref="T:System.Windows.Forms.PreProcessControlState" /> のいずれかの値。<see cref="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)" /> が <see langword="true" /> と <see langword="false" /> のどちらであるか、さらに、<see cref="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)" /> または <see cref="M:System.Windows.Forms.Control.IsInputChar(System.Char)" /> が <see langword="true" /> と <see langword="false" /> のどちらであるかによって異なります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2743">One of the <see cref="T:System.Windows.Forms.PreProcessControlState" /> values, depending on whether <see cref="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)" /> is <see langword="true" /> or <see langword="false" /> and whether <see cref="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)" /> or <see cref="M:System.Windows.Forms.Control.IsInputChar(System.Char)" /> are <see langword="true" /> or <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreProcessMessage">
      <MemberSignature Language="C#" Value="public virtual bool PreProcessMessage (ref System.Windows.Forms.Message msg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PreProcessMessage(valuetype System.Windows.Forms.Message&amp; msg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PreProcessMessage (ByRef msg As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool PreProcessMessage(System::Windows::Forms::Message % msg);" />
      <MemberSignature Language="F#" Value="abstract member PreProcessMessage : Message -&gt; bool&#xA;override this.PreProcessMessage : Message -&gt; bool" Usage="control.PreProcessMessage msg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="msg"><span data-ttu-id="6dc4f-2744">処理するメッセージを表す、参照渡しされた <see cref="T:System.Windows.Forms.Message" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2744">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the message to process.</span></span> <span data-ttu-id="6dc4f-2745">有効な値は、WM_KEYDOWN、WM_SYSKEYDOWN、WM_CHAR、および WM_SYSCHAR です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2745">The possible values are WM_KEYDOWN, WM_SYSKEYDOWN, WM_CHAR, and WM_SYSCHAR.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2746">キーボード メッセージまたは入力メッセージがディスパッチされる前に、メッセージ ループ内の入力メッセージを前処理します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2746">Preprocesses keyboard or input messages within the message loop before they are dispatched.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-2747">メッセージがコントロールによって処理された場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2747"><see langword="true" /> if the message was processed by the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2748"><xref:System.Windows.Forms.Control.PreProcessMessage%2A> は、ディスパッチされる前に入力メッセージを前処理するために、アプリケーションのメッセージループによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2748"><xref:System.Windows.Forms.Control.PreProcessMessage%2A> is called by the application's message loop to preprocess input messages before they are dispatched.</span></span> <span data-ttu-id="6dc4f-2749">`msg` パラメーターに指定できる値は、WM_KEYDOWN、WM_SYSKEYDOWN、WM_CHAR、および WM_SYSCHAR です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2749">Possible values for the `msg` parameter are WM_KEYDOWN, WM_SYSKEYDOWN, WM_CHAR, and WM_SYSCHAR.</span></span>  
  
 <span data-ttu-id="6dc4f-2750"><xref:System.Windows.Forms.Control.PreProcessMessage%2A>をオーバーライドする場合、コントロールは、メッセージが処理されたことを示すために `true` を返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2750">When overriding <xref:System.Windows.Forms.Control.PreProcessMessage%2A>, a control should return `true` to indicate that it has processed the message.</span></span> <span data-ttu-id="6dc4f-2751">コントロールによって処理されないメッセージの場合は、`base.PreProcessMessage` の結果が返されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2751">For messages that are not processed by the control, the result of `base.PreProcessMessage` should be returned.</span></span> <span data-ttu-id="6dc4f-2752">通常、コントロールは、<xref:System.Windows.Forms.Control.ProcessDialogKey%2A> をオーバーライドするのではなく、<xref:System.Windows.Forms.Control.IsInputChar%2A>、<xref:System.Windows.Forms.Control.IsInputKey%2A>、<xref:System.Windows.Forms.Control.ProcessCmdKey%2A>、<xref:System.Windows.Forms.Control.ProcessDialogChar%2A>、<xref:System.Windows.Forms.Control.PreProcessMessage%2A>などの特化されたメソッドの1つをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2752">Controls will typically override one of the more specialized methods such as <xref:System.Windows.Forms.Control.IsInputChar%2A>, <xref:System.Windows.Forms.Control.IsInputKey%2A>, <xref:System.Windows.Forms.Control.ProcessCmdKey%2A>, <xref:System.Windows.Forms.Control.ProcessDialogChar%2A>, or <xref:System.Windows.Forms.Control.ProcessDialogKey%2A> instead of overriding <xref:System.Windows.Forms.Control.PreProcessMessage%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.PreviewKeyDownEventHandler PreviewKeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.PreviewKeyDownEventHandler PreviewKeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.PreviewKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyDown As PreviewKeyDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::PreviewKeyDownEventHandler ^ PreviewKeyDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewKeyDown : System.Windows.Forms.PreviewKeyDownEventHandler " Usage="member this.PreviewKeyDown : System.Windows.Forms.PreviewKeyDownEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.PreviewKeyDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-2753">このコントロールにフォーカスがあるときにキーが押された場合、<see cref="E:System.Windows.Forms.Control.KeyDown" /> イベントの前に発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2753">Occurs before the <see cref="E:System.Windows.Forms.Control.KeyDown" /> event when a key is pressed while focus is on this control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2754">TAB、RETURN、ESC、方向キーなど、いくつかのキーの押下は、通常、一部のコントロールでは無視されます。これは、入力キーの押下とは見なされないためです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2754">Some key presses, such as the TAB, RETURN, ESC, and arrow keys, are typically ignored by some controls because they are not considered input key presses.</span></span> <span data-ttu-id="6dc4f-2755">たとえば、既定では、<xref:System.Windows.Controls.Button> コントロールは矢印キーを無視します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2755">For example, by default, a <xref:System.Windows.Controls.Button> control ignores the arrow keys.</span></span> <span data-ttu-id="6dc4f-2756">通常、方向キーを押すと、フォーカスが前または次のコントロールに移動します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2756">Pressing the arrow keys typically causes the focus to move to the previous or next control.</span></span> <span data-ttu-id="6dc4f-2757">方向キーはナビゲーションキーと見なされ、これらのキーを押すと、通常、<xref:System.Windows.Controls.Button>の <xref:System.Windows.Forms.Control.KeyDown> イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2757">The arrow keys are considered navigation keys and pressing these keys typically do not raise the <xref:System.Windows.Forms.Control.KeyDown> event for a <xref:System.Windows.Controls.Button>.</span></span> <span data-ttu-id="6dc4f-2758">ただし、<xref:System.Windows.Controls.Button> の方向キーを押すと、<xref:System.Windows.Forms.Control.PreviewKeyDown> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2758">However, pressing the arrow keys for a <xref:System.Windows.Controls.Button> does raise the <xref:System.Windows.Forms.Control.PreviewKeyDown> event.</span></span> <span data-ttu-id="6dc4f-2759"><xref:System.Windows.Controls.Button> の <xref:System.Windows.Forms.Control.PreviewKeyDown> イベントを処理し、<xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A> プロパティを `true`に設定することにより、方向キーが押されたときに <xref:System.Windows.Forms.Control.KeyDown> イベントを発生させることができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2759">By handling the <xref:System.Windows.Forms.Control.PreviewKeyDown> event for a <xref:System.Windows.Controls.Button> and setting the <xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A> property to `true`, you can raise the <xref:System.Windows.Forms.Control.KeyDown> event when the arrow keys are pressed.</span></span> <span data-ttu-id="6dc4f-2760">ただし、方向キーを処理する場合、フォーカスは前または次のコントロールに移動しません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2760">However, if you handle the arrow keys, the focus will no longer move to the previous or next control.</span></span>  
  
 <span data-ttu-id="6dc4f-2761">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2761">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2762">次のコード例は、<xref:System.Windows.Forms.ContextMenuStrip>を含む <xref:System.Windows.Forms.Button> を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2762">The following code example demonstrates a <xref:System.Windows.Forms.Button> that includes a <xref:System.Windows.Forms.ContextMenuStrip>.</span></span> <span data-ttu-id="6dc4f-2763"><xref:System.Windows.Forms.Button> にフォーカスがあるときに、上方向キーまたは下方向キーを押すと、<xref:System.Windows.Forms.ContextMenuStrip> が表示されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2763">When the <xref:System.Windows.Forms.Button> has the focus and you press the UP ARROW or DOWN ARROW keys, the <xref:System.Windows.Forms.ContextMenuStrip> appears.</span></span> <span data-ttu-id="6dc4f-2764"><xref:System.Windows.Forms.Control.PreviewKeyDown> イベントハンドラーは、上方向キーまたは下方向キーが押されたことを検出し、<xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A> プロパティを `true`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2764">The <xref:System.Windows.Forms.Control.PreviewKeyDown> event handler detects when the UP ARROW or DOWN ARROW keys are pressed and sets the <xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A> property to `true`.</span></span> <span data-ttu-id="6dc4f-2765">これにより、<xref:System.Windows.Forms.Control.KeyDown> イベントが発生し、<xref:System.Windows.Forms.ContextMenuStrip>を表示できるようになります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2765">This raises the <xref:System.Windows.Forms.Control.KeyDown> event so that you can display the <xref:System.Windows.Forms.ContextMenuStrip>.</span></span> <span data-ttu-id="6dc4f-2766"><xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A> プロパティを設定するのではなく、<xref:System.Windows.Forms.Control.PreviewKeyDown> イベントハンドラーにロジックを配置しないでください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2766">You should not put any logic in the <xref:System.Windows.Forms.Control.PreviewKeyDown> event handler, other than to set the <xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A> property.</span></span> <span data-ttu-id="6dc4f-2767">代わりに、ロジックを <xref:System.Windows.Forms.Control.KeyDown> イベントハンドラーに配置する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2767">Instead, you should put your logic in the <xref:System.Windows.Forms.Control.KeyDown> event handler.</span></span>  
  
 [!code-csharp[System.Windows.Forms.Control.PreviewKeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/system.windows.forms.control.previewkeydown/cs/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.PreviewKeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/system.windows.forms.control.previewkeydown/vb/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessCmdKey">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessCmdKey (ref System.Windows.Forms.Message msg, System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ProcessCmdKey(valuetype System.Windows.Forms.Message&amp; msg, valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ProcessCmdKey (ByRef msg As Message, keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ProcessCmdKey(System::Windows::Forms::Message % msg, System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="abstract member ProcessCmdKey : Message * System.Windows.Forms.Keys -&gt; bool&#xA;override this.ProcessCmdKey : Message * System.Windows.Forms.Keys -&gt; bool" Usage="control.ProcessCmdKey (msg, keyData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message" RefType="ref" />
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="msg"><span data-ttu-id="6dc4f-2768">処理するウィンドウ メッセージを表す、参照渡しされた <see cref="T:System.Windows.Forms.Message" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2768">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the window message to process.</span></span></param>
        <param name="keyData"><span data-ttu-id="6dc4f-2769">処理するキーを表す <see cref="T:System.Windows.Forms.Keys" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2769">One of the <see cref="T:System.Windows.Forms.Keys" /> values that represents the key to process.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2770">コマンド キーを処理します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2770">Processes a command key.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-2771">文字がコントロールによって処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2771"><see langword="true" /> if the character was processed by the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2772">このメソッドは、コマンドキーを処理するために、メッセージの前処理中に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2772">This method is called during message preprocessing to handle command keys.</span></span> <span data-ttu-id="6dc4f-2773">コマンドキーは、通常の入力キーより常に優先されるキーです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2773">Command keys are keys that always take precedence over regular input keys.</span></span> <span data-ttu-id="6dc4f-2774">コマンドキーの例としては、アクセラレータやメニューのショートカットがあります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2774">Examples of command keys include accelerators and menu shortcuts.</span></span> <span data-ttu-id="6dc4f-2775">メソッドは、コマンドキーを処理したことを示すために `true` を返すか、キーがコマンドキーでないことを示すために `false` する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2775">The method must return `true` to indicate that it has processed the command key, or `false` to indicate that the key is not a command key.</span></span> <span data-ttu-id="6dc4f-2776">このメソッドは、コントロールが Windows フォームアプリケーションまたは ActiveX コントロールとしてホストされている場合にのみ呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2776">This method is only called when the control is hosted in a Windows Forms application or as an ActiveX control.</span></span>  
  
 <span data-ttu-id="6dc4f-2777"><xref:System.Windows.Forms.Control.ProcessCmdKey%2A> メソッドは、まずコントロールに <xref:System.Windows.Forms.ContextMenu>があるかどうかを判断し、その場合は <xref:System.Windows.Forms.ContextMenu> がコマンドキーを処理できるようにします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2777">The <xref:System.Windows.Forms.Control.ProcessCmdKey%2A> method first determines whether the control has a <xref:System.Windows.Forms.ContextMenu>, and if so, enables the <xref:System.Windows.Forms.ContextMenu> to process the command key.</span></span> <span data-ttu-id="6dc4f-2778">コマンドキーがメニューショートカットではなく、コントロールに親がある場合、キーは親の <xref:System.Windows.Forms.Control.ProcessCmdKey%2A> メソッドに渡されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2778">If the command key is not a menu shortcut and the control has a parent, the key is passed to the parent's <xref:System.Windows.Forms.Control.ProcessCmdKey%2A> method.</span></span> <span data-ttu-id="6dc4f-2779">実質的な効果として、コマンドキーは制御階層に "バブル" されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2779">The net effect is that command keys are "bubbled" up the control hierarchy.</span></span> <span data-ttu-id="6dc4f-2780">キーデータは、ユーザーが押したキーに加えて、キーと同時に押された修飾子キーがあるかどうかも示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2780">In addition to the key the user pressed, the key data also indicates which, if any, modifier keys were pressed at the same time as the key.</span></span> <span data-ttu-id="6dc4f-2781">修飾キーには、SHIFT、CTRL、ALT の各キーが含まれます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2781">Modifier keys include the SHIFT, CTRL, and ALT keys.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2782">派生クラスの <see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" /> メソッドをオーバーライドする場合、コントロールは <see langword="true" /> を返して、キーが処理されたことを示す必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2782">When overriding the <see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" /> method in a derived class, a control should return <see langword="true" /> to indicate that it has processed the key.</span></span> <span data-ttu-id="6dc4f-2783">コントロールによって処理されないキーの場合は、基本クラスの <see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" /> メソッドを呼び出した結果が返されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2783">For keys that are not processed by the control, the result of calling the base class's <see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" /> method should be returned.</span></span> <span data-ttu-id="6dc4f-2784">コントロールは、このメソッドをオーバーライドする必要はほとんどありません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2784">Controls will seldom, if ever, need to override this method.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="ProcessDialogChar">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessDialogChar (char charCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ProcessDialogChar(char charCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ProcessDialogChar (charCode As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ProcessDialogChar(char charCode);" />
      <MemberSignature Language="F#" Value="abstract member ProcessDialogChar : char -&gt; bool&#xA;override this.ProcessDialogChar : char -&gt; bool" Usage="control.ProcessDialogChar charCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCode" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="charCode"><span data-ttu-id="6dc4f-2785">処理対象の文字。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2785">The character to process.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2786">ダイアログ文字を処理します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2786">Processes a dialog character.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-2787">文字がコントロールによって処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2787"><see langword="true" /> if the character was processed by the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2788">このメソッドは、コントロールのニーモニックなどのダイアログ文字を処理するために、メッセージのプリプロセス中に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2788">This method is called during message preprocessing to handle dialog characters, such as control mnemonics.</span></span> <span data-ttu-id="6dc4f-2789">このメソッドは、コントロールが文字を処理していないことを <xref:System.Windows.Forms.Control.IsInputChar%2A> メソッドが示している場合にのみ呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2789">This method is called only if the <xref:System.Windows.Forms.Control.IsInputChar%2A> method indicates that the control is not processing the character.</span></span> <span data-ttu-id="6dc4f-2790"><xref:System.Windows.Forms.Control.ProcessDialogChar%2A> メソッドは、単純にその文字を親の <xref:System.Windows.Forms.Control.ProcessDialogChar%2A> メソッドに送信するか、コントロールに親がない場合は `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2790">The <xref:System.Windows.Forms.Control.ProcessDialogChar%2A> method simply sends the character to the parent's <xref:System.Windows.Forms.Control.ProcessDialogChar%2A> method, or returns `false` if the control has no parent.</span></span> <span data-ttu-id="6dc4f-2791"><xref:System.Windows.Forms.Form> クラスは、このメソッドをオーバーライドして、ダイアログ文字の実際の処理を実行します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2791">The <xref:System.Windows.Forms.Form> class overrides this method to perform actual processing of dialog characters.</span></span> <span data-ttu-id="6dc4f-2792">このメソッドは、コントロールが Windows フォームアプリケーションまたは ActiveX コントロールとしてホストされている場合にのみ呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2792">This method is only called when the control is hosted in a Windows Forms application or as an ActiveX control.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2793">派生クラスの <see cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" /> メソッドをオーバーライドする場合、コントロールは、その文字が処理されたことを示すために <see langword="true" /> を返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2793">When overriding the <see cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" /> method in a derived class, a control should return <see langword="true" /> to indicate that it has processed the character.</span></span> <span data-ttu-id="6dc4f-2794">コントロールによって処理されない文字の場合は、基本クラスの <see cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" /> メソッドを呼び出した結果が返されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2794">For characters that are not processed by the control, the result of calling the base class's <see cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" /> method should be returned.</span></span> <span data-ttu-id="6dc4f-2795">コントロールは、このメソッドをオーバーライドする必要はほとんどありません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2795">Controls will seldom, if ever, need to override this method.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="ProcessDialogKey">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessDialogKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ProcessDialogKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ProcessDialogKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ProcessDialogKey(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="abstract member ProcessDialogKey : System.Windows.Forms.Keys -&gt; bool&#xA;override this.ProcessDialogKey : System.Windows.Forms.Keys -&gt; bool" Usage="control.ProcessDialogKey keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData"><span data-ttu-id="6dc4f-2796">処理するキーを表す <see cref="T:System.Windows.Forms.Keys" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2796">One of the <see cref="T:System.Windows.Forms.Keys" /> values that represents the key to process.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2797">ダイアログ キーを処理します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2797">Processes a dialog key.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-2798">キーがコントロールによって処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2798"><see langword="true" /> if the key was processed by the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2799">このメソッドは、タブ、戻り値、ESC キー、方向キーなどのダイアログ文字を処理するために、メッセージのプリプロセス中に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2799">This method is called during message preprocessing to handle dialog characters, such as TAB, RETURN, ESC, and arrow keys.</span></span> <span data-ttu-id="6dc4f-2800">このメソッドは、コントロールがキーを処理していないことを <xref:System.Windows.Forms.Control.IsInputKey%2A> メソッドが示している場合にのみ呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2800">This method is called only if the <xref:System.Windows.Forms.Control.IsInputKey%2A> method indicates that the control is not processing the key.</span></span> <span data-ttu-id="6dc4f-2801"><xref:System.Windows.Forms.Control.ProcessDialogKey%2A> は単に、親の <xref:System.Windows.Forms.Control.ProcessDialogKey%2A> メソッドに文字を送信するか、コントロールに親がない場合は `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2801">The <xref:System.Windows.Forms.Control.ProcessDialogKey%2A> simply sends the character to the parent's <xref:System.Windows.Forms.Control.ProcessDialogKey%2A> method, or returns `false` if the control has no parent.</span></span> <span data-ttu-id="6dc4f-2802"><xref:System.Windows.Forms.Form> クラスは、このメソッドをオーバーライドして、ダイアログキーの実際の処理を実行します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2802">The <xref:System.Windows.Forms.Form> class overrides this method to perform actual processing of dialog keys.</span></span> <span data-ttu-id="6dc4f-2803">このメソッドは、コントロールが Windows フォームアプリケーションまたは ActiveX コントロールとしてホストされている場合にのみ呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2803">This method is only called when the control is hosted in a Windows Forms application or as an ActiveX control.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2804">派生クラスの <see cref="M:System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)" /> メソッドをオーバーライドする場合、コントロールは <see langword="true" /> を返して、キーが処理されたことを示す必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2804">When overriding the <see cref="M:System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)" /> method in a derived class, a control should return <see langword="true" /> to indicate that it has processed the key.</span></span> <span data-ttu-id="6dc4f-2805">コントロールによって処理されないキーの場合は、基本クラスの <see cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" /> メソッドを呼び出した結果が返されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2805">For keys that are not processed by the control, the result of calling the base class's <see cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" /> method should be returned.</span></span> <span data-ttu-id="6dc4f-2806">コントロールは、このメソッドをオーバーライドする必要はほとんどありません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2806">Controls will seldom, if ever, need to override this method.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="ProcessKeyEventArgs">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessKeyEventArgs (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ProcessKeyEventArgs(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ProcessKeyEventArgs (ByRef m As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ProcessKeyEventArgs(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member ProcessKeyEventArgs : Message -&gt; bool&#xA;override this.ProcessKeyEventArgs : Message -&gt; bool" Usage="control.ProcessKeyEventArgs m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="6dc4f-2807">処理するウィンドウ メッセージを表す、参照渡しされた <see cref="T:System.Windows.Forms.Message" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2807">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the window message to process.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2808">キー メッセージを処理し、適切なコントロール イベントを生成します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2808">Processes a key message and generates the appropriate control events.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-2809">メッセージがコントロールによって処理された場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2809"><see langword="true" /> if the message was processed by the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2810">このメソッドは、コントロールがキーボードメッセージを受け取ると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2810">This method is called when a control receives a keyboard message.</span></span> <span data-ttu-id="6dc4f-2811">メソッドは、<xref:System.Windows.Forms.Control.OnKeyPress%2A>、<xref:System.Windows.Forms.Control.OnKeyDown%2A>、または <xref:System.Windows.Forms.Control.OnKeyUp%2A> メソッドを呼び出すことによって、メッセージの適切なキーイベントを生成します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2811">The method is responsible for generating the appropriate key events for the message by calling the <xref:System.Windows.Forms.Control.OnKeyPress%2A>, <xref:System.Windows.Forms.Control.OnKeyDown%2A>, or <xref:System.Windows.Forms.Control.OnKeyUp%2A> methods.</span></span> <span data-ttu-id="6dc4f-2812">`m` パラメーターには、処理する必要があるウィンドウメッセージが含まれています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2812">The `m` parameter contains the window message that must be processed.</span></span> <span data-ttu-id="6dc4f-2813"><xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType> プロパティに指定できる値は、WM_CHAR、WM_KEYDOWN、WM_SYSKEYDOWN、WM_KEYUP、WM_SYSKEYUP、および WM_IME_CHAR です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2813">Possible values for the <xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType> property are WM_CHAR, WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, WM_SYSKEYUP, and WM_IME_CHAR.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2814">派生クラスの <see cref="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)" /> メソッドをオーバーライドする場合、コントロールは <see langword="true" /> を返して、キーが処理されたことを示す必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2814">When overriding the <see cref="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)" /> method in a derived class, a control should return <see langword="true" /> to indicate that it has processed the key.</span></span> <span data-ttu-id="6dc4f-2815">コントロールによって処理されないキーの場合は、基本クラスの <see cref="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)" /> メソッドを呼び出した結果が返されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2815">For keys that are not processed by the control, the result of calling the base class's <see cref="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)" /> method should be returned.</span></span> <span data-ttu-id="6dc4f-2816">コントロールは、このメソッドをオーバーライドする必要はほとんどありません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2816">Controls will seldom, if ever, need to override this method.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="ProcessKeyMessage">
      <MemberSignature Language="C#" Value="protected internal virtual bool ProcessKeyMessage (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ProcessKeyMessage(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ProcessKeyMessage(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function ProcessKeyMessage (ByRef m As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool ProcessKeyMessage(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member ProcessKeyMessage : Message -&gt; bool&#xA;override this.ProcessKeyMessage : Message -&gt; bool" Usage="control.ProcessKeyMessage m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="6dc4f-2817">処理するウィンドウ メッセージを表す、参照渡しされた <see cref="T:System.Windows.Forms.Message" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2817">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the window message to process.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2818">キーボード メッセージを処理します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2818">Processes a keyboard message.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-2819">メッセージがコントロールによって処理された場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2819"><see langword="true" /> if the message was processed by the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2820">このメソッドは、コントロールがキーボードメッセージを受け取ると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2820">This method is called when a control receives a keyboard message.</span></span> <span data-ttu-id="6dc4f-2821">メソッドは、最初にコントロールに親があるかどうかを判断します。その場合は、親の <xref:System.Windows.Forms.Control.ProcessKeyPreview%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2821">The method first determines whether the control has a parent; if so, it calls the parent's <xref:System.Windows.Forms.Control.ProcessKeyPreview%2A> method.</span></span> <span data-ttu-id="6dc4f-2822">親の <xref:System.Windows.Forms.Control.ProcessKeyPreview%2A> メソッドがメッセージを処理しない場合、<xref:System.Windows.Forms.Control.ProcessKeyEventArgs%2A> メソッドが呼び出され、適切なキーボードイベントが生成されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2822">If the parent's <xref:System.Windows.Forms.Control.ProcessKeyPreview%2A> method does not process the message then the <xref:System.Windows.Forms.Control.ProcessKeyEventArgs%2A> method is called to generate the appropriate keyboard events.</span></span> <span data-ttu-id="6dc4f-2823">`m` パラメーターには、処理する必要があるウィンドウメッセージが含まれています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2823">The `m` parameter contains the window message that must be processed.</span></span> <span data-ttu-id="6dc4f-2824"><xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType> プロパティに指定できる値は、WM_CHAR、WM_KEYDOWN、WM_SYSKEYDOWN、WM_KEYUP、および WM_SYSKEYUP です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2824">Possible values for the <xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType> property are WM_CHAR, WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, and WM_SYSKEYUP.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2825"><see cref="M:System.Windows.Forms.Control.ProcessKeyMessage(System.Windows.Forms.Message@)" /> メソッドをオーバーライドする場合、コントロールは、キーが処理されたことを示すために <see langword="true" /> を返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2825">When overriding the <see cref="M:System.Windows.Forms.Control.ProcessKeyMessage(System.Windows.Forms.Message@)" /> method, a control should return <see langword="true" /> to indicate that it has processed the key.</span></span> <span data-ttu-id="6dc4f-2826">コントロールによって処理されないキーの場合は、基本クラスの <see cref="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)" /> の結果が返されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2826">For keys that are not processed by the control, the result of the base class's <see cref="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)" /> should be returned.</span></span> <span data-ttu-id="6dc4f-2827">コントロールは、このメソッドをオーバーライドする必要はほとんどありません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2827">Controls will seldom, if ever, need to override this method.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
        <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
        <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="ProcessKeyPreview">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessKeyPreview (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ProcessKeyPreview(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ProcessKeyPreview (ByRef m As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ProcessKeyPreview(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member ProcessKeyPreview : Message -&gt; bool&#xA;override this.ProcessKeyPreview : Message -&gt; bool" Usage="control.ProcessKeyPreview m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="6dc4f-2828">処理するウィンドウ メッセージを表す、参照渡しされた <see cref="T:System.Windows.Forms.Message" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2828">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the window message to process.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2829">キーボード メッセージをプレビューします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2829">Previews a keyboard message.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-2830">メッセージがコントロールによって処理された場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2830"><see langword="true" /> if the message was processed by the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2831">このメソッドは、子コントロールがキーボードメッセージを受信したときに子コントロールによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2831">This method is called by a child control when the child control receives a keyboard message.</span></span> <span data-ttu-id="6dc4f-2832">子コントロールは、メッセージのキーボードイベントを生成する前にこのメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2832">The child control calls this method before generating any keyboard events for the message.</span></span> <span data-ttu-id="6dc4f-2833">このメソッドが `true`を返す場合、子コントロールはメッセージを処理したと見なし、キーボードイベントを生成しません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2833">If this method returns `true`, the child control considers the message processed and does not generate any keyboard events.</span></span> <span data-ttu-id="6dc4f-2834">`m` パラメーターには、プレビューするウィンドウメッセージが含まれています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2834">The `m` parameter contains the window message to preview.</span></span> <span data-ttu-id="6dc4f-2835"><xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType> プロパティに指定できる値は、WM_CHAR、WM_KEYDOWN、WM_SYSKEYDOWN、WM_KEYUP、および WM_SYSKEYUP です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2835">Possible values for the <xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType> property are WM_CHAR, WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, and WM_SYSKEYUP.</span></span> <span data-ttu-id="6dc4f-2836"><xref:System.Windows.Forms.Control.ProcessKeyPreview%2A> メソッドは、単純にその文字を親の <xref:System.Windows.Forms.Control.ProcessKeyPreview%2A> メソッドに送信するか、コントロールに親がない場合は `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2836">The <xref:System.Windows.Forms.Control.ProcessKeyPreview%2A> method simply sends the character to the parent's <xref:System.Windows.Forms.Control.ProcessKeyPreview%2A> method, or returns `false` if the control has no parent.</span></span> <span data-ttu-id="6dc4f-2837"><xref:System.Windows.Forms.Form> クラスは、このメソッドをオーバーライドして、ダイアログキーの実際の処理を実行します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2837">The <xref:System.Windows.Forms.Form> class overrides this method to perform actual processing of dialog keys.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2838">派生クラスの <see cref="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)" /> メソッドをオーバーライドする場合、コントロールは <see langword="true" /> を返して、キーが処理されたことを示す必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2838">When overriding the <see cref="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)" /> method in a derived class, a control should return <see langword="true" /> to indicate that it has processed the key.</span></span> <span data-ttu-id="6dc4f-2839">コントロールによって処理されないキーの場合は、基本クラスの <see cref="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)" /> メソッドを呼び出した結果が返されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2839">For keys that are not processed by the control, the result of calling the base class's <see cref="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)" /> method should be returned.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
        <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
        <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="ProcessMnemonic">
      <MemberSignature Language="C#" Value="protected internal virtual bool ProcessMnemonic (char charCode);" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ProcessMnemonic(char charCode) cil managed" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ProcessMnemonic(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function ProcessMnemonic (charCode As Char) As Boolean" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool ProcessMnemonic(char charCode);" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member ProcessMnemonic : char -&gt; bool&#xA;override this.ProcessMnemonic : char -&gt; bool" Usage="control.ProcessMnemonic charCode" />
      <MemberSignature Language="C#" Value="protected virtual bool ProcessMnemonic (char charCode);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ProcessMnemonic(char charCode) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ProcessMnemonic (charCode As Char) As Boolean" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ProcessMnemonic(char charCode);" FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCode" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="charCode"><span data-ttu-id="6dc4f-2840">処理対象の文字。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2840">The character to process.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2841">ニーモニック文字を処理します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2841">Processes a mnemonic character.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-2842">文字がコントロールによってニーモニックとして処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2842"><see langword="true" /> if the character was processed as a mnemonic by the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2843">このメソッドは、ニーモニック文字を処理する機会をコントロールに与えるために呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2843">This method is called to give a control the opportunity to process a mnemonic character.</span></span> <span data-ttu-id="6dc4f-2844">メソッドは、コントロールがニーモニックを処理する状態であるかどうか、および指定された文字がニーモニックを表すかどうかを判断する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2844">The method should determine whether the control is in a state to process mnemonics and if whether the given character represents a mnemonic.</span></span> <span data-ttu-id="6dc4f-2845">その場合、メソッドはニーモニックに関連付けられたアクションを実行し、`true`を返します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2845">If so, the method should perform the action associated with the mnemonic and return `true`.</span></span> <span data-ttu-id="6dc4f-2846">それ以外の場合、メソッドは `false`を返します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2846">If not, the method should return `false`.</span></span> <span data-ttu-id="6dc4f-2847">このメソッドの実装では、多くの場合、<xref:System.Windows.Forms.Control.IsMnemonic%2A> メソッドを使用して、指定された文字がコントロールのテキスト内のニーモニックと一致するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2847">Implementations of this method often use the <xref:System.Windows.Forms.Control.IsMnemonic%2A> method to determine whether the given character matches a mnemonic in the control's text.</span></span>  
  
 <span data-ttu-id="6dc4f-2848">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2848">For example:</span></span>  
  
```csharp  
if (CanSelect && IsMnemonic(charCode, MyControl.Text) {  
      // Perform action associated with mnemonic.  
       }  
```  
  
 <span data-ttu-id="6dc4f-2849">この <xref:System.Windows.Forms.Control.ProcessMnemonic%2A> メソッドの既定の実装では、コントロールにニーモニックがないことを示すために `false` が単に返されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2849">This default implementation of the <xref:System.Windows.Forms.Control.ProcessMnemonic%2A> method simply returns `false` to indicate that the control has no mnemonic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2850">次のコード例は、カスタム動作を示すために <xref:System.Windows.Forms.Control.ProcessMnemonic%2A> メソッドをオーバーライドする button クラスの拡張を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2850">The following code example demonstrates an extension of the button class that overrides the <xref:System.Windows.Forms.Control.ProcessMnemonic%2A> method to exhibit custom behavior.</span></span> <span data-ttu-id="6dc4f-2851">この例では、<xref:System.Windows.Forms.Control.CanSelect%2A> と <xref:System.Windows.Forms.Control.IsMnemonic%2A> プロパティの使用方法も示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2851">The example also demonstrates the use of the <xref:System.Windows.Forms.Control.CanSelect%2A> and <xref:System.Windows.Forms.Control.IsMnemonic%2A> properties.</span></span> <span data-ttu-id="6dc4f-2852">この例を実行するには、同じファイル内のフォームクラスの後に次のコードを貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2852">To run this example paste the following code after a form class, in the same file.</span></span> <span data-ttu-id="6dc4f-2853">`MnemonicButton` 型のボタンをフォームに追加します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2853">Add a button of type `MnemonicButton` to the form.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ProcessMnemonic#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ProcessMnemonic/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ProcessMnemonic#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ProcessMnemonic/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ProcessMnemonic#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ProcessMnemonic/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.IsMnemonic(System.Char,System.String)" />
        <altmember cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="ProductName">
      <MemberSignature Language="C#" Value="public string ProductName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProductName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ProductName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProductName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProductName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ProductName : string" Usage="System.Windows.Forms.Control.ProductName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-2854">コントロールを格納しているアセンブリの製品名を取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2854">Gets the product name of the assembly containing the control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-2855">コントロールを格納しているアセンブリの製品名。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2855">The product name of the assembly containing the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2856"><xref:System.Windows.Forms.Control.ProductName%2A> プロパティは、読み取り専用のプロパティです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2856">The <xref:System.Windows.Forms.Control.ProductName%2A> property is a read-only property.</span></span> <span data-ttu-id="6dc4f-2857">このプロパティの値を変更するには、<xref:System.Reflection.AssemblyProductAttribute>の <xref:System.Reflection.AssemblyProductAttribute.Product%2A> プロパティの値を設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2857">To change the value of this property, set the <xref:System.Reflection.AssemblyProductAttribute.Product%2A> property value of the <xref:System.Reflection.AssemblyProductAttribute>.</span></span> <span data-ttu-id="6dc4f-2858">次のC#コード行は、<xref:System.Windows.Forms.Control.ProductName%2A> プロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2858">The following line of C# code sets the <xref:System.Windows.Forms.Control.ProductName%2A> property.</span></span>  
  
```  
[assembly: AssemblyProduct("MyApplication")]  
```  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-2859">会社名、製品名、製品バージョンを指定することを強くお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2859">It is strongly recommended that you provide the company name, product name, and product version.</span></span> <span data-ttu-id="6dc4f-2860">この情報を提供することで、"Windows 認定" プログラムに準拠したアプリケーションを簡単に記述できるようにする、<xref:System.Windows.Forms.Application.UserAppDataPath%2A?displayProperty=nameWithType> などの Windows フォーム機能を使用できるようになります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2860">Providing this information enables the use of Windows Forms features such as <xref:System.Windows.Forms.Application.UserAppDataPath%2A?displayProperty=nameWithType> that make it easier to write applications that comply with the "Certified for Windows" program.</span></span>
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2861">次のコード例では、<xref:System.Windows.Forms.Form>に含まれる <xref:System.Windows.Forms.Label> のアプリケーションに関する情報を表示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2861">The following code example displays information about the application in a <xref:System.Windows.Forms.Label> contained by a <xref:System.Windows.Forms.Form>.</span></span> <span data-ttu-id="6dc4f-2862">この例では、<xref:System.Windows.Forms.Control.CompanyName%2A>、<xref:System.Windows.Forms.Control.ProductName%2A>、<xref:System.Windows.Forms.Control.ProductVersion%2A> が設定されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2862">This example requires that the <xref:System.Windows.Forms.Control.CompanyName%2A>, <xref:System.Windows.Forms.Control.ProductName%2A> and <xref:System.Windows.Forms.Control.ProductVersion%2A> have been set.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties3/CPP/aboutdialog.cpp#1)]
 [!code-csharp[Windows.Forms.Control Properties3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties3/CS/aboutdialog.cs#1)]
 [!code-vb[Windows.Forms.Control Properties3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties3/VB/aboutdialog.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.AssemblyProductAttribute.Product" />
      </Docs>
    </Member>
    <Member MemberName="ProductVersion">
      <MemberSignature Language="C#" Value="public string ProductVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProductVersion" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ProductVersion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProductVersion As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProductVersion { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ProductVersion : string" Usage="System.Windows.Forms.Control.ProductVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-2863">コントロールを格納しているアセンブリのバージョンを取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2863">Gets the version of the assembly containing the control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-2864">コントロールを格納しているアセンブリのファイル バージョン。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2864">The file version of the assembly containing the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2865"><xref:System.Windows.Forms.Control.ProductVersion%2A> プロパティは、読み取り専用のプロパティです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2865">The <xref:System.Windows.Forms.Control.ProductVersion%2A> property is a read-only property.</span></span> <span data-ttu-id="6dc4f-2866">このプロパティの値を変更するには、<xref:System.Reflection.AssemblyVersionAttribute>の <xref:System.Reflection.AssemblyVersionAttribute.Version%2A> プロパティの値を設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2866">To change the value of this property, set the <xref:System.Reflection.AssemblyVersionAttribute.Version%2A> property value of the <xref:System.Reflection.AssemblyVersionAttribute>.</span></span> <span data-ttu-id="6dc4f-2867">次のC#コード行は、<xref:System.Windows.Forms.Control.ProductVersion%2A> プロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2867">The following line of C# code sets the <xref:System.Windows.Forms.Control.ProductVersion%2A> property.</span></span>  
  
```  
[assembly: AssemblyVersion("1.0.1")]  
```  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-2868">会社名、製品名、製品バージョンを指定することを強くお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2868">It is strongly recommended that you provide the company name, product name, and product version.</span></span> <span data-ttu-id="6dc4f-2869">この情報を提供することで、"Windows 認定" プログラムに準拠したアプリケーションを簡単に記述できるようにする、<xref:System.Windows.Forms.Application.UserAppDataPath%2A?displayProperty=nameWithType> などの Windows フォーム機能を使用できるようになります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2869">Providing this information enables the use of Windows Forms features such as <xref:System.Windows.Forms.Application.UserAppDataPath%2A?displayProperty=nameWithType> that make it easier to write applications that comply with the "Certified for Windows" program.</span></span>
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2870">次のコード例では、<xref:System.Windows.Forms.Form>に含まれる <xref:System.Windows.Forms.Label> のアプリケーションに関する情報を表示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2870">The following code example displays information about the application in a <xref:System.Windows.Forms.Label> contained by a <xref:System.Windows.Forms.Form>.</span></span> <span data-ttu-id="6dc4f-2871">この例では、<xref:System.Windows.Forms.Control.CompanyName%2A>、<xref:System.Windows.Forms.Control.ProductName%2A>、<xref:System.Windows.Forms.Control.ProductVersion%2A> が設定されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2871">This example requires that the <xref:System.Windows.Forms.Control.CompanyName%2A>, <xref:System.Windows.Forms.Control.ProductName%2A> and <xref:System.Windows.Forms.Control.ProductVersion%2A> have been set.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties3/CPP/aboutdialog.cpp#1)]
 [!code-csharp[Windows.Forms.Control Properties3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties3/CS/aboutdialog.cs#1)]
 [!code-vb[Windows.Forms.Control Properties3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties3/VB/aboutdialog.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.AssemblyVersionAttribute.Version" />
      </Docs>
    </Member>
    <Member MemberName="PropagatingImeMode">
      <MemberSignature Language="C#" Value="protected static System.Windows.Forms.ImeMode PropagatingImeMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Forms.ImeMode PropagatingImeMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.PropagatingImeMode" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly Property PropagatingImeMode As ImeMode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static property System::Windows::Forms::ImeMode PropagatingImeMode { System::Windows::Forms::ImeMode get(); };" />
      <MemberSignature Language="F#" Value="member this.PropagatingImeMode : System.Windows.Forms.ImeMode" Usage="System.Windows.Forms.Control.PropagatingImeMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-2872">反映する IME モードを表すオブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2872">Gets an object that represents a propagating IME mode.</span></span></summary>
        <value><span data-ttu-id="6dc4f-2873">反映する IME モードを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2873">An object that represents a propagating IME mode.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryAccessibilityHelp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.QueryAccessibilityHelpEventHandler QueryAccessibilityHelp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.QueryAccessibilityHelpEventHandler QueryAccessibilityHelp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.QueryAccessibilityHelp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryAccessibilityHelp As QueryAccessibilityHelpEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::QueryAccessibilityHelpEventHandler ^ QueryAccessibilityHelp;" />
      <MemberSignature Language="F#" Value="member this.QueryAccessibilityHelp : System.Windows.Forms.QueryAccessibilityHelpEventHandler " Usage="member this.QueryAccessibilityHelp : System.Windows.Forms.QueryAccessibilityHelpEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.QueryAccessibilityHelpEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-2874"><see cref="T:System.Windows.Forms.AccessibleObject" /> がユーザー補助アプリケーションにヘルプを提供したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2874">Occurs when <see cref="T:System.Windows.Forms.AccessibleObject" /> is providing help to accessibility applications.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2875">ユーザーが F1 キーを押してユーザー補助オブジェクトに対してヘルプを呼び出せるようにするには、<xref:System.Windows.Forms.HelpProvider> クラスを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2875">You should use the <xref:System.Windows.Forms.HelpProvider> class to enable users to invoke help on your accessible object by pressing the F1 key.</span></span> <span data-ttu-id="6dc4f-2876"><xref:System.Windows.Forms.HelpProvider> を使用すると、<xref:System.Windows.Forms.QueryAccessibilityHelpEventArgs>に完全な情報が表示されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2876">Using the <xref:System.Windows.Forms.HelpProvider> provides you with complete information in the <xref:System.Windows.Forms.QueryAccessibilityHelpEventArgs>.</span></span> <span data-ttu-id="6dc4f-2877">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2877">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2878">次のコード例は、<xref:System.Windows.Forms.AccessibleObject> クラスと <xref:System.Windows.Forms.Control.ControlAccessibleObject> クラスを使用してアクセス可能な情報を公開する、アクセシビリティ対応のグラフコントロールを作成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2878">The following code example demonstrates the creation of an accessibility-aware chart control, using the <xref:System.Windows.Forms.AccessibleObject> and <xref:System.Windows.Forms.Control.ControlAccessibleObject> classes to expose accessible information.</span></span> <span data-ttu-id="6dc4f-2879">コントロールは、凡例と共に2つの曲線をプロットします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2879">The control plots two curves along with a legend.</span></span> <span data-ttu-id="6dc4f-2880">`ControlAccessibleObject`から派生した `ChartControlAccessibleObject` クラスは、<xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> メソッドでグラフコントロールにカスタムのユーザー補助情報を提供するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2880">The `ChartControlAccessibleObject` class, which derives from `ControlAccessibleObject`, is used in the <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> method to provide custom accessible information for the chart control.</span></span> <span data-ttu-id="6dc4f-2881">グラフの凡例は実際の <xref:System.Windows.Forms.Control> ベースのコントロールではなく、グラフコントロールによって描画されるため、組み込みのアクセス可能な情報は含まれません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2881">Since the chart legend is not an actual <xref:System.Windows.Forms.Control> -based control, but instead is drawn by the chart control, it does not any built-in accessible information.</span></span> <span data-ttu-id="6dc4f-2882">このため、`ChartControlAccessibleObject` クラスは <xref:System.Windows.Forms.AccessibleObject.GetChild%2A> メソッドをオーバーライドして、凡例の各部分のアクセス可能な情報を表す `CurveLegendAccessibleObject` を返します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2882">Because of this, the `ChartControlAccessibleObject` class overrides the <xref:System.Windows.Forms.AccessibleObject.GetChild%2A> method to return the `CurveLegendAccessibleObject` that represents accessible information for each part of the legend.</span></span> <span data-ttu-id="6dc4f-2883">アクセス可能なアプリケーションがこのコントロールを使用する場合、コントロールは必要なアクセス可能な情報を提供できます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2883">When an accessible-aware application uses this control, the control can provide the necessary accessible information.</span></span>  
  
 <span data-ttu-id="6dc4f-2884">このコード抜粋では、<xref:System.Windows.Forms.Control.QueryAccessibilityHelp> イベントの処理について説明します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2884">This code excerpt demonstrates handling the <xref:System.Windows.Forms.Control.QueryAccessibilityHelp> event.</span></span> <span data-ttu-id="6dc4f-2885">完全なコード例については、<xref:System.Windows.Forms.AccessibleObject> クラスの概要を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2885">See the <xref:System.Windows.Forms.AccessibleObject> class overview for the complete code example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.AccessibleObject#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/CPP/chartcontrol.cpp#3)]
 [!code-csharp[System.Windows.Forms.AccessibleObject#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/CS/chartcontrol.cs#3)]
 [!code-vb[System.Windows.Forms.AccessibleObject#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/VB/chartcontrol.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.AccessibleObject.GetHelpTopic(System.String@)" />
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.QueryContinueDragEventHandler QueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.QueryContinueDragEventHandler QueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.QueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::QueryContinueDragEventHandler ^ QueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.QueryContinueDrag : System.Windows.Forms.QueryContinueDragEventHandler " Usage="member this.QueryContinueDrag : System.Windows.Forms.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-2886">ドラッグ アンド ドロップ操作中に発生し、ドラッグ ソースがドラッグ アンド ドロップ操作をキャンセルする必要があるかどうかを決定できるようにします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2886">Occurs during a drag-and-drop operation and enables the drag source to determine whether the drag-and-drop operation should be canceled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2887"><xref:System.Windows.Forms.Control.QueryContinueDrag> イベントは、ドラッグアンドドロップ操作中にキーボードまたはマウスボタンの状態が変化したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2887">The <xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</span></span> <span data-ttu-id="6dc4f-2888"><xref:System.Windows.Forms.Control.QueryContinueDrag> イベントは、ドラッグ元がドラッグアンドドロップ操作をキャンセルする必要があるかどうかを判断するために使用します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2888">The <xref:System.Windows.Forms.Control.QueryContinueDrag> event enables the drag source to determine whether the drag-and-drop operation should be canceled.</span></span>  
  
 <span data-ttu-id="6dc4f-2889">ドラッグ アンド ドロップ操作関連のイベントがどのように、いつ発生するかについて次に示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2889">The following describes how and when events related to drag-and-drop operations are raised.</span></span>  
  
 <span data-ttu-id="6dc4f-2890"><xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッドは、現在のカーソル位置の下にあるコントロールを決定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2890">The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method determines the control under the current cursor location.</span></span> <span data-ttu-id="6dc4f-2891">次に、コントロールが有効なドロップ先であるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2891">It then checks to see if the control is a valid drop target.</span></span>  
  
 <span data-ttu-id="6dc4f-2892">コントロールが有効なドロップ先である場合、ドラッグアンドドロップ効果が指定された状態で <xref:System.Windows.Forms.Control.GiveFeedback> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2892">If the control is a valid drop target, the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the drag-and-drop effect specified.</span></span> <span data-ttu-id="6dc4f-2893">ドラッグ アンド ドロップ効果の一覧については、<xref:System.Windows.Forms.DragDropEffects> 列挙体を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2893">For a list of drag-and-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
 <span data-ttu-id="6dc4f-2894">マウス カーソルの位置、キーボードの状態、およびマウス ボタンの状態の変更が監視されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2894">Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.</span></span>  
  
-   <span data-ttu-id="6dc4f-2895">ユーザーがウィンドウの外に移動した場合、<xref:System.Windows.Forms.Control.DragLeave> イベントが生成されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2895">If the user moves out of a window, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
-   <span data-ttu-id="6dc4f-2896">マウスが別のコントロールに移動した場合は、そのコントロールの <xref:System.Windows.Forms.Control.DragEnter> が生成されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2896">If the mouse enters another control, the <xref:System.Windows.Forms.Control.DragEnter> for that control is raised.</span></span>  
  
-   <span data-ttu-id="6dc4f-2897">マウスが移動しても同じコントロール内の場合は、<xref:System.Windows.Forms.Control.DragOver> イベントが生成されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2897">If the mouse moves but stays within the same control, the <xref:System.Windows.Forms.Control.DragOver> event is raised.</span></span>  
  
 <span data-ttu-id="6dc4f-2898">キーボードまたはマウスボタンの状態が変化した場合は、<xref:System.Windows.Forms.Control.QueryContinueDrag> イベントが発生し、ドラッグを続行するか、データを削除するか、またはイベントの <xref:System.Windows.Forms.QueryContinueDragEventArgs>の <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> プロパティの値に基づいて操作をキャンセルするかが決定されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2898">If there is a change in the keyboard or mouse button state, the <xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event's <xref:System.Windows.Forms.QueryContinueDragEventArgs>.</span></span>  
  
-   <span data-ttu-id="6dc4f-2899"><xref:System.Windows.Forms.DragAction> の値が `Continue`場合は、操作を続行するために <xref:System.Windows.Forms.Control.DragOver> イベントが発生し、適切な視覚的フィードバックを設定できるように、新しい効果を使用して <xref:System.Windows.Forms.Control.GiveFeedback> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2899">If the value of <xref:System.Windows.Forms.DragAction> is `Continue`, the <xref:System.Windows.Forms.Control.DragOver> event is raised to continue the operation and the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the new effect so appropriate visual feedback can be set.</span></span> <span data-ttu-id="6dc4f-2900">有効なドロップ効果の一覧については、<xref:System.Windows.Forms.DragDropEffects> 列挙体を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2900">For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6dc4f-2901"><xref:System.Windows.Forms.Control.DragOver> イベントと <xref:System.Windows.Forms.Control.GiveFeedback> イベントがペアになっているため、マウスがドロップ先の上に移動すると、マウスの位置に関する最新のフィードバックがユーザーに与えられます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2901">The <xref:System.Windows.Forms.Control.DragOver> and <xref:System.Windows.Forms.Control.GiveFeedback> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.</span></span>  
  
-   <span data-ttu-id="6dc4f-2902"><xref:System.Windows.Forms.DragAction> の値が `Drop`場合は、ドロップ効果の値がソースに返されるため、ソースアプリケーションはソースデータに対して適切な操作を実行できます。たとえば、操作が移動だった場合は、データを切り取ります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2902">If the value of <xref:System.Windows.Forms.DragAction> is `Drop`, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</span></span>  
  
-   <span data-ttu-id="6dc4f-2903"><xref:System.Windows.Forms.DragAction> の値が `Cancel`場合、<xref:System.Windows.Forms.Control.DragLeave> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2903">If the value of <xref:System.Windows.Forms.DragAction> is `Cancel`, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
 <span data-ttu-id="6dc4f-2904">既定では、<xref:System.Windows.Forms.Control.QueryContinueDrag> イベントは、ESC キーが押された場合に <xref:System.Windows.Forms.DragAction> 内の `Cancel` に <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> を設定し、左、中央、または右のマウスボタンが押されたときに <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> に `Drop` を設定します。<xref:System.Windows.Forms.DragAction></span><span class="sxs-lookup"><span data-stu-id="6dc4f-2904">By default, the <xref:System.Windows.Forms.Control.QueryContinueDrag> event sets <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> to `Cancel` in <xref:System.Windows.Forms.DragAction> if the ESC key was pressed and sets <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> to `Drop` in <xref:System.Windows.Forms.DragAction> if the left, middle, or right mouse button is pressed.</span></span>  
  
 <span data-ttu-id="6dc4f-2905">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2905">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2906">このコード抜粋では、ドラッグ操作がフォームの境界の外側に移動した場合に、<xref:System.Windows.Forms.Control.QueryContinueDrag> イベントを使用してドラッグアンドドロップ操作をキャンセルする方法を示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2906">This code excerpt demonstrates using the <xref:System.Windows.Forms.Control.QueryContinueDrag> event to cancel the drag-and-drop operation if the drag operation moves outside the bounds of the form.</span></span> <span data-ttu-id="6dc4f-2907">完全なコード例については、<xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッドを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2907">See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#6)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#6)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="RaiseDragEvent">
      <MemberSignature Language="C#" Value="protected void RaiseDragEvent (object key, System.Windows.Forms.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseDragEvent(object key, class System.Windows.Forms.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RaiseDragEvent(System.Object,System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaiseDragEvent (key As Object, e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseDragEvent(System::Object ^ key, System::Windows::Forms::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.RaiseDragEvent : obj * System.Windows.Forms.DragEventArgs -&gt; unit" Usage="control.RaiseDragEvent (key, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="e" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="6dc4f-2908">発生させるイベント。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2908">The event to raise.</span></span></param>
        <param name="e"><span data-ttu-id="6dc4f-2909">イベント データを含んでいる <see cref="T:System.Windows.Forms.DragEventArgs" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2909">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2910">適切なドラッグ イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2910">Raises the appropriate drag event.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.RaiseKeyEvent(System.Object,System.Windows.Forms.KeyEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaiseMouseEvent(System.Object,System.Windows.Forms.MouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaisePaintEvent(System.Object,System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="RaiseKeyEvent">
      <MemberSignature Language="C#" Value="protected void RaiseKeyEvent (object key, System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseKeyEvent(object key, class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RaiseKeyEvent(System.Object,System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaiseKeyEvent (key As Object, e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseKeyEvent(System::Object ^ key, System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.RaiseKeyEvent : obj * System.Windows.Forms.KeyEventArgs -&gt; unit" Usage="control.RaiseKeyEvent (key, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="6dc4f-2911">発生させるイベント。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2911">The event to raise.</span></span></param>
        <param name="e"><span data-ttu-id="6dc4f-2912">イベント データを含んでいる <see cref="T:System.Windows.Forms.KeyEventArgs" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2912">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2913">適切なキー イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2913">Raises the appropriate key event.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.RaiseDragEvent(System.Object,System.Windows.Forms.DragEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaiseMouseEvent(System.Object,System.Windows.Forms.MouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaisePaintEvent(System.Object,System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="RaiseMouseEvent">
      <MemberSignature Language="C#" Value="protected void RaiseMouseEvent (object key, System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseMouseEvent(object key, class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RaiseMouseEvent(System.Object,System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaiseMouseEvent (key As Object, e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseMouseEvent(System::Object ^ key, System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.RaiseMouseEvent : obj * System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="control.RaiseMouseEvent (key, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="6dc4f-2914">発生させるイベント。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2914">The event to raise.</span></span></param>
        <param name="e"><span data-ttu-id="6dc4f-2915">イベント データを含んでいる <see cref="T:System.Windows.Forms.MouseEventArgs" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2915">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2916">適切なマウス イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2916">Raises the appropriate mouse event.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.RaiseDragEvent(System.Object,System.Windows.Forms.DragEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaiseKeyEvent(System.Object,System.Windows.Forms.KeyEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaisePaintEvent(System.Object,System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="RaisePaintEvent">
      <MemberSignature Language="C#" Value="protected void RaisePaintEvent (object key, System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaisePaintEvent(object key, class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RaisePaintEvent(System.Object,System.Windows.Forms.PaintEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaisePaintEvent (key As Object, e As PaintEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaisePaintEvent(System::Object ^ key, System::Windows::Forms::PaintEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.RaisePaintEvent : obj * System.Windows.Forms.PaintEventArgs -&gt; unit" Usage="control.RaisePaintEvent (key, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="6dc4f-2917">発生させるイベント。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2917">The event to raise.</span></span></param>
        <param name="e"><span data-ttu-id="6dc4f-2918">イベント データを含んでいる <see cref="T:System.Windows.Forms.PaintEventArgs" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2918">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2919">適切な描画イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2919">Raises the appropriate paint event.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.RaiseDragEvent(System.Object,System.Windows.Forms.DragEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaiseKeyEvent(System.Object,System.Windows.Forms.KeyEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaiseMouseEvent(System.Object,System.Windows.Forms.MouseEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="RecreateHandle">
      <MemberSignature Language="C#" Value="protected void RecreateHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RecreateHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RecreateHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RecreateHandle ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RecreateHandle();" />
      <MemberSignature Language="F#" Value="member this.RecreateHandle : unit -&gt; unit" Usage="control.RecreateHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6dc4f-2920">強制的にコントロールのハンドルを再作成します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2920">Forces the re-creation of the handle for the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2921"><xref:System.Windows.Forms.Control.RecreateHandle%2A> メソッドは、新しいコントロールに対してパラメーターが必要な場合に呼び出されますが、<xref:System.Windows.Forms.Control.UpdateStyles%2A> から <xref:System.Windows.Forms.Control.CreateParams%2A> への呼び出しは不十分です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2921">The <xref:System.Windows.Forms.Control.RecreateHandle%2A> method is called whenever parameters are needed for a new control, but using a call from <xref:System.Windows.Forms.Control.UpdateStyles%2A> to <xref:System.Windows.Forms.Control.CreateParams%2A> is insufficient.</span></span> <span data-ttu-id="6dc4f-2922">また、このメソッドは <xref:System.Windows.Forms.Control.DestroyHandle%2A> と <xref:System.Windows.Forms.Control.CreateHandle%2A> を呼び出し、<xref:System.Windows.Forms.Control.RecreatingHandle%2A> を `true`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2922">This method also calls <xref:System.Windows.Forms.Control.DestroyHandle%2A> and <xref:System.Windows.Forms.Control.CreateHandle%2A> and sets <xref:System.Windows.Forms.Control.RecreatingHandle%2A> to `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="RecreatingHandle">
      <MemberSignature Language="C#" Value="public bool RecreatingHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RecreatingHandle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.RecreatingHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecreatingHandle As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RecreatingHandle { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.RecreatingHandle : bool" Usage="System.Windows.Forms.Control.RecreatingHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-2923">コントロールが現在そのコントロールのハンドルを再作成中かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2923">Gets a value indicating whether the control is currently re-creating its handle.</span></span></summary>
        <value><span data-ttu-id="6dc4f-2924">コントロールが現在そのコントロールのハンドルを再作成中である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2924"><see langword="true" /> if the control is currently re-creating its handle; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2925"><xref:System.Windows.Forms.Control.RecreateHandle%2A> メソッドがコントロールでまだ実行されている場合、<xref:System.Windows.Forms.Control.RecreatingHandle%2A> プロパティは `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2925">The <xref:System.Windows.Forms.Control.RecreatingHandle%2A> property returns `true` if the <xref:System.Windows.Forms.Control.RecreateHandle%2A> method is still running on the control.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="RectangleToClient">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle RectangleToClient (System.Drawing.Rectangle r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle RectangleToClient(valuetype System.Drawing.Rectangle r) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RectangleToClient(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Function RectangleToClient (r As Rectangle) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Rectangle RectangleToClient(System::Drawing::Rectangle r);" />
      <MemberSignature Language="F#" Value="member this.RectangleToClient : System.Drawing.Rectangle -&gt; System.Drawing.Rectangle" Usage="control.RectangleToClient r" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="r"><span data-ttu-id="6dc4f-2926">画面座標で示された変換対象の <see cref="T:System.Drawing.Rectangle" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2926">The screen coordinate <see cref="T:System.Drawing.Rectangle" /> to convert.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2927">指定した画面上の四角形のサイズと位置をクライアント座標で算出します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2927">Computes the size and location of the specified screen rectangle in client coordinates.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-2928">変換された <see cref="T:System.Drawing.Rectangle" />、<see cref="T:System.Drawing.Rectangle" /> をクライアント座標で表す <paramref name="r" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2928">A <see cref="T:System.Drawing.Rectangle" /> that represents the converted <see cref="T:System.Drawing.Rectangle" />, <paramref name="r" />, in client coordinates.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Drawing.Rectangle" />
        <altmember cref="M:System.Windows.Forms.Control.RectangleToScreen(System.Drawing.Rectangle)" />
      </Docs>
    </Member>
    <Member MemberName="RectangleToScreen">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle RectangleToScreen (System.Drawing.Rectangle r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle RectangleToScreen(valuetype System.Drawing.Rectangle r) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RectangleToScreen(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Function RectangleToScreen (r As Rectangle) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Rectangle RectangleToScreen(System::Drawing::Rectangle r);" />
      <MemberSignature Language="F#" Value="member this.RectangleToScreen : System.Drawing.Rectangle -&gt; System.Drawing.Rectangle" Usage="control.RectangleToScreen r" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="r"><span data-ttu-id="6dc4f-2929">クライアント座標で示された変換対象の <see cref="T:System.Drawing.Rectangle" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2929">The client coordinate <see cref="T:System.Drawing.Rectangle" /> to convert.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2930">指定したクライアント領域の四角形のサイズと位置を画面座標で算出します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2930">Computes the size and location of the specified client rectangle in screen coordinates.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-2931">変換された <see cref="T:System.Drawing.Rectangle" />、<see cref="T:System.Drawing.Rectangle" /> を画面座標で表す <paramref name="p" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2931">A <see cref="T:System.Drawing.Rectangle" /> that represents the converted <see cref="T:System.Drawing.Rectangle" />, <paramref name="p" />, in screen coordinates.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6dc4f-2932">次のコード例は、<xref:System.Windows.Forms.Control.BackColor%2A>、<xref:System.Windows.Forms.Control.RectangleToScreen%2A>、<xref:System.Windows.Forms.Control.PointToScreen%2A>、<xref:System.Windows.Forms.Control.MouseButtons%2A>、<xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=nameWithType>、および <xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=nameWithType> の各メンバーを使用する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2932">The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.BackColor%2A>, <xref:System.Windows.Forms.Control.RectangleToScreen%2A>, <xref:System.Windows.Forms.Control.PointToScreen%2A>, <xref:System.Windows.Forms.Control.MouseButtons%2A>, <xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=nameWithType>, and <xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=nameWithType> members.</span></span> <span data-ttu-id="6dc4f-2933">この例を実行するには、いくつかのコントロールを含む**Form1**という名前のフォームに次のコードを貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2933">To run the example, paste the following code in a form called **Form1** containing several controls.</span></span> <span data-ttu-id="6dc4f-2934">この例では、<xref:System.Windows.Forms.Control.MouseDown>、<xref:System.Windows.Forms.Control.MouseMove>、および <xref:System.Windows.Forms.Control.MouseUp> イベントが、この例で定義されているイベントハンドラーに接続されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2934">This example requires that the <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseMove>, and <xref:System.Windows.Forms.Control.MouseUp> events are connected to the event handlers defined in the example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Rectangle" />
        <altmember cref="M:System.Windows.Forms.Control.RectangleToClient(System.Drawing.Rectangle)" />
      </Docs>
    </Member>
    <Member MemberName="ReflectMessage">
      <MemberSignature Language="C#" Value="protected static bool ReflectMessage (IntPtr hWnd, ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig bool ReflectMessage(native int hWnd, valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ReflectMessage(System.IntPtr,System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function ReflectMessage (hWnd As IntPtr, ByRef m As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static bool ReflectMessage(IntPtr hWnd, System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="static member ReflectMessage : nativeint * Message -&gt; bool" Usage="System.Windows.Forms.Control.ReflectMessage (hWnd, m)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hWnd" Type="System.IntPtr" />
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="hWnd"><span data-ttu-id="6dc4f-2935">メッセージをリフレクションするコントロールのハンドルを表す <see cref="T:System.IntPtr" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2935">An <see cref="T:System.IntPtr" /> representing the handle of the control to reflect the message to.</span></span></param>
        <param name="m"><span data-ttu-id="6dc4f-2936">リフレクションする Windows メッセージを表す <see cref="T:System.Windows.Forms.Message" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2936">A <see cref="T:System.Windows.Forms.Message" /> representing the Windows message to reflect.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2937">指定したメッセージを指定したハンドルにバインドされたコントロールにリフレクションします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2937">Reflects the specified message to the control that is bound to the specified handle.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-2938">メッセージがリフレクションされた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2938"><see langword="true" /> if the message was reflected; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2939"><xref:System.Windows.Forms.Control.ReflectMessage%2A> メソッドはインフラストラクチャメソッドであり、通常、コードから呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2939">The <xref:System.Windows.Forms.Control.ReflectMessage%2A> method is an infrastructure method and typically should not be called from your code.</span></span>  
  
 <span data-ttu-id="6dc4f-2940">`hWnd` パラメーターが有効なコントロールを表していない場合、<xref:System.Windows.Forms.Control.ReflectMessage%2A> メソッドは `false`を返します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2940">If the `hWnd` parameter does not represent a valid control, the <xref:System.Windows.Forms.Control.ReflectMessage%2A> method returns `false`.</span></span>  
  
 <span data-ttu-id="6dc4f-2941">Windows メッセージがトップレベルウィンドウに返されるため、<xref:System.Windows.Forms.Control.ReflectMessage%2A> メソッドを使用して、メッセージを送信したコントロールに応答メッセージを伝達します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2941">Because Windows messages are returned to the top-level window, the <xref:System.Windows.Forms.Control.ReflectMessage%2A> method is used to propagate the return message to the control that sent the message.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public virtual void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Refresh" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Refresh ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Refresh();" />
      <MemberSignature Language="F#" Value="abstract member Refresh : unit -&gt; unit&#xA;override this.Refresh : unit -&gt; unit" Usage="control.Refresh " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6dc4f-2942">強制的に、コントロールがクライアント領域を無効化し、直後にそのコントロール自体とその子コントロールを再描画するようにします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2942">Forces the control to invalidate its client area and immediately redraw itself and any child controls.</span></span></summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-2943">派生クラスで <see cref="M:System.Windows.Forms.Control.Refresh" /> をオーバーライドする場合は、コントロールとその子コントロールが無効になり、再描画されるように、基本クラスの <see cref="M:System.Windows.Forms.Control.Refresh" /> メソッドを必ず呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2943">When overriding <see cref="M:System.Windows.Forms.Control.Refresh" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.Refresh" /> method so the control and its child controls are invalidated and redrawn.</span></span></para></block>
        <altmember cref="M:System.Windows.Forms.Control.Update" />
        <altmember cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)" />
      </Docs>
    </Member>
    <Member MemberName="Region">
      <MemberSignature Language="C#" Value="public System.Drawing.Region Region { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Region Region" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Region" />
      <MemberSignature Language="VB.NET" Value="Public Property Region As Region" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Region ^ Region { System::Drawing::Region ^ get(); void set(System::Drawing::Region ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Region : System.Drawing.Region with get, set" Usage="System.Windows.Forms.Control.Region" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Region</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-2944">コントロールに関連付けられたウィンドウ領域を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2944">Gets or sets the window region associated with the control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-2945">コントロールに関連付けられたウィンドウ <see cref="T:System.Drawing.Region" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2945">The window <see cref="T:System.Drawing.Region" /> associated with the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2946">ウィンドウ領域は、オペレーティングシステムが描画を許可するウィンドウ内のピクセルのコレクションです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2946">The window region is a collection of pixels within the window where the operating system permits drawing.</span></span> <span data-ttu-id="6dc4f-2947">オペレーティングシステムには、ウィンドウ領域の外側にあるウィンドウの一部は表示されません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2947">The operating system does not display any portion of a window that lies outside of the window region.</span></span> <span data-ttu-id="6dc4f-2948">コントロールの領域の座標は、コントロールのクライアント領域ではなく、コントロールの左上隅を基準としています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2948">The coordinates of a control's region are relative to the upper-left corner of the control, not the client area of the control.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-2949">領域に含まれるピクセルのコレクションは、不連続にすることができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2949">The collection of pixels contained with the region can be noncontiguous.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2950">次のコード例は、丸いボタンを作成することによって <xref:System.Windows.Forms.Control.Region%2A> プロパティを使用する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2950">The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.Region%2A> property by creating a round button.</span></span> <span data-ttu-id="6dc4f-2951">この例を実行するには、`roundButton`という名前のボタンを含むフォームに次のコードを貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2951">To run the example, paste the following code in a form containing a button called `roundButton`.</span></span> <span data-ttu-id="6dc4f-2952">この例では、<xref:System.Windows.Forms.Control.Paint> イベントが、この例で定義されているイベントハンドラーに接続されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2952">This example requires that the <xref:System.Windows.Forms.Control.Paint> event is connected to the event handler defined in the example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.Region#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.Region/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.Control.Region#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.Region/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.Region#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.Region/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.ClientRectangle" />
        <altmember cref="P:System.Windows.Forms.Control.Bounds" />
      </Docs>
    </Member>
    <Member MemberName="RegionChanged">
      <MemberSignature Language="C#" Value="public event EventHandler RegionChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RegionChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.RegionChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RegionChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ RegionChanged;" />
      <MemberSignature Language="F#" Value="member this.RegionChanged : EventHandler " Usage="member this.RegionChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-2953"><see cref="P:System.Windows.Forms.Control.Region" /> プロパティの値が変化したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2953">Occurs when the value of the <see cref="P:System.Windows.Forms.Control.Region" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2954">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2954">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2955">このメンバーの使用例を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2955">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="6dc4f-2956">この例では、イベントハンドラーは、<xref:System.Windows.Forms.Control.RegionChanged> イベントの発生を報告します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2956">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.RegionChanged> event.</span></span> <span data-ttu-id="6dc4f-2957">このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2957">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="6dc4f-2958">複数のイベントまたは頻繁に発生するイベントについてレポートするには、<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> を <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> に置き換えるか、複数行 <xref:System.Windows.Forms.TextBox>にメッセージを追加することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2958">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="6dc4f-2959">コード例を実行するには、<xref:System.Windows.Forms.Button> や <xref:System.Windows.Forms.ComboBox>などの <xref:System.Windows.Forms.Control>から継承する型のインスタンスを含むプロジェクトに貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2959">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="6dc4f-2960">次に、インスタンスに `Control1` という名前を付け、イベントハンドラーが <xref:System.Windows.Forms.Control.RegionChanged> イベントに関連付けられていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2960">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.RegionChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#22](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#22)]
 [!code-vb[System.Windows.Forms.EventExamples#22](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderRightToLeft">
      <MemberSignature Language="C#" Value="protected internal bool RenderRightToLeft { get; }" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RenderRightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.RenderRightToLeft" />
      <MemberSignature Language="VB.NET" Value="Protected Friend ReadOnly Property RenderRightToLeft As Boolean" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property bool RenderRightToLeft { bool get(); };" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="member this.RenderRightToLeft : bool" Usage="System.Windows.Forms.Control.RenderRightToLeft" />
      <MemberSignature Language="C#" Value="protected bool RenderRightToLeft { get; }" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property RenderRightToLeft As Boolean" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool RenderRightToLeft { bool get(); };" FrameworkAlternate="netframework-1.1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.Obsolete("This property has been deprecated. Please use RightToLeft instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-2961">このプロパティは、互換性のために残されています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2961">This property is now obsolete.</span></span></summary>
        <value><span data-ttu-id="6dc4f-2962">コントロールが左から右から左へ表示される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2962"><see langword="true" /> if the control is rendered from right to left; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6dc4f-2963">既定では、 <see langword="false" />です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2963">The default is <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RescaleConstantsForDpi">
      <MemberSignature Language="C#" Value="protected virtual void RescaleConstantsForDpi (int deviceDpiOld, int deviceDpiNew);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RescaleConstantsForDpi(int32 deviceDpiOld, int32 deviceDpiNew) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RescaleConstantsForDpi(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RescaleConstantsForDpi (deviceDpiOld As Integer, deviceDpiNew As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void RescaleConstantsForDpi(int deviceDpiOld, int deviceDpiNew);" />
      <MemberSignature Language="F#" Value="abstract member RescaleConstantsForDpi : int * int -&gt; unit&#xA;override this.RescaleConstantsForDpi : int * int -&gt; unit" Usage="control.RescaleConstantsForDpi (deviceDpiOld, deviceDpiNew)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deviceDpiOld" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="deviceDpiNew" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="deviceDpiOld"><span data-ttu-id="6dc4f-2964">変更前の DPI 値。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2964">The DPI value prior to the change.</span></span></param>
        <param name="deviceDpiNew"><span data-ttu-id="6dc4f-2965">変更後の DPI 値。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2965">The DPI value after the change.</span></span></param>
        <summary><span data-ttu-id="6dc4f-2966">DPI の変更が発生したときに、コントロールの再スケーリングの定数を提供します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2966">Provides constants for rescaling the control when a DPI change occurs.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetBackColor">
      <MemberSignature Language="C#" Value="public virtual void ResetBackColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetBackColor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetBackColor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ResetBackColor ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ResetBackColor();" />
      <MemberSignature Language="F#" Value="abstract member ResetBackColor : unit -&gt; unit&#xA;override this.ResetBackColor : unit -&gt; unit" Usage="control.ResetBackColor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6dc4f-2967"><see cref="P:System.Windows.Forms.Control.BackColor" /> プロパティを既定値にリセットします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2967">Resets the <see cref="P:System.Windows.Forms.Control.BackColor" /> property to its default value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2968">このクラスでは、このメソッドは無効です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2968">This method is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetBindings">
      <MemberSignature Language="C#" Value="public void ResetBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetBindings" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetBindings ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetBindings();" />
      <MemberSignature Language="F#" Value="member this.ResetBindings : unit -&gt; unit" Usage="control.ResetBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6dc4f-2969"><see cref="T:System.Windows.Forms.BindingSource" /> にバインドされたコントロールに対し、リスト内のすべての項目を再度読み込んで表示値を更新するよう通知します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2969">Causes a control bound to the <see cref="T:System.Windows.Forms.BindingSource" /> to reread all the items in the list and refresh their displayed values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2970">このクラスでは、このメソッドは無効です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2970">This method is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.DataBindings" />
      </Docs>
    </Member>
    <Member MemberName="ResetCursor">
      <MemberSignature Language="C#" Value="public virtual void ResetCursor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetCursor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetCursor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ResetCursor ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ResetCursor();" />
      <MemberSignature Language="F#" Value="abstract member ResetCursor : unit -&gt; unit&#xA;override this.ResetCursor : unit -&gt; unit" Usage="control.ResetCursor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6dc4f-2971"><see cref="P:System.Windows.Forms.Control.Cursor" /> プロパティを既定値にリセットします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2971">Resets the <see cref="P:System.Windows.Forms.Control.Cursor" /> property to its default value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2972">このクラスでは、このメソッドは無効です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2972">This method is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetFont">
      <MemberSignature Language="C#" Value="public virtual void ResetFont ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetFont() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetFont" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ResetFont ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ResetFont();" />
      <MemberSignature Language="F#" Value="abstract member ResetFont : unit -&gt; unit&#xA;override this.ResetFont : unit -&gt; unit" Usage="control.ResetFont " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6dc4f-2973"><see cref="P:System.Windows.Forms.Control.Font" /> プロパティを既定値にリセットします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2973">Resets the <see cref="P:System.Windows.Forms.Control.Font" /> property to its default value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2974">このクラスでは、このメソッドは無効です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2974">This method is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetForeColor">
      <MemberSignature Language="C#" Value="public virtual void ResetForeColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetForeColor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ResetForeColor ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ResetForeColor();" />
      <MemberSignature Language="F#" Value="abstract member ResetForeColor : unit -&gt; unit&#xA;override this.ResetForeColor : unit -&gt; unit" Usage="control.ResetForeColor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6dc4f-2975"><see cref="P:System.Windows.Forms.Control.ForeColor" /> プロパティを既定値にリセットします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2975">Resets the <see cref="P:System.Windows.Forms.Control.ForeColor" /> property to its default value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2976">このクラスでは、このメソッドは無効です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2976">This method is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetImeMode">
      <MemberSignature Language="C#" Value="public void ResetImeMode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetImeMode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetImeMode" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetImeMode ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetImeMode();" />
      <MemberSignature Language="F#" Value="member this.ResetImeMode : unit -&gt; unit" Usage="control.ResetImeMode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6dc4f-2977"><see cref="P:System.Windows.Forms.Control.ImeMode" /> プロパティを既定値にリセットします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2977">Resets the <see cref="P:System.Windows.Forms.Control.ImeMode" /> property to its default value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2978">このクラスでは、このメソッドは無効です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2978">This method is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetMouseEventArgs">
      <MemberSignature Language="C#" Value="protected void ResetMouseEventArgs ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ResetMouseEventArgs() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetMouseEventArgs" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ResetMouseEventArgs ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ResetMouseEventArgs();" />
      <MemberSignature Language="F#" Value="member this.ResetMouseEventArgs : unit -&gt; unit" Usage="control.ResetMouseEventArgs " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6dc4f-2979"><see cref="E:System.Windows.Forms.Control.MouseLeave" /> イベントを処理するためのコントロールをリセットします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2979">Resets the control to handle the <see cref="E:System.Windows.Forms.Control.MouseLeave" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetRightToLeft">
      <MemberSignature Language="C#" Value="public virtual void ResetRightToLeft ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetRightToLeft() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetRightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ResetRightToLeft ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ResetRightToLeft();" />
      <MemberSignature Language="F#" Value="abstract member ResetRightToLeft : unit -&gt; unit&#xA;override this.ResetRightToLeft : unit -&gt; unit" Usage="control.ResetRightToLeft " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6dc4f-2980"><see cref="P:System.Windows.Forms.Control.RightToLeft" /> プロパティを既定値にリセットします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2980">Resets the <see cref="P:System.Windows.Forms.Control.RightToLeft" /> property to its default value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2981">このクラスでは、このメソッドは無効です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2981">This method is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetText">
      <MemberSignature Language="C#" Value="public virtual void ResetText ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetText() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetText" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ResetText ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ResetText();" />
      <MemberSignature Language="F#" Value="abstract member ResetText : unit -&gt; unit&#xA;override this.ResetText : unit -&gt; unit" Usage="control.ResetText " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6dc4f-2982"><see cref="P:System.Windows.Forms.Control.Text" /> プロパティを既定値 (<see cref="F:System.String.Empty" />) にリセットします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2982">Resets the <see cref="P:System.Windows.Forms.Control.Text" /> property to its default value (<see cref="F:System.String.Empty" />).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2983"><xref:System.Windows.Forms.Control> のデザイナーを作成するか、<xref:System.Windows.Forms.Control>を組み込んだ独自のコントロールを作成する場合は、通常、このメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2983">You typically use this method if you are either creating a designer for the <xref:System.Windows.Forms.Control> or creating your own control incorporating the <xref:System.Windows.Forms.Control>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Text" />
      </Docs>
    </Member>
    <Member MemberName="Resize">
      <MemberSignature Language="C#" Value="public event EventHandler Resize;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Resize" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Resize" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Resize As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Resize;" />
      <MemberSignature Language="F#" Value="member this.Resize : EventHandler " Usage="member this.Resize : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-2984">コントロールのサイズが変更されると発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2984">Occurs when the control is resized.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2985">サイズ変更されたコントロールの <xref:System.Windows.Forms.Control.Size%2A> を確認するには、登録された <xref:System.Windows.Forms.ControlEventHandler> メソッドの `sender` パラメーターを <xref:System.Windows.Forms.Control> にキャストし、その <xref:System.Windows.Forms.Control.Size%2A> プロパティを取得します (または <xref:System.Windows.Forms.Control.Height%2A> プロパティと <xref:System.Windows.Forms.Control.Width%2A> プロパティを個別に取得します)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2985">To determine the <xref:System.Windows.Forms.Control.Size%2A> of the resized control, you can cast the `sender` parameter of the registered <xref:System.Windows.Forms.ControlEventHandler> method  to a <xref:System.Windows.Forms.Control> and get its <xref:System.Windows.Forms.Control.Size%2A> property (or <xref:System.Windows.Forms.Control.Height%2A> and <xref:System.Windows.Forms.Control.Width%2A> properties individually).</span></span>  
  
 <span data-ttu-id="6dc4f-2986">カスタムレイアウトを処理するには、Resize イベントではなく、<xref:System.Windows.Forms.Control.Layout> イベントを使用します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2986">To handle custom layouts, use the <xref:System.Windows.Forms.Control.Layout> event instead of the Resize event.</span></span> <span data-ttu-id="6dc4f-2987"><xref:System.Windows.Forms.Control.Layout> イベントは、<xref:System.Windows.Forms.Control.Resize> イベントに応答して発生しますが、コントロールのレイアウトに影響を与える他の変更に応答して発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2987">The <xref:System.Windows.Forms.Control.Layout> event is raised in response to a <xref:System.Windows.Forms.Control.Resize> event, but also in response to other changes that affect the layout of the control.</span></span>  
  
 <span data-ttu-id="6dc4f-2988">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2988">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-2989">次のコード例では、<xref:System.Windows.Forms.Form>の <xref:System.Windows.Forms.Control.Resize> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2989">The following code example handles the <xref:System.Windows.Forms.Control.Resize> event of a <xref:System.Windows.Forms.Form>.</span></span> <span data-ttu-id="6dc4f-2990">フォームのサイズが変更されると、イベントハンドラーによってフォームが正方形のままであることが保証されます (<xref:System.Windows.Forms.Control.Height%2A> と <xref:System.Windows.Forms.Control.Width%2A> は同じ)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2990">When the form is resized, the event handler ensures that the form stays square (its <xref:System.Windows.Forms.Control.Height%2A> and <xref:System.Windows.Forms.Control.Width%2A> remain equal).</span></span> <span data-ttu-id="6dc4f-2991">この例を実行するには、を確認し、このイベント処理メソッドをフォームの <xref:System.Windows.Forms.Control.Resize> イベントに関連付けます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2991">To run this example, make sure and associate this event-handling method with the form's <xref:System.Windows.Forms.Control.Resize> event.</span></span>  
  
 [!code-cpp[WinForms.Control.Resize#1](~/samples/snippets/cpp/VS_Snippets_Winforms/WinForms.Control.Resize/CPP/form1.cpp#1)]
 [!code-csharp[WinForms.Control.Resize#1](~/samples/snippets/csharp/VS_Snippets_Winforms/WinForms.Control.Resize/CS/form1.cs#1)]
 [!code-vb[WinForms.Control.Resize#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/WinForms.Control.Resize/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Size" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="ResizeRedraw">
      <MemberSignature Language="C#" Value="protected bool ResizeRedraw { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ResizeRedraw" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ResizeRedraw" />
      <MemberSignature Language="VB.NET" Value="Protected Property ResizeRedraw As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool ResizeRedraw { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ResizeRedraw : bool with get, set" Usage="System.Windows.Forms.Control.ResizeRedraw" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-2992">サイズが変更されたときに、コントロールがコントロール自体を再描画するかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2992">Gets or sets a value indicating whether the control redraws itself when resized.</span></span></summary>
        <value><span data-ttu-id="6dc4f-2993">サイズが変更されるとコントロールがコントロール自体を再描画する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2993"><see langword="true" /> if the control redraws itself when resized; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2994"><xref:System.Windows.Forms.Control.ResizeRedraw%2A> プロパティ値は、<xref:System.Windows.Forms.ControlStyles.ResizeRedraw?displayProperty=nameWithType> 値をパラメーターとして渡すときの、<xref:System.Windows.Forms.Control.GetStyle%2A> メソッドの戻り値と同じです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2994">The <xref:System.Windows.Forms.Control.ResizeRedraw%2A> property value is equivalent to the return value of the <xref:System.Windows.Forms.Control.GetStyle%2A> method when passing in the <xref:System.Windows.Forms.ControlStyles.ResizeRedraw?displayProperty=nameWithType> value as a parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.GetStyle(System.Windows.Forms.ControlStyles)" />
        <altmember cref="M:System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)" />
        <altmember cref="F:System.Windows.Forms.ControlStyles.ResizeRedraw" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ResumeLayout">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6dc4f-2995">通常のレイアウト ロジックを再開します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2995">Resumes the usual layout logic.</span></span></summary>
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
      </Docs>
    </MemberGroup>
    <Member MemberName="ResumeLayout">
      <MemberSignature Language="C#" Value="public void ResumeLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResumeLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResumeLayout" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResumeLayout ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResumeLayout();" />
      <MemberSignature Language="F#" Value="member this.ResumeLayout : unit -&gt; unit" Usage="control.ResumeLayout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6dc4f-2996">通常のレイアウト ロジックを再開します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2996">Resumes usual layout logic.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-2997">保留中のレイアウト要求がある場合は、<xref:System.Windows.Forms.Control.ResumeLayout%2A> メソッドを呼び出すと、強制的にレイアウトが直ちに行われます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2997">Calling the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method forces an immediate layout if there are any pending layout requests.</span></span>  
  
 <span data-ttu-id="6dc4f-2998"><xref:System.Windows.Forms.Control.SuspendLayout%2A> メソッドと <xref:System.Windows.Forms.Control.ResumeLayout%2A> メソッドは、コントロールの複数の属性を調整するときに、複数の <xref:System.Windows.Forms.Control.Layout> イベントを抑制するために一緒に使用されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2998">The <xref:System.Windows.Forms.Control.SuspendLayout%2A> and <xref:System.Windows.Forms.Control.ResumeLayout%2A> methods are used in tandem to suppress multiple <xref:System.Windows.Forms.Control.Layout> events while you adjust multiple attributes of the control.</span></span> <span data-ttu-id="6dc4f-2999">たとえば、通常は <xref:System.Windows.Forms.Control.SuspendLayout%2A> メソッドを呼び出した後、コントロールの <xref:System.Windows.Forms.Control.Size%2A>、<xref:System.Windows.Forms.Control.Location%2A>、<xref:System.Windows.Forms.Control.Anchor%2A>、または <xref:System.Windows.Forms.Control.Dock%2A> の各プロパティを設定してから、<xref:System.Windows.Forms.Control.ResumeLayout%2A> メソッドを呼び出して変更を有効にします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-2999">For example, you would typically call the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method, then set the <xref:System.Windows.Forms.Control.Size%2A>, <xref:System.Windows.Forms.Control.Location%2A>, <xref:System.Windows.Forms.Control.Anchor%2A>, or <xref:System.Windows.Forms.Control.Dock%2A> properties of the control, and then call the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method to enable the changes to take effect.</span></span>  
  
 <span data-ttu-id="6dc4f-3000"><xref:System.Windows.Forms.Control.ResumeLayout%2A> を正常に呼び出すには、保留中の <xref:System.Windows.Forms.Control.SuspendLayout%2A> 呼び出しがない必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3000">There must be no pending calls to <xref:System.Windows.Forms.Control.SuspendLayout%2A> for <xref:System.Windows.Forms.Control.ResumeLayout%2A> to be successfully called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-3001">次のコード例では、フォームに2つのボタンを追加します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3001">The following code example adds two buttons to a form.</span></span> <span data-ttu-id="6dc4f-3002">この例では、<xref:System.Windows.Forms.Control.SuspendLayout%2A> メソッドと <xref:System.Windows.Forms.Control.ResumeLayout%2A> メソッドを使用して、ボタンの追加をトランザクションします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3002">The example transactions the addition of the buttons by using the <xref:System.Windows.Forms.Control.SuspendLayout%2A> and <xref:System.Windows.Forms.Control.ResumeLayout%2A> methods.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Members2#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CPP/controlmembers2.cpp#2)]
 [!code-csharp[Windows.Forms.Control Members2#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CS/controlmembers2.cs#2)]
 [!code-vb[Windows.Forms.Control Members2#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members2/VB/controlmembers2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
      </Docs>
    </Member>
    <Member MemberName="ResumeLayout">
      <MemberSignature Language="C#" Value="public void ResumeLayout (bool performLayout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResumeLayout(bool performLayout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResumeLayout(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResumeLayout (performLayout As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResumeLayout(bool performLayout);" />
      <MemberSignature Language="F#" Value="member this.ResumeLayout : bool -&gt; unit" Usage="control.ResumeLayout performLayout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="performLayout" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="performLayout"><span data-ttu-id="6dc4f-3003">保留中のレイアウトの要求を実行する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3003"><see langword="true" /> to execute pending layout requests; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="6dc4f-3004">通常のレイアウト ロジックを再開します。オプションで、保留中のレイアウト要求のレイアウトを強制的に即時実行します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3004">Resumes usual layout logic, optionally forcing an immediate layout of pending layout requests.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3005">保留中のレイアウト要求がある場合は、<xref:System.Windows.Forms.Control.ResumeLayout%2A> メソッドを呼び出すと、強制的にレイアウトが直ちに行われます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3005">Calling the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method forces an immediate layout if there are any pending layout requests.</span></span> <span data-ttu-id="6dc4f-3006">`performLayout` パラメーターが `true`に設定されている場合、保留中のレイアウト要求があると、すぐにレイアウトが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3006">When the `performLayout` parameter is set to `true`, an immediate layout occurs if there are any pending layout requests.</span></span>  
  
 <span data-ttu-id="6dc4f-3007"><xref:System.Windows.Forms.Control.SuspendLayout%2A> メソッドと <xref:System.Windows.Forms.Control.ResumeLayout%2A> メソッドは、コントロールの複数の属性を調整するときに、複数の <xref:System.Windows.Forms.Control.Layout> イベントを抑制するために一緒に使用されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3007">The <xref:System.Windows.Forms.Control.SuspendLayout%2A> and <xref:System.Windows.Forms.Control.ResumeLayout%2A> methods are used in tandem to suppress multiple <xref:System.Windows.Forms.Control.Layout> events while you adjust multiple attributes of the control.</span></span> <span data-ttu-id="6dc4f-3008">たとえば、通常は <xref:System.Windows.Forms.Control.SuspendLayout%2A> メソッドを呼び出した後、コントロールの <xref:System.Windows.Forms.Control.Size%2A>、<xref:System.Windows.Forms.Control.Location%2A>、<xref:System.Windows.Forms.Control.Anchor%2A>、または <xref:System.Windows.Forms.Control.Dock%2A> の各プロパティを設定してから、<xref:System.Windows.Forms.Control.ResumeLayout%2A> メソッドを呼び出して変更を有効にします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3008">For example, you would typically call the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method, then set the <xref:System.Windows.Forms.Control.Size%2A>, <xref:System.Windows.Forms.Control.Location%2A>, <xref:System.Windows.Forms.Control.Anchor%2A>, or <xref:System.Windows.Forms.Control.Dock%2A> properties of the control, and then call the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method to enable the changes to take effect.</span></span>  
  
 <span data-ttu-id="6dc4f-3009"><xref:System.Windows.Forms.Control.ResumeLayout%2A> を正常に呼び出すには、保留中の <xref:System.Windows.Forms.Control.SuspendLayout%2A> 呼び出しがない必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3009">There must be no pending calls to <xref:System.Windows.Forms.Control.SuspendLayout%2A> for <xref:System.Windows.Forms.Control.ResumeLayout%2A> to be successfully called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-3010">親コントロールに複数のコントロールを追加する場合は、追加するコントロールを初期化する前に、<xref:System.Windows.Forms.Control.SuspendLayout%2A> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3010">When adding several controls to a parent control, it is recommended that you call the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method before initializing the controls to be added.</span></span> <span data-ttu-id="6dc4f-3011">コントロールを親コントロールに追加した後、<xref:System.Windows.Forms.Control.ResumeLayout%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3011">After adding the controls to the parent control, call the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method.</span></span> <span data-ttu-id="6dc4f-3012">これにより、多くのコントロールでアプリケーションのパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3012">This will increase the performance of applications with many controls.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public int Right { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Right" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Right" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Right As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Right { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Right : int" Usage="System.Windows.Forms.Control.Right" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-3013">コントロールの右端とコンテナーのクライアント領域の左端の間の距離をピクセルで取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3013">Gets the distance, in pixels, between the right edge of the control and the left edge of its container's client area.</span></span></summary>
        <value><span data-ttu-id="6dc4f-3014"><see cref="T:System.Int32" /> は、コントロールの右端とコンテナーのクライアント領域の左端の間の距離 (ピクセル単位) を示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3014">An <see cref="T:System.Int32" /> representing the distance, in pixels, between the right edge of the control and the left edge of its container's client area.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3015"><xref:System.Windows.Forms.Control.Right%2A> プロパティの値は、<xref:System.Windows.Forms.Control.Left%2A> プロパティ値と <xref:System.Windows.Forms.Control.Width%2A> プロパティ値の合計と同じです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3015">The value of the <xref:System.Windows.Forms.Control.Right%2A> property is equal to the sum of the <xref:System.Windows.Forms.Control.Left%2A> property value and the <xref:System.Windows.Forms.Control.Width%2A> property value.</span></span>  
  
 <span data-ttu-id="6dc4f-3016"><xref:System.Windows.Forms.Control.Right%2A> プロパティは読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3016">The <xref:System.Windows.Forms.Control.Right%2A> property is read-only.</span></span> <span data-ttu-id="6dc4f-3017">このプロパティ値を変更するには、<xref:System.Windows.Forms.Control.Left%2A> または <xref:System.Windows.Forms.Control.Width%2A> プロパティの値を変更するか、<xref:System.Windows.Forms.Control.SetBounds%2A>、<xref:System.Windows.Forms.Control.SetBoundsCore%2A>、<xref:System.Windows.Forms.Control.UpdateBounds%2A>、または <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> メソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3017">You can change this property value indirectly by changing the value of the <xref:System.Windows.Forms.Control.Left%2A> or <xref:System.Windows.Forms.Control.Width%2A> properties or calling the <xref:System.Windows.Forms.Control.SetBounds%2A>, <xref:System.Windows.Forms.Control.SetBoundsCore%2A>, <xref:System.Windows.Forms.Control.UpdateBounds%2A>, or <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-3018">次のコード例では、フォームに3つの <xref:System.Windows.Forms.Button> コントロールを作成し、さまざまなサイズ関連のプロパティと場所に関連するプロパティを使用して、サイズと位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3018">The following code example creates three <xref:System.Windows.Forms.Button> controls on a form and sets their size and location by using the various size-related and location-related properties.</span></span> <span data-ttu-id="6dc4f-3019">この例では、幅と高さが300ピクセル以上の <xref:System.Windows.Forms.Form> が必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3019">This example requires that you have a <xref:System.Windows.Forms.Form> that has a width and height of at least 300 pixels.</span></span>  
  
 [!code-cpp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CPP/controlsizelocation.cpp#1)]
 [!code-csharp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CS/controlsizelocation.cs#1)]
 [!code-vb[Windows.Forms.Control SizeLocation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/VB/controlsizelocation.vb#1)]  
  
 [!code-cpp[Control.KeyUp#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyUp/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyUp#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyUp/CS/form1.cs#1)]
 [!code-vb[Control.KeyUp#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyUp/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Right" />
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.RightToLeft RightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RightToLeft RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.RightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RightToLeft As RightToLeft" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::RightToLeft RightToLeft { System::Windows::Forms::RightToLeft get(); void set(System::Windows::Forms::RightToLeft value); };" />
      <MemberSignature Language="F#" Value="member this.RightToLeft : System.Windows.Forms.RightToLeft with get, set" Usage="System.Windows.Forms.Control.RightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RightToLeft</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-3020">コントロールの要素が、右から左へ表示されるフォントを使用するロケールをサポートするように配置されているかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3020">Gets or sets a value indicating whether control's elements are aligned to support locales using right-to-left fonts.</span></span></summary>
        <value><span data-ttu-id="6dc4f-3021"><see cref="T:System.Windows.Forms.RightToLeft" /> 値のいずれか 1 つです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3021">One of the <see cref="T:System.Windows.Forms.RightToLeft" /> values.</span></span> <span data-ttu-id="6dc4f-3022">既定では、 <see cref="F:System.Windows.Forms.RightToLeft.Inherit" />です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3022">The default is <see cref="F:System.Windows.Forms.RightToLeft.Inherit" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3023"><xref:System.Windows.Forms.Control.RightToLeft%2A> プロパティはアンビエントプロパティです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3023">The <xref:System.Windows.Forms.Control.RightToLeft%2A> property is an ambient property.</span></span> <span data-ttu-id="6dc4f-3024">アンビエントプロパティは、設定されていない場合、親コントロールから取得されるコントロールプロパティです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3024">An ambient property is a control property that, if not set, is retrieved from the parent control.</span></span> <span data-ttu-id="6dc4f-3025">たとえば、<xref:System.Windows.Forms.Button> は、既定では親 <xref:System.Windows.Forms.Form> と同じ <xref:System.Windows.Forms.Control.BackColor%2A> を持ちます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3025">For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default.</span></span> <span data-ttu-id="6dc4f-3026">アンビエントプロパティの詳細については、「<xref:System.Windows.Forms.AmbientProperties> クラス」または「<xref:System.Windows.Forms.Control> クラスの概要」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3026">For more information about ambient properties, see the <xref:System.Windows.Forms.AmbientProperties> class or the <xref:System.Windows.Forms.Control> class overview.</span></span>  
  
 <span data-ttu-id="6dc4f-3027"><xref:System.Windows.Forms.Control.RightToLeft%2A> プロパティは、ヘブライ語やアラビア語など、言語が右から左に記述される国際対応アプリケーションに使用されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3027">The <xref:System.Windows.Forms.Control.RightToLeft%2A> property is used for international applications where the language is written from right to left, such as Hebrew or Arabic.</span></span> <span data-ttu-id="6dc4f-3028">このプロパティが <xref:System.Windows.Forms.RightToLeft.Yes?displayProperty=nameWithType>に設定されている場合、テキストを含むコントロール要素は右から左に表示されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3028">When this property is set to <xref:System.Windows.Forms.RightToLeft.Yes?displayProperty=nameWithType>, control elements that include text are displayed from right to left.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-3029">実行時に <xref:System.Windows.Forms.Control.RightToLeft%2A> プロパティの値が変更された場合、書式設定のない生のテキストのみが保持されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3029">If the value of the <xref:System.Windows.Forms.Control.RightToLeft%2A> property is changed at run time, only raw text without formatting is preserved.</span></span>  
  
 <span data-ttu-id="6dc4f-3030">次の例では、<xref:System.Windows.Forms.RightToLeft.Yes?displayProperty=nameWithType> の <xref:System.Windows.Forms.Control.RightToLeft%2A> プロパティ値によってコントロール要素がどのように影響を受けるかを示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3030">The following are a few examples of how control elements are affected by the <xref:System.Windows.Forms.Control.RightToLeft%2A> property value of <xref:System.Windows.Forms.RightToLeft.Yes?displayProperty=nameWithType> :</span></span>  
  
-   <span data-ttu-id="6dc4f-3031">垂直スクロールバーは、スクロール可能なコントロールの右側ではなく左側に表示されます (たとえば、<xref:System.Windows.Forms.Form>、<xref:System.Windows.Forms.Panel>、複数行 <xref:System.Windows.Forms.TextBox>、<xref:System.Windows.Forms.RichTextBox>)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3031">Vertical scroll bars are displayed on the left side rather than right side of scrollable controls (for example, <xref:System.Windows.Forms.Form>, <xref:System.Windows.Forms.Panel>, multiline <xref:System.Windows.Forms.TextBox>, and <xref:System.Windows.Forms.RichTextBox>).</span></span>  
  
-   <span data-ttu-id="6dc4f-3032">水平スクロールバーは、スクロールボックス (つまみ) を右揃えで開始します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3032">Horizontal scroll bars start with the scroll box (thumb) right-aligned.</span></span>  
  
-   <span data-ttu-id="6dc4f-3033">`CheckAlign` プロパティによって制御されるチェックボックス要素の配置は、<xref:System.Windows.Forms.CheckBox> コントロールと <xref:System.Windows.Forms.RadioButton> コントロールでは反転されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3033">The check box element alignment, controlled by the `CheckAlign` property, is reversed for <xref:System.Windows.Forms.CheckBox> and <xref:System.Windows.Forms.RadioButton> controls.</span></span>  
  
-   <span data-ttu-id="6dc4f-3034">リストボックス、コンボボックス、およびアップダウンコントロール内の項目は、右にアラインされます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3034">Items in list box, combo box, and up-down controls are right aligned.</span></span>  
  
-   <span data-ttu-id="6dc4f-3035">上矢印ボタンと下矢印ボタンは <xref:System.Windows.Forms.NumericUpDown> および <xref:System.Windows.Forms.DomainUpDown> コントロールに対して左揃えになっています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3035">Up and down buttons are left-aligned on <xref:System.Windows.Forms.NumericUpDown> and <xref:System.Windows.Forms.DomainUpDown> controls.</span></span>  
  
-   <span data-ttu-id="6dc4f-3036">メニュー (<xref:System.Windows.Forms.MainMenu>、<xref:System.Windows.Forms.MenuItem>、および <xref:System.Windows.Forms.ContextMenu>) は、右詰めで表示されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3036">Menus (<xref:System.Windows.Forms.MainMenu>, <xref:System.Windows.Forms.MenuItem>, and <xref:System.Windows.Forms.ContextMenu>) are displayed right-aligned.</span></span>  
  
-   <span data-ttu-id="6dc4f-3037"><xref:System.Windows.Forms.ToolBar> コントロールのツールバーボタンや <xref:System.Windows.Forms.ToolBarButton> 上のテキストの配置は、<xref:System.Windows.Forms.Control.RightToLeft%2A> プロパティの影響を受けません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3037">The alignment of toolbar buttons on a <xref:System.Windows.Forms.ToolBar> control or the alignment of text on a <xref:System.Windows.Forms.ToolBarButton> is not affected by the <xref:System.Windows.Forms.Control.RightToLeft%2A> property.</span></span>  
  
-   <span data-ttu-id="6dc4f-3038"><xref:System.Windows.Forms.AxHost> は右から左への配置をサポートします。ただし、ActiveX コントロールへの影響は、コントロールの作成者が、右から左へ表示するためのサポートを実装した範囲によって異なります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3038"><xref:System.Windows.Forms.AxHost> supports right-to-left alignment; however, the effect on an ActiveX control depends on the extent to which the control author implemented support for right-to-left display.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="6dc4f-3039">代入された値が、<see cref="T:System.Windows.Forms.RightToLeft" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3039">The assigned value is not one of the <see cref="T:System.Windows.Forms.RightToLeft" /> values.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-3040">派生クラスの <see cref="P:System.Windows.Forms.Control.RightToLeft" /> プロパティをオーバーライドする場合は、基本クラスの <see cref="P:System.Windows.Forms.Control.RightToLeft" /> プロパティを使用して、基本実装を拡張します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3040">When overriding the <see cref="P:System.Windows.Forms.Control.RightToLeft" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.RightToLeft" /> property to extend the base implementation.</span></span> <span data-ttu-id="6dc4f-3041">それ以外の場合は、すべての実装を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3041">Otherwise, you must provide all the implementation.</span></span> <span data-ttu-id="6dc4f-3042"><see cref="P:System.Windows.Forms.Control.RightToLeft" /> プロパティの <see langword="get" /> と <see langword="set" /> の両方のアクセサーをオーバーライドする必要はありません。必要に応じて、オーバーライドできるのは1つだけです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3042">You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.RightToLeft" /> property; you can override only one if needed.</span></span></para></block>
        <altmember cref="T:System.Windows.Forms.RightToLeft" />
        <altmember cref="T:System.Windows.Forms.HorizontalAlignment" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)" />
      </Docs>
    </Member>
    <Member MemberName="RightToLeftChanged">
      <MemberSignature Language="C#" Value="public event EventHandler RightToLeftChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RightToLeftChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.RightToLeftChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RightToLeftChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ RightToLeftChanged;" />
      <MemberSignature Language="F#" Value="member this.RightToLeftChanged : EventHandler " Usage="member this.RightToLeftChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-3043"><see cref="P:System.Windows.Forms.Control.RightToLeft" /> プロパティの値が変化すると発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3043">Occurs when the <see cref="P:System.Windows.Forms.Control.RightToLeft" /> property value changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3044">このイベントは、プログラムによる変更またはユーザーの操作によって <xref:System.Windows.Forms.Control.RightToLeft%2A> プロパティが変更された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3044">This event is raised if the <xref:System.Windows.Forms.Control.RightToLeft%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="6dc4f-3045">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3045">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-3046">次のコード例は、<xref:System.Windows.Forms.Control.Text%2A> プロパティの値が変更されたときに実行されるイベントハンドラーです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3046">The following code example is an event handler that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="6dc4f-3047"><xref:System.Windows.Forms.Control> クラスには、対応する*propertyname*値が変更されたときに発生する名前パターン*PropertyName*`Changed` を持ついくつかのメソッドがあります (*propertyname*は対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3047">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern *PropertyName*`Changed` that are raised when the corresponding *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="6dc4f-3048">次のコード例では、通貨データを表示する <xref:System.Windows.Forms.TextBox> の <xref:System.Windows.Forms.Control.ForeColor%2A> を変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3048">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data.</span></span> <span data-ttu-id="6dc4f-3049">この例では、テキストを10進数に変換し、数値が負の場合は <xref:System.Windows.Forms.Control.ForeColor%2A> を <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> に変更し、数値が正の値の場合は <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> に変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3049">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="6dc4f-3050">この例では、<xref:System.Windows.Forms.TextBox>を含む <xref:System.Windows.Forms.Form> が必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3050">This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CPP/propertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CS/propertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/VB/propertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.RightToLeft" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RtlTranslateAlignment">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6dc4f-3051">右から左に読むテキストをサポートするため、現在のアラインメントを適切なものに変換します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3051">Converts the current alignment to the appropriate alignment to support right-to-left text.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RtlTranslateAlignment">
      <MemberSignature Language="C#" Value="protected System.Drawing.ContentAlignment RtlTranslateAlignment (System.Drawing.ContentAlignment align);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Drawing.ContentAlignment RtlTranslateAlignment(valuetype System.Drawing.ContentAlignment align) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Drawing.ContentAlignment)" />
      <MemberSignature Language="VB.NET" Value="Protected Function RtlTranslateAlignment (align As ContentAlignment) As ContentAlignment" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Drawing::ContentAlignment RtlTranslateAlignment(System::Drawing::ContentAlignment align);" />
      <MemberSignature Language="F#" Value="member this.RtlTranslateAlignment : System.Drawing.ContentAlignment -&gt; System.Drawing.ContentAlignment" Usage="control.RtlTranslateAlignment align" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.ContentAlignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="align" Type="System.Drawing.ContentAlignment" />
      </Parameters>
      <Docs>
        <param name="align"><span data-ttu-id="6dc4f-3052"><see cref="T:System.Drawing.ContentAlignment" /> 値のいずれか 1 つです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3052">One of the <see cref="T:System.Drawing.ContentAlignment" /> values.</span></span></param>
        <summary><span data-ttu-id="6dc4f-3053">指定した <see cref="T:System.Drawing.ContentAlignment" /> を適切な <see cref="T:System.Drawing.ContentAlignment" /> に変換し、テキストを右から左に表示できるようにします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3053">Converts the specified <see cref="T:System.Drawing.ContentAlignment" /> to the appropriate <see cref="T:System.Drawing.ContentAlignment" /> to support right-to-left text.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-3054"><see cref="T:System.Drawing.ContentAlignment" /> 値のいずれか 1 つです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3054">One of the <see cref="T:System.Drawing.ContentAlignment" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3055"><xref:System.Windows.Forms.RightToLeft> の <xref:System.Windows.Forms.Control.RightToLeft%2A> プロパティが `No`に設定されている場合、戻り値は渡された `align` パラメーターと同じになります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3055">If the <xref:System.Windows.Forms.Control.RightToLeft%2A> property of <xref:System.Windows.Forms.RightToLeft> is set to `No`, the return value is equal to the `align` parameter passed in.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.RightToLeft" />
        <altmember cref="T:System.Drawing.ContentAlignment" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)" />
      </Docs>
    </Member>
    <Member MemberName="RtlTranslateAlignment">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.HorizontalAlignment RtlTranslateAlignment (System.Windows.Forms.HorizontalAlignment align);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Windows.Forms.HorizontalAlignment RtlTranslateAlignment(valuetype System.Windows.Forms.HorizontalAlignment align) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.HorizontalAlignment)" />
      <MemberSignature Language="VB.NET" Value="Protected Function RtlTranslateAlignment (align As HorizontalAlignment) As HorizontalAlignment" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Windows::Forms::HorizontalAlignment RtlTranslateAlignment(System::Windows::Forms::HorizontalAlignment align);" />
      <MemberSignature Language="F#" Value="member this.RtlTranslateAlignment : System.Windows.Forms.HorizontalAlignment -&gt; System.Windows.Forms.HorizontalAlignment" Usage="control.RtlTranslateAlignment align" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="align" Type="System.Windows.Forms.HorizontalAlignment" />
      </Parameters>
      <Docs>
        <param name="align"><span data-ttu-id="6dc4f-3056"><see cref="T:System.Windows.Forms.HorizontalAlignment" /> 値のいずれか 1 つです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3056">One of the <see cref="T:System.Windows.Forms.HorizontalAlignment" /> values.</span></span></param>
        <summary><span data-ttu-id="6dc4f-3057">指定した <see cref="T:System.Windows.Forms.HorizontalAlignment" /> を適切な <see cref="T:System.Windows.Forms.HorizontalAlignment" /> に変換し、テキストを右から左に表示できるようにします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3057">Converts the specified <see cref="T:System.Windows.Forms.HorizontalAlignment" /> to the appropriate <see cref="T:System.Windows.Forms.HorizontalAlignment" /> to support right-to-left text.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-3058"><see cref="T:System.Windows.Forms.HorizontalAlignment" /> 値のいずれか 1 つです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3058">One of the <see cref="T:System.Windows.Forms.HorizontalAlignment" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3059"><xref:System.Windows.Forms.RightToLeft> の <xref:System.Windows.Forms.Control.RightToLeft%2A> プロパティが `No`に設定されている場合、戻り値は渡された `align` パラメーターと同じになります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3059">If the <xref:System.Windows.Forms.Control.RightToLeft%2A> property of <xref:System.Windows.Forms.RightToLeft> is set to `No`, the return value is equal to the `align` parameter passed in.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.RightToLeft" />
        <altmember cref="T:System.Windows.Forms.HorizontalAlignment" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)" />
      </Docs>
    </Member>
    <Member MemberName="RtlTranslateAlignment">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.LeftRightAlignment RtlTranslateAlignment (System.Windows.Forms.LeftRightAlignment align);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Windows.Forms.LeftRightAlignment RtlTranslateAlignment(valuetype System.Windows.Forms.LeftRightAlignment align) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.LeftRightAlignment)" />
      <MemberSignature Language="VB.NET" Value="Protected Function RtlTranslateAlignment (align As LeftRightAlignment) As LeftRightAlignment" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Windows::Forms::LeftRightAlignment RtlTranslateAlignment(System::Windows::Forms::LeftRightAlignment align);" />
      <MemberSignature Language="F#" Value="member this.RtlTranslateAlignment : System.Windows.Forms.LeftRightAlignment -&gt; System.Windows.Forms.LeftRightAlignment" Usage="control.RtlTranslateAlignment align" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LeftRightAlignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="align" Type="System.Windows.Forms.LeftRightAlignment" />
      </Parameters>
      <Docs>
        <param name="align"><span data-ttu-id="6dc4f-3060"><see cref="T:System.Windows.Forms.LeftRightAlignment" /> 値のいずれか 1 つです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3060">One of the <see cref="T:System.Windows.Forms.LeftRightAlignment" /> values.</span></span></param>
        <summary><span data-ttu-id="6dc4f-3061">指定した <see cref="T:System.Windows.Forms.LeftRightAlignment" /> を適切な <see cref="T:System.Windows.Forms.LeftRightAlignment" /> に変換し、テキストを右から左に表示できるようにします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3061">Converts the specified <see cref="T:System.Windows.Forms.LeftRightAlignment" /> to the appropriate <see cref="T:System.Windows.Forms.LeftRightAlignment" /> to support right-to-left text.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-3062"><see cref="T:System.Windows.Forms.LeftRightAlignment" /> 値のいずれか 1 つです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3062">One of the <see cref="T:System.Windows.Forms.LeftRightAlignment" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3063"><xref:System.Windows.Forms.RightToLeft> の <xref:System.Windows.Forms.Control.RightToLeft%2A> プロパティが `No`に設定されている場合、戻り値は渡された `align` パラメーターと同じになります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3063">If the <xref:System.Windows.Forms.Control.RightToLeft%2A> property of <xref:System.Windows.Forms.RightToLeft> is set to `No`, the return value is equal to the `align` parameter passed in.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.RightToLeft" />
        <altmember cref="T:System.Windows.Forms.LeftRightAlignment" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)" />
      </Docs>
    </Member>
    <Member MemberName="RtlTranslateContent">
      <MemberSignature Language="C#" Value="protected internal System.Drawing.ContentAlignment RtlTranslateContent (System.Drawing.ContentAlignment align);" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance valuetype System.Drawing.ContentAlignment RtlTranslateContent(valuetype System.Drawing.ContentAlignment align) cil managed" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function RtlTranslateContent (align As ContentAlignment) As ContentAlignment" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; System::Drawing::ContentAlignment RtlTranslateContent(System::Drawing::ContentAlignment align);" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="member this.RtlTranslateContent : System.Drawing.ContentAlignment -&gt; System.Drawing.ContentAlignment" Usage="control.RtlTranslateContent align" />
      <MemberSignature Language="C#" Value="protected System.Drawing.ContentAlignment RtlTranslateContent (System.Drawing.ContentAlignment align);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Drawing.ContentAlignment RtlTranslateContent(valuetype System.Drawing.ContentAlignment align) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Protected Function RtlTranslateContent (align As ContentAlignment) As ContentAlignment" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Drawing::ContentAlignment RtlTranslateContent(System::Drawing::ContentAlignment align);" FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.ContentAlignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="align" Type="System.Drawing.ContentAlignment" />
      </Parameters>
      <Docs>
        <param name="align"><span data-ttu-id="6dc4f-3064"><see cref="T:System.Drawing.ContentAlignment" /> 値のいずれか 1 つです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3064">One of the <see cref="T:System.Drawing.ContentAlignment" /> values.</span></span></param>
        <summary><span data-ttu-id="6dc4f-3065">指定した <see cref="T:System.Drawing.ContentAlignment" /> を適切な <see cref="T:System.Drawing.ContentAlignment" /> に変換し、テキストを右から左に表示できるようにします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3065">Converts the specified <see cref="T:System.Drawing.ContentAlignment" /> to the appropriate <see cref="T:System.Drawing.ContentAlignment" /> to support right-to-left text.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-3066"><see cref="T:System.Drawing.ContentAlignment" /> 値のいずれか 1 つです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3066">One of the <see cref="T:System.Drawing.ContentAlignment" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3067"><xref:System.Windows.Forms.RightToLeft> の <xref:System.Windows.Forms.Control.RightToLeft%2A> プロパティが `No`に設定されている場合、戻り値は渡された `align` パラメーターと同じになります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3067">If the <xref:System.Windows.Forms.Control.RightToLeft%2A> property of <xref:System.Windows.Forms.RightToLeft> is set to `No`, the return value is equal to the `align` parameter passed in.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.RightToLeft" />
        <altmember cref="T:System.Drawing.ContentAlignment" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)" />
      </Docs>
    </Member>
    <Member MemberName="RtlTranslateHorizontal">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.HorizontalAlignment RtlTranslateHorizontal (System.Windows.Forms.HorizontalAlignment align);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Windows.Forms.HorizontalAlignment RtlTranslateHorizontal(valuetype System.Windows.Forms.HorizontalAlignment align) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)" />
      <MemberSignature Language="VB.NET" Value="Protected Function RtlTranslateHorizontal (align As HorizontalAlignment) As HorizontalAlignment" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Windows::Forms::HorizontalAlignment RtlTranslateHorizontal(System::Windows::Forms::HorizontalAlignment align);" />
      <MemberSignature Language="F#" Value="member this.RtlTranslateHorizontal : System.Windows.Forms.HorizontalAlignment -&gt; System.Windows.Forms.HorizontalAlignment" Usage="control.RtlTranslateHorizontal align" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="align" Type="System.Windows.Forms.HorizontalAlignment" />
      </Parameters>
      <Docs>
        <param name="align"><span data-ttu-id="6dc4f-3068"><see cref="T:System.Windows.Forms.HorizontalAlignment" /> 値のいずれか 1 つです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3068">One of the <see cref="T:System.Windows.Forms.HorizontalAlignment" /> values.</span></span></param>
        <summary><span data-ttu-id="6dc4f-3069">指定した <see cref="T:System.Windows.Forms.HorizontalAlignment" /> を適切な <see cref="T:System.Windows.Forms.HorizontalAlignment" /> に変換し、テキストを右から左に表示できるようにします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3069">Converts the specified <see cref="T:System.Windows.Forms.HorizontalAlignment" /> to the appropriate <see cref="T:System.Windows.Forms.HorizontalAlignment" /> to support right-to-left text.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-3070"><see cref="T:System.Windows.Forms.HorizontalAlignment" /> 値のいずれか 1 つです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3070">One of the <see cref="T:System.Windows.Forms.HorizontalAlignment" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3071"><xref:System.Windows.Forms.RightToLeft> の <xref:System.Windows.Forms.Control.RightToLeft%2A> プロパティが `No`に設定されている場合、戻り値は渡された `align` パラメーターと同じになります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3071">If the <xref:System.Windows.Forms.Control.RightToLeft%2A> property of <xref:System.Windows.Forms.RightToLeft> is set to `No`, the return value is equal to the `align` parameter passed in.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.RightToLeft" />
        <altmember cref="T:System.Windows.Forms.HorizontalAlignment" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)" />
      </Docs>
    </Member>
    <Member MemberName="RtlTranslateLeftRight">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.LeftRightAlignment RtlTranslateLeftRight (System.Windows.Forms.LeftRightAlignment align);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Windows.Forms.LeftRightAlignment RtlTranslateLeftRight(valuetype System.Windows.Forms.LeftRightAlignment align) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)" />
      <MemberSignature Language="VB.NET" Value="Protected Function RtlTranslateLeftRight (align As LeftRightAlignment) As LeftRightAlignment" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Windows::Forms::LeftRightAlignment RtlTranslateLeftRight(System::Windows::Forms::LeftRightAlignment align);" />
      <MemberSignature Language="F#" Value="member this.RtlTranslateLeftRight : System.Windows.Forms.LeftRightAlignment -&gt; System.Windows.Forms.LeftRightAlignment" Usage="control.RtlTranslateLeftRight align" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LeftRightAlignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="align" Type="System.Windows.Forms.LeftRightAlignment" />
      </Parameters>
      <Docs>
        <param name="align"><span data-ttu-id="6dc4f-3072"><see cref="T:System.Windows.Forms.LeftRightAlignment" /> 値のいずれか 1 つです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3072">One of the <see cref="T:System.Windows.Forms.LeftRightAlignment" /> values.</span></span></param>
        <summary><span data-ttu-id="6dc4f-3073">指定した <see cref="T:System.Windows.Forms.LeftRightAlignment" /> を適切な <see cref="T:System.Windows.Forms.LeftRightAlignment" /> に変換し、テキストを右から左に表示できるようにします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3073">Converts the specified <see cref="T:System.Windows.Forms.LeftRightAlignment" /> to the appropriate <see cref="T:System.Windows.Forms.LeftRightAlignment" /> to support right-to-left text.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-3074"><see cref="T:System.Windows.Forms.LeftRightAlignment" /> 値のいずれか 1 つです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3074">One of the <see cref="T:System.Windows.Forms.LeftRightAlignment" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3075"><xref:System.Windows.Forms.RightToLeft> の <xref:System.Windows.Forms.Control.RightToLeft%2A> プロパティが `No`に設定されている場合、戻り値は渡された `align` パラメーターと同じになります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3075">If the <xref:System.Windows.Forms.Control.RightToLeft%2A> property of <xref:System.Windows.Forms.RightToLeft> is set to `No`, the return value is equal to the `align` parameter passed in.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.RightToLeft" />
        <altmember cref="T:System.Windows.Forms.LeftRightAlignment" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.HorizontalAlignment)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Scale">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6dc4f-3076">コントロールおよび子コントロールのスケールを設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3076">Scales the control and any child controls.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public void Scale (System.Drawing.SizeF factor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Scale(valuetype System.Drawing.SizeF factor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Scale(System.Drawing.SizeF)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Scale (factor As SizeF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Scale(System::Drawing::SizeF factor);" />
      <MemberSignature Language="F#" Value="member this.Scale : System.Drawing.SizeF -&gt; unit" Usage="control.Scale factor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factor" Type="System.Drawing.SizeF" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="factor"><span data-ttu-id="6dc4f-3077">水平および垂直方向の倍率を格納した <see cref="T:System.Drawing.SizeF" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3077">A <see cref="T:System.Drawing.SizeF" /> containing the horizontal and vertical scaling factors.</span></span></param>
        <summary><span data-ttu-id="6dc4f-3078">指定されたスケール ファクターによってコントロールおよびすべての子コントロールのスケールを設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3078">Scales the control and all child controls by the specified scaling factor.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3079"><xref:System.Windows.Forms.Control.Scale%2A> メソッドは、指定されたスケーリング `factor`によってコントロールをスケールします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3079">The <xref:System.Windows.Forms.Control.Scale%2A> method scales the control by the specified scaling `factor`.</span></span> <span data-ttu-id="6dc4f-3080">また、<xref:System.Windows.Forms.Control.ScaleChildren%2A> プロパティが `true`場合は、すべての子コントロールを再帰的にスケーリングします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3080">It also recursively scales all child controls if the <xref:System.Windows.Forms.Control.ScaleChildren%2A> property is `true`.</span></span> <span data-ttu-id="6dc4f-3081">内部的には、このメソッドは <xref:System.Windows.Forms.Control.ScaleControl%2A> を呼び出して各コントロールをスケーリングします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3081">Internally, this method calls <xref:System.Windows.Forms.Control.ScaleControl%2A> to scale each control.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.ScaleChildren" />
        <altmember cref="M:System.Windows.Forms.Control.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
        <altmember cref="M:System.Windows.Forms.Control.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public void Scale (float ratio);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Scale(float32 ratio) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Scale(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Scale (ratio As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Scale(float ratio);" />
      <MemberSignature Language="F#" Value="member this.Scale : single -&gt; unit" Usage="control.Scale ratio" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.Obsolete("This method has been deprecated. Use the Scale(SizeF ratio) method instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ratio" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="ratio"><span data-ttu-id="6dc4f-3082">スケーリングに使用する比率。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3082">The ratio to use for scaling.</span></span></param>
        <summary><span data-ttu-id="6dc4f-3083">コントロールおよび子コントロールのスケールを設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3083">Scales the control and any child controls.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public void Scale (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Scale(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Scale(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Scale (dx As Single, dy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Scale(float dx, float dy);" />
      <MemberSignature Language="F#" Value="member this.Scale : single * single -&gt; unit" Usage="control.Scale (dx, dy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.Obsolete("This method has been deprecated. Use the Scale(SizeF ratio) method instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx"><span data-ttu-id="6dc4f-3084">水平方向のスケール ファクター。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3084">The horizontal scaling factor.</span></span></param>
        <param name="dy"><span data-ttu-id="6dc4f-3085">垂直方向のスケール ファクター。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3085">The vertical scaling factor.</span></span></param>
        <summary><span data-ttu-id="6dc4f-3086">コントロール全体および子コントロールのスケールを設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3086">Scales the entire control and any child controls.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleBitmapLogicalToDevice">
      <MemberSignature Language="C#" Value="public void ScaleBitmapLogicalToDevice (ref System.Drawing.Bitmap logicalBitmap);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleBitmapLogicalToDevice(class System.Drawing.Bitmap&amp; logicalBitmap) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ScaleBitmapLogicalToDevice(System.Drawing.Bitmap@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleBitmapLogicalToDevice (ByRef logicalBitmap As Bitmap)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleBitmapLogicalToDevice(System::Drawing::Bitmap ^ % logicalBitmap);" />
      <MemberSignature Language="F#" Value="member this.ScaleBitmapLogicalToDevice : Bitmap -&gt; unit" Usage="control.ScaleBitmapLogicalToDevice logicalBitmap" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logicalBitmap" Type="System.Drawing.Bitmap" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="logicalBitmap"><span data-ttu-id="6dc4f-3087">スケールを設定するビットマップ。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3087">The bitmap to scale.</span></span></param>
        <summary><span data-ttu-id="6dc4f-3088">DPI の変更が発生したときに、同等のデバイス単位値に論理ビットマップ値のスケールを設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3088">Scales a logical bitmap value to it's equivalent device unit value when a DPI change occurs.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleChildren">
      <MemberSignature Language="C#" Value="protected virtual bool ScaleChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ScaleChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ScaleChildren" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property ScaleChildren As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool ScaleChildren { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ScaleChildren : bool" Usage="System.Windows.Forms.Control.ScaleChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-3089">子コントロールの表示スケールを決定する値を取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3089">Gets a value that determines the scaling of child controls.</span></span></summary>
        <value><span data-ttu-id="6dc4f-3090">このコントロールで <see langword="true" /> メソッドが呼び出されたときに子コントロールのスケールが設定される場合は <see cref="M:System.Windows.Forms.Control.Scale(System.Single)" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3090"><see langword="true" /> if child controls will be scaled when the <see cref="M:System.Windows.Forms.Control.Scale(System.Single)" /> method on this control is called; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6dc4f-3091">既定では、 <see langword="true" />です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3091">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3092"><xref:System.Windows.Forms.Control.ScaleChildren%2A> プロパティが `true`の場合、<xref:System.Windows.Forms.Control.Scale%2A> メソッドは、それぞれの子コントロールの <xref:System.Windows.Forms.Control.ScaleControl%2A> メソッドを再帰的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3092">If the <xref:System.Windows.Forms.Control.ScaleChildren%2A> property is `true`, then the <xref:System.Windows.Forms.Control.Scale%2A> method will recursively call the <xref:System.Windows.Forms.Control.ScaleControl%2A> method of each of its child controls.</span></span>  
  
 <span data-ttu-id="6dc4f-3093"><xref:System.Windows.Forms.Control.ScaleChildren%2A> の既定の実装では、常に `true`が返されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3093">The default implementation of <xref:System.Windows.Forms.Control.ScaleChildren%2A> always returns `true`.</span></span> <span data-ttu-id="6dc4f-3094">派生クラスでは、<xref:System.Windows.Forms.Control.ScaleChildren%2A> をオーバーライドして `false` を返すことで、その子に対してスケーリングを実行しないことを示すことができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3094">Derived classes can override <xref:System.Windows.Forms.Control.ScaleChildren%2A> to return `false` to indicate that scaling should not be performed on their children.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Scale(System.Single)" />
        <altmember cref="M:System.Windows.Forms.Control.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
        <altmember cref="M:System.Windows.Forms.Control.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
      </Docs>
    </Member>
    <Member MemberName="ScaleControl">
      <MemberSignature Language="C#" Value="protected virtual void ScaleControl (System.Drawing.SizeF factor, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ScaleControl(valuetype System.Drawing.SizeF factor, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ScaleControl (factor As SizeF, specified As BoundsSpecified)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ScaleControl(System::Drawing::SizeF factor, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberSignature Language="F#" Value="abstract member ScaleControl : System.Drawing.SizeF * System.Windows.Forms.BoundsSpecified -&gt; unit&#xA;override this.ScaleControl : System.Drawing.SizeF * System.Windows.Forms.BoundsSpecified -&gt; unit" Usage="control.ScaleControl (factor, specified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factor" Type="System.Drawing.SizeF" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="factor"><span data-ttu-id="6dc4f-3095">コントロールの高さと幅のスケールを設定する際のファクター。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3095">The factor by which the height and width of the control will be scaled.</span></span></param>
        <param name="specified"><span data-ttu-id="6dc4f-3096">コントロールのサイズと位置を定義するときに使用するコントロールの境界を指定する <see cref="T:System.Windows.Forms.BoundsSpecified" /> 値。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3096">A <see cref="T:System.Windows.Forms.BoundsSpecified" /> value that specifies the bounds of the control to use when defining its size and position.</span></span></param>
        <summary><span data-ttu-id="6dc4f-3097">コントロールの位置、サイズ、埋め込み、およびマージンのスケールを設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3097">Scales a control's location, size, padding and margin.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3098">コントロールがトップレベルの場合は、コントロールの位置が拡大縮小されません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3098">If the control is top level, this will not scale the control's location.</span></span> <span data-ttu-id="6dc4f-3099">これによって、子またはサイズが自動的に設定されたコントロールのサイズは縮小されません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3099">This does not scale children or the size of automatically sized controls.</span></span> <span data-ttu-id="6dc4f-3100">`specified` パラメーターの値を変更することで、任意の方向にスケーリングを省略できます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3100">You can omit scaling in any direction by changing the value of the `specified` parameter.</span></span>  
  
   
  
## Examples  
 <xref:System.Windows.Forms.BoundsSpecified>  
  
 <xref:System.Windows.Forms.Control.Scale%2A>  
  
 <xref:System.Windows.Forms.Control.GetScaledBounds%2A>  
  
 <xref:System.Windows.Forms.Control.SetBoundsCore%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleCore">
      <MemberSignature Language="C#" Value="protected virtual void ScaleCore (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ScaleCore(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ScaleCore(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ScaleCore (dx As Single, dy As Single)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ScaleCore(float dx, float dy);" />
      <MemberSignature Language="F#" Value="abstract member ScaleCore : single * single -&gt; unit&#xA;override this.ScaleCore : single * single -&gt; unit" Usage="control.ScaleCore (dx, dy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx"><span data-ttu-id="6dc4f-3101">水平方向のスケール ファクター。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3101">The horizontal scaling factor.</span></span></param>
        <param name="dy"><span data-ttu-id="6dc4f-3102">垂直方向のスケール ファクター。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3102">The vertical scaling factor.</span></span></param>
        <summary><span data-ttu-id="6dc4f-3103">このクラスでは、このメソッドは無効です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3103">This method is not relevant for this class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3104">このクラスでは、このメソッドは無効です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3104">This method is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Select">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6dc4f-3105">コントロールをアクティブにします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3105">Activates a control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="6dc4f-3106"><xref:System.Windows.Forms.Control.Select%2A> メソッドは、コントロールの <xref:System.Windows.Forms.ControlStyles.Selectable?displayProperty=nameWithType> スタイルビットが `true`に設定されていて、別のコントロールに含まれており、すべての親コントロールが表示され、有効になっている場合に、コントロールをアクティブにします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3106">The <xref:System.Windows.Forms.Control.Select%2A> method activates the control if the control's <xref:System.Windows.Forms.ControlStyles.Selectable?displayProperty=nameWithType> style bit is set to `true`, it is contained in another control, and all its parent controls are both visible and enabled.</span></span>

<span data-ttu-id="6dc4f-3107">次の一覧の Windows フォームコントロールは選択できません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3107">The Windows Forms controls in the following list are not selectable.</span></span> <span data-ttu-id="6dc4f-3108">リスト内のコントロールから派生したコントロールも選択できなくなります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3108">Controls derived from controls in the list will also not be selectable.</span></span>
  
- <xref:System.Windows.Forms.Label>  
- <xref:System.Windows.Forms.Panel>  
- <xref:System.Windows.Forms.GroupBox>
- <xref:System.Windows.Forms.PictureBox>  
- <xref:System.Windows.Forms.ProgressBar>
- <xref:System.Windows.Forms.Splitter>
- <span data-ttu-id="6dc4f-3109"><xref:System.Windows.Forms.LinkLabel> (コントロールにリンクが存在しない場合)</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3109"><xref:System.Windows.Forms.LinkLabel> (when there is no link present in the control)</span></span>
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public void Select ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Select() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Select" />
      <MemberSignature Language="VB.NET" Value="Public Sub Select ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Select();" />
      <MemberSignature Language="F#" Value="member this.Select : unit -&gt; unit" Usage="control.Select " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6dc4f-3110">コントロールをアクティブにします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3110">Activates the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  

<span data-ttu-id="6dc4f-3111">次のコード例では、選択可能な場合に、指定した <xref:System.Windows.Forms.Control>を選択します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3111">The following code example selects the specified <xref:System.Windows.Forms.Control>, if it is selectable.</span></span>
  
[!code-cpp[Windows.Forms.ControlMembers6#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CPP/controlmembers6.cpp#2)]
[!code-csharp[Windows.Forms.ControlMembers6#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CS/controlmembers6.cs#2)]
[!code-vb[Windows.Forms.ControlMembers6#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/VB/controlmembers6.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="M:System.Windows.Forms.Control.SelectNextControl(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="protected virtual void Select (bool directed, bool forward);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Select(bool directed, bool forward) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Select(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Select (directed As Boolean, forward As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Select(bool directed, bool forward);" />
      <MemberSignature Language="F#" Value="abstract member Select : bool * bool -&gt; unit&#xA;override this.Select : bool * bool -&gt; unit" Usage="control.Select (directed, forward)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directed" Type="System.Boolean" />
        <Parameter Name="forward" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="directed"><span data-ttu-id="6dc4f-3112">選択するコントロールの方向を指定する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3112"><see langword="true" /> to specify the direction of the control to select; otherwise, <see langword="false" />.</span></span></param>
        <param name="forward"><span data-ttu-id="6dc4f-3113">タブ オーダー内を前方に移動する場合は <see langword="true" />。後方に移動する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3113"><see langword="true" /> to move forward in the tab order; <see langword="false" /> to move backward in the tab order.</span></span></param>
        <summary><span data-ttu-id="6dc4f-3114">子コントロールをアクティブにします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3114">Activates a child control.</span></span> <span data-ttu-id="6dc4f-3115">オプションとして、タブ オーダーでコントロールを選択するときの方向を指定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3115">Optionally specifies the direction in the tab order to select the control from.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3116">`directed` パラメーターと `forward` パラメーターは、コンテナースタイルのコントロールによって使用されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3116">The `directed` and `forward` parameters are used by container-style controls.</span></span> <span data-ttu-id="6dc4f-3117">`directed` パラメーターが `true`に設定されている場合、`forward` パラメーターが評価され、どのコントロールを選択するかが決定されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3117">When the `directed` parameter is set to `true`, the `forward` parameter is evaluated to determine which control to select.</span></span> <span data-ttu-id="6dc4f-3118">`forward` が `true`に設定されている場合は、タブオーダーの次のコントロールが選択されます。`false`すると、タブオーダーの前のコントロールが選択されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3118">When `forward` is set to `true`, the next control in the tab order is selected; when `false`, the previous control in the tab order is selected.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ContainerControl" />
        <altmember cref="M:System.Windows.Forms.Control.Select" />
      </Docs>
    </Member>
    <Member MemberName="SelectNextControl">
      <MemberSignature Language="C#" Value="public bool SelectNextControl (System.Windows.Forms.Control ctl, bool forward, bool tabStopOnly, bool nested, bool wrap);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SelectNextControl(class System.Windows.Forms.Control ctl, bool forward, bool tabStopOnly, bool nested, bool wrap) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SelectNextControl(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function SelectNextControl (ctl As Control, forward As Boolean, tabStopOnly As Boolean, nested As Boolean, wrap As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool SelectNextControl(System::Windows::Forms::Control ^ ctl, bool forward, bool tabStopOnly, bool nested, bool wrap);" />
      <MemberSignature Language="F#" Value="member this.SelectNextControl : System.Windows.Forms.Control * bool * bool * bool * bool -&gt; bool" Usage="control.SelectNextControl (ctl, forward, tabStopOnly, nested, wrap)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctl" Type="System.Windows.Forms.Control" />
        <Parameter Name="forward" Type="System.Boolean" />
        <Parameter Name="tabStopOnly" Type="System.Boolean" />
        <Parameter Name="nested" Type="System.Boolean" />
        <Parameter Name="wrap" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="ctl"><span data-ttu-id="6dc4f-3119">検索の開始位置とする <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3119">The <see cref="T:System.Windows.Forms.Control" /> at which to start the search.</span></span></param>
        <param name="forward"><span data-ttu-id="6dc4f-3120">タブ オーダー内を前方に移動する場合は <see langword="true" />。後方に移動する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3120"><see langword="true" /> to move forward in the tab order; <see langword="false" /> to move backward in the tab order.</span></span></param>
        <param name="tabStopOnly"><span data-ttu-id="6dc4f-3121"><see langword="true" /> プロパティが <see cref="P:System.Windows.Forms.Control.TabStop" /> に設定されているコントロールを無視する場合は <see langword="false" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3121"><see langword="true" /> to ignore the controls with the <see cref="P:System.Windows.Forms.Control.TabStop" /> property set to <see langword="false" />; otherwise, <see langword="false" />.</span></span></param>
        <param name="nested"><span data-ttu-id="6dc4f-3122">入れ子になった (子コントロールの子) 子コントロールを含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3122"><see langword="true" /> to include nested (children of child controls) child controls; otherwise, <see langword="false" />.</span></span></param>
        <param name="wrap"><span data-ttu-id="6dc4f-3123">タブ オーダーの最後のコントロールに到達した後、タブ オーダーの最初のコントロールから検索を続行する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3123"><see langword="true" /> to continue searching from the first control in the tab order after the last control has been reached; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="6dc4f-3124">次のコントロールをアクティブにします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3124">Activates the next control.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-3125">コントロールがアクティブにされた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3125"><see langword="true" /> if a control was activated; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3126"><xref:System.Windows.Forms.Control.SelectNextControl%2A> メソッドは、コントロールの `Selectable` スタイルビットが <xref:System.Windows.Forms.ControlStyles>で `true` に設定されていて、別のコントロールに含まれており、すべての親コントロールが表示され、有効になっている場合に、タブオーダーの次のコントロールをアクティブにします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3126">The <xref:System.Windows.Forms.Control.SelectNextControl%2A> method activates the next control in the tab order if the control's `Selectable` style bit is set to `true` in <xref:System.Windows.Forms.ControlStyles>, it is contained in another control, and all its parent controls are both visible and enabled.</span></span>  
  
 <span data-ttu-id="6dc4f-3127">次の一覧の Windows フォームコントロールは選択できません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3127">The Windows Forms controls in the following list are not selectable.</span></span> <span data-ttu-id="6dc4f-3128">リスト内のコントロールから派生したコントロールも選択できなくなります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3128">Controls derived from controls in the list will also not be selectable.</span></span>  
  
-   <xref:System.Windows.Forms.Label>  
  
-   <xref:System.Windows.Forms.Panel>  
  
-   <xref:System.Windows.Forms.GroupBox>  
  
-   <xref:System.Windows.Forms.PictureBox>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.Splitter>  
  
-   <span data-ttu-id="6dc4f-3129"><xref:System.Windows.Forms.LinkLabel> (コントロールにリンクが存在しない場合)</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3129"><xref:System.Windows.Forms.LinkLabel> (when there is no link present in the control)</span></span>  
  
 <span data-ttu-id="6dc4f-3130">キーボード (タブ、SHIFT + TAB など) を使用してフォーカスを変更した場合、<xref:System.Windows.Forms.Control.Select%2A> または <xref:System.Windows.Forms.Control.SelectNextControl%2A> メソッドを呼び出した場合、または <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> プロパティを現在のフォームに設定した場合、フォーカスイベントは次の順序で発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3130">When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> property to the current form, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 <span data-ttu-id="6dc4f-3131"><xref:System.Windows.Forms.Control.CausesValidation%2A> プロパティが `false`に設定されている場合、<xref:System.Windows.Forms.Control.Validating> および <xref:System.Windows.Forms.Control.Validated> イベントは抑制されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3131">If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-3132">次のコードは、いくつかのコントロールを含むフォームで使用されている <xref:System.Windows.Forms.Control.SelectNextControl%2A> メソッドを exampleshows しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3132">The following code exampleshows the <xref:System.Windows.Forms.Control.SelectNextControl%2A> method being used in a form that has some controls.</span></span> <span data-ttu-id="6dc4f-3133">フォームをクリックするたびに、次のコントロールがアクティブになります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3133">Each time that you click the form, the next control is activated.</span></span> <span data-ttu-id="6dc4f-3134"><xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> プロパティは、コンテナーコントロールで現在アクティブなコントロールを取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3134">The <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> property gets the currently active control in the container control.</span></span>  
  
 [!code-csharp[System.Windows.Forms.Control.SelectNextControl#1](~/samples/snippets/csharp/VS_Snippets_Winforms/system.windows.forms.control.selectnextcontrol/cs/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.SelectNextControl#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/system.windows.forms.control.selectnextcontrol/vb/form1.vb#1)]  
  
 <span data-ttu-id="6dc4f-3135">次のコード例は、<xref:System.Windows.Forms.Button> とその他のコントロールを持つフォームで使用されている <xref:System.Windows.Forms.Control.SelectNextControl%2A> メソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3135">The following code example shows the <xref:System.Windows.Forms.Control.SelectNextControl%2A> method being used in a form that has a <xref:System.Windows.Forms.Button> and some other controls.</span></span> <span data-ttu-id="6dc4f-3136"><xref:System.Windows.Forms.Button>をクリックすると、<xref:System.Windows.Forms.Button> の次のコントロールがアクティブになります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3136">When you click the <xref:System.Windows.Forms.Button>, the next control after the <xref:System.Windows.Forms.Button> is activated.</span></span> <span data-ttu-id="6dc4f-3137"><xref:System.Windows.Forms.Button> コントロールの親を取得する必要があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3137">Notice that you have to get the parent of the <xref:System.Windows.Forms.Button> control.</span></span> <span data-ttu-id="6dc4f-3138"><xref:System.Windows.Forms.Button> はコンテナーではないため、<xref:System.Windows.Forms.Button> で直接 <xref:System.Windows.Forms.Control.SelectNextControl%2A> を呼び出すと、アクティブ化が変更されません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3138">Since <xref:System.Windows.Forms.Button> is not a container, calling <xref:System.Windows.Forms.Control.SelectNextControl%2A> directly on the <xref:System.Windows.Forms.Button> would not change the activation.</span></span>  
  
 [!code-csharp[System.Windows.Forms.Control.SelectNextControl#2](~/samples/snippets/csharp/VS_Snippets_Winforms/system.windows.forms.control.selectnextcontrol/cs/form1.cs#2)]
 [!code-vb[System.Windows.Forms.Control.SelectNextControl#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/system.windows.forms.control.selectnextcontrol/vb/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Select" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
      </Docs>
    </Member>
    <Member MemberName="SendToBack">
      <MemberSignature Language="C#" Value="public void SendToBack ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendToBack() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SendToBack" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendToBack ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendToBack();" />
      <MemberSignature Language="F#" Value="member this.SendToBack : unit -&gt; unit" Usage="control.SendToBack " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6dc4f-3139">コントロールを z オーダーの背面に移動します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3139">Sends the control to the back of the z-order.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3140">コントロールが z オーダーの背面に移動します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3140">The control is moved to the back of the z-order.</span></span> <span data-ttu-id="6dc4f-3141">コントロールが別のコントロールの子である場合は、子コントロールが z オーダーの背面に移動します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3141">If the control is a child of another control, the child control is moved to the back of the z-order.</span></span> <span data-ttu-id="6dc4f-3142">コントロールがトップレベルコントロールである場合、コントロールがアクティブでない限り、このメソッドは正しく機能しません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3142">If the control is a top-level control, this method will not work correctly unless the control is active.</span></span> <span data-ttu-id="6dc4f-3143">トップレベルコントロールは、別のコントロールの子ではないコントロール (<xref:System.Windows.Forms.Form>など) です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3143">A top-level control is a control, such as a <xref:System.Windows.Forms.Form>, that is not a child of another control.</span></span> <span data-ttu-id="6dc4f-3144">アクティブコントロールは、入力フォーカスがある、表示可能なコントロールです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3144">An active control is a visible control that has input focus.</span></span> <span data-ttu-id="6dc4f-3145">非アクティブなトップレベルコントロールで <xref:System.Windows.Forms.Control.SendToBack%2A> メソッドを使用するには、まずコントロールの <xref:System.Windows.Forms.Control.BringToFront%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3145">To use the <xref:System.Windows.Forms.Control.SendToBack%2A> method with an inactive, top-level control, first call the <xref:System.Windows.Forms.Control.BringToFront%2A> method on the control.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.BringToFront" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateZOrder" />
      </Docs>
    </Member>
    <Member MemberName="SetAutoSizeMode">
      <MemberSignature Language="C#" Value="protected void SetAutoSizeMode (System.Windows.Forms.AutoSizeMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetAutoSizeMode(valuetype System.Windows.Forms.AutoSizeMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetAutoSizeMode(System.Windows.Forms.AutoSizeMode)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SetAutoSizeMode (mode As AutoSizeMode)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetAutoSizeMode(System::Windows::Forms::AutoSizeMode mode);" />
      <MemberSignature Language="F#" Value="member this.SetAutoSizeMode : System.Windows.Forms.AutoSizeMode -&gt; unit" Usage="control.SetAutoSizeMode mode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Windows.Forms.AutoSizeMode" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="mode"><span data-ttu-id="6dc4f-3146"><see cref="T:System.Windows.Forms.AutoSizeMode" /> 値のいずれか 1 つです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3146">One of the <see cref="T:System.Windows.Forms.AutoSizeMode" /> values.</span></span></param>
        <summary><span data-ttu-id="6dc4f-3147"><see cref="P:System.Windows.Forms.Control.AutoSize" /> プロパティが有効なときのコントロールの動作を示す値を設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3147">Sets a value indicating how a control will behave when its <see cref="P:System.Windows.Forms.Control.AutoSize" /> property is enabled.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetBounds">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6dc4f-3148">コントロールの範囲を設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3148">Sets the bounds of the control.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetBounds">
      <MemberSignature Language="C#" Value="public void SetBounds (int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetBounds(int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetBounds (x As Integer, y As Integer, width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetBounds(int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.SetBounds : int * int * int * int -&gt; unit" Usage="control.SetBounds (x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="6dc4f-3149">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Left" /> プロパティ値。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3149">The new <see cref="P:System.Windows.Forms.Control.Left" /> property value of the control.</span></span></param>
        <param name="y"><span data-ttu-id="6dc4f-3150">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Top" /> プロパティ値。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3150">The new <see cref="P:System.Windows.Forms.Control.Top" /> property value of the control.</span></span></param>
        <param name="width"><span data-ttu-id="6dc4f-3151">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Width" /> プロパティ値。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3151">The new <see cref="P:System.Windows.Forms.Control.Width" /> property value of the control.</span></span></param>
        <param name="height"><span data-ttu-id="6dc4f-3152">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Height" /> プロパティ値。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3152">The new <see cref="P:System.Windows.Forms.Control.Height" /> property value of the control.</span></span></param>
        <summary><span data-ttu-id="6dc4f-3153">コントロールの境界領域を指定された位置とサイズに設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3153">Sets the bounds of the control to the specified location and size.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.Control.Bounds" />
        <altmember cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="SetBounds">
      <MemberSignature Language="C#" Value="public void SetBounds (int x, int y, int width, int height, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetBounds(int32 x, int32 y, int32 width, int32 height, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetBounds (x As Integer, y As Integer, width As Integer, height As Integer, specified As BoundsSpecified)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetBounds(int x, int y, int width, int height, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberSignature Language="F#" Value="member this.SetBounds : int * int * int * int * System.Windows.Forms.BoundsSpecified -&gt; unit" Usage="control.SetBounds (x, y, width, height, specified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="6dc4f-3154">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Left" /> プロパティ値。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3154">The new <see cref="P:System.Windows.Forms.Control.Left" /> property value of the control.</span></span></param>
        <param name="y"><span data-ttu-id="6dc4f-3155">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Top" /> プロパティ値。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3155">The new <see cref="P:System.Windows.Forms.Control.Top" /> property value of the control.</span></span></param>
        <param name="width"><span data-ttu-id="6dc4f-3156">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Width" /> プロパティ値。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3156">The new <see cref="P:System.Windows.Forms.Control.Width" /> property value of the control.</span></span></param>
        <param name="height"><span data-ttu-id="6dc4f-3157">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Height" /> プロパティ値。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3157">The new <see cref="P:System.Windows.Forms.Control.Height" /> property value of the control.</span></span></param>
        <param name="specified"><span data-ttu-id="6dc4f-3158"><see cref="T:System.Windows.Forms.BoundsSpecified" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3158">A bitwise combination of the <see cref="T:System.Windows.Forms.BoundsSpecified" /> values.</span></span> <span data-ttu-id="6dc4f-3159">指定されていないパラメーターについては、現在の値が使用されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3159">For any parameter not specified, the current value will be used.</span></span></param>
        <summary><span data-ttu-id="6dc4f-3160">コントロールの指定した範囲を指定した位置とサイズに設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3160">Sets the specified bounds of the control to the specified location and size.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6dc4f-3161">次のコード例では、<xref:System.Windows.Forms.Control.Layout> イベントの画面に <xref:System.Windows.Forms.Form> を中心にしています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3161">The following code example centers a <xref:System.Windows.Forms.Form> on the screen in the <xref:System.Windows.Forms.Control.Layout> event.</span></span> <span data-ttu-id="6dc4f-3162">これにより、ユーザーがサイズを変更したときにフォームが中央揃えで表示されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3162">This will keep the form centered as the user resizes it.</span></span> <span data-ttu-id="6dc4f-3163">この例では、<xref:System.Windows.Forms.Form> コントロールを作成しておく必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3163">This example requires that you have created a <xref:System.Windows.Forms.Form> control.</span></span>  
  
 [!code-cpp[Control.Layout#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Layout/CPP/layout.cpp#1)]
 [!code-csharp[Control.Layout#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Layout/CS/layout.cs#1)]
 [!code-vb[Control.Layout#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Layout/VB/layout.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Bounds" />
        <altmember cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="SetBoundsCore">
      <MemberSignature Language="C#" Value="protected virtual void SetBoundsCore (int x, int y, int width, int height, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetBoundsCore(int32 x, int32 y, int32 width, int32 height, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub SetBoundsCore (x As Integer, y As Integer, width As Integer, height As Integer, specified As BoundsSpecified)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void SetBoundsCore(int x, int y, int width, int height, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberSignature Language="F#" Value="abstract member SetBoundsCore : int * int * int * int * System.Windows.Forms.BoundsSpecified -&gt; unit&#xA;override this.SetBoundsCore : int * int * int * int * System.Windows.Forms.BoundsSpecified -&gt; unit" Usage="control.SetBoundsCore (x, y, width, height, specified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="6dc4f-3164">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Left" /> プロパティ値。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3164">The new <see cref="P:System.Windows.Forms.Control.Left" /> property value of the control.</span></span></param>
        <param name="y"><span data-ttu-id="6dc4f-3165">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Top" /> プロパティ値。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3165">The new <see cref="P:System.Windows.Forms.Control.Top" /> property value of the control.</span></span></param>
        <param name="width"><span data-ttu-id="6dc4f-3166">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Width" /> プロパティ値。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3166">The new <see cref="P:System.Windows.Forms.Control.Width" /> property value of the control.</span></span></param>
        <param name="height"><span data-ttu-id="6dc4f-3167">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Height" /> プロパティ値。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3167">The new <see cref="P:System.Windows.Forms.Control.Height" /> property value of the control.</span></span></param>
        <param name="specified"><span data-ttu-id="6dc4f-3168"><see cref="T:System.Windows.Forms.BoundsSpecified" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3168">A bitwise combination of the <see cref="T:System.Windows.Forms.BoundsSpecified" /> values.</span></span></param>
        <summary><span data-ttu-id="6dc4f-3169">このコントロールの指定した境界を設定する作業を実行します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3169">Performs the work of setting the specified bounds of this control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3170">通常、`specified` パラメーターに含まれていない境界に対応するパラメーターは、現在の値と共に渡されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3170">Typically, the parameters that correspond to the bounds not included in the `specified` parameter are passed in with their current values.</span></span> <span data-ttu-id="6dc4f-3171">たとえば、<xref:System.Windows.Forms.Control.Height%2A>、<xref:System.Windows.Forms.Control.Width%2A>、または <xref:System.Windows.Forms.Control.Location%2A> プロパティの <xref:System.Drawing.Point.X%2A> または <xref:System.Drawing.Point.Y%2A> プロパティは、コントロールの現在のインスタンスへの参照を使用して渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3171">For example, the <xref:System.Windows.Forms.Control.Height%2A>, <xref:System.Windows.Forms.Control.Width%2A>, or the <xref:System.Drawing.Point.X%2A> or <xref:System.Drawing.Point.Y%2A> properties of the <xref:System.Windows.Forms.Control.Location%2A> property can be passed in with a reference to the current instance of the control.</span></span> <span data-ttu-id="6dc4f-3172">ただし、渡されたすべての値が受け入れられ、コントロールに適用されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3172">However all values passed in are honored and applied to the control.</span></span>  
  
 <span data-ttu-id="6dc4f-3173">`boundsSpecified` パラメーターは、アプリケーションによって変更 <xref:System.Windows.Forms.Control.Bounds%2A> されるコントロールの要素を表します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3173">The `boundsSpecified` parameter represents the elements of the controls <xref:System.Windows.Forms.Control.Bounds%2A> changed by your application.</span></span> <span data-ttu-id="6dc4f-3174">たとえば、コントロールの <xref:System.Windows.Forms.Control.Size%2A> を変更した場合、`boundsSpecified` パラメーター値は <xref:System.Windows.Forms.BoundsSpecified>の `Size` 値になります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3174">For example, if you change the <xref:System.Windows.Forms.Control.Size%2A> of the control, the `boundsSpecified` parameter value is the `Size` value of <xref:System.Windows.Forms.BoundsSpecified>.</span></span> <span data-ttu-id="6dc4f-3175">ただし、設定する <xref:System.Windows.Forms.Control.Dock%2A> プロパティに応じて <xref:System.Windows.Forms.Control.Size%2A> が調整されている場合、`boundsSpecified` パラメーター値は <xref:System.Windows.Forms.BoundsSpecified>の `None` 値になります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3175">However, if the <xref:System.Windows.Forms.Control.Size%2A> is adjusted in response to the <xref:System.Windows.Forms.Control.Dock%2A> property being set, the `boundsSpecified` parameter value is the `None` value of <xref:System.Windows.Forms.BoundsSpecified>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-3176">Windows Server 2003 システムでは、<xref:System.Windows.Forms.Form> のサイズは、モニターの最大ピクセル幅と高さによって制限されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3176">On Windows Server 2003 systems, the size of a <xref:System.Windows.Forms.Form> is restricted by the maximum pixel width and height of the monitor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-3177">次のコード例では、<xref:System.Windows.Forms.Control.SetBoundsCore%2A> メソッドをオーバーライドして、コントロールが固定サイズのままであることを確認します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3177">The following code example overrides the <xref:System.Windows.Forms.Control.SetBoundsCore%2A> method to ensure that the control remains a fixed size.</span></span> <span data-ttu-id="6dc4f-3178">この例では、<xref:System.Windows.Forms.Control> クラスから直接または間接的に派生したクラスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3178">This example requires that you have a class that is either directly or indirectly derived from the <xref:System.Windows.Forms.Control> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_Methods#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_Methods/CPP/controlmethods.cpp#1)]
 [!code-csharp[Windows.Forms.Control_Methods#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_Methods/CS/controlmethods.cs#1)]
 [!code-vb[Windows.Forms.Control_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_Methods/VB/controlmethods.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-3179">派生クラスで <see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /> をオーバーライドする場合は、基本クラスの <see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /> メソッドを呼び出して、コントロールの境界を強制的に変更するようにしてください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3179">When overriding <see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /> method to force the bounds of the control to change.</span></span> <span data-ttu-id="6dc4f-3180">派生クラスでは、<see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /> メソッドにサイズ制限を追加できます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3180">Derived classes can add size restrictions to the <see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /> method.</span></span></para></block>
        <altmember cref="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)" />
        <altmember cref="P:System.Windows.Forms.Control.Bounds" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="SetClientSizeCore">
      <MemberSignature Language="C#" Value="protected virtual void SetClientSizeCore (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetClientSizeCore(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub SetClientSizeCore (x As Integer, y As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void SetClientSizeCore(int x, int y);" />
      <MemberSignature Language="F#" Value="abstract member SetClientSizeCore : int * int -&gt; unit&#xA;override this.SetClientSizeCore : int * int -&gt; unit" Usage="control.SetClientSizeCore (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="6dc4f-3181">クライアント領域の幅 (ピクセル単位)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3181">The client area width, in pixels.</span></span></param>
        <param name="y"><span data-ttu-id="6dc4f-3182">クライアント領域の高さ (ピクセル単位)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3182">The client area height, in pixels.</span></span></param>
        <summary><span data-ttu-id="6dc4f-3183">コントロールのクライアント領域のサイズを設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3183">Sets the size of the client area of the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3184">クライアント領域は、(0, 0) の場所から開始し、(`x`、`y`) の場所まで拡張されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3184">The client area starts at the (0, 0) location and extends to the (`x`, `y`) location.</span></span>  
  
 <span data-ttu-id="6dc4f-3185">通常、コントロールの <xref:System.Windows.Forms.Control.ClientSize%2A> は設定しないでください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3185">Typically, you should not set the <xref:System.Windows.Forms.Control.ClientSize%2A> of the control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-3186">次のコード例では、<xref:System.Windows.Forms.Control.SetClientSizeCore%2A> メソッドをオーバーライドして、コントロールが正方形のままであることを確認します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3186">The following code example overrides the <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> method to ensure that the control remains square.</span></span> <span data-ttu-id="6dc4f-3187">この例では、<xref:System.Windows.Forms.Control> クラスから直接または間接的に派生したクラスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3187">This example requires that you have a class that is either directly or indirectly derived from the <xref:System.Windows.Forms.Control> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_Methods#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_Methods/CPP/controlmethods.cpp#2)]
 [!code-csharp[Windows.Forms.Control_Methods#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_Methods/CS/controlmethods.cs#2)]
 [!code-vb[Windows.Forms.Control_Methods#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_Methods/VB/controlmethods.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-3188">派生クラスで <see cref="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)" /> をオーバーライドする場合は、<see cref="P:System.Windows.Forms.Control.ClientSize" /> プロパティが調整されるように、基本クラスの <see cref="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)" /> メソッドを必ず呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3188">When overriding <see cref="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)" /> method so that the <see cref="P:System.Windows.Forms.Control.ClientSize" /> property is adjusted.</span></span>  
  
<span data-ttu-id="6dc4f-3189">コントロールの描画の詳細については、「 [Windows フォームコントロールのレンダリング](~/docs/framework/winforms/controls/rendering-a-windows-forms-control.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3189">For more information about drawing on controls, see [Rendering a Windows Forms Control](~/docs/framework/winforms/controls/rendering-a-windows-forms-control.md).</span></span></para></block>
        <altmember cref="P:System.Windows.Forms.Control.ClientSize" />
      </Docs>
    </Member>
    <Member MemberName="SetStyle">
      <MemberSignature Language="C#" Value="protected void SetStyle (System.Windows.Forms.ControlStyles flag, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetStyle(valuetype System.Windows.Forms.ControlStyles flag, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SetStyle (flag As ControlStyles, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetStyle(System::Windows::Forms::ControlStyles flag, bool value);" />
      <MemberSignature Language="F#" Value="member this.SetStyle : System.Windows.Forms.ControlStyles * bool -&gt; unit" Usage="control.SetStyle (flag, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flag" Type="System.Windows.Forms.ControlStyles" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="flag"><span data-ttu-id="6dc4f-3190">設定する <see cref="T:System.Windows.Forms.ControlStyles" /> ビット。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3190">The <see cref="T:System.Windows.Forms.ControlStyles" /> bit to set.</span></span></param>
        <param name="value"><span data-ttu-id="6dc4f-3191">指定したスタイルをコントロールに適用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3191"><see langword="true" /> to apply the specified style to the control; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="6dc4f-3192">指定した <see cref="T:System.Windows.Forms.ControlStyles" /> フラグを <see langword="true" /> または <see langword="false" /> に設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3192">Sets a specified <see cref="T:System.Windows.Forms.ControlStyles" /> flag to either <see langword="true" /> or <see langword="false" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3193">コントロールスタイルのビットフラグは、サポートされる動作を分類するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3193">Control style bit flags are used to categorize supported behavior.</span></span> <span data-ttu-id="6dc4f-3194">コントロールでは、<xref:System.Windows.Forms.Control.SetStyle%2A> メソッドを呼び出し、適切な <xref:System.Windows.Forms.ControlStyles> ビット (またはビット) とブール値を渡して、ビットをに設定することによってスタイルを有効にできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3194">A control can enable a style by calling the <xref:System.Windows.Forms.Control.SetStyle%2A> method and passing in the appropriate <xref:System.Windows.Forms.ControlStyles> bit (or bits) and the Boolean value to set the bit(s) to.</span></span> <span data-ttu-id="6dc4f-3195">指定された <xref:System.Windows.Forms.ControlStyles> ビットに割り当てられた値を確認するには、<xref:System.Windows.Forms.Control.GetStyle%2A> メソッドを使用して、評価する <xref:System.Windows.Forms.ControlStyles> メンバーを渡します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3195">To determine the value assigned to a specified <xref:System.Windows.Forms.ControlStyles> bit, use the <xref:System.Windows.Forms.Control.GetStyle%2A> method and pass in the <xref:System.Windows.Forms.ControlStyles> member to evaluate.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="6dc4f-3196">コントロールスタイルのビットを設定すると、コントロールの動作を大幅に変更できます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3196">Setting the control style bits can substantially change the behavior of the control.</span></span> <span data-ttu-id="6dc4f-3197"><xref:System.Windows.Forms.Control.SetStyle%2A> メソッドを呼び出す前に、<xref:System.Windows.Forms.ControlStyles> 列挙のドキュメントを参照して、コントロールスタイルのビットを変更した場合の影響を理解してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3197">Review the <xref:System.Windows.Forms.ControlStyles> enumeration documentation to understand the effects of changing the control style bits before calling the <xref:System.Windows.Forms.Control.SetStyle%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-3198">次のコード例では、<xref:System.Windows.Forms.Form> でダブルバッファリングを有効にし、変更を反映するようにスタイルを更新します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3198">The following code example enables double-buffering on a <xref:System.Windows.Forms.Form> and updates the styles to reflect the changes.</span></span>  
  
 [!code-cpp[Windows.Forms.ControlMembers6#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CPP/controlmembers6.cpp#3)]
 [!code-csharp[Windows.Forms.ControlMembers6#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CS/controlmembers6.cs#3)]
 [!code-vb[Windows.Forms.ControlMembers6#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/VB/controlmembers6.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.GetStyle(System.Windows.Forms.ControlStyles)" />
        <altmember cref="T:System.Windows.Forms.ControlStyles" />
      </Docs>
    </Member>
    <Member MemberName="SetTopLevel">
      <MemberSignature Language="C#" Value="protected void SetTopLevel (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetTopLevel(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetTopLevel(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SetTopLevel (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetTopLevel(bool value);" />
      <MemberSignature Language="F#" Value="member this.SetTopLevel : bool -&gt; unit" Usage="control.SetTopLevel value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="6dc4f-3199">コントロールをトップレベル コントロールとして設定する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3199"><see langword="true" /> to set the control as the top-level control; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="6dc4f-3200">コントロールをトップレベル コントロールとして設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3200">Sets the control as the top-level control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3201"><xref:System.Windows.Forms.Form> の <xref:System.Windows.Forms.Control.SetTopLevel%2A> メソッドを呼び出し、`false`の値を渡すと、もう一度 <xref:System.Windows.Forms.Control.SetTopLevel%2A> を呼び出して `true`の値を渡しても、フォームは表示されません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3201">If you call the <xref:System.Windows.Forms.Control.SetTopLevel%2A> method of a <xref:System.Windows.Forms.Form> and pass in a value of `false`, the form will not be visible until you call <xref:System.Windows.Forms.Control.SetTopLevel%2A> again, passing in a value of `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6dc4f-3202"><paramref name="value" /> パラメーターが <see langword="true" /> に設定されていて、コントロールが ActiveX コントロールです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3202">The <paramref name="value" /> parameter is set to <see langword="true" /> and the control is an ActiveX control.</span></span></exception>
        <exception cref="T:System.Exception"><span data-ttu-id="6dc4f-3203"><see cref="M:System.Windows.Forms.Control.GetTopLevel" /> の戻り値が、<paramref name="value" /> パラメーターと等しい値ではなく、<see cref="P:System.Windows.Forms.Control.Parent" /> プロパティが <see langword="null" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3203">The <see cref="M:System.Windows.Forms.Control.GetTopLevel" /> return value is not equal to the <paramref name="value" /> parameter and the <see cref="P:System.Windows.Forms.Control.Parent" /> property is not <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Windows.Forms.Control.GetTopLevel" />
      </Docs>
    </Member>
    <Member MemberName="SetVisibleCore">
      <MemberSignature Language="C#" Value="protected virtual void SetVisibleCore (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetVisibleCore(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetVisibleCore(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub SetVisibleCore (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void SetVisibleCore(bool value);" />
      <MemberSignature Language="F#" Value="abstract member SetVisibleCore : bool -&gt; unit&#xA;override this.SetVisibleCore : bool -&gt; unit" Usage="control.SetVisibleCore value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="6dc4f-3204">コントロールを表示する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3204"><see langword="true" /> to make the control visible; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="6dc4f-3205">コントロールを指定した表示状態に設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3205">Sets the control to the specified visible state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3206">通常は、このメソッドをオーバーライドして、コントロールの表示動作を変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3206">You would typically override this method to change the visibility behavior of the control.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-3207">派生クラスで <see cref="M:System.Windows.Forms.Control.SetVisibleCore(System.Boolean)" /> をオーバーライドする場合は、基本クラスの <see cref="M:System.Windows.Forms.Control.SetVisibleCore(System.Boolean)" /> メソッドを呼び出して、コントロールの表示を強制的に変更するようにしてください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3207">When overriding <see cref="M:System.Windows.Forms.Control.SetVisibleCore(System.Boolean)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.SetVisibleCore(System.Boolean)" /> method to force the visibility of the control to change.</span></span></para></block>
        <altmember cref="P:System.Windows.Forms.Control.Visible" />
      </Docs>
    </Member>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public void Show ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Show() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Show" />
      <MemberSignature Language="VB.NET" Value="Public Sub Show ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Show();" />
      <MemberSignature Language="F#" Value="member this.Show : unit -&gt; unit" Usage="control.Show " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6dc4f-3208">コントロールをユーザーに対して表示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3208">Displays the control to the user.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3209">コントロールを表示することは、<xref:System.Windows.Forms.Control.Visible%2A> プロパティを `true`に設定することと同じです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3209">Showing the control is equivalent to setting the <xref:System.Windows.Forms.Control.Visible%2A> property to `true`.</span></span> <span data-ttu-id="6dc4f-3210"><xref:System.Windows.Forms.Control.Show%2A> メソッドが呼び出されると、<xref:System.Windows.Forms.Control.Hide%2A> メソッドが呼び出されるまで、<xref:System.Windows.Forms.Control.Visible%2A> プロパティは `true` の値を返します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3210">After the <xref:System.Windows.Forms.Control.Show%2A> method is called, the <xref:System.Windows.Forms.Control.Visible%2A> property returns a value of `true` until the <xref:System.Windows.Forms.Control.Hide%2A> method is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-3211">次のコード例では、[バージョン情報] ダイアログボックスを表示し、その画面に一時的に青い四角形を描画します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3211">The following code example displays an about dialog box and temporarily draws a blue square on its surface.</span></span> <span data-ttu-id="6dc4f-3212">この例では、`AboutDialog`という名前の <xref:System.Windows.Forms.Form> から派生するクラスを定義している必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3212">This example requires that you have defined a class that derives from <xref:System.Windows.Forms.Form> named `AboutDialog`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Members2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CPP/controlmembers2.cpp#1)]
 [!code-csharp[Windows.Forms.Control Members2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CS/controlmembers2.cs#1)]
 [!code-vb[Windows.Forms.Control Members2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members2/VB/controlmembers2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Visible" />
        <altmember cref="M:System.Windows.Forms.Control.Hide" />
      </Docs>
    </Member>
    <Member MemberName="ShowFocusCues">
      <MemberSignature Language="C#" Value="protected internal virtual bool ShowFocusCues { get; }" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowFocusCues" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ShowFocusCues" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property ShowFocusCues As Boolean" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property bool ShowFocusCues { bool get(); };" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="member this.ShowFocusCues : bool" Usage="System.Windows.Forms.Control.ShowFocusCues" />
      <MemberSignature Language="C#" Value="protected virtual bool ShowFocusCues { get; }" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property ShowFocusCues As Boolean" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool ShowFocusCues { bool get(); };" FrameworkAlternate="netframework-1.1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-3213">コントロールがフォーカスを示す四角形を表示する必要があるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3213">Gets a value indicating whether the control should display focus rectangles.</span></span></summary>
        <value><span data-ttu-id="6dc4f-3214">コントロールがフォーカスを示す四角形を表示する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3214"><see langword="true" /> if the control should display focus rectangles; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3215">この機能の詳細については、 [WM_CHANGEUISTATE](/windows/win32/menurc/wm-changeuistate)、 [WM_QUERYUISTATE](/windows/win32/menurc/wm-queryuistate)、および[WM_UPDATEUISTATE](/windows/win32/menurc/wm-updateuistate)に関するトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3215">For more information about this feature, see the [WM_CHANGEUISTATE](/windows/win32/menurc/wm-changeuistate), [WM_QUERYUISTATE](/windows/win32/menurc/wm-queryuistate), and the [WM_UPDATEUISTATE](/windows/win32/menurc/wm-updateuistate) topics.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-3216">派生クラスの <see cref="P:System.Windows.Forms.Control.ShowFocusCues" /> プロパティをオーバーライドする場合は、基本クラスの <see cref="P:System.Windows.Forms.Control.ShowFocusCues" /> プロパティを使用して、基本実装を拡張します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3216">When overriding the <see cref="P:System.Windows.Forms.Control.ShowFocusCues" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.ShowFocusCues" /> property to extend the base implementation.</span></span> <span data-ttu-id="6dc4f-3217">それ以外の場合は、すべての実装を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3217">Otherwise, you must provide all the implementation.</span></span></para></block>
        <altmember cref="T:System.Windows.Forms.UICues" />
        <altmember cref="E:System.Windows.Forms.Control.ChangeUICues" />
        <altmember cref="P:System.Windows.Forms.Control.ShowKeyboardCues" />
      </Docs>
    </Member>
    <Member MemberName="ShowKeyboardCues">
      <MemberSignature Language="C#" Value="protected internal virtual bool ShowKeyboardCues { get; }" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowKeyboardCues" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ShowKeyboardCues" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property ShowKeyboardCues As Boolean" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property bool ShowKeyboardCues { bool get(); };" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="member this.ShowKeyboardCues : bool" Usage="System.Windows.Forms.Control.ShowKeyboardCues" />
      <MemberSignature Language="C#" Value="protected bool ShowKeyboardCues { get; }" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ShowKeyboardCues As Boolean" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool ShowKeyboardCues { bool get(); };" FrameworkAlternate="netframework-1.1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-3218">ユーザー インターフェイスがキーボード アクセラレータを表示または非表示にする適切な状態かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3218">Gets a value indicating whether the user interface is in the appropriate state to show or hide keyboard accelerators.</span></span></summary>
        <value><span data-ttu-id="6dc4f-3219">キーボード アクセラレータを表示する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3219"><see langword="true" /> if the keyboard accelerators are visible; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3220">Windows フォームデザイナーで作成されたコントロールでは、キーボードアクセラレータが既定で表示されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3220">In controls created in the Windows Forms designer, keyboard accelerators are visible by default.</span></span>  
  
 <span data-ttu-id="6dc4f-3221">この機能の詳細については、 [WM_CHANGEUISTATE](/windows/win32/menurc/wm-changeuistate)、 [WM_QUERYUISTATE](/windows/win32/menurc/wm-queryuistate)、および[WM_UPDATEUISTATE](/windows/win32/menurc/wm-updateuistate)に関するトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3221">For more information about this feature, see the [WM_CHANGEUISTATE](/windows/win32/menurc/wm-changeuistate), [WM_QUERYUISTATE](/windows/win32/menurc/wm-queryuistate), and the [WM_UPDATEUISTATE](/windows/win32/menurc/wm-updateuistate) topics.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.UICues" />
        <altmember cref="P:System.Windows.Forms.Control.ShowFocusCues" />
        <altmember cref="E:System.Windows.Forms.Control.ChangeUICues" />
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Site" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Site As ISite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::ISite ^ Site { System::ComponentModel::ISite ^ get(); void set(System::ComponentModel::ISite ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Site : System.ComponentModel.ISite with get, set" Usage="System.Windows.Forms.Control.Site" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.IComponent.Site</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-3222">コントロールのサイトを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3222">Gets or sets the site of the control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-3223"><see cref="T:System.ComponentModel.ISite" /> に関連付けられている <see cref="T:System.Windows.Forms.Control" /> (存在する場合)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3223">The <see cref="T:System.ComponentModel.ISite" /> associated with the <see cref="T:System.Windows.Forms.Control" />, if any.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.ISite" />
        <altmember cref="P:System.ComponentModel.IComponent.Site" />
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public System.Drawing.Size Size { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size Size" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Size" />
      <MemberSignature Language="VB.NET" Value="Public Property Size As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size Size { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberSignature Language="F#" Value="member this.Size : System.Drawing.Size with get, set" Usage="System.Windows.Forms.Control.Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-3224">コントロールの高さと幅を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3224">Gets or sets the height and width of the control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-3225">コントロールの高さと幅をピクセル単位で表す <see cref="T:System.Drawing.Size" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3225">The <see cref="T:System.Drawing.Size" /> that represents the height and width of the control in pixels.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3226"><xref:System.Drawing.Size> クラスは値型 (Visual Basic では`Structure`、Visual C#では `struct`) であるため、値によって返されます。これは、プロパティにアクセスすると、コントロールのサイズのコピーが返されることを意味します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3226">Because the <xref:System.Drawing.Size> class is a value type (`Structure` in Visual Basic, `struct` in Visual C#), it is returned by value, meaning accessing the property returns a copy of the size of the control.</span></span> <span data-ttu-id="6dc4f-3227">そのため、このプロパティから返された <xref:System.Drawing.Size> の <xref:System.Drawing.Size.Width%2A> または <xref:System.Drawing.Size.Height%2A> プロパティを調整しても、コントロールの <xref:System.Windows.Forms.Control.Width%2A> または <xref:System.Windows.Forms.Control.Height%2A> には影響しません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3227">So, adjusting the <xref:System.Drawing.Size.Width%2A> or <xref:System.Drawing.Size.Height%2A> properties of the <xref:System.Drawing.Size> returned from this property will not affect the <xref:System.Windows.Forms.Control.Width%2A> or <xref:System.Windows.Forms.Control.Height%2A> of the control.</span></span> <span data-ttu-id="6dc4f-3228">コントロールの <xref:System.Windows.Forms.Control.Width%2A> または <xref:System.Windows.Forms.Control.Height%2A> を調整するには、コントロールの <xref:System.Windows.Forms.Control.Width%2A> または <xref:System.Windows.Forms.Control.Height%2A> プロパティを設定するか、<xref:System.Windows.Forms.Control.Size%2A> プロパティに新しい <xref:System.Drawing.Size>を設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3228">To adjust the <xref:System.Windows.Forms.Control.Width%2A> or <xref:System.Windows.Forms.Control.Height%2A> of the control, you must set the control's <xref:System.Windows.Forms.Control.Width%2A> or <xref:System.Windows.Forms.Control.Height%2A> property, or set the <xref:System.Windows.Forms.Control.Size%2A> property with a new <xref:System.Drawing.Size>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-3229">パフォーマンスを向上させるには、コントロールの <xref:System.Drawing.Size> をコンストラクターに設定しないでください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3229">To maintain better performance, do not set the <xref:System.Drawing.Size> of a control in its constructor.</span></span> <span data-ttu-id="6dc4f-3230"><xref:System.Windows.Forms.Control.DefaultSize%2A> プロパティをオーバーライドする方法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3230">The preferred method is to override the <xref:System.Windows.Forms.Control.DefaultSize%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-3231">Windows Server 2003 システムでは、<xref:System.Windows.Forms.Form> のサイズは、モニターの最大ピクセル幅と高さによって制限されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3231">On Windows Server 2003 systems, the size of a <xref:System.Windows.Forms.Form> is restricted by the maximum pixel width and height of the monitor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-3232">次のコード例では、フォームに <xref:System.Windows.Forms.Button> を追加し、その共通プロパティのいくつかを設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3232">The following code example adds a <xref:System.Windows.Forms.Button> to a form and sets some of its common properties.</span></span> <span data-ttu-id="6dc4f-3233">この例では、フォームのサイズが変更されたときの相対位置を維持できるように、ボタンをフォームの右下隅に固定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3233">The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized.</span></span> <span data-ttu-id="6dc4f-3234">次に、<xref:System.Windows.Forms.Control.BackgroundImage%2A> を設定し、ボタンのサイズを <xref:System.Drawing.Image>と同じサイズに変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3234">Next it sets the <xref:System.Windows.Forms.Control.BackgroundImage%2A> and resizes the button to the same size as the <xref:System.Drawing.Image>.</span></span> <span data-ttu-id="6dc4f-3235">この例では、<xref:System.Windows.Forms.Control.TabStop%2A> を `true` に設定し、<xref:System.Windows.Forms.Control.TabIndex%2A> プロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3235">The example then sets the <xref:System.Windows.Forms.Control.TabStop%2A> to `true` and sets the <xref:System.Windows.Forms.Control.TabIndex%2A> property.</span></span> <span data-ttu-id="6dc4f-3236">最後に、ボタンの <xref:System.Windows.Forms.Control.Click> イベントを処理するイベントハンドラーを追加します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3236">Lastly, it adds an event handler to handle the <xref:System.Windows.Forms.Control.Click> event of the button.</span></span> <span data-ttu-id="6dc4f-3237">この例では、`imageList1`という名前の <xref:System.Windows.Forms.ImageList> が必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3237">This example requires that you have an <xref:System.Windows.Forms.ImageList> named `imageList1`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#3)]
 [!code-csharp[Windows.Forms.Control Properties#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#3)]
 [!code-vb[Windows.Forms.Control Properties#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SizeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SizeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SizeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.SizeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SizeChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SizeChanged;" />
      <MemberSignature Language="F#" Value="member this.SizeChanged : EventHandler " Usage="member this.SizeChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-3238"><see cref="P:System.Windows.Forms.Control.Size" /> プロパティの値が変化すると発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3238">Occurs when the <see cref="P:System.Windows.Forms.Control.Size" /> property value changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3239"><xref:System.Windows.Forms.Control.Layout> イベントを使用してカスタムレイアウトを処理することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3239">It is preferable to use the <xref:System.Windows.Forms.Control.Layout> event to handle custom layouts.</span></span> <span data-ttu-id="6dc4f-3240"><xref:System.Windows.Forms.Control.Layout> イベントは <xref:System.Windows.Forms.Control.Resize> イベントに応答して発生しますが、その他の条件でレイアウトを適用する必要がある場合にも発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3240">The <xref:System.Windows.Forms.Control.Layout> event is raised in response to <xref:System.Windows.Forms.Control.Resize> events, but also in other conditions when layout might need to be applied.</span></span>  
  
 <span data-ttu-id="6dc4f-3241">このイベントは、プログラムによる変更またはユーザーの操作によって <xref:System.Windows.Forms.Control.Size%2A> プロパティが変更された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3241">This event is raised if the <xref:System.Windows.Forms.Control.Size%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="6dc4f-3242">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3242">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-3243">次のコード例は、<xref:System.Windows.Forms.Control.SizeChanged> イベントを示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3243">The following code example demonstrates the <xref:System.Windows.Forms.Control.SizeChanged> event.</span></span> <span data-ttu-id="6dc4f-3244"><xref:System.Windows.Forms.Button> コントロールのインスタンスが用意されており、水平方向と垂直方向の両方にスケーリングできます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3244">An instance of a <xref:System.Windows.Forms.Button> control has been provided that can be scaled both horizontally and vertically.</span></span> <span data-ttu-id="6dc4f-3245"><xref:System.Windows.Forms.NumericUpDown> インスタンスは、水平方向と垂直方向のスケール値を提供します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3245">A <xref:System.Windows.Forms.NumericUpDown> instance provides the horizontal and vertical scale value.</span></span> <span data-ttu-id="6dc4f-3246">" **OK** " という名前の <xref:System.Windows.Forms.Button> インスタンスは、<xref:System.Windows.Forms.Button> コントロールインスタンスのスケール値を設定するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3246">The <xref:System.Windows.Forms.Button> instance named **OK** is used to set the scale values for the <xref:System.Windows.Forms.Button> control instance.</span></span> <span data-ttu-id="6dc4f-3247">コントロールのサイズが変更されるたびに、コントロールの <xref:System.Windows.Forms.Control.SizeChanged> イベントに関連付けられているイベントハンドラーが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3247">Whenever the size of the control changes, the event handler associated with the <xref:System.Windows.Forms.Control.SizeChanged> event of the control is called.</span></span> <span data-ttu-id="6dc4f-3248">このイベントハンドラーは、コントロールのサイズが変更されたことを示すメッセージボックスを表示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3248">This event handler displays a message box indicating that the size of the control has changed.</span></span>  
  
 [!code-cpp[Control_Scale1#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_Scale1/CPP/control_scale1.cpp#2)]
 [!code-csharp[Control_Scale1#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_Scale1/CS/control_scale1.cs#2)]
 [!code-vb[Control_Scale1#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_Scale1/VB/control_scale1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Size" />
        <altmember cref="E:System.Windows.Forms.Control.Resize" />
      </Docs>
    </Member>
    <Member MemberName="SizeFromClientSize">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Size SizeFromClientSize (System.Drawing.Size clientSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Drawing.Size SizeFromClientSize(valuetype System.Drawing.Size clientSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SizeFromClientSize(System.Drawing.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function SizeFromClientSize (clientSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Drawing::Size SizeFromClientSize(System::Drawing::Size clientSize);" />
      <MemberSignature Language="F#" Value="abstract member SizeFromClientSize : System.Drawing.Size -&gt; System.Drawing.Size&#xA;override this.SizeFromClientSize : System.Drawing.Size -&gt; System.Drawing.Size" Usage="control.SizeFromClientSize clientSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clientSize" Type="System.Drawing.Size" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="clientSize"><span data-ttu-id="6dc4f-3249">コントロールのクライアント領域の高さおよび幅を表す <see cref="T:System.Drawing.Size" /> 値。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3249">A <see cref="T:System.Drawing.Size" /> value representing the height and width of the control's client area.</span></span></param>
        <summary><span data-ttu-id="6dc4f-3250">クライアント領域の高さおよび幅からコントロール全体のサイズを決定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3250">Determines the size of the entire control from the height and width of its client area.</span></span></summary>
        <returns><span data-ttu-id="6dc4f-3251">コントロール全体の高さおよび幅を表す <see cref="T:System.Drawing.Size" /> 値。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3251">A <see cref="T:System.Drawing.Size" /> value representing the height and width of the entire control.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler StyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler StyleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.StyleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StyleChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ StyleChanged;" />
      <MemberSignature Language="F#" Value="member this.StyleChanged : EventHandler " Usage="member this.StyleChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-3252">コントロール スタイルが変更されると発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3252">Occurs when the control style changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3253"><xref:System.Windows.Forms.Control.StyleChanged> イベントは、<xref:System.Windows.Forms.ControlStyles> フラグが追加または変更された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3253">The <xref:System.Windows.Forms.Control.StyleChanged> event occurs when <xref:System.Windows.Forms.ControlStyles> flags have been added or changed.</span></span>  
  
 <span data-ttu-id="6dc4f-3254">このイベントは、コントロールのスタイルがプログラムの変更またはユーザーの操作によって変更された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3254">This event is raised if the control style is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="6dc4f-3255">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3255">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-3256">このメンバーの使用例を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3256">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="6dc4f-3257">この例では、イベントハンドラーは、<xref:System.Windows.Forms.Control.StyleChanged> イベントの発生を報告します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3257">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.StyleChanged> event.</span></span> <span data-ttu-id="6dc4f-3258">このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3258">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="6dc4f-3259">複数のイベントまたは頻繁に発生するイベントについてレポートするには、<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> を <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> に置き換えるか、複数行 <xref:System.Windows.Forms.TextBox>にメッセージを追加することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3259">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="6dc4f-3260">コード例を実行するには、<xref:System.Windows.Forms.Button> や <xref:System.Windows.Forms.ComboBox>などの <xref:System.Windows.Forms.Control>から継承する型のインスタンスを含むプロジェクトに貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3260">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="6dc4f-3261">次に、インスタンスに `Control1` という名前を付け、イベントハンドラーが <xref:System.Windows.Forms.Control.StyleChanged> イベントに関連付けられていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3261">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.StyleChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#68](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#68)]
 [!code-vb[System.Windows.Forms.EventExamples#68](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#68)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.ControlStyles" />
      </Docs>
    </Member>
    <Member MemberName="SuspendLayout">
      <MemberSignature Language="C#" Value="public void SuspendLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SuspendLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SuspendLayout" />
      <MemberSignature Language="VB.NET" Value="Public Sub SuspendLayout ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SuspendLayout();" />
      <MemberSignature Language="F#" Value="member this.SuspendLayout : unit -&gt; unit" Usage="control.SuspendLayout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6dc4f-3262">コントロールのレイアウト ロジックを一時的に中断します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3262">Temporarily suspends the layout logic for the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3263"><xref:System.Windows.Forms.Control.ResumeLayout%2A> メソッドが呼び出されるまで、コントロールのレイアウトロジックは中断されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3263">The layout logic of the control is suspended until the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method is called.</span></span>  
  
 <span data-ttu-id="6dc4f-3264"><xref:System.Windows.Forms.Control.SuspendLayout%2A> メソッドと <xref:System.Windows.Forms.Control.ResumeLayout%2A> メソッドは、コントロールの複数の属性を調整するときに、複数の <xref:System.Windows.Forms.Control.Layout> イベントを抑制するために一緒に使用されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3264">The <xref:System.Windows.Forms.Control.SuspendLayout%2A> and <xref:System.Windows.Forms.Control.ResumeLayout%2A> methods are used in tandem to suppress multiple <xref:System.Windows.Forms.Control.Layout> events while you adjust multiple attributes of the control.</span></span> <span data-ttu-id="6dc4f-3265">たとえば、通常は <xref:System.Windows.Forms.Control.SuspendLayout%2A> メソッドを呼び出した後、コントロールの <xref:System.Windows.Forms.Control.Size%2A>、<xref:System.Windows.Forms.Control.Location%2A>、<xref:System.Windows.Forms.Control.Anchor%2A>、または <xref:System.Windows.Forms.Control.Dock%2A> の各プロパティを設定してから、<xref:System.Windows.Forms.Control.ResumeLayout%2A> メソッドを呼び出して変更を有効にします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3265">For example, you would typically call the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method, then set the <xref:System.Windows.Forms.Control.Size%2A>, <xref:System.Windows.Forms.Control.Location%2A>, <xref:System.Windows.Forms.Control.Anchor%2A>, or <xref:System.Windows.Forms.Control.Dock%2A> properties of the control, and then call the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method to enable the changes to take effect.</span></span>  
  
 <span data-ttu-id="6dc4f-3266"><xref:System.Windows.Forms.Control.ResumeLayout%2A> を正常に呼び出すには、保留中の <xref:System.Windows.Forms.Control.SuspendLayout%2A> 呼び出しがない必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3266">There must be no pending calls to <xref:System.Windows.Forms.Control.SuspendLayout%2A> for <xref:System.Windows.Forms.Control.ResumeLayout%2A> to be successfully called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dc4f-3267">親コントロールに複数のコントロールを追加する場合は、追加するコントロールを初期化する前に、<xref:System.Windows.Forms.Control.SuspendLayout%2A> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3267">When adding several controls to a parent control, it is recommended that you call the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method before initializing the controls to be added.</span></span> <span data-ttu-id="6dc4f-3268">コントロールを親コントロールに追加した後、<xref:System.Windows.Forms.Control.ResumeLayout%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3268">After adding the controls to the parent control, call the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method.</span></span> <span data-ttu-id="6dc4f-3269">これにより、多くのコントロールでアプリケーションのパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3269">This will increase the performance of applications with many controls.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-3270">次のコード例では、フォームに2つのボタンを追加します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3270">The following code example adds two buttons to a form.</span></span> <span data-ttu-id="6dc4f-3271">この例では、<xref:System.Windows.Forms.Control.SuspendLayout%2A> メソッドと <xref:System.Windows.Forms.Control.ResumeLayout%2A> メソッドを使用して、ボタンの追加をトランザクションします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3271">The example transactions the addition of the buttons by using the <xref:System.Windows.Forms.Control.SuspendLayout%2A> and <xref:System.Windows.Forms.Control.ResumeLayout%2A> methods.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Members2#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CPP/controlmembers2.cpp#2)]
 [!code-csharp[Windows.Forms.Control Members2#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CS/controlmembers2.cs#2)]
 [!code-vb[Windows.Forms.Control Members2#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members2/VB/controlmembers2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.ResumeLayout" />
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Forms.IDropTarget.OnDragDrop">
      <MemberSignature Language="C#" Value="void IDropTarget.OnDragDrop (System.Windows.Forms.DragEventArgs drgEvent);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Forms.IDropTarget.OnDragDrop(class System.Windows.Forms.DragEventArgs drgEvent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragDrop(System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDragDrop (drgEvent As DragEventArgs) Implements IDropTarget.OnDragDrop" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Forms.IDropTarget.OnDragDrop(System::Windows::Forms::DragEventArgs ^ drgEvent) = System::Windows::Forms::IDropTarget::OnDragDrop;" />
      <MemberSignature Language="F#" Value="abstract member System.Windows.Forms.IDropTarget.OnDragDrop : System.Windows.Forms.DragEventArgs -&gt; unit&#xA;override this.System.Windows.Forms.IDropTarget.OnDragDrop : System.Windows.Forms.DragEventArgs -&gt; unit" Usage="control.System.Windows.Forms.IDropTarget.OnDragDrop drgEvent" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IDropTarget.OnDragDrop(System.Windows.Forms.DragEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drgEvent" Type="System.Windows.Forms.DragEventArgs" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="drgEvent"><span data-ttu-id="6dc4f-3272">イベント データを含んでいる <see cref="T:System.Windows.Forms.DragEventArgs" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3272">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-3273"><see cref="E:System.Windows.Forms.Control.DragDrop" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3273">Raises the <see cref="E:System.Windows.Forms.Control.DragDrop" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Forms.IDropTarget.OnDragEnter">
      <MemberSignature Language="C#" Value="void IDropTarget.OnDragEnter (System.Windows.Forms.DragEventArgs drgEvent);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Forms.IDropTarget.OnDragEnter(class System.Windows.Forms.DragEventArgs drgEvent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragEnter(System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDragEnter (drgEvent As DragEventArgs) Implements IDropTarget.OnDragEnter" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Forms.IDropTarget.OnDragEnter(System::Windows::Forms::DragEventArgs ^ drgEvent) = System::Windows::Forms::IDropTarget::OnDragEnter;" />
      <MemberSignature Language="F#" Value="abstract member System.Windows.Forms.IDropTarget.OnDragEnter : System.Windows.Forms.DragEventArgs -&gt; unit&#xA;override this.System.Windows.Forms.IDropTarget.OnDragEnter : System.Windows.Forms.DragEventArgs -&gt; unit" Usage="control.System.Windows.Forms.IDropTarget.OnDragEnter drgEvent" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IDropTarget.OnDragEnter(System.Windows.Forms.DragEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drgEvent" Type="System.Windows.Forms.DragEventArgs" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="drgEvent"><span data-ttu-id="6dc4f-3274">イベント データを含んでいる <see cref="T:System.Windows.Forms.DragEventArgs" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3274">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-3275"><see cref="E:System.Windows.Forms.Control.DragEnter" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3275">Raises the <see cref="E:System.Windows.Forms.Control.DragEnter" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Forms.IDropTarget.OnDragLeave">
      <MemberSignature Language="C#" Value="void IDropTarget.OnDragLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Forms.IDropTarget.OnDragLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragLeave(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDragLeave (e As EventArgs) Implements IDropTarget.OnDragLeave" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Forms.IDropTarget.OnDragLeave(EventArgs ^ e) = System::Windows::Forms::IDropTarget::OnDragLeave;" />
      <MemberSignature Language="F#" Value="abstract member System.Windows.Forms.IDropTarget.OnDragLeave : EventArgs -&gt; unit&#xA;override this.System.Windows.Forms.IDropTarget.OnDragLeave : EventArgs -&gt; unit" Usage="control.System.Windows.Forms.IDropTarget.OnDragLeave e" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IDropTarget.OnDragLeave(System.EventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6dc4f-3276">イベント データを含んでいる <see cref="T:System.EventArgs" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3276">A <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-3277"><see cref="E:System.Windows.Forms.Control.DragLeave" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3277">Raises the <see cref="E:System.Windows.Forms.Control.DragLeave" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Forms.IDropTarget.OnDragOver">
      <MemberSignature Language="C#" Value="void IDropTarget.OnDragOver (System.Windows.Forms.DragEventArgs drgEvent);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Forms.IDropTarget.OnDragOver(class System.Windows.Forms.DragEventArgs drgEvent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragOver(System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDragOver (drgEvent As DragEventArgs) Implements IDropTarget.OnDragOver" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Forms.IDropTarget.OnDragOver(System::Windows::Forms::DragEventArgs ^ drgEvent) = System::Windows::Forms::IDropTarget::OnDragOver;" />
      <MemberSignature Language="F#" Value="abstract member System.Windows.Forms.IDropTarget.OnDragOver : System.Windows.Forms.DragEventArgs -&gt; unit&#xA;override this.System.Windows.Forms.IDropTarget.OnDragOver : System.Windows.Forms.DragEventArgs -&gt; unit" Usage="control.System.Windows.Forms.IDropTarget.OnDragOver drgEvent" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IDropTarget.OnDragOver(System.Windows.Forms.DragEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drgEvent" Type="System.Windows.Forms.DragEventArgs" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="drgEvent"><span data-ttu-id="6dc4f-3278">イベント データを含んでいる <see cref="T:System.Windows.Forms.DragEventArgs" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3278">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6dc4f-3279"><see cref="E:System.Windows.Forms.Control.DragOver" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3279">Raises the <see cref="E:System.Windows.Forms.Control.DragOver" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SystemColorsChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SystemColorsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SystemColorsChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.SystemColorsChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SystemColorsChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SystemColorsChanged;" />
      <MemberSignature Language="F#" Value="member this.SystemColorsChanged : EventHandler " Usage="member this.SystemColorsChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-3280">システム カラーが変更されると発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3280">Occurs when the system colors change.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3281">このイベントは、プログラムによる変更またはユーザーの操作によって <xref:System.Drawing.SystemColors> が変更された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3281">This event is raised if the <xref:System.Drawing.SystemColors> is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="6dc4f-3282">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3282">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-3283">このメンバーの使用例を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3283">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="6dc4f-3284">この例では、イベントハンドラーは、<xref:System.Windows.Forms.Control.SystemColorsChanged> イベントの発生を報告します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3284">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.SystemColorsChanged> event.</span></span> <span data-ttu-id="6dc4f-3285">このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3285">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="6dc4f-3286">複数のイベントまたは頻繁に発生するイベントについてレポートするには、<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> を <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> に置き換えるか、複数行 <xref:System.Windows.Forms.TextBox>にメッセージを追加することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3286">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="6dc4f-3287">コード例を実行するには、<xref:System.Windows.Forms.Button> や <xref:System.Windows.Forms.ComboBox>などの <xref:System.Windows.Forms.Control>から継承する型のインスタンスを含むプロジェクトに貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3287">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="6dc4f-3288">次に、インスタンスに `Control1` という名前を付け、イベントハンドラーが <xref:System.Windows.Forms.Control.SystemColorsChanged> イベントに関連付けられていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3288">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.SystemColorsChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#69](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#69)]
 [!code-vb[System.Windows.Forms.EventExamples#69](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#69)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)" />
        <altmember cref="T:System.Drawing.SystemColors" />
      </Docs>
    </Member>
    <Member MemberName="TabIndex">
      <MemberSignature Language="C#" Value="public int TabIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TabIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.TabIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property TabIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TabIndex { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.TabIndex : int with get, set" Usage="System.Windows.Forms.Control.TabIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-3289">コンテナー内のコントロールのタブ オーダーを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3289">Gets or sets the tab order of the control within its container.</span></span></summary>
        <value><span data-ttu-id="6dc4f-3290">コンテナー内のコントロールのセット内にあるコントロールのインデックス値。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3290">The index value of the control within the set of controls within its container.</span></span> <span data-ttu-id="6dc4f-3291">コンテナー内のコントロールは、タブ オーダーに含まれます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3291">The controls in the container are included in the tab order.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3292">タブインデックスは、0以上の任意の有効な整数で構成できます。これより小さい数値は、タブオーダーの前にあります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3292">A tab index can consist of any valid integer greater than or equal to zero, lower numbers being earlier in the tab order.</span></span> <span data-ttu-id="6dc4f-3293">同じ親コントロールに対して複数のコントロールが同じタブインデックスを持つ場合は、コントロールの z オーダーによって、コントロールを順番に切り替える順序が決定されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3293">If more than one control on the same parent control has the same tab index, the z-order of the controls determines the order to cycle through the controls.</span></span>  
  
 <span data-ttu-id="6dc4f-3294">コントロールがタブオーダーに含まれるようにするには、その <xref:System.Windows.Forms.Control.TabStop%2A> プロパティを `true`に設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3294">For a control to be included in the tab order, its <xref:System.Windows.Forms.Control.TabStop%2A> property must be set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-3295">次のコード例では、フォームに <xref:System.Windows.Forms.Button> を追加し、その共通プロパティのいくつかを設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3295">The following code example adds a <xref:System.Windows.Forms.Button> to a form and sets some of its common properties.</span></span> <span data-ttu-id="6dc4f-3296">この例では、フォームのサイズが変更されたときの相対位置を維持できるように、ボタンをフォームの右下隅に固定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3296">The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized.</span></span> <span data-ttu-id="6dc4f-3297">次に、<xref:System.Windows.Forms.Control.BackgroundImage%2A> を設定し、ボタンのサイズを <xref:System.Drawing.Image>と同じサイズに変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3297">Next it sets the <xref:System.Windows.Forms.Control.BackgroundImage%2A> and resizes the button to the same size as the <xref:System.Drawing.Image>.</span></span> <span data-ttu-id="6dc4f-3298">この例では、<xref:System.Windows.Forms.Control.TabStop%2A> を `true` に設定し、<xref:System.Windows.Forms.Control.TabIndex%2A> プロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3298">The example then sets the <xref:System.Windows.Forms.Control.TabStop%2A> to `true` and sets the <xref:System.Windows.Forms.Control.TabIndex%2A> property.</span></span> <span data-ttu-id="6dc4f-3299">最後に、ボタンの <xref:System.Windows.Forms.Control.Click> イベントを処理するイベントハンドラーを追加します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3299">Lastly, it adds an event handler to handle the <xref:System.Windows.Forms.Control.Click> event of the button.</span></span> <span data-ttu-id="6dc4f-3300">この例では、`imageList1`という名前の <xref:System.Windows.Forms.ImageList> が必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3300">This example requires that you have an <xref:System.Windows.Forms.ImageList> named `imageList1`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#3)]
 [!code-csharp[Windows.Forms.Control Properties#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#3)]
 [!code-vb[Windows.Forms.Control Properties#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.UpdateZOrder" />
        <altmember cref="P:System.Windows.Forms.Control.TabStop" />
      </Docs>
    </Member>
    <Member MemberName="TabIndexChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TabIndexChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TabIndexChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.TabIndexChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TabIndexChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TabIndexChanged;" />
      <MemberSignature Language="F#" Value="member this.TabIndexChanged : EventHandler " Usage="member this.TabIndexChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-3301"><see cref="P:System.Windows.Forms.Control.TabIndex" /> プロパティの値が変化すると発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3301">Occurs when the <see cref="P:System.Windows.Forms.Control.TabIndex" /> property value changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3302">このイベントは、プログラムによる変更またはユーザーの操作によって <xref:System.Windows.Forms.Control.TabIndex%2A> プロパティが変更された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3302">This event is raised if the <xref:System.Windows.Forms.Control.TabIndex%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="6dc4f-3303">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3303">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-3304">このメンバーの使用例を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3304">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="6dc4f-3305">この例では、イベントハンドラーは、<xref:System.Windows.Forms.Control.TabIndexChanged> イベントの発生を報告します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3305">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.TabIndexChanged> event.</span></span> <span data-ttu-id="6dc4f-3306">このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3306">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="6dc4f-3307">複数のイベントまたは頻繁に発生するイベントについてレポートするには、<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> を <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> に置き換えるか、複数行 <xref:System.Windows.Forms.TextBox>にメッセージを追加することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3307">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="6dc4f-3308">コード例を実行するには、<xref:System.Windows.Forms.Button> や <xref:System.Windows.Forms.ComboBox>などの <xref:System.Windows.Forms.Control>から継承する型のインスタンスを含むプロジェクトに貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3308">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="6dc4f-3309">次に、インスタンスに `Control1` という名前を付け、イベントハンドラーが <xref:System.Windows.Forms.Control.TabIndexChanged> イベントに関連付けられていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3309">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.TabIndexChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#25](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#25)]
 [!code-vb[System.Windows.Forms.EventExamples#25](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.TabIndex" />
      </Docs>
    </Member>
    <Member MemberName="TabStop">
      <MemberSignature Language="C#" Value="public bool TabStop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TabStop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.TabStop" />
      <MemberSignature Language="VB.NET" Value="Public Property TabStop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TabStop { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.TabStop : bool with get, set" Usage="System.Windows.Forms.Control.TabStop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-516)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-3310">ユーザーが Tab キーを使用することによってこのコントロールにフォーカスを移すことができるかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3310">Gets or sets a value indicating whether the user can give the focus to this control using the TAB key.</span></span></summary>
        <value><span data-ttu-id="6dc4f-3311">ユーザーが Tab キーを使用してコントロールにフォーカスを移すことができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3311"><see langword="true" /> if the user can give the focus to the control using the TAB key; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6dc4f-3312">既定では、 <see langword="true" />です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3312">The default is <see langword="true" />.</span></span>  
  
 <block subset="none" type="note"><para>  
 <span data-ttu-id="6dc4f-3313"><see langword="true" /> クラスのインスタンスの場合、このプロパティは必ず <see cref="T:System.Windows.Forms.Form" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3313">This property will always return <see langword="true" /> for an instance of the <see cref="T:System.Windows.Forms.Form" /> class.</span></span>  
  
</para></block></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3314">ユーザーが TAB キーを押すと、入力フォーカスがタブオーダーの次のコントロールに設定されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3314">When the user presses the TAB key, the input focus is set to the next control in the tab order.</span></span> <span data-ttu-id="6dc4f-3315">`false` の <xref:System.Windows.Forms.Control.TabStop%2A> プロパティ値を持つコントロールは、タブオーダーのコントロールのコレクションに含まれません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3315">Controls with the <xref:System.Windows.Forms.Control.TabStop%2A> property value of `false` are not included in the collection of controls in the tab order.</span></span> <span data-ttu-id="6dc4f-3316">タブオーダーを操作するには、コントロールの <xref:System.Windows.Forms.Control.TabIndex%2A> プロパティ値を設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3316">The tab order can be manipulated by setting the control's <xref:System.Windows.Forms.Control.TabIndex%2A> property value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-3317">次のコード例では、フォームに <xref:System.Windows.Forms.Button> を追加し、その共通プロパティのいくつかを設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3317">The following code example adds a <xref:System.Windows.Forms.Button> to a form and sets some of its common properties.</span></span> <span data-ttu-id="6dc4f-3318">この例では、フォームのサイズが変更されたときの相対位置を維持できるように、ボタンをフォームの右下隅に固定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3318">The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized.</span></span> <span data-ttu-id="6dc4f-3319">次に、<xref:System.Windows.Forms.Control.BackgroundImage%2A> を設定し、ボタンのサイズを <xref:System.Drawing.Image>と同じサイズに変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3319">Next it sets the <xref:System.Windows.Forms.Control.BackgroundImage%2A> and resizes the button to the same size as the <xref:System.Drawing.Image>.</span></span> <span data-ttu-id="6dc4f-3320">この例では、<xref:System.Windows.Forms.Control.TabStop%2A> を `true` に設定し、<xref:System.Windows.Forms.Control.TabIndex%2A> プロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3320">The example then sets the <xref:System.Windows.Forms.Control.TabStop%2A> to `true` and sets the <xref:System.Windows.Forms.Control.TabIndex%2A> property.</span></span> <span data-ttu-id="6dc4f-3321">最後に、ボタンの <xref:System.Windows.Forms.Control.Click> イベントを処理するイベントハンドラーを追加します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3321">Lastly, it adds an event handler to handle the <xref:System.Windows.Forms.Control.Click> event of the button.</span></span> <span data-ttu-id="6dc4f-3322">この例では、`imageList1`という名前の <xref:System.Windows.Forms.ImageList> が必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3322">This example requires that you have an <xref:System.Windows.Forms.ImageList> named `imageList1`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#3)]
 [!code-csharp[Windows.Forms.Control Properties#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#3)]
 [!code-vb[Windows.Forms.Control Properties#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.TabIndex" />
      </Docs>
    </Member>
    <Member MemberName="TabStopChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TabStopChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TabStopChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.TabStopChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TabStopChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TabStopChanged;" />
      <MemberSignature Language="F#" Value="member this.TabStopChanged : EventHandler " Usage="member this.TabStopChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-3323"><see cref="P:System.Windows.Forms.Control.TabStop" /> プロパティの値が変化すると発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3323">Occurs when the <see cref="P:System.Windows.Forms.Control.TabStop" /> property value changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3324">このイベントは、プログラムによる変更またはユーザーの操作によって <xref:System.Windows.Forms.Control.TabStop%2A> プロパティが変更された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3324">This event is raised if the <xref:System.Windows.Forms.Control.TabStop%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="6dc4f-3325">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3325">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-3326">このメンバーの使用例を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3326">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="6dc4f-3327">この例では、イベントハンドラーは、<xref:System.Windows.Forms.Control.TabStopChanged> イベントの発生を報告します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3327">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.TabStopChanged> event.</span></span> <span data-ttu-id="6dc4f-3328">このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3328">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="6dc4f-3329">複数のイベントまたは頻繁に発生するイベントについてレポートするには、<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> を <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> に置き換えるか、複数行 <xref:System.Windows.Forms.TextBox>にメッセージを追加することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3329">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="6dc4f-3330">コード例を実行するには、<xref:System.Windows.Forms.Button> や <xref:System.Windows.Forms.ComboBox>などの <xref:System.Windows.Forms.Control>から継承する型のインスタンスを含むプロジェクトに貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3330">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="6dc4f-3331">次に、インスタンスに `Control1` という名前を付け、イベントハンドラーが <xref:System.Windows.Forms.Control.TabStopChanged> イベントに関連付けられていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3331">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.TabStopChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#26](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#26)]
 [!code-vb[System.Windows.Forms.EventExamples#26](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.TabStop" />
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.Forms.Control.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.StringConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-3332">コントロールに関するデータを格納するオブジェクトを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3332">Gets or sets the object that contains data about the control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-3333">コントロールに関するデータを格納している <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3333">An <see cref="T:System.Object" /> that contains data about the control.</span></span> <span data-ttu-id="6dc4f-3334">既定では、 <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3334">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3335"><xref:System.Object> クラスから派生した型は、このプロパティに割り当てることができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3335">Any type derived from the <xref:System.Object> class can be assigned to this property.</span></span> <span data-ttu-id="6dc4f-3336"><xref:System.Windows.Forms.Control.Tag%2A> プロパティが Windows フォームデザイナーで設定されている場合は、テキストのみを割り当てることができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3336">If the <xref:System.Windows.Forms.Control.Tag%2A> property is set through the Windows Forms designer, only text can be assigned.</span></span>  
  
 <span data-ttu-id="6dc4f-3337"><xref:System.Windows.Forms.Control.Tag%2A> プロパティの一般的な用途は、コントロールに密接に関連付けられたデータを格納することです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3337">A common use for the <xref:System.Windows.Forms.Control.Tag%2A> property is to store data that is closely associated with the control.</span></span> <span data-ttu-id="6dc4f-3338">たとえば、顧客に関する情報を表示するコントロールがある場合、そのコントロールの <xref:System.Windows.Forms.Control.Tag%2A> プロパティに顧客の注文履歴を含む <xref:System.Data.DataSet> を格納して、データにすばやくアクセスできるようにすることができます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3338">For example, if you have a control that displays information about a customer, you might store a <xref:System.Data.DataSet> that contains the customer's order history in that control's <xref:System.Windows.Forms.Control.Tag%2A> property so the data can be accessed quickly.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-3339">次のコード例では、フォームを表示し、<xref:System.Windows.Forms.Control.Tag%2A> プロパティに `Customer` を格納します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3339">The following code example displays a form and stores a `Customer` in its <xref:System.Windows.Forms.Control.Tag%2A> property.</span></span> <span data-ttu-id="6dc4f-3340">この例では、`CustomerForm` という名前の <xref:System.Windows.Forms.Form> から派生したクラスを定義し、`Customer`を定義している必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3340">This example requires that you have defined a class that derives from <xref:System.Windows.Forms.Form> named `CustomerForm` and that you have defined a `Customer`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Members2#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CPP/controlmembers2.cpp#3)]
 [!code-csharp[Windows.Forms.Control Members2#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CS/controlmembers2.cs#3)]
 [!code-vb[Windows.Forms.Control Members2#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members2/VB/controlmembers2.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public virtual string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Windows.Forms.Control.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-517)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-3341">このコントロールに関連付けられているテキストを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3341">Gets or sets the text associated with this control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-3342">このコントロールに関連付けられているテキスト。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3342">The text associated with this control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3343">コントロールの <xref:System.Windows.Forms.Control.Text%2A> プロパティは、各派生クラスによって異なる方法で使用されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3343">The <xref:System.Windows.Forms.Control.Text%2A> property of the control is used differently by each derived class.</span></span> <span data-ttu-id="6dc4f-3344">たとえば、<xref:System.Windows.Forms.Form> の <xref:System.Windows.Forms.Control.Text%2A> プロパティは、フォームの上部にあるタイトルバーに表示され、文字数が非常に小さいため、通常はアプリケーション名またはドキュメント名が表示されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3344">For example the <xref:System.Windows.Forms.Control.Text%2A> property of a <xref:System.Windows.Forms.Form> is displayed in the title bar at the top of the form, is fairly small in character count, and usually displays the application or document name.</span></span> <span data-ttu-id="6dc4f-3345">ただし、<xref:System.Windows.Forms.RichTextBox> の <xref:System.Windows.Forms.Control.Text%2A> プロパティは大きくなる可能性があり、テキストの書式設定に使用される非表示の文字が多数含まれることがあります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3345">However, the <xref:System.Windows.Forms.Control.Text%2A> property of a <xref:System.Windows.Forms.RichTextBox> can be large and can include numerous nonvisual characters used to format the text.</span></span> <span data-ttu-id="6dc4f-3346">たとえば、<xref:System.Windows.Forms.RichTextBox> に表示されるテキストは、<xref:System.Drawing.Font> プロパティを調整するか、テキストを配置するためのスペースまたはタブ文字を追加することによって書式設定できます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3346">For example, the text displayed in a <xref:System.Windows.Forms.RichTextBox> can be formatted by adjusting the <xref:System.Drawing.Font> properties, or by the addition of spaces or tab characters to align the text.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-3347">次のコード例では、<xref:System.Windows.Forms.GroupBox> を作成し、その共通プロパティのいくつかを設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3347">The following code example creates a <xref:System.Windows.Forms.GroupBox> and sets some of its common properties.</span></span> <span data-ttu-id="6dc4f-3348">この例では、<xref:System.Windows.Forms.TextBox> を作成し、その <xref:System.Windows.Forms.Control.Location%2A> をグループボックス内に設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3348">The example creates a <xref:System.Windows.Forms.TextBox> and sets its <xref:System.Windows.Forms.Control.Location%2A> within the group box.</span></span> <span data-ttu-id="6dc4f-3349">次に、グループボックスの <xref:System.Windows.Forms.Control.Text%2A> プロパティを設定し、グループボックスをフォームの上部にドッキングします。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3349">Next, it sets the <xref:System.Windows.Forms.Control.Text%2A> property of the group box, and docks the group box to the top of the form.</span></span> <span data-ttu-id="6dc4f-3350">最後に、[<xref:System.Windows.Forms.Control.Enabled%2A>] プロパティを [`false`] に設定して、グループボックスを無効にします。これにより、[グループ] ボックスに含まれるすべてのコントロールが無効になります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3350">Lastly, it disables the group box by setting the <xref:System.Windows.Forms.Control.Enabled%2A> property to `false`, which causes all controls contained within the group box to be disabled.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#2)]
 [!code-csharp[Windows.Forms.Control Properties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#2)]
 [!code-vb[Windows.Forms.Control Properties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-3351">派生クラスの <see cref="P:System.Windows.Forms.Control.Text" /> プロパティをオーバーライドする場合は、基本クラスの <see cref="P:System.Windows.Forms.Control.Text" /> プロパティを使用して、基本実装を拡張します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3351">When overriding the <see cref="P:System.Windows.Forms.Control.Text" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.Text" /> property to extend the base implementation.</span></span> <span data-ttu-id="6dc4f-3352">それ以外の場合は、すべての実装を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3352">Otherwise, you must provide all the implementation.</span></span> <span data-ttu-id="6dc4f-3353"><see cref="P:System.Windows.Forms.Control.Text" /> プロパティの <see langword="get" /> と <see langword="set" /> の両方のアクセサーをオーバーライドする必要はありません。必要に応じて、オーバーライドできるのは1つだけです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3353">You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.Text" /> property; you can override only one if needed.</span></span></para></block>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.TextLength" />
      </Docs>
    </Member>
    <Member MemberName="TextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.TextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TextChanged;" />
      <MemberSignature Language="F#" Value="member this.TextChanged : EventHandler " Usage="member this.TextChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-3354"><see cref="P:System.Windows.Forms.Control.Text" /> プロパティの値が変化すると発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3354">Occurs when the <see cref="P:System.Windows.Forms.Control.Text" /> property value changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3355">このイベントは、プログラムによる変更またはユーザーの操作によって <xref:System.Windows.Forms.Control.Text%2A> プロパティが変更された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3355">This event is raised if the <xref:System.Windows.Forms.Control.Text%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="6dc4f-3356">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3356">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-3357">次のコード例では、通貨データを表示する <xref:System.Windows.Forms.TextBox> の <xref:System.Windows.Forms.Control.ForeColor%2A> を変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3357">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data.</span></span> <span data-ttu-id="6dc4f-3358">この例では、テキストを10進数に変換し、数値が負の場合は <xref:System.Windows.Forms.Control.ForeColor%2A> を <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> に変更し、数値が正の値の場合は <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> に変更します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3358">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="6dc4f-3359">この例では、<xref:System.Windows.Forms.TextBox>を含む <xref:System.Windows.Forms.Form> が必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3359">This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CPP/propertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CS/propertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/VB/propertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Text" />
      </Docs>
    </Member>
    <Member MemberName="Top">
      <MemberSignature Language="C#" Value="public int Top { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Top" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Top" />
      <MemberSignature Language="VB.NET" Value="Public Property Top As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Top { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Top : int with get, set" Usage="System.Windows.Forms.Control.Top" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-3360">コントロールの上端とコンテナーのクライアント領域の上端の間の距離をピクセル単位で取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3360">Gets or sets the distance, in pixels, between the top edge of the control and the top edge of its container's client area.</span></span></summary>
        <value><span data-ttu-id="6dc4f-3361"><see cref="T:System.Int32" /> は、コントロールの下端とコンテナーのクライアント領域の上端の間の距離 (ピクセル単位) を示します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3361">An <see cref="T:System.Int32" /> representing the distance, in pixels, between the bottom edge of the control and the top edge of its container's client area.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3362"><xref:System.Windows.Forms.Control.Top%2A> プロパティ値は、コントロールの <xref:System.Windows.Forms.Control.Location%2A> プロパティ値の <xref:System.Drawing.Point.Y%2A?displayProperty=nameWithType> プロパティと同じです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3362">The <xref:System.Windows.Forms.Control.Top%2A> property value is equivalent to the <xref:System.Drawing.Point.Y%2A?displayProperty=nameWithType> property of the <xref:System.Windows.Forms.Control.Location%2A> property value of the control.</span></span>  
  
 <span data-ttu-id="6dc4f-3363"><xref:System.Windows.Forms.Control.Height%2A> プロパティと <xref:System.Windows.Forms.Control.Top%2A> プロパティ値を変更すると、コントロールの <xref:System.Windows.Forms.Control.Bottom%2A> プロパティ値が変更されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3363">Changes made to the <xref:System.Windows.Forms.Control.Height%2A> and <xref:System.Windows.Forms.Control.Top%2A> property values cause the <xref:System.Windows.Forms.Control.Bottom%2A> property value of the control to change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-3364">次のコード例では、フォームに3つの <xref:System.Windows.Forms.Button> コントロールを作成し、さまざまなサイズ関連のプロパティと場所に関連するプロパティを使用して、サイズと位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3364">The following code example creates three <xref:System.Windows.Forms.Button> controls on a form and sets their size and location by using the various size-related and location-related properties.</span></span> <span data-ttu-id="6dc4f-3365">この例では、幅と高さが300ピクセル以上の <xref:System.Windows.Forms.Form> が必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3365">This example requires that you have a <xref:System.Windows.Forms.Form> that has a width and height of at least 300 pixels.</span></span>  
  
 [!code-cpp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CPP/controlsizelocation.cpp#1)]
 [!code-csharp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CS/controlsizelocation.cs#1)]
 [!code-vb[Windows.Forms.Control SizeLocation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/VB/controlsizelocation.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Drawing.Point.Y" />
        <altmember cref="P:System.Windows.Forms.Control.Bottom" />
        <altmember cref="P:System.Windows.Forms.Control.Bounds" />
      </Docs>
    </Member>
    <Member MemberName="TopLevelControl">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control TopLevelControl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control TopLevelControl" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.TopLevelControl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TopLevelControl As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ TopLevelControl { System::Windows::Forms::Control ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TopLevelControl : System.Windows.Forms.Control" Usage="System.Windows.Forms.Control.TopLevelControl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-3366">別の Windows フォーム コントロールを親として持たない親コントロールを取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3366">Gets the parent control that is not parented by another Windows Forms control.</span></span> <span data-ttu-id="6dc4f-3367">一般的に、これは、コントロールを格納している最も外側の <see cref="T:System.Windows.Forms.Form" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3367">Typically, this is the outermost <see cref="T:System.Windows.Forms.Form" /> that the control is contained in.</span></span></summary>
        <value><span data-ttu-id="6dc4f-3368">現在のコントロールを格納しているトップレベル コントロールを表す <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3368">The <see cref="T:System.Windows.Forms.Control" /> that represents the top-level control that contains the current control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3369">最上位のコントロールは、親コントロールとして定義され、別の Windows フォームコントロールの親になることはありません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3369">The top-level control is defined as the parent control that is not parented by another Windows Forms control.</span></span> <span data-ttu-id="6dc4f-3370">一般的に、これは、コントロールを格納している最も外側の <xref:System.Windows.Forms.Form> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3370">Typically, this is the outermost <xref:System.Windows.Forms.Form> that the control is contained in.</span></span> <span data-ttu-id="6dc4f-3371">たとえば、コントロールが MDI 子 <xref:System.Windows.Forms.Form>に含まれている場合、トップレベルコントロールは、マルチドキュメントインターフェイス (MDI) 親 <xref:System.Windows.Forms.Form>になります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3371">For example, if the control is contained on an MDI child <xref:System.Windows.Forms.Form>, then the top-level control is the Multiple Document Interface (MDI) parent <xref:System.Windows.Forms.Form>.</span></span> <span data-ttu-id="6dc4f-3372">コントロールが <xref:System.Windows.Forms.Form>の親になっていない場合、このプロパティは `null`を返します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3372">If the control is not parented on a <xref:System.Windows.Forms.Form>, this property will return `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public void Update ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Update() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Update" />
      <MemberSignature Language="VB.NET" Value="Public Sub Update ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Update();" />
      <MemberSignature Language="F#" Value="member this.Update : unit -&gt; unit" Usage="control.Update " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6dc4f-3373">コントロールによって、クライアント領域内の無効化された領域が再描画されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3373">Causes the control to redraw the invalidated regions within its client area.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3374">すべての保留中の描画要求を実行します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3374">Executes any pending requests for painting.</span></span>  
  
 <span data-ttu-id="6dc4f-3375">フォームとその内容を再描画するには、次の2つの方法があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3375">There are two ways to repaint a form and its contents:</span></span>  
  
-   <span data-ttu-id="6dc4f-3376"><xref:System.Windows.Forms.Control.Update%2A> メソッドを使用して、<xref:System.Windows.Forms.Control.Invalidate%2A> メソッドのオーバーロードのいずれかを使用できます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3376">You can use one of the overloads of the <xref:System.Windows.Forms.Control.Invalidate%2A> method with the <xref:System.Windows.Forms.Control.Update%2A> method.</span></span>  
  
-   <span data-ttu-id="6dc4f-3377"><xref:System.Windows.Forms.Control.Refresh%2A> メソッドを呼び出すことができます。これにより、コントロール自体とそのすべての子が強制的に再描画されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3377">You can call the <xref:System.Windows.Forms.Control.Refresh%2A> method, which forces the control to redraw itself and all its children.</span></span> <span data-ttu-id="6dc4f-3378">これは、<xref:System.Windows.Forms.Control.Invalidate%2A> メソッドを `true` に設定し、それを <xref:System.Windows.Forms.Control.Update%2A>と共に使用することと同じです。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3378">This is equivalent to setting the <xref:System.Windows.Forms.Control.Invalidate%2A> method to `true` and using it with <xref:System.Windows.Forms.Control.Update%2A>.</span></span>  
  
 <span data-ttu-id="6dc4f-3379"><xref:System.Windows.Forms.Control.Invalidate%2A> メソッドは、描画または再描画される内容を制御します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3379">The <xref:System.Windows.Forms.Control.Invalidate%2A> method governs what gets painted or repainted.</span></span> <span data-ttu-id="6dc4f-3380"><xref:System.Windows.Forms.Control.Update%2A> メソッドは、描画または再描画が行われるタイミングを制御します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3380">The <xref:System.Windows.Forms.Control.Update%2A> method governs when the painting or repainting occurs.</span></span> <span data-ttu-id="6dc4f-3381"><xref:System.Windows.Forms.Control.Refresh%2A>を呼び出すのではなく、<xref:System.Windows.Forms.Control.Invalidate%2A> と <xref:System.Windows.Forms.Control.Update%2A> のメソッドを一緒に使用する場合、再描画される内容は、使用する <xref:System.Windows.Forms.Control.Invalidate%2A> のオーバーロードによって異なります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3381">If you use the <xref:System.Windows.Forms.Control.Invalidate%2A> and <xref:System.Windows.Forms.Control.Update%2A> methods together rather than calling <xref:System.Windows.Forms.Control.Refresh%2A>, what gets repainted depends on which overload of <xref:System.Windows.Forms.Control.Invalidate%2A> you use.</span></span> <span data-ttu-id="6dc4f-3382"><xref:System.Windows.Forms.Control.Update%2A> メソッドは、コントロールを直ちに描画するだけで済みますが、<xref:System.Windows.Forms.Control.Invalidate%2A> メソッドは、<xref:System.Windows.Forms.Control.Update%2A> メソッドを呼び出したときに描画される内容を制御します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3382">The <xref:System.Windows.Forms.Control.Update%2A> method just forces the control to be painted immediately, but the <xref:System.Windows.Forms.Control.Invalidate%2A> method governs what gets painted when you call the <xref:System.Windows.Forms.Control.Update%2A> method.</span></span>  
  
 <span data-ttu-id="6dc4f-3383">詳細については、 [WM_PAINT](/windows/win32/gdi/wm-paint)のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3383">For more information, see the [WM_PAINT](/windows/win32/gdi/wm-paint) topic.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.ClientRectangle" />
        <altmember cref="P:System.Windows.Forms.Control.ClientSize" />
        <altmember cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="UpdateBounds">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6dc4f-3384">コントロールの範囲を更新します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3384">Updates the bounds of the control.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UpdateBounds">
      <MemberSignature Language="C#" Value="protected internal void UpdateBounds ();" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void UpdateBounds() cil managed" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.UpdateBounds" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub UpdateBounds ()" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void UpdateBounds();" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="member this.UpdateBounds : unit -&gt; unit" Usage="control.UpdateBounds " />
      <MemberSignature Language="C#" Value="protected void UpdateBounds ();" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UpdateBounds() cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Protected Sub UpdateBounds ()" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void UpdateBounds();" FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6dc4f-3385">現在のサイズと位置でコントロールの境界を更新します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3385">Updates the bounds of the control with the current size and location.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3386">コントロールの新しい <xref:System.Windows.Forms.Control.Size%2A> が前の <xref:System.Drawing.Size>と異なる場合は、<xref:System.Windows.Forms.Control.SizeChanged> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3386">If the new <xref:System.Windows.Forms.Control.Size%2A> of the control is different from the previous <xref:System.Drawing.Size>, the <xref:System.Windows.Forms.Control.SizeChanged> event is raised.</span></span> <span data-ttu-id="6dc4f-3387">同様に、コントロールの <xref:System.Windows.Forms.Control.Location%2A> が変更されると、<xref:System.Windows.Forms.Control.LocationChanged> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3387">Likewise, if the <xref:System.Windows.Forms.Control.Location%2A> of the control changes, the <xref:System.Windows.Forms.Control.LocationChanged> event is raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Size" />
        <altmember cref="P:System.Windows.Forms.Control.Location" />
      </Docs>
    </Member>
    <Member MemberName="UpdateBounds">
      <MemberSignature Language="C#" Value="protected void UpdateBounds (int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UpdateBounds(int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub UpdateBounds (x As Integer, y As Integer, width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void UpdateBounds(int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.UpdateBounds : int * int * int * int -&gt; unit" Usage="control.UpdateBounds (x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="6dc4f-3388">コントロールの <see cref="P:System.Drawing.Point.X" /> 座標。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3388">The <see cref="P:System.Drawing.Point.X" /> coordinate of the control.</span></span></param>
        <param name="y"><span data-ttu-id="6dc4f-3389">コントロールの <see cref="P:System.Drawing.Point.Y" /> 座標。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3389">The <see cref="P:System.Drawing.Point.Y" /> coordinate of the control.</span></span></param>
        <param name="width"><span data-ttu-id="6dc4f-3390">コントロールの <see cref="P:System.Drawing.Size.Width" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3390">The <see cref="P:System.Drawing.Size.Width" /> of the control.</span></span></param>
        <param name="height"><span data-ttu-id="6dc4f-3391">コントロールの <see cref="P:System.Drawing.Size.Height" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3391">The <see cref="P:System.Drawing.Size.Height" /> of the control.</span></span></param>
        <summary><span data-ttu-id="6dc4f-3392">コントロールの範囲を指定したサイズと位置で更新します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3392">Updates the bounds of the control with the specified size and location.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3393">コントロールの新しい <xref:System.Windows.Forms.Control.Size%2A> が前の <xref:System.Drawing.Size>と異なる場合は、<xref:System.Windows.Forms.Control.SizeChanged> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3393">If the new <xref:System.Windows.Forms.Control.Size%2A> of the control if different from the previous <xref:System.Drawing.Size>, the <xref:System.Windows.Forms.Control.SizeChanged> event is raised.</span></span> <span data-ttu-id="6dc4f-3394">同様に、コントロールの <xref:System.Windows.Forms.Control.Location%2A> が変更され、<xref:System.Windows.Forms.Control.LocationChanged> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3394">Likewise, is the <xref:System.Windows.Forms.Control.Location%2A> of the control changes, the <xref:System.Windows.Forms.Control.LocationChanged> event is raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Size" />
        <altmember cref="P:System.Windows.Forms.Control.Location" />
      </Docs>
    </Member>
    <Member MemberName="UpdateBounds">
      <MemberSignature Language="C#" Value="protected void UpdateBounds (int x, int y, int width, int height, int clientWidth, int clientHeight);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UpdateBounds(int32 x, int32 y, int32 width, int32 height, int32 clientWidth, int32 clientHeight) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub UpdateBounds (x As Integer, y As Integer, width As Integer, height As Integer, clientWidth As Integer, clientHeight As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void UpdateBounds(int x, int y, int width, int height, int clientWidth, int clientHeight);" />
      <MemberSignature Language="F#" Value="member this.UpdateBounds : int * int * int * int * int * int -&gt; unit" Usage="control.UpdateBounds (x, y, width, height, clientWidth, clientHeight)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="clientWidth" Type="System.Int32" />
        <Parameter Name="clientHeight" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="6dc4f-3395">コントロールの <see cref="P:System.Drawing.Point.X" /> 座標。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3395">The <see cref="P:System.Drawing.Point.X" /> coordinate of the control.</span></span></param>
        <param name="y"><span data-ttu-id="6dc4f-3396">コントロールの <see cref="P:System.Drawing.Point.Y" /> 座標。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3396">The <see cref="P:System.Drawing.Point.Y" /> coordinate of the control.</span></span></param>
        <param name="width"><span data-ttu-id="6dc4f-3397">コントロールの <see cref="P:System.Drawing.Size.Width" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3397">The <see cref="P:System.Drawing.Size.Width" /> of the control.</span></span></param>
        <param name="height"><span data-ttu-id="6dc4f-3398">コントロールの <see cref="P:System.Drawing.Size.Height" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3398">The <see cref="P:System.Drawing.Size.Height" /> of the control.</span></span></param>
        <param name="clientWidth"><span data-ttu-id="6dc4f-3399">コントロールのクライアント <see cref="P:System.Drawing.Size.Width" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3399">The client <see cref="P:System.Drawing.Size.Width" /> of the control.</span></span></param>
        <param name="clientHeight"><span data-ttu-id="6dc4f-3400">コントロールのクライアント <see cref="P:System.Drawing.Size.Height" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3400">The client <see cref="P:System.Drawing.Size.Height" /> of the control.</span></span></param>
        <summary><span data-ttu-id="6dc4f-3401">コントロールの範囲を指定したサイズ、位置、およびクライアント サイズで更新します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3401">Updates the bounds of the control with the specified size, location, and client size.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3402">コントロールの新しい <xref:System.Windows.Forms.Control.Size%2A> が前の <xref:System.Drawing.Size>と異なる場合は、<xref:System.Windows.Forms.Control.SizeChanged> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3402">If the new <xref:System.Windows.Forms.Control.Size%2A> of the control is different from the previous <xref:System.Drawing.Size>, the <xref:System.Windows.Forms.Control.SizeChanged> event is raised.</span></span> <span data-ttu-id="6dc4f-3403">同様に、コントロールの <xref:System.Windows.Forms.Control.Location%2A> が変更されると、<xref:System.Windows.Forms.Control.LocationChanged> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3403">Likewise, if the <xref:System.Windows.Forms.Control.Location%2A> of the control changes, the <xref:System.Windows.Forms.Control.LocationChanged> event is raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Size" />
        <altmember cref="P:System.Windows.Forms.Control.Location" />
        <altmember cref="P:System.Windows.Forms.Control.ClientRectangle" />
      </Docs>
    </Member>
    <Member MemberName="UpdateStyles">
      <MemberSignature Language="C#" Value="protected void UpdateStyles ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UpdateStyles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.UpdateStyles" />
      <MemberSignature Language="VB.NET" Value="Protected Sub UpdateStyles ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void UpdateStyles();" />
      <MemberSignature Language="F#" Value="member this.UpdateStyles : unit -&gt; unit" Usage="control.UpdateStyles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6dc4f-3404">割り当て済みのスタイルを強制的にコントロールに再適用します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3404">Forces the assigned styles to be reapplied to the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3405">このメソッドは、<xref:System.Windows.Forms.Control.CreateParams%2A> メソッドを呼び出して、適用するスタイルを取得します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3405">This method calls the <xref:System.Windows.Forms.Control.CreateParams%2A> method to get the styles to apply.</span></span> <span data-ttu-id="6dc4f-3406">コントロールの <xref:System.Windows.Forms.Control.CreateParams%2A> プロパティに割り当てられている <xref:System.Windows.Forms.CreateParams> の <xref:System.Windows.Forms.CreateParams.Style%2A> および <xref:System.Windows.Forms.CreateParams.ExStyle%2A> プロパティに割り当てられたスタイルは再適用されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3406">The styles assigned to the <xref:System.Windows.Forms.CreateParams.Style%2A> and <xref:System.Windows.Forms.CreateParams.ExStyle%2A> properties of the <xref:System.Windows.Forms.CreateParams> assigned to the control's <xref:System.Windows.Forms.Control.CreateParams%2A> property are reapplied.</span></span> <span data-ttu-id="6dc4f-3407">必要に応じて、スタイルの変更を反映するようにコントロールが再描画されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3407">The control is repainted to reflect the style changes if necessary.</span></span>  
  
 <span data-ttu-id="6dc4f-3408"><xref:System.Windows.Forms.Control.UpdateStyles%2A> メソッドは、<xref:System.Windows.Forms.Control.IsHandleCreated%2A> プロパティ値が `false`場合には効果がありません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3408">The <xref:System.Windows.Forms.Control.UpdateStyles%2A> method has no effect if the <xref:System.Windows.Forms.Control.IsHandleCreated%2A> property value is `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-3409">次のコード例では、<xref:System.Windows.Forms.Form> でダブルバッファリングを有効にし、変更を反映するようにスタイルを更新します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3409">The following code example enables double-buffering on a <xref:System.Windows.Forms.Form> and updates the styles to reflect the changes.</span></span>  
  
 [!code-cpp[Windows.Forms.ControlMembers6#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CPP/controlmembers6.cpp#3)]
 [!code-csharp[Windows.Forms.ControlMembers6#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CS/controlmembers6.cs#3)]
 [!code-vb[Windows.Forms.ControlMembers6#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/VB/controlmembers6.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.CreateParams" />
      </Docs>
    </Member>
    <Member MemberName="UpdateZOrder">
      <MemberSignature Language="C#" Value="protected void UpdateZOrder ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UpdateZOrder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.UpdateZOrder" />
      <MemberSignature Language="VB.NET" Value="Protected Sub UpdateZOrder ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void UpdateZOrder();" />
      <MemberSignature Language="F#" Value="member this.UpdateZOrder : unit -&gt; unit" Usage="control.UpdateZOrder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6dc4f-3410">コントロールを親の z オーダーで更新します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3410">Updates the control in its parent's z-order.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3411"><xref:System.Windows.Forms.Control.UpdateZOrder%2A> メソッドは、親コントロールの z オーダー内のコントロールの位置を更新します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3411">The <xref:System.Windows.Forms.Control.UpdateZOrder%2A> method updates the position of the control in its parent control's z-order.</span></span> <span data-ttu-id="6dc4f-3412">たとえば、このコントロールが、<xref:System.Windows.Forms.Control.ControlCollection>に追加された新しく作成されたコントロールの場合、z オーダーは、新しいコントロールが追加された状態で更新されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3412">For example, if this control is a newly created control that was added to a <xref:System.Windows.Forms.Control.ControlCollection>, the z-order is updated with the new control added to the back.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Control.ControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="UseWaitCursor">
      <MemberSignature Language="C#" Value="public bool UseWaitCursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseWaitCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.UseWaitCursor" />
      <MemberSignature Language="VB.NET" Value="Public Property UseWaitCursor As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseWaitCursor { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseWaitCursor : bool with get, set" Usage="System.Windows.Forms.Control.UseWaitCursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-3413">現在のコントロールおよびすべての子コントロールに待機カーソルを使用するかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3413">Gets or sets a value indicating whether to use the wait cursor for the current control and all child controls.</span></span></summary>
        <value><span data-ttu-id="6dc4f-3414">現在の子コントロールおよびすべての子コントロールに待機カーソルを使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3414"><see langword="true" /> to use the wait cursor for the current control and all child controls; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6dc4f-3415">既定では、 <see langword="false" />です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3415">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3416">非常に時間がかかる操作を実行するたびに、待機カーソルを使用します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3416">Use a wait cursor whenever you perform an operation that takes a noticeable amount of time.</span></span> <span data-ttu-id="6dc4f-3417">ただし、UI スレッドをブロックする操作によって、カーソルの変更もブロックされることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3417">However, note that operations that block the UI thread will also block a cursor change.</span></span> <span data-ttu-id="6dc4f-3418">そのため、このプロパティは、別のスレッドで時間のかかる操作を実行する場合にのみ使用してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3418">Therefore, this property should only be used when performing time-consuming operations in another thread.</span></span> <span data-ttu-id="6dc4f-3419">カーソルをグローバルに、またすぐに変更するには、<xref:System.Windows.Forms.Cursor.Current%2A> プロパティを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3419">To change the cursor globally and immediately, see the <xref:System.Windows.Forms.Cursor.Current%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validated">
      <MemberSignature Language="C#" Value="public event EventHandler Validated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Validated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Validated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Validated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Validated;" />
      <MemberSignature Language="F#" Value="member this.Validated : EventHandler " Usage="member this.Validated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-3420">コントロールの検証が終了すると発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3420">Occurs when the control is finished validating.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3421">キーボード (タブ、SHIFT + TAB など) を使用してフォーカスを変更した場合、<xref:System.Windows.Forms.Control.Select%2A> または <xref:System.Windows.Forms.Control.SelectNextControl%2A> メソッドを呼び出した場合、または <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> プロパティを現在のフォームに設定した場合、フォーカスイベントは次の順序で発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3421">When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> property to the current form, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 <span data-ttu-id="6dc4f-3422">マウスを使用するか <xref:System.Windows.Forms.Control.Focus%2A> メソッドを呼び出すことによってフォーカスを変更すると、フォーカスイベントは次の順序で発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3422">When you change the focus by using the mouse or by calling the <xref:System.Windows.Forms.Control.Focus%2A> method, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.LostFocus>  
  
4.  <xref:System.Windows.Forms.Control.Leave>  
  
5.  <xref:System.Windows.Forms.Control.Validating>  
  
6.  <xref:System.Windows.Forms.Control.Validated>  
  
 <span data-ttu-id="6dc4f-3423"><xref:System.Windows.Forms.Control.CausesValidation%2A> プロパティが `false`に設定されている場合、<xref:System.Windows.Forms.Control.Validating> および <xref:System.Windows.Forms.Control.Validated> イベントは抑制されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3423">If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.</span></span>  
  
 <span data-ttu-id="6dc4f-3424"><xref:System.ComponentModel.CancelEventArgs> の <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> プロパティが <xref:System.Windows.Forms.Control.Validating> イベントデリゲートで `true` に設定されている場合、通常は、<xref:System.Windows.Forms.Control.Validating> イベントの後に発生するすべてのイベントが抑制されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3424">If the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.ComponentModel.CancelEventArgs> is set to `true` in the <xref:System.Windows.Forms.Control.Validating> event delegate, all events that would usually occur after the <xref:System.Windows.Forms.Control.Validating> event are suppressed.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="6dc4f-3425"><xref:System.Windows.Forms.Control.Enter>、<xref:System.Windows.Forms.Control.GotFocus>、<xref:System.Windows.Forms.Control.Leave>、<xref:System.Windows.Forms.Control.LostFocus>、<xref:System.Windows.Forms.Control.Validating>、または <xref:System.Windows.Forms.Control.Validated> のイベントハンドラー内からフォーカスを設定しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3425">Do not attempt to set focus from within the <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>, <xref:System.Windows.Forms.Control.Validating>, or <xref:System.Windows.Forms.Control.Validated> event handlers.</span></span> <span data-ttu-id="6dc4f-3426">これにより、アプリケーションまたはオペレーティングシステムが応答を停止する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3426">Doing so can cause your application or the operating system to stop responding.</span></span> <span data-ttu-id="6dc4f-3427">詳細については、「 [WM_KILLFOCUS](/windows/win32/winmsg/wm-activateapp) 」トピックと、「 [About Messages and message Queues](/windows/win32/winmsg/about-messages-and-message-queues) 」トピックの「message デッドロック」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3427">For more information, see the [WM_KILLFOCUS](/windows/win32/winmsg/wm-activateapp) topic, and the "Message Deadlocks" section of the [About Messages and Message Queues](/windows/win32/winmsg/about-messages-and-message-queues) topic.</span></span>  
  
 <span data-ttu-id="6dc4f-3428">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3428">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-3429">次のコード例では、派生クラス <xref:System.Windows.Forms.TextBox> を使用して、ユーザーが入力する電子メールアドレスを検証します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3429">The following code example uses the derived class <xref:System.Windows.Forms.TextBox> and validates an email address that the user enters.</span></span> <span data-ttu-id="6dc4f-3430">電子メールアドレスが標準形式 ("@" and "") に含まれていない場合、検証は失敗し、<xref:System.Windows.Forms.ErrorProvider> アイコンが表示され、イベントは取り消されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3430">If the email address is not in the standard format (containing "@" and "."), the validation fails, an <xref:System.Windows.Forms.ErrorProvider> icon is displayed, and the event is canceled.</span></span> <span data-ttu-id="6dc4f-3431">この例では、<xref:System.Windows.Forms.TextBox> と <xref:System.Windows.Forms.ErrorProvider> コントロールがフォーム上に作成されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3431">This example requires that a <xref:System.Windows.Forms.TextBox> and <xref:System.Windows.Forms.ErrorProvider> control have been created on a form.</span></span>  
  
 [!code-cpp[Control.Validating#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Validating/CPP/validating.cpp#1)]
 [!code-csharp[Control.Validating#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Validating/CS/validating.cs#1)]
 [!code-vb[Control.Validating#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Validating/VB/validating.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.CausesValidation" />
        <altmember cref="E:System.Windows.Forms.Control.Validating" />
      </Docs>
    </Member>
    <Member MemberName="Validating">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.CancelEventHandler Validating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.CancelEventHandler Validating" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Validating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Validating As CancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::CancelEventHandler ^ Validating;" />
      <MemberSignature Language="F#" Value="member this.Validating : System.ComponentModel.CancelEventHandler " Usage="member this.Validating : System.ComponentModel.CancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.CancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-3432">コントロールが検証しているときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3432">Occurs when the control is validating.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3433">キーボード (タブ、SHIFT + TAB など) を使用してフォーカスを変更した場合、<xref:System.Windows.Forms.Control.Select%2A> または <xref:System.Windows.Forms.Control.SelectNextControl%2A> メソッドを呼び出した場合、または <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> プロパティを現在のフォームに設定した場合、フォーカスイベントは次の順序で発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3433">When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> property to the current form, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 <span data-ttu-id="6dc4f-3434">マウスを使用するか <xref:System.Windows.Forms.Control.Focus%2A> メソッドを呼び出すことによってフォーカスを変更すると、フォーカスイベントは次の順序で発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3434">When you change the focus by using the mouse or by calling the <xref:System.Windows.Forms.Control.Focus%2A> method, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.LostFocus>  
  
4.  <xref:System.Windows.Forms.Control.Leave>  
  
5.  <xref:System.Windows.Forms.Control.Validating>  
  
6.  <xref:System.Windows.Forms.Control.Validated>  
  
 <span data-ttu-id="6dc4f-3435"><xref:System.Windows.Forms.Control.CausesValidation%2A> プロパティが `false`に設定されている場合、<xref:System.Windows.Forms.Control.Validating> および <xref:System.Windows.Forms.Control.Validated> イベントは抑制されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3435">If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.</span></span>  
  
 <span data-ttu-id="6dc4f-3436"><xref:System.ComponentModel.CancelEventArgs> の <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> プロパティが <xref:System.Windows.Forms.Control.Validating> イベントデリゲートで `true` に設定されている場合、通常は、<xref:System.Windows.Forms.Control.Validating> イベントの後に発生するすべてのイベントが抑制されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3436">If the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.ComponentModel.CancelEventArgs> is set to `true` in the <xref:System.Windows.Forms.Control.Validating> event delegate, all events that would usually occur after the <xref:System.Windows.Forms.Control.Validating> event are suppressed.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="6dc4f-3437"><xref:System.Windows.Forms.Control.Enter>、<xref:System.Windows.Forms.Control.GotFocus>、<xref:System.Windows.Forms.Control.Leave>、<xref:System.Windows.Forms.Control.LostFocus>、<xref:System.Windows.Forms.Control.Validating>、または <xref:System.Windows.Forms.Control.Validated> のイベントハンドラー内からフォーカスを設定しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3437">Do not attempt to set focus from within the <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>, <xref:System.Windows.Forms.Control.Validating>, or <xref:System.Windows.Forms.Control.Validated> event handlers.</span></span> <span data-ttu-id="6dc4f-3438">これにより、アプリケーションまたはオペレーティングシステムが応答を停止する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3438">Doing so can cause your application or the operating system to stop responding.</span></span> <span data-ttu-id="6dc4f-3439">詳細については、「キーボード入力リファレンス」セクションの `WM_KILLFOCUS` に関するトピックと、「 [About Messages And Message Queues」 (メッセージとメッセージキューの概要](/windows/win32/winmsg/about-messages-and-message-queues)) に関する記事の「メッセージのデッドロック」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3439">For more information, see the `WM_KILLFOCUS` topic in the "Keyboard Input Reference" section, and the "Message Deadlocks" section of the [About Messages and Message Queues](/windows/win32/winmsg/about-messages-and-message-queues) article.</span></span>  
  
 <span data-ttu-id="6dc4f-3440">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3440">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-3441">次のコード例では、派生クラス <xref:System.Windows.Forms.TextBox> を使用して、ユーザーが入力する電子メールアドレスを検証します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3441">The following code example uses the derived class <xref:System.Windows.Forms.TextBox> and validates an email address that the user enters.</span></span> <span data-ttu-id="6dc4f-3442">電子メールアドレスが標準形式 ("@" and "") に含まれていない場合、検証は失敗し、<xref:System.Windows.Forms.ErrorProvider> アイコンが表示され、イベントは取り消されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3442">If the email address is not in the standard format (containing "@" and "."), the validation fails, an <xref:System.Windows.Forms.ErrorProvider> icon is displayed, and the event is canceled.</span></span> <span data-ttu-id="6dc4f-3443">この例では、<xref:System.Windows.Forms.TextBox> と <xref:System.Windows.Forms.ErrorProvider> コントロールがフォーム上に作成されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3443">This example requires that a <xref:System.Windows.Forms.TextBox> and <xref:System.Windows.Forms.ErrorProvider> control have been created on a form.</span></span>  
  
 [!code-cpp[Control.Validating#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Validating/CPP/validating.cpp#1)]
 [!code-csharp[Control.Validating#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Validating/CS/validating.cs#1)]
 [!code-vb[Control.Validating#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Validating/VB/validating.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.CausesValidation" />
        <altmember cref="E:System.Windows.Forms.Control.Validated" />
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Visible" />
      <MemberSignature Language="VB.NET" Value="Public Property Visible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Visible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Visible : bool with get, set" Usage="System.Windows.Forms.Control.Visible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-3444">コントロールとそのすべての子コントロールが表示されているかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3444">Gets or sets a value indicating whether the control and all its child controls are displayed.</span></span></summary>
        <value><span data-ttu-id="6dc4f-3445">コントロールとそのすべての子コントロールが表示されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3445"><see langword="true" /> if the control and all its child controls are displayed; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6dc4f-3446">既定では、 <see langword="true" />です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3446">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3447">`Visible` が `true`に設定されている場合でも、他のコントロールの背後に隠れていると、コントロールがユーザーに表示されない場合があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3447">Note that even if `Visible` is set to `true`, the control might not be visible to the user if it is obscured behind other controls.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-3448">次のコード例では、派生クラス <xref:System.Windows.Forms.VScrollBar> と <xref:System.Windows.Forms.HScrollBar> を使用し、<xref:System.Windows.Forms.PictureBox> コントロールに表示される <xref:System.Drawing.Image> のサイズに基づいて <xref:System.Windows.Forms.Control.Visible%2A> プロパティ値を設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3448">The following code example uses the derived classes <xref:System.Windows.Forms.VScrollBar> and <xref:System.Windows.Forms.HScrollBar> and sets their <xref:System.Windows.Forms.Control.Visible%2A> property values, based on the size of an <xref:System.Drawing.Image> being displayed in a <xref:System.Windows.Forms.PictureBox> control.</span></span> <span data-ttu-id="6dc4f-3449">この例では、<xref:System.Windows.Forms.PictureBox> がフォーム上に作成されていることと、<xref:System.Windows.Forms.PictureBox>に <xref:System.Windows.Forms.HScrollBar> および <xref:System.Windows.Forms.VScrollBar> コントロールが作成されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3449">This example requires that a <xref:System.Windows.Forms.PictureBox> has been created on a form and that <xref:System.Windows.Forms.HScrollBar> and <xref:System.Windows.Forms.VScrollBar> controls have been created on the <xref:System.Windows.Forms.PictureBox>.</span></span> <span data-ttu-id="6dc4f-3450">画像が画像ボックスに読み込まれ、フォームの <xref:System.Windows.Forms.Control.Resize> イベントによって読み込まれるときに、このコードを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3450">This code should be called when the image is loaded into the picture box and by the <xref:System.Windows.Forms.Control.Resize> event of the form.</span></span>  
  
 [!code-cpp[Classic Control.Visible Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Control.Visible Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Control.Visible Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Control.Visible Example/CS/source.cs#1)]
 [!code-vb[Classic Control.Visible Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Control.Visible Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Enabled" />
        <altmember cref="P:System.Windows.Forms.Control.CanFocus" />
        <altmember cref="M:System.Windows.Forms.Control.Hide" />
        <altmember cref="M:System.Windows.Forms.Control.SetVisibleCore(System.Boolean)" />
        <altmember cref="E:System.Windows.Forms.Control.VisibleChanged" />
      </Docs>
    </Member>
    <Member MemberName="VisibleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler VisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler VisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.VisibleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event VisibleChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ VisibleChanged;" />
      <MemberSignature Language="F#" Value="member this.VisibleChanged : EventHandler " Usage="member this.VisibleChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-3451"><see cref="P:System.Windows.Forms.Control.Visible" /> プロパティの値が変化すると発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3451">Occurs when the <see cref="P:System.Windows.Forms.Control.Visible" /> property value changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3452">このイベントは、プログラムによる変更またはユーザーの操作によって <xref:System.Windows.Forms.Control.Visible%2A> プロパティが変更された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3452">This event is raised if the <xref:System.Windows.Forms.Control.Visible%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="6dc4f-3453">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3453">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-3454">次のコード例では、<xref:System.Windows.Forms.Label> コントロールの <xref:System.Windows.Forms.Control.Visible%2A> プロパティの値が変更された場合に、<xref:System.Windows.Forms.Control.VisibleChanged> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3454">The following code example raises the <xref:System.Windows.Forms.Control.VisibleChanged> event when the <xref:System.Windows.Forms.Control.Visible%2A> property value of the <xref:System.Windows.Forms.Label> control has changed.</span></span>  
  
 [!code-cpp[Control_VisibleChanged#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_VisibleChanged/CPP/control_visiblechanged.cpp#1)]
 [!code-csharp[Control_VisibleChanged#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_VisibleChanged/CS/control_visiblechanged.cs#1)]
 [!code-vb[Control_VisibleChanged#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_VisibleChanged/VB/control_visiblechanged.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Visible" />
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public int Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Width" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Width" />
      <MemberSignature Language="VB.NET" Value="Public Property Width As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Width { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Width : int with get, set" Usage="System.Windows.Forms.Control.Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-3455">コントロールの幅を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3455">Gets or sets the width of the control.</span></span></summary>
        <value><span data-ttu-id="6dc4f-3456">コントロールの幅です (ピクセル単位)。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3456">The width of the control in pixels.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3457"><xref:System.Windows.Forms.Control.Width%2A> プロパティと <xref:System.Windows.Forms.Control.Left%2A> プロパティ値を変更すると、コントロールの <xref:System.Windows.Forms.Control.Right%2A> プロパティ値が変更されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3457">Changes made to the <xref:System.Windows.Forms.Control.Width%2A> and <xref:System.Windows.Forms.Control.Left%2A> property values cause the <xref:System.Windows.Forms.Control.Right%2A> property value of the control to change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-3458">次のコード例では、フォームに3つの <xref:System.Windows.Forms.Button> コントロールを作成し、さまざまなサイズ関連のプロパティと場所に関連するプロパティを使用して、サイズと位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3458">The following code example creates three <xref:System.Windows.Forms.Button> controls on a form and sets their size and location by using the various size-related and location-related properties.</span></span> <span data-ttu-id="6dc4f-3459">この例では、幅と高さが300ピクセル以上の <xref:System.Windows.Forms.Form> が必要です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3459">This example requires that you have a <xref:System.Windows.Forms.Form> that has a width and height of at least 300 pixels.</span></span>  
  
 [!code-cpp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CPP/controlsizelocation.cpp#1)]
 [!code-csharp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CS/controlsizelocation.cs#1)]
 [!code-vb[Windows.Forms.Control SizeLocation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/VB/controlsizelocation.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Bounds" />
        <altmember cref="P:System.Windows.Forms.Control.Height" />
        <altmember cref="P:System.Drawing.Size.Width" />
        <altmember cref="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="WindowTarget">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.IWindowTarget WindowTarget { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.IWindowTarget WindowTarget" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.WindowTarget" />
      <MemberSignature Language="VB.NET" Value="Public Property WindowTarget As IWindowTarget" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::IWindowTarget ^ WindowTarget { System::Windows::Forms::IWindowTarget ^ get(); void set(System::Windows::Forms::IWindowTarget ^ value); };" />
      <MemberSignature Language="F#" Value="member this.WindowTarget : System.Windows.Forms.IWindowTarget with get, set" Usage="System.Windows.Forms.Control.WindowTarget" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.IWindowTarget</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6dc4f-3460">このクラスでは、このプロパティは使用されません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3460">This property is not relevant for this class.</span></span></summary>
        <value><span data-ttu-id="6dc4f-3461">コントロールに含まれる NativeWindow。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3461">The NativeWindow contained within the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3462">このクラスでは、このプロパティは使用されません。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3462">This property is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected virtual void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member WndProc : Message -&gt; unit&#xA;override this.WndProc : Message -&gt; unit" Usage="control.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="6dc4f-3463">処理する Windows <see cref="T:System.Windows.Forms.Message" /> です。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3463">The Windows <see cref="T:System.Windows.Forms.Message" /> to process.</span></span></param>
        <summary><span data-ttu-id="6dc4f-3464">Windows メッセージを処理します。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3464">Processes Windows messages.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dc4f-3465">すべてのメッセージは、<xref:System.Windows.Forms.Control.PreProcessMessage%2A> メソッドを使用してフィルター処理を行った後、<xref:System.Windows.Forms.Control.WndProc%2A> メソッドに送信されます。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3465">All messages are sent to the <xref:System.Windows.Forms.Control.WndProc%2A> method after getting filtered through the <xref:System.Windows.Forms.Control.PreProcessMessage%2A> method.</span></span>  
  
 <span data-ttu-id="6dc4f-3466"><xref:System.Windows.Forms.Control.WndProc%2A> メソッドは、Windows `WindowProc` 関数に正確に対応しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3466">The <xref:System.Windows.Forms.Control.WndProc%2A> method corresponds exactly to the Windows `WindowProc` function.</span></span> <span data-ttu-id="6dc4f-3467">Windows メッセージの処理の詳細については、「 [WindowProc 関数](https://go.microsoft.com/fwlink/?LinkId=181565)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3467">For more information about processing Windows messages, see the [WindowProc function](https://go.microsoft.com/fwlink/?LinkId=181565).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dc4f-3468">次のコード例は、<xref:System.Windows.Forms.Control.WndProc%2A> メソッドをオーバーライドして、<xref:System.Windows.Forms.Message> 構造体で識別されたオペレーティングシステムメッセージを処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3468">The following code example demonstrates overriding the <xref:System.Windows.Forms.Control.WndProc%2A> method to handle operating system messages identified in the <xref:System.Windows.Forms.Message> structure.</span></span> <span data-ttu-id="6dc4f-3469">この例では、オペレーティングシステムの[WM_ACTIVATEAPP](/windows/win32/winmsg/wm-activateapp)メッセージが処理され、別のアプリケーションがアクティブになっていることがわかります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3469">The [WM_ACTIVATEAPP](/windows/win32/winmsg/wm-activateapp) operating system message is handled in this example to know when another application is becoming active.</span></span> <span data-ttu-id="6dc4f-3470">使用可能な <xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType>、<xref:System.Windows.Forms.Message.LParam%2A?displayProperty=nameWithType>、および <xref:System.Windows.Forms.Message.WParam%2A?displayProperty=nameWithType> の値については、次のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3470">See the following topics to understand the available <xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.Message.LParam%2A?displayProperty=nameWithType>, and <xref:System.Windows.Forms.Message.WParam%2A?displayProperty=nameWithType> values.</span></span> <span data-ttu-id="6dc4f-3471">実際の定数値は、Windows .h ヘッダーファイルにあります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3471">Actual constant values can be found in the Windows.h header file.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.WndProc#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.WndProc/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.Control.WndProc#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.WndProc/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.WndProc#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.WndProc/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6dc4f-3472">継承コントロールでは、基底クラスの <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" /> メソッドを呼び出して、処理しないメッセージを処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dc4f-3472">Inheriting controls should call the base class's <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" /> method to process any messages that they do not handle.</span></span></para></block>
        <altmember cref="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)" />
        <altmember cref="M:System.Windows.Forms.Control.DefWndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
  </Members>
</Type>
