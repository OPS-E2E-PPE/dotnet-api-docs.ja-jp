<Type Name="HtmlWindow" FullName="System.Windows.Forms.HtmlWindow">
  <Metadata><Meta Name="ms.openlocfilehash" Value="56be45388e62aae3aa9df1b37e3d50e9a953835f" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83888324" /></Metadata><TypeSignature Language="C#" Value="public sealed class HtmlWindow" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HtmlWindow extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.HtmlWindow" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HtmlWindow" />
  <TypeSignature Language="C++ CLI" Value="public ref class HtmlWindow sealed" />
  <TypeSignature Language="F#" Value="type HtmlWindow = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="T:System.Windows.Forms.HtmlDocument" /> のインスタンスを 1 つ以上格納する論理的なウィンドウを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow> は、Windows フォームまたは Windows API のウィンドウの概念と混同しないようにしてください。<xref:System.Windows.Forms.HtmlWindow>のインスタンスに直接対応する `HWND` または類似した Windows リソースはありません。 <xref:System.Windows.Forms.HtmlWindow> は、ユーザーの画面上でのドキュメントの場所についての概要を示し、プロンプトやダイアログボックスを使用してユーザーと対話するためのメソッドを提供します。 <xref:System.Windows.Forms.HtmlWindow> は、ドキュメントの場所や Web ブラウザーの機能など、Web ページのドキュメントとそのメタデータの論理的なコンテナーとして機能します。  
  
 Web ページは、1つのドキュメント、または1つ以上の `FRAME` 要素を含む `FRAMESET` で構成され、それぞれが独自のドキュメントをホストします。 Web 開発者は、フレームセットを使用して論理的に関連するページを並べて表示します (たとえば、ナビゲーションページの横にあるコンテンツページ)。 ページが1つのドキュメントで構成されている場合は、<xref:System.Windows.Forms.HtmlWindow>の <xref:System.Windows.Forms.HtmlWindow.Document%2A> プロパティを使用してアクセスできます。ページでフレームを使用している場合は、<xref:System.Windows.Forms.HtmlWindow.Frames%2A> コレクションを使用してドキュメントにアクセスできます。このコレクションは、1つ以上の <xref:System.Windows.Forms.HtmlWindow> オブジェクトで構成されます。  
  
 Windows フォームアプリケーションで <xref:System.Windows.Forms.WebBrowser> コントロールをホストしている場合は、<xref:System.Windows.Forms.Form> や <xref:System.Windows.Forms.MessageBox>などの標準の Windows フォームクラスを使用してユーザーと対話するように選択することも、この目的で定義されている <xref:System.Windows.Forms.HtmlWindow> でメソッドを使用することもできます。 <xref:System.Windows.Forms.HtmlWindow.Alert%2A> メソッドは、カスタムテキストと **[OK** ] ボタンを備えた簡単なダイアログボックスを表示します。<xref:System.Windows.Forms.HtmlWindow.Prompt%2A> は、カスタムテキストとテキスト入力フィールドをユーザーに提示します。および <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> には、カスタムテキストと **[OK]** ボタンと **[キャンセル**] ボタンの行を含むダイアログボックスが表示されます。  
  
 <xref:System.Windows.Forms.HtmlWindow> を使用すると、新しいドキュメントを含む新しいウィンドウを開くことができます。 指定された URL を名前付きウィンドウに読み込んで、まだ存在しない場合は作成します。 <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> は、新しく作成されたウィンドウで常に URL を開きます。 <xref:System.Windows.Forms.HtmlWindow.Open%2A>  
  
   
  
## Examples  
 次のコード例には、2つのメソッドが含まれています。 最初のは、`displayWindow`という名前のウィンドウで URL を開きます。このウィンドウには、ステータスバーが表示された状態で作成されます。 2番目の方法では、同じウィンドウで別の URL を開きますが、場所バーのみを表示するように指定します。 ウィンドウのサイズと表示されるコントロールは、最初に開いた URL によって異なります。 このコード例では、フォームに `WebBrowser1`という名前の <xref:System.Windows.Forms.WebBrowser> コントロールが含まれている必要があります。  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#13)]
 [!code-vb[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#13)]  
  
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms535873.aspx">window オブジェクト</related>
    <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/aa741505.aspx">IHTMLWindow2 インターフェイス</related>
  </Docs>
  <Members>
    <Member MemberName="Alert">
      <MemberSignature Language="C#" Value="public void Alert (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Alert(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Alert(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Alert (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Alert(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.Alert : string -&gt; unit" Usage="htmlWindow.Alert message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">メッセージ ボックスに表示する <see cref="T:System.String" />。</param>
        <summary>メッセージ ボックスを表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MessageBox?displayProperty=nameWithType> クラスは、<xref:System.Windows.Forms.HtmlWindow.Alert%2A> メソッドのより強力なバージョンを提供します。  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms535933.aspx">alert メソッド</related>
      </Docs>
    </Member>
    <Member MemberName="AttachEventHandler">
      <MemberSignature Language="C#" Value="public void AttachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.AttachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachEventHandler (eventName As String, eventHandler As EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AttachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberSignature Language="F#" Value="member this.AttachEventHandler : string * EventHandler -&gt; unit" Usage="htmlWindow.AttachEventHandler (eventName, eventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">処理するイベントの名前。</param>
        <param name="eventHandler">イベントを処理するマネージド コードへの参照。</param>
        <summary>指定した HTML DOM イベントのイベント ハンドラーを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ドキュメントの読み込みが完了するまで、HTML ドキュメントまたはそのオブジェクトの1つにイベントをアタッチしないでください。 このメソッドを呼び出す最も早い段階は、<xref:System.Windows.Forms.WebBrowser> コントロールの <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> イベントです。  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener">EventTarget. addEventListener ()</related>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="htmlWindow.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ウィンドウを閉じます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.IsClosed%2A> プロパティを使用して、ウィンドウが既に閉じているかどうかを確認します。 ウィンドウが既に閉じている場合、このメソッドは効果がありません。  
  
 <xref:System.Windows.Forms.HtmlWindow.Open%2A> または <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>を使用して新しいウィンドウを作成すると、<xref:System.Windows.Forms.HtmlWindow.Close%2A> により、HTML ドキュメントオブジェクトモデルによって Internet Explorer の新しいインスタンスが開かれます。 作成したすべての windows で <xref:System.Windows.Forms.HtmlWindow.Close%2A> を呼び出さないと、アプリケーションの終了後も Internet Explorer のこのインスタンスは実行されたままになります。  
  
   
  
## Examples  
 次のコード例では、ウィンドウを開き、ユーザーが過去5分間にこのウィンドウを使用していない場合は閉じます。 このコード例は、フォームに `WebBrowser1`という名前の <xref:System.Windows.Forms.WebBrowser> コントロール、`Button1`という名前の <xref:System.Windows.Forms.Button>、および <xref:System.Windows.Forms.Timer> という名前の `Timer1`クラスがあることを前提として記述されています。 この例を正常に実行するには、<xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> に指定された最初の引数を有効な URL に変更します。  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#9)]
 [!code-vb[System.Windows.Forms.HtmlWindow#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#9)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536367.aspx">close メソッド</related>
      </Docs>
    </Member>
    <Member MemberName="Confirm">
      <MemberSignature Language="C#" Value="public bool Confirm (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Confirm(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Confirm(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confirm (message As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Confirm(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.Confirm : string -&gt; bool" Usage="htmlWindow.Confirm message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">ユーザーに表示するテキスト。</param>
        <summary>yes/no の応答を求めるメッセージとボタンを含むダイアログ ボックスを表示します。</summary>
        <returns>ユーザーが **[はい]** をクリックした場合は <see langword="true" />。ユーザーが **[いいえ]** をクリックしたか、ダイアログ ボックスを閉じた場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> モーダルダイアログボックスが表示されます。ユーザーは、最初にこのダイアログボックスを閉じることなく、基になる HTML ページにアクセスすることはできません。  
  
## Examples  

次の HTML をコピーし、orderForm という名前のフォームに保存します。  

```html
<HTML>
<BODY>
<FORM name="NewOrderForm">
Select Part Type:
<SELECT name="PartType">
  <OPTION>AZ-3700
  <OPTION>AZ-3701
  <OPTION>AZ-3702  
</SELECT><br/>
Quantity: <INPUT type="text" name="PartQty" size="2" maxsize="2" /><br/>
Building/Desk:
<INPUT type="text" name="PartBuilding" size="2" maxsize="2"/> /  
<INPUT type="text" name="PartDesk" size="2" maxsize="2"/><p/>
<INPUT type="submit" value="Transmit Order"/>
</FORM>
</BODY>
</HTML>
```

次の例では、ユーザーが `NewOrderForm`を送信したときに <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> ダイアログボックスを表示します。  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#10)]
 [!code-vb[System.Windows.Forms.HtmlWindow#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536376.aspx">confirm メソッド</related>
      </Docs>
    </Member>
    <Member MemberName="DetachEventHandler">
      <MemberSignature Language="C#" Value="public void DetachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DetachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.DetachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DetachEventHandler (eventName As String, eventHandler As EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DetachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberSignature Language="F#" Value="member this.DetachEventHandler : string * EventHandler -&gt; unit" Usage="htmlWindow.DetachEventHandler (eventName, eventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">処理するイベントの名前。</param>
        <param name="eventHandler">イベントを処理するマネージド コードへの参照。</param>
        <summary>指定したイベント ハンドラーを削除します。</summary>
        <remarks>To be added.</remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536411.aspx">detachEvent メソッド</related>
      </Docs>
    </Member>
    <Member MemberName="Document">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlDocument Document { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlDocument Document" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Document" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Document As HtmlDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlDocument ^ Document { System::Windows::Forms::HtmlDocument ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Document : System.Windows.Forms.HtmlDocument" Usage="System.Windows.Forms.HtmlWindow.Document" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlDocument</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ウィンドウに格納されている HTML ドキュメントを取得します。</summary>
        <value>ドキュメントが読み込まれている場合は、<see cref="T:System.Windows.Forms.HtmlDocument" /> の有効なインスタンス。 このウィンドウに<c>フレームセット</c>が含まれているか、現在読み込まれているドキュメントがない場合は <see langword="null" />が返されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常は、<xref:System.Windows.Forms.WebBrowser> コントロールの <xref:System.Windows.Forms.WebBrowser.Document%2A> プロパティを使用して、<xref:System.Windows.Forms.HtmlWindow.Document%2A> にアクセスします。 このプロパティは、<xref:System.Windows.Forms.HtmlWindow.Frames%2A> コレクションを使用して `FRAME` 内のドキュメントにアクセスする必要がある場合に使用します。  
  
   
  
## Examples  
 次のコード例では、フレームを含むページ内の各ドキュメントを検査し、今後の検査のために各ページから送信されるすべてのハイパーリンクのテーブルを作成します。  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#2)]
 [!code-vb[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DomWindow">
      <MemberSignature Language="C#" Value="public object DomWindow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DomWindow" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.DomWindow" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DomWindow As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DomWindow { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DomWindow : obj" Usage="System.Windows.Forms.HtmlWindow.DomWindow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このクラスによってラップされたアンマネージ インターフェイスを取得します。</summary>
        <value><see langword="IHTMLWindow2" />、<see langword="IHTMLWindow3" />、または <see langword="IHTMLWindow4" /> ポインターにキャストできるオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ドキュメントオブジェクトモデル (DOM) への基になるアンマネージインターフェイスポインターを使用して、<xref:System.Windows.Forms.HtmlWindow>によって公開されていないメソッドを実行します。  
  
 <xref:System.Windows.Forms.HtmlWindow.DomWindow%2A>を使用するには、参照先のをアンマネージ MSHTML.DLL に追加する必要があります。 詳細については、「[アセンブリとしてタイプライブラリをインポートする](/dotnet/framework/interop/importing-a-type-library-as-an-assembly)」を参照してください。  
  
   
  
## Examples  
 次のコード例では、ドキュメントのウィンドウから `IHTMLWindow2` ポインターを取得し、モーダルウィンドウに新しいドキュメントを表示します。  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#3)]
 [!code-vb[System.Windows.Forms.HtmlWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/aa741505.aspx">IHTMLWindow2 インターフェイス</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/aa741356.aspx">IHTMLWindow3 インターフェイス</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/aa741344.aspx">IHTMLWindow4 インターフェイス</related>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="htmlWindow.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">テストするオブジェクト。</param>
        <summary>指定したオブジェクトと現在のオブジェクトとを比較し、等しいかどうかをテストします。</summary>
        <returns>オブジェクトが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementErrorEventHandler Error;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementErrorEventHandler Error" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Error" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Error As HtmlElementErrorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementErrorEventHandler ^ Error;" />
      <MemberSignature Language="F#" Value="member this.Error : System.Windows.Forms.HtmlElementErrorEventHandler " Usage="member this.Error : System.Windows.Forms.HtmlElementErrorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementErrorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ウィンドウ内で実行されているスクリプトがランタイム エラーを検出すると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML ページには、ページが読み込まれたときに実行される JScript または VBScript で記述されたスクリプトコードを含めることができます。 <xref:System.Windows.Forms.HtmlWindow.Error> は、スクリプトで実行時エラーが発生したときに発生します。 スクリプトコードは遅延バインディングされるため、オブジェクトに対する呼び出しは実行時まで解決されないので、エラーには、null オブジェクトの参照から、未定義のプロパティまたはメソッドの呼び出しまでのすべてが含まれます。  
  
 Internet Explorer の [ネイティブエラー] ダイアログボックスが表示されないようにするには、<xref:System.Windows.Forms.HtmlElementErrorEventArgs> の [<xref:System.Windows.Forms.HtmlElementErrorEventArgs.Handled%2A>] プロパティを [true] に設定します。
  
   
  
## Examples  
 次のコード例では、HTML ページのスクリプトがドキュメントで定義されていないオブジェクトにアクセスしようとしたときに発生するエラーをトラップします。 <xref:System.Windows.Forms.HtmlWindow.Error> イベントハンドラーがアタッチされる前にページが完全に読み込まれている必要があります。そうしないと、この例は機能しません。  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#16](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#16)]
 [!code-vb[System.Windows.Forms.HtmlWindow#16](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#16)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/cc197053.aspx">onerror イベント</related>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public void Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Sub Focus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Focus();" />
      <MemberSignature Language="F#" Value="member this.Focus : unit -&gt; unit" Usage="htmlWindow.Focus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のウィンドウにフォーカスを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.Focus%2A> が呼び出される前に別のウィンドウがフォーカスを保持した場合、そのウィンドウはフォーカスを失います。  
  
 ウィンドウの <xref:System.Windows.Forms.HtmlWindow.Load> イベントが発生するまで、ウィンドウ内の要素にフォーカスを呼び出さないでください。  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536425.aspx">フォーカス方法</related>
      </Docs>
    </Member>
    <Member MemberName="Frames">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindowCollection Frames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindowCollection Frames" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Frames" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Frames As HtmlWindowCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlWindowCollection ^ Frames { System::Windows::Forms::HtmlWindowCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Frames : System.Windows.Forms.HtmlWindowCollection" Usage="System.Windows.Forms.HtmlWindow.Frames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindowCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Web ページ内で定義されている各 <c>FRAME</c> 要素への参照を取得します。</summary>
        <value>ドキュメントの<c>フレーム</c>オブジェクトと<c>IFRAME</c>オブジェクトの <see cref="T:System.Windows.Forms.HtmlWindowCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `FRAME` は、`FRAMESET`内で定義された一連のウィンドウです。 `FRAME`s を使用すると、1つのドキュメント内で複数のドキュメントをホストできます。 各 `FRAME` は、特定の行と列の幅を所有するように定義され、`FRAMESET`内で定義されている他の `FRAME`に対してページ上の位置に位置付けられます。`FRAME` の位置は固定されていますが、ユーザーがマウスカーソルを使用して `FRAME`を拡大したり縮小したりすることがあります。 `IFRAME` はフレームに似ていますが、固定された位置に固定する必要はありません。  
  
 フレームには、Web ページ内で定義されている `FRAME` または `IFRAME` ごとに <xref:System.Windows.Forms.HtmlWindow> のインスタンスが1つ含まれます。  
  
   
  
## Examples  
 次のコード例では、フレームを含むページ内の各ドキュメントを検査し、今後の検査のために各ページから送信されるすべてのハイパーリンクのテーブルを作成します。  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#2)]
 [!code-vb[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms537459.aspx">フレームコレクション</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="htmlWindow.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>特定の型についてハッシュ関数として機能します。</summary>
        <returns>現在の <see cref="T:System.Windows.Forms.HtmlWindow" /> のハッシュ コードです。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ GotFocus;" />
      <MemberSignature Language="F#" Value="member this.GotFocus : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.GotFocus : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のウィンドウがユーザーの入力フォーカスを得ると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の場合に <xref:System.Windows.Forms.HtmlWindow.GotFocus> が発生します。  
  
-   `FRAMESET` 最初に読み込まれるときの、`FRAMESET` 内の最初のウィンドウ。  
  
-   <xref:System.Windows.Forms.WebBrowser> コントロールを含むウィンドウを前面に移動したときに最後にフォーカスがあった `FRAME`。  
  
-   ユーザーがクリックした `FRAME`、ウィンドウ内の要素にフォーカスが置かれていないユーザーがいる場合に限ります。  
  
 <xref:System.Windows.Forms.HtmlWindow.GotFocus> イベントの既定のアクションをキャンセルしたり、バブルから除外したりすることはできません。
  
   
  
## Examples  
 このメンバーの使用例を次のコード例に示します。 この例では、イベントハンドラーは、<xref:System.Windows.Forms.HtmlWindow.GotFocus> イベントの発生を報告します。 このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。  
  
 コード例を実行するには、`HtmlWindow1`という <xref:System.Windows.Forms.HtmlWindow> 型のインスタンスを含むプロジェクトに貼り付けます。 次に、イベントハンドラーが <xref:System.Windows.Forms.HtmlWindow.GotFocus> イベントに関連付けられていることを確認します。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#452](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#452)]
 [!code-vb[System.Windows.Forms.EventExamples#452](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#452)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536934.aspx">onfocus イベント</related>
      </Docs>
    </Member>
    <Member MemberName="History">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlHistory History { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlHistory History" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.History" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property History As HtmlHistory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlHistory ^ History { System::Windows::Forms::HtmlHistory ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.History : System.Windows.Forms.HtmlHistory" Usage="System.Windows.Forms.HtmlWindow.History" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlHistory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーが最近表示した URL を格納するオブジェクトを取得します。</summary>
        <value>現在のウィンドウの <see cref="T:System.Windows.Forms.HtmlHistory" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.History%2A> には、*ナビゲーションスタック*と呼ばれる、現在のウィンドウ内で移動されたすべての url が含まれており、これらのドキュメントに戻るためのメソッドが用意されています。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClosed">
      <MemberSignature Language="C#" Value="public bool IsClosed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClosed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.IsClosed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClosed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClosed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsClosed : bool" Usage="System.Windows.Forms.HtmlWindow.IsClosed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このウィンドウが開いているか閉じているかを示す値を取得します。</summary>
        <value>ウィンドウが画面上でまだ開いている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow> がユーザーによって、または <xref:System.Windows.Forms.HtmlWindow.Close%2A> メソッドの呼び出しによって閉じられた場合、新しい URL に移動しようとするか、ウィンドウのドキュメントにアクセスしようとすると、エラーが発生します。 このプロパティを使用して、現在のウィンドウオブジェクトでプロパティとメソッドを安全に呼び出すことができるかどうかを判断します。  
  
   
  
## Examples  
 次のコード例では、ウィンドウを開き、ユーザーが過去5分間にこのウィンドウを使用していない場合は閉じます。 このコード例では、フォームに `WebBrowser1`という名前の <xref:System.Windows.Forms.WebBrowser> コントロール、`Button1`という名前の <xref:System.Windows.Forms.Button>、および <xref:System.Windows.Forms.Timer> という名前の `Timer1`クラスが含まれている必要があります。  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms537459.aspx">closed プロパティ</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Load;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Load" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Load" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Load As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Load;" />
      <MemberSignature Language="F#" Value="member this.Load : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Load : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ウィンドウのドキュメントとそのすべての要素の初期化が終了すると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.Load> イベントは、<xref:System.Windows.Forms.WebBrowser> コントロールの <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> イベントと同様に動作します。これは、ドキュメント内の HTML 要素に安全にアクセスできることを通知します。  
  
 <xref:System.Windows.Forms.HtmlWindow.Load> イベントの既定のアクションを取り消すことはできません。
  
   
  
## Examples  
 このメンバーの使用例を次のコード例に示します。 この例では、イベントハンドラーは、<xref:System.Windows.Forms.HtmlWindow.Load> イベントの発生を報告します。 このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。 複数のイベントまたは頻繁に発生するイベントについてレポートするには、<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> を <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> に置き換えるか、複数行 <xref:System.Windows.Forms.TextBox>にメッセージを追加することを検討してください。  
  
 コード例を実行するには、`HtmlWindow1`という <xref:System.Windows.Forms.HtmlWindow> 型のインスタンスを含むプロジェクトに貼り付けます。 次に、イベントハンドラーが <xref:System.Windows.Forms.HtmlWindow.Load> イベントに関連付けられていることを確認します。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#453](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#453)]
 [!code-vb[System.Windows.Forms.EventExamples#453](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#453)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/cc197055.aspx">onload イベント</related>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ LostFocus;" />
      <MemberSignature Language="F#" Value="member this.LostFocus : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.LostFocus : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ウィンドウがユーザーの入力フォーカスを失うと発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 このメンバーの使用例を次のコード例に示します。 この例では、イベントハンドラーは、<xref:System.Windows.Forms.HtmlWindow.LostFocus> イベントの発生を報告します。 このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。  
  
 コード例を実行するには、`HtmlWindow1`という <xref:System.Windows.Forms.HtmlWindow> 型のインスタンスを含むプロジェクトに貼り付けます。 次に、イベントハンドラーが <xref:System.Windows.Forms.HtmlWindow.LostFocus> イベントに関連付けられていることを確認します。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#454](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#454)]
 [!code-vb[System.Windows.Forms.EventExamples#454](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#454)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveTo">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>画面上の指定した座標にウィンドウを移動します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveTo">
      <MemberSignature Language="C#" Value="public void MoveTo (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveTo(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.MoveTo(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveTo (point As Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveTo(System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.MoveTo : System.Drawing.Point -&gt; unit" Usage="htmlWindow.MoveTo point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">ウィンドウの左上隅の x 座標と y 座標。</param>
        <summary>画面上の指定した座標にウィンドウを移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> を使用して、画面に表示されている端からウィンドウを移動することはできません。このメソッドは、Web ページ上のスクリプトを通じて使用することもできます。また、信頼されていないスクリプトによるウィンドウの表示を許可することは、安全とは見なされません。  
  
 移動しようとしているウィンドウとその親ウィンドウのトップレベルドメインが異なる場合は、<xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> によって <xref:System.UnauthorizedAccessException> が発生します。 たとえば、a.adatum.com をポイントする <xref:System.Windows.Forms.WebBrowser> コントロールをホストしている場合は、<xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> を使用して新しいウィンドウを作成し、b.adatum.com を表示します。 この場合、両方のウィンドウは同じトップレベルドメインの一部と見なされ、例外はスローされません。 ただし、<xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> を呼び出して www、microsoft .com を表示すると、2つのウィンドウのトップレベルドメインが異なるため、<xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> 操作によって例外がスローされるようになります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">この操作を実行しようとしたコードには、このウィンドウを操作するアクセス許可が付与されていません。</exception>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536626.aspx">moveTo メソッド</related>
      </Docs>
    </Member>
    <Member MemberName="MoveTo">
      <MemberSignature Language="C#" Value="public void MoveTo (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveTo(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.MoveTo(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveTo (x As Integer, y As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveTo(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.MoveTo : int * int -&gt; unit" Usage="htmlWindow.MoveTo (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">ウィンドウの左上隅の x 座標。</param>
        <param name="y">ウィンドウの左上隅の y 座標。</param>
        <summary>画面上の指定した座標にウィンドウを移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> を使用して、画面に表示されている端からウィンドウを移動することはできません。このメソッドは、Web ページ上のスクリプトを通じて使用することもできます。また、信頼されていないスクリプトによるウィンドウの表示を許可することは、安全とは見なされません。  
  
 移動しようとしているウィンドウとその親ウィンドウのトップレベルドメインが異なる場合は、<xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> によって <xref:System.UnauthorizedAccessException> が発生します。 たとえば、<xref:System.Windows.Forms.WebBrowser> コントロールをホストしていて、それが a.adatum.com を指している場合、<xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> を使用して新しいウィンドウを作成し、b.adatum.com を表示します。 この場合、両方のウィンドウは同じトップレベルドメインの一部と見なされ、例外はスローされません。 ただし、<xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> を呼び出して www、microsoft .com を表示すると、2つのウィンドウのトップレベルドメインが異なるため、<xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> 操作によって例外がスローされるようになります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">この操作を実行しようとしたコードには、このウィンドウを操作するアクセス許可が付与されていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.Forms.HtmlWindow.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ウィンドウの名前を取得または設定します。</summary>
        <value>名前を表す <see cref="T:System.String" />。</value>
        <remarks>To be added.</remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534187.aspx">name プロパティ</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Navigate">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した URL にある新しいコンテンツを表示またはダウンロードします。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public void Navigate (string urlString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Navigate(string urlString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Navigate(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Navigate (urlString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Navigate(System::String ^ urlString);" />
      <MemberSignature Language="F#" Value="member this.Navigate : string -&gt; unit" Usage="htmlWindow.Navigate urlString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="urlString">URL (Uniform Resource Locator) で表される表示対象のリソース。</param>
        <summary>指定した URL にある新しいコンテンツを表示またはダウンロードします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `url` パラメーターが HTML ページを指している場合、ウィンドウに現在表示されているページは破棄され、新しいページに置き換えられます。アプリケーションが古いページのマネージ DOM オブジェクトに保持している参照は、有効ではありません。 `url` が Internet Explorer で表示できないリソースを指している場合は、アプリケーションの外部でリソースを開くか、ディスクに保存するか、またはダウンロード操作をキャンセルするかを確認するダイアログボックスが表示されます。  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536638.aspx">navigate メソッド</related>
      </Docs>
    </Member>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public void Navigate (Uri url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Navigate(class System.Uri url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Navigate(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Navigate (url As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Navigate(Uri ^ url);" />
      <MemberSignature Language="F#" Value="member this.Navigate : Uri -&gt; unit" Usage="htmlWindow.Navigate url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="url">現在のウィンドウに表示するドキュメントまたはオブジェクトの、<see cref="T:System.Uri" /> で指定された場所。</param>
        <summary>現在のウィンドウに新しいドキュメントを表示します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Forms.HtmlWindow left, System.Windows.Forms.HtmlWindow right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Windows.Forms.HtmlWindow left, class System.Windows.Forms.HtmlWindow right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.op_Equality(System.Windows.Forms.HtmlWindow,System.Windows.Forms.HtmlWindow)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As HtmlWindow, right As HtmlWindow) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Forms::HtmlWindow ^ left, System::Windows::Forms::HtmlWindow ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Windows.Forms.HtmlWindow * System.Windows.Forms.HtmlWindow -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlWindow" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlWindow" />
      </Parameters>
      <Docs>
        <param name="left">最初の <see cref="T:System.Windows.Forms.HtmlWindow" /> オブジェクト。</param>
        <param name="right">2 番目の <see cref="T:System.Windows.Forms.HtmlWindow" /> オブジェクト。</param>
        <summary>2 つの <see cref="T:System.Windows.Forms.HtmlWindow" /> オブジェクトが等しいかどうかをテストします。</summary>
        <returns>両方のパラメーターが<see langword="true" /> の場合、または、基になる COM インターフェイスが両方の要素で同じ場合は <see langword="null" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 等値演算子は、指定された <xref:System.Windows.Forms.HtmlWindow> クラスによってラップされる、基になる COM オブジェクトの `IUnknown` ポインターをテストします。  
  
 この演算子の同等のメソッドは <xref:System.Windows.Forms.HtmlWindow.Equals%28System.Object%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Forms.HtmlWindow left, System.Windows.Forms.HtmlWindow right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Windows.Forms.HtmlWindow left, class System.Windows.Forms.HtmlWindow right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.op_Inequality(System.Windows.Forms.HtmlWindow,System.Windows.Forms.HtmlWindow)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As HtmlWindow, right As HtmlWindow) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Forms::HtmlWindow ^ left, System::Windows::Forms::HtmlWindow ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Windows.Forms.HtmlWindow * System.Windows.Forms.HtmlWindow -&gt; bool" Usage="System.Windows.Forms.HtmlWindow.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlWindow" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlWindow" />
      </Parameters>
      <Docs>
        <param name="left">最初の <see cref="T:System.Windows.Forms.HtmlWindow" /> オブジェクト。</param>
        <param name="right">2 番目の <see cref="T:System.Windows.Forms.HtmlWindow" /> オブジェクト。</param>
        <summary>2 つの <see langword="HtmlWindow" /> オブジェクトが等しくないかどうかをテストします。</summary>
        <returns>いずれか一方のオブジェクトだけが <see langword="true" /> の場合、または、基になる COM ポインターが一致しない場合は <see langword="null" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Open">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したウィンドウにファイルを表示します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Open (string urlString, string target, string windowOptions, bool replaceEntry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow Open(string urlString, string target, string windowOptions, bool replaceEntry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Open (urlString As String, target As String, windowOptions As String, replaceEntry As Boolean) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ Open(System::String ^ urlString, System::String ^ target, System::String ^ windowOptions, bool replaceEntry);" />
      <MemberSignature Language="F#" Value="member this.Open : string * string * string * bool -&gt; System.Windows.Forms.HtmlWindow" Usage="htmlWindow.Open (urlString, target, windowOptions, replaceEntry)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlString" Type="System.String" />
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="windowOptions" Type="System.String" />
        <Parameter Name="replaceEntry" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="urlString">読み込むファイルの場所を記述する URL。</param>
        <param name="target">リソースを開くウィンドウの名前。 これは、開発者が指定した名前、または次の特殊な値のいずれかです。 
 <c>_blank</c>: 新しいウィンドウで <paramref name="urlString" /> を開きます。 <see cref="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" /> を呼び出した場合と同じ動作を行います。  
  
 <c>_media</c>: メディア バーで <paramref name="urlString" /> を開きます。  
  
 <c>_parent</c>: 現在のウィンドウを作成したウィンドウで <paramref name="urlString" /> を開きます。  
  
 <c>_search</c>: 検索バーで <paramref name="urlString" /> を開きます。  
  
 <c>_self</c>: 現在のウィンドウで <paramref name="urlString" /> を開きます。  
  
 <c>_top</c>: <c>FRAME</c> 要素に属するウィンドウに対して呼び出した場合は、その <c>FRAMESET</c> をホストするウィンドウで <paramref name="urlString" /> を開きます。 それ以外の場合は、<c>_self</c> と同じ動作になります。</param>
        <param name="windowOptions">次のオプションのうち、<c>name=value</c> の形式で表された 0 個以上のオプションを含むコンマ区切り文字列。 <c>left</c>、<c>top</c>、<c>height</c>、<c>width</c> のオプションについては、任意の整数を指定できます。それ以外の各オプションについて有効な値は、<c>yes</c> (<see langword="1" />) と <c>no</c> (<see langword="0" />) のいずれかです。  
  
 <c>channelmode</c>: Internet Explorer 4.0 の非推奨とされたチャネルのテクノロジで使用されます。 既定値は <c>no</c> です。  
  
 <c>directories</c>: ウィンドウにディレクトリ移動ボタンを表示するかどうか。 既定値は <c>yes</c> です。  
  
 <c>height</c>: ウィンドウのクライアント領域の高さ (ピクセル単位)。 最小値は 100 です。これよりも小さいウィンドウを開こうとすると、Internet Explorer の既定値に従ってウィンドウが開かれます。  
  
 <c>left</c>: ユーザーの画面の左上隅を基準とした、ウィンドウの左側 (x 座標) の相対位置 (ピクセル単位)。 正の整数にする必要があります。  
  
 <c>location</c>: ユーザーがウィンドウを新しい URL に移動できるようにするアドレス バーを表示するかどうか。 既定値は <c>yes</c> です。  
  
 <c>menubar</c>: 新しいウィンドウにメニューを表示するかどうか。 既定値は <c>yes</c> です。  
  
 <c>resizable</c>: ユーザーがウィンドウのサイズを変更できるかどうか。 既定値は <c>yes</c> です。  
  
 <c>scrollbars</c>: ウィンドウに水平スクロール バーと垂直スクロール バーを配置するかどうか。 既定値は <c>yes</c> です。  
  
 <c>status</c>: ウィンドウの下部にステータス バーを配置するかどうか。 既定値は <c>yes</c> です。  
  
 <c>titlebar</c>: 現在のページのタイトルを表示するかどうか。 マネージド アプリケーションでこのオプションを <c>no</c> に設定しても影響はなく、タイトル バーは常に表示されます。  
  
 <c>toolbar</c>: **[戻る]**、**[進む]**、**[停止]** などのツールバー ボタンを表示するかどうか。 既定値は <c>yes</c> です。  
  
 <c>top</c>: ユーザーの画面の左上隅を基準とした、ウィンドウの上端 (y 座標) の相対位置 (ピクセル単位)。 正の整数にする必要があります。  
  
 <c>width</c>: ウィンドウのクライアント領域の幅 (ピクセル単位)。 最小値は 100 です。これよりも小さいウィンドウを開こうとすると、Internet Explorer の既定値に従ってウィンドウが開かれます。</param>
        <param name="replaceEntry">ナビゲーション履歴に保存されている現在のウィンドウの URL を <paramref name="urlString" /> に置き換えるかどうか。 これは、<see cref="T:System.Windows.Forms.HtmlHistory" /> クラスのメソッドの操作に影響を及ぼします。</param>
        <summary>指定したウィンドウにファイルを表示します。</summary>
        <returns>新しいウィンドウ、または <paramref name="target" /> パラメーターで指定された以前に作成されたウィンドウを表す <see cref="T:System.Windows.Forms.HtmlWindow" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `target` パラメーターは、前に <xref:System.Windows.Forms.HtmlWindow.Open%2A>を呼び出した結果として作成されたウィンドウに名前を付けます。 また、パラメーターは、ハイパーリンク (`A` 要素) をクリックするか、`TARGET` 属性を使用して URL を新しいウィンドウで開く `FORM` 要素をクリックすることによって開くこともできます。 次の HTML コードは、ユーザーがクリックすると `orderWindow` という名前の新しいウィンドウを開きます。  
  
 `<A HREF="/startOrder.aspx" TARGET="orderWindow">Click to Start Order</a>`  
  
 `windowOptions` パラメーターにオプションを指定した場合、含まれていないオプションは自動的に無効になります。 つまり、ステータスバーを必要とする `windowOptions` によってのみ指定した場合、メニューバー、ツールバー、タイトル、スクロールバーなどは、`windowOptions`によって明示的に有効にしない限り表示されません。  
  
 `url` によって参照されるファイルが、Internet Explorer 内でホストできる HTML ファイル、テキストファイル、またはその他の種類のファイルの場合は、名前付きのウィンドウに表示されます。 ファイルが Internet Explorer の内部に表示されず、[ターゲット] という名前のウィンドウが存在しない場合は、Internet Explorer がリソースをダウンロードするのに十分な時間だけ、ウィンドウが開きます。その後すぐに終了します。  
  
 <xref:System.Windows.Forms.HtmlWindow.Open%2A> または <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>を使用して新しいウィンドウを作成すると、HTML ドキュメントオブジェクトモデルによって Internet Explorer の新しいインスタンスが開かれます。 作成したすべての windows で <xref:System.Windows.Forms.HtmlWindow.Close%2A> を呼び出さない場合、アプリケーションが終了した後も、Internet Explorer のこのインスタンスは実行されたままになります。  
  
 <xref:System.Windows.Forms.HtmlWindow.Open%2A> を使用して既存のウィンドウに URL を読み込む場合、`windowOptions` は無視されます。このウィンドウでは、最初に <xref:System.Windows.Forms.HtmlWindow.Open%2A>を呼び出すことによって、ディメンション、外観、および画面の場所が表示されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Open (Uri url, string target, string windowOptions, bool replaceEntry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow Open(class System.Uri url, string target, string windowOptions, bool replaceEntry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Open(System.Uri,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Open (url As Uri, target As String, windowOptions As String, replaceEntry As Boolean) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ Open(Uri ^ url, System::String ^ target, System::String ^ windowOptions, bool replaceEntry);" />
      <MemberSignature Language="F#" Value="member this.Open : Uri * string * string * bool -&gt; System.Windows.Forms.HtmlWindow" Usage="htmlWindow.Open (url, target, windowOptions, replaceEntry)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="windowOptions" Type="System.String" />
        <Parameter Name="replaceEntry" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="url">読み込むファイルの場所を記述する URL。</param>
        <param name="target">リソースを開くウィンドウの名前。 これは、開発者が指定した名前、または次の特殊な値のいずれかです。 
 <c>_blank</c>: 新しいウィンドウで <paramref name="url" /> を開きます。 <see cref="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" /> を呼び出した場合と同じ動作を行います。  
  
 <c>_media</c>: メディア バーで <paramref name="url" /> を開きます。  
  
 <c>_parent</c>: 現在のウィンドウを作成したウィンドウで <paramref name="url" /> を開きます。  
  
 <c>_search</c>: 検索バーで <paramref name="url" /> を開きます。  
  
 <c>_self</c>: 現在のウィンドウで <paramref name="url" /> を開きます。  
  
 <c>_top</c>: <c>FRAME</c> 要素に属するウィンドウに対して呼び出した場合は、その <c>FRAMESET</c> をホストするウィンドウで <paramref name="url" /> を開きます。 それ以外の場合は、<c>_self</c> と同じ動作になります。</param>
        <param name="windowOptions">次のオプションのうち、<c>name=value</c> の形式で表された 0 個以上のオプションを含むコンマ区切り文字列。 <c>left</c>、<c>top</c>、<c>height</c>、<c>width</c> のオプションについては、任意の整数を指定できます。それ以外の各オプションについて有効な値は、<c>yes</c> (<see langword="1" />) と <c>no</c> (<see langword="0" />) のいずれかです。  
  
 <c>channelmode</c>: Internet Explorer 4.0 の非推奨とされたチャネルのテクノロジで使用されます。 既定値は <c>no</c> です。  
  
 <c>directories</c>: ウィンドウにディレクトリ移動ボタンを表示するかどうか。 既定値は <c>yes</c> です。  
  
 <c>height</c>: ウィンドウのクライアント領域の高さ (ピクセル単位)。 最小値は 100 です。これよりも小さいウィンドウを開こうとすると、Internet Explorer の既定値に従ってウィンドウが開かれます。  
  
 <c>left</c>: ユーザーの画面の左上隅を基準とした、ウィンドウの左側 (x 座標) の相対位置 (ピクセル単位)。 正の整数にする必要があります。  
  
 <c>location</c>: ユーザーがウィンドウを新しい URL に移動できるようにするアドレス バーを表示するかどうか。 既定値は <c>yes</c> です。  
  
 <c>menubar</c>: 新しいウィンドウにメニューを表示するかどうか。 既定値は <c>yes</c> です。  
  
 <c>resizable</c>: ユーザーがウィンドウのサイズを変更できるかどうか。 既定値は <c>yes</c> です。  
  
 <c>scrollbars</c>: ウィンドウに水平スクロール バーと垂直スクロール バーを配置するかどうか。 既定値は <c>yes</c> です。  
  
 <c>status</c>: ウィンドウの下部にステータス バーを配置するかどうか。 既定値は <c>yes</c> です。  
  
 <c>titlebar</c>: 現在のページのタイトルを表示するかどうか。 マネージド アプリケーションでこのオプションを <c>no</c> に設定しても影響はなく、タイトル バーは常に表示されます。  
  
 <c>toolbar</c>: **[戻る]**、**[進む]**、**[停止]** などのツールバー ボタンを表示するかどうか。 既定値は <c>yes</c> です。  
  
 <c>top</c>: ユーザーの画面の左上隅を基準とした、ウィンドウの上端 (y 座標) の相対位置 (ピクセル単位)。 正の整数にする必要があります。  
  
 <c>width</c>: ウィンドウのクライアント領域の幅 (ピクセル単位)。 最小値は 100 です。これよりも小さいウィンドウを開こうとすると、Internet Explorer の既定値に従ってウィンドウが開かれます。</param>
        <param name="replaceEntry">ナビゲーション履歴に保存されている現在のウィンドウの URL を <paramref name="url" /> に置き換えるかどうか。 これは、<see cref="T:System.Windows.Forms.HtmlHistory" /> クラスのメソッドの操作に影響を及ぼします。</param>
        <summary>指定したウィンドウにファイルを表示します。</summary>
        <returns>新しいウィンドウ、または <paramref name="target" /> パラメーターで指定された以前に作成されたウィンドウを表す <see cref="T:System.Windows.Forms.HtmlWindow" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `target` パラメーターは、前に <xref:System.Windows.Forms.HtmlWindow.Open%2A>を呼び出した結果として作成されたウィンドウに名前を付けます。 また、パラメーターは、ハイパーリンク (`A` 要素) をクリックするか、`TARGET` 属性を使用して URL を新しいウィンドウで開く `FORM` 要素をクリックすることによって開くこともできます。 次の HTML コードは、ユーザーがクリックすると `orderWindow` という名前の新しいウィンドウを開きます。  
  
 `<A HREF="/startOrder.aspx" TARGET="orderWindow">Click to Start Order</a>`  
  
 `windowOptions` パラメーターにオプションを指定した場合、含まれていないオプションは自動的に無効になります。 つまり、ステータスバーを必要とする `windowOptions` によってのみ指定した場合、メニューバー、ツールバー、タイトル、スクロールバーなどは、`windowOptions`によって明示的に有効にしない限り表示されません。  
  
 `url` によって参照されるファイルが、Internet Explorer 内でホストできる HTML ファイル、テキストファイル、またはその他の種類のファイルの場合は、名前付きのウィンドウに表示されます。 ファイルが Internet Explorer の内部に表示されず、[ターゲット] という名前のウィンドウが存在しない場合は、Internet Explorer がリソースをダウンロードするのに十分な時間だけ、ウィンドウが開きます。その後すぐに終了します。  
  
 <xref:System.Windows.Forms.HtmlWindow.Open%2A> または <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>を使用して新しいウィンドウを作成すると、HTML ドキュメントオブジェクトモデルによって Internet Explorer の新しいインスタンスが開かれます。 作成したすべての windows で <xref:System.Windows.Forms.HtmlWindow.Close%2A> を呼び出さない場合、アプリケーションが終了した後も、Internet Explorer のこのインスタンスは実行されたままになります。  
  
 <xref:System.Windows.Forms.HtmlWindow.Open%2A> を使用して既存のウィンドウに URL を読み込む場合、`windowOptions` は無視されます。このウィンドウでは、最初に <xref:System.Windows.Forms.HtmlWindow.Open%2A> を呼び出すことによって、ディメンション、外観、および画面の場所が表示されます。  
  
   
  
## Examples  
 次のコード例には、2つのメソッドが含まれています。  
  
-   最初のは、`displayWindow`という名前のウィンドウで URL を開きます。このウィンドウには、ステータスバーが表示された状態で作成されます。  
  
-   2番目の方法では、同じウィンドウで別の URL を開きますが、場所バーのみを表示するように指定します。  
  
 ウィンドウのサイズと表示されるコントロールは、最初に開いた URL によって異なります。 このコード例では、フォームに `WebBrowser1`という名前の <xref:System.Windows.Forms.WebBrowser> コントロールが含まれている必要があります。  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#13)]
 [!code-vb[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#13)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536651.aspx">open メソッド</related>
      </Docs>
    </Member>
    <Member MemberName="Opener">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Opener { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindow Opener" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Opener" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Opener As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlWindow ^ Opener { System::Windows::Forms::HtmlWindow ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Opener : System.Windows.Forms.HtmlWindow" Usage="System.Windows.Forms.HtmlWindow.Opener" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のウィンドウを開いたウィンドウへの参照を取得します。</summary>
        <value><see cref="T:System.Windows.Forms.HtmlWindow" /> メソッドまたは <see cref="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" /> メソッドの呼び出しによって作成された <see cref="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" />。 ウィンドウがこれらのメソッドのいずれかを使用して作成されていない場合、このプロパティは <see langword="null" /> を返します。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenNew">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>新しいウィンドウにファイルを表示します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenNew">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow OpenNew (string urlString, string windowOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow OpenNew(string urlString, string windowOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenNew (urlString As String, windowOptions As String) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ OpenNew(System::String ^ urlString, System::String ^ windowOptions);" />
      <MemberSignature Language="F#" Value="member this.OpenNew : string * string -&gt; System.Windows.Forms.HtmlWindow" Usage="htmlWindow.OpenNew (urlString, windowOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlString" Type="System.String" />
        <Parameter Name="windowOptions" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="urlString">読み込むファイルの場所を記述する URL。</param>
        <param name="windowOptions">次のオプションのうち、<c>name=value</c> の形式で表された 0 個以上のオプションを含むコンマ区切り文字列。 有効なオプションの詳細については、<see cref="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" /> のトピックを参照してください。</param>
        <summary>新しいウィンドウにファイルを表示します。</summary>
        <returns>新しいウィンドウを表す <see cref="T:System.Windows.Forms.HtmlWindow" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `url` によって参照されるファイルが、Internet Explorer 内でホストできる HTML ファイル、テキストファイル、またはその他の種類のファイルの場合は、新しいウィンドウに表示されます。 ファイルを Internet Explorer 内に表示できない場合は、Internet Explorer がリソースをダウンロードするのに十分な時間だけウィンドウが開きます。その後すぐに終了します。  
  
 <xref:System.Windows.Forms.HtmlWindow.Open%2A> または <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>を使用して新しいウィンドウを作成すると、HTML ドキュメントオブジェクトモデルによって Internet Explorer の新しいインスタンスが開かれます。 作成したすべての windows で <xref:System.Windows.Forms.HtmlWindow.Close%2A> を呼び出さない場合、アプリケーションが終了した後も、Internet Explorer のこのインスタンスは実行されたままになります。  
  
 以前に開いたウィンドウにドキュメントを読み込む場合は、<xref:System.Windows.Forms.HtmlWindow.Open%2A> メソッドを参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenNew">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow OpenNew (Uri url, string windowOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow OpenNew(class System.Uri url, string windowOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.OpenNew(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenNew (url As Uri, windowOptions As String) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ OpenNew(Uri ^ url, System::String ^ windowOptions);" />
      <MemberSignature Language="F#" Value="member this.OpenNew : Uri * string -&gt; System.Windows.Forms.HtmlWindow" Usage="htmlWindow.OpenNew (url, windowOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
        <Parameter Name="windowOptions" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">読み込むファイルの場所を記述する URL。</param>
        <param name="windowOptions">次のオプションのうち、<c>name=value</c> の形式で表された 0 個以上のオプションを含むコンマ区切り文字列。 有効なオプションの詳細については、<see cref="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" /> のトピックを参照してください。</param>
        <summary>新しいウィンドウにファイルを表示します。</summary>
        <returns>新しいウィンドウを表す <see cref="T:System.Windows.Forms.HtmlWindow" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `url` によって参照されるファイルが、Internet Explorer 内でホストできる HTML ファイル、テキストファイル、またはその他の種類のファイルの場合は、新しいウィンドウに表示されます。 ファイルを Internet Explorer 内に表示できない場合は、Internet Explorer がリソースをダウンロードするのに十分な時間だけウィンドウが開きます。その後すぐに終了します。  
  
 <xref:System.Windows.Forms.HtmlWindow.Open%2A> または <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>を使用して新しいウィンドウを作成すると、HTML ドキュメントオブジェクトモデルによって Internet Explorer の新しいインスタンスが開かれます。 作成したすべての windows で <xref:System.Windows.Forms.HtmlWindow.Close%2A> を呼び出さない場合、アプリケーションが終了した後も、Internet Explorer のこのインスタンスは実行されたままになります。  
  
 以前に開いたウィンドウにドキュメントを読み込む場合は、<xref:System.Windows.Forms.HtmlWindow.Open%2A> メソッドを参照してください。  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536651.aspx">open メソッド</related>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindow Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlWindow ^ Parent { System::Windows::Forms::HtmlWindow ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Windows.Forms.HtmlWindow" Usage="System.Windows.Forms.HtmlWindow.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フレームを含むページにおいて、現在のウィンドウの上位にあるウィンドウを取得します。</summary>
        <value>現在のウィンドウを所有する <see cref="T:System.Windows.Forms.HtmlWindow" />。 現在のウィンドウが<c>フレーム</c>ではない場合、または<c>フレーム</c>内に埋め込まれていない場合は、<see langword="null" />を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 フレームを含むドキュメントでは、`FRAMESET` 内の各 `FRAME` は、ページ上の個別の子ウィンドウとして機能します。 各 `FRAME` の親は、`FRAME`を含む `FRAMESET` です。  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534326.aspx">親プロパティ</related>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public System.Drawing.Point Position { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point Position" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Position" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Position As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Point Position { System::Drawing::Point get(); };" />
      <MemberSignature Language="F#" Value="member this.Position : System.Drawing.Point" Usage="System.Windows.Forms.HtmlWindow.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>画面におけるウィンドウのクライアント領域の位置を取得します。</summary>
        <value>画面の左上隅の x 座標と y 座標をピクセル単位で記述する <see cref="T:System.Drawing.Point" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.WebBrowser> コントロールの <xref:System.Windows.Forms.Control.Location%2A> プロパティは、フォームの左上隅を基準としてコントロールの位置を返します。 これに対し、<xref:System.Windows.Forms.HtmlWindow.Position%2A> は、ユーザーのモニターの左上隅を基準として、ドキュメントの表示領域の位置を返します。  
  
   
  
## Examples  
 次のコード例では、フォーム上の <xref:System.Windows.Forms.WebBrowser> コントロールに対して、新しいウィンドウを直接開きます。 このコード例では、フォームに `WebBrowser1`という名前の <xref:System.Windows.Forms.WebBrowser> コントロールのインスタンスが含まれている必要があります。  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#5)]
 [!code-vb[System.Windows.Forms.HtmlWindow#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/cc06e61f-43b6-4408-a676-2542dcfcd96e">Windows フォームの座標</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534389.aspx">screenLeft プロパティ</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534390.aspx">screenTop プロパティ</related>
      </Docs>
    </Member>
    <Member MemberName="Prompt">
      <MemberSignature Language="C#" Value="public string Prompt (string message, string defaultInputValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Prompt(string message, string defaultInputValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Prompt(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Prompt (message As String, defaultInputValue As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Prompt(System::String ^ message, System::String ^ defaultInputValue);" />
      <MemberSignature Language="F#" Value="member this.Prompt : string * string -&gt; string" Usage="htmlWindow.Prompt (message, defaultInputValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="defaultInputValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">ユーザーに表示するメッセージ。</param>
        <param name="defaultInputValue">テキスト ボックスに表示する既定値。</param>
        <summary>メッセージとテキスト ボックスをユーザーに表示するダイアログ ボックスを表示します。</summary>
        <returns>ユーザーによって入力されたテキストを表す <see cref="T:System.String" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.Prompt%2A> を使用すると、ユーザーから簡単なテキスト入力を簡単に取得できます。  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536673.aspx">prompt メソッド</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveFocus">
      <MemberSignature Language="C#" Value="public void RemoveFocus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveFocus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.RemoveFocus" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveFocus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveFocus();" />
      <MemberSignature Language="F#" Value="member this.RemoveFocus : unit -&gt; unit" Usage="htmlWindow.RemoveFocus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のウィンドウからフォーカスを移します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `FRAMESET`内の `FRAME` ウィンドウで呼び出されると、<xref:System.Windows.Forms.HtmlWindow.RemoveFocus%2A> によってウィンドウにフォーカスが失われますが、別のウィンドウにフォーカスが自動的に設定されることはありません。  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536347.aspx">ぼかしメソッド</related>
      </Docs>
    </Member>
    <Member MemberName="Resize">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Resize;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Resize" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Resize" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Resize As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Resize;" />
      <MemberSignature Language="F#" Value="member this.Resize : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Resize : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーがマウスを使用してウィンドウの寸法を変更すると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 このメンバーの使用例を次のコード例に示します。 この例では、イベントハンドラーは、<xref:System.Windows.Forms.HtmlWindow.Resize> イベントの発生を報告します。 このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。 複数のイベントまたは頻繁に発生するイベントについてレポートするには、<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> を <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> に置き換えるか、複数行 <xref:System.Windows.Forms.TextBox>にメッセージを追加することを検討してください。  
  
 コード例を実行するには、`HtmlWindow1`という <xref:System.Windows.Forms.HtmlWindow> 型のインスタンスを含むプロジェクトに貼り付けます。 次に、イベントハンドラーが <xref:System.Windows.Forms.HtmlWindow.Resize> イベントに関連付けられていることを確認します。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#455](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#455)]
 [!code-vb[System.Windows.Forms.EventExamples#455](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#455)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536959.aspx">onresize イベント</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ResizeTo">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ウィンドウのサイズを指定した寸法に変更します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ResizeTo">
      <MemberSignature Language="C#" Value="public void ResizeTo (System.Drawing.Size size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResizeTo(valuetype System.Drawing.Size size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ResizeTo(System.Drawing.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResizeTo (size As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResizeTo(System::Drawing::Size size);" />
      <MemberSignature Language="F#" Value="member this.ResizeTo : System.Drawing.Size -&gt; unit" Usage="htmlWindow.ResizeTo size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="size">ウィンドウの幅と高さをピクセル単位で記述する <see cref="T:System.Drawing.Size" />。 幅も高さも 100 ピクセル以上にする必要があります。</param>
        <summary>ウィンドウのサイズを指定した寸法に変更します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例では、新しいウィンドウを開き、使用可能な画面領域に合わせてサイズを変更します。  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#15)]
 [!code-vb[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">サイズ変更対象のウィンドウが、親ウィンドウとは別のドメインにあります。 この制限はフレーム間スクリプト セキュリティの一部です。詳細については、「[フレーム間スクリプトおよびセキュリティについて](https://msdn.microsoft.com/library/ms533028.aspx)」を参照してください。</exception>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536723.aspx">resizeTo メソッド</related>
      </Docs>
    </Member>
    <Member MemberName="ResizeTo">
      <MemberSignature Language="C#" Value="public void ResizeTo (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResizeTo(int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ResizeTo(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResizeTo (width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResizeTo(int width, int height);" />
      <MemberSignature Language="F#" Value="member this.ResizeTo : int * int -&gt; unit" Usage="htmlWindow.ResizeTo (width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">目的のウィンドウの幅をピクセル単位で記述します。 100 ピクセル以上にする必要があります。</param>
        <param name="height">目的のウィンドウの高さをピクセル単位で記述します。 100 ピクセル以上にする必要があります。</param>
        <summary>ウィンドウのサイズを指定した寸法に変更します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.UnauthorizedAccessException">サイズ変更対象のウィンドウが、親ウィンドウとは別のドメインにあります。 この制限はフレーム間スクリプト セキュリティの一部です。詳細については、「[フレーム間スクリプトおよびセキュリティについて](https://msdn.microsoft.com/library/ms533028.aspx)」を参照してください。</exception>
      </Docs>
    </Member>
    <Member MemberName="Scroll">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Scroll;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Scroll" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Scroll" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Scroll As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Scroll;" />
      <MemberSignature Language="F#" Value="member this.Scroll : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Scroll : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーがウィンドウをスクロールして、画面に表示されていなかったテキストを表示すると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 このメンバーの使用例を次のコード例に示します。 この例では、イベントハンドラーは、<xref:System.Windows.Forms.HtmlWindow.Scroll> イベントの発生を報告します。 このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。 複数のイベントまたは頻繁に発生するイベントについてレポートするには、<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> を <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> に置き換えるか、複数行 <xref:System.Windows.Forms.TextBox>にメッセージを追加することを検討してください。  
  
 コード例を実行するには、`HtmlWindow1`という <xref:System.Windows.Forms.HtmlWindow> 型のインスタンスを含むプロジェクトに貼り付けます。 次に、イベントハンドラーが <xref:System.Windows.Forms.HtmlWindow.Scroll> イベントに関連付けられていることを確認します。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#456](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#456)]
 [!code-vb[System.Windows.Forms.EventExamples#456](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#456)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536966.aspx">onscroll イベント</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ScrollTo">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した位置までウィンドウをスクロールします。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ScrollTo">
      <MemberSignature Language="C#" Value="public void ScrollTo (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollTo(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ScrollTo(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScrollTo (point As Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollTo(System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.ScrollTo : System.Drawing.Point -&gt; unit" Usage="htmlWindow.ScrollTo point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">現在のウィンドウの左上隅を基準とした、ページのスクロール先の x 座標と y 座標。</param>
        <summary>ウィンドウを指定された座標に移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> により、ドキュメントの指定した座標がドキュメントのウィンドウの左上隅に配置されるように、ドキュメントがスクロールされます。 ドキュメントが長すぎていない場合、またはこの処理に十分な大きさでない場合、<xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> は、指定された方向で可能な限りドキュメントをスクロールします。  
  
   
  
## Examples  
 次のコード例では、ユーザーがクリックした座標位置までドキュメントをスクロールします。  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#15)]
 [!code-vb[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#15)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536731.aspx">scrollTo メソッド</related>
      </Docs>
    </Member>
    <Member MemberName="ScrollTo">
      <MemberSignature Language="C#" Value="public void ScrollTo (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollTo(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ScrollTo(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScrollTo (x As Integer, y As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollTo(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.ScrollTo : int * int -&gt; unit" Usage="htmlWindow.ScrollTo (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">現在のウィンドウの左上隅を基準とした、ページのスクロール先の x 座標。</param>
        <param name="y">現在のウィンドウの左上隅を基準とした、ページのスクロール先の y 座標。</param>
        <summary>指定した位置までウィンドウをスクロールします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> により、ドキュメントの指定した座標がドキュメントのウィンドウの左上隅に配置されるように、ドキュメントがスクロールされます。 ドキュメントが長すぎていない場合、またはこの処理に十分な大きさでない場合、<xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> は、指定された方向で可能な限りドキュメントをスクロールします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public System.Drawing.Size Size { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size Size" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Size" />
      <MemberSignature Language="VB.NET" Value="Public Property Size As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size Size { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberSignature Language="F#" Value="member this.Size : System.Drawing.Size with get, set" Usage="System.Windows.Forms.HtmlWindow.Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のウィンドウのサイズを取得または設定します。</summary>
        <value>ウィンドウのサイズをピクセル単位で記述する <see cref="T:System.Drawing.Size" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StatusBarText">
      <MemberSignature Language="C#" Value="public string StatusBarText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StatusBarText" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.StatusBarText" />
      <MemberSignature Language="VB.NET" Value="Public Property StatusBarText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StatusBarText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.StatusBarText : string with get, set" Usage="System.Windows.Forms.HtmlWindow.StatusBarText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ウィンドウのステータス バーに表示されるテキストを取得または設定します。</summary>
        <value>現在のステータス テキストを格納する <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.WebBrowser> コントロールにはステータスバーは表示されません。 ただし、<xref:System.Windows.Forms.HtmlWindow.Open%2A> または <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> メソッドを使用して開いた新しいウィンドウでは、既定でステータスバーが表示されます。  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534648.aspx">status プロパティ</related>
      </Docs>
    </Member>
    <Member MemberName="Unload">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Unload;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Unload" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Unload" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Unload As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Unload;" />
      <MemberSignature Language="F#" Value="member this.Unload : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Unload : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のページがアンロード中で、新しいページが表示される直前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 このメンバーの使用例を次のコード例に示します。 この例では、イベントハンドラーは、<xref:System.Windows.Forms.HtmlWindow.Unload> イベントの発生を報告します。 このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。 複数のイベントまたは頻繁に発生するイベントについてレポートするには、<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> を <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> に置き換えるか、複数行 <xref:System.Windows.Forms.TextBox>にメッセージを追加することを検討してください。  
  
 コード例を実行するには、`HtmlWindow1`という <xref:System.Windows.Forms.HtmlWindow> 型のインスタンスを含むプロジェクトに貼り付けます。 次に、イベントハンドラーが <xref:System.Windows.Forms.HtmlWindow.Unload> イベントに関連付けられていることを確認します。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#457](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#457)]
 [!code-vb[System.Windows.Forms.EventExamples#457](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#457)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536973.aspx">onunload イベント</related>
      </Docs>
    </Member>
    <Member MemberName="Url">
      <MemberSignature Language="C#" Value="public Uri Url { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Url" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Url" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Url As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ Url { Uri ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Url : Uri" Usage="System.Windows.Forms.HtmlWindow.Url" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ウィンドウに表示されている現在の項目に対応する URL を取得します。</summary>
        <value>URL を記述する <see cref="T:System.Uri" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは読み取り専用です。 ウィンドウを新しいドキュメントに移動するには、<xref:System.Windows.Forms.HtmlWindow.Navigate%2A> メソッドを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowFrameElement">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement WindowFrameElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement WindowFrameElement" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.WindowFrameElement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WindowFrameElement As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ WindowFrameElement { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WindowFrameElement : System.Windows.Forms.HtmlElement" Usage="System.Windows.Forms.HtmlWindow.WindowFrameElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このウィンドウに対応するフレーム要素を取得します。</summary>
        <value>このウィンドウの<c>フレーム</c>要素に対応する <see cref="T:System.Windows.Forms.HtmlElement" />。 このウィンドウがフレームではない場合、<see langword="null" /> を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.Frames%2A> コレクションから `FRAME` 要素を取得すると、<xref:System.Windows.Forms.HtmlWindow>が返されます。 `SRC` 属性など、基になる `FRAME` 要素の属性にアクセスする必要がある場合は、このオブジェクトの <xref:System.Windows.Forms.HtmlWindow.WindowFrameElement%2A> を呼び出します。  
  
   
  
## Examples  
 次のコード例では、`FRAMESET` 内のフレームの `SRC` 属性を現在の場所と比較します。 これらが異なる場合は、フレームが元の Url にリセットされます。  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms533771.aspx">フレーム要素のプロパティ</related>
      </Docs>
    </Member>
  </Members>
</Type>
