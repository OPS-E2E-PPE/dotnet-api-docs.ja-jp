<Type Name="SendKeys" FullName="System.Windows.Forms.SendKeys">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2d054fa806912625ae76ff351b1f306709db130f" /><Meta Name="ms.sourcegitcommit" Value="a8ff98b48bda124cfcb2605f5da9b21bc6dcd791" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/14/2020" /><Meta Name="ms.locfileid" Value="77245449" /></Metadata><TypeSignature Language="C#" Value="public class SendKeys" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi SendKeys extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.SendKeys" />
  <TypeSignature Language="VB.NET" Value="Public Class SendKeys" />
  <TypeSignature Language="C++ CLI" Value="public ref class SendKeys" />
  <TypeSignature Language="F#" Value="type SendKeys = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>キーストロークをアプリケーションに送信するメソッドを指定します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.SendKeys> を使用して、アクティブなアプリケーションにキーストロークとキーストロークの組み合わせを送信します。 このクラスはインスタンス化できません。 クラスにキーストロークを送信し、プログラムのフローをすぐに続行するには、<xref:System.Windows.Forms.SendKeys.Send%2A>を使用します。 キーストロークによって開始されたプロセスを待機するには、<xref:System.Windows.Forms.SendKeys.SendWait%2A>を使用します。  
  
 各キーは、1つまたは複数の文字で表されます。 1つのキーボード文字を指定するには、文字自体を使用します。 たとえば、文字 A を表すには、文字列 "A" をメソッドに渡します。 複数の文字を表すには、その前に1つの文字を追加します。 A、B、および C という文字を表すには、パラメーターを "ABC" として指定します。  
  
 正符号 (+)、キャレット (^)、パーセント記号 (%)、チルダ (~)、およびかっこ () は、<xref:System.Windows.Forms.SendKeys>に特別な意味を持ちます。 これらの文字のいずれかを指定するには、中かっこ ({}) で囲みます。 たとえば、プラス記号を指定するには、"{+}" を使用します。 中かっこ文字を指定するには、"{{}" と "{}}" を使用します。 角かっこ ([]) は <xref:System.Windows.Forms.SendKeys>に特別な意味はありませんが、中かっこで囲む必要があります。 他のアプリケーションでは、ダイナミックデータエクスチェンジ (DDE) が発生したときに、角かっこによって特別な意味を持つ場合があります。  
  
> [!CAUTION]
>  アプリケーションが国際対応し、さまざまなキーボードの使用を想定している場合は、 <xref:System.Windows.Forms.SendKeys.Send%2A> の使用により予期しない結果になる可能性があるため、回避する必要があります。  
  
 ENTER や TAB、文字ではなくアクションを表すキーなど、キーを押したときに表示されない文字を指定するには、次の表のコードを使用します。  
  
|Key|コード|  
|---------|----------|  
|BackSpace|{BACKSPACE}、{BS}、または {BKSP}|  
|BREAK|改|  
|CapsLock|{CAPSLOCK}|  
|DEL または DELETE|{DELETE} または {DEL}|  
|下方向キー|ダウン|  
|END|{END}|  
|Enter|{ENTER} または ~|  
|Esc|{ESC}|  
|HELP|{HELP}|  
|Home|出張|  
|INS または INSERT|{INSERT} または {INS}|  
|←|{LEFT}|  
|NUMLOCK|{NUMLOCK}|  
|PageDown|{PGDN}|  
|PageUp|{PGUP}|  
|印刷画面|{PRTSC}(将来使用するために予約されています)|  
|→|{RIGHT}|  
|スクロールロック|{SCROLLLOCK}|  
|Tab|{TAB}|  
|↑|{UP}|  
|F1|{F1}|  
|F2|{F2}|  
|F3|{F3}|  
|F4|{F4}|  
|F5|{F5}|  
|F6|{F6}|  
|F7|{F7}|  
|F8|{F8}|  
|F9|{F9}|  
|F10|{F10}|  
|F11|{F11}|  
|F12|{F12}|  
|F13|{F13}|  
|F14|{F14}|  
|F15|{F15}|  
|F16|{F16}|  
|キーボードの追加|{ADD}|  
|キーパッドの減算|引く|  
|テンキーの乗算|乗じる|  
|キーパッドの分割|{DIVIDE}|  
  
 SHIFT、CTRL、ALT の各キーの任意の組み合わせと組み合わせてキーを指定するには、キーコードの前に次のコードを1つ以上追加します。  
  
|Key|コード|  
|---------|----------|  
|Shift|+|  
|CTRL|^|  
|Alt|%|  
  
 他のいくつかのキーが押されている間に、SHIFT、CTRL、ALT の任意の組み合わせを保持するように指定するには、それらのキーのコードをかっこで囲みます。 たとえば、E と C が押されている間に SHIFT キーを押したままにするように指定するには、"+ (EC)" を使用します。 E が押されている間に shift キーを押したまま shift キーを押したままにする場合は、"+ EC" を使用します。  
  
 繰り返しキーを指定するには、{key number} という形式を使用します。 キーと数値の間にスペースを入れる必要があります。 たとえば、{LEFT 42} は左矢印キーを42回押すことを意味します。{h 10} は、H を10回押すことを意味します。  
  
> [!NOTE]
>  別のアプリケーションをアクティブ化するマネージメソッドがないため、現在のアプリケーション内でこのクラスを使用するか、`FindWindow` や `SetForegroundWindow`などのネイティブ Windows メソッドを使用して、他のアプリケーションにフォーカスを移すことができます。  
  
> [!NOTE]
>  .NET Framework 3.0 の <xref:System.Windows.Forms.SendKeys> クラスが更新され、Windows Vista で実行されるアプリケーションで使用できるようになりました。 Windows Vista の強化されたセキュリティ、(ユーザー アカウント制御または UAC と呼ばれます) により、前の実装は想定どおり機能できません。  
>   
>  <xref:System.Windows.Forms.SendKeys> クラスはタイミングの問題が発生する可能性があり、一部の開発者は回避策を取る必要がありました。 更新された実装は、引き続きタイミングの問題が発生する可能性がありますが、速度が少し向上し、回避策の変更が必要となる可能性があります。 <xref:System.Windows.Forms.SendKeys> クラスは、最初に前の実装を使用しようとし、失敗した場合に、新しい実装を使用します。 その結果、 <xref:System.Windows.Forms.SendKeys> クラスが別のオペレーティング システムと異なる動作を取る可能性があります。 さらに、 <xref:System.Windows.Forms.SendKeys> クラスは、新しい実装を使用した場合、 <xref:System.Windows.Forms.SendKeys.SendWait%2A> メソッドが別のプロセスに送信されたときにメッセージの処理を待機しません。  
>   
>  アプリケーションが、オペレーティング システムに関係なく一貫した動作に依存する場合、app.config ファイルに次のアプリケーション設定を追加することで、 <xref:System.Windows.Forms.SendKeys> クラスが新しい実装を使用するよう強制することができます。  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  <xref:System.Windows.Forms.SendKeys> クラスが前の実装を使用するよう強制するには、代わりに値 `"JournalHook"` を使用します。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Windows.Forms.SendKeys.Send%2A> メソッドの使用方法を示します。 この例を実行するには、Button1 というボタンを含む Form1 という名前のフォームに次のコードを貼り付けます。 この例では、click イベントがイベント処理メソッドに関連付けられていることを確認します。 ボタンコントロールの <xref:System.Windows.Forms.Control.TabIndex%2A> プロパティは0に設定する必要があります。 この例が実行されている場合は、フォームをダブルクリックして、ボタンの click イベントをトリガーします。  
  
 [!code-cpp[System.Windows.Forms.SendKeys#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.SendKeys#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.SendKeys#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public static void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Flush();" />
      <MemberSignature Language="F#" Value="static member Flush : unit -&gt; unit" Usage="System.Windows.Forms.SendKeys.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>メッセージ キューに現在ある Windows メッセージをすべて処理します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.SendKeys.Flush%2A> を使用すると、メッセージキューにあるキーストロークやその他のオペレーティングシステムメッセージをアプリケーションが処理するのを待ちます。 これは、処理するキーがなくなった場合に <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=nameWithType> を呼び出すことと同じです。  
  
> [!NOTE]
>  別のアプリケーションをアクティブ化するマネージメソッドがないため、現在のアプリケーション内でこのクラスを使用するか、`FindWindow` や `SetForegroundWindow`などのネイティブ Windows メソッドを使用して、他のアプリケーションにフォーカスを移すことができます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public static void Send (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Send(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Send (keys As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Send(System::String ^ keys);" />
      <MemberSignature Language="F#" Value="static member Send : string -&gt; unit" Usage="System.Windows.Forms.SendKeys.Send keys" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">送信するキーストロークの文字列。</param>
        <summary>キーストロークをアクティブなアプリケーションに送信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 各キーは、1つまたは複数の文字で表されます。 1つのキーボード文字を指定するには、文字自体を使用します。 たとえば、文字 A を表すには、文字列 "A" をメソッドに渡します。 複数の文字を表すには、その前に1つの文字を追加します。 A、B、および C という文字を表すには、パラメーターを "ABC" として指定します。  
  
 正符号 (+)、キャレット (^)、パーセント記号 (%)、チルダ (~)、およびかっこ () は、<xref:System.Windows.Forms.SendKeys>に特別な意味を持ちます。 これらの文字のいずれかを指定するには、中かっこ ({}) で囲みます。 たとえば、プラス記号を指定するには、"{+}" を使用します。 中かっこ文字を指定するには、"{{}" と "{}}" を使用します。 角かっこ ([]) は <xref:System.Windows.Forms.SendKeys>に特別な意味はありませんが、中かっこで囲む必要があります。 他のアプリケーションでは、ダイナミックデータエクスチェンジ (DDE) が発生したときに、角かっこによって特別な意味を持つ場合があります。  
  
> [!CAUTION]
>  アプリケーションが国際対応し、さまざまなキーボードの使用を想定している場合は、 <xref:System.Windows.Forms.SendKeys.Send%2A> の使用により予期しない結果になる可能性があるため、回避する必要があります。  
  
 ENTER や TAB、文字ではなくアクションを表すキーなど、キーを押したときに表示されない文字を指定するには、次の表のコードを使用します。  
  
|Key|コード|  
|---------|----------|  
|BackSpace|{BACKSPACE}、{BS}、または {BKSP}|  
|BREAK|改|  
|CapsLock|{CAPSLOCK}|  
|DEL または DELETE|{DELETE} または {DEL}|  
|下方向キー|ダウン|  
|END|{END}|  
|Enter|{ENTER} または ~|  
|Esc|{ESC}|  
|HELP|{HELP}|  
|Home|出張|  
|INS または INSERT|{INSERT} または {INS}|  
|←|{LEFT}|  
|NUMLOCK|{NUMLOCK}|  
|PageDown|{PGDN}|  
|PageUp|{PGUP}|  
|印刷画面|{PRTSC}(将来使用するために予約されています)|  
|→|{RIGHT}|  
|スクロールロック|{SCROLLLOCK}|  
|Tab|{TAB}|  
|↑|{UP}|  
|F1|{F1}|  
|F2|{F2}|  
|F3|{F3}|  
|F4|{F4}|  
|F5|{F5}|  
|F6|{F6}|  
|F7|{F7}|  
|F8|{F8}|  
|F9|{F9}|  
|F10|{F10}|  
|F11|{F11}|  
|F12|{F12}|  
|F13|{F13}|  
|F14|{F14}|  
|F15|{F15}|  
|F16|{F16}|  
|キーボードの追加|{ADD}|  
|キーパッドの減算|引く|  
|テンキーの乗算|乗じる|  
|キーパッドの分割|{DIVIDE}|  
  
 SHIFT、CTRL、ALT の各キーの任意の組み合わせと組み合わせてキーを指定するには、キーコードの前に次のコードを1つ以上追加します。  
  
|Key|コード|  
|---------|----------|  
|Shift|+|  
|CTRL|^|  
|Alt|%|  
  
 他のいくつかのキーが押されている間に、SHIFT、CTRL、ALT の任意の組み合わせを保持するように指定するには、それらのキーのコードをかっこで囲みます。 たとえば、E と C が押されている間に SHIFT キーを押したままにするように指定するには、"+ (EC)" を使用します。 E が押されている間に shift キーを押したまま shift キーを押したままにする場合は、"+ EC" を使用します。  
  
 繰り返しキーを指定するには、{key number} という形式を使用します。 キーと数値の間にスペースを入れる必要があります。 たとえば、{LEFT 42} は左矢印キーを42回押すことを意味します。{h 10} は、H を10回押すことを意味します。  
  
> [!NOTE]
>  別のアプリケーションをアクティブ化するマネージメソッドがないため、現在のアプリケーション内でこのクラスを使用するか、`FindWindow` や `SetForegroundWindow`などのネイティブ Windows メソッドを使用して、他のアプリケーションにフォーカスを移すことができます。  
  
> [!NOTE]
>  .NET Framework 3.0 の <xref:System.Windows.Forms.SendKeys> クラスが更新され、Windows Vista で実行されるアプリケーションで使用できるようになりました。 Windows Vista の強化されたセキュリティ、(ユーザー アカウント制御または UAC と呼ばれます) により、前の実装は想定どおり機能できません。  
>   
>  <xref:System.Windows.Forms.SendKeys> クラスはタイミングの問題が発生する可能性があり、一部の開発者は回避策を取る必要がありました。 更新された実装は、引き続きタイミングの問題が発生する可能性がありますが、速度が少し向上し、回避策の変更が必要となる可能性があります。 <xref:System.Windows.Forms.SendKeys> クラスは、最初に前の実装を使用しようとし、失敗した場合に、新しい実装を使用します。 その結果、 <xref:System.Windows.Forms.SendKeys> クラスが別のオペレーティング システムと異なる動作を取る可能性があります。 さらに、 <xref:System.Windows.Forms.SendKeys> クラスは、新しい実装を使用した場合、 <xref:System.Windows.Forms.SendKeys.SendWait%2A> メソッドが別のプロセスに送信されたときにメッセージの処理を待機しません。  
>   
>  アプリケーションが、オペレーティング システムに関係なく一貫した動作に依存する場合、app.config ファイルに次のアプリケーション設定を追加することで、 <xref:System.Windows.Forms.SendKeys> クラスが新しい実装を使用するよう強制することができます。  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  <xref:System.Windows.Forms.SendKeys> クラスが前の実装を使用するよう強制するには、代わりに値 `"JournalHook"` を使用します。  
  
   
  
## Examples  
 <xref:System.Windows.Forms.SendKeys.Send%2A> メソッドを使用する方法を次のコード例に示します。この例を実行するには、Button1 というボタンを含む Form1 という名前のフォームに次のコードを貼り付けます。 この例では、click イベントがイベント処理メソッドに関連付けられていることを確認します。 ボタンコントロールの <xref:System.Windows.Forms.Control.TabIndex%2A> プロパティは0に設定する必要があります。 この例が実行されている場合は、フォームをダブルクリックして、ボタンの click イベントをトリガーします。  
  
 [!code-cpp[System.Windows.Forms.SendKeys#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.SendKeys#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.SendKeys#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">キーストロークの送信先となるアクティブなアプリケーションはありません。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="keys" /> が有効なキーストロークを表していません。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendWait">
      <MemberSignature Language="C#" Value="public static void SendWait (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SendWait(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.SendWait(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SendWait (keys As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SendWait(System::String ^ keys);" />
      <MemberSignature Language="F#" Value="static member SendWait : string -&gt; unit" Usage="System.Windows.Forms.SendKeys.SendWait keys" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">送信するキーストロークの文字列。</param>
        <summary>特定のキーをアクティブなアプリケーションに送信し、メッセージが処理されるまで待機します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.SendKeys.SendWait%2A> を使用して、アクティブなアプリケーションにキーストロークまたはキーストロークの組み合わせを送信し、キーストロークメッセージが処理されるのを待ちます。 このメソッドを使用して、キーストロークをアプリケーションに送信し、キーストロークによって開始されたプロセスが完了するまで待機することができます。 これは、アプリケーションを続行する前に他のアプリケーションを終了する必要がある場合に重要です。  
  
> [!NOTE]
>  別のアプリケーションをアクティブ化するマネージメソッドがないため、現在のアプリケーション内でこのクラスを使用するか、`FindWindow` や `SetForegroundWindow`などのネイティブ Windows メソッドを使用して、他のアプリケーションにフォーカスを移すことができます。  
  
> [!NOTE]
>  .NET Framework 3.0 の <xref:System.Windows.Forms.SendKeys> クラスが更新され、Windows Vista で実行されるアプリケーションで使用できるようになりました。 Windows Vista の強化されたセキュリティ、(ユーザー アカウント制御または UAC と呼ばれます) により、前の実装は想定どおり機能できません。  
>   
>  <xref:System.Windows.Forms.SendKeys> クラスはタイミングの問題が発生する可能性があり、一部の開発者は回避策を取る必要がありました。 更新された実装は、引き続きタイミングの問題が発生する可能性がありますが、速度が少し向上し、回避策の変更が必要となる可能性があります。 <xref:System.Windows.Forms.SendKeys> クラスは、最初に前の実装を使用しようとし、失敗した場合に、新しい実装を使用します。 その結果、 <xref:System.Windows.Forms.SendKeys> クラスが別のオペレーティング システムと異なる動作を取る可能性があります。 さらに、 <xref:System.Windows.Forms.SendKeys> クラスは、新しい実装を使用した場合、 <xref:System.Windows.Forms.SendKeys.SendWait%2A> メソッドが別のプロセスに送信されたときにメッセージの処理を待機しません。  
>   
>  アプリケーションが、オペレーティング システムに関係なく一貫した動作に依存する場合、app.config ファイルに次のアプリケーション設定を追加することで、 <xref:System.Windows.Forms.SendKeys> クラスが新しい実装を使用するよう強制することができます。  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  <xref:System.Windows.Forms.SendKeys> クラスが前の実装を使用するよう強制するには、代わりに値 `"JournalHook"` を使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
