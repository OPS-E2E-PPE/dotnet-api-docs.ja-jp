<Type Name="Ping" FullName="System.Net.NetworkInformation.Ping">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a6d251d9fafeab266431ecfdf29b7b2b868ded2b" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82360886" /></Metadata><TypeSignature Language="C#" Value="public class Ping : System.ComponentModel.Component" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Ping extends System.ComponentModel.Component" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Net.NetworkInformation.Ping" />
  <TypeSignature Language="VB.NET" Value="Public Class Ping&#xA;Inherits Component" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class Ping : System::ComponentModel::Component" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="F#" Value="type Ping = class&#xA;    inherit Component" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="C#" Value="public class Ping : IDisposable" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Ping extends System.Object implements class System.IDisposable" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="VB.NET" Value="Public Class Ping&#xA;Implements IDisposable" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class Ping : IDisposable" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="F#" Value="type Ping = class&#xA;    interface IDisposable" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="C#" Value="public class Ping : System.ComponentModel.Component, IDisposable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Ping extends System.ComponentModel.Component implements class System.IDisposable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;xamarinios-10.8" />
  <TypeSignature Language="VB.NET" Value="Public Class Ping&#xA;Inherits Component&#xA;Implements IDisposable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class Ping : System::ComponentModel::Component, IDisposable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type Ping = class&#xA;    inherit Component&#xA;    interface IDisposable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Ping extends System.ComponentModel.Component implements class System.IDisposable" FrameworkAlternate="xamarinandroid-7.1;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Ping</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netcore-1.0;netcore-1.1">System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.MonoTODO("IPv6 support is missing")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>リモート コンピューターにネットワーク経由でアクセスできるかどうかをアプリケーションで確認できるようにします。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションは、<xref:System.Net.NetworkInformation.Ping> クラスを使用して、リモートコンピューターにアクセスできるかどうかを検出します。  
  
 ネットワークトポロジでは、<xref:System.Net.NetworkInformation.Ping> がリモートホストに正常に接続できるかどうかを判断できます。 プロキシ、ネットワークアドレス変換 (NAT) 機器、またはファイアウォールの存在と構成によって、<xref:System.Net.NetworkInformation.Ping> が成功するのを防ぐことができます。 成功した <xref:System.Net.NetworkInformation.Ping> は、ネットワーク上でリモートホストに到達できることのみを示します。リモートホスト上の上位レベルのサービス (Web サーバーなど) が存在するかどうかは保証されません。  
  
 このクラスは、Ping.exe コマンドラインツールと同様の機能を提供します。 <xref:System.Net.NetworkInformation.Ping.Send%2A> メソッドと <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> メソッドは、インターネット制御メッセージプロトコル (ICMP) エコー要求メッセージをリモートコンピューターに送信し、そのコンピューターから ICMP エコー応答メッセージを待機します。 ICMP メッセージの詳細については、「RFC 792 ( [https://www.ietf.org](https://www.ietf.org/))」を参照してください。  
  
 <xref:System.Net.NetworkInformation.Ping> クラスでは、次の型が使用されます。詳細については、以下で詳しく説明します。  
  
|**型名**|**説明**|  
|-------------------|---------------------|  
|<xref:System.Net.NetworkInformation.IPStatus>|ICMP エコー要求メッセージの結果を記述するステータスコードを定義します。|  
|<xref:System.Net.NetworkInformation.PingOptions>|では、要求パケットを転送できる回数 (<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>) と、それをフラグメント化できるかどうか (<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>) を制御する設定を構成または取得できます。|  
|<xref:System.Net.NetworkInformation.PingReply>|ICMP エコー要求の結果を格納します。|  
|<xref:System.Net.NetworkInformation.PingException>|回復不可能なエラーが発生した場合にスローされます。|  
|<xref:System.Net.NetworkInformation.PingCompletedEventArgs>|<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> の呼び出しが完了したとき、または取り消されたときに発生する <xref:System.Net.NetworkInformation.Ping.PingCompleted> イベントに関連付けられたデータを格納します。|  
|<xref:System.Net.NetworkInformation.PingCompletedEventHandler>|<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> の呼び出しが完了したとき、または取り消されたときに呼び出されるコールバックメソッドを提供するデリゲート。|  
  
 <xref:System.Net.NetworkInformation.Ping.Send%2A> メソッドと <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> メソッドは、<xref:System.Net.NetworkInformation.PingReply> オブジェクトで応答を返します。 <xref:System.Net.NetworkInformation.PingReply.Status%2A?displayProperty=nameWithType> プロパティは、要求の結果を示す <xref:System.Net.NetworkInformation.IPStatus> 値を返します。  
  
 要求を送信するときに、リモートコンピューターを指定する必要があります。 これを行うには、ホスト名文字列、文字列形式の IP アドレス、または <xref:System.Net.IPAddress> オブジェクトを指定します。  
  
 次のいずれかの種類の情報を指定することもできます。  
  
-   要求に付随するデータ。 `buffer` を指定すると、特定のサイズのパケットがリモートホストとの間で送受信されるのに必要な時間と、ネットワークパスの最大転送単位を調べることができます。 (<xref:System.Net.NetworkInformation.Ping.Send%2A>、または `buffer` パラメーターを受け取るオーバーロード <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> を参照してください。)  
  
-   ICMP エコーパケットを転送中にフラグメント化できるかどうかを指定します。 (<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> プロパティ、`options` パラメーターを受け取る <xref:System.Net.NetworkInformation.Ping.Send%2A> または <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> オーバーロードを参照してください。)  
  
-   ルーターやゲートウェイなどのルーティングノードが、対象のコンピューターに到達するか破棄される前にパケットを転送できる回数。 (<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> と、`options` パラメーターを受け取る <xref:System.Net.NetworkInformation.Ping.Send%2A> または <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> オーバーロードを参照してください。)  
  
-   応答を受信する必要がある制限時間。 (<xref:System.Net.NetworkInformation.Ping.Send%2A>、または `timeout` パラメーターを受け取るオーバーロード <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> を参照してください。  
  
 <xref:System.Net.NetworkInformation.Ping> クラスには、要求を送信するための同期メソッドと非同期メソッドの両方が用意されています。 応答を待機している間にアプリケーションがブロックする必要がある場合は、<xref:System.Net.NetworkInformation.Ping.Send%2A> メソッドを使用します。これらのメソッドは同期的です。 アプリケーションでブロックしない場合は、非同期 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> メソッドを使用します。 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> の呼び出しは、スレッドプールから自動的に割り当てられる独自のスレッドで実行されます。 非同期操作が完了すると、<xref:System.Net.NetworkInformation.Ping.PingCompleted> イベントが発生します。 アプリケーションでは、<xref:System.Net.NetworkInformation.PingCompletedEventHandler> デリゲートを使用して、<xref:System.Net.NetworkInformation.Ping.PingCompleted> イベントに対して呼び出されるメソッドを指定します。 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>を呼び出す前に、イベントに <xref:System.Net.NetworkInformation.PingCompletedEventHandler> デリゲートを追加する必要があります。 デリゲートのメソッドは、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> 呼び出しの結果を記述する <xref:System.Net.NetworkInformation.PingReply> オブジェクトを含む <xref:System.Net.NetworkInformation.PingCompletedEventArgs> オブジェクトを受け取ります。  
  
 <xref:System.Net.NetworkInformation.Ping> クラスの同じインスタンスを使用して、複数の同時 ICMP エコー要求を生成することはできません。 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> 呼び出し中に <xref:System.Net.NetworkInformation.Ping.Send%2A> を呼び出しているとき、または以前のすべての呼び出しが完了する前に複数回 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> を呼び出すと、<xref:System.InvalidOperationException>が発生します。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Net.NetworkInformation.Ping> クラスを同期的に使用する方法を示しています。  
  
 [!code-cpp[NCLPingSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingSync/CPP/syncping.cpp#1)]
 [!code-csharp[NCLPingSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingSync/CS/syncping.cs#1)]  
  
 次のコード例は、<xref:System.Net.NetworkInformation.Ping> クラスを非同期的に使用する方法を示しています。  
  
 [!code-cpp[NCLPingASync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#1)]
 [!code-csharp[NCLPingASync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/network-programming/how-to-ping-a-host.md">方法: ホストに対して ping を実行</related>
    <related type="Article" href="~/docs/framework/network-programming/index.md">.NET Framework のネットワーク プログラミング</related>
    <related type="Article" href="~/docs/framework/network-programming/network-programming-samples.md">ネットワーク プログラミングのサンプル</related>
    <related type="Article" href="~/docs/framework/network-programming/networkinformation.md">NetworkInformation</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Ping ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Ping();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Net.NetworkInformation.Ping" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、<xref:System.Net.NetworkInformation.Ping> インスタンスを作成する方法を示しています。 完全な例については、「<xref:System.Net.NetworkInformation.Ping> クラスの概要」を参照してください。  
  
 [!code-cpp[NCLPingAsync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#2)]
 [!code-csharp[NCLPingAsync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="ping.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="ping.Dispose disposing" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="ping.Dispose disposing" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
        <summary><see cref="T:System.Net.NetworkInformation.Ping" /> オブジェクトによって使用されているアンマネージド リソースを解放します。オプションとして、マネージド リソースを破棄することもできます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、パブリックな `Dispose()` メソッドと <xref:System.ComponentModel.Component.Finalize%2A> メソッドによって呼び出されます。 パブリック `Dispose()` メソッドは、`disposing` パラメーターを `true`に設定して、protected <xref:System.Net.NetworkInformation.Ping.Dispose%2A> メソッドを呼び出します。 <xref:System.ComponentModel.Component.Finalize%2A> は `disposing` を `false`に設定して `Dispose` を呼び出します。  
  
 `disposing` パラメーターが `true`場合、このメソッドは、この <xref:System.Net.NetworkInformation.Ping> オブジェクトが参照するすべてのマネージオブジェクトによって保持されているすべてのリソースを解放します。 このメソッドは、参照される各オブジェクトの `Dispose()` メソッドを呼び出します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPingCompleted">
      <MemberSignature Language="C#" Value="protected void OnPingCompleted (System.Net.NetworkInformation.PingCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnPingCompleted(class System.Net.NetworkInformation.PingCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnPingCompleted (e As PingCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnPingCompleted(System::Net::NetworkInformation::PingCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnPingCompleted : System.Net.NetworkInformation.PingCompletedEventArgs -&gt; unit" Usage="ping.OnPingCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.NetworkInformation.PingCompletedEventArgs" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Net.NetworkInformation.PingCompletedEventArgs" /> オブジェクト。</param>
        <summary><see cref="E:System.Net.NetworkInformation.Ping.PingCompleted" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping> クラスを継承するクラスは、このメソッドをオーバーライドして、`e` パラメーターに含まれるデータのログ記録などの追加のタスクを実行できます。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。  
  
 <xref:System.Net.NetworkInformation.Ping.OnPingCompleted%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取るように、基本クラスの <see cref="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)" /> メソッドを呼び出す必要があります。</para></block>
      </Docs>
    </Member>
    <Member MemberName="PingCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.NetworkInformation.PingCompletedEventHandler PingCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.NetworkInformation.PingCompletedEventHandler PingCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.NetworkInformation.Ping.PingCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PingCompleted As PingCompletedEventHandler " FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::NetworkInformation::PingCompletedEventHandler ^ PingCompleted;" />
      <MemberSignature Language="F#" Value="member this.PingCompleted : System.Net.NetworkInformation.PingCompletedEventHandler " Usage="member this.PingCompleted : System.Net.NetworkInformation.PingCompletedEventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event PingCompleted As PingCompletedEventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期の操作が ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを送信し、対応する ICMP エコー応答メッセージの受信を完了するか、またはキャンセルされたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションでは、<xref:System.Net.NetworkInformation.Ping.PingCompleted> イベントを使用して、完了ステータスと、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> メソッドのいずれかの呼び出しによって収集されたデータに関する情報を取得します。 <xref:System.Net.NetworkInformation.PingCompletedEventHandler> デリゲートは、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> がこのイベントを発生させたときに呼び出されるコールバックメソッドを提供します。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Net.NetworkInformation.Ping.PingCompleted> イベントのコールバックメソッドを指定する方法を示しています。 完全な例については、「<xref:System.Net.NetworkInformation.Ping> クラスの概要」を参照してください。  
  
 [!code-cpp[NCLPingAsync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#2)]
 [!code-csharp[NCLPingAsync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ICMP (インターネット制御メッセージ プロトコル) エコー メッセージをリモート コンピューターに送信し、そのリモート コンピューターから対応する ICMP エコー応答メッセージを受信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.Send%2A> のいずれかのオーバーロードによって返される IP アドレスは、悪意のあるリモートコンピューターからのものである可能性があります。 このを使用してリモートコンピューターに接続しないでください。 DNS を使用して、接続先のコンピューターの IP アドレスを決定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address">ICMP エコー メッセージの送信先コンピューターを識別する <see cref="T:System.Net.IPAddress" />。</param>
        <summary>指定した <see cref="T:System.Net.IPAddress" /> を持つコンピューターに ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。</summary>
        <returns>ICMP エコー応答メッセージが受信された場合は、そのメッセージに関する情報を提供し、メッセージが受信されなかった場合は、エラー原因の説明を提供する <see cref="T:System.Net.NetworkInformation.PingReply" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、ICMP エコーメッセージを使用して 32 <xref:System.Byte> データバッファーを `address` によって指定されたホストに送信します。 メソッドは、ICMP エコー応答メッセージを5秒間待機します。 この時間内に応答が受信されない場合、メソッドはを返し、<xref:System.Net.NetworkInformation.PingReply.Status%2A> プロパティは <xref:System.Net.NetworkInformation.IPStatus.TimedOut>に設定されます。  
  
 このオーバーロードは、パケットの断片化およびパケット転送に既定の設定を使用します。 ICMP エコーメッセージを含むパケットは、合計パケットサイズがローカルコンピューターとリモートコンピューター間のルーティングノードのいずれかによって送信される最大パケットサイズを超えた場合に、転送中に断片化することがあります。 断片化を防ぐには、`options` パラメーターを受け取る <xref:System.Net.NetworkInformation.Ping.Send%2A> メソッドの1つを使用し、<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> プロパティを `true`に設定します。 <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> が `true`、合計パケットサイズが、ローカルコンピューターとリモートコンピューターのいずれかのルーティングノードが送信できる最大パケットサイズを超えた場合、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A> は <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>に設定されます。 パケットフラグメント (フラグメント化されている場合) は、破棄される前に、ルーティングノードによって128回転送できます。 この設定を変更するには、`options` パラメーターを受け取る <xref:System.Net.NetworkInformation.Ping.Send%2A> オーバーロードを使用し、<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> プロパティを目的の値に設定します。 指定された回数の転送後にパケットが送信先に届かない場合、パケットは破棄され、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A> は <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>に設定されます。  
  
   
  
## Examples  
 次のコード例は、このメソッドの呼び出しを示しています。  
  
 [!code-cpp[NCLPingSampler#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#3)]
 [!code-csharp[NCLPingSampler#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> の呼び出しを実行中です。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">ICMP メッセージの送信中または受信中に例外がスローされました。 スローされた実際の例外については内部例外を参照してください。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress);" />
      <MemberSignature Language="F#" Value="member this.Send : string -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send hostNameOrAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">ICMP エコー メッセージの送信先コンピューターを識別する <see cref="T:System.String" />。 このパラメーターの値には、ホスト名または IP アドレスの文字列形式を指定できます。</param>
        <summary>ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを指定されたコンピューターに送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。</summary>
        <returns>ICMP エコー応答メッセージが受信された場合は、そのメッセージに関する情報を提供し、メッセージが受信されなかった場合は、エラーの原因を提供する <see cref="T:System.Net.NetworkInformation.PingReply" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、ICMP エコーメッセージを使用して 32 <xref:System.Byte> データバッファーを送信します。 メソッドは、ICMP エコー応答メッセージを5秒間待機します。 この時間内に応答が受信されない場合、メソッドはを返し、<xref:System.Net.NetworkInformation.PingReply.Status%2A> プロパティは <xref:System.Net.NetworkInformation.IPStatus.TimedOut>に設定されます。  
  
 このオーバーロードは、パケットの断片化およびパケット転送に既定の設定を使用します。 ICMP エコーメッセージを含むパケットは、合計パケットサイズがローカルコンピューターとリモートコンピューター間のルーティングノードのいずれかによって送信される最大パケットサイズを超えた場合に、転送中に断片化することがあります。 断片化を防ぐには、`options` パラメーターを受け取る <xref:System.Net.NetworkInformation.Ping.Send%2A> メソッドの1つを使用し、<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> プロパティを `true`に設定します。 <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> が `true`、合計パケットサイズが、ローカルコンピューターとリモートコンピューターのいずれかのルーティングノードが送信できる最大パケットサイズを超えた場合、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A> は <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>に設定されます。 パケットフラグメント (フラグメント化されている場合) は、破棄される前に、ルーティングノードによって128回転送できます。 この設定を変更するには、`options` パラメーターを受け取る <xref:System.Net.NetworkInformation.Ping.Send%2A> オーバーロードを使用し、<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> プロパティを目的の値に設定します。 指定された回数の転送後にパケットが送信先に届かない場合、パケットは破棄され、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A> は <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>に設定されます。  
  
   
  
## Examples  
 次のコード例は、このメソッドの呼び出しを示しています。  
  
 [!code-cpp[NCLPingSampler#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#2)]
 [!code-csharp[NCLPingSampler#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> が <see langword="null" /> または空の文字列 ("") です。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> の呼び出しを実行中です。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">ICMP メッセージの送信中または受信中に例外がスローされました。 スローされた実際の例外については内部例外を参照してください。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress, timeout As Integer) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address, int timeout);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress * int -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (address, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address">ICMP エコー メッセージの送信先コンピューターを識別する <see cref="T:System.Net.IPAddress" />。</param>
        <param name="timeout">エコー メッセージを送信してから ICMP エコー応答メッセージを待つ時間の最大値 (ミリ秒単位) を指定する <see cref="T:System.Int32" /> 値。</param>
        <summary>指定された <see cref="T:System.Net.IPAddress" /> を持つコンピューターに、指定されたデータ バッファーと共に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。 このメソッドを使用して、操作のタイムアウト値を指定できます。</summary>
        <returns>ICMP エコー応答メッセージが受信された場合は、そのメッセージに関する情報を提供し、メッセージが受信されなかった場合は、エラーの原因を提供する <see cref="T:System.Net.NetworkInformation.PingReply" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `timeout` パラメーターで指定された時間内に ICMP エコー応答メッセージが受信されない場合、ICMP エコーは失敗し、<xref:System.Net.NetworkInformation.PingReply.Status%2A> プロパティは <xref:System.Net.NetworkInformation.IPStatus.TimedOut>に設定されます。  
  
> [!NOTE]
>  `timeout`に非常に小さい数を指定した場合、`timeout` ミリ秒が経過しても Ping 応答を受信できます。  
  
 このオーバーロードは、パケットの断片化およびパケット転送に既定の設定を使用します。 ICMP エコーメッセージを含むパケットは、合計パケットサイズがローカルコンピューターとリモートコンピューター間のルーティングノードのいずれかによって送信される最大パケットサイズを超えた場合に、転送中に断片化することがあります。 断片化を防ぐには、`options` パラメーターを受け取る <xref:System.Net.NetworkInformation.Ping.Send%2A> メソッドの1つを使用し、<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> プロパティを `true`に設定します。 <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> が `true`、合計パケットサイズが、ローカルコンピューターとリモートコンピューターのいずれかのルーティングノードが送信できる最大パケットサイズを超えた場合、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A> は <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>に設定されます。  
  
 パケットフラグメントまたはパケットフラグメントは、128回のルーティングノードによって破棄されるまで転送できます。 この設定を変更するには、`options` パラメーターを受け取る <xref:System.Net.NetworkInformation.Ping.Send%2A> オーバーロードを使用し、<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> プロパティを目的の値に設定します。 指定された回数の転送後にパケットが送信先に届かない場合、パケットは破棄され、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A> は <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>に設定されます。  
  
   
  
## Examples  
 <xref:System.Net.NetworkInformation.Ping.Send%2A> メソッドの呼び出しを示す例については、「<xref:System.Net.NetworkInformation.Ping> クラスの概要」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> に 0 より小さい値が指定されています。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> の呼び出しを実行中です。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">ICMP メッセージの送信中または受信中に例外がスローされました。 スローされた実際の例外については内部例外を参照してください。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String, timeout As Integer) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress, int timeout);" />
      <MemberSignature Language="F#" Value="member this.Send : string * int -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (hostNameOrAddress, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">ICMP エコー メッセージの送信先コンピューターを識別する <see cref="T:System.String" />。 このパラメーターの値には、ホスト名または IP アドレスの文字列形式を指定できます。</param>
        <param name="timeout">エコー メッセージを送信してから ICMP エコー応答メッセージを待つ時間の最大値 (ミリ秒単位) を指定する <see cref="T:System.Int32" /> 値。</param>
        <summary>ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを指定されたコンピューターに送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。 このメソッドを使用して、操作のタイムアウト値を指定できます。</summary>
        <returns>ICMP エコー応答メッセージが受信された場合は、そのメッセージに関する情報を提供し、メッセージが受信されなかった場合は、エラーの原因を提供する <see cref="T:System.Net.NetworkInformation.PingReply" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `timeout` パラメーターで指定された時間内に ICMP エコー応答メッセージが受信されない場合、ICMP エコーは失敗し、<xref:System.Net.NetworkInformation.PingReply.Status%2A> プロパティは <xref:System.Net.NetworkInformation.IPStatus.TimedOut>に設定されます。  
  
> [!NOTE]
>  `timeout`に非常に小さい数を指定した場合、`timeout` ミリ秒が経過しても Ping 応答を受信できます。  
  
 このオーバーロードは、パケットの断片化およびパケット転送に既定の設定を使用します。 ICMP エコーメッセージを含むパケットは、合計パケットサイズがローカルコンピューターとリモートコンピューター間のルーティングノードのいずれかによって送信される最大パケットサイズを超えた場合に、転送中に断片化することがあります。 断片化を防ぐには、`options` パラメーターを受け取る <xref:System.Net.NetworkInformation.Ping.Send%2A> メソッドの1つを使用し、<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> プロパティを `true`に設定します。 <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> が `true`、合計パケットサイズが、ローカルコンピューターとリモートコンピューターのいずれかのルーティングノードが送信できる最大パケットサイズを超えた場合、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A> は <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>に設定されます。 パケットフラグメント (フラグメント化されている場合) は、破棄される前に、ルーティングノードによって128回転送できます。 この設定を変更するには、`options` パラメーターを受け取る <xref:System.Net.NetworkInformation.Ping.Send%2A> オーバーロードを使用し、<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> プロパティを目的の値に設定します。 指定された回数の転送後にパケットが送信先に届かない場合、パケットは破棄され、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A> は <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>に設定されます。  
  
   
  
## Examples  
 <xref:System.Net.NetworkInformation.Ping.Send%2A> メソッドの呼び出しを示す例については、「<xref:System.Net.NetworkInformation.Ping> クラスの概要」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> が <see langword="null" /> または空の文字列 ("") です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> に 0 より小さい値が指定されています。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> の呼び出しを実行中です。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">ICMP メッセージの送信中または受信中に例外がスローされました。 スローされた実際の例外については内部例外を参照してください。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress, timeout As Integer, buffer As Byte()) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress * int * byte[] -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (address, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address">ICMP エコー メッセージの送信先コンピューターを識別する <see cref="T:System.Net.IPAddress" />。</param>
        <param name="timeout">エコー メッセージを送信してから ICMP エコー応答メッセージを待つ時間の最大値 (ミリ秒単位) を指定する <see cref="T:System.Int32" /> 値。</param>
        <param name="buffer">ICMP エコー メッセージと共に送信されるデータが格納され、ICMP エコー応答メッセージで返される <see cref="T:System.Byte" /> 配列。 配列には、65,500 バイトを超えるデータを格納することはできません。</param>
        <summary>指定された <see cref="T:System.Net.IPAddress" /> を持つコンピューターに、指定されたデータ バッファーと共に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。 このオーバーロードを使用して、操作のタイムアウト値を指定できます。</summary>
        <returns>ICMP エコー応答メッセージが受信された場合は、そのメッセージに関する情報を提供し、メッセージが受信されなかった場合は、エラーの原因を提供する <see cref="T:System.Net.NetworkInformation.PingReply" /> オブジェクト。 パケットが MTU (Maximum Transmission Unit) を超えている場合、このメソッドは <see cref="F:System.Net.NetworkInformation.IPStatus.PacketTooBig" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `timeout` パラメーターで指定された時間内に ICMP エコー応答メッセージが受信されない場合、ICMP エコーは失敗し、<xref:System.Net.NetworkInformation.PingReply.Status%2A> プロパティは <xref:System.Net.NetworkInformation.IPStatus.TimedOut>に設定されます。  
  
> [!NOTE]
>  `timeout`に非常に小さい数を指定した場合、`timeout` ミリ秒が経過しても Ping 応答を受信できます。  
  
 このオーバーロードは、パケットの断片化およびパケット転送に既定の設定を使用します。 ICMP エコーメッセージを含むパケットは、合計パケットサイズがローカルコンピューターとリモートコンピューター間のルーティングノードのいずれかによって送信される最大パケットサイズを超えた場合に、転送中に断片化することがあります。 断片化を防ぐには、`options` パラメーターを受け取る <xref:System.Net.NetworkInformation.Ping.Send%2A> メソッドの1つを使用し、<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> プロパティを `true`に設定します。 <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> が `true`、合計パケットサイズが、ローカルコンピューターとリモートコンピューターのいずれかのルーティングノードが送信できる最大パケットサイズを超えた場合、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A> は <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>に設定されます。  
  
 パケットフラグメントまたはパケットフラグメントは、128回のルーティングノードによって破棄されるまで転送できます。 この設定を変更するには、`options` パラメーターを受け取る <xref:System.Net.NetworkInformation.Ping.Send%2A> オーバーロードを使用し、<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> プロパティを目的の値に設定します。 指定された回数の転送後にパケットが送信先に届かない場合、パケットは破棄され、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A> は <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>に設定されます。  
  
   
  
## Examples  
 次のコード例は、このメソッドを呼び出す方法を示しています。  
  
 [!code-cpp[NCLPingSampler#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#6)]
 [!code-csharp[NCLPingSampler#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="buffer" /> のサイズが 65500 バイトを超えています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> が <see langword="null" /> です。  
  
または 
 <paramref name="buffer" /> が <see langword="null" /> です。または、<paramref name="buffer" /> のサイズが 65500 バイトを超えています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> に 0 より小さい値が指定されています。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> の呼び出しを実行中です。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">ICMP メッセージの送信中または受信中に例外がスローされました。 スローされた実際の例外については内部例外を参照してください。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String, timeout As Integer, buffer As Byte()) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.Send : string * int * byte[] -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (hostNameOrAddress, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">ICMP エコー メッセージの送信先コンピューターを識別する <see cref="T:System.String" />。 このパラメーターの値には、ホスト名または IP アドレスの文字列形式を指定できます。</param>
        <param name="timeout">エコー メッセージを送信してから ICMP エコー応答メッセージを待つ時間の最大値 (ミリ秒単位) を指定する <see cref="T:System.Int32" /> 値。</param>
        <param name="buffer">ICMP エコー メッセージと共に送信されるデータが格納され、ICMP エコー応答メッセージで返される <see cref="T:System.Byte" /> 配列。 配列には、65,500 バイトを超えるデータを格納することはできません。</param>
        <summary>指定されたデータ バッファーと共に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを指定されたコンピューターに送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。 このオーバーロードを使用して、操作のタイムアウト値を指定できます。</summary>
        <returns>ICMP エコー応答メッセージが受信された場合は、そのメッセージに関する情報を提供し、メッセージが受信されなかった場合は、エラーの原因を提供する <see cref="T:System.Net.NetworkInformation.PingReply" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `timeout` パラメーターで指定された時間内に ICMP エコー応答メッセージが受信されない場合、ICMP エコーは失敗し、<xref:System.Net.NetworkInformation.PingReply.Status%2A> プロパティは <xref:System.Net.NetworkInformation.IPStatus.TimedOut>に設定されます。  
  
> [!NOTE]
>  `timeout`に非常に小さい数を指定した場合、`timeout` ミリ秒が経過しても Ping 応答を受信できます。  
  
 このオーバーロードは、パケットの断片化およびパケット転送に既定の設定を使用します。 ICMP エコーメッセージを含むパケットは、合計パケットサイズがローカルコンピューターとリモートコンピューター間のルーティングノードのいずれかによって送信される最大パケットサイズを超えた場合に、転送中に断片化することがあります。 断片化を防ぐには、`options` パラメーターを受け取る <xref:System.Net.NetworkInformation.Ping.Send%2A> メソッドの1つを使用し、<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> プロパティを `true`に設定します。 <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> が `true`、合計パケットサイズが、ローカルコンピューターとリモートコンピューターのいずれかのルーティングノードが送信できる最大パケットサイズを超えた場合、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A> は <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>に設定されます。  
  
 パケットフラグメントまたはパケットフラグメントは、128回のルーティングノードによって破棄されるまで転送できます。 この設定を変更するには、`options` パラメーターを受け取る <xref:System.Net.NetworkInformation.Ping.Send%2A> オーバーロードを使用し、<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> プロパティを目的の値に設定します。 指定された回数の転送後にパケットが送信先に届かない場合、パケットは破棄され、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A> は <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>に設定されます。  
  
   
  
## Examples  
 <xref:System.Net.NetworkInformation.Ping.Send%2A> オーバーロードの呼び出し方法を示す例については、「<xref:System.Net.NetworkInformation.Ping> クラスの概要」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="buffer" /> のサイズが 65500 バイトを超えています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> が <see langword="null" /> または空の文字列 ("") です。  
  
または 
 <paramref name="buffer" /> が <see langword="null" /> です。または、<paramref name="buffer" /> のサイズが 65500 バイトを超えています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> に 0 より小さい値が指定されています。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> の呼び出しを実行中です。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">ICMP メッセージの送信中または受信中に例外がスローされました。 スローされた実際の例外については内部例外を参照してください。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress, timeout As Integer, buffer As Byte(), options As PingOptions) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (address, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" Index="3" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address">ICMP エコー メッセージの送信先コンピューターを識別する <see cref="T:System.Net.IPAddress" />。</param>
        <param name="timeout">エコー メッセージを送信してから ICMP エコー応答メッセージを待つ時間の最大値 (ミリ秒単位) を指定する <see cref="T:System.Int32" /> 値。</param>
        <param name="buffer">ICMP エコー メッセージと共に送信されるデータが格納され、ICMP エコー応答メッセージで返される <see cref="T:System.Byte" /> 配列。 配列には、65,500 バイトを超えるデータを格納することはできません。</param>
        <param name="options">ICMP エコー メッセージ パケットのフラグメンテーションと有効期間 (TTL: time-to-live) の値を制御するために使用される <see cref="T:System.Net.NetworkInformation.PingOptions" /> オブジェクト。</param>
        <summary>指定された <see cref="T:System.Net.IPAddress" /> を持つコンピューターに、指定されたデータ バッファーと共に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。 このオーバーロードを使用して、操作のタイムアウト値を指定し、ICMP エコー メッセージ パケットのフラグメンテーションと有効期間 (TTL: time-to-live) の値を制御できます。</summary>
        <returns>ICMP エコー応答メッセージが受信された場合は、そのメッセージに関する情報を提供し、メッセージが受信されなかった場合は、エラーの原因を提供する <see cref="T:System.Net.NetworkInformation.PingReply" /> オブジェクト。 パケットが MTU (Maximum Transmission Unit) を超えている場合、このメソッドは <see cref="F:System.Net.NetworkInformation.IPStatus.PacketTooBig" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `timeout` パラメーターで指定された時間内に ICMP エコー応答メッセージが受信されない場合、ICMP エコーは失敗し、<xref:System.Net.NetworkInformation.PingReply.Status%2A> プロパティは <xref:System.Net.NetworkInformation.IPStatus.TimedOut>に設定されます。  
  
> [!NOTE]
>  `timeout`に非常に小さい数を指定した場合、`timeout` ミリ秒が経過しても Ping 応答を受信できます。  
  
 <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> プロパティが `true` で、合計パケットサイズがローカルコンピューターとリモートコンピューター間のルーティングノードのいずれかによって送信できる最大パケットサイズを超えている場合、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A> は <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>に設定されます。  
  
 ICMP エコーメッセージを転送先に到達するまでの最大回数を指定するには、<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> プロパティを使用します。 指定された回数の転送後にパケットが送信先に届かない場合、パケットは破棄され、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A> は <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>に設定されます。  
  
   
  
## Examples  
 次のコード例は、このメソッドを呼び出す方法を示しています。  
  
 [!code-cpp[NCLPingSampler#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#5)]
 [!code-csharp[NCLPingSampler#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="buffer" /> のサイズが 65500 バイトを超えています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> が <see langword="null" /> です。  
  
または 
 <paramref name="buffer" /> が <see langword="null" /> です。または、<paramref name="buffer" /> のサイズが 65500 バイトを超えています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> に 0 より小さい値が指定されています。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> の呼び出しを実行中です。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">ICMP メッセージの送信中または受信中に例外がスローされました。 スローされた実際の例外については内部例外を参照してください。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), options As PingOptions) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.Send : string * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (hostNameOrAddress, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" Index="3" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">ICMP エコー メッセージの送信先コンピューターを識別する <see cref="T:System.String" />。 このパラメーターの値には、ホスト名または IP アドレスの文字列形式を指定できます。</param>
        <param name="timeout">エコー メッセージを送信してから ICMP エコー応答メッセージを待つ時間の最大値 (ミリ秒単位) を指定する <see cref="T:System.Int32" /> 値。</param>
        <param name="buffer">ICMP エコー メッセージと共に送信されるデータが格納され、ICMP エコー応答メッセージで返される <see cref="T:System.Byte" /> 配列。 配列には、65,500 バイトを超えるデータを格納することはできません。</param>
        <param name="options">ICMP エコー メッセージ パケットのフラグメンテーションと有効期間 (TTL: time-to-live) の値を制御するために使用される <see cref="T:System.Net.NetworkInformation.PingOptions" /> オブジェクト。</param>
        <summary>指定されたデータ バッファーと共に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを指定されたコンピューターに送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。 このオーバーロードを使用して、操作のタイムアウト値を指定し、ICMP パケットのフラグメンテーションと有効期間 (TTL: time-to-live) 値を制御できます。</summary>
        <returns>ICMP エコー応答メッセージが受信された場合は、そのメッセージに関する情報を提供し、メッセージが受信されなかった場合は、エラーの原因を提供する <see cref="T:System.Net.NetworkInformation.PingReply" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `timeout` パラメーターで指定された時間内に ICMP エコー応答メッセージが受信されない場合、ICMP エコーは失敗し、<xref:System.Net.NetworkInformation.PingReply.Status%2A> プロパティは <xref:System.Net.NetworkInformation.IPStatus.TimedOut>に設定されます。  
  
> [!NOTE]
>  `timeout`に非常に小さい数を指定した場合、`timeout` ミリ秒が経過しても Ping 応答を受信できます。  
  
 <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> プロパティが `true` で、合計パケットサイズがローカルコンピューターとリモートコンピューター間のルーティングノードのいずれかによって送信できる最大パケットサイズを超えている場合、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A> は <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>に設定されます。  
  
 ICMP エコーメッセージを転送先に到達するまでの最大回数を指定するには、<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> プロパティを使用します。 指定された回数の転送後にパケットが送信先に届かない場合、パケットは破棄され、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A> は <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>に設定されます。  
  
   
  
## Examples  
 次のコード例は、このメソッドを呼び出す方法を示しています。  
  
 [!code-cpp[NCLPingSampler#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#4)]
 [!code-csharp[NCLPingSampler#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="buffer" /> のサイズが 65500 バイトを超えています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> または <see langword="null" /> が長さ 0 の文字列です。  
  
または 
 <paramref name="buffer" /> が <see langword="null" /> です。または、<paramref name="buffer" /> のサイズが 65500 バイトを超えています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> に 0 より小さい値が指定されています。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> の呼び出しを実行中です。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">ICMP メッセージの送信中または受信中に例外がスローされました。 スローされた実際の例外については内部例外を参照してください。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>非同期的に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージをコンピューターに送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 これらのメソッドでは、アプリケーションのメインスレッドがブロックされることはありません。 ICMP エコー応答メッセージの待機中にブロックする場合は、<xref:System.Net.NetworkInformation.Ping.Send%2A> メソッドを使用します。  
  
> [!NOTE]
>  <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> のいずれかの方法によって返される IP アドレスは、悪意のあるリモートコンピューターから送信される可能性があります。 このを使用してリモートコンピューターに接続しないでください。 DNS を使用して、接続先のコンピューターの IP アドレスを決定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * obj -&gt; unit" Usage="ping.SendAsync (address, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="userToken" Type="System.Object" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address">ICMP エコー メッセージの送信先コンピューターを識別する <see cref="T:System.Net.IPAddress" />。</param>
        <param name="userToken">非同期操作が完了したときに呼び出されるメソッドに渡すオブジェクト。</param>
        <summary>指定された <see cref="T:System.Net.IPAddress" /> を持つコンピューターに、非同期的に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> メソッドは、エコーメッセージを非同期的に送信します。操作が完了 (正常に完了または失敗) すると、はアプリケーションに状態を返します。 アプリケーションでブロックしない場合は、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> メソッドを呼び出します。 このメソッドの各呼び出しは、スレッドプールから自動的に割り当てられる個別のスレッドで実行されます。 非同期操作が完了すると、<xref:System.Net.NetworkInformation.Ping.PingCompleted> イベントが発生します。 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> がイベントを発生させるときに呼び出されるメソッドを指定するには、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>を呼び出す前に、イベントに <xref:System.Net.NetworkInformation.PingCompletedEventHandler> デリゲートを追加する必要があります。 デリゲートのメソッドは、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> 呼び出しの結果を記述する <xref:System.Net.NetworkInformation.PingReply> オブジェクトを含む <xref:System.Net.NetworkInformation.PingCompletedEventArgs> オブジェクトを受け取ります。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs> オブジェクトは、<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> プロパティを継承します。 このプロパティは、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> の呼び出しに渡される `userToken` オブジェクトを格納します。  
  
> [!NOTE]
>  応答の待機中にアプリケーションがブロックする必要がある場合は、<xref:System.Net.NetworkInformation.Ping.Send%2A> メソッドのいずれかを使用します。これらのメソッドは同期的です。  
  
 このメソッドは、ICMP エコーメッセージを使用して 32 <xref:System.Byte> データバッファーを送信します。 メソッドは、ICMP エコー応答メッセージを5秒間待機します。 この時間内に応答が受信されない場合、メソッドはを返し、<xref:System.Net.NetworkInformation.PingReply.Status%2A> プロパティは <xref:System.Net.NetworkInformation.IPStatus.TimedOut>に設定されます。  
  
 このオーバーロードは、パケットの断片化およびパケット転送に既定の設定を使用します。 ICMP エコーメッセージを含むパケットは、合計パケットサイズがローカルコンピューターとリモートコンピューター間のルーティングノードのいずれかによって送信される最大パケットサイズを超えた場合に、転送中に断片化することがあります。 断片化を防ぐには、`options` パラメーターを受け取る <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> メソッドの1つを使用し、<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> プロパティを `true`に設定します。 <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> が `true`、合計パケットサイズが、ローカルコンピューターとリモートコンピューターのいずれかのルーティングノードが送信できる最大パケットサイズを超えた場合、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A> は <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>に設定されます。  
  
 パケットフラグメントまたはパケットフラグメントは、128回のルーティングノードによって破棄されるまで転送できます。 この設定を変更するには、`options` パラメーターを受け取る <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> オーバーロードを使用し、<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> プロパティを目的の値に設定します。 指定された回数の転送後にパケットが送信先に届かない場合、パケットは破棄され、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A> は <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>に設定されます。  
  
   
  
## Examples  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> メソッドの呼び出しを示すコード例については、「<xref:System.Net.NetworkInformation.Ping> クラスの概要」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> メソッドの呼び出しを実行中です。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">ICMP メッセージの送信中または受信中に例外がスローされました。 スローされた実際の例外については内部例外を参照してください。</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" /> が有効な IP アドレスではありません。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="userToken" Type="System.Object" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">ICMP エコー メッセージの送信先コンピューターを識別する <see cref="T:System.String" />。 このパラメーターの値には、ホスト名または IP アドレスの文字列形式を指定できます。</param>
        <param name="userToken">非同期操作が完了したときに呼び出されるメソッドに渡すオブジェクト。</param>
        <summary>指定されたコンピューターに、非同期的に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> メソッドは、エコーメッセージを非同期的に送信します。操作が完了 (正常に完了または失敗) すると、はアプリケーションに状態を返します。 アプリケーションでブロックしない場合は、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> メソッドを呼び出します。 このメソッドの各呼び出しは、スレッドプールから自動的に割り当てられる個別のスレッドで実行されます。 非同期操作が完了すると、<xref:System.Net.NetworkInformation.Ping.PingCompleted> イベントが発生します。 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> がイベントを発生させるときに呼び出されるメソッドを指定するには、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>を呼び出す前に、イベントに <xref:System.Net.NetworkInformation.PingCompletedEventHandler> デリゲートを追加する必要があります。 デリゲートのメソッドは、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> 呼び出しの結果を記述する <xref:System.Net.NetworkInformation.PingReply> オブジェクトを含む <xref:System.Net.NetworkInformation.PingCompletedEventArgs> オブジェクトを受け取ります。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs> オブジェクトは、<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> プロパティを継承します。 このプロパティは、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> の呼び出しに渡される `userToken` オブジェクトを格納します。  
  
> [!NOTE]
>  応答を待機している間にアプリケーションがブロックする必要がある場合は、<xref:System.Net.NetworkInformation.Ping.Send%2A> メソッドを使用します。これらのメソッドは同期的です。  
  
 このメソッドは、ICMP エコーメッセージを使用して 32 <xref:System.Byte> データバッファーを送信します。 メソッドは、ICMP エコー応答メッセージを5秒間待機します。 この時間内に応答を受信しない場合、メソッドはを返し、<xref:System.Net.NetworkInformation.PingReply.Status%2A> プロパティは <xref:System.Net.NetworkInformation.IPStatus.TimedOut>に設定されます。  
  
 このオーバーロードは、パケットの断片化およびパケット転送に既定の設定を使用します。 ICMP エコーメッセージを含むパケットは、合計パケットサイズがローカルコンピューターとリモートコンピューター間のルーティングノードのいずれかによって送信される最大パケットサイズを超えた場合に、転送中に断片化することがあります。 断片化を防ぐには、`options` パラメーターを受け取る <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> メソッドの1つを使用し、<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> プロパティを `true`に設定します。 <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> が `true`、合計パケットサイズが、ローカルコンピューターとリモートコンピューターのいずれかのルーティングノードが送信できる最大パケットサイズを超えた場合、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A> は <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>に設定されます。  
  
 パケットフラグメントまたはパケットフラグメントは、128回のルーティングノードによって破棄されるまで転送できます。 この設定を変更するには、`options` パラメーターを受け取る <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> オーバーロードを使用し、<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> プロパティを目的の値に設定します。 指定された回数の転送後にパケットが送信先に届かない場合、パケットは破棄され、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A> は <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>に設定されます。  
  
   
  
## Examples  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> メソッドの呼び出しを示すコード例については、「<xref:System.Net.NetworkInformation.Ping> クラスの概要」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> が <see langword="null" /> または空の文字列 ("") です。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Object)" /> メソッドの呼び出しを実行中です。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">ICMP メッセージの送信中または受信中に例外がスローされました。 スローされた実際の例外については内部例外を参照してください。</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="hostNameOrAddress" /> を有効な IP アドレスに解決できませんでした。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, int timeout, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, int32 timeout, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, timeout As Integer, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, int timeout, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * int * obj -&gt; unit" Usage="ping.SendAsync (address, timeout, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="userToken" Type="System.Object" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address">ICMP エコー メッセージの送信先コンピューターを識別する <see cref="T:System.Net.IPAddress" />。</param>
        <param name="timeout">エコー メッセージを送信してから ICMP エコー応答メッセージを待つ時間の最大値 (ミリ秒単位) を指定する <see cref="T:System.Int32" /> 値。</param>
        <param name="userToken">非同期操作が完了したときに呼び出されるメソッドに渡すオブジェクト。</param>
        <summary>指定された <see cref="T:System.Net.IPAddress" /> を持つコンピューターに、非同期的に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。 このオーバーロードを使用して、操作のタイムアウト値を指定できます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> メソッドは、エコーメッセージを非同期的に送信します。操作が完了 (正常に完了または失敗) すると、はアプリケーションに状態を返します。 アプリケーションでブロックしない場合は、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> メソッドを呼び出します。 各呼び出しは、スレッドプールから自動的に割り当てられる個別のスレッドで実行されます。 非同期操作が完了すると、<xref:System.Net.NetworkInformation.Ping.PingCompleted> イベントが発生します。 アプリケーションでは、<xref:System.Net.NetworkInformation.PingCompletedEventHandler> デリゲートを使用して、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> がイベントを発生させるときに呼び出されるメソッドを指定します。 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>を呼び出す前に、イベントに <xref:System.Net.NetworkInformation.PingCompletedEventHandler> デリゲートを追加する必要があります。 デリゲートのメソッドは、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> 呼び出しの結果を記述する <xref:System.Net.NetworkInformation.PingReply> オブジェクトを含む <xref:System.Net.NetworkInformation.PingCompletedEventArgs> オブジェクトを受け取ります。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs> オブジェクトは、<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> プロパティを継承します。 このプロパティは、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> の呼び出しに渡される `userToken` オブジェクトを格納します。  
  
 応答を待機している間にアプリケーションがブロックする必要がある場合は、<xref:System.Net.NetworkInformation.Ping.Send%2A> メソッドを使用します。これらのメソッドは同期的です。  
  
 `timeout` パラメーターで指定された時間内に ICMP エコー応答メッセージが受信されない場合、ICMP エコーは失敗し、<xref:System.Net.NetworkInformation.PingReply.Status%2A> プロパティは <xref:System.Net.NetworkInformation.IPStatus.TimedOut>に設定されます。  
  
> [!NOTE]
>  `timeout`に非常に小さい数を指定した場合、`timeout` ミリ秒が経過しても Ping 応答を受信できます。  
  
 このオーバーロードは、パケットの断片化およびパケット転送に既定の設定を使用します。 ICMP エコーメッセージを含むパケットは、合計パケットサイズがローカルコンピューターとリモートコンピューター間のルーティングノードのいずれかによって送信される最大パケットサイズを超えた場合に、転送中に断片化することがあります。 断片化を防ぐには、`options` パラメーターを受け取る <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> メソッドの1つを使用し、<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> プロパティを `true`に設定します。 <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> が `true`、合計パケットサイズが、ローカルコンピューターとリモートコンピューターのいずれかのルーティングノードが送信できる最大パケットサイズを超えた場合、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A> は <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>に設定されます。 パケットフラグメント (フラグメント化されている場合) は、破棄される前に、ルーティングノードによって128回転送できます。 この設定を変更するには、`options` パラメーターを受け取る <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> オーバーロードを使用し、<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> プロパティを目的の値に設定します。 指定された回数の転送後にパケットが送信先に届かない場合、パケットは破棄され、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A> は <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>に設定されます。  
  
   
  
## Examples  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> のオーバーロードの呼び出しを示すコード例については、「<xref:System.Net.NetworkInformation.Ping> クラスの概要」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> に 0 より小さい値が指定されています。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Object)" /> メソッドの呼び出しを実行中です。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">ICMP メッセージの送信中または受信中に例外がスローされました。 スローされた実際の例外については内部例外を参照してください。</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" /> が有効な IP アドレスではありません。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, int timeout, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, int32 timeout, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, timeout As Integer, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, int timeout, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * int * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, timeout, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="userToken" Type="System.Object" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">ICMP エコー メッセージの送信先コンピューターを識別する <see cref="T:System.String" />。 このパラメーターの値には、ホスト名または IP アドレスの文字列形式を指定できます。</param>
        <param name="timeout">エコー メッセージを送信してから ICMP エコー応答メッセージを待つ時間の最大値 (ミリ秒単位) を指定する <see cref="T:System.Int32" /> 値。</param>
        <param name="userToken">非同期操作が完了したときに呼び出されるメソッドに渡すオブジェクト。</param>
        <summary>指定されたコンピューターに、非同期的に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。 このオーバーロードを使用して、操作のタイムアウト値を指定できます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> メソッドは、エコーメッセージを非同期的に送信します。操作が完了 (正常に完了または失敗) すると、はアプリケーションに状態を返します。 アプリケーションでブロックしない場合は、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> メソッドを呼び出します。 各呼び出しは、スレッドプールから自動的に割り当てられる個別のスレッドで実行されます。 非同期操作が完了すると、<xref:System.Net.NetworkInformation.Ping.PingCompleted> イベントが発生します。 アプリケーションでは、<xref:System.Net.NetworkInformation.PingCompletedEventHandler> デリゲートを使用して、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> がイベントを発生させるときに呼び出されるメソッドを指定します。 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>を呼び出す前に、イベントに <xref:System.Net.NetworkInformation.PingCompletedEventHandler> デリゲートを追加する必要があります。 デリゲートのメソッドは、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> 呼び出しの結果を記述する <xref:System.Net.NetworkInformation.PingReply> オブジェクトを含む <xref:System.Net.NetworkInformation.PingCompletedEventArgs> オブジェクトを受け取ります。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs> オブジェクトは、<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> プロパティを継承します。 このプロパティは、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> の呼び出しに渡される `userToken` オブジェクトを格納します。  
  
 応答を待機している間にアプリケーションがブロックする必要がある場合は、<xref:System.Net.NetworkInformation.Ping.Send%2A> メソッドを使用します。これらのメソッドは同期的です。  
  
 `timeout` パラメーターで指定された時間内に ICMP エコー応答メッセージが受信されない場合、ICMP エコーは失敗し、<xref:System.Net.NetworkInformation.PingReply.Status%2A> プロパティは <xref:System.Net.NetworkInformation.IPStatus.TimedOut>に設定されます。  
  
> [!NOTE]
>  `timeout`に非常に小さい数を指定した場合、`timeout` ミリ秒が経過しても Ping 応答を受信できます。  
  
 このオーバーロードは、パケットの断片化およびパケット転送に既定の設定を使用します。 ICMP エコーメッセージを含むパケットは、合計パケットサイズがローカルコンピューターとリモートコンピューター間のルーティングノードのいずれかによって送信される最大パケットサイズを超えた場合に、転送中に断片化することがあります。 断片化を防ぐには、`options` パラメーターを受け取る <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> メソッドの1つを使用し、<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> プロパティを `true`に設定します。 <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> が `true`、合計パケットサイズが、ローカルコンピューターとリモートコンピューターのいずれかのルーティングノードが送信できる最大パケットサイズを超えた場合、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A> は <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>に設定されます。 パケットフラグメント (フラグメント化されている場合) は、破棄される前に、ルーティングノードによって128回転送できます。 この設定を変更するには、`options` パラメーターを受け取る <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> オーバーロードを使用し、<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> プロパティを目的の値に設定します。 指定された回数の転送後にパケットが送信先に届かない場合、パケットは破棄され、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A> は <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>に設定されます。  
  
   
  
## Examples  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> メソッドの呼び出しを示すコード例については、「<xref:System.Net.NetworkInformation.Ping> クラスの概要」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> が <see langword="null" /> または空の文字列 ("") です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> に 0 より小さい値が指定されています。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> の呼び出しを実行中です。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">ICMP メッセージの送信中または受信中に例外がスローされました。 スローされた実際の例外については内部例外を参照してください。</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="hostNameOrAddress" /> を有効な IP アドレスに解決できませんでした。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, int timeout, byte[] buffer, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, timeout As Integer, buffer As Byte(), userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * int * byte[] * obj -&gt; unit" Usage="ping.SendAsync (address, timeout, buffer, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="userToken" Type="System.Object" Index="3" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address">ICMP エコー メッセージの送信先コンピューターを識別する <see cref="T:System.Net.IPAddress" />。</param>
        <param name="timeout">エコー メッセージを送信してから ICMP エコー応答メッセージを待つ時間の最大値 (ミリ秒単位) を指定する <see cref="T:System.Int32" /> 値。</param>
        <param name="buffer">ICMP エコー メッセージと共に送信されるデータが格納され、ICMP エコー応答メッセージで返される <see cref="T:System.Byte" /> 配列。 配列には、65,500 バイトを超えるデータを格納することはできません。</param>
        <param name="userToken">非同期操作が完了したときに呼び出されるメソッドに渡すオブジェクト。</param>
        <summary>指定された <see cref="T:System.Net.IPAddress" /> を持つコンピューターに、指定されたデータ バッファーと共に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを非同期的に送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。 このオーバーロードを使用して、操作のタイムアウト値を指定できます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、エコーメッセージを非同期的に送信します。操作が完了 (正常に完了または失敗) すると、アプリケーションに状態が返されます。 アプリケーションでブロックしない場合は、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> メソッドを呼び出します。 各呼び出しは、スレッドプールから自動的に割り当てられる個別のスレッドで実行されます。 非同期操作が完了すると、<xref:System.Net.NetworkInformation.Ping.PingCompleted> イベントが発生します。 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> がイベントを発生させるときに呼び出されるメソッドを指定するには、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>を呼び出す前に、イベントに <xref:System.Net.NetworkInformation.PingCompletedEventHandler> デリゲートを追加する必要があります。 デリゲートのメソッドは、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> 呼び出しの結果を記述する <xref:System.Net.NetworkInformation.PingReply> オブジェクトを含む <xref:System.Net.NetworkInformation.PingCompletedEventArgs> オブジェクトを受け取ります。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs> オブジェクトは、<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> プロパティを継承します。 このプロパティは、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> の呼び出しに渡される `userToken` オブジェクトを格納します。  
  
> [!NOTE]
>  応答の待機中にアプリケーションがブロックした場合は、<xref:System.Net.NetworkInformation.Ping.Send%2A> メソッドを使用します。これらのメソッドは同期的です。  
  
 `timeout` パラメーターで指定された時間内に ICMP エコー応答メッセージが受信されない場合、ICMP エコーは失敗し、<xref:System.Net.NetworkInformation.PingReply.Status%2A> プロパティは <xref:System.Net.NetworkInformation.IPStatus.TimedOut>に設定されます。  
  
> [!NOTE]
>  `timeout`に非常に小さい数を指定した場合、`timeout` ミリ秒が経過しても Ping 応答を受信できます。  
  
 このオーバーロードは、パケットの断片化およびパケット転送に既定の設定を使用します。 ICMP エコーメッセージを含むパケットは、合計パケットサイズがローカルコンピューターとリモートコンピューター間のルーティングノードのいずれかによって送信される最大パケットサイズを超えた場合に、転送中に断片化することがあります。 断片化を防ぐには、`options` パラメーターを受け取る <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> メソッドの1つを使用し、<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> プロパティを `true`に設定します。 <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> が `true`、合計パケットサイズが、ローカルコンピューターとリモートコンピューターのいずれかのルーティングノードが送信できる最大パケットサイズを超えた場合、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A> は <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>に設定されます。 パケットフラグメント (フラグメント化されている場合) は、破棄される前に、ルーティングノードによって128回転送できます。 この設定を変更するには、`options` パラメーターを受け取る <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> オーバーロードを使用し、<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> プロパティを目的の値に設定します。 指定された回数の転送後にパケットが送信先に届かない場合、パケットは破棄され、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A> は <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>に設定されます。  
  
   
  
## Examples  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> のオーバーロードの呼び出しを示すコード例については、「<xref:System.Net.NetworkInformation.Ping> クラスの概要」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> が <see langword="null" /> です。  
  
または 
 <paramref name="buffer" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> に 0 より小さい値が指定されています。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> の呼び出しを実行中です。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">ICMP メッセージの送信中または受信中に例外がスローされました。 スローされた実際の例外については内部例外を参照してください。</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" /> が有効な IP アドレスではありません。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="buffer" /> のサイズが 65500 バイトを超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, int timeout, byte[] buffer, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Byte[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * int * byte[] * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, timeout, buffer, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="userToken" Type="System.Object" Index="3" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">ICMP エコー メッセージの送信先コンピューターを識別する <see cref="T:System.String" />。 このパラメーターの値には、ホスト名または IP アドレスの文字列形式を指定できます。</param>
        <param name="timeout">エコー メッセージを送信してから ICMP エコー応答メッセージを待つ時間の最大値 (ミリ秒単位) を指定する <see cref="T:System.Int32" /> 値。</param>
        <param name="buffer">ICMP エコー メッセージと共に送信されるデータが格納され、ICMP エコー応答メッセージで返される <see cref="T:System.Byte" /> 配列。 配列には、65,500 バイトを超えるデータを格納することはできません。</param>
        <param name="userToken">非同期操作が完了したときに呼び出されるメソッドに渡すオブジェクト。</param>
        <summary>指定されたコンピューターに、指定されたデータ バッファーと共に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを非同期的に送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。 このオーバーロードを使用して、操作のタイムアウト値を指定できます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> メソッドは、エコーメッセージを非同期的に送信します。操作が完了 (正常に完了または失敗) すると、はアプリケーションに状態を返します。 アプリケーションでブロックしない場合は、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> メソッドを呼び出します。 各呼び出しは、スレッドプールから自動的に割り当てられる個別のスレッドで実行されます。 非同期操作が完了すると、<xref:System.Net.NetworkInformation.Ping.PingCompleted> イベントが発生します。 アプリケーションでは、<xref:System.Net.NetworkInformation.PingCompletedEventHandler> デリゲートを使用して、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> がイベントを発生させるときに呼び出されるメソッドを指定します。 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>を呼び出す前に、イベントに <xref:System.Net.NetworkInformation.PingCompletedEventHandler> デリゲートを追加する必要があります。 デリゲートのメソッドは、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> 呼び出しの結果を記述する <xref:System.Net.NetworkInformation.PingReply> オブジェクトを含む <xref:System.Net.NetworkInformation.PingCompletedEventArgs> オブジェクトを受け取ります。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs> オブジェクトは、<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> プロパティを継承します。 このプロパティは、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> の呼び出しに渡される `userToken` オブジェクトを格納します。  
  
 応答を待機している間にアプリケーションがブロックする必要がある場合は、<xref:System.Net.NetworkInformation.Ping.Send%2A> メソッドを使用します。これらのメソッドは同期的です。  
  
 `timeout` パラメーターで指定された時間内に ICMP エコー応答メッセージが受信されない場合、ICMP エコーは失敗し、<xref:System.Net.NetworkInformation.PingReply.Status%2A> プロパティは <xref:System.Net.NetworkInformation.IPStatus.TimedOut>に設定されます。  
  
> [!NOTE]
>  `timeout`に非常に小さい数を指定した場合、`timeout` ミリ秒が経過しても Ping 応答を受信できます。  
  
 このオーバーロードは、パケットの断片化およびパケット転送に既定の設定を使用します。 ICMP エコーメッセージを含むパケットは、合計パケットサイズがローカルコンピューターとリモートコンピューター間のルーティングノードのいずれかによって送信される最大パケットサイズを超えた場合に、転送中に断片化することがあります。 断片化を防ぐには、`options` パラメーターを受け取る <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> メソッドの1つを使用し、<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> プロパティを `true`に設定します。 <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> が `true`、合計パケットサイズが、ローカルコンピューターとリモートコンピューターのいずれかのルーティングノードが送信できる最大パケットサイズを超えた場合、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A> は <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>に設定されます。 パケットフラグメント (フラグメント化されている場合) は、破棄される前に、ルーティングノードによって128回転送できます。 この設定を変更するには、`options` パラメーターを受け取る <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> オーバーロードを使用し、<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> プロパティを目的の値に設定します。 指定された回数の転送後にパケットが送信先に届かない場合、パケットは破棄され、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A> は <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>に設定されます。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> のオーバーロードを呼び出す方法を示しています。 <xref:System.Net.NetworkInformation.Ping> クラスの概要を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> が <see langword="null" /> または空の文字列 ("") です。  
  
または 
 <paramref name="buffer" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> に 0 より小さい値が指定されています。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> の呼び出しを実行中です。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">ICMP メッセージの送信中または受信中に例外がスローされました。 スローされた実際の例外については内部例外を参照してください。</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="hostNameOrAddress" /> を有効な IP アドレスに解決できませんでした。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="buffer" /> のサイズが 65500 バイトを超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, timeout As Integer, buffer As Byte(), options As PingOptions, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * int * byte[] * System.Net.NetworkInformation.PingOptions * obj -&gt; unit" Usage="ping.SendAsync (address, timeout, buffer, options, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" Index="3" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="userToken" Type="System.Object" Index="4" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address">ICMP エコー メッセージの送信先コンピューターを識別する <see cref="T:System.Net.IPAddress" />。</param>
        <param name="timeout">エコー メッセージを送信してから ICMP エコー応答メッセージを待つ時間の最大値 (ミリ秒単位) を指定する <see cref="T:System.Int32" /> 値。</param>
        <param name="buffer">ICMP エコー メッセージと共に送信されるデータが格納され、ICMP エコー応答メッセージで返される <see cref="T:System.Byte" /> 配列。 配列には、65,500 バイトを超えるデータを格納することはできません。</param>
        <param name="options">ICMP エコー メッセージ パケットのフラグメンテーションと有効期間 (TTL: time-to-live) の値を制御するために使用される <see cref="T:System.Net.NetworkInformation.PingOptions" /> オブジェクト。</param>
        <param name="userToken">非同期操作が完了したときに呼び出されるメソッドに渡すオブジェクト。</param>
        <summary>指定された <see cref="T:System.Net.IPAddress" /> を持つコンピューターに、指定されたデータ バッファーと共に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを非同期的に送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。 このオーバーロードを使用して、操作のタイムアウト値を指定し、ICMP エコー メッセージ パケットのフラグメンテーションと有効期間 (TTL: time-to-live) の値を制御できます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> メソッドは、エコーメッセージを非同期的に送信します。操作が完了 (正常に完了または失敗) すると、はアプリケーションに状態を返します。 アプリケーションでブロックしない場合は、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> メソッドを呼び出します。 各呼び出しは、スレッドプールから自動的に割り当てられる個別のスレッドで実行されます。 非同期操作が完了すると、<xref:System.Net.NetworkInformation.Ping.PingCompleted> イベントが発生します。 アプリケーションでは、<xref:System.Net.NetworkInformation.PingCompletedEventHandler> デリゲートを使用して、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> がイベントを発生させるときに呼び出されるメソッドを指定します。 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>を呼び出す前に、イベントに <xref:System.Net.NetworkInformation.PingCompletedEventHandler> デリゲートを追加する必要があります。 デリゲートのメソッドは、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> 呼び出しの結果を記述する <xref:System.Net.NetworkInformation.PingReply> オブジェクトを含む <xref:System.Net.NetworkInformation.PingCompletedEventArgs> オブジェクトを受け取ります。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs> オブジェクトは、<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> プロパティを継承します。 このプロパティは、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> の呼び出しに渡される `userToken` オブジェクトを格納します。  
  
 応答の待機中にアプリケーションがブロックした場合は、<xref:System.Net.NetworkInformation.Ping.Send%2A> メソッドを使用します。これらのメソッドは同期的です。  
  
 `timeout` パラメーターで指定された時間内に ICMP エコー応答メッセージが受信されない場合、ICMP エコーは失敗し、<xref:System.Net.NetworkInformation.PingReply.Status%2A> プロパティは <xref:System.Net.NetworkInformation.IPStatus.TimedOut>に設定されます。  
  
> [!NOTE]
>  `timeout`に非常に小さい数を指定した場合、`timeout` ミリ秒が経過しても Ping 応答を受信できます。  
  
 <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> プロパティが `true` で、合計パケットサイズがローカルコンピューターとリモートコンピューター間のルーティングノードのいずれかによって送信できる最大パケットサイズを超えている場合、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A> は <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>に設定されます。  
  
 ICMP エコーメッセージを転送先に到達するまでの最大回数を指定するには、<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> プロパティを使用します。 指定された回数の転送後にパケットが送信先に届かない場合、パケットは破棄され、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A> は <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>に設定されます。  
  
   
  
## Examples  
 次のコード例は、このメソッドを呼び出す方法を示しています。 コールバックメソッドの実装については、「<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> メソッドのオーバーロードの例」を参照してください。  
  
 次のコード例では、次の名前空間が必要です。  
  
 [!code-cpp[NCLPingSampler#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#0)]
 [!code-csharp[NCLPingSampler#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#0)]  
  
 次のコード例では、ICMP エコーメッセージを非同期的に送信します。  
  
 [!code-cpp[NCLPingSampler#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#7)]
 [!code-csharp[NCLPingSampler#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> が <see langword="null" /> です。  
  
または 
 <paramref name="buffer" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> に 0 より小さい値が指定されています。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> の呼び出しを実行中です。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">ICMP メッセージの送信中または受信中に例外がスローされました。 スローされた実際の例外については内部例外を参照してください。</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" /> が有効な IP アドレスではありません。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="buffer" /> のサイズが 65500 バイトを超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), options As PingOptions, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * int * byte[] * System.Net.NetworkInformation.PingOptions * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, timeout, buffer, options, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" Index="3" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="userToken" Type="System.Object" Index="4" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">ICMP エコー メッセージの送信先コンピューターを識別する <see cref="T:System.String" />。 このパラメーターの値には、ホスト名または IP アドレスの文字列形式を指定できます。</param>
        <param name="timeout">エコー メッセージを送信してから ICMP エコー応答メッセージを待つ時間の最大値 (ミリ秒単位) を指定する <see cref="T:System.Int32" /> 値。</param>
        <param name="buffer">ICMP エコー メッセージと共に送信されるデータが格納され、ICMP エコー応答メッセージで返される <see cref="T:System.Byte" /> 配列。 配列には、65,500 バイトを超えるデータを格納することはできません。</param>
        <param name="options">ICMP エコー メッセージ パケットのフラグメンテーションと有効期間 (TTL: time-to-live) の値を制御するために使用される <see cref="T:System.Net.NetworkInformation.PingOptions" /> オブジェクト。</param>
        <param name="userToken">非同期操作が完了したときに呼び出されるメソッドに渡すオブジェクト。</param>
        <summary>指定されたコンピューターに、指定されたデータ バッファーと共に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを非同期的に送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。 このオーバーロードを使用して、操作のタイムアウト値を指定し、ICMP パケットのフラグメンテーションと有効期間 (TTL: time-to-live) 値を制御できます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> メソッドは、エコーメッセージを非同期的に送信します。操作が完了 (正常に完了または失敗) すると、はアプリケーションに状態を返します。 アプリケーションでブロックしない場合は、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> メソッドを呼び出します。 各呼び出しは、スレッドプールから自動的に割り当てられる個別のスレッドで実行されます。 非同期操作が完了すると、<xref:System.Net.NetworkInformation.Ping.PingCompleted> イベントが発生します。 アプリケーションでは、<xref:System.Net.NetworkInformation.PingCompletedEventHandler> デリゲートを使用して、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> がイベントを発生させるときに呼び出されるメソッドを指定します。 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>を呼び出す前に、イベントに <xref:System.Net.NetworkInformation.PingCompletedEventHandler> デリゲートを追加する必要があります。 デリゲートのメソッドは、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> 呼び出しの結果を記述する <xref:System.Net.NetworkInformation.PingReply> オブジェクトを含む <xref:System.Net.NetworkInformation.PingCompletedEventArgs> オブジェクトを受け取ります。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs> オブジェクトは、<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> プロパティを継承します。 このプロパティは、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> の呼び出しに渡される `userToken` オブジェクトを格納します。  
  
 応答を待機している間にアプリケーションがブロックする必要がある場合は、<xref:System.Net.NetworkInformation.Ping.Send%2A> メソッドを使用します。これらのメソッドは同期的です。  
  
 `timeout` パラメーターで指定された時間内に ICMP エコー応答メッセージが受信されない場合、ICMP エコーは失敗し、<xref:System.Net.NetworkInformation.PingReply.Status%2A> プロパティは <xref:System.Net.NetworkInformation.IPStatus.TimedOut>に設定されます。  
  
> [!NOTE]
>  `timeout`に非常に小さい数を指定した場合、`timeout` ミリ秒が経過しても Ping 応答を受信できます。  
  
 <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> プロパティが `true` で、合計パケットサイズがローカルコンピューターとリモートコンピューター間のルーティングノードのいずれかによって送信できる最大パケットサイズを超えている場合、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A> は <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>に設定されます。  
  
 ICMP エコーメッセージを転送先に到達するまでの最大回数を指定するには、<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> プロパティを使用します。 指定された回数の転送後にパケットが送信先に届かない場合、パケットは破棄され、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A> は <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>に設定されます。  
  
   
  
## Examples  
 次のコード例は、このメソッドを呼び出す方法を示しています。  
  
 [!code-cpp[NCLPingAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#1)]
 [!code-csharp[NCLPingAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> が <see langword="null" /> または空の文字列 ("") です。  
  
または 
 <paramref name="buffer" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> に 0 より小さい値が指定されています。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> の呼び出しを実行中です。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">ICMP メッセージの送信中または受信中に例外がスローされました。 スローされた実際の例外については内部例外を参照してください。</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="hostNameOrAddress" /> を有効な IP アドレスに解決できませんでした。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="buffer" /> のサイズが 65500 バイトを超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsyncCancel">
      <MemberSignature Language="C#" Value="public void SendAsyncCancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsyncCancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsyncCancel" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsyncCancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsyncCancel();" />
      <MemberSignature Language="F#" Value="member this.SendAsyncCancel : unit -&gt; unit" Usage="ping.SendAsyncCancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ICMP (インターネット制御メッセージ プロトコル) エコー メッセージの送信と対応する ICMP エコー応答メッセージの受信を行う、保留中のすべての非同期要求をキャンセルします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 完了していない <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> の呼び出しを終了するには、このメソッドを呼び出します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendPingAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>非同期操作として、ICMP (インターネット制御メッセージ プロトコル) エコー メッセージをコンピューターに送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address">ICMP エコー メッセージの送信先コンピューターを識別する IP アドレス。</param>
        <summary>非同期操作として、指定された <see cref="T:System.Net.IPAddress" /> を持つコンピューターに、指定されたデータ バッファーと共に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。</summary>
        <returns>非同期操作を表すタスク オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task%601>> オブジェクトは、ICMP パケットが送信され、応答が受信された後に完了します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" /> の呼び出しを実行中です。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">ICMP メッセージの送信中または受信中に例外がスローされました。 スローされた実際の例外については内部例外を参照してください。</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" /> が有効な IP アドレスではありません。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync hostNameOrAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">ICMP エコー メッセージの送信先となるコンピューター。 このパラメーターの値には、ホスト名または IP アドレスの文字列形式を指定できます。</param>
        <summary>非同期操作として、指定されたコンピューターに、指定されたデータ バッファーと共に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。</summary>
        <returns>非同期操作を表すタスク オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task%601>> オブジェクトは、ICMP パケットが送信され、応答が受信された後に完了します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress, timeout As Integer) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address, int timeout);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress * int -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (address, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address">ICMP エコー メッセージの送信先コンピューターを識別する IP アドレス。</param>
        <param name="timeout">エコー メッセージを送信してから ICMP エコー応答メッセージを待つ時間の最大値 (ミリ秒単位)。</param>
        <summary>非同期操作として、指定された <see cref="T:System.Net.IPAddress" /> を持つコンピューターに、指定されたデータ バッファーと共に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。 このオーバーロードを使用して、操作のタイムアウト値を指定できます。</summary>
        <returns>非同期操作を表すタスク オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task%601>> オブジェクトは、ICMP パケットが送信され、応答が受信された後に完了します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String, timeout As Integer) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress, int timeout);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string * int -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (hostNameOrAddress, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">ICMP エコー メッセージの送信先となるコンピューター。 このパラメーターの値には、ホスト名または IP アドレスの文字列形式を指定できます。</param>
        <param name="timeout">エコー メッセージを送信してから ICMP エコー応答メッセージを待つ時間の最大値 (ミリ秒単位)。</param>
        <summary>非同期操作として、指定されたコンピューターに、指定されたデータ バッファーと共に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。 このオーバーロードを使用して、操作のタイムアウト値を指定できます。</summary>
        <returns>非同期操作を表すタスク オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task%601>> オブジェクトは、ICMP パケットが送信され、応答が受信された後に完了します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress, timeout As Integer, buffer As Byte()) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress * int * byte[] -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (address, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address">ICMP エコー メッセージの送信先コンピューターを識別する IP アドレス。</param>
        <param name="timeout">エコー メッセージを送信してから ICMP エコー応答メッセージを待つ時間の最大値 (ミリ秒単位)。</param>
        <param name="buffer">ICMP エコー メッセージと共に送信されるデータが格納され、ICMP エコー応答メッセージで返される <see cref="T:System.Byte" /> 配列。 配列には、65,500 バイトを超えるデータを格納することはできません。</param>
        <summary>非同期操作として、指定された <see cref="T:System.Net.IPAddress" /> を持つコンピューターに、指定されたデータ バッファーと共に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。 このオーバーロードによって、操作にタイムアウト値を指定し、送信と受信に使用するバッファーを指定することができます。</summary>
        <returns>非同期操作を表すタスク オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task%601>> オブジェクトは、ICMP パケットが送信され、応答が受信された後に完了します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> が <see langword="null" /> です。  
  
または 
 <paramref name="buffer" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> に 0 より小さい値が指定されています。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" /> の呼び出しを実行中です。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">ICMP メッセージの送信中または受信中に例外がスローされました。 スローされた実際の例外については内部例外を参照してください。</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" /> が有効な IP アドレスではありません。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="buffer" /> のサイズが 65,500 バイトを超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte()) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string * int * byte[] -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (hostNameOrAddress, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">ICMP エコー メッセージの送信先となるコンピューター。 このパラメーターの値には、ホスト名または IP アドレスの文字列形式を指定できます。</param>
        <param name="timeout">エコー メッセージを送信してから ICMP エコー応答メッセージを待つ時間の最大値 (ミリ秒単位)。</param>
        <param name="buffer">ICMP エコー メッセージと共に送信されるデータが格納され、ICMP エコー応答メッセージで返される <see cref="T:System.Byte" /> 配列。 配列には、65,500 バイトを超えるデータを格納することはできません。</param>
        <summary>非同期操作として、指定されたコンピューターに、指定されたデータ バッファーと共に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。 このオーバーロードによって、操作にタイムアウト値を指定し、送信と受信に使用するバッファーを指定することができます。</summary>
        <returns>非同期操作を表すタスク オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task%601>> オブジェクトは、ICMP パケットが送信され、応答が受信された後に完了します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress, timeout As Integer, buffer As Byte(), options As PingOptions) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (address, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" Index="3" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address">ICMP エコー メッセージの送信先コンピューターを識別する IP アドレス。</param>
        <param name="timeout">エコー メッセージを送信してから ICMP エコー応答メッセージを待つ時間の最大値 (ミリ秒単位)。</param>
        <param name="buffer">ICMP エコー メッセージと共に送信されるデータが格納され、ICMP エコー応答メッセージで返される <see cref="T:System.Byte" /> 配列。 配列には、65,500 バイトを超えるデータを格納することはできません。</param>
        <param name="options">ICMP エコー メッセージ パケットのフラグメンテーションと有効期間 (TTL: time-to-live) の値を制御するために使用される <see cref="T:System.Net.NetworkInformation.PingOptions" /> オブジェクト。</param>
        <summary>非同期操作として、指定された <see cref="T:System.Net.IPAddress" /> を持つコンピューターに、指定されたデータ バッファーと共に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。 このオーバーロードを使用して、操作のタイムアウト値と送受信に使用するバッファーを指定し、ICMP エコー メッセージ パケットのフラグメンテーションと有効期間 (TTL: time-to-live) の値を制御できます。</summary>
        <returns>非同期操作を表すタスク オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task%601>> オブジェクトは、ICMP パケットが送信され、応答が受信された後に完了します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> が <see langword="null" /> です。  
  
または 
 <paramref name="buffer" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> に 0 より小さい値が指定されています。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" /> の呼び出しを実行中です。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">ICMP メッセージの送信中または受信中に例外がスローされました。 スローされた実際の例外については内部例外を参照してください。</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" /> が有効な IP アドレスではありません。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="buffer" /> のサイズが 65,500 バイトを超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), options As PingOptions) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (hostNameOrAddress, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" Index="3" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">ICMP エコー メッセージの送信先となるコンピューター。 このパラメーターの値には、ホスト名または IP アドレスの文字列形式を指定できます。</param>
        <param name="timeout">エコー メッセージを送信してから ICMP エコー応答メッセージを待つ時間の最大値 (ミリ秒単位)。</param>
        <param name="buffer">ICMP エコー メッセージと共に送信されるデータが格納され、ICMP エコー応答メッセージで返される <see cref="T:System.Byte" /> 配列。 配列には、65,500 バイトを超えるデータを格納することはできません。</param>
        <param name="options">ICMP エコー メッセージ パケットのフラグメンテーションと有効期間 (TTL: time-to-live) の値を制御するために使用される <see cref="T:System.Net.NetworkInformation.PingOptions" /> オブジェクト。</param>
        <summary>非同期操作として、指定されたコンピューターに、指定されたデータ バッファーと共に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。 このオーバーロードを使用して、操作のタイムアウト値と送受信に使用するバッファーを指定し、ICMP エコー メッセージ パケットのフラグメンテーションと有効期間 (TTL: time-to-live) の値を制御できます。</summary>
        <returns>非同期操作を表すタスク オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task%601>> オブジェクトは、ICMP パケットが送信され、応答が受信された後に完了します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberSignature Language="F#" Value="abstract member System.IDisposable.Dispose : unit -&gt; unit&#xA;override this.System.IDisposable.Dispose : unit -&gt; unit" Usage="ping.System.IDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Net.NetworkInformation.Ping" /> クラスのインスタンスによって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
破棄された <xref:System.Net.NetworkInformation.Ping> オブジェクトに対してメソッドを呼び出すと、<xref:System.ObjectDisposedException>が返されます。

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
