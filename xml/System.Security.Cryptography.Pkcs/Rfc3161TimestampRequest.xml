<Type Name="Rfc3161TimestampRequest" FullName="System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest">
  <Metadata><Meta Name="ms.openlocfilehash" Value="21cbdded39c67e52b043ae529b48230802666593" /><Meta Name="ms.sourcegitcommit" Value="8b09499854b5b7b909802126edc1f1fca0054c10" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/01/2020" /><Meta Name="ms.locfileid" Value="76942073" /></Metadata><TypeSignature Language="C#" Value="public sealed class Rfc3161TimestampRequest" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Rfc3161TimestampRequest extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Rfc3161TimestampRequest" />
  <TypeSignature Language="C++ CLI" Value="public ref class Rfc3161TimestampRequest sealed" />
  <TypeSignature Language="F#" Value="type Rfc3161TimestampRequest = class" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.1</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="ce010-101">IETF RFC 3161 からのタイムスタンプ要求を表します。</span><span class="sxs-lookup"><span data-stu-id="ce010-101">Represents a time-stamping request from IETF RFC 3161.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="ce010-102">このクラスを使用すると、IETF RFC 3161: Internet x.509 公開キーインフラストラクチャタイムスタンププロトコル (TSP) によって定義された `TimeStampReq` 値の作成と検査を行うことができます。</span><span class="sxs-lookup"><span data-stu-id="ce010-102">This class allows for the creation and inspection of `TimeStampReq` values as defined by IETF RFC 3161: Internet X.509 Public Key Infrastructure Time-Stamp Protocol (TSP).</span></span>
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateFromData">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest CreateFromData (ReadOnlySpan&lt;byte&gt; data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.Oid requestedPolicyId = default, Nullable&lt;ReadOnlyMemory&lt;byte&gt;&gt; nonce = default, bool requestSignerCertificates = false, System.Security.Cryptography.X509Certificates.X509ExtensionCollection extensions = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest CreateFromData(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, class System.Security.Cryptography.Oid requestedPolicyId, valuetype System.Nullable`1&lt;valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt;&gt; nonce, bool requestSignerCertificates, class System.Security.Cryptography.X509Certificates.X509ExtensionCollection extensions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.CreateFromData(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.Oid,System.Nullable{System.ReadOnlyMemory{System.Byte}},System.Boolean,System.Security.Cryptography.X509Certificates.X509ExtensionCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromData (data As ReadOnlySpan(Of Byte), hashAlgorithm As HashAlgorithmName, Optional requestedPolicyId As Oid = null, Optional nonce As Nullable(Of ReadOnlyMemory(Of Byte)) = null, Optional requestSignerCertificates As Boolean = false, Optional extensions As X509ExtensionCollection = null) As Rfc3161TimestampRequest" />
      <MemberSignature Language="F#" Value="static member CreateFromData : ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.Oid * Nullable&lt;ReadOnlyMemory&lt;byte&gt;&gt; * bool * System.Security.Cryptography.X509Certificates.X509ExtensionCollection -&gt; System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest" Usage="System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.CreateFromData (data, hashAlgorithm, requestedPolicyId, nonce, requestSignerCertificates, extensions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
        <Parameter Name="requestedPolicyId" Type="System.Security.Cryptography.Oid" />
        <Parameter Name="nonce" Type="System.Nullable&lt;System.ReadOnlyMemory&lt;System.Byte&gt;&gt;" />
        <Parameter Name="requestSignerCertificates" Type="System.Boolean" />
        <Parameter Name="extensions" Type="System.Security.Cryptography.X509Certificates.X509ExtensionCollection" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="ce010-103">このメソッドによってハッシュされる、タイムスタンプを付けるデータ。</span><span class="sxs-lookup"><span data-stu-id="ce010-103">The data to timestamp, which will be hashed by this method.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="ce010-104">このタイムスタンプ要求で使用するハッシュ アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="ce010-104">The hash algorithm to use with this timestamp request.</span></span></param>
        <param name="requestedPolicyId"><span data-ttu-id="ce010-105">タイムスタンプ局 (TSA) で使う必要があるタイムスタンプ ポリシーのオブジェクト識別子 (OID) です。<see langword="null" /> の場合は優先設定がありません。</span><span class="sxs-lookup"><span data-stu-id="ce010-105">The Object Identifier (OID) for a timestamp policy the Timestamp Authority (TSA) should use, or <see langword="null" /> to express no preference.</span></span></param>
        <param name="nonce"><span data-ttu-id="ce010-106">この要求を一意に識別して応答とペアリングするための、省略可能な nonce (一度だけ使われる数) です。</span><span class="sxs-lookup"><span data-stu-id="ce010-106">An optional nonce (number used once) to uniquely identify this request to pair it with the response.</span></span> <span data-ttu-id="ce010-107">値は、符号なしのビッグ エンディアンの整数として解釈され、エンコード形式に正規化されることがあります。</span><span class="sxs-lookup"><span data-stu-id="ce010-107">The value is interpreted as an unsigned big-endian integer and may be normalized to the encoding format.</span></span></param>
        <param name="requestSignerCertificates"><span data-ttu-id="ce010-108">発行されたタイムスタンプ トークンの署名証明書がタイムスタンプ局 (TSA) に含まれる必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ce010-108"><see langword="true" /> to indicate the Timestamp Authority (TSA) must include the signing certificate in the issued timestamp token; otherwise, <see langword="false" />.</span></span></param>
        <param name="extensions"><span data-ttu-id="ce010-109">要求に含める拡張の、省略可能なコレクション。</span><span class="sxs-lookup"><span data-stu-id="ce010-109">An optional collection of extensions to include in the request.</span></span></param>
        <summary><span data-ttu-id="ce010-110">指定されたアルゴリズムを使用して、提供されたデータをハッシュすることによって、タイムスタンプ要求を作成します。</span><span class="sxs-lookup"><span data-stu-id="ce010-110">Creates a timestamp request by hashing the provided data with a specified algorithm.</span></span></summary>
        <returns><span data-ttu-id="ce010-111">選択した値を表す <see cref="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest" /> です。</span><span class="sxs-lookup"><span data-stu-id="ce010-111">An <see cref="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest" /> representing the chosen values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="ce010-112">暗号化タイムスタンプは、データのハッシュに使用されるハッシュアルゴリズムのデータハッシュとアルゴリズム識別子の組み合わせに常に適用されます。</span><span class="sxs-lookup"><span data-stu-id="ce010-112">Cryptographic timestamps are always applied to a combination of the hash of data and the algorithm identifier for the hash algorithm used to hash the data.</span></span>
<span data-ttu-id="ce010-113">このメソッドは、データがまだハッシュされていない場合に <xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.CreateFromHash(System.ReadOnlyMemory{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.Oid,System.Nullable{System.ReadOnlyMemory{System.Byte}},System.Boolean,System.Security.Cryptography.X509Certificates.X509ExtensionCollection)> するための便利な方法です。</span><span class="sxs-lookup"><span data-stu-id="ce010-113">This method is a convenient alternative to <xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.CreateFromHash(System.ReadOnlyMemory{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.Oid,System.Nullable{System.ReadOnlyMemory{System.Byte}},System.Boolean,System.Security.Cryptography.X509Certificates.X509ExtensionCollection)> when the data has not already been hashed.</span></span>

<span data-ttu-id="ce010-114">このメソッドの nonce 値は、符号なしのビッグエンディアン整数として扱われます。</span><span class="sxs-lookup"><span data-stu-id="ce010-114">The nonce value in this method is treated as an unsigned, big-endian integer.</span></span>
<span data-ttu-id="ce010-115">このメソッドは、nonce 値を割り当てる前に、入力を BER 整数のエンコードに正規化します。</span><span class="sxs-lookup"><span data-stu-id="ce010-115">This method normalizes the input to a BER INTEGER encoding before assigning the nonce value.</span></span>
<span data-ttu-id="ce010-116"><xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.GetNonce> メソッドによって、正規化された値が返されます。</span><span class="sxs-lookup"><span data-stu-id="ce010-116">The normalized value is returned by the <xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.GetNonce> method.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ce010-117"><paramref name="hashAlgorithm" />」を参照してください。<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span><span class="sxs-lookup"><span data-stu-id="ce010-117"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span></span> <span data-ttu-id="ce010-118">は <see langword="null" /> または <see cref="F:System.String.Empty" /> です。</span><span class="sxs-lookup"><span data-stu-id="ce010-118">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ce010-119"><paramref name="hashAlgorithm" /> は既知のハッシュ アルゴリズムではありません。</span><span class="sxs-lookup"><span data-stu-id="ce010-119"><paramref name="hashAlgorithm" /> is not a known hash algorithm.</span></span></exception>
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.CreateFromHash(System.ReadOnlyMemory{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.Oid,System.Nullable{System.ReadOnlyMemory{System.Byte}},System.Boolean,System.Security.Cryptography.X509Certificates.X509ExtensionCollection)" />
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.CreateFromSignerInfo(System.Security.Cryptography.Pkcs.SignerInfo,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.Oid,System.Nullable{System.ReadOnlyMemory{System.Byte}},System.Boolean,System.Security.Cryptography.X509Certificates.X509ExtensionCollection)" />
      </Docs>
    </Member>
    <Member MemberName="CreateFromHash">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest CreateFromHash (ReadOnlyMemory&lt;byte&gt; hash, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.Oid requestedPolicyId = default, Nullable&lt;ReadOnlyMemory&lt;byte&gt;&gt; nonce = default, bool requestSignerCertificates = false, System.Security.Cryptography.X509Certificates.X509ExtensionCollection extensions = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest CreateFromHash(valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; hash, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, class System.Security.Cryptography.Oid requestedPolicyId, valuetype System.Nullable`1&lt;valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt;&gt; nonce, bool requestSignerCertificates, class System.Security.Cryptography.X509Certificates.X509ExtensionCollection extensions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.CreateFromHash(System.ReadOnlyMemory{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.Oid,System.Nullable{System.ReadOnlyMemory{System.Byte}},System.Boolean,System.Security.Cryptography.X509Certificates.X509ExtensionCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromHash (hash As ReadOnlyMemory(Of Byte), hashAlgorithm As HashAlgorithmName, Optional requestedPolicyId As Oid = null, Optional nonce As Nullable(Of ReadOnlyMemory(Of Byte)) = null, Optional requestSignerCertificates As Boolean = false, Optional extensions As X509ExtensionCollection = null) As Rfc3161TimestampRequest" />
      <MemberSignature Language="F#" Value="static member CreateFromHash : ReadOnlyMemory&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.Oid * Nullable&lt;ReadOnlyMemory&lt;byte&gt;&gt; * bool * System.Security.Cryptography.X509Certificates.X509ExtensionCollection -&gt; System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest" Usage="System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.CreateFromHash (hash, hashAlgorithm, requestedPolicyId, nonce, requestSignerCertificates, extensions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlyMemory&lt;System.Byte&gt;" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
        <Parameter Name="requestedPolicyId" Type="System.Security.Cryptography.Oid" />
        <Parameter Name="nonce" Type="System.Nullable&lt;System.ReadOnlyMemory&lt;System.Byte&gt;&gt;" />
        <Parameter Name="requestSignerCertificates" Type="System.Boolean" />
        <Parameter Name="extensions" Type="System.Security.Cryptography.X509Certificates.X509ExtensionCollection" />
      </Parameters>
      <Docs>
        <param name="hash"><span data-ttu-id="ce010-120">タイムスタンプを付ける事前計算済みのハッシュ値です。</span><span class="sxs-lookup"><span data-stu-id="ce010-120">The pre-computed hash value to be timestamped.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="ce010-121"><paramref name="hash" /> を生成するために使用されるハッシュ アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="ce010-121">The hash algorithm used to produce <paramref name="hash" />.</span></span></param>
        <param name="requestedPolicyId"><span data-ttu-id="ce010-122">タイムスタンプ局 (TSA) で使用する必要があるタイムスタンプ ポリシーのオブジェクト識別子 (OID) です。<see langword="null" /> の場合は優先設定がありません。</span><span class="sxs-lookup"><span data-stu-id="ce010-122">The Object Identifier (OID) for the timestamp policy that the Timestamp Authority (TSA) should use, or <see langword="null" /> to express no preference.</span></span></param>
        <param name="nonce"><span data-ttu-id="ce010-123">要求を応答に一意に一致させるために使用される省略可能な値。<see langword="null" /> の場合は要求に nonce が含まれません。</span><span class="sxs-lookup"><span data-stu-id="ce010-123">An optional value used to uniquely match a request to a response, or <see langword="null" /> to not include a nonce in the request.</span></span></param>
        <param name="requestSignerCertificates"><span data-ttu-id="ce010-124">発行されたタイムスタンプ トークンの署名証明書がタイムスタンプ局 (TSA) に含まれる必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ce010-124"><see langword="true" /> to indicate the Timestamp Authority (TSA) must include the signing certificate in the issued timestamp token; otherwise, <see langword="false" />.</span></span></param>
        <param name="extensions"><span data-ttu-id="ce010-125">要求に含める拡張の、省略可能なコレクション。</span><span class="sxs-lookup"><span data-stu-id="ce010-125">An optional collection of extensions to include in the request.</span></span></param>
        <summary><span data-ttu-id="ce010-126">事前計算済みのハッシュ値およびハッシュ アルゴリズムの名前を使用して、タイムスタンプ要求を作成します。</span><span class="sxs-lookup"><span data-stu-id="ce010-126">Create a timestamp request using a pre-computed hash value and the name of the hash algorithm.</span></span></summary>
        <returns><span data-ttu-id="ce010-127">選択した値を表す <see cref="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest" /> です。</span><span class="sxs-lookup"><span data-stu-id="ce010-127">An <see cref="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest" /> representing the chosen values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="ce010-128">このメソッドでは、`hashAlgorithm` パラメーターを使用して、タイムスタンプ要求に含めるオブジェクト識別子 (OID) を決定します。</span><span class="sxs-lookup"><span data-stu-id="ce010-128">This method uses the `hashAlgorithm` parameter to determine the Object Identifier (OID) to include in the timestamp request.</span></span>
<span data-ttu-id="ce010-129">このメソッドでサポートされていないハッシュアルゴリズムに基づいてタイムスタンプの要求を作成する場合は、<xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.CreateFromHash(System.ReadOnlyMemory{System.Byte},System.Security.Cryptography.Oid,System.Security.Cryptography.Oid,System.Nullable{System.ReadOnlyMemory{System.Byte}},System.Boolean,System.Security.Cryptography.X509Certificates.X509ExtensionCollection)> のオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="ce010-129">When building a request for a timestamp based on a hash algorithm that this method does not support, use the <xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.CreateFromHash(System.ReadOnlyMemory{System.Byte},System.Security.Cryptography.Oid,System.Security.Cryptography.Oid,System.Nullable{System.ReadOnlyMemory{System.Byte}},System.Boolean,System.Security.Cryptography.X509Certificates.X509ExtensionCollection)> overload.</span></span>

<span data-ttu-id="ce010-130">このメソッドの nonce 値は、符号なしのビッグエンディアン整数として扱われます。</span><span class="sxs-lookup"><span data-stu-id="ce010-130">The nonce value in this method is treated as an unsigned, big-endian integer.</span></span>
<span data-ttu-id="ce010-131">このメソッドは、nonce 値を割り当てる前に、入力を BER 整数のエンコードに正規化します。</span><span class="sxs-lookup"><span data-stu-id="ce010-131">This method normalizes the input to a BER INTEGER encoding before assigning the nonce value.</span></span>
<span data-ttu-id="ce010-132"><xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.GetNonce> メソッドによって、正規化された値が返されます。</span><span class="sxs-lookup"><span data-stu-id="ce010-132">The normalized value is returned by the <xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.GetNonce> method.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ce010-133"><paramref name="hashAlgorithm" /> は既知のハッシュ アルゴリズムではありません。</span><span class="sxs-lookup"><span data-stu-id="ce010-133"><paramref name="hashAlgorithm" /> is not a known hash algorithm.</span></span></exception>
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.CreateFromData(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.Oid,System.Nullable{System.ReadOnlyMemory{System.Byte}},System.Boolean,System.Security.Cryptography.X509Certificates.X509ExtensionCollection)" />
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.CreateFromHash(System.ReadOnlyMemory{System.Byte},System.Security.Cryptography.Oid,System.Security.Cryptography.Oid,System.Nullable{System.ReadOnlyMemory{System.Byte}},System.Boolean,System.Security.Cryptography.X509Certificates.X509ExtensionCollection)" />
      </Docs>
    </Member>
    <Member MemberName="CreateFromHash">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest CreateFromHash (ReadOnlyMemory&lt;byte&gt; hash, System.Security.Cryptography.Oid hashAlgorithmId, System.Security.Cryptography.Oid requestedPolicyId = default, Nullable&lt;ReadOnlyMemory&lt;byte&gt;&gt; nonce = default, bool requestSignerCertificates = false, System.Security.Cryptography.X509Certificates.X509ExtensionCollection extensions = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest CreateFromHash(valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; hash, class System.Security.Cryptography.Oid hashAlgorithmId, class System.Security.Cryptography.Oid requestedPolicyId, valuetype System.Nullable`1&lt;valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt;&gt; nonce, bool requestSignerCertificates, class System.Security.Cryptography.X509Certificates.X509ExtensionCollection extensions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.CreateFromHash(System.ReadOnlyMemory{System.Byte},System.Security.Cryptography.Oid,System.Security.Cryptography.Oid,System.Nullable{System.ReadOnlyMemory{System.Byte}},System.Boolean,System.Security.Cryptography.X509Certificates.X509ExtensionCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromHash (hash As ReadOnlyMemory(Of Byte), hashAlgorithmId As Oid, Optional requestedPolicyId As Oid = null, Optional nonce As Nullable(Of ReadOnlyMemory(Of Byte)) = null, Optional requestSignerCertificates As Boolean = false, Optional extensions As X509ExtensionCollection = null) As Rfc3161TimestampRequest" />
      <MemberSignature Language="F#" Value="static member CreateFromHash : ReadOnlyMemory&lt;byte&gt; * System.Security.Cryptography.Oid * System.Security.Cryptography.Oid * Nullable&lt;ReadOnlyMemory&lt;byte&gt;&gt; * bool * System.Security.Cryptography.X509Certificates.X509ExtensionCollection -&gt; System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest" Usage="System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.CreateFromHash (hash, hashAlgorithmId, requestedPolicyId, nonce, requestSignerCertificates, extensions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlyMemory&lt;System.Byte&gt;" />
        <Parameter Name="hashAlgorithmId" Type="System.Security.Cryptography.Oid" />
        <Parameter Name="requestedPolicyId" Type="System.Security.Cryptography.Oid" />
        <Parameter Name="nonce" Type="System.Nullable&lt;System.ReadOnlyMemory&lt;System.Byte&gt;&gt;" />
        <Parameter Name="requestSignerCertificates" Type="System.Boolean" />
        <Parameter Name="extensions" Type="System.Security.Cryptography.X509Certificates.X509ExtensionCollection" />
      </Parameters>
      <Docs>
        <param name="hash"><span data-ttu-id="ce010-134">タイムスタンプを付ける事前計算済みのハッシュ値です。</span><span class="sxs-lookup"><span data-stu-id="ce010-134">The pre-computed hash value to be timestamped.</span></span></param>
        <param name="hashAlgorithmId"><span data-ttu-id="ce010-135"><paramref name="hash" /> を生成したハッシュ アルゴリズムのオブジェクト識別子 (OID) です。</span><span class="sxs-lookup"><span data-stu-id="ce010-135">The Object Identifier (OID) for the hash algorithm that produced <paramref name="hash" />.</span></span></param>
        <param name="requestedPolicyId"><span data-ttu-id="ce010-136">タイムスタンプ局 (TSA) で使う必要があるタイムスタンプ ポリシーのオブジェクト識別子 (OID) です。<see langword="null" /> の場合は優先設定がありません。</span><span class="sxs-lookup"><span data-stu-id="ce010-136">The Object Identifier (OID) for a timestamp policy the Timestamp Authority (TSA) should use, or <see langword="null" /> to express no preference.</span></span></param>
        <param name="nonce"><span data-ttu-id="ce010-137">この要求を一意に識別して応答とペアリングするための、省略可能な nonce (一度だけ使われる数) です。</span><span class="sxs-lookup"><span data-stu-id="ce010-137">An optional nonce (number used once) to uniquely identify this request to pair it with the response.</span></span> <span data-ttu-id="ce010-138">値は、符号なしのビッグ エンディアンの整数として解釈され、エンコード形式に正規化されることがあります。</span><span class="sxs-lookup"><span data-stu-id="ce010-138">The value is interpreted as an unsigned big-endian integer and may be normalized to the encoding format.</span></span></param>
        <param name="requestSignerCertificates"><span data-ttu-id="ce010-139">発行されたタイムスタンプ トークンの署名証明書がタイムスタンプ局 (TSA) に含まれる必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ce010-139"><see langword="true" /> to indicate the Timestamp Authority (TSA) must include the signing certificate in the issued timestamp token; otherwise, <see langword="false" />.</span></span></param>
        <param name="extensions"><span data-ttu-id="ce010-140">要求に含める拡張の、省略可能なコレクション。</span><span class="sxs-lookup"><span data-stu-id="ce010-140">An optional collection of extensions to include in the request.</span></span></param>
        <summary><span data-ttu-id="ce010-141">事前計算済みのハッシュ値およびハッシュ アルゴリズムのオブジェクト識別子を使用して、タイムスタンプ要求を作成します。</span><span class="sxs-lookup"><span data-stu-id="ce010-141">Create a timestamp request using a pre-computed hash value and the Object Identifier for the hash algorithm.</span></span></summary>
        <returns><span data-ttu-id="ce010-142">選択した値を表す <see cref="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest" /> です。</span><span class="sxs-lookup"><span data-stu-id="ce010-142">An <see cref="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest" /> representing the chosen values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="ce010-143">このメソッドの nonce 値は、符号なしのビッグエンディアン整数として扱われます。</span><span class="sxs-lookup"><span data-stu-id="ce010-143">The nonce value in this method is treated as an unsigned, big-endian integer.</span></span>
<span data-ttu-id="ce010-144">このメソッドは、nonce 値を割り当てる前に、入力を BER 整数のエンコードに正規化します。</span><span class="sxs-lookup"><span data-stu-id="ce010-144">This method normalizes the input to a BER INTEGER encoding before assigning the nonce value.</span></span>
<span data-ttu-id="ce010-145"><xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.GetNonce> メソッドによって、正規化された値が返されます。</span><span class="sxs-lookup"><span data-stu-id="ce010-145">The normalized value is returned by the <xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.GetNonce> method.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ce010-146"><paramref name="hashAlgorithmId" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="ce010-146"><paramref name="hashAlgorithmId" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ce010-147"><paramref name="hashAlgorithmId" />」を参照してください。<see cref="P:System.Security.Cryptography.Oid.Value" /></span><span class="sxs-lookup"><span data-stu-id="ce010-147"><paramref name="hashAlgorithmId" />.<see cref="P:System.Security.Cryptography.Oid.Value" /></span></span> <span data-ttu-id="ce010-148">が有効な OID ではありません。</span><span class="sxs-lookup"><span data-stu-id="ce010-148">is not a valid OID.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromSignerInfo">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest CreateFromSignerInfo (System.Security.Cryptography.Pkcs.SignerInfo signerInfo, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.Oid requestedPolicyId = default, Nullable&lt;ReadOnlyMemory&lt;byte&gt;&gt; nonce = default, bool requestSignerCertificates = false, System.Security.Cryptography.X509Certificates.X509ExtensionCollection extensions = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest CreateFromSignerInfo(class System.Security.Cryptography.Pkcs.SignerInfo signerInfo, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, class System.Security.Cryptography.Oid requestedPolicyId, valuetype System.Nullable`1&lt;valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt;&gt; nonce, bool requestSignerCertificates, class System.Security.Cryptography.X509Certificates.X509ExtensionCollection extensions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.CreateFromSignerInfo(System.Security.Cryptography.Pkcs.SignerInfo,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.Oid,System.Nullable{System.ReadOnlyMemory{System.Byte}},System.Boolean,System.Security.Cryptography.X509Certificates.X509ExtensionCollection)" />
      <MemberSignature Language="F#" Value="static member CreateFromSignerInfo : System.Security.Cryptography.Pkcs.SignerInfo * System.Security.Cryptography.HashAlgorithmName * System.Security.Cryptography.Oid * Nullable&lt;ReadOnlyMemory&lt;byte&gt;&gt; * bool * System.Security.Cryptography.X509Certificates.X509ExtensionCollection -&gt; System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest" Usage="System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.CreateFromSignerInfo (signerInfo, hashAlgorithm, requestedPolicyId, nonce, requestSignerCertificates, extensions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signerInfo" Type="System.Security.Cryptography.Pkcs.SignerInfo" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
        <Parameter Name="requestedPolicyId" Type="System.Security.Cryptography.Oid" />
        <Parameter Name="nonce" Type="System.Nullable&lt;System.ReadOnlyMemory&lt;System.Byte&gt;&gt;" />
        <Parameter Name="requestSignerCertificates" Type="System.Boolean" />
        <Parameter Name="extensions" Type="System.Security.Cryptography.X509Certificates.X509ExtensionCollection" />
      </Parameters>
      <Docs>
        <param name="signerInfo"><span data-ttu-id="ce010-149">タイムスタンプ要求を作成するための CMS 署名者情報。</span><span class="sxs-lookup"><span data-stu-id="ce010-149">The CMS signer information to build a timestamp request for.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="ce010-150">このタイムスタンプ要求で使用するハッシュ アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="ce010-150">The hash algorithm to use with this timestamp request.</span></span></param>
        <param name="requestedPolicyId"><span data-ttu-id="ce010-151">タイムスタンプ局 (TSA) で使用する必要があるタイムスタンプ ポリシーのオブジェクト識別子 (OID) です。<see langword="null" /> の場合は優先設定がありません。</span><span class="sxs-lookup"><span data-stu-id="ce010-151">The Object Identifier (OID) for the timestamp policy that the Timestamp Authority (TSA) should use, or <see langword="null" /> to express no preference.</span></span></param>
        <param name="nonce"><span data-ttu-id="ce010-152">この要求を一意に識別して応答とペアリングするための、省略可能な nonce (一度だけ使われる数) です。</span><span class="sxs-lookup"><span data-stu-id="ce010-152">An optional nonce (number used once) to uniquely identify this request to pair it with the response.</span></span> <span data-ttu-id="ce010-153">値は、符号なしのビッグ エンディアンの整数として解釈され、エンコード形式に正規化されることがあります。</span><span class="sxs-lookup"><span data-stu-id="ce010-153">The value is interpreted as an unsigned big-endian integer and may be normalized to the encoding format.</span></span></param>
        <param name="requestSignerCertificates"><span data-ttu-id="ce010-154">発行されたタイムスタンプ トークンの署名証明書がタイムスタンプ局 (TSA) に含まれる必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ce010-154"><see langword="true" /> to indicate the Timestamp Authority (TSA) must include the signing certificate in the issued timestamp token; otherwise, <see langword="false" />.</span></span></param>
        <param name="extensions"><span data-ttu-id="ce010-155">要求に含める拡張の、省略可能なコレクション。</span><span class="sxs-lookup"><span data-stu-id="ce010-155">An optional collection of extensions to include in the request.</span></span></param>
        <summary><span data-ttu-id="ce010-156">指定されたアルゴリズムを使用して、提供された署名者の署名をハッシュすることによって、タイムスタンプ要求を作成します。</span><span class="sxs-lookup"><span data-stu-id="ce010-156">Creates a timestamp request by hashing the signature of the provided signer with a specified algorithm.</span></span></summary>
        <returns><span data-ttu-id="ce010-157">選択した値を表す <see cref="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest" /> です。</span><span class="sxs-lookup"><span data-stu-id="ce010-157">An <see cref="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest" /> representing the chosen values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="ce010-158">このコンストラクターは、IETF RFC 3161 付録 A (CMS を使用した署名タイムスタンプ属性) の推奨事項に従って、<xref:System.Security.Cryptography.Pkcs.SignerInfo> 値の署名値のタイムスタンプを作成します。</span><span class="sxs-lookup"><span data-stu-id="ce010-158">This constructor creates a timestamp for the signature value of a <xref:System.Security.Cryptography.Pkcs.SignerInfo> value, per the recommendation of IETF RFC 3161 Appendix A (Signature Time-stamp attribute using CMS).</span></span>

<span data-ttu-id="ce010-159">このメソッドの nonce 値は、符号なしのビッグエンディアン整数として扱われます。</span><span class="sxs-lookup"><span data-stu-id="ce010-159">The nonce value in this method is treated as an unsigned, big-endian integer.</span></span>
<span data-ttu-id="ce010-160">このメソッドは、nonce 値を割り当てる前に、入力を BER 整数のエンコードに正規化します。</span><span class="sxs-lookup"><span data-stu-id="ce010-160">This method normalizes the input to a BER INTEGER encoding before assigning the nonce value.</span></span>
<span data-ttu-id="ce010-161"><xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.GetNonce> メソッドによって、正規化された値が返されます。</span><span class="sxs-lookup"><span data-stu-id="ce010-161">The normalized value is returned by the <xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.GetNonce> method.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ce010-162"><paramref name="signerInfo" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="ce010-162"><paramref name="signerInfo" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ce010-163"><paramref name="hashAlgorithm" />」を参照してください。<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span><span class="sxs-lookup"><span data-stu-id="ce010-163"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span></span> <span data-ttu-id="ce010-164">は <see langword="null" /> または <see cref="F:System.String.Empty" /> です。</span><span class="sxs-lookup"><span data-stu-id="ce010-164">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ce010-165"><paramref name="hashAlgorithm" /> は既知のハッシュ アルゴリズムではありません。</span><span class="sxs-lookup"><span data-stu-id="ce010-165"><paramref name="hashAlgorithm" /> is not a known hash algorithm.</span></span></exception>
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.CreateFromData(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.Oid,System.Nullable{System.ReadOnlyMemory{System.Byte}},System.Boolean,System.Security.Cryptography.X509Certificates.X509ExtensionCollection)" />
      </Docs>
    </Member>
    <Member MemberName="Encode">
      <MemberSignature Language="C#" Value="public byte[] Encode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Encode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.Encode" />
      <MemberSignature Language="VB.NET" Value="Public Function Encode () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ Encode();" />
      <MemberSignature Language="F#" Value="member this.Encode : unit -&gt; byte[]" Usage="rfc3161TimestampRequest.Encode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ce010-166">タイムスタンプ要求をエンコードし、それをバイト配列として返します。</span><span class="sxs-lookup"><span data-stu-id="ce010-166">Encodes the timestamp request and returns it as a byte array.</span></span></summary>
        <returns><span data-ttu-id="ce010-167">DER でエンコードされたタイムスタンプ要求を格納するバイト配列。</span><span class="sxs-lookup"><span data-stu-id="ce010-167">A byte array containing the DER-encoded timestamp request.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.TryDecode(System.ReadOnlyMemory{System.Byte},System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest@,System.Int32@)" />
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.TryEncode(System.Span{System.Byte},System.Int32@)" />
      </Docs>
    </Member>
    <Member MemberName="GetExtensions">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.X509Certificates.X509ExtensionCollection GetExtensions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.Cryptography.X509Certificates.X509ExtensionCollection GetExtensions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.GetExtensions" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExtensions () As X509ExtensionCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::Cryptography::X509Certificates::X509ExtensionCollection ^ GetExtensions();" />
      <MemberSignature Language="F#" Value="member this.GetExtensions : unit -&gt; System.Security.Cryptography.X509Certificates.X509ExtensionCollection" Usage="rfc3161TimestampRequest.GetExtensions " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509ExtensionCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ce010-168">この要求に存在する拡張機能のコピーが含まれるコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="ce010-168">Gets a collection with a copy of the extensions present on this request.</span></span></summary>
        <returns><span data-ttu-id="ce010-169">この要求に存在する拡張機能のコピーが含まれるコレクション。</span><span class="sxs-lookup"><span data-stu-id="ce010-169">A collection with a copy of the extensions present on this request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="ce010-170">このメソッドによって返されるコレクションは、データのスナップショットを表します。</span><span class="sxs-lookup"><span data-stu-id="ce010-170">The collection returned by this method represents a snapshot of the data.</span></span>
<span data-ttu-id="ce010-171">コレクションまたはコレクション内のインスタンスを変更しても、このインスタンスは変更されません。</span><span class="sxs-lookup"><span data-stu-id="ce010-171">No modification of the collection or any instance within the collection will result in a change in this instance.</span></span>

<span data-ttu-id="ce010-172">このメソッドは、拡張機能がない場合、空のコレクションを返します。</span><span class="sxs-lookup"><span data-stu-id="ce010-172">This method returns an empty collection when it has no extensions.</span></span>
<span data-ttu-id="ce010-173">この一般的なシナリオでオブジェクトが作成されないようにするには、<xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.HasExtensions>を参照してください。</span><span class="sxs-lookup"><span data-stu-id="ce010-173">To avoid the object creation in this common scenario, read <xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.HasExtensions>.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMessageHash">
      <MemberSignature Language="C#" Value="public ReadOnlyMemory&lt;byte&gt; GetMessageHash ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; GetMessageHash() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.GetMessageHash" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMessageHash () As ReadOnlyMemory(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlyMemory&lt;System::Byte&gt; GetMessageHash();" />
      <MemberSignature Language="F#" Value="member this.GetMessageHash : unit -&gt; ReadOnlyMemory&lt;byte&gt;" Usage="rfc3161TimestampRequest.GetMessageHash " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ce010-174">このタイムスタンプ要求のデータ ハッシュを取得します。</span><span class="sxs-lookup"><span data-stu-id="ce010-174">Gets the data hash for this timestamp request.</span></span></summary>
        <returns><span data-ttu-id="ce010-175">このタイムスタンプ要求の、読み取り専用メモリ値としてのデータ ハッシュ。</span><span class="sxs-lookup"><span data-stu-id="ce010-175">The data hash for this timestamp request as a read-only memory value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNonce">
      <MemberSignature Language="C#" Value="public Nullable&lt;ReadOnlyMemory&lt;byte&gt;&gt; GetNonce ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt;&gt; GetNonce() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.GetNonce" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNonce () As Nullable(Of ReadOnlyMemory(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Nullable&lt;ReadOnlyMemory&lt;System::Byte&gt;&gt; GetNonce();" />
      <MemberSignature Language="F#" Value="member this.GetNonce : unit -&gt; Nullable&lt;ReadOnlyMemory&lt;byte&gt;&gt;" Usage="rfc3161TimestampRequest.GetNonce " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.ReadOnlyMemory&lt;System.Byte&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ce010-176">このタイムスタンプ要求の nonce を取得します。</span><span class="sxs-lookup"><span data-stu-id="ce010-176">Gets the nonce for this timestamp request.</span></span></summary>
        <returns><span data-ttu-id="ce010-177">存在する場合は、このタイムスタンプ要求の、読み取り専用メモリ値としての nonce。それ以外の場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ce010-177">The nonce for this timestamp request as a read-only memory value, if one was present; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasExtensions">
      <MemberSignature Language="C#" Value="public bool HasExtensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasExtensions" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.HasExtensions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasExtensions As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasExtensions { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasExtensions : bool" Usage="System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.HasExtensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ce010-178">要求に拡張機能があるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="ce010-178">Indicates whether or not the request has extensions.</span></span></summary>
        <value><span data-ttu-id="ce010-179">要求に拡張機能があるかどうかを <see langword="true" /> します。それ以外の場合は、<see langword="false" />ます。</span><span class="sxs-lookup"><span data-stu-id="ce010-179"><see langword="true" /> if the request has any extensions; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HashAlgorithmId">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Oid HashAlgorithmId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.Oid HashAlgorithmId" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.HashAlgorithmId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HashAlgorithmId As Oid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::Oid ^ HashAlgorithmId { System::Security::Cryptography::Oid ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.HashAlgorithmId : System.Security.Cryptography.Oid" Usage="System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.HashAlgorithmId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Oid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ce010-180">要求に関連付けられているハッシュ アルゴリズムのオブジェクト識別子 (OID) を取得します。</span><span class="sxs-lookup"><span data-stu-id="ce010-180">Gets the Object Identifier (OID) for the hash algorithm associated with the request.</span></span></summary>
        <value><span data-ttu-id="ce010-181">要求に関連付けられているハッシュアルゴリズムのオブジェクト識別子 (OID)。</span><span class="sxs-lookup"><span data-stu-id="ce010-181">The Object Identifier (OID) for the hash algorithm associated with the request.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessResponse">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Pkcs.Rfc3161TimestampToken ProcessResponse (ReadOnlyMemory&lt;byte&gt; responseBytes, out int bytesConsumed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.Cryptography.Pkcs.Rfc3161TimestampToken ProcessResponse(valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; responseBytes, [out] int32&amp; bytesConsumed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.ProcessResponse(System.ReadOnlyMemory{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function ProcessResponse (responseBytes As ReadOnlyMemory(Of Byte), ByRef bytesConsumed As Integer) As Rfc3161TimestampToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::Cryptography::Pkcs::Rfc3161TimestampToken ^ ProcessResponse(ReadOnlyMemory&lt;System::Byte&gt; responseBytes, [Runtime::InteropServices::Out] int % bytesConsumed);" />
      <MemberSignature Language="F#" Value="member this.ProcessResponse : ReadOnlyMemory&lt;byte&gt; * int -&gt; System.Security.Cryptography.Pkcs.Rfc3161TimestampToken" Usage="rfc3161TimestampRequest.ProcessResponse (responseBytes, bytesConsumed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Pkcs.Rfc3161TimestampToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="responseBytes" Type="System.ReadOnlyMemory&lt;System.Byte&gt;" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="responseBytes"><span data-ttu-id="ce010-182">DER でエンコードされたタイムスタンプ応答。</span><span class="sxs-lookup"><span data-stu-id="ce010-182">The DER encoded timestamp response.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="ce010-183">このメソッドから制御が戻るときに、<paramref name="responseBytes" /> から読み取られたバイト数。</span><span class="sxs-lookup"><span data-stu-id="ce010-183">When this method returns, the number of bytes that were read from <paramref name="responseBytes" />.</span></span> <span data-ttu-id="ce010-184">このパラメーターは初期化前として処理されます。</span><span class="sxs-lookup"><span data-stu-id="ce010-184">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="ce010-185">エンコードされたタイムスタンプ応答をこの要求と組み合わせて、<see cref="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken" /> を生成します。</span><span class="sxs-lookup"><span data-stu-id="ce010-185">Combines an encoded timestamp response with this request to produce a <see cref="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken" />.</span></span></summary>
        <returns><span data-ttu-id="ce010-186">この要求に対応する応答からのタイムスタンプ トークン。</span><span class="sxs-lookup"><span data-stu-id="ce010-186">The timestamp token from the response that corresponds to this request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="ce010-187">このメソッドは、`responseBytes` の先頭を IETF RFC 3161 `TimeStampResp`として解釈します。</span><span class="sxs-lookup"><span data-stu-id="ce010-187">This method interprets the beginning of `responseBytes` as an IETF RFC 3161 `TimeStampResp`.</span></span>
<span data-ttu-id="ce010-188">応答をデコードできない場合、応答の状態が `granted` または `grantedWithMods`ではない場合、発行されたタイムスタンプトークンが正常にデコードされない場合、または、IETF RFC 3161 (主、セクション2.4.1、および 2.4.2) の受け入れ基準に従ってタイムスタンプトークンがこの要求に一致しない場合は、<xref:System.Security.Cryptography.CryptographicException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="ce010-188">If the response cannot be decoded, the response status is not `granted` or `grantedWithMods`, the issued timestamp token does not successfully decode, or the timestamp token does not match this request per the acceptance criteria of IETF RFC 3161 (chiefly, sections 2.4.1 and 2.4.2), then a <xref:System.Security.Cryptography.CryptographicException> is thrown.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestedPolicyId">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Oid RequestedPolicyId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.Oid RequestedPolicyId" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.RequestedPolicyId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RequestedPolicyId As Oid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::Oid ^ RequestedPolicyId { System::Security::Cryptography::Oid ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RequestedPolicyId : System.Security.Cryptography.Oid" Usage="System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.RequestedPolicyId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Oid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ce010-189">要求のポリシー ID を取得します。ポリシー ID が要求されなかった場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ce010-189">Gets the policy ID for the request, or <see langword="null" /> when no policy ID was requested.</span></span></summary>
        <value><span data-ttu-id="ce010-190">要求のポリシー ID。ポリシー ID が要求されなかった場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ce010-190">The policy ID for the request, or <see langword="null" /> when no policy ID was requested.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestSignerCertificate">
      <MemberSignature Language="C#" Value="public bool RequestSignerCertificate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RequestSignerCertificate" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.RequestSignerCertificate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RequestSignerCertificate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RequestSignerCertificate { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.RequestSignerCertificate : bool" Usage="System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.RequestSignerCertificate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ce010-191">タイムスタンプ局の証明書が応答に必要であることが要求で示されていたかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="ce010-191">Gets a value indicating whether or not the request indicated that the timestamp authority certificate is required to be in the response.</span></span></summary>
        <value><span data-ttu-id="ce010-192">応答にタイムスタンプ証明書を含める必要があるかどうかを <see langword="true" /> します。それ以外の場合は、<see langword="false" />ます。</span><span class="sxs-lookup"><span data-stu-id="ce010-192"><see langword="true" /> if the response must include the timestamp authority certificate; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDecode">
      <MemberSignature Language="C#" Value="public static bool TryDecode (ReadOnlyMemory&lt;byte&gt; encodedBytes, out System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest request, out int bytesConsumed);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryDecode(valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; encodedBytes, [out] class System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest&amp; request, [out] int32&amp; bytesConsumed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.TryDecode(System.ReadOnlyMemory{System.Byte},System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryDecode (encodedBytes As ReadOnlyMemory(Of Byte), ByRef request As Rfc3161TimestampRequest, ByRef bytesConsumed As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryDecode(ReadOnlyMemory&lt;System::Byte&gt; encodedBytes, [Runtime::InteropServices::Out] System::Security::Cryptography::Pkcs::Rfc3161TimestampRequest ^ % request, [Runtime::InteropServices::Out] int % bytesConsumed);" />
      <MemberSignature Language="F#" Value="static member TryDecode : ReadOnlyMemory&lt;byte&gt; * Rfc3161TimestampRequest * int -&gt; bool" Usage="System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.TryDecode (encodedBytes, request, bytesConsumed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encodedBytes" Type="System.ReadOnlyMemory&lt;System.Byte&gt;" />
        <Parameter Name="request" Type="System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="encodedBytes"><span data-ttu-id="ce010-193">DER でエンコードされたタイムスタンプ要求を格納するバッファー。</span><span class="sxs-lookup"><span data-stu-id="ce010-193">The buffer containing a DER-encoded timestamp request.</span></span></param>
        <param name="request"><span data-ttu-id="ce010-194">このメソッドから制御が戻るときに、デコードが正常に実行された場合はタイムスタンプ要求。デコードに失敗した場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ce010-194">When this method returns, the successfully decoded timestamp request if decoding succeeded, or <see langword="null" /> if decoding failed.</span></span> <span data-ttu-id="ce010-195">このパラメーターは初期化前として処理されます。</span><span class="sxs-lookup"><span data-stu-id="ce010-195">This parameter is treated as uninitialized.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="ce010-196">このメソッドから制御が戻るときに、<paramref name="encodedBytes" /> から読み取られたバイト数。</span><span class="sxs-lookup"><span data-stu-id="ce010-196">When this method returns, the number of bytes that were read from <paramref name="encodedBytes" />.</span></span> <span data-ttu-id="ce010-197">このパラメーターは初期化前として処理されます。</span><span class="sxs-lookup"><span data-stu-id="ce010-197">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="ce010-198"><paramref name="encodedBytes" /> のコンテンツを、DER でエンコードされたタイムスタンプ要求として解釈することを試みます。</span><span class="sxs-lookup"><span data-stu-id="ce010-198">Attemps to interpret the contents of <paramref name="encodedBytes" /> as a DER-encoded Timestamp Request.</span></span></summary>
        <returns><span data-ttu-id="ce010-199"><see langword="true" /> がタイムスタンプ要求として正常に解釈された場合は <paramref name="encodedBytes" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ce010-199"><see langword="true" /> if <paramref name="encodedBytes" /> was successfully interpreted as a Timestamp Request; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryEncode">
      <MemberSignature Language="C#" Value="public bool TryEncode (Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEncode(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.TryEncode(System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEncode (destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEncode(Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="member this.TryEncode : Span&lt;byte&gt; * int -&gt; bool" Usage="rfc3161TimestampRequest.TryEncode (destination, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="ce010-200">エンコードされた要求を受け取るバッファー。</span><span class="sxs-lookup"><span data-stu-id="ce010-200">The buffer to receive the encoded request.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="ce010-201">このメソッドから制御が戻るときに、<paramref name="destination" /> に書き込まれた合計バイト数。</span><span class="sxs-lookup"><span data-stu-id="ce010-201">When this method returns, the total number of bytes written into <paramref name="destination" />.</span></span> <span data-ttu-id="ce010-202">このパラメーターは初期化前として処理されます。</span><span class="sxs-lookup"><span data-stu-id="ce010-202">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="ce010-203">指定されたバッファーにバイトを書き込み、インスタンスを IETF RFC 3161 <c>TimeStampReq</c> としてエンコードすることを試みます。</span><span class="sxs-lookup"><span data-stu-id="ce010-203">Attempts to encode the instance as an IETF RFC 3161 <c>TimeStampReq</c>, writing the bytes into the provided buffer.</span></span></summary>
        <returns><span data-ttu-id="ce010-204"><see langword="true" /> がエンコードされた要求を受け取るのに十分な長さである場合は <paramref name="destination" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ce010-204"><see langword="true" />if <paramref name="destination" /> is long enough to receive the encoded request; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Version">
      <MemberSignature Language="C#" Value="public int Version { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Version" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.Version" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Version As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Version { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Version : int" Usage="System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest.Version" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ce010-205">この要求のデータ形式のバージョン番号を取得します。</span><span class="sxs-lookup"><span data-stu-id="ce010-205">Gets the data format version number for this request.</span></span></summary>
        <value><span data-ttu-id="ce010-206">この要求のデータ形式のバージョン番号。</span><span class="sxs-lookup"><span data-stu-id="ce010-206">The data format version number for this request.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
