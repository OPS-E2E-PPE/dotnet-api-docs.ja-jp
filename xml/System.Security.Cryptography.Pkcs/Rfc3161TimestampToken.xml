<Type Name="Rfc3161TimestampToken" FullName="System.Security.Cryptography.Pkcs.Rfc3161TimestampToken">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f6f353e727ff530459e068c07085e2d5a5427f63" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82310407" /></Metadata><TypeSignature Language="C#" Value="public sealed class Rfc3161TimestampToken" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Rfc3161TimestampToken extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Rfc3161TimestampToken" />
  <TypeSignature Language="C++ CLI" Value="public ref class Rfc3161TimestampToken sealed" />
  <TypeSignature Language="F#" Value="type Rfc3161TimestampToken = class" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.1</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="a915c-101">IETF RFC 3161 のタイムスタンプ トークンを表します。</span><span class="sxs-lookup"><span data-stu-id="a915c-101">Represents a time-stamp token from IETF RFC 3161.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AsSignedCms">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Pkcs.SignedCms AsSignedCms ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.Cryptography.Pkcs.SignedCms AsSignedCms() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.AsSignedCms" />
      <MemberSignature Language="VB.NET" Value="Public Function AsSignedCms () As SignedCms" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::Cryptography::Pkcs::SignedCms ^ AsSignedCms();" />
      <MemberSignature Language="F#" Value="member this.AsSignedCms : unit -&gt; System.Security.Cryptography.Pkcs.SignedCms" Usage="rfc3161TimestampToken.AsSignedCms " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Pkcs.SignedCms</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a915c-102">RFC3161 のタイムスタンプ トークンの署名済み Cryptographic Message Syntax (CMS) 形式を取得します。</span><span class="sxs-lookup"><span data-stu-id="a915c-102">Gets a Signed Cryptographic Message Syntax (CMS) representation of the RFC3161 time-stamp token.</span></span></summary>
        <returns><span data-ttu-id="a915c-103"><see cref="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken" /> の <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" /> 形式です。</span><span class="sxs-lookup"><span data-stu-id="a915c-103">The <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" /> representation of the <see cref="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
<span data-ttu-id="a915c-104">このメソッドを連続して呼び出すと、同じオブジェクトが返されます。</span><span class="sxs-lookup"><span data-stu-id="a915c-104">Successive calls to this method return the same object.</span></span>

<span data-ttu-id="a915c-105"><xref:System.Security.Cryptography.Pkcs.SignedCms> クラスは変更可能ですが、そのオブジェクトに対する変更は、それを生成した <xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken> オブジェクトには反映されません。</span><span class="sxs-lookup"><span data-stu-id="a915c-105">The <xref:System.Security.Cryptography.Pkcs.SignedCms> class is mutable, but changes to that object are not reflected in the <xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken> object that produced it.</span></span>

<span data-ttu-id="a915c-106"><xref:System.Security.Cryptography.Pkcs.SignedCms.Encode?displayProperty=nameWithType> を呼び出すと、別の <xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.TryDecode(System.ReadOnlyMemory{System.Byte},System.Security.Cryptography.Pkcs.Rfc3161TimestampToken@,System.Int32@)?displayProperty=nameWithType>の呼び出しを通じて、<xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken> として再度解釈される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="a915c-106">The value from calling <xref:System.Security.Cryptography.Pkcs.SignedCms.Encode?displayProperty=nameWithType> can be interpreted again as an <xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken> via another call to <xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.TryDecode(System.ReadOnlyMemory{System.Byte},System.Security.Cryptography.Pkcs.Rfc3161TimestampToken@,System.Int32@)?displayProperty=nameWithType>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenInfo">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo TokenInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo TokenInfo" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.TokenInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TokenInfo As Rfc3161TimestampTokenInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::Pkcs::Rfc3161TimestampTokenInfo ^ TokenInfo { System::Security::Cryptography::Pkcs::Rfc3161TimestampTokenInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TokenInfo : System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo" Usage="System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.TokenInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a915c-107"><see cref="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo" /> としてタイムスタンプ トークンの詳細を取得します。</span><span class="sxs-lookup"><span data-stu-id="a915c-107">Gets the details of this time-stamp token as a <see cref="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo" />.</span></span></summary>
        <value><span data-ttu-id="a915c-108">このタイムスタンプトークンの詳細を <see cref="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo" />として表示します。</span><span class="sxs-lookup"><span data-stu-id="a915c-108">The details of this time-stamp token as a <see cref="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDecode">
      <MemberSignature Language="C#" Value="public static bool TryDecode (ReadOnlyMemory&lt;byte&gt; encodedBytes, out System.Security.Cryptography.Pkcs.Rfc3161TimestampToken token, out int bytesConsumed);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryDecode(valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; encodedBytes, [out] class System.Security.Cryptography.Pkcs.Rfc3161TimestampToken&amp; token, [out] int32&amp; bytesConsumed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.TryDecode(System.ReadOnlyMemory{System.Byte},System.Security.Cryptography.Pkcs.Rfc3161TimestampToken@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryDecode (encodedBytes As ReadOnlyMemory(Of Byte), ByRef token As Rfc3161TimestampToken, ByRef bytesConsumed As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryDecode(ReadOnlyMemory&lt;System::Byte&gt; encodedBytes, [Runtime::InteropServices::Out] System::Security::Cryptography::Pkcs::Rfc3161TimestampToken ^ % token, [Runtime::InteropServices::Out] int % bytesConsumed);" />
      <MemberSignature Language="F#" Value="static member TryDecode : ReadOnlyMemory&lt;byte&gt; * Rfc3161TimestampToken * int -&gt; bool" Usage="System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.TryDecode (encodedBytes, token, bytesConsumed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encodedBytes" Type="System.ReadOnlyMemory&lt;System.Byte&gt;" />
        <Parameter Name="token" Type="System.Security.Cryptography.Pkcs.Rfc3161TimestampToken" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="encodedBytes"><span data-ttu-id="a915c-109">DER でエンコードされたタイムスタンプ トークンを格納するバッファー。</span><span class="sxs-lookup"><span data-stu-id="a915c-109">The buffer containing a DER-encoded time-stamp token.</span></span></param>
        <param name="token"><span data-ttu-id="a915c-110">デコードが正常に実行された場合は、正常にデコードされたタイムスタンプ トークンがこのメソッドにより返されます。デコードに失敗した場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a915c-110">When this method returns, the successfully decoded time-stamp token if decoding succeeded, or <see langword="null" /> if decoding failed.</span></span> <span data-ttu-id="a915c-111">このパラメーターは初期化前として処理されます。</span><span class="sxs-lookup"><span data-stu-id="a915c-111">This parameter is treated as uninitialized.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="a915c-112">このメソッドから制御が戻るときに、<paramref name="encodedBytes" /> から読み取られたバイト数。</span><span class="sxs-lookup"><span data-stu-id="a915c-112">When this method returns, the number of bytes that were read from <paramref name="encodedBytes" />.</span></span> <span data-ttu-id="a915c-113">このパラメーターは初期化前として処理されます。</span><span class="sxs-lookup"><span data-stu-id="a915c-113">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="a915c-114"><paramref name="encodedBytes" /> のコンテンツを、DER でエンコードされたタイムスタンプ トークンとして解釈しようとします。</span><span class="sxs-lookup"><span data-stu-id="a915c-114">Attemps to interpret the contents of <paramref name="encodedBytes" /> as a DER-encoded time-stamp token.</span></span></summary>
        <returns><span data-ttu-id="a915c-115"><paramref name="encodedBytes" /> がタイムスタンプ トークンとして正常に解釈された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a915c-115"><see langword="true" /> if <paramref name="encodedBytes" /> was successfully interpreted as a time-stamp token; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifySignatureForData">
      <MemberSignature Language="C#" Value="public bool VerifySignatureForData (ReadOnlySpan&lt;byte&gt; data, out System.Security.Cryptography.X509Certificates.X509Certificate2 signerCertificate, System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifySignatureForData(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, [out] class System.Security.Cryptography.X509Certificates.X509Certificate2&amp; signerCertificate, class System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForData(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifySignatureForData (data As ReadOnlySpan(Of Byte), ByRef signerCertificate As X509Certificate2, Optional extraCandidates As X509Certificate2Collection = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.VerifySignatureForData : ReadOnlySpan&lt;byte&gt; * X509Certificate2 * System.Security.Cryptography.X509Certificates.X509Certificate2Collection -&gt; bool" Usage="rfc3161TimestampToken.VerifySignatureForData (data, signerCertificate, extraCandidates)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="signerCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" RefType="out" />
        <Parameter Name="extraCandidates" Type="System.Security.Cryptography.X509Certificates.X509Certificate2Collection" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="a915c-116">このタイムスタンプ トークンに対して検証するデータ。</span><span class="sxs-lookup"><span data-stu-id="a915c-116">The data to verify against this time-stamp token.</span></span></param>
        <param name="signerCertificate"><span data-ttu-id="a915c-117">このトークンに署名したタイムスタンプ機関 (TSA) からの証明書が返されます。または、証明書の署名者を特定できない場合は <see langword="null" /> が返されます。</span><span class="sxs-lookup"><span data-stu-id="a915c-117">When this method returns, the certificate from the Timestamp Authority (TSA) which signed this token, or <see langword="null" /> if a signer certificate cannot be determined.</span></span> <span data-ttu-id="a915c-118">このパラメーターは初期化前として処理されます。</span><span class="sxs-lookup"><span data-stu-id="a915c-118">This parameter is treated as uninitialized.</span></span></param>
        <param name="extraCandidates"><span data-ttu-id="a915c-119">タイムスタンプ機関 (TSA) 証明書として考慮する、トークン内に含まれる可能性のある証明書以外のオプションの証明書のコレクション。</span><span class="sxs-lookup"><span data-stu-id="a915c-119">An optional collection of certificates to consider as the Timestamp Authority (TSA) certificates, in addition to any certificates that may be included within the token.</span></span></param>
        <summary><span data-ttu-id="a915c-120">提供されるデータに対し、現在のトークンが有効なタイムスタンプ トークンであるか検証します。</span><span class="sxs-lookup"><span data-stu-id="a915c-120">Verifies that the current token is a valid time-stamp token for the provided data.</span></span></summary>
        <returns><span data-ttu-id="a915c-121">タイムスタンプ機関 (TSA) 証明書が見つかった場合、証明書の公開キーがトークンの署名を検証した場合、トークンが指定したデータのハッシュと一致する場合は <see langword="true" />。それ以外の場合は、<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a915c-121"><see langword="true" /> if the Timestamp Authority (TSA) certificate was found, the certificate public key validates the token signature, and the token matches the hash for the provided data; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
<span data-ttu-id="a915c-122">この方法では、タイムスタンプ機関 (TSA) 証明書に必要な拡張キー使用法の値 (1.3.6.1.5.5.7.3.8) があること、トークンの埋め込み ESSCertID または ESSCertID2 識別子と一致すること、トークンのタイムスタンプ値を含む有効範囲があること、トークンの署名を正常に検証する公開キーがあることが必要です。</span><span class="sxs-lookup"><span data-stu-id="a915c-122">This method requires that the Timestamp Authority (TSA) certificate has the required extended key usage value (1.3.6.1.5.5.7.3.8), matches the token's embedded ESSCertID or ESSCertID2 identifier, has a validity range that encompasses the token's timestamp value, and has a public key that successfully validates the token's signature.</span></span>

<span data-ttu-id="a915c-123">このメソッドは、適切な TSA 証明書を決定した後、トークン内に埋め込まれているアルゴリズム識別子を使用して `data` のダイジェストを計算します。</span><span class="sxs-lookup"><span data-stu-id="a915c-123">After determining the appropriate TSA certificate, this method computes the digest of `data` using the algorithm identifier embedded within the token.</span></span>
<span data-ttu-id="a915c-124">そのダイジェストがトークンの埋め込みダイジェストと一致する場合、証明書は `signerCertificate` を介して報告され、メソッドは `true`を返します。</span><span class="sxs-lookup"><span data-stu-id="a915c-124">If that digest matches the token's embedded digest, the certificate is reported via the `signerCertificate` and the method returns `true`.</span></span>

<span data-ttu-id="a915c-125">ダイジェストが一致しない場合、または TSA 証明書を特定できなかった場合、メソッドは `signerCertificate` を `null` として報告し、`false`を返します。</span><span class="sxs-lookup"><span data-stu-id="a915c-125">If the digest does not match, or the TSA certificate could not be determined, the method reports `signerCertificate` as `null` and returns `false`.</span></span>

          ]]></format>
        </remarks>
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForHash(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForHash(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.Oid,System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
      </Docs>
    </Member>
    <Member MemberName="VerifySignatureForHash">
      <MemberSignature Language="C#" Value="public bool VerifySignatureForHash (ReadOnlySpan&lt;byte&gt; hash, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, out System.Security.Cryptography.X509Certificates.X509Certificate2 signerCertificate, System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifySignatureForHash(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; hash, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, [out] class System.Security.Cryptography.X509Certificates.X509Certificate2&amp; signerCertificate, class System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForHash(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifySignatureForHash (hash As ReadOnlySpan(Of Byte), hashAlgorithm As HashAlgorithmName, ByRef signerCertificate As X509Certificate2, Optional extraCandidates As X509Certificate2Collection = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.VerifySignatureForHash : ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * X509Certificate2 * System.Security.Cryptography.X509Certificates.X509Certificate2Collection -&gt; bool" Usage="rfc3161TimestampToken.VerifySignatureForHash (hash, hashAlgorithm, signerCertificate, extraCandidates)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
        <Parameter Name="signerCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" RefType="out" />
        <Parameter Name="extraCandidates" Type="System.Security.Cryptography.X509Certificates.X509Certificate2Collection" />
      </Parameters>
      <Docs>
        <param name="hash"><span data-ttu-id="a915c-126">このタイムスタンプ トークンに対して検証する暗号化ハッシュ。</span><span class="sxs-lookup"><span data-stu-id="a915c-126">The cryptographic hash to verify against this time-stamp token.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="a915c-127"><paramref name="hash" /> を生成したアルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="a915c-127">The algorithm which produced <paramref name="hash" />.</span></span></param>
        <param name="signerCertificate"><span data-ttu-id="a915c-128">このトークンに署名したタイムスタンプ機関 (TSA) からの証明書が返されます。または、証明書の署名者を特定できない場合は <see langword="null" /> が返されます。</span><span class="sxs-lookup"><span data-stu-id="a915c-128">When this method returns, the certificate from the Timestamp Authority (TSA) which signed this token, or <see langword="null" /> if a signer certificate cannot be determined.</span></span> <span data-ttu-id="a915c-129">このパラメーターは初期化前として処理されます。</span><span class="sxs-lookup"><span data-stu-id="a915c-129">This parameter is treated as uninitialized.</span></span></param>
        <param name="extraCandidates"><span data-ttu-id="a915c-130">タイムスタンプ機関 (TSA) 証明書として考慮する、トークン内に含まれる可能性のある証明書以外のオプションの証明書のコレクション。</span><span class="sxs-lookup"><span data-stu-id="a915c-130">An optional collection of certificates to consider as the Timestamp Authority (TSA) certificates, in addition to any certificates that may be included within the token.</span></span></param>
        <summary><span data-ttu-id="a915c-131">提供されたデータ ハッシュおよびアルゴリズム識別子に対し、現在のトークンが有効なタイムスタンプ トークンであるか検証します。</span><span class="sxs-lookup"><span data-stu-id="a915c-131">Verifies that the current token is a valid time-stamp token for the provided data hash and algorithm identifier.</span></span></summary>
        <returns><span data-ttu-id="a915c-132">タイムスタンプ機関 (TSA) 証明書が見つかった場合、証明書の公開キーがトークンの署名を検証した場合、トークンが指定したデータ ハッシュおよびアルゴリズムのハッシュと一致する場合は <see langword="true" />。それ以外の場合は、<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a915c-132"><see langword="true" /> if the Timestamp Authority (TSA) certificate was found, the certificate public key validates the token signature, and the token matches the hash for the provided data hash and algorithm; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
<span data-ttu-id="a915c-133">この方法では、タイムスタンプ機関 (TSA) 証明書に必要な拡張キー使用法の値 (1.3.6.1.5.5.7.3.8) があること、トークンの埋め込み ESSCertID または ESSCertID2 識別子と一致すること、トークンのタイムスタンプ値を含む有効範囲があること、トークンの署名を正常に検証する公開キーがあることが必要です。</span><span class="sxs-lookup"><span data-stu-id="a915c-133">This method requires that the Timestamp Authority (TSA) certificate has the required extended key usage value (1.3.6.1.5.5.7.3.8), matches the token's embedded ESSCertID or ESSCertID2 identifier, has a validity range that encompasses the token's timestamp value, and has a public key that successfully validates the token's signature.</span></span>

<span data-ttu-id="a915c-134">このメソッドは、適切な TSA 証明書を決定した後、指定されたダイジェストとアルゴリズム識別子をトークンの適切な値と比較します。</span><span class="sxs-lookup"><span data-stu-id="a915c-134">After determining the appropriate TSA certificate, this method compares the provided digest and algorithm identifier with the appropriate values from the token.</span></span>
<span data-ttu-id="a915c-135">ダイジェストとアルゴリズムの両方がトークンの値と一致する場合、証明書は `signerCertificate` を介して報告され、メソッドは `true`を返します。</span><span class="sxs-lookup"><span data-stu-id="a915c-135">If both the digest and the algorithm match the token's values, the certificate is reported via the `signerCertificate` and the method returns `true`.</span></span>

<span data-ttu-id="a915c-136">ダイジェストが一致しない場合、アルゴリズムが一致しない場合、または TSA 証明書を特定できなかった場合、メソッドは `signerCertificate` を `null` として報告し、`false`を返します。</span><span class="sxs-lookup"><span data-stu-id="a915c-136">If the digest does not match, the algorithm does not match, or the TSA certificate could not be determined, the method reports `signerCertificate` as `null` and returns `false`.</span></span>

          ]]></format>
        </remarks>
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForData(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForHash(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.Oid,System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
      </Docs>
    </Member>
    <Member MemberName="VerifySignatureForHash">
      <MemberSignature Language="C#" Value="public bool VerifySignatureForHash (ReadOnlySpan&lt;byte&gt; hash, System.Security.Cryptography.Oid hashAlgorithmId, out System.Security.Cryptography.X509Certificates.X509Certificate2 signerCertificate, System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifySignatureForHash(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; hash, class System.Security.Cryptography.Oid hashAlgorithmId, [out] class System.Security.Cryptography.X509Certificates.X509Certificate2&amp; signerCertificate, class System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForHash(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.Oid,System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifySignatureForHash (hash As ReadOnlySpan(Of Byte), hashAlgorithmId As Oid, ByRef signerCertificate As X509Certificate2, Optional extraCandidates As X509Certificate2Collection = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.VerifySignatureForHash : ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.Oid * X509Certificate2 * System.Security.Cryptography.X509Certificates.X509Certificate2Collection -&gt; bool" Usage="rfc3161TimestampToken.VerifySignatureForHash (hash, hashAlgorithmId, signerCertificate, extraCandidates)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="hashAlgorithmId" Type="System.Security.Cryptography.Oid" />
        <Parameter Name="signerCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" RefType="out" />
        <Parameter Name="extraCandidates" Type="System.Security.Cryptography.X509Certificates.X509Certificate2Collection" />
      </Parameters>
      <Docs>
        <param name="hash"><span data-ttu-id="a915c-137">このタイムスタンプ トークンに対して検証する暗号化ハッシュ。</span><span class="sxs-lookup"><span data-stu-id="a915c-137">The cryptographic hash to verify against this time-stamp token.</span></span></param>
        <param name="hashAlgorithmId">To be added.</param>
        <param name="signerCertificate"><span data-ttu-id="a915c-138">このトークンに署名したタイムスタンプ機関 (TSA) からの証明書が返されます。または、証明書の署名者を特定できない場合は <see langword="null" /> が返されます。</span><span class="sxs-lookup"><span data-stu-id="a915c-138">When this method returns, the certificate from the Timestamp Authority (TSA) which signed this token, or <see langword="null" /> if a signer certificate cannot be determined.</span></span> <span data-ttu-id="a915c-139">このパラメーターは初期化前として処理されます。</span><span class="sxs-lookup"><span data-stu-id="a915c-139">This parameter is treated as uninitialized.</span></span></param>
        <param name="extraCandidates"><span data-ttu-id="a915c-140">タイムスタンプ機関 (TSA) 証明書として考慮する、トークン内に含まれる可能性のある証明書以外のオプションの証明書のコレクション。</span><span class="sxs-lookup"><span data-stu-id="a915c-140">An optional collection of certificates to consider as the Timestamp Authority (TSA) certificates, in addition to any certificates that may be included within the token.</span></span></param>
        <summary><span data-ttu-id="a915c-141">提供されたデータ ハッシュおよびアルゴリズム識別子に対し、現在のトークンが有効なタイムスタンプ トークンであるか検証します。</span><span class="sxs-lookup"><span data-stu-id="a915c-141">Verifies that the current token is a valid time-stamp token for the provided data hash and algorithm identifier.</span></span></summary>
        <returns><span data-ttu-id="a915c-142">タイムスタンプ機関 (TSA) 証明書が見つかった場合、証明書の公開キーがトークンの署名を検証した場合、トークンが指定したデータ ハッシュおよびアルゴリズムのハッシュと一致する場合は <see langword="true" />。それ以外の場合は、<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a915c-142"><see langword="true" /> if the Timestamp Authority (TSA) certificate was found, the certificate public key validates the token signature, and the token matches the hash for the provided data hash and algorithm; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a915c-143">このメソッドでは、TSA 証明書に必要な拡張キー使用法の値 (1.3.6.1.5.5.7.3.8) が含まれていること、トークンの埋め込み ESSCertID または ESSCertID2 識別子と一致していること、トークンのタイムスタンプ値を含む有効範囲があること、およびトークンの署名を正常に検証する公開キーを持っていることが必要です。</span><span class="sxs-lookup"><span data-stu-id="a915c-143">This method requires that the TSA certificate has the required extended key usage value (1.3.6.1.5.5.7.3.8), matches the token's embedded ESSCertID or ESSCertID2 identifier, has a validity range that encompasses the token's timestamp value, and has a public key that successfully validates the token's signature.</span></span>

<span data-ttu-id="a915c-144">このメソッドは、適切な TSA 証明書を決定した後、指定されたダイジェストとアルゴリズム識別子をトークンの適切な値と比較します。</span><span class="sxs-lookup"><span data-stu-id="a915c-144">After determining the appropriate TSA certificate, this method compares the provided digest and algorithm identifier with the appropriate values from the token.</span></span>
<span data-ttu-id="a915c-145">ダイジェストとアルゴリズムの両方がトークンの値と一致する場合、証明書は `signerCertificate` を介して報告され、メソッドは `true`を返します。</span><span class="sxs-lookup"><span data-stu-id="a915c-145">If both the digest and the algorithm match the token's values, the certificate is reported via the `signerCertificate` and the method returns `true`.</span></span>

<span data-ttu-id="a915c-146">ダイジェストが一致しない場合、アルゴリズムが一致しない場合、または TSA 証明書を特定できなかった場合、メソッドは `signerCertificate` を `null` として報告し、`false`を返します。</span><span class="sxs-lookup"><span data-stu-id="a915c-146">If the digest does not match, the algorithm does not match, or the TSA certificate could not be determined, the method reports `signerCertificate` as `null` and returns `false`.</span></span>

          ]]></format>
        </remarks>
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForData(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForHash(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
      </Docs>
    </Member>
    <Member MemberName="VerifySignatureForSignerInfo">
      <MemberSignature Language="C#" Value="public bool VerifySignatureForSignerInfo (System.Security.Cryptography.Pkcs.SignerInfo signerInfo, out System.Security.Cryptography.X509Certificates.X509Certificate2 signerCertificate, System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifySignatureForSignerInfo(class System.Security.Cryptography.Pkcs.SignerInfo signerInfo, [out] class System.Security.Cryptography.X509Certificates.X509Certificate2&amp; signerCertificate, class System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForSignerInfo(System.Security.Cryptography.Pkcs.SignerInfo,System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifySignatureForSignerInfo (signerInfo As SignerInfo, ByRef signerCertificate As X509Certificate2, Optional extraCandidates As X509Certificate2Collection = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.VerifySignatureForSignerInfo : System.Security.Cryptography.Pkcs.SignerInfo * X509Certificate2 * System.Security.Cryptography.X509Certificates.X509Certificate2Collection -&gt; bool" Usage="rfc3161TimestampToken.VerifySignatureForSignerInfo (signerInfo, signerCertificate, extraCandidates)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signerInfo" Type="System.Security.Cryptography.Pkcs.SignerInfo" />
        <Parameter Name="signerCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" RefType="out" />
        <Parameter Name="extraCandidates" Type="System.Security.Cryptography.X509Certificates.X509Certificate2Collection" />
      </Parameters>
      <Docs>
        <param name="signerInfo"><span data-ttu-id="a915c-147">タイムスタンプが作成されたことを確認する CMS 署名者情報。</span><span class="sxs-lookup"><span data-stu-id="a915c-147">The CMS signer information to verify the timestamp was built for.</span></span></param>
        <param name="signerCertificate"><span data-ttu-id="a915c-148">このトークンに署名したタイムスタンプ機関 (TSA) からの証明書が返されます。または、証明書の署名者を特定できない場合は <see langword="null" /> が返されます。</span><span class="sxs-lookup"><span data-stu-id="a915c-148">When this method returns, the certificate from the Timestamp Authority (TSA) that signed this token, or <see langword="null" /> if a signer certificate cannot be determined.</span></span> <span data-ttu-id="a915c-149">このパラメーターは初期化前として処理されます。</span><span class="sxs-lookup"><span data-stu-id="a915c-149">This parameter is treated as uninitialized.</span></span></param>
        <param name="extraCandidates"><span data-ttu-id="a915c-150">タイムスタンプ機関 (TSA) 証明書として考慮する、トークン内に含まれる可能性のある証明書以外のオプションの証明書のコレクション。</span><span class="sxs-lookup"><span data-stu-id="a915c-150">An optional collection of certificates to consider as the Timestamp Authority (TSA) certificates, in addition to any certificates that may be included within the token.</span></span></param>
        <summary><span data-ttu-id="a915c-151">提供される <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" /> に対し、現在のトークンが有効なタイムスタンプ トークンであるか検証します。</span><span class="sxs-lookup"><span data-stu-id="a915c-151">Verifies that the current token is a valid time-stamp token for the provided <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" />.</span></span></summary>
        <returns><span data-ttu-id="a915c-152">タイムスタンプ機関 (TSA) 証明書が見つかった場合、証明書の公開キーがトークンの署名を検証した場合、トークンが <paramref name="signerInfo" />の署名と一致する場合は <see langword="true" />。それ以外の場合は、<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a915c-152"><see langword="true" /> if the Timestamp Authority (TSA) certificate was found, the certificate public key validates the token signature, and the token matches the signature for <paramref name="signerInfo" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
<span data-ttu-id="a915c-153">このメソッドは、IETF RFC 3161 付録 A (CMS を使用した署名タイムスタンプ属性) に従って、タイムスタンプトークンが暗号化メッセージ構文 (CMS) <xref:System.Security.Cryptography.Pkcs.SignerInfo>に対して有効であることを確認します。</span><span class="sxs-lookup"><span data-stu-id="a915c-153">This method verifies that the time-stamp token is valid for a Cryptographic Message Syntax (CMS) <xref:System.Security.Cryptography.Pkcs.SignerInfo>, according to IETF RFC 3161 Appendix A (Signature Time-stamp attribute using CMS).</span></span>

<span data-ttu-id="a915c-154">このメソッドでは、TSA 証明書に必要な拡張キー使用法の値 (1.3.6.1.5.5.7.3.8) が含まれていること、トークンの埋め込み ESSCertID または ESSCertID2 識別子と一致していること、トークンのタイムスタンプ値を含む有効範囲があること、およびトークンの署名を正常に検証する公開キーを持っていることが必要です。</span><span class="sxs-lookup"><span data-stu-id="a915c-154">This method requires that the TSA certificate has the required extended key usage value (1.3.6.1.5.5.7.3.8), matches the token's embedded ESSCertID or ESSCertID2 identifier, has a validity range that encompasses the token's timestamp value, and has a public key that successfully validates the token's signature.</span></span>

<span data-ttu-id="a915c-155">このメソッドは、適切な TSA 証明書を決定した後、指定された `signerInfo` の署名値がトークンのダイジェストおよびアルゴリズム識別子と一致するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="a915c-155">After determining the appropriate TSA certificate, this method determines if the signature value from the provided `signerInfo` matches the digest and algorithm identifier from the token.</span></span>
<span data-ttu-id="a915c-156">`signerInfo` シグネチャがトークンのダイジェストとアルゴリズム識別子と一致する場合、証明書は `signerCertificate` を介して報告され、メソッドは `true`を返します。</span><span class="sxs-lookup"><span data-stu-id="a915c-156">If the `signerInfo` signature matches the token's digest and algorithm identifier, the certificate is reported via the `signerCertificate` and the method returns `true`.</span></span>

<span data-ttu-id="a915c-157">`signerInfo` 署名が一致しない場合、または TSA 証明書を特定できなかった場合、メソッドは `signerCertificate` を `null` として報告し、`false`を返します。</span><span class="sxs-lookup"><span data-stu-id="a915c-157">If the `signerInfo` signature does not match, or the TSA certificate could not be determined, the method reports `signerCertificate` as `null` and returns `false`.</span></span>

<span data-ttu-id="a915c-158">このメソッドは、`signerInfo` の <xref:System.Security.Cryptography.Pkcs.SignerInfo.UnsignedAttributes> を考慮しません。また、`signerInfo` シグネチャが署名 mind に署名されたデータに適しているかどうかを判断することもありません。</span><span class="sxs-lookup"><span data-stu-id="a915c-158">This method does not take the <xref:System.Security.Cryptography.Pkcs.SignerInfo.UnsignedAttributes> of the `signerInfo` under consideration, nor does it determine if the `signerInfo` signature is appropriate for the data that signature purports to have signed.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a915c-159"><paramref name="signerInfo" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="a915c-159"><paramref name="signerInfo" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForData(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForHash(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.Oid,System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
      </Docs>
    </Member>
  </Members>
</Type>
