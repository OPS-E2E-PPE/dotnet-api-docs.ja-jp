<Type Name="Rfc3161TimestampToken" FullName="System.Security.Cryptography.Pkcs.Rfc3161TimestampToken">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9851553fe82370b5bfc0a993b4507894104a579e" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78830230" /></Metadata><TypeSignature Language="C#" Value="public sealed class Rfc3161TimestampToken" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Rfc3161TimestampToken extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Rfc3161TimestampToken" />
  <TypeSignature Language="C++ CLI" Value="public ref class Rfc3161TimestampToken sealed" />
  <TypeSignature Language="F#" Value="type Rfc3161TimestampToken = class" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.1</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>IETF RFC 3161 のタイムスタンプ トークンを表します。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AsSignedCms">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Pkcs.SignedCms AsSignedCms ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.Cryptography.Pkcs.SignedCms AsSignedCms() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.AsSignedCms" />
      <MemberSignature Language="VB.NET" Value="Public Function AsSignedCms () As SignedCms" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::Cryptography::Pkcs::SignedCms ^ AsSignedCms();" />
      <MemberSignature Language="F#" Value="member this.AsSignedCms : unit -&gt; System.Security.Cryptography.Pkcs.SignedCms" Usage="rfc3161TimestampToken.AsSignedCms " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Pkcs.SignedCms</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>RFC3161 のタイムスタンプ トークンの署名済み Cryptographic Message Syntax (CMS) 形式を取得します。</summary>
        <returns><see cref="T:System.Security.Cryptography.Pkcs.SignedCms" /> の <see cref="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken" /> 形式です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
このメソッドを連続して呼び出すと、同じオブジェクトが返されます。

<xref:System.Security.Cryptography.Pkcs.SignedCms> クラスは変更可能ですが、そのオブジェクトに対する変更は、それを生成した <xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken> オブジェクトには反映されません。

<xref:System.Security.Cryptography.Pkcs.SignedCms.Encode?displayProperty=nameWithType> を呼び出すと、別の <xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.TryDecode(System.ReadOnlyMemory{System.Byte},System.Security.Cryptography.Pkcs.Rfc3161TimestampToken@,System.Int32@)?displayProperty=nameWithType>の呼び出しを通じて、<xref:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken> として再度解釈される可能性があります。

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenInfo">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo TokenInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo TokenInfo" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.TokenInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TokenInfo As Rfc3161TimestampTokenInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::Pkcs::Rfc3161TimestampTokenInfo ^ TokenInfo { System::Security::Cryptography::Pkcs::Rfc3161TimestampTokenInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TokenInfo : System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo" Usage="System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.TokenInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo" /> としてタイムスタンプ トークンの詳細を取得します。</summary>
        <value>このタイムスタンプトークンの詳細を <see cref="T:System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo" />として表示します。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDecode">
      <MemberSignature Language="C#" Value="public static bool TryDecode (ReadOnlyMemory&lt;byte&gt; encodedBytes, out System.Security.Cryptography.Pkcs.Rfc3161TimestampToken token, out int bytesConsumed);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryDecode(valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; encodedBytes, [out] class System.Security.Cryptography.Pkcs.Rfc3161TimestampToken&amp; token, [out] int32&amp; bytesConsumed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.TryDecode(System.ReadOnlyMemory{System.Byte},System.Security.Cryptography.Pkcs.Rfc3161TimestampToken@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryDecode (encodedBytes As ReadOnlyMemory(Of Byte), ByRef token As Rfc3161TimestampToken, ByRef bytesConsumed As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryDecode(ReadOnlyMemory&lt;System::Byte&gt; encodedBytes, [Runtime::InteropServices::Out] System::Security::Cryptography::Pkcs::Rfc3161TimestampToken ^ % token, [Runtime::InteropServices::Out] int % bytesConsumed);" />
      <MemberSignature Language="F#" Value="static member TryDecode : ReadOnlyMemory&lt;byte&gt; * Rfc3161TimestampToken * int -&gt; bool" Usage="System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.TryDecode (encodedBytes, token, bytesConsumed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encodedBytes" Type="System.ReadOnlyMemory&lt;System.Byte&gt;" />
        <Parameter Name="token" Type="System.Security.Cryptography.Pkcs.Rfc3161TimestampToken" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="encodedBytes">DER でエンコードされたタイムスタンプ トークンを格納するバッファー。</param>
        <param name="token">デコードが正常に実行された場合は、正常にデコードされたタイムスタンプ トークンがこのメソッドにより返されます。デコードに失敗した場合は <see langword="null" />。 このパラメーターは未初期化として扱われます。</param>
        <param name="bytesConsumed">このメソッドから制御が戻るときに、<paramref name="encodedBytes" /> から読み取られたバイト数。 このパラメーターは未初期化として扱われます。</param>
        <summary><paramref name="encodedBytes" /> のコンテンツを、DER でエンコードされたタイムスタンプ トークンとして解釈しようとします。</summary>
        <returns><see langword="true" /> がタイムスタンプ トークンとして正常に解釈された場合は <paramref name="encodedBytes" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifySignatureForData">
      <MemberSignature Language="C#" Value="public bool VerifySignatureForData (ReadOnlySpan&lt;byte&gt; data, out System.Security.Cryptography.X509Certificates.X509Certificate2 signerCertificate, System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifySignatureForData(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, [out] class System.Security.Cryptography.X509Certificates.X509Certificate2&amp; signerCertificate, class System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForData(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifySignatureForData (data As ReadOnlySpan(Of Byte), ByRef signerCertificate As X509Certificate2, Optional extraCandidates As X509Certificate2Collection = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.VerifySignatureForData : ReadOnlySpan&lt;byte&gt; * X509Certificate2 * System.Security.Cryptography.X509Certificates.X509Certificate2Collection -&gt; bool" Usage="rfc3161TimestampToken.VerifySignatureForData (data, signerCertificate, extraCandidates)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="signerCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" RefType="out" />
        <Parameter Name="extraCandidates" Type="System.Security.Cryptography.X509Certificates.X509Certificate2Collection" />
      </Parameters>
      <Docs>
        <param name="data">このタイムスタンプ トークンに対して検証するデータ。</param>
        <param name="signerCertificate">このトークンに署名したタイムスタンプ機関 (TSA) からの証明書が返されます。または、証明書の署名者を特定できない場合は <see langword="null" /> が返されます。 このパラメーターは未初期化として扱われます。</param>
        <param name="extraCandidates">タイムスタンプ機関 (TSA) 証明書として考慮する、トークン内に含まれる可能性のある証明書以外のオプションの証明書のコレクション。</param>
        <summary>提供されるデータに対し、現在のトークンが有効なタイムスタンプ トークンであるか検証します。</summary>
        <returns>タイムスタンプ機関 (TSA) 証明書が見つかった場合、証明書の公開キーがトークンの署名を検証した場合、トークンが指定したデータのハッシュと一致する場合は <see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
この方法では、タイムスタンプ機関 (TSA) 証明書に必要な拡張キー使用法の値 (1.3.6.1.5.5.7.3.8) があること、トークンの埋め込み ESSCertID または ESSCertID2 識別子と一致すること、トークンのタイムスタンプを含む有効範囲があることが必要です。値には、トークンの署名を正常に検証する公開キーがあります。

このメソッドは、適切な TSA 証明書を決定した後、トークン内に埋め込まれているアルゴリズム識別子を使用して `data` のダイジェストを計算します。
そのダイジェストがトークンの埋め込みダイジェストと一致する場合、証明書は `signerCertificate` を介して報告され、メソッドは `true`を返します。

ダイジェストが一致しない場合、または TSA 証明書を特定できなかった場合、メソッドは `signerCertificate` を `null` として報告し、`false`を返します。

          ]]></format>
        </remarks>
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForHash(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForHash(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.Oid,System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
      </Docs>
    </Member>
    <Member MemberName="VerifySignatureForHash">
      <MemberSignature Language="C#" Value="public bool VerifySignatureForHash (ReadOnlySpan&lt;byte&gt; hash, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, out System.Security.Cryptography.X509Certificates.X509Certificate2 signerCertificate, System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifySignatureForHash(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; hash, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, [out] class System.Security.Cryptography.X509Certificates.X509Certificate2&amp; signerCertificate, class System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForHash(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifySignatureForHash (hash As ReadOnlySpan(Of Byte), hashAlgorithm As HashAlgorithmName, ByRef signerCertificate As X509Certificate2, Optional extraCandidates As X509Certificate2Collection = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.VerifySignatureForHash : ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.HashAlgorithmName * X509Certificate2 * System.Security.Cryptography.X509Certificates.X509Certificate2Collection -&gt; bool" Usage="rfc3161TimestampToken.VerifySignatureForHash (hash, hashAlgorithm, signerCertificate, extraCandidates)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
        <Parameter Name="signerCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" RefType="out" />
        <Parameter Name="extraCandidates" Type="System.Security.Cryptography.X509Certificates.X509Certificate2Collection" />
      </Parameters>
      <Docs>
        <param name="hash">このタイムスタンプ トークンに対して検証する暗号化ハッシュ。</param>
        <param name="hashAlgorithm"><paramref name="hash" /> を生成したアルゴリズム。</param>
        <param name="signerCertificate">このトークンに署名したタイムスタンプ機関 (TSA) からの証明書が返されます。または、証明書の署名者を特定できない場合は <see langword="null" /> が返されます。 このパラメーターは未初期化として扱われます。</param>
        <param name="extraCandidates">タイムスタンプ機関 (TSA) 証明書として考慮する、トークン内に含まれる可能性のある証明書以外のオプションの証明書のコレクション。</param>
        <summary>提供されたデータ ハッシュおよびアルゴリズム識別子に対し、現在のトークンが有効なタイムスタンプ トークンであるか検証します。</summary>
        <returns>タイムスタンプ機関 (TSA) 証明書が見つかった場合、証明書の公開キーがトークンの署名を検証した場合、トークンが指定したデータ ハッシュおよびアルゴリズムのハッシュと一致する場合は <see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
この方法では、タイムスタンプ機関 (TSA) 証明書に必要な拡張キー使用法の値 (1.3.6.1.5.5.7.3.8) があること、トークンの埋め込み ESSCertID または ESSCertID2 識別子と一致すること、トークンのタイムスタンプを含む有効範囲があることが必要です。値には、トークンの署名を正常に検証する公開キーがあります。

このメソッドは、適切な TSA 証明書を決定した後、指定されたダイジェストとアルゴリズム識別子をトークンの適切な値と比較します。
ダイジェストとアルゴリズムの両方がトークンの値と一致する場合、証明書は `signerCertificate` を介して報告され、メソッドは `true`を返します。

ダイジェストが一致しない場合、アルゴリズムが一致しない場合、または TSA 証明書を特定できなかった場合、メソッドは `signerCertificate` を `null` として報告し、`false`を返します。

          ]]></format>
        </remarks>
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForData(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForHash(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.Oid,System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
      </Docs>
    </Member>
    <Member MemberName="VerifySignatureForHash">
      <MemberSignature Language="C#" Value="public bool VerifySignatureForHash (ReadOnlySpan&lt;byte&gt; hash, System.Security.Cryptography.Oid hashAlgorithmId, out System.Security.Cryptography.X509Certificates.X509Certificate2 signerCertificate, System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifySignatureForHash(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; hash, class System.Security.Cryptography.Oid hashAlgorithmId, [out] class System.Security.Cryptography.X509Certificates.X509Certificate2&amp; signerCertificate, class System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForHash(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.Oid,System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifySignatureForHash (hash As ReadOnlySpan(Of Byte), hashAlgorithmId As Oid, ByRef signerCertificate As X509Certificate2, Optional extraCandidates As X509Certificate2Collection = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.VerifySignatureForHash : ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.Oid * X509Certificate2 * System.Security.Cryptography.X509Certificates.X509Certificate2Collection -&gt; bool" Usage="rfc3161TimestampToken.VerifySignatureForHash (hash, hashAlgorithmId, signerCertificate, extraCandidates)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="hashAlgorithmId" Type="System.Security.Cryptography.Oid" />
        <Parameter Name="signerCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" RefType="out" />
        <Parameter Name="extraCandidates" Type="System.Security.Cryptography.X509Certificates.X509Certificate2Collection" />
      </Parameters>
      <Docs>
        <param name="hash">このタイムスタンプ トークンに対して検証する暗号化ハッシュ。</param>
        <param name="hashAlgorithmId">To be added.</param>
        <param name="signerCertificate">このトークンに署名したタイムスタンプ機関 (TSA) からの証明書が返されます。または、証明書の署名者を特定できない場合は <see langword="null" /> が返されます。 このパラメーターは未初期化として扱われます。</param>
        <param name="extraCandidates">タイムスタンプ機関 (TSA) 証明書として考慮する、トークン内に含まれる可能性のある証明書以外のオプションの証明書のコレクション。</param>
        <summary>提供されたデータ ハッシュおよびアルゴリズム識別子に対し、現在のトークンが有効なタイムスタンプ トークンであるか検証します。</summary>
        <returns>タイムスタンプ機関 (TSA) 証明書が見つかった場合、証明書の公開キーがトークンの署名を検証した場合、トークンが指定したデータ ハッシュおよびアルゴリズムのハッシュと一致する場合は <see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

このメソッドでは、TSA 証明書に必要な拡張キー使用法の値 (1.3.6.1.5.5.7.3.8) が含まれていること、トークンの埋め込み ESSCertID または ESSCertID2 識別子と一致していること、トークンのタイムスタンプ値を含む有効範囲があること、および公開キーを持っていることが必要です。これにより、トークンの署名が正常に検証されます。

このメソッドは、適切な TSA 証明書を決定した後、指定されたダイジェストとアルゴリズム識別子をトークンの適切な値と比較します。
ダイジェストとアルゴリズムの両方がトークンの値と一致する場合、証明書は `signerCertificate` を介して報告され、メソッドは `true`を返します。

ダイジェストが一致しない場合、アルゴリズムが一致しない場合、または TSA 証明書を特定できなかった場合、メソッドは `signerCertificate` を `null` として報告し、`false`を返します。

          ]]></format>
        </remarks>
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForData(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForHash(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
      </Docs>
    </Member>
    <Member MemberName="VerifySignatureForSignerInfo">
      <MemberSignature Language="C#" Value="public bool VerifySignatureForSignerInfo (System.Security.Cryptography.Pkcs.SignerInfo signerInfo, out System.Security.Cryptography.X509Certificates.X509Certificate2 signerCertificate, System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifySignatureForSignerInfo(class System.Security.Cryptography.Pkcs.SignerInfo signerInfo, [out] class System.Security.Cryptography.X509Certificates.X509Certificate2&amp; signerCertificate, class System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraCandidates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForSignerInfo(System.Security.Cryptography.Pkcs.SignerInfo,System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifySignatureForSignerInfo (signerInfo As SignerInfo, ByRef signerCertificate As X509Certificate2, Optional extraCandidates As X509Certificate2Collection = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.VerifySignatureForSignerInfo : System.Security.Cryptography.Pkcs.SignerInfo * X509Certificate2 * System.Security.Cryptography.X509Certificates.X509Certificate2Collection -&gt; bool" Usage="rfc3161TimestampToken.VerifySignatureForSignerInfo (signerInfo, signerCertificate, extraCandidates)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.1</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signerInfo" Type="System.Security.Cryptography.Pkcs.SignerInfo" />
        <Parameter Name="signerCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" RefType="out" />
        <Parameter Name="extraCandidates" Type="System.Security.Cryptography.X509Certificates.X509Certificate2Collection" />
      </Parameters>
      <Docs>
        <param name="signerInfo">タイムスタンプが作成されたことを確認する CMS 署名者情報。</param>
        <param name="signerCertificate">このトークンに署名したタイムスタンプ機関 (TSA) からの証明書が返されます。または、証明書の署名者を特定できない場合は <see langword="null" /> が返されます。 このパラメーターは未初期化として扱われます。</param>
        <param name="extraCandidates">タイムスタンプ機関 (TSA) 証明書として考慮する、トークン内に含まれる可能性のある証明書以外のオプションの証明書のコレクション。</param>
        <summary>提供される <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" /> に対し、現在のトークンが有効なタイムスタンプ トークンであるか検証します。</summary>
        <returns>タイムスタンプ機関 (TSA) 証明書が見つかった場合、証明書の公開キーがトークンの署名を検証した場合、トークンが <see langword="true" />の署名と一致する場合は <paramref name="signerInfo" />。それ以外の場合は、<see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
このメソッドは、IETF RFC 3161 付録 A (CMS を使用した署名タイムスタンプ属性) に従って、タイムスタンプトークンが暗号化メッセージ構文 (CMS) <xref:System.Security.Cryptography.Pkcs.SignerInfo>に対して有効であることを確認します。

このメソッドでは、TSA 証明書に必要な拡張キー使用法の値 (1.3.6.1.5.5.7.3.8) が含まれていること、トークンの埋め込み ESSCertID または ESSCertID2 識別子と一致していること、トークンのタイムスタンプ値を含む有効範囲があること、および公開キーを持っていることが必要です。これにより、トークンの署名が正常に検証されます。

このメソッドは、適切な TSA 証明書を決定した後、指定された `signerInfo` の署名値がトークンのダイジェストおよびアルゴリズム識別子と一致するかどうかを判断します。
`signerInfo` シグネチャがトークンのダイジェストとアルゴリズム識別子と一致する場合、証明書は `signerCertificate` を介して報告され、メソッドは `true`を返します。

`signerInfo` 署名が一致しない場合、または TSA 証明書を特定できなかった場合、メソッドは `signerCertificate` を `null` として報告し、`false`を返します。

このメソッドは、`signerInfo` の <xref:System.Security.Cryptography.Pkcs.SignerInfo.UnsignedAttributes> を考慮しません。また、`signerInfo` シグネチャが署名 mind に署名されたデータに適しているかどうかを判断することもありません。

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="signerInfo" /> が <see langword="null" /> です。</exception>
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForData(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
        <altmember cref="M:System.Security.Cryptography.Pkcs.Rfc3161TimestampToken.VerifySignatureForHash(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.Oid,System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
      </Docs>
    </Member>
  </Members>
</Type>
