<Type Name="Pkcs12Builder" FullName="System.Security.Cryptography.Pkcs.Pkcs12Builder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c04b624cdb603be141febd5217025842498aaca2" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75163900" /></Metadata><TypeSignature Language="C#" Value="public sealed class Pkcs12Builder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Pkcs12Builder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.Pkcs.Pkcs12Builder" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Pkcs12Builder" />
  <TypeSignature Language="C++ CLI" Value="public ref class Pkcs12Builder sealed" />
  <TypeSignature Language="F#" Value="type Pkcs12Builder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="39aad-101">PKCS # 12 PFX データ値の作成を有効にします。</span><span class="sxs-lookup"><span data-stu-id="39aad-101">Enables the creation of PKCS#12 PFX data values.</span></span> <span data-ttu-id="39aad-102">このクラスは継承できません。</span><span class="sxs-lookup"><span data-stu-id="39aad-102">This class cannot be inherited.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Pkcs12Builder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Pkcs12Builder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Pkcs12Builder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="39aad-103"><see cref="T:System.Security.Cryptography.Pkcs.Pkcs12Builder" /> クラスの新しい値を初期化します。</span><span class="sxs-lookup"><span data-stu-id="39aad-103">Initializes a new value of the <see cref="T:System.Security.Cryptography.Pkcs.Pkcs12Builder" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddSafeContentsEncrypted">
      <MemberSignature Language="C#" Value="public void AddSafeContentsEncrypted (System.Security.Cryptography.Pkcs.Pkcs12SafeContents safeContents, byte[] passwordBytes, System.Security.Cryptography.PbeParameters pbeParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddSafeContentsEncrypted(class System.Security.Cryptography.Pkcs.Pkcs12SafeContents safeContents, unsigned int8[] passwordBytes, class System.Security.Cryptography.PbeParameters pbeParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Pkcs12Builder.AddSafeContentsEncrypted(System.Security.Cryptography.Pkcs.Pkcs12SafeContents,System.Byte[],System.Security.Cryptography.PbeParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddSafeContentsEncrypted(System::Security::Cryptography::Pkcs::Pkcs12SafeContents ^ safeContents, cli::array &lt;System::Byte&gt; ^ passwordBytes, System::Security::Cryptography::PbeParameters ^ pbeParameters);" />
      <MemberSignature Language="F#" Value="member this.AddSafeContentsEncrypted : System.Security.Cryptography.Pkcs.Pkcs12SafeContents * byte[] * System.Security.Cryptography.PbeParameters -&gt; unit" Usage="pkcs12Builder.AddSafeContentsEncrypted (safeContents, passwordBytes, pbeParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="safeContents" Type="System.Security.Cryptography.Pkcs.Pkcs12SafeContents" />
        <Parameter Name="passwordBytes" Type="System.Byte[]" />
        <Parameter Name="pbeParameters" Type="System.Security.Cryptography.PbeParameters" />
      </Parameters>
      <Docs>
        <param name="safeContents"><span data-ttu-id="39aad-104">PFX に追加するコンテンツ。</span><span class="sxs-lookup"><span data-stu-id="39aad-104">The contents to add to the PFX.</span></span></param>
        <param name="passwordBytes"><span data-ttu-id="39aad-105">コンテンツを暗号化するときにパスワードとして使用するバイト配列。</span><span class="sxs-lookup"><span data-stu-id="39aad-105">The byte array to use as a password when encrypting the contents.</span></span></param>
        <param name="pbeParameters"><span data-ttu-id="39aad-106">コンテンツを暗号化するときに使用する、パスワードベースの暗号化 (PBE) パラメーター。</span><span class="sxs-lookup"><span data-stu-id="39aad-106">The password-based encryption (PBE) parameters to use when encrypting the contents.</span></span></param>
        <summary><span data-ttu-id="39aad-107">PFX に、バイト配列からバイトベースのパスワードを使用して暗号化されたコンテンツを、一括で追加します。</span><span class="sxs-lookup"><span data-stu-id="39aad-107">Add contents to the PFX in an bundle encrypted with a byte-based password from a byte array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39aad-108">パスワードのバイト数は、`pbeParameters`によって示されるアルゴリズムによって使用されるキー派生関数 (KDF) に直接渡されます。</span><span class="sxs-lookup"><span data-stu-id="39aad-108">The password bytes are passed directly into the Key Derivation Function (KDF) used by the algorithm indicated by `pbeParameters`.</span></span>
<span data-ttu-id="39aad-109">これにより、PBKDF2 (パスワードベースのキー派生関数 2) でパスワードを処理するときに、UTF-8 以外のテキストエンコードを使用する他のシステムとの互換性が確保されます。</span><span class="sxs-lookup"><span data-stu-id="39aad-109">This enables compatibility with other systems which use a text encoding other than UTF-8 when processing passwords with PBKDF2 (Password-Based Key Derivation Function 2).</span></span>

 <span data-ttu-id="39aad-110">`safeContents` の内容は、このメソッドの呼び出し中に読み取られ、暗号化され、内部的に暗号化されたコンテンツとして格納されます。</span><span class="sxs-lookup"><span data-stu-id="39aad-110">The contents of `safeContents` are read during the call to this method, encrypted, and stored internally as encrypted content.</span></span>
<span data-ttu-id="39aad-111"><xref:System.Security.Cryptography.Pkcs.Pkcs12SafeContents> またはこのメソッドの呼び出し後に参照された <xref:System.Security.Cryptography.Pkcs.Pkcs12SafeBag> に対する変更は、最終的な出力には反映されません。</span><span class="sxs-lookup"><span data-stu-id="39aad-111">Any changes to the <xref:System.Security.Cryptography.Pkcs.Pkcs12SafeContents> or any <xref:System.Security.Cryptography.Pkcs.Pkcs12SafeBag> it references made after this method call are not reflected in the final output.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39aad-112"><paramref name="safeContents" /> パラメーターまたは <paramref name="pbeParameters" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39aad-112">The <paramref name="safeContents" /> or <paramref name="pbeParameters" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="39aad-113"><paramref name="safeContents" /> パラメーター値は既に暗号化済みです。</span><span class="sxs-lookup"><span data-stu-id="39aad-113">The <paramref name="safeContents" /> parameter value is already encrypted.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="39aad-114">PFX は既に封印されています (<see cref="P:System.Security.Cryptography.Pkcs.Pkcs12Builder.IsSealed" /> は<see langword="true" />)。</span><span class="sxs-lookup"><span data-stu-id="39aad-114">The PFX is already sealed (<see cref="P:System.Security.Cryptography.Pkcs.Pkcs12Builder.IsSealed" /> is <see langword="true" />).</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="39aad-115"><paramref name="pbeParameters" /> は、<see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" /> ベースのパスワードを必要とする <see cref="T:System.Char" /> を使用する必要があることを示しています。</span><span class="sxs-lookup"><span data-stu-id="39aad-115"><paramref name="pbeParameters" /> indicates that <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" /> should be used, which requires <see cref="T:System.Char" />-based passwords.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AddSafeContentsEncrypted">
      <MemberSignature Language="C#" Value="public void AddSafeContentsEncrypted (System.Security.Cryptography.Pkcs.Pkcs12SafeContents safeContents, ReadOnlySpan&lt;byte&gt; passwordBytes, System.Security.Cryptography.PbeParameters pbeParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddSafeContentsEncrypted(class System.Security.Cryptography.Pkcs.Pkcs12SafeContents safeContents, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; passwordBytes, class System.Security.Cryptography.PbeParameters pbeParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Pkcs12Builder.AddSafeContentsEncrypted(System.Security.Cryptography.Pkcs.Pkcs12SafeContents,System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddSafeContentsEncrypted(System::Security::Cryptography::Pkcs::Pkcs12SafeContents ^ safeContents, ReadOnlySpan&lt;System::Byte&gt; passwordBytes, System::Security::Cryptography::PbeParameters ^ pbeParameters);" />
      <MemberSignature Language="F#" Value="member this.AddSafeContentsEncrypted : System.Security.Cryptography.Pkcs.Pkcs12SafeContents * ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.PbeParameters -&gt; unit" Usage="pkcs12Builder.AddSafeContentsEncrypted (safeContents, passwordBytes, pbeParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="safeContents" Type="System.Security.Cryptography.Pkcs.Pkcs12SafeContents" />
        <Parameter Name="passwordBytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="pbeParameters" Type="System.Security.Cryptography.PbeParameters" />
      </Parameters>
      <Docs>
        <param name="safeContents"><span data-ttu-id="39aad-116">PFX に追加するコンテンツ。</span><span class="sxs-lookup"><span data-stu-id="39aad-116">The contents to add to the PFX.</span></span></param>
        <param name="passwordBytes"><span data-ttu-id="39aad-117">コンテンツを暗号化するときにパスワードとして使用するバイト スパン。</span><span class="sxs-lookup"><span data-stu-id="39aad-117">The byte span to use as a password when encrypting the contents.</span></span></param>
        <param name="pbeParameters"><span data-ttu-id="39aad-118">コンテンツを暗号化するときに使用する、パスワードベースの暗号化 (PBE) パラメーター。</span><span class="sxs-lookup"><span data-stu-id="39aad-118">The password-based encryption (PBE) parameters to use when encrypting the contents.</span></span></param>
        <summary><span data-ttu-id="39aad-119">PFX に、スパンからバイトベースのパスワードを使用して暗号化されたコンテンツを、一括で追加します。</span><span class="sxs-lookup"><span data-stu-id="39aad-119">Add contents to the PFX in an bundle encrypted with a byte-based password from a span.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39aad-120">パスワードのバイト数は、`pbeParameters`によって示されるアルゴリズムによって使用されるキー派生関数 (KDF) に直接渡されます。</span><span class="sxs-lookup"><span data-stu-id="39aad-120">The password bytes are passed directly into the Key Derivation Function (KDF) used by the algorithm indicated by `pbeParameters`.</span></span>
<span data-ttu-id="39aad-121">これにより、PBKDF2 (パスワードベースのキー派生関数 2) でパスワードを処理するときに、UTF-8 以外のテキストエンコードを使用する他のシステムとの互換性が確保されます。</span><span class="sxs-lookup"><span data-stu-id="39aad-121">This enables compatibility with other systems which use a text encoding other than UTF-8 when processing passwords with PBKDF2 (Password-Based Key Derivation Function 2).</span></span>

 <span data-ttu-id="39aad-122">`safeContents` の内容は、このメソッドの呼び出し中に読み取られ、暗号化され、内部的に暗号化されたコンテンツとして格納されます。</span><span class="sxs-lookup"><span data-stu-id="39aad-122">The contents of `safeContents` are read during the call to this method, encrypted, and stored internally as encrypted content.</span></span>
<span data-ttu-id="39aad-123"><xref:System.Security.Cryptography.Pkcs.Pkcs12SafeContents> またはこのメソッドの呼び出し後に参照された <xref:System.Security.Cryptography.Pkcs.Pkcs12SafeBag> に対する変更は、最終的な出力には反映されません。</span><span class="sxs-lookup"><span data-stu-id="39aad-123">Any changes to the <xref:System.Security.Cryptography.Pkcs.Pkcs12SafeContents> or any <xref:System.Security.Cryptography.Pkcs.Pkcs12SafeBag> it references made after this method call are not reflected in the final output.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39aad-124"><paramref name="safeContents" /> パラメーターまたは <paramref name="pbeParameters" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39aad-124">The <paramref name="safeContents" /> or <paramref name="pbeParameters" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="39aad-125"><paramref name="safeContents" /> パラメーター値は既に暗号化済みです。</span><span class="sxs-lookup"><span data-stu-id="39aad-125">The <paramref name="safeContents" /> parameter value is already encrypted.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="39aad-126">PFX は既に封印されています (<see cref="P:System.Security.Cryptography.Pkcs.Pkcs12Builder.IsSealed" /> は<see langword="true" />)。</span><span class="sxs-lookup"><span data-stu-id="39aad-126">The PFX is already sealed (<see cref="P:System.Security.Cryptography.Pkcs.Pkcs12Builder.IsSealed" /> is <see langword="true" />).</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="39aad-127"><paramref name="pbeParameters" /> は、<see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" /> ベースのパスワードを必要とする <see cref="T:System.Char" /> を使用する必要があることを示しています。</span><span class="sxs-lookup"><span data-stu-id="39aad-127"><paramref name="pbeParameters" /> indicates that <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" /> should be used, which requires <see cref="T:System.Char" />-based passwords.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AddSafeContentsEncrypted">
      <MemberSignature Language="C#" Value="public void AddSafeContentsEncrypted (System.Security.Cryptography.Pkcs.Pkcs12SafeContents safeContents, ReadOnlySpan&lt;char&gt; password, System.Security.Cryptography.PbeParameters pbeParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddSafeContentsEncrypted(class System.Security.Cryptography.Pkcs.Pkcs12SafeContents safeContents, valuetype System.ReadOnlySpan`1&lt;char&gt; password, class System.Security.Cryptography.PbeParameters pbeParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Pkcs12Builder.AddSafeContentsEncrypted(System.Security.Cryptography.Pkcs.Pkcs12SafeContents,System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddSafeContentsEncrypted(System::Security::Cryptography::Pkcs::Pkcs12SafeContents ^ safeContents, ReadOnlySpan&lt;char&gt; password, System::Security::Cryptography::PbeParameters ^ pbeParameters);" />
      <MemberSignature Language="F#" Value="member this.AddSafeContentsEncrypted : System.Security.Cryptography.Pkcs.Pkcs12SafeContents * ReadOnlySpan&lt;char&gt; * System.Security.Cryptography.PbeParameters -&gt; unit" Usage="pkcs12Builder.AddSafeContentsEncrypted (safeContents, password, pbeParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="safeContents" Type="System.Security.Cryptography.Pkcs.Pkcs12SafeContents" />
        <Parameter Name="password" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="pbeParameters" Type="System.Security.Cryptography.PbeParameters" />
      </Parameters>
      <Docs>
        <param name="safeContents"><span data-ttu-id="39aad-128">PFX に追加するコンテンツ。</span><span class="sxs-lookup"><span data-stu-id="39aad-128">The contents to add to the PFX.</span></span></param>
        <param name="password"><span data-ttu-id="39aad-129">コンテンツを暗号化するときにパスワードとして使用するスパン。</span><span class="sxs-lookup"><span data-stu-id="39aad-129">The span to use as a password when encrypting the contents.</span></span></param>
        <param name="pbeParameters"><span data-ttu-id="39aad-130">コンテンツを暗号化するときに使用する、パスワードベースの暗号化 (PBE) パラメーター。</span><span class="sxs-lookup"><span data-stu-id="39aad-130">The password-based encryption (PBE) parameters to use when encrypting the contents.</span></span></param>
        <summary><span data-ttu-id="39aad-131">PFX に、スパンから文字列ベースのパスワードを使用して暗号化されたコンテンツを、一括で追加します。</span><span class="sxs-lookup"><span data-stu-id="39aad-131">Add contents to the PFX in an bundle encrypted with a char-based password from a span.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39aad-132">`pbeParameters` が、PBKDF2 (パスワードベースのキー派生関数 2) を使用するアルゴリズムを示している場合、パスワードは UTF-8 エンコードを使用してバイトに変換されます。</span><span class="sxs-lookup"><span data-stu-id="39aad-132">When `pbeParameters` indicates an algorithm that uses PBKDF2 (Password-Based Key Derivation Function 2), the password is converted to bytes via the UTF-8 encoding.</span></span>

 <span data-ttu-id="39aad-133">`safeContents` の内容は、このメソッドの呼び出し中に読み取られ、暗号化され、内部的に暗号化されたコンテンツとして格納されます。</span><span class="sxs-lookup"><span data-stu-id="39aad-133">The contents of `safeContents` are read during the call to this method, encrypted, and stored internally as encrypted content.</span></span>
<span data-ttu-id="39aad-134"><xref:System.Security.Cryptography.Pkcs.Pkcs12SafeContents> またはこのメソッドの呼び出し後に参照された <xref:System.Security.Cryptography.Pkcs.Pkcs12SafeBag> に対する変更は、最終的な出力には反映されません。</span><span class="sxs-lookup"><span data-stu-id="39aad-134">Any changes to the <xref:System.Security.Cryptography.Pkcs.Pkcs12SafeContents> or any <xref:System.Security.Cryptography.Pkcs.Pkcs12SafeBag> it references made after this method call are not reflected in the final output.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39aad-135"><paramref name="safeContents" /> パラメーターまたは <paramref name="pbeParameters" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39aad-135">The <paramref name="safeContents" /> or <paramref name="pbeParameters" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="39aad-136"><paramref name="safeContents" /> パラメーター値は既に暗号化済みです。</span><span class="sxs-lookup"><span data-stu-id="39aad-136">The <paramref name="safeContents" /> parameter value is already encrypted.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="39aad-137">PFX は既に封印されています (<see cref="P:System.Security.Cryptography.Pkcs.Pkcs12Builder.IsSealed" /> は<see langword="true" />)。</span><span class="sxs-lookup"><span data-stu-id="39aad-137">The PFX is already sealed (<see cref="P:System.Security.Cryptography.Pkcs.Pkcs12Builder.IsSealed" /> is <see langword="true" />).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AddSafeContentsEncrypted">
      <MemberSignature Language="C#" Value="public void AddSafeContentsEncrypted (System.Security.Cryptography.Pkcs.Pkcs12SafeContents safeContents, string password, System.Security.Cryptography.PbeParameters pbeParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddSafeContentsEncrypted(class System.Security.Cryptography.Pkcs.Pkcs12SafeContents safeContents, string password, class System.Security.Cryptography.PbeParameters pbeParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Pkcs12Builder.AddSafeContentsEncrypted(System.Security.Cryptography.Pkcs.Pkcs12SafeContents,System.String,System.Security.Cryptography.PbeParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddSafeContentsEncrypted(System::Security::Cryptography::Pkcs::Pkcs12SafeContents ^ safeContents, System::String ^ password, System::Security::Cryptography::PbeParameters ^ pbeParameters);" />
      <MemberSignature Language="F#" Value="member this.AddSafeContentsEncrypted : System.Security.Cryptography.Pkcs.Pkcs12SafeContents * string * System.Security.Cryptography.PbeParameters -&gt; unit" Usage="pkcs12Builder.AddSafeContentsEncrypted (safeContents, password, pbeParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="safeContents" Type="System.Security.Cryptography.Pkcs.Pkcs12SafeContents" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="pbeParameters" Type="System.Security.Cryptography.PbeParameters" />
      </Parameters>
      <Docs>
        <param name="safeContents"><span data-ttu-id="39aad-138">PFX に追加するコンテンツ。</span><span class="sxs-lookup"><span data-stu-id="39aad-138">The contents to add to the PFX.</span></span></param>
        <param name="password"><span data-ttu-id="39aad-139">コンテンツを暗号化するときにパスワードとして使用する文字列。</span><span class="sxs-lookup"><span data-stu-id="39aad-139">The string to use as a password when encrypting the contents.</span></span></param>
        <param name="pbeParameters"><span data-ttu-id="39aad-140">コンテンツを暗号化するときに使用する、パスワードベースの暗号化 (PBE) パラメーター。</span><span class="sxs-lookup"><span data-stu-id="39aad-140">The password-based encryption (PBE) parameters to use when encrypting the contents.</span></span></param>
        <summary><span data-ttu-id="39aad-141">PFX に、文字列から文字列ベースのパスワードを使用して暗号化されたコンテンツを、一括で追加します。</span><span class="sxs-lookup"><span data-stu-id="39aad-141">Add contents to the PFX in an bundle encrypted with a char-based password from a string.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39aad-142">`pbeParameters` が、PBKDF2 (パスワードベースのキー派生関数 2) を使用するアルゴリズムを示している場合、パスワードは UTF-8 エンコードを使用してバイトに変換されます。</span><span class="sxs-lookup"><span data-stu-id="39aad-142">When `pbeParameters` indicates an algorithm that uses PBKDF2 (Password-Based Key Derivation Function 2), the password is converted to bytes via the UTF-8 encoding.</span></span>

 <span data-ttu-id="39aad-143">`safeContents` の内容は、このメソッドの呼び出し中に読み取られ、暗号化され、内部的に暗号化されたコンテンツとして格納されます。</span><span class="sxs-lookup"><span data-stu-id="39aad-143">The contents of `safeContents` are read during the call to this method, encrypted, and stored internally as encrypted content.</span></span>
<span data-ttu-id="39aad-144"><xref:System.Security.Cryptography.Pkcs.Pkcs12SafeContents> またはこのメソッドの呼び出し後に参照された <xref:System.Security.Cryptography.Pkcs.Pkcs12SafeBag> に対する変更は、最終的な出力には反映されません。</span><span class="sxs-lookup"><span data-stu-id="39aad-144">Any changes to the <xref:System.Security.Cryptography.Pkcs.Pkcs12SafeContents> or any <xref:System.Security.Cryptography.Pkcs.Pkcs12SafeBag> it references made after this method call are not reflected in the final output.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39aad-145"><paramref name="safeContents" /> パラメーターまたは <paramref name="pbeParameters" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39aad-145">The <paramref name="safeContents" /> or <paramref name="pbeParameters" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="39aad-146"><paramref name="safeContents" /> パラメーター値は既に暗号化済みです。</span><span class="sxs-lookup"><span data-stu-id="39aad-146">The <paramref name="safeContents" /> parameter value is already encrypted.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="39aad-147">PFX は既に封印されています (<see cref="P:System.Security.Cryptography.Pkcs.Pkcs12Builder.IsSealed" /> は<see langword="true" />)。</span><span class="sxs-lookup"><span data-stu-id="39aad-147">The PFX is already sealed (<see cref="P:System.Security.Cryptography.Pkcs.Pkcs12Builder.IsSealed" /> is <see langword="true" />).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AddSafeContentsUnencrypted">
      <MemberSignature Language="C#" Value="public void AddSafeContentsUnencrypted (System.Security.Cryptography.Pkcs.Pkcs12SafeContents safeContents);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddSafeContentsUnencrypted(class System.Security.Cryptography.Pkcs.Pkcs12SafeContents safeContents) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Pkcs12Builder.AddSafeContentsUnencrypted(System.Security.Cryptography.Pkcs.Pkcs12SafeContents)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddSafeContentsUnencrypted (safeContents As Pkcs12SafeContents)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddSafeContentsUnencrypted(System::Security::Cryptography::Pkcs::Pkcs12SafeContents ^ safeContents);" />
      <MemberSignature Language="F#" Value="member this.AddSafeContentsUnencrypted : System.Security.Cryptography.Pkcs.Pkcs12SafeContents -&gt; unit" Usage="pkcs12Builder.AddSafeContentsUnencrypted safeContents" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="safeContents" Type="System.Security.Cryptography.Pkcs.Pkcs12SafeContents" />
      </Parameters>
      <Docs>
        <param name="safeContents"><span data-ttu-id="39aad-148">PFX に追加するコンテンツ。</span><span class="sxs-lookup"><span data-stu-id="39aad-148">The contents to add to the PFX.</span></span></param>
        <summary><span data-ttu-id="39aad-149">PFX には暗号化せずにコンテンツを追加します。</span><span class="sxs-lookup"><span data-stu-id="39aad-149">Add contents to the PFX without encrypting them.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39aad-150">`safeContents` 値が既に暗号化されている場合、このメソッドはその値をその状態の PFX に追加します。</span><span class="sxs-lookup"><span data-stu-id="39aad-150">If the `safeContents` value is already encrypted, this method adds it to the PFX as-is.</span></span>

 <span data-ttu-id="39aad-151">`safeContents` の内容は、このメソッドの呼び出し中に読み取られ、内部的にエンコード形式のコンテンツとして格納されます。</span><span class="sxs-lookup"><span data-stu-id="39aad-151">The contents of `safeContents` are read during the call to this method, and stored internally as the encoded form of their content.</span></span>
<span data-ttu-id="39aad-152"><xref:System.Security.Cryptography.Pkcs.Pkcs12SafeContents> またはこのメソッドの呼び出し後に参照された <xref:System.Security.Cryptography.Pkcs.Pkcs12SafeBag> に対する変更は、最終的な出力には反映されません。</span><span class="sxs-lookup"><span data-stu-id="39aad-152">Any changes to the <xref:System.Security.Cryptography.Pkcs.Pkcs12SafeContents> or any <xref:System.Security.Cryptography.Pkcs.Pkcs12SafeBag> it references made after this method call are not reflected in the final output.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39aad-153"><paramref name="safeContents" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39aad-153">The <paramref name="safeContents" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="39aad-154">PFX は既に封印されています (<see cref="P:System.Security.Cryptography.Pkcs.Pkcs12Builder.IsSealed" /> は<see langword="true" />)。</span><span class="sxs-lookup"><span data-stu-id="39aad-154">The PFX is already sealed (<see cref="P:System.Security.Cryptography.Pkcs.Pkcs12Builder.IsSealed" /> is <see langword="true" />).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Encode">
      <MemberSignature Language="C#" Value="public byte[] Encode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Encode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Pkcs12Builder.Encode" />
      <MemberSignature Language="VB.NET" Value="Public Function Encode () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ Encode();" />
      <MemberSignature Language="F#" Value="member this.Encode : unit -&gt; byte[]" Usage="pkcs12Builder.Encode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="39aad-155">封印された PFX のコンテンツをエンコードし、それをバイト配列として返します。</span><span class="sxs-lookup"><span data-stu-id="39aad-155">Encodes the contents of a sealed PFX and returns it as a byte array.</span></span></summary>
        <returns><span data-ttu-id="39aad-156">PFX のエンコードされた形式を表すバイト配列。</span><span class="sxs-lookup"><span data-stu-id="39aad-156">A byte array representing the encoded form of the PFX.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="Overload:System.Security.Cryptography.Pkcs.Pkcs12Builder.SealWithMac" />
        <altmember cref="M:System.Security.Cryptography.Pkcs.Pkcs12Builder.SealWithoutIntegrity" />
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="39aad-157">PFX は封印されていません (<see cref="P:System.Security.Cryptography.Pkcs.Pkcs12Builder.IsSealed" /> は <see langword="false" />)。</span><span class="sxs-lookup"><span data-stu-id="39aad-157">The PFX is not sealed (<see cref="P:System.Security.Cryptography.Pkcs.Pkcs12Builder.IsSealed" /> is <see langword="false" />).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Pkcs.Pkcs12Builder.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSealed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSealed : bool" Usage="System.Security.Cryptography.Pkcs.Pkcs12Builder.IsSealed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="39aad-158">PFX データが封印されているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="39aad-158">Gets a value that indicates whether the PFX data has been sealed.</span></span></summary>
        <value><span data-ttu-id="39aad-159">PFX データが封印されているかどうかを示す値。</span><span class="sxs-lookup"><span data-stu-id="39aad-159">A value that indicates whether the PFX data has been sealed.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="Overload:System.Security.Cryptography.Pkcs.Pkcs12Builder.SealWithMac" />
        <altmember cref="M:System.Security.Cryptography.Pkcs.Pkcs12Builder.SealWithoutIntegrity" />
      </Docs>
    </Member>
    <Member MemberName="SealWithMac">
      <MemberSignature Language="C#" Value="public void SealWithMac (ReadOnlySpan&lt;char&gt; password, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, int iterationCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SealWithMac(valuetype System.ReadOnlySpan`1&lt;char&gt; password, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, int32 iterationCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Pkcs12Builder.SealWithMac(System.ReadOnlySpan{System.Char},System.Security.Cryptography.HashAlgorithmName,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SealWithMac (password As ReadOnlySpan(Of Char), hashAlgorithm As HashAlgorithmName, iterationCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SealWithMac(ReadOnlySpan&lt;char&gt; password, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, int iterationCount);" />
      <MemberSignature Language="F#" Value="member this.SealWithMac : ReadOnlySpan&lt;char&gt; * System.Security.Cryptography.HashAlgorithmName * int -&gt; unit" Usage="pkcs12Builder.SealWithMac (password, hashAlgorithm, iterationCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="password" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
        <Parameter Name="iterationCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="39aad-160">MAC の計算のキーとして使用するパスワード。</span><span class="sxs-lookup"><span data-stu-id="39aad-160">The password to use as a key for computing the MAC.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="39aad-161">MAC の計算で使用するハッシュ アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="39aad-161">The hash algorithm to use when computing the MAC.</span></span></param>
        <param name="iterationCount"><span data-ttu-id="39aad-162">MAC の計算で使用されるキー派生関数 (KDF) の反復回数。</span><span class="sxs-lookup"><span data-stu-id="39aad-162">The iteration count for the Key Derivation Function (KDF) used in computing the MAC.</span></span></param>
        <summary><span data-ttu-id="39aad-163">スパンからのパスワードを使用し、パスワードベースのメッセージ認証コード (MAC) をコンテンツに適用することによって、これ以上変更されないように PFX を封印します。</span><span class="sxs-lookup"><span data-stu-id="39aad-163">Seals the PFX against further changes by applying a password-based Message Authentication Code (MAC) over the contents with a password from a span.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

 <span data-ttu-id="39aad-164">このメソッドが受け入れるハッシュアルゴリズムは、<xref:System.Security.Cryptography.Pkcs.Pkcs12Info> クラスによって処理できます。</span><span class="sxs-lookup"><span data-stu-id="39aad-164">Any hash algorithm that this method accepts can be processed by the <xref:System.Security.Cryptography.Pkcs.Pkcs12Info> class.</span></span>
<span data-ttu-id="39aad-165">一部のハッシュアルゴリズムでは、サポートのためにシステムライブラリに依存しているため、一部のオペレーティングシステムで <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.%23ctor%2A> または <xref:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Import%2A?displayProperty=nameWithType> でエラーが発生することがあります。</span><span class="sxs-lookup"><span data-stu-id="39aad-165">Some choices of hash algorithm may cause failures in <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.%23ctor%2A> or <xref:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Import%2A?displayProperty=nameWithType> on some operating systems, because these methods depend on system libraries for support.</span></span>

 <span data-ttu-id="39aad-166"><xref:System.Security.Cryptography.X509Certificates.X509Certificate.Export%2A?displayProperty=nameWithtype> 経由で PKCS # 12 PFX としてエクスポートするときに Windows 7 の新規インストールで使用されるハッシュアルゴリズムは、イテレーション数が2000で <xref:System.Security.Cryptography.HashAlgorithmName.SHA1> ます。</span><span class="sxs-lookup"><span data-stu-id="39aad-166">The hash algorithm used on a fresh installation of Windows 7 when exporting via <xref:System.Security.Cryptography.X509Certificates.X509Certificate.Export%2A?displayProperty=nameWithtype> as a PKCS#12 PFX is <xref:System.Security.Cryptography.HashAlgorithmName.SHA1> with an iteration count of 2000.</span></span>
<span data-ttu-id="39aad-167">SHA1 の衝突の問題により、Microsoft では SHA256 以上に基づくセキュリティモデルを推奨しています。ただし、一部の PFX リーダーでは SHA1 のみがサポートされます。</span><span class="sxs-lookup"><span data-stu-id="39aad-167">Due to collision problems with SHA1, Microsoft recommends a security model based on SHA256 or better; however, some PFX readers may only support SHA1.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="39aad-168"><paramref name="iterationCount" /> パラメーターが 0 以下です。</span><span class="sxs-lookup"><span data-stu-id="39aad-168">The <paramref name="iterationCount" /> parameter is less than or equal to 0.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="39aad-169">PFX は既に封印されています (<see cref="P:System.Security.Cryptography.Pkcs.Pkcs12Builder.IsSealed" /> は<see langword="true" />)。</span><span class="sxs-lookup"><span data-stu-id="39aad-169">The PFX is already sealed (<see cref="P:System.Security.Cryptography.Pkcs.Pkcs12Builder.IsSealed" /> is <see langword="true" />).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SealWithMac">
      <MemberSignature Language="C#" Value="public void SealWithMac (string password, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, int iterationCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SealWithMac(string password, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, int32 iterationCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Pkcs12Builder.SealWithMac(System.String,System.Security.Cryptography.HashAlgorithmName,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SealWithMac (password As String, hashAlgorithm As HashAlgorithmName, iterationCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SealWithMac(System::String ^ password, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, int iterationCount);" />
      <MemberSignature Language="F#" Value="member this.SealWithMac : string * System.Security.Cryptography.HashAlgorithmName * int -&gt; unit" Usage="pkcs12Builder.SealWithMac (password, hashAlgorithm, iterationCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
        <Parameter Name="iterationCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="39aad-170">MAC の計算のキーとして使用するパスワード。</span><span class="sxs-lookup"><span data-stu-id="39aad-170">The password to use as a key for computing the MAC.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="39aad-171">MAC の計算で使用するハッシュ アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="39aad-171">The hash algorithm to use when computing the MAC.</span></span></param>
        <param name="iterationCount"><span data-ttu-id="39aad-172">MAC の計算で使用されるキー派生関数 (KDF) の反復回数。</span><span class="sxs-lookup"><span data-stu-id="39aad-172">The iteration count for the Key Derivation Function (KDF) used in computing the MAC.</span></span></param>
        <summary><span data-ttu-id="39aad-173">文字列からのパスワードを使用し、パスワードベースのメッセージ認証コード (MAC) を、コンテンツに適用することによって、これ以上変更されないように PFX を封印します。</span><span class="sxs-lookup"><span data-stu-id="39aad-173">Seals the PFX against further changes by applying a password-based Message Authentication Code (MAC) over the contents with a password from a string.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

 <span data-ttu-id="39aad-174">このメソッドが受け入れるハッシュアルゴリズムは、<xref:System.Security.Cryptography.Pkcs.Pkcs12Info> クラスによって処理できます。</span><span class="sxs-lookup"><span data-stu-id="39aad-174">Any hash algorithm that this method accepts can be processed by the <xref:System.Security.Cryptography.Pkcs.Pkcs12Info> class.</span></span>
<span data-ttu-id="39aad-175">一部のハッシュアルゴリズムでは、サポートのためにシステムライブラリに依存しているため、一部のオペレーティングシステムで <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.%23ctor%2A> または <xref:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Import%2A?displayProperty=nameWithType> でエラーが発生することがあります。</span><span class="sxs-lookup"><span data-stu-id="39aad-175">Some choices of hash algorithm may cause failures in <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.%23ctor%2A> or <xref:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Import%2A?displayProperty=nameWithType> on some operating systems, because these methods depend on system libraries for support.</span></span>

 <span data-ttu-id="39aad-176"><xref:System.Security.Cryptography.X509Certificates.X509Certificate.Export%2A?displayProperty=nameWithType> 経由で PKCS # 12 PFX としてエクスポートするときに Windows 7 の新規インストールで使用されるハッシュアルゴリズムは、イテレーション数が2000で <xref:System.Security.Cryptography.HashAlgorithmName.SHA1> ます。</span><span class="sxs-lookup"><span data-stu-id="39aad-176">The hash algorithm used on a fresh installation of Windows 7 when exporting via <xref:System.Security.Cryptography.X509Certificates.X509Certificate.Export%2A?displayProperty=nameWithType> as a PKCS#12 PFX is <xref:System.Security.Cryptography.HashAlgorithmName.SHA1> with an iteration count of 2000.</span></span>
<span data-ttu-id="39aad-177">SHA1 の衝突の問題により、Microsoft では SHA256 以上に基づくセキュリティモデルを推奨しています。ただし、一部の PFX リーダーでは SHA1 のみがサポートされます。</span><span class="sxs-lookup"><span data-stu-id="39aad-177">Due to collision problems with SHA1, Microsoft recommends a security model based on SHA256 or better; however, some PFX readers may only support SHA1.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="39aad-178"><paramref name="iterationCount" /> パラメーターが 0 以下です。</span><span class="sxs-lookup"><span data-stu-id="39aad-178">The <paramref name="iterationCount" /> parameter is less than or equal to 0.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="39aad-179">PFX は既に封印されています (<see cref="P:System.Security.Cryptography.Pkcs.Pkcs12Builder.IsSealed" /> は<see langword="true" />)。</span><span class="sxs-lookup"><span data-stu-id="39aad-179">The PFX is already sealed (<see cref="P:System.Security.Cryptography.Pkcs.Pkcs12Builder.IsSealed" /> is <see langword="true" />).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SealWithoutIntegrity">
      <MemberSignature Language="C#" Value="public void SealWithoutIntegrity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SealWithoutIntegrity() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Pkcs12Builder.SealWithoutIntegrity" />
      <MemberSignature Language="VB.NET" Value="Public Sub SealWithoutIntegrity ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SealWithoutIntegrity();" />
      <MemberSignature Language="F#" Value="member this.SealWithoutIntegrity : unit -&gt; unit" Usage="pkcs12Builder.SealWithoutIntegrity " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="39aad-180">改ざん防止を適用せずに、これ以上変更されないように PFX を封印します。</span><span class="sxs-lookup"><span data-stu-id="39aad-180">Seals the PFX from further changes without applying tamper-protection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

 <span data-ttu-id="39aad-181">このメソッドは、PKCS # 12 仕様との互換性を維持するために存在しますが、テスト以外の目的では使用しないことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="39aad-181">This method exists for compatibility with the PKCS#12 specification, but its use is not recommended for purposes other than testing.</span></span>
<span data-ttu-id="39aad-182">パスワードパラメーターを受け入れない <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.%23ctor%2A> または <xref:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Import%2A?displayProperty=nameWithType> のオーバーロードで使用できる PFX を構築する場合は、パスワードとして <xref:System.String.Empty?displayProperty=nameWithType> に <xref:System.Security.Cryptography.Pkcs.Pkcs12Builder.SealWithMac(System.String,System.Security.Cryptography.HashAlgorithmName,System.Int32)> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="39aad-182">When building a PFX that can be used by the overloads of <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.%23ctor%2A> or <xref:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Import%2A?displayProperty=nameWithType> which do not accept a password parameter, use the <xref:System.Security.Cryptography.Pkcs.Pkcs12Builder.SealWithMac(System.String,System.Security.Cryptography.HashAlgorithmName,System.Int32)> method with <xref:System.String.Empty?displayProperty=nameWithType> as the password.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="39aad-183">PFX は既に封印されています (<see cref="P:System.Security.Cryptography.Pkcs.Pkcs12Builder.IsSealed" /> は<see langword="true" />)。</span><span class="sxs-lookup"><span data-stu-id="39aad-183">The PFX is already sealed (<see cref="P:System.Security.Cryptography.Pkcs.Pkcs12Builder.IsSealed" /> is <see langword="true" />).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryEncode">
      <MemberSignature Language="C#" Value="public bool TryEncode (Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEncode(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Pkcs12Builder.TryEncode(System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEncode (destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEncode(Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="member this.TryEncode : Span&lt;byte&gt; * int -&gt; bool" Usage="pkcs12Builder.TryEncode (destination, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="39aad-184">PKCS#12 PFX データを受け取るバイト スパン。</span><span class="sxs-lookup"><span data-stu-id="39aad-184">The byte span to receive the PKCS#12 PFX data.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="39aad-185">このメソッドから制御が戻ったときに、<paramref name="destination" /> に書き込まれたバイト数を示す値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="39aad-185">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />.</span></span> <span data-ttu-id="39aad-186">このパラメーターは未初期化として扱われます。</span><span class="sxs-lookup"><span data-stu-id="39aad-186">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="39aad-187">指定したバッファーへの封印された PFX のコンテンツのエンコードが試行されます。</span><span class="sxs-lookup"><span data-stu-id="39aad-187">Attempts to encode the contents of a sealed PFX into a provided buffer.</span></span></summary>
        <returns><span data-ttu-id="39aad-188"><see langword="true" /> が出力を受け入れるだけの十分な大きさの場合は <paramref name="destination" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="39aad-188"><see langword="true" /> if <paramref name="destination" /> is big enough to receive the output; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="39aad-189">PFX は封印されていません (<see cref="P:System.Security.Cryptography.Pkcs.Pkcs12Builder.IsSealed" /> は <see langword="false" />)。</span><span class="sxs-lookup"><span data-stu-id="39aad-189">The PFX is not sealed (<see cref="P:System.Security.Cryptography.Pkcs.Pkcs12Builder.IsSealed" /> is <see langword="false" />).</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
