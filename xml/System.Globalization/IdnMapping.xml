<Type Name="IdnMapping" FullName="System.Globalization.IdnMapping">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5fcd7bb3cda4a0347bbb2b7732b4b729cd305b2d" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75133688" /></Metadata><TypeSignature Language="C#" Value="public sealed class IdnMapping" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit IdnMapping extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.IdnMapping" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class IdnMapping" />
  <TypeSignature Language="C++ CLI" Value="public ref class IdnMapping sealed" />
  <TypeSignature Language="F#" Value="type IdnMapping = class" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>インターネット ドメイン名の非 ASCII 文字の使用をサポートします。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 インターネットドメイン名は、ドメイン名ラベルと呼ばれる1つ以上の部分で構成され、ラベル区切り記号で区切られます。 たとえば、ドメイン名 "www.proseware.com" は、ピリオドで区切られたラベル "www"、""、および "com" で構成されます。 標準ドメイン名は、U + 0021 から U + 007E までの、US-ASCII (または基本的なラテン) 文字範囲内の指定された文字で構成されます。 Us-ascii 文字セットを使用しないカルチャでのインターネットの使用を容易にするために、us-ascii 文字の範囲外の Unicode 文字のインクルードをサポートするために、アプリケーションの国際化ドメイン名 (IDNA) 標準が2003で採用されています。 ただし、ネームサーバーとドメイン名解決は、引き続き US-ASCII 文字範囲内の文字に依存します。  
  
 IDNA メカニズムでは、Punycode を使用して、US-ASCII 文字範囲外の Unicode 文字を含む国際化ドメイン名を、ドメインネームシステムでサポートされている US-ASCII 文字範囲にマップします。 IDNA メカニズムは、インターネットを介して送信されるデータではなく、ドメイン名の変換にのみ使用されます。  
  
> [!IMPORTANT]
>  [!INCLUDE[net_v45](~/includes/net-v45-md.md)]では、<xref:System.Globalization.IdnMapping> クラスは、使用しているオペレーティングシステムに応じて、IDNA 標準のさまざまなバージョンをサポートしています。  
>   
> - [!INCLUDE[win8](~/includes/win8-md.md)]で実行した場合、 [RFC 5891: 「アプリケーションでの国際化ドメイン名 (idna): プロトコル」](https://go.microsoft.com/fwlink/?LinkId=231875)に記載されている2008バージョンの idna 標準がサポートされます。
> - 以前のバージョンの Windows オペレーティングシステムで実行されている場合、RFC 3490 によって概要が示されている標準の2003バージョン[(IDNA)](https://go.microsoft.com/fwlink/?LinkId=158110)がサポートされています。
>   
>  これらの基準が特定の文字セットを処理する方法の違いについては、「 [Unicode Technical Standard #46: IDNA 互換性処理](https://go.microsoft.com/fwlink/?LinkId=232459)」を参照してください。  
  
 <xref:System.Globalization.IdnMapping.GetAscii%2A?displayProperty=nameWithType> メソッドは、ドメイン名を正規化し、正規化された名前を、us-ascii コードポイント範囲 (U + 0020 から U + 007E) の表示可能な Unicode 文字で構成される表現に変換し、各ラベルに ASCII 互換エンコード (ACE) プレフィックス ("xn") を付加します。 <xref:System.Globalization.IdnMapping.GetUnicode%2A?displayProperty=nameWithType> メソッドは、<xref:System.Globalization.IdnMapping.GetAscii%2A> メソッドによって変換されたドメイン名ラベルを復元します。  
  
 変換する文字列にラベルの区切り文字 (U + 3002)、全角 FULL STOP (U + FF0E)、および半角表意文字の完全停止 (U + FF61) が含まれている場合は、<xref:System.Globalization.IdnMapping.GetAscii%2A> メソッドによって、それらの区切り記号が完全停止 (ピリオド、U + 002E) に変換されます。 ただし、<xref:System.Globalization.IdnMapping.GetUnicode%2A> メソッドでは、元のラベル区切り文字は復元されません。  
  
   
  
## Examples  
 次の例では、<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29> メソッドを使用して、国際化ドメイン名の配列を Punycode に変換します。 <xref:System.Globalization.IdnMapping.GetUnicode%2A> メソッドは、Punycode のドメイン名を元のドメイン名に戻しますが、元のラベルの区切り記号は標準のラベルの区切り記号に置き換えます。  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><see cref="T:System.Globalization.IdnMapping" /> のすべてのパブリックメソッドはスレッドセーフであり、<see cref="T:System.Globalization.IdnMapping" /> インスタンスのプロパティも同時に設定されていない限り、複数のスレッドから同時に使用することができます。</threadsafe>
    <altmember cref="Overload:System.String.Normalize" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IdnMapping ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IdnMapping();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Globalization.IdnMapping" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.IdnMapping.AllowUnassigned%2A?displayProperty=nameWithType> プロパティと <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A?displayProperty=nameWithType> プロパティは `false`に初期化されます。 A-Z、0-9、ハイフン (-) 文字 (U + 002D)、ピリオド (.) 文字以外の ASCII 文字の小さなサブセットは、ドメイン名で使用できますが、割り当てられていない Unicode コードポイントは使用できません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowUnassigned">
      <MemberSignature Language="C#" Value="public bool AllowUnassigned { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowUnassigned" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.IdnMapping.AllowUnassigned" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowUnassigned As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowUnassigned { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowUnassigned : bool with get, set" Usage="System.Globalization.IdnMapping.AllowUnassigned" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>未割り当ての Unicode コード ポイントが現在の <see cref="T:System.Globalization.IdnMapping" /> オブジェクトのメンバーによって実行される操作内で使用されるかどうかを示す値を取得または設定します。</summary>
        <value>未割り当てのコード ポイントが操作内で使用される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 登録されたドメイン名に未割り当てのコードポイントを含めることはできません。 その結果、<xref:System.Globalization.IdnMapping.AllowUnassigned%2A> プロパティの既定値は `false`になります。 IDNA 仕様では、一致しないコードポイントだけが、一致する文字列 (ドメイン名の参照) に対するクエリでのみ許可されます。 ドメイン名に割り当てられていないコードポイントの使用の詳細については、 [rfc 3454 の「国際化文字列の準備 (stringprep)」](https://go.microsoft.com/fwlink/?LinkId=231873)および[rfc 5891 の「アプリケーションでの国際化ドメイン名 (idna): Protocol」](https://go.microsoft.com/fwlink/?LinkId=231875)を参照してください。  
  
> [!IMPORTANT]
>  <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> プロパティが `false`の場合、プロパティに関連付けられている動作は、基になるオペレーティングシステムによって異なります。 [!INCLUDE[win8](~/includes/win8-md.md)]では、<xref:System.Globalization.IdnMapping> クラスは、Unicode 6.0 標準に基づく IDNA 2008 に準拠しています。 以前のバージョンの Windows では、<xref:System.Globalization.IdnMapping> クラスは、Unicode 3 に基づく IDNA 2003 をベースにしています。*x*。 IDNA 2003 で割り当てが解除されたコードポイントには、IDNA 2008 でサポートされている文字が割り当てられています。 たとえば、U + 0221 は Unicode 4.0 で導入されました。 [!INCLUDE[win8](~/includes/win8-md.md)]では、"xn — 6la" としてエンコードされます。 以前のバージョンの Windows では、<xref:System.ArgumentException> 例外がスローされます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="idnMapping.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">現在のオブジェクトと比較する対象のオブジェクト。</param>
        <summary>指定したオブジェクトが現在の <see cref="T:System.Globalization.IdnMapping" /> オブジェクトと等しいかどうかを示します。</summary>
        <returns><see langword="true" /> パラメーターにより指定されたオブジェクトが <paramref name="obj" /> から派生していて、その <see cref="T:System.Globalization.IdnMapping" /> と <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> プロパティが等しく、オブジェクトが指定されている場合は <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" />、それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAscii">
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>US-ASCII 文字の範囲外の Unicode 文字を含むドメイン名ラベルの文字列を、US-ASCII 文字範囲 (U+0020 から U+007E) の表示可能な Unicode 文字から構成される文字列にエンコードします。 文字列は IDNA 標準に従って書式設定されます。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string -&gt; string" Usage="idnMapping.GetAscii unicode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="unicode">ラベル区切り記号で区切られた 1 つまたは複数のドメイン名ラベルから構成される、変換対象の入力文字列。</param>
        <summary>Unicode 文字から構成されるドメイン名ラベルの文字列を、US-ASCII 文字範囲の表示可能な Unicode 文字から構成される文字列にエンコードします。 文字列は IDNA 標準に従って書式設定されます。</summary>
        <returns><paramref name="unicode" /> パラメーターによって指定された文字列に対応する、US-ASCII 文字範囲 (U+0020 から U+007E) の表示可能な Unicode 文字から構成され、IDNA 標準に従って書式化された文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `unicode` パラメーターは、有効な Unicode 文字で構成される1つ以上のラベルの文字列を指定します。 ラベルは、ラベル区切り記号で区切られます。 `unicode` パラメーターは、ラベルの区切り記号で始めることはできませんが、含めることができます。また、必要に応じて区切り記号で終了することもできます。 ラベルの区切り記号は、FULL STOP (period, U + 002E)、表意文字 FULL STOP (U + 3002)、全角 FULL STOP (U + FF0E)、および半角表意文字の完全停止 (U + FF61) です。 たとえば、ドメイン名 "www.adatum.com" は、ピリオドで区切られたラベル "www"、"adatum"、および "com" で構成されます。  
  
 ラベルには、次の文字を含めることはできません。  
  
-   U + 0001 から U + 001F までの Unicode 制御文字と U + 007F。  
  
-   <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> プロパティの値が `false`場合は、未割り当ての Unicode 文字。  
  
-   0020プロパティ <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> の値が `true`場合は、スペース (U +)、感嘆符 (U + 0021)、およびローライン (U + 005F です) 文字など、US-ASCII 文字範囲の標準以外の文字です。  
  
-   IDNA 標準の特定のバージョンで禁止されている文字。 禁止されている文字の詳細については、「Rfc 3454: IDNA 2003 の[国際化文字列の準備 ("stringprep")](https://go.microsoft.com/fwlink/?LinkId=231873) 」および「rfc 5982: idna 2008 用[のアプリケーションの Unicode コードポイントと国際化ドメイン名](https://go.microsoft.com/fwlink/?LinkId=231877)」を参照してください。  
  
 <xref:System.Globalization.IdnMapping.GetAscii%2A> メソッドは、すべてのラベルの区切り記号を完全停止 (ピリオド、U + 002E) に変換します。  
  
 `unicode` に US-ASCII 文字範囲以外の文字が含まれておらず、us-ascii 文字範囲内の文字が禁止されている場合、メソッドは `unicode` を変更せずに返します。  
  
   
  
## Examples  
 次の例では、<xref:System.Globalization.IdnMapping.GetAscii%28System.String%29> メソッドを使用して、国際化ドメイン名の配列を Punycode に変換します。これは、US-ASCII 文字範囲の文字で構成されるエンコードされた等価です。 <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%29> メソッドは、Punycode のドメイン名を元のドメイン名に戻しますが、元のラベルの区切り記号は標準のラベル区切り記号に置き換えます。  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="unicode" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="unicode" /> は、<see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> プロパティ、<see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> プロパティ、IDNA 標準に対して無効です。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v45](~/includes/net-v45-md.md)]では、<see cref="T:System.Globalization.IdnMapping" /> クラスは、使用しているオペレーティングシステムに応じて、IDNA 標準のさまざまなバージョンをサポートしています。 
-[!INCLUDE[win8](~/includes/win8-md.md)]で実行される場合、 [RFC 5891: 国際化ドメイン名 In Applications (idna): プロトコル](https://go.microsoft.com/fwlink/?LinkId=231875)によって概説された2008バージョンの idna 標準がサポートされます。  
  
-以前のバージョンの Windows オペレーティングシステムで実行されている場合、RFC 3490 によって説明されている標準の2003バージョン[(IDNA)](https://go.microsoft.com/fwlink/?LinkId=158110)がサポートされています。  
  
これらの基準が特定の文字セットを処理する方法の違いについては、「 [Unicode Technical Standard #46: IDNA 互換性処理](https://go.microsoft.com/fwlink/?LinkId=232459)」を参照してください。</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String, index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode, int index);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string * int -&gt; string" Usage="idnMapping.GetAscii (unicode, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unicode">ラベル区切り記号で区切られた 1 つまたは複数のドメイン名ラベルから構成される、変換対象の入力文字列。</param>
        <param name="index">変換する部分文字列の始まりを指定する <paramref name="unicode" /> への 0 から始まるオフセット。 変換演算は、<paramref name="unicode" /> 文字列の終わりまで続行されます。</param>
        <summary>US-ASCII 文字範囲外の Unicode 文字を含むドメイン名ラベルの部分文字列をエンコードします。 部分文字列は US-ASCII 文字範囲の表示可能な Unicode 文字の文字列に変換され、IDNA 基準に従って書式化されます。</summary>
        <returns><paramref name="unicode" /> パラメーターと <paramref name="index" /> パラメーターによって指定された部分文字列に対応する、US-ASCII 文字範囲 (U+0020 から U+007E) の表示可能な Unicode 文字から構成され、IDNA 標準に従って書式化された部分文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `unicode` パラメーターと `index` パラメーターは、有効な Unicode 文字で構成される1つ以上のラベルを含む部分文字列を定義します。 ラベルは、ラベル区切り記号で区切られます。 部分文字列の最初の文字は、ラベルの区切り記号で始めることはできませんが、含めることができ、必要に応じて区切り記号で終了することもできます。 ラベルの区切り記号は、FULL STOP (period, U + 002E)、表意文字 FULL STOP (U + 3002)、全角 FULL STOP (U + FF0E)、および半角表意文字の完全停止 (U + FF61) です。 たとえば、ドメイン名 "www.adatum.com" は、ピリオドで区切られたラベル "www"、"adatum"、および "com" で構成されます。  
  
 ラベルには、次の文字を含めることはできません。  
  
-   U + 0001 から U + 001F までの Unicode 制御文字と U + 007F。  
  
-   未割り当ての Unicode 文字 (<xref:System.Globalization.IdnMapping.AllowUnassigned%2A> プロパティの値によって異なります)。  
  
-   <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> プロパティの値に応じて、空白文字 (U + 0020)、感嘆符 (U + 0021)、およびローライン (U + 005F です) 文字などの、US-ASCII 文字範囲の非標準文字。  
  
-   IDNA 標準の特定のバージョンで禁止されている文字。 禁止されている文字の詳細については、「Rfc 3454: IDNA 2003 の[国際化文字列の準備 ("stringprep")](https://go.microsoft.com/fwlink/?LinkId=231873) 」および「rfc 5982: idna 2008 用[のアプリケーションの Unicode コードポイントと国際化ドメイン名](https://go.microsoft.com/fwlink/?LinkId=231877)」を参照してください。  
  
 <xref:System.Globalization.IdnMapping.GetAscii%2A> メソッドは、すべてのラベルの区切り記号を完全停止 (ピリオド、U + 002E) に変換します。  
  
 `unicode` に US-ASCII 文字範囲以外の文字が含まれておらず、us-ascii 文字範囲内の文字が禁止されている場合、メソッドは `unicode` を変更せずに返します。  
  
   
  
## Examples  
 次の例では、電子メールアドレスからローカル部分と @ 文字を削除し、生成されたドメイン名を <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%29> メソッドに渡して、Punycode ドメイン名を作成します。これは、US-ASCII 文字範囲の文字で構成されるエンコードされた等価です。 <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29> メソッドは、Punycode のドメイン名を元のドメイン名に戻しますが、元のラベルの区切り記号は標準のラベル区切り記号に置き換えます。  
  
 [!code-csharp[System.Globalization.IdnMapping.GetAscii#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/cs/conversion1a.cs#2)]
 [!code-vb[System.Globalization.IdnMapping.GetAscii#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/vb/conversion1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="unicode" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> が 0 未満です。  
  
または 
 <paramref name="index" /> が <paramref name="unicode" /> の長さを超えています。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="unicode" /> は、<see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> プロパティ、<see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> プロパティ、IDNA 標準に対して無効です。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v45](~/includes/net-v45-md.md)]では、<see cref="T:System.Globalization.IdnMapping" /> クラスは、使用しているオペレーティングシステムに応じて、IDNA 標準のさまざまなバージョンをサポートしています。 
-[!INCLUDE[win8](~/includes/win8-md.md)]で実行される場合、 [RFC 5891: 国際化ドメイン名 In Applications (idna): プロトコル](https://go.microsoft.com/fwlink/?LinkId=231875)によって概説された2008バージョンの idna 標準がサポートされます。  
  
-以前のバージョンの Windows オペレーティングシステムで実行されている場合、RFC 3490 によって説明されている標準の2003バージョン[(IDNA)](https://go.microsoft.com/fwlink/?LinkId=158110)がサポートされています。  
  
これらの基準が特定の文字セットを処理する方法の違いについては、「 [Unicode Technical Standard #46: IDNA 互換性処理](https://go.microsoft.com/fwlink/?LinkId=232459)」を参照してください。</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String, index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string * int * int -&gt; string" Usage="idnMapping.GetAscii (unicode, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unicode">ラベル区切り記号で区切られた 1 つまたは複数のドメイン名ラベルから構成される、変換対象の入力文字列。</param>
        <param name="index">部分文字列の始まりを指定する <paramref name="unicode" /> への 0 から始まるオフセット。</param>
        <param name="count"><paramref name="index" /> 文字列の <paramref name="unicode" /> で指定された位置から始まる部分文字列内の変換対象の文字の数。</param>
        <summary>US-ASCII 文字範囲外の Unicode 文字を含むドメイン名ラベルの部分文字列の指定した文字数をエンコードします。 部分文字列は US-ASCII 文字範囲の表示可能な Unicode 文字の文字列に変換され、IDNA 基準に従って書式化されます。</summary>
        <returns><paramref name="unicode" /> パラメーター、<paramref name="index" /> パラメーター、<paramref name="count" /> パラメーターによって指定された部分文字列に対応する、US-ASCII 文字範囲 (U+0020 から U+007E) の表示可能な Unicode 文字から構成され、IDNA 標準に従って書式化された部分文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Unicode`、`index`、および `count` パラメーターは、有効な Unicode 文字で構成される1つ以上のラベルを含む部分文字列を定義します。 ラベルは、ラベル区切り記号で区切られます。 部分文字列の最初の文字は、ラベルの区切り記号で始めることはできませんが、含めることができ、必要に応じて区切り記号で終了することもできます。 ラベルの区切り記号は、FULL STOP (period, U + 002E)、表意文字 FULL STOP (U + 3002)、全角 FULL STOP (U + FF0E)、および半角表意文字の完全停止 (U + FF61) です。 たとえば、ドメイン名 "www.adatum.com" は、ピリオドで区切られたラベル "www"、"adatum"、および "com" で構成されます。  
  
 ラベルには、次の文字を含めることはできません。  
  
-   U + 0001 から U + 001F までの Unicode 制御文字と U + 007F。  
  
-   未割り当ての Unicode 文字 (<xref:System.Globalization.IdnMapping.AllowUnassigned%2A> プロパティの値によって異なります)。  
  
-   <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> プロパティの値に応じて、空白文字 (U + 0020)、感嘆符 (U + 0021)、およびローライン (U + 005F です) 文字などの、US-ASCII 文字範囲の非標準文字。  
  
-   IDNA 標準の特定のバージョンで禁止されている文字。 禁止されている文字の詳細については、「Rfc 3454: IDNA 2003 の[国際化文字列の準備 ("stringprep")](https://go.microsoft.com/fwlink/?LinkId=231873) 」および「rfc 5982: idna 2008 用[のアプリケーションの Unicode コードポイントと国際化ドメイン名](https://go.microsoft.com/fwlink/?LinkId=231877)」を参照してください。  
  
 <xref:System.Globalization.IdnMapping.GetAscii%2A> メソッドは、すべてのラベルの区切り記号を完全停止 (ピリオド、U + 002E) に変換します。 部分文字列に US-ASCII 文字範囲以外の文字が含まれておらず、US-ASCII 文字範囲内の文字が禁止されている場合、メソッドは部分文字列を変更せずに返します。  
  
   
  
## Examples  
 次の例では、<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29> メソッドを使用して、国際化ドメイン名を IDNA 標準に準拠したドメイン名に変換します。 <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29> メソッドは、標準化されたドメイン名を元のドメイン名に戻しますが、元のラベルの区切り記号は標準のラベル区切り記号に置き換えます。  
  
 [!code-csharp[IdnMapping.GetX#1](~/samples/snippets/csharp/VS_Snippets_CLR/IdnMapping.GetX/CS/getx.cs#1)]
 [!code-vb[IdnMapping.GetX#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IdnMapping.GetX/VB/getx.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="unicode" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> または <paramref name="count" /> が 0 未満です。  
  
または 
 <paramref name="index" /> が <paramref name="unicode" /> の長さを超えています。  
  
または 
 <paramref name="index" /> が、<paramref name="unicode" /> から <paramref name="count" /> を引いた長さを超えています。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="unicode" /> は、<see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> プロパティ、<see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> プロパティ、IDNA 標準に対して無効です。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v45](~/includes/net-v45-md.md)]では、<see cref="T:System.Globalization.IdnMapping" /> クラスは、使用しているオペレーティングシステムに応じて、IDNA 標準のさまざまなバージョンをサポートしています。 
-[!INCLUDE[win8](~/includes/win8-md.md)]で実行される場合、 [RFC 5891: 国際化ドメイン名 In Applications (idna): プロトコル](https://go.microsoft.com/fwlink/?LinkId=231875)によって概説された2008バージョンの idna 標準がサポートされます。  
  
-以前のバージョンの Windows オペレーティングシステムで実行されている場合、RFC 3490 によって説明されている標準の2003バージョン[(IDNA)](https://go.microsoft.com/fwlink/?LinkId=158110)がサポートされています。  
  
これらの基準が特定の文字セットを処理する方法の違いについては、「 [Unicode Technical Standard #46: IDNA 互換性処理](https://go.microsoft.com/fwlink/?LinkId=232459)」を参照してください。</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="idnMapping.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Globalization.IdnMapping" /> オブジェクトのハッシュ コードを返します。</summary>
        <returns><see cref="T:System.Globalization.IdnMapping" /> オブジェクトのプロパティから派生した 4 つの 32 ビット符号付き定数の 1 つ。  戻り値は特別な意味を持たず、ハッシュ コード アルゴリズムでの使用に適しません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションで意味のあるハッシュコードアルゴリズムを実装する必要がある場合は、<xref:System.Globalization.IdnMapping.GetHashCode%2A> メソッドをオーバーライドします。  
  
   
  
## Examples  
 次の例では、1つの文字列にスペースで区切られた複数の電子メールアドレスを含めることができます。 各電子メールアドレスからローカル部分と @ 文字を削除し、結果として得られたドメイン名を <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%29> または <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29> メソッドに渡して、Punycode ドメイン名を作成します。 <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29> メソッドは、Punycode ドメイン名を元のドメイン名に戻します。  
  
 [!code-csharp[System.Globalization.IdnMapping.GetAscii#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/cs/conversion1b.cs#3)]
 [!code-vb[System.Globalization.IdnMapping.GetAscii#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/vb/conversion1b.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUnicode">
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>IDNA 標準に従ってエンコードされた 1 つ以上のドメイン名ラベルを Unicode 文字の文字列にデコードします。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string -&gt; string" Usage="idnMapping.GetUnicode ascii" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ascii">デコード対象となる文字列は、IDNA 標準に従ってエンコードされた US-ASCII 文字範囲 (U+0020 から U+007E) の 1 つまたは複数のラベルから構成されます。</param>
        <summary>IDNA 標準に従ってエンコードされた 1 つ以上のドメイン名ラベルの文字列を Unicode 文字の文字列にデコードします。</summary>
        <returns><paramref name="ascii" /> パラメーターで指定された IDNA 部分文字列に対応する Unicode 文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ドメイン名、ラベル、およびラベルの区切り記号の詳細については、<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> メソッドの解説を参照してください。  
  
   
  
## Examples  
 次の例では、<xref:System.Globalization.IdnMapping.GetAscii%28System.String%29> メソッドを使用して、国際化ドメイン名の配列を Punycode に変換します。 <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%29> メソッドは、Punycode のドメイン名を元のドメイン名に戻しますが、元のラベルの区切り記号は標準のラベル区切り記号に置き換えます。  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ascii" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="ascii" /> は、<see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> プロパティ、<see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> プロパティ、IDNA 標準に対して無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String, index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii, int index);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string * int -&gt; string" Usage="idnMapping.GetUnicode (ascii, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ascii">デコード対象となる文字列は、IDNA 標準に従ってエンコードされた US-ASCII 文字範囲 (U+0020 から U+007E) の 1 つまたは複数のラベルから構成されます。</param>
        <param name="index">デコードする部分文字列の始まりを指定する <paramref name="ascii" /> への 0 から始まるオフセット。 デコード演算は、<paramref name="ascii" /> 文字列の終わりまで続行されます。</param>
        <summary>IDNA 標準に従ってエンコードされた 1 つ以上のドメイン名ラベルの部分文字列を Unicode 文字の文字列にデコードします。</summary>
        <returns><paramref name="ascii" /> パラメーターおよび <paramref name="index" /> パラメーターで指定された IDNA 部分文字列に対応する Unicode 文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ドメイン名、ラベル、およびラベルの区切り記号の詳細については、<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> メソッドの解説を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ascii" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> が 0 未満です。  
  
または 
 <paramref name="index" /> が <paramref name="ascii" /> の長さを超えています。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="ascii" /> は、<see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> プロパティ、<see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> プロパティ、IDNA 標準に対して無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String, index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string * int * int -&gt; string" Usage="idnMapping.GetUnicode (ascii, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ascii">デコード対象となる文字列は、IDNA 標準に従ってエンコードされた US-ASCII 文字範囲 (U+0020 から U+007E) の 1 つまたは複数のラベルから構成されます。</param>
        <param name="index">部分文字列の始まりを指定する <paramref name="ascii" /> への 0 から始まるオフセット。</param>
        <param name="count"><paramref name="index" /> 文字列の <paramref name="ascii" /> で指定された位置から始まる部分文字列内の変換対象の文字の数。</param>
        <summary>IDNA 標準に従ってエンコードされた 1 つまたは複数のドメイン名ラベルの指定した長さの部分文字列を Unicode 文字の文字列にデコードします。</summary>
        <returns><paramref name="ascii" /> パラメーター、<paramref name="index" /> パラメーター、<paramref name="count" /> パラメーターで指定された IDNA 部分文字列に対応する Unicode 文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ドメイン名、ラベル、およびラベルの区切り記号の詳細については、<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> メソッドの解説を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ascii" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> または <paramref name="count" /> が 0 未満です。  
  
または 
 <paramref name="index" /> が <paramref name="ascii" /> の長さを超えています。  
  
または 
 <paramref name="index" /> が、<paramref name="ascii" /> から <paramref name="count" /> を引いた長さを超えています。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="ascii" /> は、<see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> プロパティ、<see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> プロパティ、IDNA 標準に対して無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="UseStd3AsciiRules">
      <MemberSignature Language="C#" Value="public bool UseStd3AsciiRules { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseStd3AsciiRules" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.IdnMapping.UseStd3AsciiRules" />
      <MemberSignature Language="VB.NET" Value="Public Property UseStd3AsciiRules As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseStd3AsciiRules { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseStd3AsciiRules : bool with get, set" Usage="System.Globalization.IdnMapping.UseStd3AsciiRules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>標準または非標準の名前付け規則が、現在の <see cref="T:System.Globalization.IdnMapping" /> オブジェクトのメンバーによって実行される操作内で使用されるかどうかを示す値を取得または設定します。</summary>
        <value>標準の名前付け規則が操作内で使用される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 標準の名前付け規則に従うドメイン名は、US-ASCII 文字範囲内の特定の文字のサブセットで構成されます。 文字は A ~ Z の文字、0 ~ 9 の数字、ハイフン (-) 文字 (U + 002D)、ピリオド (.) 文字です。 文字の大文字と小文字は区別されません。 厳密でない名前付け規則を使用すると、スペース文字 (U + 0020)、感嘆符 (U + 0021)、およびアンダースコア (U + 005F です) を含む、より広い範囲の ASCII 文字を使用できます。 <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> が `true`場合、<xref:System.Globalization.IdnMapping.GetAscii%2A> メソッドによって返されたラベルには、標準文字のみを使用できます。  
  
 既定では、<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> プロパティの値は `false`であり、ASCII 文字の拡張されたサブセットはラベルで許可されます。  
  
> [!NOTE]
>  <xref:System.Globalization.IdnMapping> クラスは、<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> プロパティの設定に関係なく、nondisplayable 文字 U + 0000 ~ U + 001F を使用し、ドメイン名ラベルに U + 007F を使用することを禁止します。 この禁止により、名前のスプーフィングなどのセキュリティ攻撃のリスクが軽減されます。  
  
   
  
## Examples  
 次の例では、U + 0000 から U + 007F の ASCII 範囲の文字を含む Url を生成し、2つの <xref:System.Globalization.IdnMapping> オブジェクトの <xref:System.Globalization.IdnMapping.GetAscii%28System.String%29> メソッドに渡します。 一方のオブジェクトの <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> プロパティは `true`に設定され、もう一方のオブジェクトでは `false`に設定されています。 出力には、<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> プロパティが `true` ときに無効な文字が表示されますが、`false`ときに有効になります。  
  
 [!code-csharp[System.Globalization.IdnMapping.UseStd3AsciiRules#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.usestd3asciirules/cs/usestd3asciirules1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.UseStd3AsciiRules#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.usestd3asciirules/vb/usestd3asciirules1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
