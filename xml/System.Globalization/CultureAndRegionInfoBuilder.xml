<Type Name="CultureAndRegionInfoBuilder" FullName="System.Globalization.CultureAndRegionInfoBuilder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3577bb500e0cbfa74d7845a14c2a67a3f79c2aeb" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83961582" /></Metadata><TypeSignature Language="C#" Value="public sealed class CultureAndRegionInfoBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CultureAndRegionInfoBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CultureAndRegionInfoBuilder" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CultureAndRegionInfoBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class CultureAndRegionInfoBuilder sealed" />
  <TypeSignature Language="F#" Value="type CultureAndRegionInfoBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>sysglobl</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>新しいカスタム カルチャまたは別のカルチャおよび国/地域に基づいたカスタム カルチャを定義します。 カスタム カルチャは、コンピューターにインストールすることで、そのコンピューター上で実行される任意のアプリケーションで使用できます。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo> クラスは、関連付けられた言語、サブ言語、国/地域、暦、および文化の規則など、カルチャ固有の情報を保持します。 このクラスには、<xref:System.Globalization.DateTimeFormatInfo>、<xref:System.Globalization.NumberFormatInfo>、<xref:System.Globalization.CompareInfo>、および <xref:System.Globalization.TextInfo> クラスのカルチャ固有のインスタンスも用意されています。これは、大文字と小文字の区別、日付と数値の書式設定と解析、文字列の比較などのカルチャ固有の操作に必要です。  
  
 既定では、.NET Framework は、定義済みのカルチャのセットを表す <xref:System.Globalization.CultureInfo> オブジェクトをサポートします。 Windows システムで使用できるこれらのカルチャの一覧については、 [windows でサポートされている言語/地域名の一覧](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c)の **[言語タグ]** 列を参照してください。 カルチャ名は、[BCP 47](https://tools.ietf.org/html/bcp47) によって定義されている標準に準拠します。 <xref:System.Globalization.CultureAndRegionInfoBuilder> クラスを使用すると、完全に新しい、または定義済みのカルチャをオーバーライドするカスタムカルチャを作成できます。  カスタムカルチャが特定のコンピューターにインストールおよび登録されると、定義済みの <xref:System.Globalization.CultureInfo> オブジェクトと区別できなくなり、これらのオブジェクトと同じようにインスタンス化して使用することができます。  
  
> [!IMPORTANT]
>  <xref:System.Globalization.CultureAndRegionInfoBuilder> クラスは、sysglobl という名前のアセンブリにあります。 この型を使用するコードを正常にコンパイルするには、sysglobl への参照を追加する必要があります。  
  
 カスタムカルチャをコンピューターに登録できるのは、そのコンピューターの管理者権限を持つユーザーだけです。 そのため、通常、アプリはカスタムカルチャを作成およびインストールしません。 代わりに、<xref:System.Globalization.CultureAndRegionInfoBuilder> クラスを使用して、管理者がカスタムカルチャを作成、インストール、および登録するために使用できる特殊な目的のツールを作成できます。 カスタムカルチャをコンピューターに登録した後、アプリケーションで <xref:System.Globalization.CultureInfo> クラスを使用して、定義済みのカルチャと同様にカスタムカルチャのインスタンスを作成できます。  
  
 カスタムカルチャに対して生成された日付と時刻の文字列を解析する場合は、<xref:System.DateTime.Parse%2A?displayProperty=nameWithType> または <xref:System.DateTime.TryParse%2A?displayProperty=nameWithType> メソッドの代わりに、<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> または <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType> メソッドを使用して、解析操作が成功する確率を上げる必要があります。 カスタムカルチャの日付と時刻の文字列は複雑になる可能性があるため、解析が難しくなります。 <xref:System.DateTime.Parse%2A> メソッドと <xref:System.DateTime.TryParse%2A> メソッドは、いくつかの暗黙的な解析パターンを使用して文字列を解析しようとしますが、これらはすべて失敗する可能性があります。 これに対し、<xref:System.DateTime.TryParseExact%2A> メソッドでは、アプリケーションは、成功する可能性のある1つ以上の正確な解析パターンを明示的に指定する必要があります。  
  
## <a name="defining-and-creating-a-custom-culture"></a>カスタムカルチャの定義と作成  
 <xref:System.Globalization.CultureAndRegionInfoBuilder> クラスを使用して、カスタムカルチャを定義し、名前を指定します。 カスタムカルチャは、完全に新しいカルチャ、既存のカルチャ (つまり補足カルチャ) に基づく新しいカルチャ、または既存の .NET Framework カルチャを置き換えるカルチャにすることができます。 どちらの場合も、基本的な手順は同じです。  
  
1.  <xref:System.Globalization.CultureAndRegionInfoBuilder.%23ctor%28System.String%2CSystem.Globalization.CultureAndRegionModifiers%29> コンストラクターを呼び出すことによって <xref:System.Globalization.CultureAndRegionInfoBuilder> オブジェクトをインスタンス化します。 既存のカルチャを置き換えるには、そのカルチャの名前と <xref:System.Globalization.CultureAndRegionModifiers.Replacement?displayProperty=nameWithType> 列挙値をコンストラクターに渡します。 新しいカルチャまたは補足カルチャを作成するには、一意のカルチャ名と、<xref:System.Globalization.CultureAndRegionModifiers.Neutral?displayProperty=nameWithType> または <xref:System.Globalization.CultureAndRegionModifiers.None?displayProperty=nameWithType> 列挙値のいずれかを渡します。  
  
    > [!NOTE]
    >  <xref:System.Globalization.CultureAndRegionModifiers.Replacement?displayProperty=nameWithType> 列挙値を使用して <xref:System.Globalization.CultureAndRegionInfoBuilder> オブジェクトをインスタンス化する場合、<xref:System.Globalization.CultureAndRegionInfoBuilder> オブジェクトのプロパティには、置換される <xref:System.Globalization.CultureInfo> オブジェクトの値が自動的に設定されます。  
  
2.  新しいまたは補足カルチャを作成する場合は、次の手順を実行します。  
  
    -   <xref:System.Globalization.CultureAndRegionInfoBuilder.LoadDataFromCultureInfo%2A> メソッドを呼び出して、新しいオブジェクトに似たプロパティ値を持つ <xref:System.Globalization.CultureInfo> オブジェクトを渡すことによって、<xref:System.Globalization.CultureAndRegionInfoBuilder> オブジェクトのプロパティを設定します。  
  
    -   <xref:System.Globalization.CultureAndRegionInfoBuilder.LoadDataFromRegionInfo%2A> メソッドを呼び出し、カスタムカルチャの領域を表す <xref:System.Globalization.RegionInfo> オブジェクトを渡すことによって、<xref:System.Globalization.CultureAndRegionInfoBuilder> オブジェクトの地域プロパティを設定します。  
  
3.  必要に応じて <xref:System.Globalization.CultureAndRegionInfoBuilder> オブジェクトのプロパティを変更します。  
  
4.  カスタムカルチャを別のルーチンに登録する場合は、<xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A> メソッドを呼び出します。 これにより、別のカスタムカルチャインストールルーチンで読み込んで登録できる XML ファイルが生成されます。  
  
## <a name="registering-a-custom-culture"></a>カスタムカルチャの登録  
 カルチャを作成するアプリケーションとは別のカスタムカルチャの登録アプリケーションを開発する場合は、<xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A> メソッドを呼び出して、カスタムカルチャの定義を含む XML ファイルを読み込み、<xref:System.Globalization.CultureAndRegionInfoBuilder> オブジェクトをインスタンス化します。 登録を処理するには、<xref:System.Globalization.CultureAndRegionInfoBuilder.Register%2A> メソッドを呼び出します。 登録を成功させるには、カスタムカルチャを登録するアプリケーションが、ターゲットシステムで管理者特権を使用して実行されている必要があります。それ以外の場合、<xref:System.Globalization.CultureAndRegionInfoBuilder.Register%2A> を呼び出すと <xref:System.UnauthorizedAccessException> 例外がスローされます。  
  
> [!WARNING]
>  カルチャデータは、システムによって異なる場合があります。 <xref:System.Globalization.CultureAndRegionInfoBuilder> クラスを使用して、複数のシステムに共通するカスタムカルチャを作成し、既存の <xref:System.Globalization.CultureInfo> と <xref:System.Globalization.RegionInfo> オブジェクトからデータを読み込んでカスタマイズすることによってカスタムカルチャを作成する場合は、2つの異なるユーティリティを作成する必要があります。 最初のはカスタムカルチャを作成し、XML ファイルに保存します。 2つ目は、<xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A> メソッドを使用して、XML ファイルからカスタムカルチャを読み込み、ターゲットコンピューターに登録します。  
  
 登録プロセスでは、次のタスクが実行されます。  
  
-   <xref:System.Globalization.CultureAndRegionInfoBuilder> オブジェクトで定義されている情報を含む nlp ファイルを作成します。  
  
-   は、nlp ファイルをターゲットコンピューターの%windir%\Globalization システムディレクトリに格納します。 これにより、カスタムカルチャの設定をセッション間で永続化できます。 (Nlp ファイルはシステムディレクトリに格納されているため、<xref:System.Globalization.CultureAndRegionInfoBuilder> メソッドには管理者特権が必要です)。  
  
-   新しいカスタムカルチャを作成する要求が次に発生したときに、内部キャッシュではなく%windir%\Globalization システムディレクトリを検索するための .NET Framework を準備します。  
  
 カスタムカルチャが正常に登録されると、.NET Framework によって事前に定義されているカルチャと区別できません。 カスタムカルチャは、<xref:System.Globalization.CultureAndRegionInfoBuilder> メソッドを呼び出すと、ローカルコンピューターから nlp ファイルが削除されるまで使用できます。  
  
## <a name="instantiating-a-custom-culture"></a>カスタムカルチャのインスタンス化  
 カスタムカルチャのインスタンスは、次のいずれかの方法で作成できます。  
  
-   カルチャ名を使用して <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType> コンストラクターを呼び出します。  
  
-   カルチャ名を使用して <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> メソッドを呼び出す。  
  
-   カルチャ名を使用して <xref:System.Globalization.CultureInfo.GetCultureInfo%2A?displayProperty=nameWithType> メソッドを呼び出す。  
  
 また、<xref:System.Globalization.CultureInfo.GetCultures%2A?displayProperty=nameWithType> メソッドによって返される <xref:System.Globalization.CultureInfo> オブジェクトの配列には、カスタムカルチャが含まれます。  
  
   
  
## Examples  
 次の例では、米国でロシア語の言語を表すカスタム ru (米国) カルチャを定義します。 この例では、ロシア語 (ロシア) <xref:System.Globalization.CultureInfo> オブジェクトと米国 <xref:System.Globalization.RegionInfo> オブジェクトから設定を読み込み、<xref:System.Globalization.CultureAndRegionInfoBuilder> プロパティの数を設定することによって、カスタムカルチャを定義します。 この例では、カスタムカルチャを登録し、インスタンス化して、現在のスレッドカルチャにします。  
  
 [!code-csharp[System.Globalization.CultureAndRegionInfoBuilder.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureandregioninfobuilder.class/cs/car.cs#1)]
 [!code-vb[System.Globalization.CultureAndRegionInfoBuilder.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureandregioninfobuilder.class/vb/car.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureAndRegionInfoBuilder (string cultureName, System.Globalization.CultureAndRegionModifiers flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string cultureName, valuetype System.Globalization.CultureAndRegionModifiers flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.#ctor(System.String,System.Globalization.CultureAndRegionModifiers)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (cultureName As String, flags As CultureAndRegionModifiers)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureAndRegionInfoBuilder(System::String ^ cultureName, System::Globalization::CultureAndRegionModifiers flags);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureAndRegionInfoBuilder : string * System.Globalization.CultureAndRegionModifiers -&gt; System.Globalization.CultureAndRegionInfoBuilder" Usage="new System.Globalization.CultureAndRegionInfoBuilder (cultureName, flags)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cultureName" Type="System.String" />
        <Parameter Name="flags" Type="System.Globalization.CultureAndRegionModifiers" />
      </Parameters>
      <Docs>
        <param name="cultureName">カルチャの名前。</param>
        <param name="flags">新しい <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトがニュートラル カルチャであるかどうか、既存のカルチャと国/地域を置換するかどうか、または新しいカルチャであるかどうかを指定する、<see cref="T:System.Globalization.CultureAndRegionModifiers" /> 値のいずれか 1 つ。</param>
        <summary><see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `cultureName` パラメーターは、新しい <xref:System.Globalization.CultureAndRegionInfoBuilder> オブジェクトの名前を指定します。  
  
 `flags` パラメーターは、新しい <xref:System.Globalization.CultureAndRegionInfoBuilder> オブジェクトが新しいカスタムカルチャであるか、または既存のニュートラルカルチャ、特定のカルチャ、または Windows ロケールを置き換えるかを指定する <xref:System.Globalization.CultureAndRegionModifiers> 値に使用されます。  
  
 `cultureName` パラメーターで既存の .NET Framework カルチャ、登録されたカスタムカルチャ、または Windows ロケールから生成されたカルチャを指定すると、<xref:System.Globalization.CultureAndRegionInfoBuilder.%23ctor%2A> コンストラクターは、新しい <xref:System.Globalization.CultureAndRegionInfoBuilder> オブジェクトにカルチャおよび国/地域情報を自動的に設定します。  
  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.LoadDataFromCultureInfo%2A> メソッドと <xref:System.Globalization.CultureAndRegionInfoBuilder.LoadDataFromRegionInfo%2A> メソッドを呼び出して、新しい <xref:System.Globalization.CultureAndRegionInfoBuilder> オブジェクトにカルチャおよび国/地域情報を設定します。  
  
## <a name="custom-culture-names"></a>カスタムカルチャ名  
 新しいカスタムカルチャの `cultureName` パラメーターの推奨される形式は、"[`prefix`-]`language`[-`region`] [-`suffix`[`…`]]" です。この場合、`language` コンポーネントは必須であり、`prefix`、`region`、および `suffix` のコンポーネントは省略可能です。 各コンポーネントの最大長は8文字で、`cultureName` パラメーター全体の最大長は84文字です。  
  
 `prefix` コンポーネントは、インターネット割り当て番号機関 (IANA) の id です。 IANA に登録されているカルチャ名には "i-" または "I-" を指定し、プライベート使用のために予約されているカルチャ名には "x-" または "X-" を指定します。 それ以外の場合、プレフィックスは必要ありません。 詳細については、RFC 4646 の「言語の Id のタグ」を参照してください。  
  
 `cultureName` パラメーターの `language` コンポーネントは、ISO 639-1 から派生した小文字の2文字のコードを指定し、`region` は ISO 3166 から派生した大文字の2文字コードを指定します。 たとえば、en-us は、米国で話されている英語を意味します。 `region` コンポーネントが存在しない場合は、ニュートラルカルチャを意味します。  
  
 .NET Framework に含まれるカルチャの名前と同じ `cultureName` は、置換 (オーバーライド) カルチャを意味します。 置換カルチャのプロパティに割り当てることができる値は限られています。 このような制限事項の詳細については、各プロパティの例外を参照してください。  
  
 アプリケーションでは、`suffix` コンポーネントを使用して、類似のカルチャを区別します。 たとえば、ABC と XYZ という2つの企業は、新しい ASP.NET Web サービスを作成して共有し、世界中のさまざまな市場で製品を宣伝します。 サービスの Web ページには、ユーザーのカルチャに応じて、各会社の地域のロゴや現地の電話番号などの情報が表示されます。 各 Web ページのカルチャ固有の内容は、カルチャ名で識別され、会社名によって修飾された個別のリソースファイルにあります。  たとえば、en-us カルチャおよび ja-jp カルチャのリソースファイルの名前は、en-us-ABC、en-us-XYZ、ja-jp、ja-jp、および ja-jp という名前になっています。 "ABC" と "XYZ" のサフィックスを使用すると、Web サービスは同じアプリケーションロジックを使用して、さまざまな市場固有の情報を表示できます。  
  
 `suffix` コンポーネントは、各サブコンポーネントがハイフンで区切られ、各サブコンポーネントの最大長が8文字であるサブコンポーネントで構成されます。 たとえば、"honda-車" が `cultureName` パラメーターである場合、"-honda" は `suffix` コンポーネントですが、  
  
   
  
## Examples  
 次のコード例では、プライベート使用プレフィックスを持つカスタムカルチャを作成し、そのプロパティのセットを一覧表示します。 最初のプロパティには、カルチャの名前が表示されます。  
  
 [!code-cpp[sys.glob.carib1#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.carib1/CPP/carib.cpp#1)]
 [!code-csharp[sys.glob.carib1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib1/CS/carib.cs#1)]
 [!code-vb[sys.glob.carib1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib1/VB/carib.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="cultureName" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="cultureName" /> が空の文字列 ("") です。  
  
または 
 <paramref name="cultureName" /> には、"0" ～ "9"、"a" ～ "z"、"A" ～ "Z"、ハイフン (-)、またはアンダースコア (_) 以外の文字が含まれています。  
  
または 
 <paramref name="cultureName" /> に構成要素を区切るためのハイフン (-) が含まれていますが、1 つまたは複数の <paramref name="prefix" />、<paramref name="language" />, <paramref name="region" />、または <paramref name="suffix" /> 構成要素が在しません。 言い換えると、2 つ以上のハイフンが隣接しています。  
  
または 
 <paramref name="cultureName" /> が 84 文字を超えています。  
  
または 
 <paramref name="cultureName" /> に構成要素を区切るためのハイフン (-) が含まれていますが、1 つまたは複数の構成要素名が 8 文字を超えています。  
  
または 
 <paramref name="cultureName" /> の先頭または末尾にハイフン (-) またはアンダースコア (_) が含まれています。  
  
または 
 <paramref name="cultureName" /> は、.NET Framework カルチャの代わりに代替並べ替え置換カルチャを指定します。 たとえば、<paramref name="culturenName" /> は、ドイツ語 (ドイツ) カルチャの "de-DE" ではなく、"de-de_phoneb" です。これは、ドイツの電話帳のように文字列を並べ替えるカルチャです。  
  
または 
 <paramref name="flags" /> に <see cref="T:System.Globalization.CultureAndRegionModifiers" /> 値の正しくない組み合わせが含まれています。  
  
または 
 <paramref name="flags" /> に <see cref="F:System.Globalization.CultureAndRegionModifiers.Replacement" /> または <see cref="F:System.Globalization.CultureAndRegionModifiers.Neutral" /> が含まれていて、<paramref name="cultureName" /> に指定されているカルチャが見つかりません。  
  
または 
 <paramref name="flags" /> に <see cref="F:System.Globalization.CultureAndRegionModifiers.Replacement" /> が含まれていて、<paramref name="cultureName" /> に、.NET Framework に付属するカルチャを置き換えないユーザー作成のカスタム カルチャが指定されています。  
  
または 
 <paramref name="flags" /> に <see cref="F:System.Globalization.CultureAndRegionModifiers.Neutral" /> が含まれていて、<paramref name="cultureName" /> に、ニュートラル カルチャではないカルチャが指定されています。  
  
または 
 <paramref name="flags" /> に <see cref="F:System.Globalization.CultureAndRegionModifiers.Neutral" /> が含まれていて、<paramref name="cultureName" /> に、.NET Framework に付属する特定のカルチャを置き換えるユーザー作成のカスタム カルチャが指定されています。</exception>
        <altmember cref="T:System.Globalization.CultureTypes" />
        <altmember cref="T:System.Globalization.CultureAndRegionModifiers" />
      </Docs>
    </Member>
    <Member MemberName="AvailableCalendars">
      <MemberSignature Language="C#" Value="public System.Globalization.Calendar[] AvailableCalendars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar[] AvailableCalendars" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.AvailableCalendars" />
      <MemberSignature Language="VB.NET" Value="Public Property AvailableCalendars As Calendar()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Globalization::Calendar ^&gt; ^ AvailableCalendars { cli::array &lt;System::Globalization::Calendar ^&gt; ^ get(); void set(cli::array &lt;System::Globalization::Calendar ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AvailableCalendars : System.Globalization.Calendar[] with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.AvailableCalendars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトによってサポートされるカレンダーの配列を取得または設定します。</summary>
        <value>カレンダーの配列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.AvailableCalendars%2A> プロパティは、<xref:System.Globalization.CultureInfo.OptionalCalendars%2A> プロパティに対応します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作において、割り当てられた配列が <see langword="null" /> であるか、または割り当てられた配列の要素が <see langword="null" /> です。</exception>
        <exception cref="T:System.NotSupportedException">ニュートラル カルチャでは、このプロパティはサポートされていません。  
  
または 
設定操作において、割り当てられた配列に <see cref="T:System.Globalization.PersianCalendar" />、<see cref="T:System.Globalization.TaiwanLunisolarCalendar" />、<see cref="T:System.Globalization.KoreanLunisolarCalendar" />、<see cref="T:System.Globalization.JapaneseLunisolarCalendar" />、<see cref="T:System.Globalization.ChineseLunisolarCalendar" />、または <see cref="T:System.Globalization.JulianCalendar" /> が含まれています。  
  
または 
set 操作で、割り当てられた配列にカスタム カレンダーが含まれています。</exception>
        <altmember cref="P:System.Globalization.CultureAndRegionInfoBuilder.GregorianDateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="CompareInfo">
      <MemberSignature Language="C#" Value="public System.Globalization.CompareInfo CompareInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CompareInfo CompareInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CompareInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property CompareInfo As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CompareInfo ^ CompareInfo { System::Globalization::CompareInfo ^ get(); void set(System::Globalization::CompareInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CompareInfo : System.Globalization.CompareInfo with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.CompareInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カルチャの文字列を比較する方法を定義する <see cref="T:System.Globalization.CompareInfo" /> オブジェクトを取得または設定します。</summary>
        <value>カルチャの文字列を比較する方法を定義する <see cref="T:System.Globalization.CompareInfo" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.CompareInfo%2A?displayProperty=nameWithType> プロパティは、<xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=nameWithType> プロパティに対応します。  
  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.TextInfo%2A> および <xref:System.Globalization.CultureAndRegionInfoBuilder.CompareInfo%2A> プロパティに割り当てられている <xref:System.Globalization.TextInfo> オブジェクトと <xref:System.Globalization.CompareInfo> オブジェクトは、どちらもカルチャに依存し、大文字と小文字を区別する文字列比較をサポートしています。 <xref:System.Globalization.CompareInfo> オブジェクトには、カルチャに依存した大文字と小文字を区別しない比較をサポートする <xref:System.Globalization.CompareOptions> パラメーターを含むメソッドもあります。 これら2つのプロパティは、同じロケールを表すオブジェクト <xref:System.Globalization.TextInfo> と <xref:System.Globalization.CompareInfo> 割り当てる必要があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作で割り当てられた値が、<see langword="null" /> です。</exception>
        <exception cref="T:System.NotSupportedException">このカスタム カルチャは、組み込みカルチャのオーバーライドです。</exception>
        <altmember cref="P:System.Globalization.CultureAndRegionInfoBuilder.TextInfo" />
      </Docs>
    </Member>
    <Member MemberName="ConsoleFallbackUICulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo ConsoleFallbackUICulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo ConsoleFallbackUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.ConsoleFallbackUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsoleFallbackUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ ConsoleFallbackUICulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConsoleFallbackUICulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.ConsoleFallbackUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>グラフィック ユーザー インターフェイスの既定のカルチャが不適切な場合に、コンソール アプリケーションに適した代替のユーザー インターフェイス カルチャを取得または設定します。</summary>
        <value>コンソール上のテキストの読み取りおよび表示に使用する代替カルチャ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Get 操作では、<xref:System.Globalization.CultureAndRegionInfoBuilder.ConsoleFallbackUICulture%2A> プロパティは <xref:System.Globalization.CultureInfo.GetConsoleFallbackUICulture%2A> メソッドに対応します。 現在の <xref:System.Globalization.CultureAndRegionInfoBuilder> オブジェクトで定義されているカルチャが代替ユーザーインターフェイスカルチャであることを示すには、セット操作で `null` を指定します。 別のコンソールフォールバック UI カルチャを持つカルチャにプロパティを設定しようとすると、最終的な "リーフ" カルチャが割り当てられます。  
  
 アラビア語、ヘブライ語、ペルシャ語、ウルドゥ語、シリア語などの言語は双方向テキストに基づいています。 グラフィカルユーザーインターフェイスを使用する Windows アプリケーションでは、双方向言語がサポートしています。 ただし、オペレーティングシステムコンソールのテキストユーザーインターフェイスを使用するコンソールアプリケーションでは、双方向のサポートは提供されません。 そのため、コンソールアプリケーションがアラビア語またはヘブライ語にローカライズされている場合は、コンソール画面に読み取り不可能なテキストが表示されます。  
  
 ユーザーインターフェイスカルチャは、ユーザーの入力と出力をサポートするためにアプリケーションが必要とするリソースを指定します。既定では、オペレーティングシステムのカルチャと同じです。 たとえば、<xref:System.Globalization.CultureInfo.CurrentUICulture%2A> プロパティはアラビア語のオペレーティングシステムのアラビア語のカルチャを返します。 アプリケーションでは、<xref:System.Globalization.CultureAndRegionInfoBuilder.ConsoleFallbackUICulture%2A> プロパティを使用して、コンソールアプリケーションのユーザーインターフェイスに適したニュートラルカルチャを取得する必要があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定したカルチャが <see langword="null" /> でない設定操作において、指定したカルチャの <see cref="P:System.Globalization.CultureAndRegionInfoBuilder.ConsoleFallbackUICulture" /> プロパティが指定したカルチャと同じではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromLdml">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureAndRegionInfoBuilder CreateFromLdml (string xmlFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureAndRegionInfoBuilder CreateFromLdml(string xmlFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromLdml (xmlFileName As String) As CultureAndRegionInfoBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureAndRegionInfoBuilder ^ CreateFromLdml(System::String ^ xmlFileName);" />
      <MemberSignature Language="F#" Value="static member CreateFromLdml : string -&gt; System.Globalization.CultureAndRegionInfoBuilder" Usage="System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml xmlFileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureAndRegionInfoBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xmlFileName"><see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトの XML 表現を格納したファイルの名前。</param>
        <summary>指定したオブジェクトの表現を格納した XML ファイルから <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトを再構成します。</summary>
        <returns><paramref name="xmlFileName" /> パラメーターに格納されている情報と等価の新しいオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `xmlFileName` パラメーターは、<xref:System.Globalization.CultureAndRegionInfoBuilder> オブジェクトの XML 表現を含むファイル名を指定します。 XML ファイルの形式は、Locale Data Markup Language (LDML) バージョン1.1 と呼ばれています。 `xmlFileName`内のデータを使用して、新しい <xref:System.Globalization.CultureAndRegionInfoBuilder> オブジェクトが作成され、初期化されます。 <xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A> メソッドは、<xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A> メソッドの逆の操作を実行します。  
  
 LDML ファイルでは、カルチャのプロパティは、`<identity>` セクションの `<special>` 要素の子要素として指定されます。 プロパティ値は、通常、要素の `type` 属性によって指定されます。 たとえば、LDML ファイルから抜粋した次の例では、カルチャの親を英語のニュートラルカルチャとして定義しています。  
  
```xml  
<identity>  
   <version number="1.1">ldml version 1.1</version>  
   <generation date="2012-05-16" />  
   <special xmlns:msLocale="http://schemas.microsoft.com/globalization/2004/08/carib/ldml">  
      <!-content removed -->  
      <msLocale:parentName type="en" />  
      <!-content removed -->  
   </special>  
</identity>  
```  
  
 LDML 標準の詳細については、Unicode コンソーシアムの web サイトの「 [Unicode Technical standard #35」、「Locale Data Markup Language (LDML)」](https://go.microsoft.com/fwlink/p/?LinkId=252840)を参照してください。  
  
   
  
## Examples  
 次の例は、<xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A> メソッドと <xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A> メソッドを示しています。  
  
 [!code-csharp[sys.glob.carib.saveLdml#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib.saveLdml/cs/sl.cs#1)]
 [!code-vb[sys.glob.carib.saveLdml#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib.saveLdml/vb/sl.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="xmlFileName" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="xmlFileName" /> は、空の文字列 ("") か、または無効なファイルまたはパス名です。</exception>
        <exception cref="T:System.Xml.XmlException"><paramref name="xmlFileName" /> のデータが有効な XML 形式ではありません。  
  
または 
<paramref name="xmlFileName" /> にアクセスしているときに、I/O エラーが発生しました。</exception>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException"><paramref name="xmlFileName" /> のデータが有効な LDML 形式ではありません。</exception>
        <altmember cref="M:System.Globalization.CultureAndRegionInfoBuilder.Save(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CultureEnglishName">
      <MemberSignature Language="C#" Value="public string CultureEnglishName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CultureEnglishName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CultureEnglishName" />
      <MemberSignature Language="VB.NET" Value="Public Property CultureEnglishName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CultureEnglishName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CultureEnglishName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.CultureEnglishName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>英語のカルチャ名を取得または設定します。</summary>
        <value>英語のカルチャ名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.CultureEnglishName%2A> プロパティは、<xref:System.Globalization.CultureInfo.EnglishName%2A> プロパティに対応します。  
  
 たとえば、米国で話されている特定のカルチャの <xref:System.Globalization.CultureAndRegionInfoBuilder.CultureEnglishName%2A> プロパティの戻り値は、"English (米国)" です。  
  
 .NET Framework の言語バージョンに関係なく、このプロパティの値は同じです。  
  
   
  
## Examples  
 次のコード例では、プライベート使用プレフィックスを持つカスタムカルチャを作成し、そのプロパティのセットを一覧表示します。 最初のプロパティには、カルチャの名前が表示されます。  
  
 [!code-cpp[sys.glob.carib1#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.carib1/CPP/carib.cpp#1)]
 [!code-csharp[sys.glob.carib1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib1/CS/carib.cs#1)]
 [!code-vb[sys.glob.carib1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib1/VB/carib.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作の値が <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作において、値の長さが 0 ～ 79 文字ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="CultureName">
      <MemberSignature Language="C#" Value="public string CultureName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CultureName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CultureName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CultureName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CultureName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CultureName : string" Usage="System.Globalization.CultureAndRegionInfoBuilder.CultureName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>作成するカルチャの名前を取得します。</summary>
        <value>現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトのカルチャ名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 戻り値は、<xref:System.Globalization.CultureAndRegionInfoBuilder.%23ctor%2A> コンストラクターで指定されたカルチャの名前です。 指定したカルチャ名が既存のカルチャと同じ場合、戻り値は、指定されたカルチャ名ではなく、既存のカルチャの名前になります。  
  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.CultureName%2A> プロパティは、<xref:System.Globalization.CultureInfo.Name%2A> プロパティに対応します。  
  
   
  
## Examples  
 次のコード例では、プライベート使用プレフィックスを持つカスタムカルチャを作成し、そのプロパティのセットを一覧表示します。 最初のプロパティには、カルチャの名前が表示されます。  
  
 [!code-cpp[sys.glob.carib1#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.carib1/CPP/carib.cpp#1)]
 [!code-csharp[sys.glob.carib1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib1/CS/carib.cs#1)]
 [!code-vb[sys.glob.carib1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib1/VB/carib.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CultureNativeName">
      <MemberSignature Language="C#" Value="public string CultureNativeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CultureNativeName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CultureNativeName" />
      <MemberSignature Language="VB.NET" Value="Public Property CultureNativeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CultureNativeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CultureNativeName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.CultureNativeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カルチャの表示用に設定されている形式および言語でカルチャ名を取得または設定します。</summary>
        <value>カルチャの表示用に設定されている形式および言語でのカルチャ名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.CultureNativeName%2A> プロパティは、<xref:System.Globalization.CultureInfo.NativeName%2A> プロパティに対応します。  
  
 .NET Framework の言語バージョンに関係なく、このプロパティの値は同じです。  
  
 カルチャの言語が正しく表示されないようにシステムが設定されていない場合、カルチャの完全名が正しく表示されないことがあります。 たとえば、<xref:System.Globalization.CultureAndRegionInfoBuilder.CultureName%2A> プロパティが日本語 (日本) の "ja-jp" の場合、<xref:System.Globalization.CultureAndRegionInfoBuilder.CultureNativeName%2A> プロパティは、英語のみに設定されているシステムでは正しく表示されません。 ただし、Windows 2000 などの複数言語のオペレーティングシステムでは、<xref:System.Globalization.CultureAndRegionInfoBuilder.CultureNativeName%2A> プロパティが正しく表示されます。  
  
   
  
## Examples  
 次のコード例では、プライベート使用プレフィックスを持つカスタムカルチャを作成し、そのプロパティのセットを一覧表示します。 最初のプロパティには、カルチャの名前が表示されます。  
  
 [!code-cpp[sys.glob.carib1#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.carib1/CPP/carib.cpp#1)]
 [!code-csharp[sys.glob.carib1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib1/CS/carib.cs#1)]
 [!code-vb[sys.glob.carib1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib1/VB/carib.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作の値が <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作において、値の長さが 0 ～ 79 文字ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="CultureTypes">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureTypes CultureTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.CultureTypes CultureTypes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CultureTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CultureTypes As CultureTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureTypes CultureTypes { System::Globalization::CultureTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.CultureTypes : System.Globalization.CultureTypes" Usage="System.Globalization.CultureAndRegionInfoBuilder.CultureTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトで表されるカルチャを記述する <see cref="T:System.Globalization.CultureTypes" /> 値を取得します。</summary>
        <value><see cref="T:System.Globalization.CultureTypes" /> 値のいずれか 1 つです。</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Globalization.CultureTypes" />
        <altmember cref="P:System.Globalization.CultureInfo.CultureTypes" />
        <altmember cref="M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyEnglishName">
      <MemberSignature Language="C#" Value="public string CurrencyEnglishName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencyEnglishName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CurrencyEnglishName" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyEnglishName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrencyEnglishName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyEnglishName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.CurrencyEnglishName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトで表される国/地域で使用される通貨の、英語での名前を取得または設定します。</summary>
        <value>地域で使用される通貨を英語で表した名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.CurrencyEnglishName%2A> プロパティは、<xref:System.Globalization.RegionInfo.CurrencyEnglishName%2A> プロパティと同じです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作の値が <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException">設定操作の値が空の文字列 ("") です。</exception>
        <exception cref="T:System.NotSupportedException">現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトは、ニュートラル カルチャです。</exception>
      </Docs>
    </Member>
    <Member MemberName="CurrencyNativeName">
      <MemberSignature Language="C#" Value="public string CurrencyNativeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencyNativeName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CurrencyNativeName" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyNativeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrencyNativeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyNativeName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.CurrencyNativeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトで表される国/地域で使用される通貨の、ネイティブ言語での名前を取得または設定します。</summary>
        <value>ISO 3166 の国/地域コードに関連付けられた言語で書式指定された、現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトで表される国/地域で使用される通貨の名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.CurrencyNativeName%2A> プロパティは、<xref:System.Globalization.RegionInfo.CurrencyNativeName%2A> プロパティと同じです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作の値が <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException">設定操作の値が空の文字列 ("") です。</exception>
        <exception cref="T:System.NotSupportedException">現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトは、ニュートラル カルチャです。</exception>
      </Docs>
    </Member>
    <Member MemberName="GeoId">
      <MemberSignature Language="C#" Value="public int GeoId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GeoId" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.GeoId" />
      <MemberSignature Language="VB.NET" Value="Public Property GeoId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int GeoId { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.GeoId : int with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.GeoId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>地理的な領域、国、都市、または場所の一意の識別番号を取得または設定します。</summary>
        <value>地理的な場所を一意に識別する 32 ビットの符号付き数値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.GeoId%2A> プロパティは、<xref:System.Globalization.RegionInfo.GeoId%2A> プロパティに対応します。  
  
 アプリケーションでは、<xref:System.Globalization.CultureAndRegionInfoBuilder.GeoId%2A> プロパティを使用して、カルチャ固有のサービスを顧客に提供する必要があります。 たとえば、<xref:System.Globalization.CultureAndRegionInfoBuilder.GeoId%2A> プロパティは、領域に関する特定の情報を格納するデータベースレコードにアクセスするためのキーとして使用できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトは、ニュートラル カルチャを定義します。</exception>
      </Docs>
    </Member>
    <Member MemberName="GregorianDateTimeFormat">
      <MemberSignature Language="C#" Value="public System.Globalization.DateTimeFormatInfo GregorianDateTimeFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.DateTimeFormatInfo GregorianDateTimeFormat" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.GregorianDateTimeFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property GregorianDateTimeFormat As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::DateTimeFormatInfo ^ GregorianDateTimeFormat { System::Globalization::DateTimeFormatInfo ^ get(); void set(System::Globalization::DateTimeFormatInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.GregorianDateTimeFormat : System.Globalization.DateTimeFormatInfo with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.GregorianDateTimeFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>グレゴリオ暦に従って日付と時刻の書式を定義する <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトを取得または設定します。</summary>
        <value><see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在の <xref:System.Globalization.CultureAndRegionInfoBuilder> オブジェクトで定義されているカルチャを含むすべてのカルチャには、<xref:System.Globalization.DateTimeFormatInfo> オブジェクトに関連付けられたローカライズされたグレゴリオ暦が含まれています。 <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは、アプリケーションでの日付と時刻の表示方法を定義します。 <xref:System.Globalization.CultureAndRegionInfoBuilder.GregorianDateTimeFormat%2A> プロパティ値は、<xref:System.Globalization.CultureAndRegionInfoBuilder.AvailableCalendars%2A> プロパティによって返される、ローカライズされた最初のグレゴリオ暦に関連付けられた <xref:System.Globalization.DateTimeFormatInfo> オブジェクトです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作の値が <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作において値のプロパティから無効なプロパティ値が返されました。</exception>
        <exception cref="T:System.NotSupportedException">現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトは、ニュートラル カルチャです。</exception>
      </Docs>
    </Member>
    <Member MemberName="IetfLanguageTag">
      <MemberSignature Language="C#" Value="public string IetfLanguageTag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IetfLanguageTag" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.IetfLanguageTag" />
      <MemberSignature Language="VB.NET" Value="Public Property IetfLanguageTag As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IetfLanguageTag { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.IetfLanguageTag : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.IetfLanguageTag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>RFC 4646 標準『Tags for the Identification of Languages』に従って書式設定されたカルチャ名を取得または設定します。</summary>
        <value>RFC 4646 に従って書式設定されたカルチャ名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.IetfLanguageTag%2A> プロパティは、RFC 4646 に従って書式設定されたカルチャ名を取得または設定します。これは、<xref:System.Globalization.CultureInfo.Name%2A> プロパティによって返されるカルチャ名とは異なる場合があります。 たとえば、.NET Framework バージョン1.0 では、繁体字中国語のニュートラルカルチャ名は "zh-tw-CHT" でした。 これに対し、RFC 4646 では、カルチャ名が "zh-tw-ZH-HANT" として定義されています。 (.NET Framework version 4 では、"zh-tw-CHT" の表示名は "中国語 (繁体字) レガシ" です)。  
  
 RFC 4646 カルチャ名は、いくつかのコンポーネントで構成されています。 一般的なカルチャ名は、必須言語識別子、オプションのスクリプト識別子、および省略可能な国/地域識別子で構成されます。 たとえば、セルビア語の有効な RFC 4646 カルチャ名、キリル語スクリプト、およびセルビアの地域は、"Cyrl-RS" です。  
  
 2つ以上のカルチャが同じ IETF 言語タグを持つことができることに注意してください。  
  
 詳細については、「[コメントの要求](https://go.microsoft.com/fwlink/?linkid=45286)」の RFC 4646 「言語の Id のタグ」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作で値が <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作において、値の長さが 1 ～ 84 文字ではありません。</exception>
        <exception cref="T:System.ArgumentException">設定操作において、値に指定された名前の構成要素が空であるかまたは 8 文字を超えています。または、英数字文字またはハイフン (-) ではないか、または名前の先頭または末尾にハイフンが含まれています。</exception>
        <altmember cref="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsMetric">
      <MemberSignature Language="C#" Value="public bool IsMetric { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMetric" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.IsMetric" />
      <MemberSignature Language="VB.NET" Value="Public Property IsMetric As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMetric { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsMetric : bool with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.IsMetric" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>国/地域で、計測のためにメートル法を使用するかどうかを示す値を取得または設定します。</summary>
        <value>国/地域で、計測のためにメートル法を使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">この操作は、ニュートラル カルチャに対しては無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ISOCurrencySymbol">
      <MemberSignature Language="C#" Value="public string ISOCurrencySymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ISOCurrencySymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.ISOCurrencySymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property ISOCurrencySymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ISOCurrencySymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ISOCurrencySymbol : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.ISOCurrencySymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>国/地域に関連付けられた 3 文字の ISO 4217 通貨記号を取得または設定します。</summary>
        <value>国/地域に関連付けられた 3 文字の ISO 4217 通貨記号。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.ISOCurrencySymbol%2A> プロパティは、<xref:System.Globalization.RegionInfo.ISOCurrencySymbol%2A> プロパティに対応します。  
  
 3文字の ISO 4217 通貨記号の一覧は、<xref:System.Globalization.RegionInfo> クラスのトピックに記載されています。 たとえば、米国ドルの ISO 4217 通貨記号は "USD" です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">これはニュートラル カルチャです。</exception>
        <exception cref="T:System.ArgumentNullException">設定操作で値が <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作において、値の長さが 0 ～ 8 文字ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsRightToLeft">
      <MemberSignature Language="C#" Value="public bool IsRightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.IsRightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Property IsRightToLeft As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRightToLeft { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsRightToLeft : bool with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.IsRightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトに関連付けられている書記体系のテキストの記述方向を取得または設定します。</summary>
        <value>現在の書記体系のテキストの記述方向が右から左の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションでは、<xref:System.Globalization.CultureAndRegionInfoBuilder.IsRightToLeft%2A> プロパティを使用して、グラフィカルユーザーインターフェイスでのボタンやスクロールバーなどのコントロールの相対的な位置を決定します。  
  
 現在の <xref:System.Globalization.CultureAndRegionInfoBuilder> オブジェクトから作成されたカスタムカルチャ内のテキストの最も優れた方向にアクセスするには、アプリケーションで、カスタムカルチャの <xref:System.Globalization.CultureInfo.TextInfo%2A> プロパティによって返されるオブジェクトの <xref:System.Globalization.TextInfo.IsRightToLeft%2A> プロパティを使用する必要があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyboardLayoutId">
      <MemberSignature Language="C#" Value="public int KeyboardLayoutId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeyboardLayoutId" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.KeyboardLayoutId" />
      <MemberSignature Language="VB.NET" Value="Public Property KeyboardLayoutId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int KeyboardLayoutId { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.KeyboardLayoutId : int with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.KeyboardLayoutId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アクティブな入力ロケール識別子を取得または設定します。</summary>
        <value>入力ロケール識別子を指定する 32 ビットの符号付き数値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.KeyboardLayoutId%2A> プロパティは、<xref:System.Globalization.CultureInfo.KeyboardLayoutId%2A> プロパティに対応します。  
  
 入力ロケール識別子は、以前はキーボードレイアウトと呼ばれていました。 この識別子は、音声テキスト変換コンバーター、入力方式エディター (IME)、またはその他の入力形式に使用できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作の値が 0 です。</exception>
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public int LCID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.LCID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LCID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LCID { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LCID : int" Usage="System.Globalization.CultureAndRegionInfoBuilder.LCID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトのカルチャ識別子を取得します。</summary>
        <value>現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトのカルチャ識別子。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.LCID%2A?displayProperty=nameWithType> プロパティは、<xref:System.Globalization.CultureInfo.LCID%2A?displayProperty=nameWithType> プロパティに対応します。  
  
 置換カルチャの場合、カルチャ識別子は対応する各国語サポート (NLS) ロケール識別子にマップされます。 ユーザー定義のカスタムカルチャの場合、このプロパティの値は常に16進数の0x1000 になります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadDataFromCultureInfo">
      <MemberSignature Language="C#" Value="public void LoadDataFromCultureInfo (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadDataFromCultureInfo(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.LoadDataFromCultureInfo(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadDataFromCultureInfo (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadDataFromCultureInfo(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.LoadDataFromCultureInfo : System.Globalization.CultureInfo -&gt; unit" Usage="cultureAndRegionInfoBuilder.LoadDataFromCultureInfo culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">プロパティの使用元のオブジェクト。</param>
        <summary>現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトのプロパティを、指定した <see cref="T:System.Globalization.CultureInfo" /> オブジェクトの対応するプロパティを使用して設定します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="culture" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadDataFromRegionInfo">
      <MemberSignature Language="C#" Value="public void LoadDataFromRegionInfo (System.Globalization.RegionInfo region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadDataFromRegionInfo(class System.Globalization.RegionInfo region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.LoadDataFromRegionInfo(System.Globalization.RegionInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadDataFromRegionInfo (region As RegionInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadDataFromRegionInfo(System::Globalization::RegionInfo ^ region);" />
      <MemberSignature Language="F#" Value="member this.LoadDataFromRegionInfo : System.Globalization.RegionInfo -&gt; unit" Usage="cultureAndRegionInfoBuilder.LoadDataFromRegionInfo region" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Globalization.RegionInfo" />
      </Parameters>
      <Docs>
        <param name="region">プロパティの使用元のオブジェクト。</param>
        <summary>現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトのプロパティを、指定した <see cref="T:System.Globalization.RegionInfo" /> オブジェクトの対応するプロパティを使用して設定します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="region" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトがニュートラル カルチャを指定しているため、国/地域情報を設定できません。</exception>
      </Docs>
    </Member>
    <Member MemberName="NumberFormat">
      <MemberSignature Language="C#" Value="public System.Globalization.NumberFormatInfo NumberFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.NumberFormatInfo NumberFormat" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.NumberFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberFormat As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::NumberFormatInfo ^ NumberFormat { System::Globalization::NumberFormatInfo ^ get(); void set(System::Globalization::NumberFormatInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NumberFormat : System.Globalization.NumberFormatInfo with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.NumberFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>数値、通貨、および割合を表示する、カルチャに適切な書式を定義する <see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトを取得または設定します。</summary>
        <value>数値、通貨、および割合を表示する、カルチャに適切な書式を定義する <see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.NumberFormat%2A> プロパティは、<xref:System.Globalization.CultureInfo.NumberFormat%2A> プロパティに対応します。  
  
 アプリケーションでは、特定のカルチャに対してのみこのプロパティを呼び出す必要があります。  
  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.NumberFormat%2A> の <xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A>、<xref:System.Globalization.NumberFormatInfo.PercentGroupSeparator%2A>、<xref:System.Globalization.NumberFormatInfo.PercentGroupSizes%2A>、および <xref:System.Globalization.NumberFormatInfo.PercentDecimalDigits%2A> の各プロパティは無視されます。 保存されているカルチャの形式では、これらのプロパティの明示的な値は保存されません。 代わりに、カルチャが読み込まれると、常に、<xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>、<xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>、<xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A>、および <xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A>が既定で設定されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作の値が <see langword="null" />です。</exception>
        <exception cref="T:System.NotSupportedException">この操作は、ニュートラル カルチャに対しては無効です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">このカルチャに対して指定された数値プロパティ、通貨プロパティ、または割合プロパティの桁数が多すぎるか、値が範囲外です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Parent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Parent" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.Parent" />
      <MemberSignature Language="VB.NET" Value="Public Property Parent As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Parent { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のカスタム カルチャの親カルチャを表す <see cref="T:System.Globalization.CultureInfo" /> オブジェクトを取得または設定します。</summary>
        <value>現在のカスタム カルチャの親カルチャを表す <see cref="T:System.Globalization.CultureInfo" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 カルチャには階層があります。 定義済みのカルチャでは、特定のカルチャの親はニュートラルカルチャであり、ニュートラルカルチャの親は <xref:System.Globalization.CultureInfo.InvariantCulture%2A>です。 親カルチャには、その子に共通する情報のセットのみが含まれます。  
  
 一般に、カスタムカルチャはこの階層に準拠することをお勧めします。 ただし、既定では、カスタムカルチャの <xref:System.Globalization.CultureAndRegionInfoBuilder.Parent%2A> は、基になるカルチャの <xref:System.Globalization.CultureAndRegionInfoBuilder.Parent%2A> です。 アプリケーションで "en-us" に基づく <xref:System.Globalization.CultureAndRegionInfoBuilder.CultureName%2A> "en-us-MyCulture" を使用してカルチャを作成した場合、その親は "en-us" の <xref:System.Globalization.CultureAndRegionInfoBuilder.Parent%2A> であるため、"en" になります。 アプリケーションが新しいカスタムカルチャの <xref:System.Globalization.CultureAndRegionInfoBuilder.Parent%2A> として "en-us" を使用する場合は、この値を明示的に設定する必要があります。  
  
 特定のカルチャのリソースがシステムで使用できない場合は、ニュートラルカルチャのリソースが使用されます。 ニュートラルカルチャのリソースが使用できない場合は、メインアセンブリに埋め込まれているリソースが使用されます。 リソースフォールバックプロセスの詳細については、「[リソースのパッケージ化と配置](/dotnet/framework/resources/packaging-and-deploying-resources-in-desktop-apps)」を参照してください。  
  
 Windows API のカルチャの一覧は、.NET Framework のカルチャの一覧とは若干異なります。 たとえば、プラットフォーム呼び出し機構などによって Windows との相互運用性が必要な場合、アプリケーションは .NET Framework で定義されている特定のカルチャを使用する必要があります。 これにより、同じ <xref:System.Globalization.CultureInfo.LCID%2A>で識別される同等の Windows ロケールとの一貫性が確保されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">設定操作において、カルチャ値が見つかりません。 割り当てられた値が未登録のカスタム カルチャである可能性があります。</exception>
        <exception cref="T:System.ArgumentNullException">設定操作で値が <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException">現在のカルチャの先祖を走査する設定操作において、先祖の 10 世代内にインバリアント カルチャが見つかりません。  
  
 または  
  
 設定操作において、循環参照が見つかりました。割り当てられた値は、現在のカスタム カルチャの先祖です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RegionEnglishName">
      <MemberSignature Language="C#" Value="public string RegionEnglishName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RegionEnglishName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.RegionEnglishName" />
      <MemberSignature Language="VB.NET" Value="Public Property RegionEnglishName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RegionEnglishName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RegionEnglishName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.RegionEnglishName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>英語で表した国/地域の完全名を取得または設定します。</summary>
        <value>英語で表した国/地域の完全名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.RegionEnglishName%2A> プロパティは、<xref:System.Globalization.RegionInfo.EnglishName%2A> プロパティに対応します。  
  
 たとえば、米国の <xref:System.Globalization.CultureAndRegionInfoBuilder.RegionEnglishName%2A> の戻り値は "米国" です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">この操作は、ニュートラル カルチャに対しては無効です。</exception>
        <exception cref="T:System.ArgumentNullException">設定操作の値が <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作において、値の長さが 0 ～ 79 文字ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="RegionName">
      <MemberSignature Language="C#" Value="public string RegionName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RegionName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.RegionName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RegionName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RegionName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RegionName : string" Usage="System.Globalization.CultureAndRegionInfoBuilder.RegionName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトの国/地域の名前を取得します。</summary>
        <value>現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトの国/地域の名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 戻り値は、<xref:System.Globalization.CultureAndRegionInfoBuilder.%23ctor%2A> コンストラクターで指定されたカルチャの名前です。 指定したカルチャ名が既存のカルチャと同じ場合、戻り値は、指定されたカルチャ名ではなく、既存のカルチャの名前になります。  
  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.RegionName%2A> プロパティは、<xref:System.Globalization.RegionInfo.Name%2A> プロパティに対応します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">この操作は、ニュートラル カルチャに対しては無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RegionNativeName">
      <MemberSignature Language="C#" Value="public string RegionNativeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RegionNativeName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.RegionNativeName" />
      <MemberSignature Language="VB.NET" Value="Public Property RegionNativeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RegionNativeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RegionNativeName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.RegionNativeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このカスタム カルチャが適用される人々の間で使用される国/地域の完全名を取得または設定します。</summary>
        <value>国/地域のローカル名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.RegionNativeName%2A> プロパティは、<xref:System.Globalization.RegionInfo.NativeName%2A> プロパティに対応します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">この操作は、ニュートラル カルチャに対しては無効です。</exception>
        <exception cref="T:System.ArgumentNullException">設定操作の値が <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作において、値の長さが 1 ～ 79 文字ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public void Register ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Register() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.Register" />
      <MemberSignature Language="VB.NET" Value="Public Sub Register ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Register();" />
      <MemberSignature Language="F#" Value="member this.Register : unit -&gt; unit" Usage="cultureAndRegionInfoBuilder.Register " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトをローカル コンピューター上でカスタム カルチャとして保持して、アプリケーションでカルチャを使用できるようにします。 管理特権が必要となります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.Register%2A> メソッドは、カスタムカルチャをファイルとしてローカルコンピューター上のファイルとして格納します。これは、Win32 [Getwindowsdirectory](https://go.microsoft.com/fwlink/?LinkId=191561)関数によって返されるディレクトリのグローバリゼーションサブディレクトリにあります。 このプロセスは、カスタムカルチャの登録と呼ばれます。 カスタムカルチャを登録した後、<xref:System.Globalization.CultureInfo.%23ctor%2A> コンストラクターでカルチャ名を指定するか、<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> メソッドを呼び出すときに、新しいカスタムカルチャを作成できます。  
  
 カスタムカルチャは、<xref:System.Globalization.CultureAndRegionInfoBuilder.Unregister%2A> メソッドを呼び出すことによって削除できます。  
  
   
  
## Examples  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.Register%2A>メソッドの例を次に示します。  
  
 [!code-csharp[sys.glob.carib.register#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib.register/CS/persist.cs#1)]
 [!code-vb[sys.glob.carib.register#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib.register/VB/persist.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このカスタム カルチャは既に登録されています。  
  
または 
カルチャを登録する前に設定する必要があるプロパティが現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトにあります。 すべてのニュートラルまたは特定のカルチャには、<see cref="P:System.Globalization.CultureAndRegionInfoBuilder.TextInfo" /> と <see cref="P:System.Globalization.CultureAndRegionInfoBuilder.CompareInfo" /> のセットが必要です。 特定のカルチャには、<see cref="P:System.Globalization.CultureAndRegionInfoBuilder.NumberFormat" />、<see cref="P:System.Globalization.CultureAndRegionInfoBuilder.GregorianDateTimeFormat" />、および <see cref="P:System.Globalization.CultureAndRegionInfoBuilder.AvailableCalendars" /> のセットも必要となります。  
  
次のプロパティが未定義の場合、このメソッドでは <see cref="T:System.InvalidOperationException" /> もスローされます。 
 <see cref="P:System.Globalization.CultureAndRegionInfoBuilder.CultureEnglishName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.CultureNativeName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.CurrencyEnglishName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.CurrencyNativeName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.ISOCurrencySymbol" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.Parent" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.RegionEnglishName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.RegionNativeName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISOLanguageName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISORegionName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsLanguageName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsRegionName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISOLanguageName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISORegionName" /></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトのプロパティ値が最大長または最大値を超えています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに管理特権がありません。</exception>
        <altmember cref="M:System.Globalization.CultureAndRegionInfoBuilder.Unregister(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.Save(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ filename);" />
      <MemberSignature Language="F#" Value="member this.Save : string -&gt; unit" Usage="cultureAndRegionInfoBuilder.Save filename" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">このカスタム カルチャの XML 表現を格納するファイルの名前。</param>
        <summary>現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトの XML 表現を、指定したファイルに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A> メソッドは、現在の <xref:System.Globalization.CultureAndRegionInfoBuilder> オブジェクトを、Locale Data Markup Language (LDML) バージョン1.1 と呼ばれる XML 形式の `filename` パラメーターで指定されたファイルに書き込みます。 <xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A> メソッドは、<xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A> メソッドの逆の操作を実行します。  
  
 LDML ファイルの形式の詳細については、<xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A> メソッドを参照してください。 LDML 標準の詳細については、Unicode コンソーシアムの web サイトの「 [Unicode Technical standard #35」、「Locale Data Markup Language (LDML)」](https://go.microsoft.com/fwlink/p/?LinkId=252840)を参照してください。  
  
   
  
## Examples  
 次の例は、<xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A> メソッドと <xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A> メソッドを示しています。  
  
 [!code-csharp[sys.glob.carib.saveLdml#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib.saveLdml/cs/sl.cs#1)]
 [!code-vb[sys.glob.carib.saveLdml#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib.saveLdml/vb/sl.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="filename" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="filename" /> が空の文字列 ("") です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">現在の <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトに格納されている <see cref="T:System.Globalization.TextInfo" />、<see cref="T:System.Globalization.NumberFormatInfo" />、<see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> の各オブジェクトのプロパティの値が無効です。</exception>
        <altmember cref="M:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TextInfo">
      <MemberSignature Language="C#" Value="public System.Globalization.TextInfo TextInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.TextInfo TextInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.TextInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property TextInfo As TextInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::TextInfo ^ TextInfo { System::Globalization::TextInfo ^ get(); void set(System::Globalization::TextInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TextInfo : System.Globalization.TextInfo with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.TextInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.TextInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このカスタム カルチャに関連付けられている書記体系を定義する <see cref="T:System.Globalization.TextInfo" /> オブジェクトを取得または設定します。</summary>
        <value>このカスタム カルチャに関連付けられている書記体系を定義するオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.TextInfo%2A?displayProperty=nameWithType> プロパティは、文字列のカルチャ固有の大文字と小文字の情報を提供します。 これは、<xref:System.Globalization.CultureInfo.TextInfo%2A?displayProperty=nameWithType> プロパティに対応しています。  
  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.TextInfo%2A> および <xref:System.Globalization.CultureAndRegionInfoBuilder.CompareInfo%2A> プロパティに割り当てられている <xref:System.Globalization.TextInfo> オブジェクトと <xref:System.Globalization.CompareInfo> オブジェクトは、どちらもカルチャに依存し、大文字と小文字を区別する文字列比較をサポートしています。 <xref:System.Globalization.CompareInfo> オブジェクトには、カルチャに依存した大文字と小文字を区別しない比較をサポートする <xref:System.Globalization.CompareOptions> パラメーターを含むメソッドもあります。 これら2つのプロパティは、同じロケールを表すオブジェクト <xref:System.Globalization.TextInfo> と <xref:System.Globalization.CompareInfo> 割り当てる必要があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">置換カルチャでは、この操作はサポートされていません。</exception>
        <exception cref="T:System.ArgumentNullException">設定操作の値が <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">リストの区切り記号内の文字数が 0 ～ 3 の範囲外です。</exception>
        <altmember cref="P:System.Globalization.CultureAndRegionInfoBuilder.CompareInfo" />
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public string ThreeLetterISOLanguageName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterISOLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISOLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Property ThreeLetterISOLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ThreeLetterISOLanguageName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterISOLanguageName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISOLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このカスタム カルチャの言語に対する ISO 639-2 の 3 文字のコードを取得または設定します。</summary>
        <value>現在の <see cref="T:System.Globalization.CultureInfo" /> オブジェクトの言語に対する ISO 639-2 の 3 文字コード。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISOLanguageName%2A> プロパティは、<xref:System.Globalization.CultureInfo.ThreeLetterISOLanguageName%2A> プロパティに対応します。  
  
 たとえば、英語の3文字の省略形は "eng" です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作の値が <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作において、値の長さが 1 ～ 8 文字ではありません。</exception>
        <exception cref="T:System.ArgumentException">設定操作の値に、"a" ～ "z"、"A" ～ "Z"、または "0" ～ "9" の範囲外の文字が含まれています。</exception>
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterISORegionName">
      <MemberSignature Language="C#" Value="public string ThreeLetterISORegionName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterISORegionName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISORegionName" />
      <MemberSignature Language="VB.NET" Value="Public Property ThreeLetterISORegionName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ThreeLetterISORegionName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterISORegionName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISORegionName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ISO 3166 で定義された国/地域の 3 文字コードを取得または設定します。</summary>
        <value>ISO 3166 で定義された国/地域の 3 文字コード。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISORegionName%2A> プロパティは、<xref:System.Globalization.RegionInfo.ThreeLetterISORegionName%2A> プロパティに対応します。  
  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISORegionName%2A> プロパティには、ISO 3166 で定義されている国/地域の3文字コードのいずれかが含まれています。 たとえば、米国の3文字のコードは "USA" です。  
  
 大文字と小文字は区別されません。 ただし、<xref:System.Globalization.CultureAndRegionInfoBuilder.RegionName%2A>、<xref:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISORegionName%2A>、および <xref:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISORegionName%2A> の各プロパティには、適切なコードが大文字で含まれています。  
  
 定義済みの国/地域名は、<xref:System.Globalization.RegionInfo> クラスのトピックに記載されています。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作の値が <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作において、値の長さが 1 ～ 8 文字ではありません。</exception>
        <exception cref="T:System.ArgumentException">設定操作の値に、"a" ～ "z"、"A" ～ "Z"、または "0" ～ "9" の範囲外の文字が含まれています。</exception>
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterWindowsLanguageName">
      <MemberSignature Language="C#" Value="public string ThreeLetterWindowsLanguageName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterWindowsLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Property ThreeLetterWindowsLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ThreeLetterWindowsLanguageName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterWindowsLanguageName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Windows API の定義に従って、言語に対する 3 文字のコードを取得または設定します。</summary>
        <value>Windows API で定義されている言語に対する 3 文字のコード。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsLanguageName%2A> プロパティは、<xref:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName%2A> プロパティに対応します。  
  
 このプロパティは、LOCALE_SABBREVLANGNAME 値と `GetLocaleInfo` Windows API メソッドと同じ値を返します。 たとえば、Windows API で定義されているように、英語 (米国) の3文字のコードは "enu" です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作の値が <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作において、値の長さが 1 ～ 8 文字ではありません。</exception>
        <exception cref="T:System.ArgumentException">設定操作の値に、"a" ～ "z"、"A" ～ "Z"、または "0" ～ "9" の範囲外の文字が含まれています。</exception>
        <exception cref="T:System.NotSupportedException">設定操作において、現在のカスタム カルチャが置換カルチャです。</exception>
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterWindowsRegionName">
      <MemberSignature Language="C#" Value="public string ThreeLetterWindowsRegionName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterWindowsRegionName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsRegionName" />
      <MemberSignature Language="VB.NET" Value="Public Property ThreeLetterWindowsRegionName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ThreeLetterWindowsRegionName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterWindowsRegionName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsRegionName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のカスタム カルチャが表す国/地域に対して Windows が割り当てる 3 文字コードを取得または設定します。</summary>
        <value>この <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトが表す国/地域に対して Windows が割り当てる 3 文字コード。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsRegionName%2A> プロパティは、<xref:System.Globalization.RegionInfo.ThreeLetterWindowsRegionName%2A> プロパティに対応します。  
  
 たとえば、米国の3文字のコードは "USA" です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作の値が <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作において、値の長さが 1 ～ 8 文字ではありません。</exception>
        <exception cref="T:System.ArgumentException">設定操作の値に、"a" ～ "z"、"A" ～ "Z"、または "0" ～ "9" の範囲外の文字が含まれています。</exception>
        <exception cref="T:System.NotSupportedException">設定操作において、現在のカスタム カルチャが置換カルチャまたはニュートラル カルチャです。</exception>
      </Docs>
    </Member>
    <Member MemberName="TwoLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public string TwoLetterISOLanguageName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TwoLetterISOLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISOLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Property TwoLetterISOLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TwoLetterISOLanguageName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TwoLetterISOLanguageName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISOLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CultureInfo" /> オブジェクトの言語に対する ISO 639-1 の 2 文字のコードを取得または設定します。</summary>
        <value>現在の <see cref="T:System.Globalization.CultureInfo" /> オブジェクトの言語に対する ISO 639-1 の 2 文字コード。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISOLanguageName%2A> プロパティは、<xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A> プロパティに対応します。  
  
 たとえば、英語の2文字の省略形は "en" です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作の値が <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作において、値の長さが 1 ～ 8 文字ではありません。</exception>
        <exception cref="T:System.ArgumentException">設定操作の値に、"a" ～ "z"、"A" ～ "Z"、または "0" ～ "9" の範囲外の文字が含まれています。</exception>
      </Docs>
    </Member>
    <Member MemberName="TwoLetterISORegionName">
      <MemberSignature Language="C#" Value="public string TwoLetterISORegionName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TwoLetterISORegionName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISORegionName" />
      <MemberSignature Language="VB.NET" Value="Public Property TwoLetterISORegionName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TwoLetterISORegionName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TwoLetterISORegionName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISORegionName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ISO 3166 で定義された国/地域の 2 文字のコードを取得または設定します。</summary>
        <value>ISO 3166 で定義された国/地域の 2 文字コード。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISORegionName%2A> プロパティは、<xref:System.Globalization.RegionInfo.TwoLetterISORegionName%2A> プロパティに対応します。  
  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISORegionName%2A> プロパティ値は、ISO 3166 で定義されている国/地域の2文字のコードの1つです。 たとえば、米国の2文字のコードは "US" です。 定義済みの <xref:System.Globalization.RegionInfo> 名は、<xref:System.Globalization.RegionInfo> クラスのトピックに記載されています。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作の値が <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作において、値の長さが 1 ～ 8 文字ではありません。</exception>
        <exception cref="T:System.ArgumentException">設定操作の値に、"a" ～ "z"、"A" ～ "Z"、または "0" ～ "9" の範囲外の文字が含まれています。</exception>
        <exception cref="T:System.NotSupportedException">設定操作において、現在のカスタム カルチャがニュートラル カルチャです。</exception>
      </Docs>
    </Member>
    <Member MemberName="Unregister">
      <MemberSignature Language="C#" Value="public static void Unregister (string cultureName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unregister(string cultureName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.Unregister(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Unregister (cultureName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unregister(System::String ^ cultureName);" />
      <MemberSignature Language="F#" Value="static member Unregister : string -&gt; unit" Usage="System.Globalization.CultureAndRegionInfoBuilder.Unregister cultureName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cultureName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="cultureName">削除するカスタム カルチャの名前。</param>
        <summary>ローカル コンピューターからカスタム カルチャを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.Unregister%2A> メソッドは、<xref:System.Globalization.CultureAndRegionInfoBuilder.Register%2A> メソッドの逆の動作を行います。 <xref:System.Globalization.CultureAndRegionInfoBuilder.Register%2A> メソッドは、ローカルコンピューター上のファイルとしてカスタムカルチャをファイルとして格納します。これは、Windows API の[Getwindowsdirectory](https://go.microsoft.com/fwlink/?LinkId=191561)関数によって返されるディレクトリのグローバリゼーションサブディレクトリにあります。 <xref:System.Globalization.CultureAndRegionInfoBuilder.Unregister%2A> メソッドは、永続化されたカスタムカルチャファイルをコンピューターから削除します。 ファイルが削除されると、コンピューターのメモリ内のカスタムカルチャの既存のインスタンスは引き続き機能しますが、カスタムカルチャの新しいインスタンスを作成することはできません。  
  
   
  
## Examples  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.Unregister%2A>メソッドの例を次に示します。  
  
 [!code-csharp[sys.glob.carib.unregister#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib.unregister/CS/unregister.cs#1)]
 [!code-vb[sys.glob.carib.unregister#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib.unregister/VB/unregister.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><paramref name="cultureName" /> は、依存カルチャの親カルチャまたはコンソール フォールバック ユーザー インターフェイス カルチャです。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに管理特権がありません。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="cultureName" /> に指定されているカルチャが見つかりません。</exception>
        <altmember cref="M:System.Globalization.CultureAndRegionInfoBuilder.Register" />
      </Docs>
    </Member>
  </Members>
</Type>
