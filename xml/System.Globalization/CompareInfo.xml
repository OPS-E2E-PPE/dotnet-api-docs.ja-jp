<Type Name="CompareInfo" FullName="System.Globalization.CompareInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a2adaf85ffaf335a2f52fda8e955d3b6a0a5cae2" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78825030" /></Metadata><TypeSignature Language="C#" Value="public class CompareInfo" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CompareInfo extends System.Object" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CompareInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CompareInfo" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="C++ CLI" Value="public ref class CompareInfo" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="F#" Value="type CompareInfo = class" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="C#" Value="public class CompareInfo : System.Runtime.Serialization.IDeserializationCallback" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CompareInfo extends System.Object implements class System.Runtime.Serialization.IDeserializationCallback" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="VB.NET" Value="Public Class CompareInfo&#xA;Implements IDeserializationCallback" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class CompareInfo : System::Runtime::Serialization::IDeserializationCallback" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type CompareInfo = class&#xA;    interface IDeserializationCallback" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CompareInfo extends System.Object implements class System.Runtime.Serialization.IDeserializationCallback" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Globalization" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="System.Globalization" FromVersion="4.1.0.0" To="System.Runtime" ToVersion="4.2.0.0" FrameworkAlternate="netcore-2.0" />
    <TypeForwarding From="System.Globalization" FromVersion="4.1.1.0" To="System.Runtime" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
    <TypeForwarding From="System.Globalization" FromVersion="4.1.2.0" To="System.Runtime" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>カルチャごとに異なる文字列比較を行うための一連のメソッドを実装します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 データの比較と並べ替えの規則は、カルチャによって異なります。 たとえば、並べ替え順序は、ふりがなまたは文字の視覚的表現に基づいている場合があります。 東アジア圏の言語では、文字が表意文字の画数と部首によって並べ替えられます。 また、並べ替えは、言語やカルチャで使用されているアルファベットの順序によっても異なります。 たとえば、デンマーク語の文字 "Æ" は、アルファベットでは "Z" の後に位置します。 また、比較では大文字と小文字を区別するか、大文字と小文字を区別しないことがあります。また、大文字と小文字の規則はカルチャによって異なる <xref:System.Globalization.CompareInfo> クラスは、このカルチャに依存した文字列比較データを維持し、カルチャに依存した文字列操作を実行します。

 通常、<xref:System.Globalization.CompareInfo> オブジェクトを直接インスタンス化する必要はありません。これは、<xref:System.String.Compare%2A?displayProperty=nameWithType> メソッドの呼び出しを含む、すべての序数以外の文字列比較操作によって暗黙的に使用されるためです。 ただし、<xref:System.Globalization.CompareInfo> オブジェクトを取得する場合は、次のいずれかの方法で実行できます。

-   特定のカルチャの <xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=nameWithType> プロパティの値を取得する。

-   カルチャ名を使用して静的 <xref:System.Globalization.CompareInfo.GetCompareInfo%2A> メソッドを呼び出す。 これにより、<xref:System.Globalization.CompareInfo> オブジェクトへの遅延バインディングアクセスが可能になります。

## <a name="ignored-search-values"></a>無視された検索値
 文字セットには無視できる文字が含まれています。これらの文字は、言語またはカルチャに依存した比較を実行する際には考慮されません。 <xref:System.Globalization.CompareInfo.IndexOf%2A> や <xref:System.Globalization.CompareInfo.LastIndexOf%2A> などの比較メソッドでは、カルチャに依存した比較を実行するときに、このような文字は考慮されません。 無視する文字は次のとおりです。

-   [https://login.microsoftonline.com/consumers/](<xref:System.String.Empty?displayProperty=nameWithType>) カルチャに依存した比較メソッドは、検索対象の文字列の先頭 (インデックスゼロ) に空の文字列を常に検索します。

-   比較オプションにより、操作では考慮されないコードポイントを含む文字で構成される文字または文字列。特に、<xref:System.Globalization.CompareOptions.IgnoreNonSpace?displayProperty=nameWithType> オプションと <xref:System.Globalization.CompareOptions.IgnoreSymbols?displayProperty=nameWithType> オプションでは、記号と非スペーシング組み合わせ文字を無視する検索が生成されます。

-   言語的な意味を持たないコードポイントを含む文字列。 たとえば、カルチャに依存した文字列比較では、ソフトハイフン (U + 00AD) は常に無視されます。

## <a name="security-considerations"></a>セキュリティに関する考慮事項
 セキュリティの決定が文字列の比較またはケースの変更に依存している場合は、<xref:System.Globalization.CultureInfo.InvariantCulture%2A> プロパティを使用して、オペレーティングシステムのカルチャ設定に関係なく、動作が一貫していることを確認する必要があります。

> [!NOTE]
>  可能であれば、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つ文字列比較メソッドを使用して、予想される比較の種類を指定する必要があります。 一般的な規則として、ユーザーインターフェイスに表示される文字列を比較するには (現在のカルチャを使用して) 言語オプションを使用し、セキュリティ比較には <xref:System.Globalization.CompareOptions.Ordinal> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> を指定します。



## Examples
 次の例は、<xref:System.Globalization.CultureInfo> オブジェクトに関連付けられている <xref:System.Globalization.CompareInfo> オブジェクトが文字列比較にどのように影響するかを示しています。

 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]

 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://www.microsoft.com/download/details.aspx?id=10921">Windows オペレーティングシステムの重みテーブルの並べ替え</related>
    <related type="ExternalDocumentation" href="https://www.unicode.org/Public/UCA/latest/allkeys.txt">Linux および macOS 用の既定の Unicode 照合順序要素の表</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="Compare">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>2 つの文字列を比較します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, string string2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, string string2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, string2 As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, System::String ^ string2);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * string -&gt; int&#xA;override this.Compare : string * string -&gt; int" Usage="compareInfo.Compare (string1, string2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="string2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="string1">比較する最初の文字列。</param>
        <param name="string2">比較する 2 番目の文字列。</param>
        <summary>2 つの文字列を比較します。</summary>
        <returns>2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。

 <list type="table"><listheader><term> 値

 </term><description> 条件

 </description></listheader><item><term> ゼロ

 </term><description> 2 つの文字列は等価。

 </description></item><item><term> 0 より小さい値

 </term><description><paramref name="string1" /> が <paramref name="string2" />がスローされます。

 </description></item><item><term> 0 より大きい値

 </term><description><paramref name="string1" /> は <paramref name="string2" />がスローされます。

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 既定では、比較は <xref:System.Globalization.CompareOptions.None?displayProperty=nameWithType>を使用して実行されます。 セキュリティの決定が文字列の比較またはケースの変更に依存している場合は、<xref:System.Globalization.CultureInfo.InvariantCulture%2A> プロパティを使用して、オペレーティングシステムのカルチャ設定に関係なく、動作が一貫していることを確認する必要があります。

> [!NOTE]
>  可能であれば、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つ文字列比較メソッドを呼び出して、予想される比較の種類を指定する必要があります。 一般的な規則として、ユーザーインターフェイスに表示される文字列を比較するには (現在のカルチャを使用して) 言語オプションを使用し、セキュリティ比較には <xref:System.Globalization.CompareOptions.Ordinal> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> を指定します。



## Examples
 次の例では、異なる <xref:System.Globalization.CompareInfo> オブジェクトを使用して、2つの文字列の部分を比較します。

-   国際並べ替えを使用してスペイン語 (スペイン) カルチャに関連付けられている <xref:System.Globalization.CompareInfo> オブジェクト

-   従来の並べ替えでスペイン語 (スペイン) カルチャに関連付けられている <xref:System.Globalization.CompareInfo> オブジェクト

-   <xref:System.Globalization.CultureInfo.InvariantCulture%2A> に関連付けられている <xref:System.Globalization.CompareInfo> オブジェクト

 [!code-cpp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]

 次の例では、<xref:System.Globalization.CompareInfo.Compare%2A> メソッドを呼び出す方法を示しています。

 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]

 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>文字セットには無視できる文字が含まれています。これらの文字は、言語またはカルチャに依存した比較を実行する際には考慮されません。 <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.String)" /> メソッドでは、カルチャに依存した比較を実行するときに、このような文字は考慮されません。 たとえば、次の例に示すように、カルチャに依存した "animal" と "ani-------------------------" を使用すると、2つの文字列が等価であることが示されます。

[! コード-vb[システム. Compareinfo 比較 # 1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.compare/vb/compare1.vb#1)]

文字列比較で無視できる文字を認識するには、<see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)" /> メソッドを呼び出し、<paramref name="options" /> パラメーターに <see cref="F:System.Globalization.CompareOptions.Ordinal" /> または <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> のいずれかの値を指定します。</para></block>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, string string2, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, string string2, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, string2 As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, System::String ^ string2, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * string * System.Globalization.CompareOptions -&gt; int&#xA;override this.Compare : string * string * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.Compare (string1, string2, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="string1">比較する最初の文字列。</param>
        <param name="string2">比較する 2 番目の文字列。</param>
        <param name="options"><paramref name="string1" /> と <paramref name="string2" /> の比較方法を定義する値。 <paramref name="options" /> は、それ自体で使用する列挙値 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> であるか、または <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />、<see cref="F:System.Globalization.CompareOptions.StringSort" /> の 1 つ以上の値のビットごとの組み合わせです。</param>
        <summary>指定した <see cref="T:System.Globalization.CompareOptions" /> 値を使用して、2 つの文字列を比較します。</summary>
        <returns>2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。

 <list type="table"><listheader><term> 値

 </term><description> 条件

 </description></listheader><item><term> ゼロ

 </term><description> 2 つの文字列は等価。

 </description></item><item><term> 0 より小さい値

 </term><description><paramref name="string1" /> が <paramref name="string2" />がスローされます。

 </description></item><item><term> 0 より大きい値

 </term><description><paramref name="string1" /> は <paramref name="string2" />がスローされます。

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 セキュリティの決定が文字列の比較またはケースの変更に依存している場合は、<xref:System.Globalization.CultureInfo.InvariantCulture%2A> プロパティを使用して、オペレーティングシステムのカルチャ設定に関係なく、動作が一貫していることを確認する必要があります。

> [!NOTE]
>  可能であれば、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つ文字列比較メソッドを呼び出して、予想される比較の種類を指定する必要があります。 一般的な規則として、ユーザーインターフェイスに表示される文字列を比較するには (現在のカルチャを使用して) 言語オプションを使用し、セキュリティ比較には <xref:System.Globalization.CompareOptions.Ordinal> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> を指定します。



## Examples
 次の例では、異なる <xref:System.Globalization.CompareOptions> 設定を使用して2つの文字列を比較しています。

 [!code-cpp[System.Globalization.CompareInfo.CompareStrStrOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/CPP/comparestrstropt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStrOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/CS/comparestrstropt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStrOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/VB/comparestrstropt.vb#1)]

 次の例では、<xref:System.Globalization.CompareInfo.Compare%2A> メソッドを呼び出す方法を示しています。

 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="options" /> に無効な <see cref="T:System.Globalization.CompareOptions" /> 値が含まれています。</exception>
        <block subset="none" type="usage"><para>文字セットには無視できる文字が含まれています。これらの文字は、言語またはカルチャに依存した比較を実行する際には考慮されません。 <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)" /> メソッドでは、カルチャに依存した比較を実行するときに、このような文字は考慮されません。 比較で無視できる文字を認識するには、<paramref name="options" /> パラメーターの値として <see cref="F:System.Globalization.CompareOptions.Ordinal" /> または <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> を指定します。</para></block>
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, string string2, int offset2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, string string2, int32 offset2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, string2 As String, offset2 As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, System::String ^ string2, int offset2);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * int * string * int -&gt; int&#xA;override this.Compare : string * int * string * int -&gt; int" Usage="compareInfo.Compare (string1, offset1, string2, offset2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="string1">比較する最初の文字列。</param>
        <param name="offset1"><paramref name="string1" /> 内の比較を開始する位置にある文字の 0 から始まるインデックス。</param>
        <param name="string2">比較する 2 番目の文字列。</param>
        <param name="offset2"><paramref name="string2" /> 内の比較を開始する位置にある文字の 0 から始まるインデックス。</param>
        <summary>文字列の末尾部分と別の文字列の末尾部分とを比較します。</summary>
        <returns>2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。

 <list type="table"><listheader><term> 値

 </term><description> 条件

 </description></listheader><item><term> ゼロ

 </term><description> 2 つの文字列は等価。

 </description></item><item><term> 0 より小さい値

 </term><description> <paramref name="string1" /> の指定部分は <paramref name="string2" /> の指定部分より小さい。

 </description></item><item><term> 0 より大きい値

 </term><description> <paramref name="string1" /> の指定部分は <paramref name="string2" /> の指定部分より大きい。

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 セキュリティの決定が文字列の比較またはケースの変更に依存している場合は、<xref:System.Globalization.CultureInfo.InvariantCulture%2A> プロパティを使用して、オペレーティングシステムのカルチャ設定に関係なく、動作が一貫していることを確認する必要があります。

> [!NOTE]
>  可能であれば、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つ文字列比較メソッドを呼び出して、予想される比較の種類を指定する必要があります。 一般的な規則として、ユーザーインターフェイスに表示される文字列を比較するには (現在のカルチャを使用して) 言語オプションを使用し、セキュリティ比較には <xref:System.Globalization.CompareOptions.Ordinal> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> を指定します。



## Examples
 次の例では、異なる <xref:System.Globalization.CompareInfo> オブジェクトを使用して、2つの文字列の部分を比較します。

-   国際並べ替えを使用してスペイン語 (スペイン) カルチャに関連付けられている <xref:System.Globalization.CompareInfo> オブジェクト

-   従来の並べ替えでスペイン語 (スペイン) カルチャに関連付けられている <xref:System.Globalization.CompareInfo> オブジェクト

-   <xref:System.Globalization.CultureInfo.InvariantCulture%2A> に関連付けられている <xref:System.Globalization.CompareInfo> オブジェクト

 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntStrInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/CPP/comparestrintstrint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntStrInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/CS/comparestrintstrint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntStrInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/VB/comparestrintstrint.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset1" /> または <paramref name="offset2" /> が 0 未満です。

または

 <paramref name="offset1" /> が <paramref name="string1" /> の文字数以上です。

または

 <paramref name="offset2" /> が <paramref name="string2" /> の文字数以上です。</exception>
        <block subset="none" type="usage"><para>文字セットには無視できる文字が含まれています。 <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)" /> メソッドは、言語またはカルチャに依存した比較を実行するときに、これらの文字を考慮しません。 比較で無視できる文字を認識するには、<see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)" /> メソッドを呼び出し、<paramref name="options" /> パラメーターに <see cref="F:System.Globalization.CompareOptions.Ordinal" /> または <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> の値を指定します。</para></block>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, string string2, int offset2, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, string string2, int32 offset2, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, string2 As String, offset2 As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, System::String ^ string2, int offset2, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * int * string * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.Compare : string * int * string * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.Compare (string1, offset1, string2, offset2, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="string1">比較する最初の文字列。</param>
        <param name="offset1"><paramref name="string1" /> 内の比較を開始する位置にある文字の 0 から始まるインデックス。</param>
        <param name="string2">比較する 2 番目の文字列。</param>
        <param name="offset2"><paramref name="string2" /> 内の比較を開始する位置にある文字の 0 から始まるインデックス。</param>
        <param name="options"><paramref name="string1" /> と <paramref name="string2" /> の比較方法を定義する値。 <paramref name="options" /> は、それ自体で使用する列挙値 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> であるか、または <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />、<see cref="F:System.Globalization.CompareOptions.StringSort" /> の 1 つ以上の値のビットごとの組み合わせです。</param>
        <summary>指定した <see cref="T:System.Globalization.CompareOptions" /> 値を使用して、文字列の末尾部分と別の文字列の末尾部分とを比較します。</summary>
        <returns>2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。

 <list type="table"><listheader><term> 値

 </term><description> 条件

 </description></listheader><item><term> ゼロ

 </term><description> 2 つの文字列は等価。

 </description></item><item><term> 0 より小さい値

 </term><description> <paramref name="string1" /> の指定部分は <paramref name="string2" /> の指定部分より小さい。

 </description></item><item><term> 0 より大きい値

 </term><description> <paramref name="string1" /> の指定部分は <paramref name="string2" /> の指定部分より大きい。

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 セキュリティの決定が文字列の比較またはケースの変更に依存している場合は、<xref:System.Globalization.CultureInfo.InvariantCulture%2A> プロパティを使用して、オペレーティングシステムのカルチャ設定に関係なく、動作が一貫していることを確認する必要があります。

> [!NOTE]
>  可能であれば、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つ文字列比較メソッドを呼び出して、予想される比較の種類を指定する必要があります。 一般的な規則として、ユーザーインターフェイスに表示される文字列を比較するには (現在のカルチャを使用して) 言語オプションを使用し、セキュリティ比較には <xref:System.Globalization.CompareOptions.Ordinal> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> を指定します。



## Examples
 次の例では、異なる <xref:System.Globalization.CompareOptions> 設定を使用して2つの文字列の部分を比較しています。

 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/CPP/comparestrintstrintopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/CS/comparestrintstrintopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/VB/comparestrintstrintopt.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset1" /> または <paramref name="offset2" /> が 0 未満です。

または

 <paramref name="offset1" /> が <paramref name="string1" /> の文字数以上です。

または

 <paramref name="offset2" /> が <paramref name="string2" /> の文字数以上です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" /> に無効な <see cref="T:System.Globalization.CompareOptions" /> 値が含まれています。</exception>
        <block subset="none" type="usage"><para>文字セットには無視できる文字が含まれています。これらの文字は、言語またはカルチャに依存した比較を実行する際には考慮されません。 <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)" /> メソッドでは、カルチャに依存した比較を実行するときに、このような文字は考慮されません。 比較で無視できる文字を認識するには、<paramref name="options" /> パラメーターの値として <see cref="F:System.Globalization.CompareOptions.Ordinal" /> または <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> を指定します。</para></block>
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, int length1, string string2, int offset2, int length2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, int32 length1, string string2, int32 offset2, int32 length2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, length1 As Integer, string2 As String, offset2 As Integer, length2 As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, int length1, System::String ^ string2, int offset2, int length2);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * int * int * string * int * int -&gt; int&#xA;override this.Compare : string * int * int * string * int * int -&gt; int" Usage="compareInfo.Compare (string1, offset1, length1, string2, offset2, length2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="length1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
        <Parameter Name="length2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="string1">比較する最初の文字列。</param>
        <param name="offset1"><paramref name="string1" /> 内の比較を開始する位置にある文字の 0 から始まるインデックス。</param>
        <param name="length1">比較対象の <paramref name="string1" /> に含まれる連続する文字の数。</param>
        <param name="string2">比較する 2 番目の文字列。</param>
        <param name="offset2"><paramref name="string2" /> 内の比較を開始する位置にある文字の 0 から始まるインデックス。</param>
        <param name="length2">比較対象の <paramref name="string2" /> に含まれる連続する文字の数。</param>
        <summary>文字列のセクションと別の文字列のセクションとを比較します。</summary>
        <returns>2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。

 <list type="table"><listheader><term> 値

 </term><description> 条件

 </description></listheader><item><term> ゼロ

 </term><description> 2 つの文字列は等価。

 </description></item><item><term> 0 より小さい値

 </term><description> <paramref name="string1" /> の指定部分は <paramref name="string2" /> の指定部分より小さい。

 </description></item><item><term> 0 より大きい値

 </term><description> <paramref name="string1" /> の指定部分は <paramref name="string2" /> の指定部分より大きい。

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 セキュリティの決定が文字列の比較またはケースの変更に依存している場合は、<xref:System.Globalization.CultureInfo.InvariantCulture%2A> プロパティを使用して、オペレーティングシステムのカルチャ設定に関係なく、動作が一貫していることを確認する必要があります。

> [!NOTE]
>  可能であれば、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つ文字列比較メソッドを使用して、予想される比較の種類を指定する必要があります。 一般的な規則として、ユーザーインターフェイスに表示される文字列を比較するには (現在のカルチャを使用して) 言語オプションを使用し、セキュリティ比較には <xref:System.Globalization.CompareOptions.Ordinal> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> を指定します。



## Examples
 次の例では、異なる <xref:System.Globalization.CompareInfo> オブジェクトを使用して、2つの文字列の部分を比較します。

-   国際並べ替えを使用してスペイン語 (スペイン) カルチャに関連付けられている <xref:System.Globalization.CompareInfo> オブジェクト

-   従来の並べ替えでスペイン語 (スペイン) カルチャに関連付けられている <xref:System.Globalization.CompareInfo> オブジェクト

-   <xref:System.Globalization.CultureInfo.InvariantCulture%2A> に関連付けられている <xref:System.Globalization.CompareInfo> オブジェクト

 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/CPP/comparestrintintstrintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/CS/comparestrintintstrintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/VB/comparestrintintstrintint.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset1" />、<paramref name="length1" />、<paramref name="offset2" />、または <paramref name="length2" /> が 0 未満です。

または

 <paramref name="offset1" /> が <paramref name="string1" /> の文字数以上です。

または

 <paramref name="offset2" /> が <paramref name="string2" /> の文字数以上です。

または

 <paramref name="length1" /> が、<paramref name="offset1" /> から <paramref name="string1" /> の末尾までの文字数を超えています。

または

 <paramref name="length2" /> が、<paramref name="offset2" /> から <paramref name="string2" /> の末尾までの文字数を超えています。</exception>
        <block subset="none" type="usage"><para>文字セットには無視できる文字が含まれています。 <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)" /> メソッドは、言語またはカルチャに依存した比較を実行するときに、これらの文字を考慮しません。 比較で無視できる文字を認識するには、<see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> メソッドを呼び出し、<paramref name="options" /> パラメーターに <see cref="F:System.Globalization.CompareOptions.Ordinal" /> または <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> の値を指定します。</para></block>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, int length1, string string2, int offset2, int length2, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, int32 length1, string string2, int32 offset2, int32 length2, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, length1 As Integer, string2 As String, offset2 As Integer, length2 As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, int length1, System::String ^ string2, int offset2, int length2, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * int * int * string * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.Compare : string * int * int * string * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.Compare (string1, offset1, length1, string2, offset2, length2, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="length1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
        <Parameter Name="length2" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="string1">比較する最初の文字列。</param>
        <param name="offset1"><paramref name="string1" /> 内の比較を開始する位置にある文字の 0 から始まるインデックス。</param>
        <param name="length1">比較対象の <paramref name="string1" /> に含まれる連続する文字の数。</param>
        <param name="string2">比較する 2 番目の文字列。</param>
        <param name="offset2"><paramref name="string2" /> 内の比較を開始する位置にある文字の 0 から始まるインデックス。</param>
        <param name="length2">比較対象の <paramref name="string2" /> に含まれる連続する文字の数。</param>
        <param name="options"><paramref name="string1" /> と <paramref name="string2" /> の比較方法を定義する値。 <paramref name="options" /> は、それ自体で使用する列挙値 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> であるか、または <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />、<see cref="F:System.Globalization.CompareOptions.StringSort" /> の 1 つ以上の値のビットごとの組み合わせです。</param>
        <summary>指定した <see cref="T:System.Globalization.CompareOptions" /> 値を使用して、ある文字列のセクションと別の文字列のセクションとを比較します。</summary>
        <returns>2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。

 <list type="table"><listheader><term> 値

 </term><description> 条件

 </description></listheader><item><term> ゼロ

 </term><description> 2 つの文字列は等価。

 </description></item><item><term> 0 より小さい値

 </term><description> <paramref name="string1" /> の指定部分は <paramref name="string2" /> の指定部分より小さい。

 </description></item><item><term> 0 より大きい値

 </term><description> <paramref name="string1" /> の指定部分は <paramref name="string2" /> の指定部分より大きい。

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 セキュリティの決定が文字列の比較またはケースの変更に依存している場合は、<xref:System.Globalization.CultureInfo.InvariantCulture%2A> プロパティを使用して、オペレーティングシステムのカルチャ設定に関係なく、動作が一貫していることを確認する必要があります。

> [!NOTE]
>  可能であれば、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つ文字列比較メソッドを呼び出して、予想される比較の種類を指定する必要があります。 一般的な規則として、ユーザーインターフェイスに表示される文字列を比較するには (現在のカルチャを使用して) 言語オプションを使用し、セキュリティ比較には <xref:System.Globalization.CompareOptions.Ordinal> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> を指定します。



## Examples
 次の例では、異なる <xref:System.Globalization.CompareOptions> 設定を使用して2つの文字列の部分を比較しています。

 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/CPP/comparestrintintstrintintopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/CS/comparestrintintstrintintopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/VB/comparestrintintstrintintopt.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset1" />、<paramref name="length1" />、<paramref name="offset2" />、または <paramref name="length2" /> が 0 未満です。

または

 <paramref name="offset1" /> が <paramref name="string1" /> の文字数以上です。

または

 <paramref name="offset2" /> が <paramref name="string2" /> の文字数以上です。

または

 <paramref name="length1" /> が、<paramref name="offset1" /> から <paramref name="string1" /> の末尾までの文字数を超えています。

または

 <paramref name="length2" /> が、<paramref name="offset2" /> から <paramref name="string2" /> の末尾までの文字数を超えています。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" /> に無効な <see cref="T:System.Globalization.CompareOptions" /> 値が含まれています。</exception>
        <block subset="none" type="usage"><para>文字セットには無視できる文字が含まれています。 <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> メソッドでは、カルチャに依存した比較を実行するときに、これらの文字は考慮されません。 比較で無視できる文字を認識するには、<paramref name="options" /> パラメーターの値として <see cref="F:System.Globalization.CompareOptions.Ordinal" /> または <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> を指定します。</para></block>
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="compareInfo.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">現在の <see cref="T:System.Globalization.CompareInfo" />と比較するオブジェクト。</param>
        <summary>指定のオブジェクトが現在の <see cref="T:System.Globalization.CompareInfo" /> オブジェクトと等しいかどうかを判断します。</summary>
        <returns>指定したオブジェクトが現在の <see langword="true" /> オブジェクトと等しい場合は <see cref="T:System.Globalization.CompareInfo" />、それ以外の場合は <see langword="false" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 2つの <xref:System.Globalization.CompareInfo> オブジェクトは、<xref:System.Globalization.CompareInfo.LCID%2A> と <xref:System.Globalization.CompareInfo.Name%2A> プロパティが等しい場合に等しくなります。

 このメソッドは、<xref:System.Object.Equals%2A?displayProperty=nameWithType> をオーバーライドします。

 セキュリティの決定が文字列の比較またはケースの変更に依存している場合は、<xref:System.Globalization.CultureInfo.InvariantCulture%2A> プロパティを使用して、オペレーティングシステムのカルチャ設定に関係なく、動作が一貫していることを確認する必要があります。

 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCompareInfo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>新しい <see cref="T:System.Globalization.CompareInfo" /> オブジェクトを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(int32 culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCompareInfo (culture As Integer) As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(int culture);" />
      <MemberSignature Language="F#" Value="static member GetCompareInfo : int -&gt; System.Globalization.CompareInfo" Usage="System.Globalization.CompareInfo.GetCompareInfo culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="culture">カルチャ識別子を表す整数。</param>
        <summary>指定した識別子のカルチャに関連付けられている新しい <see cref="T:System.Globalization.CompareInfo" /> オブジェクトを初期化します。</summary>
        <returns>指定した識別子のカルチャに関連付けられ、現在の <see cref="T:System.Globalization.CompareInfo" /> 内の文字列比較メソッドを使用する新しい <see cref="T:System.Reflection.Assembly" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 次の例では、異なる <xref:System.Globalization.CompareInfo> オブジェクトを使用して、2つの文字列の部分を比較します。

-   国際並べ替えを使用してスペイン語 (スペイン) カルチャに関連付けられている <xref:System.Globalization.CompareInfo> オブジェクト

-   従来の並べ替えでスペイン語 (スペイン) カルチャに関連付けられている <xref:System.Globalization.CompareInfo> オブジェクト

-   <xref:System.Globalization.CultureInfo.InvariantCulture%2A> に関連付けられている <xref:System.Globalization.CompareInfo> オブジェクト

 [!code-cpp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCompareInfo (name As String) As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetCompareInfo : string -&gt; System.Globalization.CompareInfo" Usage="System.Globalization.CompareInfo.GetCompareInfo name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">カルチャ名を表す文字列。</param>
        <summary>指定した名前のカルチャに関連付けられている新しい <see cref="T:System.Globalization.CompareInfo" /> オブジェクトを初期化します。</summary>
        <returns>指定した識別子のカルチャに関連付けられ、現在の <see cref="T:System.Globalization.CompareInfo" /> 内の文字列比較メソッドを使用する新しい <see cref="T:System.Reflection.Assembly" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 次の例では、異なる <xref:System.Globalization.CompareInfo> オブジェクトを使用して、2つの文字列の部分を比較します。

-   国際並べ替えを使用してスペイン語 (スペイン) カルチャに関連付けられている <xref:System.Globalization.CompareInfo> オブジェクト

-   従来の並べ替えでスペイン語 (スペイン) カルチャに関連付けられている <xref:System.Globalization.CompareInfo> オブジェクト

-   <xref:System.Globalization.CultureInfo.InvariantCulture%2A> に関連付けられている <xref:System.Globalization.CompareInfo> オブジェクト

 [!code-cpp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> が無効なカルチャ名です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (int culture, System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(int32 culture, class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.Int32,System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCompareInfo (culture As Integer, assembly As Assembly) As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(int culture, System::Reflection::Assembly ^ assembly);" />
      <MemberSignature Language="F#" Value="static member GetCompareInfo : int * System.Reflection.Assembly -&gt; System.Globalization.CompareInfo" Usage="System.Globalization.CompareInfo.GetCompareInfo (culture, assembly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="assembly" Type="System.Reflection.Assembly" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="culture">カルチャ識別子を表す整数。</param>
        <param name="assembly">使用する文字列比較メソッドを含む <see cref="T:System.Reflection.Assembly" />。</param>
        <summary>指定したカルチャに関連付けられ、指定した <see cref="T:System.Globalization.CompareInfo" /> 内の文字列比較メソッドを使用する新しい <see cref="T:System.Reflection.Assembly" /> オブジェクトを初期化します。</summary>
        <returns>指定した識別子のカルチャに関連付けられ、現在の <see cref="T:System.Globalization.CompareInfo" /> 内の文字列比較メソッドを使用する新しい <see cref="T:System.Reflection.Assembly" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
>  このメソッドの動作は予測できません。 アプリケーションで、アセンブリ入力を受け取らないこのメソッドのバージョンを使用することをお勧めします。

 `assembly` パラメーターは <xref:System.Reflection.Module.Assembly%2A?displayProperty=nameWithType>と同じ型である必要があります。

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="assembly" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="assembly" /> が無効な型です。</exception>
        <altmember cref="P:System.Reflection.Module.Assembly" />
      </Docs>
    </Member>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (string name, System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(string name, class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.String,System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCompareInfo (name As String, assembly As Assembly) As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(System::String ^ name, System::Reflection::Assembly ^ assembly);" />
      <MemberSignature Language="F#" Value="static member GetCompareInfo : string * System.Reflection.Assembly -&gt; System.Globalization.CompareInfo" Usage="System.Globalization.CompareInfo.GetCompareInfo (name, assembly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="assembly" Type="System.Reflection.Assembly" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="name">カルチャ名を表す文字列。</param>
        <param name="assembly">使用する文字列比較メソッドを含む <see cref="T:System.Reflection.Assembly" />。</param>
        <summary>指定したカルチャに関連付けられ、指定した <see cref="T:System.Globalization.CompareInfo" /> 内の文字列比較メソッドを使用する新しい <see cref="T:System.Reflection.Assembly" /> オブジェクトを初期化します。</summary>
        <returns>指定した識別子のカルチャに関連付けられ、現在の <see cref="T:System.Globalization.CompareInfo" /> 内の文字列比較メソッドを使用する新しい <see cref="T:System.Reflection.Assembly" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
>  このメソッドの動作は予測できません。 アセンブリ入力を受け取らないこのメソッドのバージョンを使用することをお勧めします。

 `assembly` パラメーターは <xref:System.Reflection.Module.Assembly%2A?displayProperty=nameWithType>と同じ型である必要があります。

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> は <see langword="null" /> です。

または

 <paramref name="assembly" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> が無効なカルチャ名です。

または

 <paramref name="assembly" /> が無効な型です。</exception>
        <altmember cref="P:System.Reflection.Module.Assembly" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetHashCode">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Globalization.CompareInfo" /> インスタンスまたは特定の文字列のハッシュ コードを返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="compareInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CompareInfo" /> のハッシュ関数として機能し、ハッシュ アルゴリズムや、ハッシュ テーブルのようなデータ構造に使用されます。</summary>
        <returns>現在の <see cref="T:System.Globalization.CompareInfo" /> のハッシュ コードです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 このメソッドは、<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> をオーバーライドします。

 このメソッドは、<xref:System.Globalization.CompareInfo.Equals%2A> メソッドによって等しいと評価された 2 つのオブジェクトに対して同じハッシュ コードを生成します。

 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Globalization.CompareInfo.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode (ReadOnlySpan&lt;char&gt; source, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetHashCode(valuetype System.ReadOnlySpan`1&lt;char&gt; source, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetHashCode(System.ReadOnlySpan{System.Char},System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode (source As ReadOnlySpan(Of Char), options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetHashCode(ReadOnlySpan&lt;char&gt; source, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : ReadOnlySpan&lt;char&gt; * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.GetHashCode (source, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="source">ハッシュ コードが返される文字スパン。</param>
        <param name="options">文字列の比較方法を決定する値。</param>
        <summary>指定した比較オプションに基づいて文字スパンに対するハッシュ コードを取得します。</summary>
        <returns>32 ビットの符号付き整数のハッシュ コードです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 このオーバーロードの動作は、共通言語ランタイムのあるバージョンから別のバージョン、または .NET 実装間で変更される可能性がある実装に依存します。

> [!IMPORTANT]
>  2つの文字範囲が等しい場合、このオーバーロードは同じ値を返します。 ただし、一意の文字範囲値ごとに一意のハッシュコード値はありません。 文字の範囲が異なると、同じハッシュコードを返すことができます。
>
>  ハッシュコード自体は、安定しているとは限りません。 同一の文字範囲のハッシュコードは、.net 実装のバージョン間で異なる場合もあれば、1つのバージョンの .NET のプラットフォーム (32 ビットや64ビットなど) 間で異なる場合もあります。
>
>  このため、ハッシュコードは、作成されたアプリケーションドメインの外部では使用できません。また、コレクションのキーフィールドとして使用することは避け、永続化しないでください。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public virtual int GetHashCode (string source, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(string source, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetHashCode(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHashCode (source As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetHashCode(System::String ^ source, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : string * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.GetHashCode (source, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="source">ハッシュ コードが返される文字列。</param>
        <param name="options">文字列の比較方法を決定する値。</param>
        <summary>指定した比較オプションに基づいて文字列のハッシュ コードを取得します。</summary>
        <returns>32 ビットの符号付き整数のハッシュ コードです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Globalization.CompareInfo.GetHashCode%2A> の動作は、実装によって異なります。これは、共通言語ランタイムのあるバージョンから別のバージョン、または .NET Framework プラットフォーム間で変更される可能性があります。

> [!IMPORTANT]
>  2つの文字列オブジェクトが等しい場合、<xref:System.Globalization.CompareInfo.GetHashCode%2A> メソッドは同一の値を返します。 ただし、一意の文字列値ごとに一意のハッシュコード値はありません。 異なる文字列は、同じハッシュコードを返すことができます。
>
>  ハッシュコード自体は、安定しているとは限りません。 同じ文字列のハッシュコードは、.NET Framework の1つのバージョンについて、.NET Framework のバージョンとプラットフォーム (32 ビットや64ビットなど) 間で異なる場合があります。 場合によっては、アプリケーションドメインによって異なる場合もあります。
>
>  このため、ハッシュコードは、作成されたアプリケーションドメインの外部では使用できません。また、コレクションのキーフィールドとして使用することは避け、永続化しないでください。

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSortKey">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>文字列の <see cref="T:System.Globalization.SortKey" /> オブジェクトを取得します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSortKey">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.SortKey GetSortKey (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Globalization.SortKey GetSortKey(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetSortKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSortKey (source As String) As SortKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Globalization::SortKey ^ GetSortKey(System::String ^ source);" />
      <MemberSignature Language="F#" Value="abstract member GetSortKey : string -&gt; System.Globalization.SortKey&#xA;override this.GetSortKey : string -&gt; System.Globalization.SortKey" Usage="compareInfo.GetSortKey source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.SortKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="source"><see cref="T:System.Globalization.SortKey" /> オブジェクトを取得する対象となる文字列。</param>
        <summary>指定した文字列の並べ替えキーを取得します。</summary>
        <returns>指定した文字列の並べ替えキーを含む <see cref="T:System.Globalization.SortKey" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 文字列の各文字には、スクリプト、アルファベット、大文字と小文字の区別、および発音区別の重みを含む、いくつかのカテゴリの並べ替えの重みが与えられます。 並べ替えキーは、特定の文字列に対するこれらの重みのリポジトリです。 たとえば、並べ替えキーにはアルファベット順ウェイトの文字列、大文字小文字のウェイトの文字列などが特定の順序で格納されています。 <xref:System.Globalization.CompareInfo.GetSortKey%2A> メソッドは、LCMAP_SORTKEY フラグを使用した Windows API メソッド `LCMapString` と同じです。

 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.SortKey" />
      </Docs>
    </Member>
    <Member MemberName="GetSortKey">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.SortKey GetSortKey (string source, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Globalization.SortKey GetSortKey(string source, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetSortKey(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSortKey (source As String, options As CompareOptions) As SortKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Globalization::SortKey ^ GetSortKey(System::String ^ source, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member GetSortKey : string * System.Globalization.CompareOptions -&gt; System.Globalization.SortKey&#xA;override this.GetSortKey : string * System.Globalization.CompareOptions -&gt; System.Globalization.SortKey" Usage="compareInfo.GetSortKey (source, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.SortKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="source"><see cref="T:System.Globalization.SortKey" /> オブジェクトを取得する対象となる文字列。</param>
        <param name="options">並べ替えキーの計算方法を定義する、次の列挙値の 1 つ以上のビットごとの組み合わせ: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />、<see cref="F:System.Globalization.CompareOptions.StringSort" />。</param>
        <summary>指定した <see cref="T:System.Globalization.SortKey" /> 値を使用して、指定した文字列の <see cref="T:System.Globalization.CompareOptions" /> オブジェクトを取得します。</summary>
        <returns>指定した文字列の並べ替えキーを含む <see cref="T:System.Globalization.SortKey" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 文字列の各文字には、スクリプト、アルファベット、大文字と小文字の区別、および発音区別の重みを含む、いくつかのカテゴリの並べ替えの重みが与えられます。 並べ替えキーは、特定の文字列に対するこれらの重みのリポジトリです。 たとえば、並べ替えキーにはアルファベット順ウェイトの文字列、大文字小文字のウェイトの文字列などが特定の順序で格納されています。 <xref:System.Globalization.CompareInfo.GetSortKey%2A> メソッドは、LCMAP_SORTKEY フラグを使用した Windows API メソッド `LCMapString` と同じです。

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="options" /> に無効な <see cref="T:System.Globalization.CompareOptions" /> 値が含まれています。</exception>
        <altmember cref="T:System.Globalization.SortKey" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>文字列または部分文字列内にある値のうち、最初に出現する値の、0 から始まるインデックス番号を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char -&gt; int&#xA;override this.IndexOf : string * char -&gt; int" Usage="compareInfo.IndexOf (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value"><paramref name="source" /> 内で検索する文字。</param>
        <summary>指定した文字を検索し、検索対象文字列全体内で最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns><paramref name="value" /> 内で <paramref name="source" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="value" /> が無視できる文字の場合は 0 (ゼロ) を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 このメソッドは、文字列の先頭から文字列の末尾までのソース文字列を検索します。

 このオーバーロードは、カルチャに依存した検索を実行します。 `value` が、合字 "Æ" (U + 00C6) などの構成済みの Unicode 文字を表している場合、カルチャに応じて、"AE" (U + 0041 という, U + 0045) など、正しいシーケンスでのコンポーネントの発生と同等であると見なされる可能性があります。 Unicode コードポイントが同じである場合にのみ、文字が別の文字と等価と見なされる序数 (カルチャに依存しない) 検索を実行するには、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つオーバーロードを呼び出し、<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> 値を使用する必要があります。 カルチャに依存した比較を実行する <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType>とは異なり、文字を検索する <xref:System.String.IndexOf%2A?displayProperty=nameWithType> メソッドのオーバーロードは、序数の比較を実行し、文字列を検索するオーバーロードはカルチャに依存した比較を実行します。

> [!NOTE]
>  可能であれば、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つ文字列比較メソッドを使用して、予想される比較の種類を指定する必要があります。 一般的な規則として、ユーザーインターフェイスに表示される文字列を比較するには (現在のカルチャを使用して) 言語オプションを使用し、セキュリティ比較には <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> を指定します。



## Examples
 次の例では、文字列内の文字または部分文字列の最初と最後の出現箇所のインデックスを決定します。

 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> は <see langword="null" /> です。</exception>
        <block subset="none" type="usage"><para>文字セットには無視できる文字が含まれます。これは、言語またはカルチャに依存した並べ替えを実行するときには考慮されない文字です。 カルチャに依存した検索では、<paramref name="value" /> が無視できる文字の場合、結果はその文字を削除して検索することと同じになります。 この場合、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" /> メソッドは常に 0 (ゼロ) を返して、<paramref name="source" />の先頭に一致が見つかったことを示します。 次の例では、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" /> メソッドを使用して、2つの文字列でソフトハイフン (U + 00AD) を検索します。 文字列の 1 つのみにソフト ハイフンが含まれます。 どちらの場合も、ソフトハイフンが無視できる文字であるため、メソッドは 0 (ゼロ) を返して、文字列の先頭に一致するものが見つかったことを示します。

[! code-csharp.[Compareinfo IndexOf # 3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable2.cs#3)][! コード-vb[システム. CompareInfo. IndexOf # 3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable2.vb#3)]</para></block>
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string -&gt; int&#xA;override this.IndexOf : string * string -&gt; int" Usage="compareInfo.IndexOf (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value"><paramref name="source" /> 内で検索する文字列。</param>
        <summary>指定した部分文字列を検索し、検索対象文字列全体内で、その部分文字列が最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns><paramref name="value" /> 内で <paramref name="source" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="value" /> が無視できる文字の場合は 0 (ゼロ) を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 ソース文字列は、文字列の先頭から順に検索され、文字列の末尾で終わります。

 このオーバーロードは、カルチャに依存した検索を実行します。 カルチャに応じて、"AE" (u + 0041 という, U + 0045) など、構成されていない文字を表す Unicode 値は、正しい順序で文字のコンポーネントが出現する場合と同等に見なされる場合があります (u + 00C6)。 Unicode 値が比較される序数 (カルチャに依存しない) 検索を実行するには、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つオーバーロードのいずれかを使用し、<xref:System.Globalization.CompareOptions.Ordinal> 値を使用する必要があります。

> [!NOTE]
>  可能であれば、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つ文字列比較メソッドを呼び出して、予想される比較の種類を指定する必要があります。 一般的な規則として、ユーザーインターフェイスに表示される文字列を比較するには (現在のカルチャを使用して) 言語オプションを使用し、セキュリティ比較には <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> を指定します。



## Examples
 次の例では、文字列内の文字または部分文字列の最初と最後の出現箇所のインデックスを決定します。

 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> は <see langword="null" /> です。

または

 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <block subset="none" type="usage"><para>文字セットには無視できる文字が含まれます。これは、言語またはカルチャに依存した並べ替えを実行するときには考慮されない文字です。 カルチャに依存した検索では、<paramref name="value" /> に無視できる文字が含まれている場合、その文字を削除して検索した場合と同じ結果になります。 <paramref name="value" /> が1つ以上の無視できる文字で構成されている場合、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)" /> メソッドは常に 0 (ゼロ) を返して、<paramref name="source" />の先頭に一致が見つかったことを示します。 次の例では、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)" /> メソッドを使用して、2つの文字列の3つの部分文字列 (ソフトハイフン (U + 00AD)、ソフトハイフンの後に "n"、ソフトハイフンの後に "m") を検索します。 文字列の 1 つのみにソフト ハイフンが含まれます。 どちらの場合も、ソフトハイフンは無視できない文字なので、結果は <paramref name="value" />にソフトハイフンが含まれていなかった場合と同じになります。 ソフトハイフンのみを検索する場合、メソッドは、文字列の先頭に一致するものが見つかったことを示す 0 (ゼロ) を返します。

[! code-csharp.[Compareinfo IndexOf # 2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable1.cs#2)][! コード-vb[システム. CompareInfo. IndexOf # 2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable1.vb#2)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * char * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value"><paramref name="source" /> 内で検索する文字。</param>
        <param name="options">文字列の比較方法を定義する値。 <paramref name="options" /> は、列挙値 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> であるか、または <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> の 1 つ以上の値のビットごとの組み合わせです。</param>
        <summary>指定した <see cref="T:System.Globalization.CompareOptions" /> 値を使用して、指定した文字を検索し、検索対象文字列全体内でその文字が最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>指定した比較オプションを使用して、<paramref name="value" /> 内で <paramref name="source" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="value" /> が無視できる文字の場合は 0 (ゼロ) を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 ソース文字列は、文字列の先頭から順に検索され、文字列の末尾で終わります。

 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> 値は、このメソッドでは有効ではありません。

 `options` に <xref:System.Globalization.CompareOptions.Ordinal> の値が含まれていない場合、このオーバーロードはカルチャに依存した検索を実行します。 文字が "Æ" (U + 00C6) などの構成されていない文字を表す Unicode 値である場合、カルチャに応じて、"AE" (U + 0041 という, U + 0045) など、正しいシーケンスでのコンポーネントの出現と同等と見なされることがあります。 `options` に <xref:System.Globalization.CompareOptions.Ordinal> の値が含まれている場合、このオーバーロードは序数 (カルチャに依存しない) 検索を実行します。 Unicode 値が同じである場合にのみ、文字は別の文字と同じものと見なされます。 文字を検索する <xref:System.String.IndexOf%2A?displayProperty=nameWithType> のオーバーロードは、序数検索を実行します。一方、文字列を検索する場合は、カルチャに依存した検索を実行します。

> [!NOTE]
>  可能であれば、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つ文字列比較メソッドを使用して、予想される比較の種類を指定する必要があります。 一般的な規則として、ユーザーインターフェイスに表示される文字列を比較するには (現在のカルチャを使用して) 言語オプションを使用し、セキュリティ比較には <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> を指定します。



## Examples
 次の例では、文字列内の文字または部分文字列の最初と最後の出現箇所のインデックスを決定します。

 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" /> に無効な <see cref="T:System.Globalization.CompareOptions" /> 値が含まれています。</exception>
        <block subset="none" type="usage"><para>文字セットには無視できる文字が含まれます。これは、言語またはカルチャに依存した並べ替えを実行するときには考慮されない文字です。 カルチャに依存した検索では、<paramref name="value" /> が無視できる文字の場合、結果はその文字を削除して検索することと同じになります。 この場合、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> メソッドは常に 0 (ゼロ) を返して、<paramref name="source" />の先頭に一致が見つかったことを示します。 次の例では、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> メソッドを使用して、2つの文字列でソフトハイフン (U + 00AD) を検索します。 文字列の 1 つのみにソフト ハイフンが含まれます。 どちらの場合も、ソフトハイフンは無視できる文字であるため、カルチャに依存した検索では、文字列の先頭に一致するものが見つかったことを示す 0 (ゼロ) が返されます。 ただし、序数検索では、1つの文字列でソフトハイフンが正常に検出され、2番目の文字列に存在しないことが報告されます。

[! code-csharp.[Compareinfo IndexOf # 4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable3.cs#4)][! コード-vb[システム. CompareInfo. IndexOf # 4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable3.vb#4)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * int -&gt; int&#xA;override this.IndexOf : string * char * int -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="value" Type="System.Char" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="startIndex" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value"><paramref name="source" /> 内で検索する文字。</param>
        <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
        <summary>指定した文字を検索し、検索対象文字列の指定したインデックスから文字列の末尾までの範囲内で、その文字が最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns><paramref name="value" /> から <paramref name="source" /> の末尾までの <paramref name="startIndex" /> のセクション内で、<paramref name="source" /> が見つかった場合は、最初に出現する位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="startIndex" /> が無視できる文字の場合は <paramref name="value" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 ソース文字列は `startIndex` から順に検索され、文字列の末尾で終わります。

 このオーバーロードは、カルチャに依存した検索を実行します。 文字が "Æ" (U + 00C6) などの構成されていない文字を表す Unicode 値である場合、カルチャに応じて、"AE" (U + 0041 という, U + 0045) など、正しいシーケンスでのコンポーネントの出現と同等と見なされることがあります。 Unicode 値が同じ場合にのみ、文字が別の文字と見なされる序数 (カルチャに依存しない) 検索を実行するには、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つオーバーロードの1つを呼び出し、<xref:System.Globalization.CompareOptions.Ordinal> 値を使用する必要があります。 文字を検索する <xref:System.String.IndexOf%2A?displayProperty=nameWithType> のオーバーロードは、序数検索を実行します。一方、文字列を検索する場合は、カルチャに依存した検索を実行します。

> [!NOTE]
>  可能であれば、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つ文字列比較メソッドを呼び出して、予想される比較の種類を指定する必要があります。 一般的な規則として、ユーザーインターフェイスに表示される文字列を比較するには (現在のカルチャを使用して) 言語オプションを使用し、セキュリティ比較には <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> を指定します。



## Examples
 次の例では、文字列の一部に含まれる文字または部分文字列の最初と最後の出現箇所のインデックスを決定します。 <xref:System.Globalization.CompareInfo.IndexOf%2A> と <xref:System.Globalization.CompareInfo.LastIndexOf%2A> は、同じ `startIndex` パラメーターを使用している場合でも、文字列の異なる部分を検索することに注意してください。

 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。</exception>
        <block subset="none" type="usage"><para>文字セットには無視できる文字が含まれます。これは、言語またはカルチャに依存した並べ替えを実行するときには考慮されない文字です。 カルチャに依存した検索では、<paramref name="value" /> が無視できる文字の場合、結果はその文字を削除して検索することと同じになります。 この場合、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)" /> メソッドは常に <paramref name="startIndex" />を返します。これは、検索を開始する文字の位置です。 次の例では、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)" /> メソッドを使用して、2つの文字列の "n" の後にソフトハイフン (U + 00AD) を検索します。 文字列の 1 つのみにソフト ハイフンが含まれます。 どちらの場合も、ソフトハイフンが無視できる文字であるため、メソッドは1を返して、"n" の位置に一致するものが見つかったことを示します。

[! code-csharp.[Compareinfo IndexOf # 5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable4.cs#5)][! コード-vb[システム. CompareInfo. IndexOf # 5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable4.vb#5)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * string * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value"><paramref name="source" /> 内で検索する文字列。</param>
        <param name="options"><paramref name="source" /> と <paramref name="value" /> の比較方法を定義する値。 <paramref name="options" /> は、列挙値 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> であるか、または <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> の 1 つ以上の値のビットごとの組み合わせです。</param>
        <summary>指定した <see cref="T:System.Globalization.CompareOptions" /> 値を使用して、指定した部分文字列を検索し、検索対象文字列全体内で、その部分文字列が最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>指定した比較オプションを使用して、<paramref name="value" /> 内で <paramref name="source" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="value" /> が無視できる文字の場合は 0 (ゼロ) を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 ソース文字列は、文字列の先頭から順に検索され、文字列の末尾で終わります。

 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> 値は、このメソッドでは有効ではありません。

 `options` に <xref:System.Globalization.CompareOptions.Ordinal> の値が含まれていない場合、このオーバーロードはカルチャに依存した検索を実行します。 カルチャに応じて、"AE" (u + 0041 という, U + 0045) など、構成されていない文字を表す Unicode 値は、正しい順序で文字のコンポーネントが出現する場合と同等に見なされる場合があります (u + 00C6)。 `options` に <xref:System.Globalization.CompareOptions.Ordinal> の値が含まれている場合、このオーバーロードは、Unicode 値が比較される序数 (カルチャに依存しない) 検索を実行します。

> [!NOTE]
>  可能であれば、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つ文字列比較メソッドを呼び出して、予想される比較の種類を指定する必要があります。 一般的な規則として、ユーザーインターフェイスに表示される文字列を比較するには (現在のカルチャを使用して) 言語オプションを使用し、セキュリティ比較には <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> を指定します。



## Examples
 次の例では、文字列内の文字または部分文字列の最初と最後の出現箇所のインデックスを決定します。

 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> は <see langword="null" /> です。

または

 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" /> に無効な <see cref="T:System.Globalization.CompareOptions" /> 値が含まれています。</exception>
        <block subset="none" type="usage"><para>文字セットには無視できる文字が含まれます。これは、言語またはカルチャに依存した並べ替えを実行するときには考慮されない文字です。 カルチャに依存する検索の場合 (つまり、<paramref name="options" /> が <see cref="F:System.Globalization.CompareOptions.Ordinal" /> または <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> でない場合)、<paramref name="value" /> に無視できる文字が含まれていると、その文字を削除して検索した場合と同じ結果になります。 <paramref name="value" /> が1つ以上の無視できる文字で構成されている場合、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> メソッドは常に 0 (ゼロ) を返して、<paramref name="source" />の先頭に一致が見つかったことを示します。 次の例では、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> メソッドを使用して、2つの文字列の3つの部分文字列 (ソフトハイフン (U + 00AD)、ソフトハイフンの後に "n"、ソフトハイフンの後に "m") を検索します。 文字列の 1 つのみにソフト ハイフンが含まれます。 ソフトハイフンは無視できる文字であるため、カルチャに依存した検索では、検索文字列にソフトハイフンが含まれていない場合に返されるのと同じ値が返されます。 ただし、序数検索では、1つの文字列でソフトハイフンが正常に検出され、2番目の文字列に存在しないことが報告されます。

[! code-csharp.[Compareinfo IndexOf # 6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable5.cs#6)][! コード-vb[システム. CompareInfo. IndexOf # 6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable5.vb#6)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * int -&gt; int&#xA;override this.IndexOf : string * string * int -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="value" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="startIndex" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value"><paramref name="source" /> 内で検索する文字列。</param>
        <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
        <summary>指定した部分文字列を検索し、検索対象文字列の指定したインデックスから文字列の末尾までの範囲内で、その部分文字列が最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns><paramref name="value" /> から <paramref name="source" /> の末尾までの <paramref name="startIndex" /> のセクション内で、<paramref name="source" /> が見つかった場合は、最初に出現する位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="startIndex" /> が無視できる文字の場合は <paramref name="value" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 ソース文字列は `startIndex` から順に検索され、文字列の末尾で終わります。

 このオーバーロードは、カルチャに依存した検索を実行します。 カルチャに応じて、"AE" (u + 0041 という, U + 0045) など、構成されていない文字を表す Unicode 値は、正しい順序で文字のコンポーネントが出現する場合と同等に見なされる場合があります (u + 00C6)。 Unicode 値が比較される序数 (カルチャに依存しない) 検索を実行するには、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つオーバーロードのいずれかを呼び出し、<xref:System.Globalization.CompareOptions.Ordinal> 値を使用する必要があります。

> [!NOTE]
>  可能であれば、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つ文字列比較メソッドを呼び出して、予想される比較の種類を指定する必要があります。 一般的な規則として、ユーザーインターフェイスに表示される文字列を比較するには (現在のカルチャを使用して) 言語オプションを使用し、セキュリティ比較には <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> を指定します。



## Examples
 次の例では、文字列の一部に含まれる文字または部分文字列の最初と最後の出現箇所のインデックスを決定します。 <xref:System.Globalization.CompareInfo.IndexOf%2A> と <xref:System.Globalization.CompareInfo.LastIndexOf%2A> は、同じ `startIndex` パラメーターを使用している場合でも、文字列の異なる部分を検索することに注意してください。

 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> は <see langword="null" /> です。

または

 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。</exception>
        <block subset="none" type="usage"><para>文字セットには無視できる文字が含まれます。これは、言語またはカルチャに依存した並べ替えを実行するときには考慮されない文字です。 カルチャに依存した検索では、<paramref name="value" /> に無視できる文字が含まれている場合、その文字を削除して検索した場合と同じ結果になります。 <paramref name="value" /> が1つ以上の無視できる文字で構成されている場合、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)" /> メソッドは常に <paramref name="startIndex" />を返します。これは、検索を開始する文字の位置です。

次の例では、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)" /> メソッドを使用して、ソフトハイフン (U + 00AD) の後に2つの文字列の "m" が続く位置を検索します。 文字列の 1 つのみに必要な部分文字列が含まれます。 どちらの場合も、ソフトハイフンは無視できない文字であるため、メソッドは文字列内の "m" のインデックスを返します。 "m" の後にソフト ハイフンが含まれる最初の文字列の場合、メソッドはソフト ハイフンのインデックスを返すことができず、代わりに "m" のインデックスを返すことに注意してください。

[! code-csharp.[Compareinfo IndexOf # 14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable13.cs#14)][! コード-vb[システム. CompareInfo. IndexOf # 14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable13.vb#14)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * char * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value"><paramref name="source" /> 内で検索する文字。</param>
        <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="options"><paramref name="source" /> と <paramref name="value" /> の比較方法を定義する値。 <paramref name="options" /> は、列挙値 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> であるか、または <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> の 1 つ以上の値のビットごとの組み合わせです。</param>
        <summary>指定した <see cref="T:System.Globalization.CompareOptions" /> 値を使用して、指定した文字を検索し、検索対象文字列の指定したインデックスから文字列の末尾までのセクション内で、その文字が最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>指定した比較オプションを使用して、<paramref name="value" /> から <paramref name="source" /> の末尾までの <paramref name="startIndex" /> のセクション内で、<paramref name="source" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="startIndex" /> が無視できる文字の場合は <paramref name="value" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 ソース文字列は `startIndex` から順に検索され、文字列の末尾で終わります。

 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> 値は、このメソッドでは有効ではありません。

 `options` に <xref:System.Globalization.CompareOptions.Ordinal> の値が含まれていない場合、このオーバーロードはカルチャに依存した検索を実行します。 文字が "Æ" (U + 00C6) などの構成されていない文字を表す Unicode 値である場合、カルチャに応じて、"AE" (U + 0041 という, U + 0045) など、正しいシーケンスでのコンポーネントの出現と同等と見なされることがあります。 `options` に <xref:System.Globalization.CompareOptions.Ordinal> の値が含まれている場合、このオーバーロードは序数 (カルチャに依存しない) 検索を実行します。 Unicode 値が同じである場合にのみ、文字は別の文字と同じものと見なされます。 文字を検索する <xref:System.String.IndexOf%2A?displayProperty=nameWithType> のオーバーロードは、序数検索を実行します。一方、文字列を検索する場合は、カルチャに依存した検索を実行します。

> [!NOTE]
>  可能であれば、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つ文字列比較メソッドを呼び出して、予想される比較の種類を指定する必要があります。 一般的な規則として、ユーザーインターフェイスに表示される文字列を比較するには (現在のカルチャを使用して) 言語オプションを使用し、セキュリティ比較には <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> を指定します。



## Examples
 次の例では、文字列の一部に含まれる文字または部分文字列の最初と最後の出現箇所のインデックスを決定します。 <xref:System.Globalization.CompareInfo.IndexOf%2A> と <xref:System.Globalization.CompareInfo.LastIndexOf%2A> は、同じ `startIndex` パラメーターを使用している場合でも、文字列の異なる部分を検索することに注意してください。

 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" /> に無効な <see cref="T:System.Globalization.CompareOptions" /> 値が含まれています。</exception>
        <block subset="none" type="usage"><para>文字セットには無視できる文字が含まれます。これは、言語またはカルチャに依存した並べ替えを実行するときには考慮されない文字です。 カルチャに依存した検索では、<paramref name="value" /> が無視できる文字の場合、結果はその文字を削除して検索することと同じになります。 この場合、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> メソッドは常に <paramref name="startIndex" />を返します。これは、検索を最初に開始した文字位置です。 次の例では、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> メソッドを使用して、2つの文字列の "n" の後にソフトハイフン (U + 00AD) を検索します。 文字列の 1 つのみにソフト ハイフンが含まれます。 どちらの場合も、ソフトハイフンは無視できる文字であるため、カルチャに依存した検索では、"n" の位置に一致するものが見つかったことを示す1が返されます。 ただし、序数検索では、1つの文字列でソフトハイフンが正常に検出され、2番目の文字列に存在しないことが報告されます。

[! code-csharp.[Compareinfo IndexOf # 8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable7.cs#8)][! コード-vb[システム. CompareInfo. IndexOf # 8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable7.vb#8)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * int * int -&gt; int&#xA;override this.IndexOf : string * char * int * int -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value"><paramref name="source" /> 内で検索する文字。</param>
        <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象の範囲内にある要素の数。</param>
        <summary>指定した文字を検索し、検索対象文字列の指定したインデックスから始まり、指定した数の要素を含んでいる範囲内で、その文字が最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns><paramref name="value" /> から始まり、<paramref name="source" /> で指定した数の要素を含んでいる <paramref name="startIndex" /> の範囲内で、<paramref name="count" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="startIndex" /> が無視できる文字の場合は <paramref name="value" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 ソース文字列は `startIndex` から順に検索され、`startIndex` + `count`-1 で終わります。

 このオーバーロードは、カルチャに依存した検索を実行します。 文字が "Æ" (U + 00C6) などの構成されていない文字を表す Unicode 値である場合、カルチャに応じて、"AE" (U + 0041 という, U + 0045) など、正しいシーケンスでのコンポーネントの出現と同等と見なされることがあります。 Unicode 値が同じ場合にのみ、文字が別の文字と見なされる序数 (カルチャに依存しない) 検索を実行するには、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つオーバーロードの1つを呼び出し、<xref:System.Globalization.CompareOptions.Ordinal> 値を使用する必要があります。 文字を検索する <xref:System.String.IndexOf%2A?displayProperty=nameWithType> のオーバーロードは、序数検索を実行します。一方、文字列を検索する場合は、カルチャに依存した検索を実行します。

> [!NOTE]
>  可能であれば、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つ文字列比較メソッドを呼び出して、予想される比較の種類を指定する必要があります。 一般的な規則として、ユーザーインターフェイスに表示される文字列を比較するには (現在のカルチャを使用して) 言語オプションを使用し、セキュリティ比較には <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> を指定します。



## Examples
 次の例では、文字列の一部に含まれる文字または部分文字列の最初と最後の出現箇所のインデックスを決定します。

 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。

または

 <paramref name="count" /> に 0 より小さい値が指定されています。

または

 <paramref name="startIndex" /> および <paramref name="count" /> は <paramref name="source" />内の有効なセクションを指定していません。</exception>
        <block subset="none" type="usage"><para>文字セットには無視できる文字が含まれます。これは、言語またはカルチャに依存した並べ替えを実行するときには考慮されない文字です。 カルチャに依存した検索では、<paramref name="value" /> が無視できる文字の場合、結果はその文字を削除して検索することと同じになります。 この場合、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)" /> メソッドは常に <paramref name="startIndex" />を返します。これは、検索を最初に開始した文字位置です。 次の例では、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)" /> メソッドを使用して、2つの文字列の "n" の後にソフトハイフン (U + 00AD) を検索します。 文字列の 1 つのみにソフト ハイフンが含まれます。 どちらの場合も、ソフトハイフンが無視できる文字であるため、メソッドは1を返して、"n" の位置に一致するものが見つかったことを示します。

[! code-csharp.[Compareinfo IndexOf # 9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable8.cs#9)][! コード-vb[システム. Compareinfo IndexOf # 9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable8.vb#9)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * string * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value"><paramref name="source" /> 内で検索する文字列。</param>
        <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="options"><paramref name="source" /> と <paramref name="value" /> の比較方法を定義する値。 <paramref name="options" /> は、列挙値 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> であるか、または <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> の 1 つ以上の値のビットごとの組み合わせです。</param>
        <summary>指定した <see cref="T:System.Globalization.CompareOptions" /> 値を使用して、指定した部分文字列を検索し、検索対象文字列の指定したインデックスから文字列の末尾までの範囲内で、その部分文字列が最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>指定した比較オプションを使用して、<paramref name="value" /> から <paramref name="source" /> の末尾までの <paramref name="startIndex" /> のセクション内で、<paramref name="source" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="startIndex" /> が無視できる文字の場合は <paramref name="value" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 ソース文字列は `startIndex` から順に検索され、文字列の末尾で終わります。

 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> 値は、このメソッドでは有効ではありません。

 `options` に <xref:System.Globalization.CompareOptions.Ordinal> の値が含まれていない場合、このオーバーロードはカルチャに依存した検索を実行します。 カルチャに応じて、"AE" (u + 0041 という, U + 0045) など、構成されていない文字を表す Unicode 値は、正しい順序で文字のコンポーネントが出現する場合と同等に見なされる場合があります (u + 00C6)。 `options` に <xref:System.Globalization.CompareOptions.Ordinal> の値が含まれている場合、このオーバーロードは、Unicode 値が比較される序数 (カルチャに依存しない) 検索を実行します。

> [!NOTE]
>  可能であれば、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つ文字列比較メソッドを呼び出して、予想される比較の種類を指定する必要があります。 一般的な規則として、ユーザーインターフェイスに表示される文字列を比較するには (現在のカルチャを使用して) 言語オプションを使用し、セキュリティ比較には <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> を指定します。



## Examples
 次の例では、文字列の一部に含まれる文字または部分文字列の最初と最後の出現箇所のインデックスを決定します。 <xref:System.Globalization.CompareInfo.IndexOf%2A> と <xref:System.Globalization.CompareInfo.LastIndexOf%2A> は、同じ `startIndex` パラメーターを使用している場合でも、文字列の異なる部分を検索することに注意してください。

 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> は <see langword="null" /> です。

または

 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" /> に無効な <see cref="T:System.Globalization.CompareOptions" /> 値が含まれています。</exception>
        <block subset="none" type="usage"><para>文字セットには無視できる文字が含まれます。これは、言語またはカルチャに依存した並べ替えを実行するときには考慮されない文字です。 カルチャに依存する検索の場合 (つまり、<paramref name="options" /> が <see cref="F:System.Globalization.CompareOptions.Ordinal" /> または <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> でない場合)、<paramref name="value" /> に無視できる文字が含まれていると、その文字を削除して検索した場合と同じ結果になります。 <paramref name="value" /> が1つ以上の無視できる文字で構成されている場合、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> メソッドは常に <paramref name="startIndex" />を返します。これは、検索を開始する文字の位置です。

次の例では、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> メソッドを使用して、ソフトハイフン (U + 00AD) の後に2つの文字列の3番目の文字位置から始まる "m" を検索します。 文字列の 1 つのみに必要な部分文字列が含まれます。 どちらの場合も、ソフト ハイフンは無視可能な文字であるため、メソッドは、カルチャに依存した比較を実行すると、文字列に含まれる "m" のインデックスを返します。 "m" の後にソフト ハイフンが含まれる最初の文字列の場合、メソッドはソフト ハイフンのインデックスを返すことができず、代わりに "m" のインデックスを返すことに注意してください。 このメソッドは、序数に基づく比較を実行したときのみ、最初の文字列に含まれるソフト ハイフンのインデックスを返します。

[! code-csharp.[Compareinfo IndexOf # 15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable14.cs#15)][! コード-vb[システム. CompareInfo. IndexOf # 15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable14.vb#15)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * int * int -&gt; int&#xA;override this.IndexOf : string * string * int * int -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value"><paramref name="source" /> 内で検索する文字列。</param>
        <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象の範囲内にある要素の数。</param>
        <summary>指定した部分文字列を検索し、検索対象文字列の指定したインデックスから始まり、指定した数の要素を含んでいる範囲内で、その部分文字列が最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns><paramref name="value" /> から始まり、<paramref name="source" /> で指定した数の要素を含んでいる <paramref name="startIndex" /> の範囲内で、<paramref name="count" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="startIndex" /> が無視できる文字の場合は <paramref name="value" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 ソース文字列は `startIndex` から順に検索され、`startIndex` + `count`-1 で終わります。

 このオーバーロードは、カルチャに依存した検索を実行します。 カルチャに応じて、"AE" (u + 0041 という, U + 0045) など、構成されていない文字を表す Unicode 値は、正しい順序で文字のコンポーネントが出現する場合と同等に見なされる場合があります (u + 00C6)。 Unicode 値が比較される序数 (カルチャに依存しない) 検索を実行するには、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つオーバーロードのいずれかを呼び出し、<xref:System.Globalization.CompareOptions.Ordinal> 値を使用する必要があります。

> [!NOTE]
>  可能であれば、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つ文字列比較メソッドを呼び出して、予想される比較の種類を指定する必要があります。 一般的な規則として、ユーザーインターフェイスに表示される文字列を比較するには (現在のカルチャを使用して) 言語オプションを使用し、セキュリティ比較には <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> を指定します。



## Examples
 次の例では、文字列の一部に含まれる文字または部分文字列の最初と最後の出現箇所のインデックスを決定します。

 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> は <see langword="null" /> です。

または

 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。

または

 <paramref name="count" /> に 0 より小さい値が指定されています。

または

 <paramref name="startIndex" /> および <paramref name="count" /> は <paramref name="source" />内の有効なセクションを指定していません。</exception>
        <block subset="none" type="usage"><para>文字セットには無視できる文字が含まれます。これは、言語またはカルチャに依存した並べ替えを実行するときには考慮されない文字です。 カルチャに依存した検索では、<paramref name="value" /> に無視できる文字が含まれている場合、その文字を削除して検索した場合と同じ結果になります。 <paramref name="value" /> が1つ以上の無視できる文字で構成されている場合、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)" /> メソッドは常に <paramref name="startIndex" />を返します。これは、検索を開始する文字の位置です。

次の例では、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)" /> メソッドを使用して、2つの文字列の3番目から6番目までの文字位置から、ソフトハイフン (U + 00AD) の後に "m" を続けた位置を検索します。 文字列の 1 つのみに必要な部分文字列が含まれます。 どちらの場合も、ソフト ハイフンは無視可能な文字であるため、メソッドは、カルチャに依存した比較を実行すると、文字列に含まれる "m" のインデックスを返します。 "m" の後にソフト ハイフンが含まれる最初の文字列の場合、メソッドはソフト ハイフンのインデックスを返すことができず、代わりに "m" のインデックスを返すことに注意してください。

[! code-csharp.[Compareinfo IndexOf # 17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable16.cs#17)][! コード-vb[システム. CompareInfo. IndexOf # 17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable16.vb#17)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * char * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value"><paramref name="source" /> 内で検索する文字。</param>
        <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象の範囲内にある要素の数。</param>
        <param name="options"><paramref name="source" /> と <paramref name="value" /> の比較方法を定義する値。 <paramref name="options" /> は、列挙値 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> であるか、または <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> の 1 つ以上の値のビットごとの組み合わせです。</param>
        <summary>指定した <see cref="T:System.Globalization.CompareOptions" /> 値を使用して、指定した文字を検索し、検索対象文字列の指定したインデックスから始まり、指定した数の要素を含んでいる範囲内で、その文字が最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>指定した比較オプションを使用して、<paramref name="value" /> から始まり、<paramref name="source" /> で指定した数の要素を含んでいる <paramref name="startIndex" /> の範囲内で、<paramref name="count" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="startIndex" /> が無視できる文字の場合は <paramref name="value" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 ソース文字列は `startIndex` から順に検索され、`startIndex` + `count`-1 で終わります。

 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> 値は、このメソッドでは有効ではありません。

 `options` に <xref:System.Globalization.CompareOptions.Ordinal> の値が含まれていない場合、このオーバーロードはカルチャに依存した検索を実行します。 文字が "Æ" (U + 00C6) などの構成されていない文字を表す Unicode 値である場合、カルチャに応じて、"AE" (U + 0041 という, U + 0045) など、正しいシーケンスでのコンポーネントの出現と同等と見なされることがあります。 `options` に <xref:System.Globalization.CompareOptions.Ordinal> の値が含まれている場合、このオーバーロードは序数 (カルチャに依存しない) 検索を実行します。 Unicode 値が同じである場合にのみ、文字は別の文字と同じものと見なされます。 文字を検索する <xref:System.String.IndexOf%2A?displayProperty=nameWithType> のオーバーロードは、序数検索を実行します。一方、文字列を検索する場合は、カルチャに依存した検索を実行します。

> [!NOTE]
>  可能であれば、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つ文字列比較メソッドを呼び出して、予想される比較の種類を指定する必要があります。 一般的な規則として、ユーザーインターフェイスに表示される文字列を比較するには (現在のカルチャを使用して) 言語オプションを使用し、セキュリティ比較には <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> を指定します。



## Examples
 次の例では、文字列の一部に含まれる文字または部分文字列の最初と最後の出現箇所のインデックスを決定します。

 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。

または

 <paramref name="count" /> に 0 より小さい値が指定されています。

または

 <paramref name="startIndex" /> および <paramref name="count" /> は <paramref name="source" />内の有効なセクションを指定していません。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" /> に無効な <see cref="T:System.Globalization.CompareOptions" /> 値が含まれています。</exception>
        <block subset="none" type="usage"><para>文字セットには無視できる文字が含まれます。これは、言語またはカルチャに依存した並べ替えを実行するときには考慮されない文字です。 カルチャに依存した検索では、<paramref name="value" /> が無視できる文字の場合、結果はその文字を削除して検索することと同じになります。 この場合、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> メソッドは常に <paramref name="startIndex" />を返します。これは、検索を最初に開始した文字位置です。 次の例では、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> メソッドを使用して、2つの文字列の "n" の後にソフトハイフン (U + 00AD) を検索します。 文字列の 1 つのみにソフト ハイフンが含まれます。 どちらの場合も、ソフトハイフンは無視できる文字であるため、カルチャに依存した検索では、"n" の位置に一致するものが見つかったことを示す1が返されます。 ただし、序数検索では、1つの文字列でソフトハイフンが正常に検出され、2番目の文字列に存在しないことが報告されます。

[! code-csharp.[Compareinfo IndexOf # 12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable11.cs#12)][! コード-vb[システム. Compareinfo IndexOf # 12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable11.vb#12)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * string * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value"><paramref name="source" /> 内で検索する文字列。</param>
        <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象の範囲内にある要素の数。</param>
        <param name="options"><paramref name="source" /> と <paramref name="value" /> の比較方法を定義する値。 <paramref name="options" /> は、列挙値 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> であるか、または <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> の 1 つ以上の値のビットごとの組み合わせです。</param>
        <summary>指定した <see cref="T:System.Globalization.CompareOptions" /> 値を使用して、指定した部分文字列を検索し、検索対象文字列の指定したインデックスから始まり、指定した数の要素を含んでいる範囲内で、その部分文字列が最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>指定した比較オプションを使用して、<paramref name="value" /> から始まり、<paramref name="source" /> で指定した数の要素を含んでいる <paramref name="startIndex" /> の範囲内で、<paramref name="count" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="startIndex" /> が無視できる文字の場合は <paramref name="value" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 ソース文字列は `startIndex` から順に検索され、`startIndex` + `count`-1 で終わります。

 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> 値は、このメソッドでは有効ではありません。

 `options` に <xref:System.Globalization.CompareOptions.Ordinal> の値が含まれていない場合、このオーバーロードはカルチャに依存した検索を実行します。 カルチャに応じて、"AE" (u + 0041 という, U + 0045) など、構成されていない文字を表す Unicode 値は、正しい順序で文字のコンポーネントが出現する場合と同等に見なされる場合があります (u + 00C6)。 `options` に <xref:System.Globalization.CompareOptions.Ordinal> の値が含まれている場合、このオーバーロードは、Unicode 値が比較される序数 (カルチャに依存しない) 検索を実行します。

> [!NOTE]
>  可能であれば、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つ文字列比較メソッドを呼び出して、予想される比較の種類を指定する必要があります。 一般的な規則として、ユーザーインターフェイスに表示される文字列を比較するには (現在のカルチャを使用して) 言語オプションを使用し、セキュリティ比較には <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> を指定します。



## Examples
 次の例では、文字列の一部に含まれる文字または部分文字列の最初と最後の出現箇所のインデックスを決定します。

 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> は <see langword="null" /> です。

または

 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。

または

 <paramref name="count" /> に 0 より小さい値が指定されています。

または

 <paramref name="startIndex" /> および <paramref name="count" /> は <paramref name="source" />内の有効なセクションを指定していません。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" /> に無効な <see cref="T:System.Globalization.CompareOptions" /> 値が含まれています。</exception>
        <block subset="none" type="usage"><para>文字セットには無視できる文字が含まれます。これは、言語またはカルチャに依存した並べ替えを実行するときには考慮されない文字です。 カルチャに依存する検索の場合 (つまり、<paramref name="options" /> が <see cref="F:System.Globalization.CompareOptions.Ordinal" /> または <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> でない場合)、<paramref name="value" /> に無視できる文字が含まれていると、その文字を削除して検索した場合と同じ結果になります。 <paramref name="value" /> が1つ以上の無視できる文字で構成されている場合、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> メソッドは常に <paramref name="startIndex" />を返します。これは、検索を開始する文字の位置です。

次の例では、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> メソッドを使用して、2つの文字列の3番目から6番目までの文字位置から、ソフトハイフン (U + 00AD) の後に "m" を続けた位置を検索します。 文字列の 1 つのみに必要な部分文字列が含まれます。 どちらの場合も、ソフト ハイフンは無視可能な文字であるため、メソッドは、カルチャに依存した比較を実行すると、文字列に含まれる "m" のインデックスを返します。 ただし、序数による比較を実行する場合は、最初の文字列でのみ部分文字列が検索されます。 ソフトハイフンの後に "m" が続く最初の文字列の場合、メソッドはソフトハイフンのインデックスを返すのではなく、カルチャに依存した比較を実行するときに "m" のインデックスを返すことに注意してください。 このメソッドは、序数に基づく比較を実行したときのみ、最初の文字列に含まれるソフト ハイフンのインデックスを返します。

[! code-csharp.[Compareinfo IndexOf # 16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable15.cs#16)][! コード-vb[システム. Compareinfo IndexOf # 16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable15.vb#16)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsPrefix">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>文字列が特定のプレフィックスで始まるかどうかを判断します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsPrefix">
      <MemberSignature Language="C#" Value="public virtual bool IsPrefix (string source, string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsPrefix(string source, string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsPrefix (source As String, prefix As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsPrefix(System::String ^ source, System::String ^ prefix);" />
      <MemberSignature Language="F#" Value="abstract member IsPrefix : string * string -&gt; bool&#xA;override this.IsPrefix : string * string -&gt; bool" Usage="compareInfo.IsPrefix (source, prefix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">検索範囲とする文字列。</param>
        <param name="prefix"><paramref name="source" /> の先頭と比較する文字列。</param>
        <summary>指定したソース文字列が指定したプレフィックスで始まるかどうかを示します。</summary>
        <returns><see langword="true" /> の長さが <paramref name="prefix" /> の長さ以下で、<paramref name="source" /> が <paramref name="source" /> で始まる場合は <paramref name="prefix" />、それ以外の場合は <see langword="false" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 すべての文字列の先頭と末尾は空の部分文字列 ("") です。したがって、`prefix` が空の文字列の場合、このメソッドは `true`を返します。

> [!NOTE]
>  可能であれば、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つ文字列比較メソッドを呼び出して、予想される比較の種類を指定する必要があります。 一般的な規則として、ユーザーインターフェイスに表示される文字列を比較するには (現在のカルチャを使用して) 言語オプションを使用し、セキュリティ比較には <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> を指定します。



## Examples
 次の例では、文字列が別の文字列のプレフィックスまたはサフィックスであるかどうかを判断します。

 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CPP/isprefixsuffix.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CS/isprefixsuffix.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/VB/isprefixsuffix.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> は <see langword="null" /> です。

または

 <paramref name="prefix" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="IsPrefix">
      <MemberSignature Language="C#" Value="public virtual bool IsPrefix (string source, string prefix, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsPrefix(string source, string prefix, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsPrefix (source As String, prefix As String, options As CompareOptions) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsPrefix(System::String ^ source, System::String ^ prefix, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IsPrefix : string * string * System.Globalization.CompareOptions -&gt; bool&#xA;override this.IsPrefix : string * string * System.Globalization.CompareOptions -&gt; bool" Usage="compareInfo.IsPrefix (source, prefix, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索範囲とする文字列。</param>
        <param name="prefix"><paramref name="source" /> の先頭と比較する文字列。</param>
        <param name="options"><paramref name="source" /> と <paramref name="prefix" /> の比較方法を定義する値。 <paramref name="options" /> は、列挙値 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> であるか、または <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> の 1 つ以上の値のビットごとの組み合わせです。</param>
        <summary>指定した <see cref="T:System.Globalization.CompareOptions" /> 値を使用して、指定した検索対象文字列が指定したプレフィックスで始まるかどうかを判断します。</summary>
        <returns><see langword="true" /> の長さが <paramref name="prefix" /> の長さ以下で、<paramref name="source" /> が <paramref name="source" /> で始まる場合は <paramref name="prefix" />、それ以外の場合は <see langword="false" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 すべての文字列の先頭と末尾は空の部分文字列 ("") です。したがって、`prefix` が空の文字列の場合、このメソッドは `true`を返します。

 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> 値は、このメソッドでは有効ではありません。

> [!NOTE]
>  可能であれば、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つ文字列比較メソッドを呼び出して、予想される比較の種類を指定する必要があります。 一般的な規則として、ユーザーインターフェイスに表示される文字列を比較するには (現在のカルチャを使用して) 言語オプションを使用し、セキュリティ比較には <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> を指定します。



## Examples
 次の例では、文字列が <xref:System.Globalization.CompareOptions>を使用して別の文字列のプレフィックスまたはサフィックスであるかどうかを判断します。

 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CPP/isprefixsuffixopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CS/isprefixsuffixopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/VB/isprefixsuffixopt.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> は <see langword="null" /> です。

または

 <paramref name="prefix" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" /> に無効な <see cref="T:System.Globalization.CompareOptions" /> 値が含まれています。</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSortable">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した Unicode 文字または文字列の並べ替えが可能かどうかを示します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSortable">
      <MemberSignature Language="C#" Value="public static bool IsSortable (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSortable(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSortable(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSortable (ch As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSortable(char ch);" />
      <MemberSignature Language="F#" Value="static member IsSortable : char -&gt; bool" Usage="System.Globalization.CompareInfo.IsSortable ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="ch">Unicode 文字です。</param>
        <summary>指定した Unicode 文字の並べ替えが可能かどうかを示します。</summary>
        <returns><see langword="true" /> パラメーターが並べ替え可能な場合は <paramref name="ch" />、それ以外の場合は <see langword="false" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 `ch` パラメーターは、内部 <xref:System.Globalization.CompareInfo> クラスの並べ替えテーブルで定義されている Unicode 文字であり、プライベートに使用されていないか、上位または下位のサロゲート文字のペアになっていない場合に、並べ替え可能です。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSortable">
      <MemberSignature Language="C#" Value="public static bool IsSortable (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSortable(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSortable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSortable (text As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSortable(System::String ^ text);" />
      <MemberSignature Language="F#" Value="static member IsSortable : string -&gt; bool" Usage="System.Globalization.CompareInfo.IsSortable text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="text">0 個以上の Unicode 文字から構成される文字列。</param>
        <summary>指定した Unicode 文字列の並べ替えが可能かどうかを示します。</summary>
        <returns><see langword="true" /> パラメーターが空の文字列 ("") ではなく、<paramref name="str" /> 内のすべての Unicode 文字が並べ替え可能である場合は <paramref name="str" />、それ以外の場合は <see langword="false" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 `str` パラメーターの各 Unicode 文字は、1つ以上の UTF-16 でエンコードされた <xref:System.Char> オブジェクトによって表されます。 `str` パラメーターは、各 Unicode 文字が内部 <xref:System.Globalization.CompareInfo> クラスの並べ替えテーブルで定義されていて、プライベートで使用されていないか、上位または下位のサロゲート文字がペアでない場合に並べ替え可能です。

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="str" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSuffix">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>文字列が特定のサフィックスで終わるかどうかを判断します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSuffix">
      <MemberSignature Language="C#" Value="public virtual bool IsSuffix (string source, string suffix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSuffix(string source, string suffix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsSuffix (source As String, suffix As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSuffix(System::String ^ source, System::String ^ suffix);" />
      <MemberSignature Language="F#" Value="abstract member IsSuffix : string * string -&gt; bool&#xA;override this.IsSuffix : string * string -&gt; bool" Usage="compareInfo.IsSuffix (source, suffix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="suffix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">検索範囲とする文字列。</param>
        <param name="suffix"><paramref name="source" /> の末尾と比較する文字列。</param>
        <summary>指定した検索対象文字列が指定したサフィックスで終わるかどうかを判断します。</summary>
        <returns><see langword="true" /> の長さが <paramref name="suffix" /> の長さ以下であり、<paramref name="source" /> が <paramref name="source" /> で終わる場合は <paramref name="suffix" />、それ以外の場合は <see langword="false" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 すべての文字列の先頭と末尾は空の部分文字列 ("") です。したがって、`suffix` が空の文字列の場合、このメソッドは `true`を返します。

> [!NOTE]
>  可能であれば、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つ文字列比較メソッドを呼び出して、予想される比較の種類を指定する必要があります。 一般的な規則として、ユーザーインターフェイスに表示される文字列を比較するには (現在のカルチャを使用して) 言語オプションを使用し、セキュリティ比較には <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> を指定します。



## Examples
 次の例では、文字列が別の文字列のプレフィックスまたはサフィックスであるかどうかを判断します。

 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CPP/isprefixsuffix.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CS/isprefixsuffix.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/VB/isprefixsuffix.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> は <see langword="null" /> です。

または

 <paramref name="suffix" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="IsSuffix">
      <MemberSignature Language="C#" Value="public virtual bool IsSuffix (string source, string suffix, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSuffix(string source, string suffix, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsSuffix (source As String, suffix As String, options As CompareOptions) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSuffix(System::String ^ source, System::String ^ suffix, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IsSuffix : string * string * System.Globalization.CompareOptions -&gt; bool&#xA;override this.IsSuffix : string * string * System.Globalization.CompareOptions -&gt; bool" Usage="compareInfo.IsSuffix (source, suffix, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="suffix" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索範囲とする文字列。</param>
        <param name="suffix"><paramref name="source" /> の末尾と比較する文字列。</param>
        <param name="options"><paramref name="source" /> と <paramref name="suffix" /> の比較方法を定義する値。 <paramref name="options" /> は、それ自体で使用する列挙値 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> であるか、または <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> の 1 つ以上の値のビットごとの組み合わせです。</param>
        <summary>指定した <see cref="T:System.Globalization.CompareOptions" /> 値を使用して、指定した検索対象文字列が、指定したサフィックスで終わるかどうかを判断します。</summary>
        <returns><see langword="true" /> の長さが <paramref name="suffix" /> の長さ以下であり、<paramref name="source" /> が <paramref name="source" /> で終わる場合は <paramref name="suffix" />、それ以外の場合は <see langword="false" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 すべての文字列の先頭と末尾は空の部分文字列 ("") です。したがって、`suffix` が空の文字列の場合、このメソッドは `true`を返します。

 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> 値は、このメソッドでは有効ではありません。

> [!NOTE]
>  可能であれば、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つ文字列比較メソッドを呼び出して、予想される比較の種類を指定する必要があります。 一般的な規則として、ユーザーインターフェイスに表示される文字列を比較するには (現在のカルチャを使用して) 言語オプションを使用し、セキュリティ比較には <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> を指定します。



## Examples
 次の例では、文字列が <xref:System.Globalization.CompareOptions>を使用して別の文字列のプレフィックスまたはサフィックスであるかどうかを判断します。

 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CPP/isprefixsuffixopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CS/isprefixsuffixopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/VB/isprefixsuffixopt.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> は <see langword="null" /> です。

または

 <paramref name="suffix" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" /> に無効な <see cref="T:System.Globalization.CompareOptions" /> 値が含まれています。</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LastIndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>文字列または部分文字列内にある値のうち、最後に出現する値の、0 から始まるインデックス番号を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char -&gt; int&#xA;override this.LastIndexOf : string * char -&gt; int" Usage="compareInfo.LastIndexOf (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value"><paramref name="source" /> 内で検索する文字。</param>
        <summary>指定した文字を検索し、検索対象文字列全体内でその文字が最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns><paramref name="value" /> 内で <paramref name="source" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 ソース文字列は、文字列の末尾から後方に検索され、文字列の先頭で終わります。

 このオーバーロードは、カルチャに依存した検索を実行します。 文字が "Æ" (U + 00C6) などの構成されていない文字を表す Unicode 値である場合、カルチャに応じて、"AE" (U + 0041 という, U + 0045) など、正しいシーケンスでのコンポーネントの出現と同等と見なされることがあります。 Unicode 値が同じ場合にのみ、文字が別の文字と見なされる序数 (カルチャに依存しない) 検索を実行するには、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つオーバーロードの1つを呼び出し、<xref:System.Globalization.CompareOptions.Ordinal> 値を使用する必要があります。 文字を検索する <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> のオーバーロードは、序数検索を実行します。一方、文字列を検索する場合は、カルチャに依存した検索を実行します。

> [!NOTE]
>  可能であれば、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つ文字列比較メソッドを呼び出して、予想される比較の種類を指定する必要があります。 一般的な規則として、ユーザーインターフェイスに表示される文字列を比較するには (現在のカルチャを使用して) 言語オプションを使用し、セキュリティ比較には <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> を指定します。



## Examples
 次の例では、文字列内の文字または部分文字列の最初と最後の出現箇所のインデックスを決定します。

 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> は <see langword="null" /> です。</exception>
        <block subset="none" type="usage"><para>文字セットには無視できる文字が含まれます。これは、言語またはカルチャに依存した並べ替えを実行するときには考慮されない文字です。 カルチャに依存した検索では、<paramref name="value" /> が無視できる文字の場合、結果はその文字を削除して検索することと同じになります。 この場合、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" /> メソッドは常に <paramref name="source" /> の最後のインデックス位置を返して、<paramref name="source" />の最後に一致が見つかったことを示します。 次の例では、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" /> メソッドを使用して、2つの文字列でソフトハイフン (U + 00AD) を検索します。 文字列の 1 つのみにソフト ハイフンが含まれます。 どちらの場合も、ソフトハイフンは無視できる文字であるため、メソッドは文字列の最後のインデックス位置を返して、文字列の末尾に一致が見つかったことを示します。

[! code-csharp[LastIndexOf # 3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable2.cs#3)] を入力します。[! code-vb[LastIndexOf # 3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable2.vb#3)] を入力します。</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string -&gt; int&#xA;override this.LastIndexOf : string * string -&gt; int" Usage="compareInfo.LastIndexOf (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value"><paramref name="source" /> 内で検索する文字列。</param>
        <summary>指定した部分文字列を検索し、検索対象文字列全体内で、その部分文字列が最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns><paramref name="value" /> 内で <paramref name="source" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 ソース文字列は、文字列の末尾から後方に検索され、文字列の先頭で終わります。

 このオーバーロードは、カルチャに依存した検索を実行します。 カルチャに応じて、"AE" (u + 0041 という, U + 0045) など、構成されていない文字を表す Unicode 値は、正しい順序で文字のコンポーネントが出現する場合と同等に見なされる場合があります (u + 00C6)。 Unicode 値が比較される序数 (カルチャに依存しない) 検索を実行するには、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つオーバーロードのいずれかを呼び出し、<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> 値を使用する必要があります。

> [!NOTE]
>  可能であれば、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つ文字列比較メソッドを呼び出して、予想される比較の種類を指定する必要があります。 一般的な規則として、ユーザーインターフェイスに表示される文字列を比較するには (現在のカルチャを使用して) 言語オプションを使用し、セキュリティ比較には <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> を指定します。



## Examples
 次の例では、文字列内の文字または部分文字列の最初と最後の出現箇所のインデックスを決定します。

 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> は <see langword="null" /> です。

または

 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <block subset="none" type="usage"><para>文字セットには無視できる文字が含まれます。これは、言語またはカルチャに依存した並べ替えを実行するときには考慮されない文字です。 カルチャに依存した検索では、<paramref name="value" /> に無視できる文字が含まれている場合、その文字を削除して検索した場合と同じ結果になります。 <paramref name="value" /> が1つ以上の無視できる文字で構成されている場合、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)" /> メソッドは常に <paramref name="source" />を返します。<see cref="P:System.String.Length" /> <paramref name="source" />の最後のインデックス位置を表す-1。 次の例では、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)" /> メソッドを使用して、2つの文字列の3つの部分文字列 (ソフトハイフン (U + 00AD)、ソフトハイフンの後に "n"、ソフトハイフンの後に "m") を検索します。 文字列の 1 つのみにソフト ハイフンが含まれます。 どちらの場合も、ソフトハイフンは無視できない文字なので、結果は <paramref name="value" />にソフトハイフンが含まれていなかった場合と同じになります。 ソフトハイフンのみを検索する場合、メソッドは6と5を返します。 これらの値は、2つの文字列の最後の文字のインデックスに対応します。

[![LastIndexOf # 2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable1.cs#2)] を入力します。[! コード-vb[LastIndexOf # 2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable1.vb#2)] を入力します。</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * char * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value"><paramref name="source" /> 内で検索する文字。</param>
        <param name="options"><paramref name="source" /> と <paramref name="value" /> の比較方法を定義する値。 <paramref name="options" /> は、列挙値 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> であるか、または <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> の 1 つ以上の値のビットごとの組み合わせです。</param>
        <summary>指定した <see cref="T:System.Globalization.CompareOptions" /> 値を使用して、指定した文字を検索し、検索対象文字列全体内でその文字が最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>指定した比較オプションを使用して、<paramref name="value" /> 内で <paramref name="source" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 ソース文字列は、文字列の末尾から後方に検索され、文字列の先頭で終わります。

 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> 値は、このメソッドでは有効ではありません。

 `options` に <xref:System.Globalization.CompareOptions.Ordinal> の値が含まれていない場合、このオーバーロードはカルチャに依存した検索を実行します。 文字が "Æ" (U + 00C6) などの構成されていない文字を表す Unicode 値である場合、カルチャに応じて、"AE" (U + 0041 という, U + 0045) など、正しいシーケンスでのコンポーネントの出現と同等と見なされることがあります。 `options` に <xref:System.Globalization.CompareOptions.Ordinal> の値が含まれている場合、このオーバーロードは序数 (カルチャに依存しない) 検索を実行します。 Unicode 値が同じである場合にのみ、文字は別の文字と同じものと見なされます。 文字を検索する <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> のオーバーロードは、序数検索を実行します。一方、文字列を検索する場合は、カルチャに依存した検索を実行します。

> [!NOTE]
>  可能であれば、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つ文字列比較メソッドを呼び出して、予想される比較の種類を指定する必要があります。 一般的な規則として、ユーザーインターフェイスに表示される文字列を比較するには (現在のカルチャを使用して) 言語オプションを使用し、セキュリティ比較には <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> を指定します。



## Examples
 次の例では、文字列内の文字または部分文字列の最初と最後の出現箇所のインデックスを決定します。

 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" /> に無効な <see cref="T:System.Globalization.CompareOptions" /> 値が含まれています。</exception>
        <block subset="none" type="usage"><para>文字セットには無視できる文字が含まれます。これは、言語またはカルチャに依存した並べ替えを実行するときには考慮されない文字です。 カルチャに依存した検索では、<paramref name="value" /> が無視できる文字の場合、結果はその文字を削除して検索することと同じになります。 この場合、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> メソッドは常に <paramref name="source" /> の最後の文字位置を返し、<paramref name="source" />の最後に一致が見つかったことを示します。 次の例では、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> メソッドを使用して、2つの文字列でソフトハイフン (U + 00AD) を検索します。 文字列の 1 つのみにソフト ハイフンが含まれます。 どちらの場合も、ソフトハイフンは無視できない文字であるため、カルチャに依存した検索では、ソース文字列内の最後のインデックス位置が返されます。 これに対して、序数検索では、1つの文字列でソフトハイフンが正常に検出され、2番目の文字列に存在しないことが報告されます。

[! code-csharp[LastIndexOf # 4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable3.cs#4)] を入力します。[! コード-vb[LastIndexOf # 4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable3.vb#4)] を入力します。</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * int -&gt; int&#xA;override this.LastIndexOf : string * char * int -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="value" Type="System.Char" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="startIndex" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value"><paramref name="source" /> 内で検索する文字。</param>
        <param name="startIndex">逆方向検索の開始位置を示す 0 から始まるインデックス。</param>
        <summary>指定した文字を検索し、検索対象文字列の先頭から指定したインデックスまでの範囲内で、その文字列が最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns><paramref name="value" /> の先頭から <paramref name="source" /> までの <paramref name="source" /> の範囲内で、<paramref name="startIndex" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="startIndex" /> が無視できる文字の場合は <paramref name="value" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 ソース文字列は `startIndex` から後方に検索され、文字列の先頭で終わります。

 このオーバーロードは、カルチャに依存した検索を実行します。 文字が "Æ" (U + 00C6) などの構成されていない文字を表す Unicode 値である場合、カルチャに応じて、"AE" (U + 0041 という, U + 0045) など、正しいシーケンスでのコンポーネントの出現と同等と見なされることがあります。 Unicode 値が同じ場合にのみ、文字が別の文字と見なされる序数 (カルチャに依存しない) 検索を実行するには、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つオーバーロードの1つを呼び出し、<xref:System.Globalization.CompareOptions.Ordinal> 値を使用する必要があります。 文字を検索する <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> のオーバーロードは、序数検索を実行します。一方、文字列を検索する場合は、カルチャに依存した検索を実行します。

> [!NOTE]
>  可能であれば、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つ文字列比較メソッドを呼び出して、予想される比較の種類を指定する必要があります。 一般的な規則として、ユーザーインターフェイスに表示される文字列を比較するには (現在のカルチャを使用して) 言語オプションを使用し、セキュリティ比較には <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> を指定します。



## Examples
 次の例では、文字列の一部に含まれる文字または部分文字列の最初と最後の出現箇所のインデックスを決定します。 <xref:System.Globalization.CompareInfo.IndexOf%2A> と <xref:System.Globalization.CompareInfo.LastIndexOf%2A> は、同じ `startIndex` パラメーターを使用している場合でも、文字列の異なる部分を検索することに注意してください。

 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。</exception>
        <block subset="none" type="usage"><para>文字セットには無視できる文字が含まれます。これは、言語またはカルチャに依存した並べ替えを実行するときには考慮されない文字です。 カルチャに依存した検索では、<paramref name="value" /> が無視できる文字の場合、結果はその文字を削除して検索することと同じになります。 この場合、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)" /> メソッドは常に <paramref name="startIndex" />を返します。これは、検索を開始する文字の位置です。 次の例では、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)" /> メソッドを使用して、2つの文字列の最後の "m" の前にあるソフトハイフン (U + 00AD) を検索します。 文字列の 1 つのみにソフト ハイフンが含まれます。 どちらの場合も、ソフトハイフンは無視できる文字であるため、メソッドは、"m" のインデックス位置を返します。これは <paramref name="startIndex" />の値です。

[! code-csharp[LastIndexOf # 5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable4.cs#5)] を入力します。[! コード-vb[LastIndexOf # 5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable4.vb#5)] を入力します。</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * string * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value"><paramref name="source" /> 内で検索する文字列。</param>
        <param name="options"><paramref name="source" /> と <paramref name="value" /> の比較方法を定義する値。 <paramref name="options" /> は、列挙値 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> であるか、または <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> の 1 つ以上の値のビットごとの組み合わせです。</param>
        <summary>指定した <see cref="T:System.Globalization.CompareOptions" /> 値を使用して、指定した部分文字列を検索し、検索対象文字列全体内でその部分文字列が最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>指定した比較オプションを使用して、<paramref name="value" /> 内で <paramref name="source" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 ソース文字列は、文字列の末尾から後方に検索され、文字列の先頭で終わります。

 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> 値は、このメソッドでは有効ではありません。

 `options` に <xref:System.Globalization.CompareOptions.Ordinal> の値が含まれていない場合、このオーバーロードはカルチャに依存した検索を実行します。 カルチャに応じて、"AE" (u + 0041 という, U + 0045) など、構成されていない文字を表す Unicode 値は、正しい順序で文字のコンポーネントが出現する場合と同等に見なされる場合があります (u + 00C6)。 `options` に <xref:System.Globalization.CompareOptions.Ordinal> の値が含まれている場合、このオーバーロードは、Unicode 値が比較される序数 (カルチャに依存しない) 検索を実行します。

> [!NOTE]
>  可能であれば、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つ文字列比較メソッドを呼び出して、予想される比較の種類を指定する必要があります。 一般的な規則として、ユーザーインターフェイスに表示される文字列を比較するには (現在のカルチャを使用して) 言語オプションを使用し、セキュリティ比較には <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> を指定します。



## Examples
 次の例では、文字列内の文字または部分文字列の最初と最後の出現箇所のインデックスを決定します。

 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> は <see langword="null" /> です。

または

 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" /> に無効な <see cref="T:System.Globalization.CompareOptions" /> 値が含まれています。</exception>
        <block subset="none" type="usage"><para>文字セットには無視できる文字が含まれます。これは、言語またはカルチャに依存した並べ替えを実行するときには考慮されない文字です。 カルチャに依存する検索の場合 (つまり、<paramref name="options" /> が <see cref="F:System.Globalization.CompareOptions.Ordinal" /> または <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> でない場合)、<paramref name="value" /> に無視できる文字が含まれていると、その文字を削除して検索した場合と同じ結果になります。 <paramref name="value" /> が1つ以上の無視できる文字で構成されている場合、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> メソッドは常に <paramref name="source" />を返します。<see cref="P:System.String.Length" /> <paramref name="source" />の最後のインデックス位置を表す-1。 次の例では、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> メソッドを使用して、2つの文字列の3つの部分文字列 (ソフトハイフン (U + 00AD)、ソフトハイフンの後に "n"、ソフトハイフンの後に "m") を検索します。 文字列の 1 つのみにソフト ハイフンが含まれます。 ソフトハイフンは無視できる文字であるため、カルチャに依存した検索では、検索文字列にソフトハイフンが含まれていない場合に返されるのと同じ値が返されます。 ただし、序数検索では、1つの文字列でソフトハイフンが正常に検出され、2番目の文字列に存在しないことが報告されます。

[![LastIndexOf # 6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable5.cs#6)] を入力します。[! コード-vb[LastIndexOf # 6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable5.vb#6)] を入力します。</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * int -&gt; int&#xA;override this.LastIndexOf : string * string * int -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="value" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="startIndex" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value"><paramref name="source" /> 内で検索する文字列。</param>
        <param name="startIndex">逆方向検索の開始位置を示す 0 から始まるインデックス。</param>
        <summary>指定した部分文字列を検索し、検索対象文字列の先頭から指定したインデックスまでの範囲内で、その部分文字列が最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns><paramref name="value" /> の先頭から <paramref name="source" /> までの <paramref name="source" /> の範囲内で、<paramref name="startIndex" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="startIndex" /> が無視できる文字の場合は <paramref name="value" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 ソース文字列は `startIndex` から後方に検索され、文字列の先頭で終わります。

 このオーバーロードは、カルチャに依存した検索を実行します。 カルチャに応じて、"AE" (u + 0041 という, U + 0045) など、構成されていない文字を表す Unicode 値は、正しい順序で文字のコンポーネントが出現する場合と同等に見なされる場合があります (u + 00C6)。 Unicode 値が比較される序数 (カルチャに依存しない) 検索を実行するには、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つオーバーロードのいずれかを呼び出し、<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> 値を使用する必要があります。

> [!NOTE]
>  可能であれば、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つ文字列比較メソッドを呼び出して、予想される比較の種類を指定する必要があります。 一般的な規則として、ユーザーインターフェイスに表示される文字列を比較するには (現在のカルチャを使用して) 言語オプションを使用し、セキュリティ比較には <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> を指定します。



## Examples
 次の例では、文字列の一部に含まれる文字または部分文字列の最初と最後の出現箇所のインデックスを決定します。 <xref:System.Globalization.CompareInfo.IndexOf%2A> と <xref:System.Globalization.CompareInfo.LastIndexOf%2A> は、同じ `startIndex` パラメーターを使用している場合でも、文字列の異なる部分を検索することに注意してください。

 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> は <see langword="null" /> です。

または

 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。</exception>
        <block subset="none" type="usage"><para>文字セットには無視できる文字が含まれます。これは、言語またはカルチャに依存した並べ替えを実行するときには考慮されない文字です。 カルチャに依存した検索では、<paramref name="value" /> に無視できる文字が含まれている場合、その文字を削除して検索した場合と同じ結果になります。 <paramref name="value" /> が1つ以上の無視できる文字で構成されている場合、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)" /> メソッドは常に <paramref name="startIndex" />を返します。これは、検索を開始する文字の位置です。 次の例では、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)" /> メソッドを使用して、ソフトハイフン (U + 00AD) を含む部分文字列を検索し、最後の "m" を文字列の前または末尾に含めます。 検索文字列のソフトハイフンは無視されるため、ソフトハイフンと "m" で構成される部分文字列を検索するためにメソッドを呼び出すと、文字列内の "m" の位置が返されます。それを呼び出して、ソフトハイフンと "n" で構成される部分文字列を検索すると、 "n" の位置。 検索文字列にソフトハイフンのみが含まれている場合、メソッドは、<paramref name="startIndex" />の値を表す "m" のインデックスを返します。

[![LastIndexOf # 7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable6.cs#7)] を入力します。[! コード-vb[LastIndexOf # 7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable6.vb#7)] を入力します。</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * char * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value"><paramref name="source" /> 内で検索する文字。</param>
        <param name="startIndex">逆方向検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="options"><paramref name="source" /> と <paramref name="value" /> の比較方法を定義する値。 <paramref name="options" /> は、列挙値 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> であるか、または <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> の 1 つ以上の値のビットごとの組み合わせです。</param>
        <summary>指定した <see cref="T:System.Globalization.CompareOptions" /> 値を使用して、指定した文字を検索し、検索対象の文字列の先頭から指定したインデックスまでの範囲内で、その文字が最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>指定した比較オプションを使用して、<paramref name="value" /> の先頭から <paramref name="source" /> までの <paramref name="source" /> の範囲内で <paramref name="startIndex" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="startIndex" /> が無視できる文字の場合は <paramref name="value" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 ソース文字列は `startIndex` から後方に検索され、文字列の先頭で終わります。

 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> 値は、このメソッドでは有効ではありません。

 `options` に <xref:System.Globalization.CompareOptions.Ordinal> の値が含まれていない場合、このオーバーロードはカルチャに依存した検索を実行します。 文字が "Æ" (U + 00C6) などの構成されていない文字を表す Unicode 値である場合、カルチャに応じて、"AE" (U + 0041 という, U + 0045) など、正しいシーケンスでのコンポーネントの出現と同等と見なされることがあります。 `options` に <xref:System.Globalization.CompareOptions.Ordinal> の値が含まれている場合、このオーバーロードは序数 (カルチャに依存しない) 検索を実行します。 Unicode 値が同じである場合にのみ、文字は別の文字と同じものと見なされます。 文字を検索する <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> のオーバーロードは、序数検索を実行します。一方、文字列を検索する場合は、カルチャに依存した検索を実行します。

> [!NOTE]
>  可能であれば、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つ文字列比較メソッドを呼び出して、予想される比較の種類を指定する必要があります。 一般的な規則として、ユーザーインターフェイスに表示される文字列を比較するには (現在のカルチャを使用して) 言語オプションを使用し、セキュリティ比較には <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> を指定します。



## Examples
 次の例では、文字列の一部に含まれる文字または部分文字列の最初と最後の出現箇所のインデックスを決定します。 <xref:System.Globalization.CompareInfo.IndexOf%2A> と <xref:System.Globalization.CompareInfo.LastIndexOf%2A> は、同じ `startIndex` パラメーターを使用している場合でも、文字列の異なる部分を検索することに注意してください。

 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" /> に無効な <see cref="T:System.Globalization.CompareOptions" /> 値が含まれています。</exception>
        <block subset="none" type="usage"><para>文字セットには無視できる文字が含まれます。これは、言語またはカルチャに依存した並べ替えを実行するときには考慮されない文字です。 カルチャに依存した検索では、<paramref name="value" /> が無視できる文字の場合、結果はその文字を削除して検索することと同じになります。 この場合、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> メソッドは常に <paramref name="startIndex" />を返します。これは、検索を開始する文字の位置です。 次の例では、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> メソッドを使用して、2つの文字列の最後の "m" の前にあるソフトハイフン (U + 00AD) を検索します。 文字列の 1 つのみにソフト ハイフンが含まれます。 どちらの場合も、ソフトハイフンは無視できない文字であるため、カルチャに依存した検索では、"m" のインデックス位置が返されます。 ただし、序数検索では、1つの文字列でソフトハイフンが正常に検出され、2番目の文字列に存在しないことが報告されます。

[![LastIndexOf # 8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable7.cs#8)] を入力します。[! コード-vb[LastIndexOf # 8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable7.vb#8)] を入力します。</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * int * int -&gt; int&#xA;override this.LastIndexOf : string * char * int * int -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value"><paramref name="source" /> 内で検索する文字。</param>
        <param name="startIndex">逆方向検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象の範囲内にある要素の数。</param>
        <summary>指定した文字を検索し、検索対象文字列の指定したインデックスで終了し、指定した数の要素を含んでいる範囲内で、その文字が最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns><paramref name="value" /> で終わり、<paramref name="source" /> で指定した数の要素を含んでいる <paramref name="count" /> の範囲内で <paramref name="startIndex" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="startIndex" /> が無視できる文字の場合は <paramref name="value" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 ソース文字列は `startIndex` から後方に検索され、`startIndex` - `count` 1 で終わります。

 このオーバーロードは、カルチャに依存した検索を実行します。 文字が "Æ" (U + 00C6) などの構成されていない文字を表す Unicode 値である場合、カルチャに応じて、"AE" (U + 0041 という, U + 0045) など、正しいシーケンスでのコンポーネントの出現と同等と見なされることがあります。 Unicode 値が同じ場合にのみ、文字が別の文字と見なされる序数 (カルチャに依存しない) 検索を実行するには、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つオーバーロードの1つを呼び出し、<xref:System.Globalization.CompareOptions.Ordinal> 値を使用する必要があります。 文字を検索する <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> のオーバーロードは、序数検索を実行します。一方、文字列を検索する場合は、カルチャに依存した検索を実行します。

> [!NOTE]
>  可能であれば、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つ文字列比較メソッドを呼び出して、予想される比較の種類を指定する必要があります。 一般的な規則として、ユーザーインターフェイスに表示される文字列を比較するには (現在のカルチャを使用して) 言語オプションを使用し、セキュリティ比較には <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> を指定します。



## Examples
 次の例では、文字列の一部に含まれる文字または部分文字列の最初と最後の出現箇所のインデックスを決定します。

 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。

または

 <paramref name="count" /> に 0 より小さい値が指定されています。

または

 <paramref name="startIndex" /> および <paramref name="count" /> は <paramref name="source" />内の有効なセクションを指定していません。</exception>
        <block subset="none" type="usage"><para>文字セットには無視できる文字が含まれます。これは、言語またはカルチャに依存した並べ替えを実行するときには考慮されない文字です。 カルチャに依存した検索では、<paramref name="value" /> が無視できる文字の場合、結果はその文字を削除して検索することと同じになります。 この場合、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)" /> メソッドは常に <paramref name="startIndex" />を返します。これは、検索を開始する文字の位置です。 次の例では、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)" /> メソッドを使用して、2つの文字列の最後の "m" の前にあるソフトハイフン (U + 00AD) を検索します。 文字列の 1 つのみにソフト ハイフンが含まれます。 どちらの場合も、ソフトハイフンは無視できる文字であるため、メソッドは、"m" のインデックス位置を返します。これは <paramref name="startIndex" />の値です。

[![LastIndexOf # 9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable8.cs#9)] を入力します。[! コード-vb[LastIndexOf # 9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable8.vb#9)] を入力します。</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * string * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value"><paramref name="source" /> 内で検索する文字列。</param>
        <param name="startIndex">逆方向検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="options"><paramref name="source" /> と <paramref name="value" /> の比較方法を定義する値。 <paramref name="options" /> は、列挙値 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> であるか、または <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> の 1 つ以上の値のビットごとの組み合わせです。</param>
        <summary>指定した <see cref="T:System.Globalization.CompareOptions" /> 値を使用して、指定した部分文字列を検索し、検索対象の文字列の先頭から指定したインデックスまでの範囲内で、その部分文字列が最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>指定した比較オプションを使用して、<paramref name="value" /> の先頭から <paramref name="source" /> までの <paramref name="source" /> の範囲内で <paramref name="startIndex" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="startIndex" /> が無視できる文字の場合は <paramref name="value" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 ソース文字列は `startIndex` から後方に検索され、文字列の先頭で終わります。

 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> 値は、このメソッドでは有効ではありません。

 `options` に <xref:System.Globalization.CompareOptions.Ordinal> の値が含まれていない場合、このオーバーロードはカルチャに依存した検索を実行します。 カルチャに応じて、"AE" (u + 0041 という, U + 0045) など、構成されていない文字を表す Unicode 値は、正しい順序で文字のコンポーネントが出現する場合と同等に見なされる場合があります (u + 00C6)。 `options` に <xref:System.Globalization.CompareOptions.Ordinal> の値が含まれている場合、このオーバーロードは、Unicode 値が比較される序数 (カルチャに依存しない) 検索を実行します。

> [!NOTE]
>  可能であれば、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つ文字列比較メソッドを呼び出して、予想される比較の種類を指定する必要があります。 一般的な規則として、ユーザーインターフェイスに表示される文字列を比較するには (現在のカルチャを使用して) 言語オプションを使用し、セキュリティ比較には <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> を指定します。



## Examples
 次の例では、文字列の一部に含まれる文字または部分文字列の最初と最後の出現箇所のインデックスを決定します。 <xref:System.Globalization.CompareInfo.IndexOf%2A> と <xref:System.Globalization.CompareInfo.LastIndexOf%2A> は、同じ `startIndex` パラメーターを使用している場合でも、文字列の異なる部分を検索することに注意してください。

 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> は <see langword="null" /> です。

または

 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" /> に無効な <see cref="T:System.Globalization.CompareOptions" /> 値が含まれています。</exception>
        <block subset="none" type="usage"><para>文字セットには無視できる文字が含まれます。これは、言語またはカルチャに依存した並べ替えを実行するときには考慮されない文字です。 カルチャに依存する検索の場合 (つまり、<paramref name="options" /> が <see cref="F:System.Globalization.CompareOptions.Ordinal" /> または <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> でない場合)、<paramref name="value" /> に無視できる文字が含まれていると、その文字を削除して検索した場合と同じ結果になります。 <paramref name="value" /> が1つ以上の無視できる文字で構成されている場合、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> メソッドは常に <paramref name="startIndex" />を返します。これは、検索を開始する文字の位置です。

次の例では、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> メソッドを使用して、2つの文字列の最後の "m" から始まる "m" の後に、ソフトハイフン (U + 00AD) の位置を検索します。 文字列の 1 つのみに必要な部分文字列が含まれます。 どちらの場合も、ソフト ハイフンは無視可能な文字であるため、メソッドは、カルチャに依存した比較を実行すると、文字列に含まれる "m" のインデックスを返します。 "m" の後にソフト ハイフンが含まれる最初の文字列の場合、メソッドはソフト ハイフンのインデックスを返すことができず、代わりに "m" のインデックスを返すことに注意してください。 このメソッドは、序数に基づく比較を実行したときのみ、最初の文字列に含まれるソフト ハイフンのインデックスを返します。

[![LastIndexOf # 15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable14.cs#15)] を入力します。[! コード-vb[LastIndexOf # 15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable14.vb#15)] を入力します。</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * int * int -&gt; int&#xA;override this.LastIndexOf : string * string * int * int -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value"><paramref name="source" /> 内で検索する文字列。</param>
        <param name="startIndex">逆方向検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象の範囲内にある要素の数。</param>
        <summary>指定した部分文字列を検索し、検索対象文字列の指定したインデックスで終了し、指定した数の要素を含んでいる範囲内で、その部分文字列が最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns><paramref name="value" /> で終わり、<paramref name="source" /> で指定した数の要素を含んでいる <paramref name="count" /> の範囲内で <paramref name="startIndex" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="startIndex" /> が無視できる文字の場合は <paramref name="value" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 ソース文字列は `startIndex` から後方に検索され、`startIndex` - `count` 1 で終わります。

 このオーバーロードは、カルチャに依存した検索を実行します。 カルチャに応じて、"AE" (u + 0041 という, U + 0045) など、構成されていない文字を表す Unicode 値は、正しい順序で文字のコンポーネントが出現する場合と同等に見なされる場合があります (u + 00C6)。 Unicode 値が比較される序数 (カルチャに依存しない) 検索を実行するには、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つオーバーロードのいずれかを呼び出し、<xref:System.Globalization.CompareOptions.Ordinal> 値を使用する必要があります。

> [!NOTE]
>  可能であれば、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つ文字列比較メソッドを呼び出して、予想される比較の種類を指定する必要があります。 一般的な規則として、ユーザーインターフェイスに表示される文字列を比較するには (現在のカルチャを使用して) 言語オプションを使用し、セキュリティ比較には <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> を指定します。



## Examples
 次の例では、文字列の一部に含まれる文字または部分文字列の最初と最後の出現箇所のインデックスを決定します。

 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> は <see langword="null" /> です。

または

 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。

または

 <paramref name="count" /> に 0 より小さい値が指定されています。

または

 <paramref name="startIndex" /> および <paramref name="count" /> は <paramref name="source" />内の有効なセクションを指定していません。</exception>
        <block subset="none" type="usage"><para>文字セットには無視できる文字が含まれます。これは、言語またはカルチャに依存した並べ替えを実行するときには考慮されない文字です。 カルチャに依存した検索では、<paramref name="value" /> に無視できる文字が含まれている場合、その文字を削除して検索した場合と同じ結果になります。 <paramref name="value" /> が1つ以上の無視できる文字で構成されている場合、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)" /> メソッドは常に <paramref name="startIndex" />を返します。これは、検索を開始する文字の位置です。

次の例では、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)" /> メソッドを使用して、2つの文字列の最後の "m" の前にある3つの文字の中に、ソフトハイフン (U + 00AD) の後に "m" が続く位置を検索します。 文字列の 1 つのみに必要な部分文字列が含まれます。 どちらの場合も、ソフト ハイフンは無視可能な文字であるため、メソッドは、カルチャに依存した比較を実行すると、文字列に含まれる "m" のインデックスを返します。 "m" の後にソフト ハイフンが含まれる最初の文字列の場合、メソッドはソフト ハイフンのインデックスを返すことができず、代わりに "m" のインデックスを返すことに注意してください。

[! code-csharp[LastIndexOf # 17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable16.cs#17)] を入力します。[! コード-vb[LastIndexOf # 17] を入力し](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable16.vb#17)ます。</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * char * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value"><paramref name="source" /> 内で検索する文字。</param>
        <param name="startIndex">逆方向検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象の範囲内にある要素の数。</param>
        <param name="options"><paramref name="source" /> と <paramref name="value" /> の比較方法を定義する値。 <paramref name="options" /> は、列挙値 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> であるか、または <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> の 1 つ以上の値のビットごとの組み合わせです。</param>
        <summary>指定した <see cref="T:System.Globalization.CompareOptions" /> 値を使用して、指定した文字を検索し、検索対象文字列の指定したインデックスで終了し、指定した数の要素を含んでいる範囲内で、その文字が最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>指定した比較オプションを使用して、<paramref name="value" /> で終わり、<paramref name="source" /> で指定した数の要素を含んでいる <paramref name="count" /> の範囲内で <paramref name="startIndex" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="startIndex" /> が無視できる文字の場合は <paramref name="value" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 ソース文字列は `startIndex` から後方に検索され、`startIndex` - `count` 1 で終わります。

 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> 値は、このメソッドでは有効ではありません。

 `options` に <xref:System.Globalization.CompareOptions.Ordinal> の値が含まれていない場合、このオーバーロードはカルチャに依存した検索を実行します。 文字が "Æ" (U + 00C6) などの構成されていない文字を表す Unicode 値である場合、カルチャに応じて、"AE" (U + 0041 という, U + 0045) など、正しいシーケンスでのコンポーネントの出現と同等と見なされることがあります。 `options` に <xref:System.Globalization.CompareOptions.Ordinal> の値が含まれている場合、このオーバーロードは序数 (カルチャに依存しない) 検索を実行します。 Unicode 値が同じである場合にのみ、文字は別の文字と同じものと見なされます。 文字を検索する <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> のオーバーロードは、序数検索を実行します。一方、文字列を検索する場合は、カルチャに依存した検索を実行します。

> [!NOTE]
>  可能であれば、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つ文字列比較メソッドを呼び出して、予想される比較の種類を指定する必要があります。 一般的な規則として、ユーザーインターフェイスに表示される文字列を比較するには (現在のカルチャを使用して) 言語オプションを使用し、セキュリティ比較には <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> を指定します。



## Examples
 次の例では、文字列の一部に含まれる文字または部分文字列の最初と最後の出現箇所のインデックスを決定します。

 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。

または

 <paramref name="count" /> に 0 より小さい値が指定されています。

または

 <paramref name="startIndex" /> および <paramref name="count" /> は <paramref name="source" />内の有効なセクションを指定していません。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" /> に無効な <see cref="T:System.Globalization.CompareOptions" /> 値が含まれています。</exception>
        <block subset="none" type="usage"><para>文字セットには無視できる文字が含まれます。これは、言語またはカルチャに依存した並べ替えを実行するときには考慮されない文字です。 カルチャに依存した検索では、<paramref name="value" /> が無視できる文字の場合、結果はその文字を削除して検索することと同じになります。 この場合、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> メソッドは常に <paramref name="startIndex" />を返します。これは、検索を開始する文字の位置です。 次の例では、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> メソッドを使用して、2つの文字列の最後の "m" の前にあるソフトハイフン (U + 00AD) を検索します。 文字列の 1 つのみにソフト ハイフンが含まれます。 どちらの場合も、ソフトハイフンは無視できる文字であるため、カルチャに依存した検索では、"m" のインデックス位置 (<paramref name="startIndex" />の値) が返されます。 ただし、序数検索では、1つの文字列でソフトハイフンが正常に検出され、2番目の文字列に存在しないことが報告されます。

[! code-csharp[LastIndexOf # 12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable11.cs#12)] を入力します。[! コード-vb[LastIndexOf # 12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable11.vb#12)] を入力します。</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * string * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value"><paramref name="source" /> 内で検索する文字列。</param>
        <param name="startIndex">逆方向検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象の範囲内にある要素の数。</param>
        <param name="options"><paramref name="source" /> と <paramref name="value" /> の比較方法を定義する値。 <paramref name="options" /> は、列挙値 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> であるか、または <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> の 1 つ以上の値のビットごとの組み合わせです。</param>
        <summary>指定した <see cref="T:System.Globalization.CompareOptions" /> 値を使用して、指定した部分文字列を検索し、検索対象文字列の指定したインデックスで終了し、指定した数の要素を含んでいる範囲内で、その部分文字列が最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>指定した比較オプションを使用して、<paramref name="value" /> で終わり、<paramref name="source" /> で指定した数の要素を含んでいる <paramref name="count" /> の範囲内で <paramref name="startIndex" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="startIndex" /> が無視できる文字の場合は <paramref name="value" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 ソース文字列は `startIndex` から後方に検索され、`startIndex` - `count` 1 で終わります。

 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> 値は、このメソッドでは有効ではありません。

 `options` に <xref:System.Globalization.CompareOptions.Ordinal> の値が含まれていない場合、このオーバーロードはカルチャに依存した検索を実行します。 カルチャに応じて、"AE" (u + 0041 という, U + 0045) など、構成されていない文字を表す Unicode 値は、正しい順序で文字のコンポーネントが出現する場合と同等に見なされる場合があります (u + 00C6)。 `options` に <xref:System.Globalization.CompareOptions.Ordinal> の値が含まれている場合、このオーバーロードは、Unicode 値が比較される序数 (カルチャに依存しない) 検索を実行します。

> [!NOTE]
>  可能であれば、<xref:System.Globalization.CompareOptions> 型のパラメーターを持つ文字列比較メソッドを呼び出して、予想される比較の種類を指定する必要があります。 一般的な規則として、ユーザーインターフェイスに表示される文字列を比較するには (現在のカルチャを使用して) 言語オプションを使用し、セキュリティ比較には <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> を指定します。



## Examples
 次の例では、文字列の一部に含まれる文字または部分文字列の最初と最後の出現箇所のインデックスを決定します。

 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> は <see langword="null" /> です。

または

 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。

または

 <paramref name="count" /> に 0 より小さい値が指定されています。

または

 <paramref name="startIndex" /> および <paramref name="count" /> は <paramref name="source" />内の有効なセクションを指定していません。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" /> に無効な <see cref="T:System.Globalization.CompareOptions" /> 値が含まれています。</exception>
        <block subset="none" type="usage"><para>文字セットには無視できる文字が含まれます。これは、言語またはカルチャに依存した並べ替えを実行するときには考慮されない文字です。 カルチャに依存する検索の場合 (つまり、<paramref name="options" /> が <see cref="F:System.Globalization.CompareOptions.Ordinal" /> または <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> でない場合)、<paramref name="value" /> に無視できる文字が含まれていると、その文字を削除して検索した場合と同じ結果になります。 <paramref name="value" /> が1つ以上の無視できる文字で構成されている場合、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> メソッドは常に <paramref name="startIndex" />を返します。これは、検索を開始する文字の位置です。

次の例では、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> メソッドを使用して、2つの文字列の最後の "m" の前にある最初の文字位置を除いて、ソフトハイフン (U + 00AD) の位置を検索します。 文字列の 1 つのみに必要な部分文字列が含まれます。 どちらの場合も、ソフト ハイフンは無視可能な文字であるため、メソッドは、カルチャに依存した比較を実行すると、文字列に含まれる "m" のインデックスを返します。 ただし、序数による比較を実行する場合は、最初の文字列でのみ部分文字列が検索されます。 ソフトハイフンの後に "m" が続く最初の文字列の場合、メソッドはソフトハイフンのインデックスを返すのではなく、カルチャに依存した比較を実行するときに "m" のインデックスを返すことに注意してください。 このメソッドは、序数に基づく比較を実行したときのみ、最初の文字列に含まれるソフト ハイフンのインデックスを返します。

[! コード-vb[LastIndexOf # 16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable15.vb#16)] を入力します。</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public int LCID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CompareInfo.LCID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LCID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LCID { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LCID : int" Usage="System.Globalization.CompareInfo.LCID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CompareInfo" /> に対して適切な形式のカルチャ識別子を取得します。</summary>
        <value>現在の <see cref="T:System.Globalization.CompareInfo" /> に対して適切に書式指定されたカルチャ識別子。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 <xref:System.Globalization.CompareInfo.LCID%2A>プロパティの例を次に示します。

 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CompareInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Globalization.CompareInfo.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Globalization.CompareInfo" /> による並べ替え操作に使用されるカルチャの名前を取得します。</summary>
        <value>カルチャの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Globalization.CompareInfo.Name%2A> プロパティと <xref:System.Globalization.CultureInfo.Name?displayProperty=nameWithType> プロパティの値は異なる場合があります。 たとえば、16進0x10407 の <xref:System.Globalization.CompareInfo.LCID%2A> プロパティ値は、ドイツの電話帳に表示される名前を並べ替える代替の並べ替えカルチャを識別します。 <xref:System.Globalization.CompareInfo.Name%2A> プロパティの値は "de de_phoneb" ですが、関連付けられているドイツ語 (ドイツ) カルチャの <xref:System.Globalization.CultureInfo.Name?displayProperty=nameWithType> プロパティの値は "de DE" です。



## Examples
 次の例では、fr-fr カルチャと ja-jp カルチャを使用して、3つの文字列を比較します。 <xref:System.Globalization.CultureInfo.Name%2A> プロパティは、各カルチャの名前を表示するために使用されます。

 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberSignature Language="F#" Value="abstract member System.Runtime.Serialization.IDeserializationCallback.OnDeserialization : obj -&gt; unit&#xA;override this.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization : obj -&gt; unit" Usage="compareInfo.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization sender" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="sender">コールバックを開始したオブジェクトです。</param>
        <summary>オブジェクト グラフ全体のシリアル化解除が完了したときに実行されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 このメンバーは、現在の <xref:System.Globalization.CompareInfo> オブジェクトが <xref:System.Runtime.Serialization.IDeserializationCallback> インターフェイスにキャストされた場合にのみ使用できる明示的なインターフェイスメンバーの実装です。 詳細については、<xref:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization%2A> メソッドのトピックを参照してください。

 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.IDeserializationCallback" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="compareInfo.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CompareInfo" /> オブジェクトを表す文字列を返します。</summary>
        <returns>現在の <see cref="T:System.Globalization.CompareInfo" /> オブジェクトを表す文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 このメソッドは、<xref:System.Object.ToString%2A?displayProperty=nameWithType> メソッドをオーバーライドします。 このメソッドは、クラス名とインスタンス <xref:System.Globalization.CompareInfo.Name%2A> プロパティの値で構成される文字列をハイフンで区切って返します。

 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>.NET Framework 4 では、<see cref="M:System.Globalization.CompareInfo.ToString" /> メソッドは、クラス名の後にスペース、ハイフン、スペース、および <see cref="P:System.Globalization.CompareInfo.Name" /> プロパティの値を返します。 たとえば、en-us カルチャを表す <see cref="T:System.Globalization.CompareInfo" /> オブジェクトの場合、<see cref="M:System.Globalization.CompareInfo.ToString" /> メソッドは "CompareInfo-en-us" を返します。 .NET Framework の以前のバージョンでは、クラス名の後にスペース、ハイフン、スペース、<see cref="P:System.Globalization.CompareInfo.LCID" /> プロパティの値が返されます。 たとえば、en-us カルチャを表す <see cref="T:System.Globalization.CompareInfo" /> オブジェクトの場合、<see cref="M:System.Globalization.CompareInfo.ToString" /> メソッドは "CompareInfo-1033" を返します。</para></block>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Version">
      <MemberSignature Language="C#" Value="public System.Globalization.SortVersion Version { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.SortVersion Version" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CompareInfo.Version" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Version As SortVersion" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::SortVersion ^ Version { System::Globalization::SortVersion ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Version : System.Globalization.SortVersion" Usage="System.Globalization.CompareInfo.Version" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.SortVersion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>文字列の比較および並べ替えに使用される Unicode のバージョンに関する情報を取得します。</summary>
        <value>文字列を比較および並べ替えるために使用される Unicode のバージョンに関する情報を含むオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 個々の文字の重み (したがって、特定の文字列を比較または順序付けする方法) は、.NET Framework の特定のバージョンが実装する Unicode 仕様のバージョンによって異なります。 [!INCLUDE[net_v45](~/includes/net-v45-md.md)]では、次の表に示すように、これはホストオペレーティングシステムにも依存します。 サポートされている Unicode バージョンの一覧は、文字の比較と並べ替えに対してのみ適用されます。カテゴリ別での Unicode 文字の分類には適用されません。

|.NET Framework のバージョン|オペレーティング システム|Unicode バージョン|
|----------------------------|----------------------|---------------------|
|[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]|すべてのオペレーティング システム|Unicode 5.0|
|[!INCLUDE[net_v45](~/includes/net-v45-md.md)] 以降のバージョン|[!INCLUDE[win7](~/includes/win7-md.md)]|Unicode 5.0|
|[!INCLUDE[net_v45](~/includes/net-v45-md.md)] 以降のバージョン|[!INCLUDE[win8](~/includes/win8-md.md)] 以降の Windows オペレーティングシステムのバージョン|Unicode 6.3|

 <xref:System.Globalization.CompareInfo.Version%2A> プロパティによって返される <xref:System.Globalization.SortVersion> オブジェクトは、文字列の比較に使用される正確な Unicode バージョンを識別しません。 2つの <xref:System.Globalization.SortVersion> オブジェクトを比較して、同じ Unicode バージョンとカルチャを使用して文字列を比較するかどうかを判断する場合にのみ役立ちます。 詳細と例については、<xref:System.Globalization.SortVersion> リファレンスページを参照してください。

 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.SortVersion" />
      </Docs>
    </Member>
  </Members>
</Type>
