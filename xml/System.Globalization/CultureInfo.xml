<Type Name="CultureInfo" FullName="System.Globalization.CultureInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="69deefe25cf016ae85de0fac6054837f68f4b4a8" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75133870" /></Metadata><TypeSignature Language="C#" Value="public class CultureInfo : ICloneable, IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable beforefieldinit CultureInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CultureInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CultureInfo&#xA;Implements ICloneable, IFormatProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class CultureInfo : ICloneable, IFormatProvider" />
  <TypeSignature Language="F#" Value="type CultureInfo = class&#xA;    interface ICloneable&#xA;    interface IFormatProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormatProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>特定のカルチャ (アンマネージ コードの開発では "*ロケール*" と呼ばれます) に関する情報を提供します。 この情報には、カルチャの名前、表記体系、使用する暦、文字列の並べ替え順序、および日付と数値の書式が含まれます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo> クラスは、特定のカルチャに関連付けられた言語、サブ言語、国/地域、暦、規則などのカルチャ固有の情報を提供します。 このクラスは、<xref:System.Globalization.DateTimeFormatInfo>、<xref:System.Globalization.NumberFormatInfo>、<xref:System.Globalization.CompareInfo>、および <xref:System.Globalization.TextInfo> オブジェクトのカルチャ固有のインスタンスへのアクセスも提供します。 これらのオブジェクトには、大文字と小文字の区別、日付と数値の書式設定、文字列の比較など、カルチャ固有の操作に必要な情報が含まれています。 <xref:System.Globalization.CultureInfo> クラスは、<xref:System.String>、<xref:System.DateTime>、<xref:System.DateTimeOffset>、数値型など、カルチャ固有のデータを書式設定、解析、または操作するクラスによって直接的または間接的に使用されます。  
  
 このセクションの内容  
  
 [カルチャ名と識別子](#CultureNames)   
 [インバリアント、ニュートラル、および特定のカルチャ](#Invariant)   
 [カスタムカルチャ](#Custom)   
 [動的なカルチャデータ](#Dynamic)   
 [CultureInfo と文化のデータ](#cultureinfo-and-cultural-data)[現在のカルチャと現在の UI カルチャ](#Current)   
 [すべてのカルチャの取得](#GetAll)   
 [カルチャとスレッド](#Threads)   
 [カルチャおよびアプリケーションドメイン](#AppDomain)   
 [カルチャおよびタスクベースの非同期操作](#Async)   
 [CultureInfo オブジェクトのシリアル化](#Serialization)   
 [コントロールパネルのオーバーライド](#CPanel)   
 [代替並べ替え順序](#AlternateSort)   
 [カルチャと Windows アプリ](#Windows)  

<a name="CultureNames"></a>   
## <a name="culture-names-and-identifiers"></a>カルチャ名と識別子  
 <xref:System.Globalization.CultureInfo> クラスは、RFC 4646 に基づいて、カルチャごとに一意の名前を指定します。 名前は、言語に関連付けられた ISO 639 2 文字の小文字カルチャコードと、国または地域に関連付けられている ISO 3166 2 文字の大文字サブカルチャコードを組み合わせたものです。 さらに、[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 以降を対象とし、Windows 10 以降で実行されているアプリでは、有効な BCP-47 言語タグに対応するカルチャ名がサポートされています。  
  
> [!NOTE]
>  カルチャ名がクラスコンストラクターまたは <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> や <xref:System.Globalization.CultureInfo>などのメソッドに渡される場合、その大文字と小文字は区別されません。  
  
 RFC 4646 に基づくカルチャ名の形式は*languagecode2*>-*country/regioncode2*です。ここで、 *languagecode2*は2文字の言語コード、 *country/regioncode2*は2文字のサブカルチャコードです。 たとえば、日本語 (日本) の場合は ja-jp、英語の場合は en-us (米国) が使用されます。 2文字の言語コードが使用できない場合は、ISO 639-2 から派生した3文字のコードが使用されます。  
  
 カルチャ名によっては、ISO 15924 スクリプトも指定されていることに注意してください。 たとえば、Cyrl はキリルスクリプトを指定し、Latn は Latin スクリプトを指定します。 スクリプトを含むカルチャ名は、pattern *languagecode2*-*scripttag*-*country/regioncode2*というパターンを使用します。 この種類のカルチャ名の例として、uz-Cyrl-UZ (ウズベク語 (キリル、ウズベキスタン)) があります。 Windows Vista より前の Windows オペレーティングシステムでは、スクリプトを含むカルチャ名は、 *languagecode2*-*country/regioncode2*-*scripttag*というパターンを使用します。たとえば、ウズベク語 (キリル、ウズベキスタン) には uz-uz-Cyrl のようになります。  
  
 ニュートラルカルチャは、2文字の小文字の言語コードによってのみ指定されます。 たとえば、fr はフランス語のニュートラルカルチャを指定し、de はドイツ語のニュートラルカルチャを指定します。  
  
> [!NOTE]
>  この規則に矛盾する2つのカルチャ名があります。 カルチャ中国語 (簡体字)、zh-tw Hans、および繁体字中国語 (繁体字) は、ニュートラルカルチャです。 カルチャ名は現在の標準を表し、古い名前 zh-tw と zh-tw を使用する理由がない限り、使用する必要があります。  
  
 カルチャ識別子は、標準の国際数字の省略形であり、インストールされているカルチャの1つを一意に識別するために必要なコンポーネントを備えています。 アプリケーションでは、定義済みのカルチャ識別子を使用することも、カスタム識別子を定義することもできます。  
  
 特定の定義済みカルチャ名と識別子は、このクラスおよび <xref:System.Globalization?displayProperty=nameWithType> 名前空間のその他のクラスによって使用されます。 Windows システムの詳細なカルチャ情報については、 [windows でサポートされている言語/地域名の一覧](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c)の **[言語タグ]** 列を参照してください。 カルチャ名は、[BCP 47](https://tools.ietf.org/html/bcp47) によって定義されている標準に準拠します。  
  
 カルチャ名と識別子は、特定のコンピューターで検出できるカルチャのサブセットのみを表すことに注意してください。 Windows のバージョンまたはサービスパックは、使用可能なカルチャを変更できます。 アプリケーションでは、<xref:System.Globalization.CultureAndRegionInfoBuilder> クラスを使用してカスタムカルチャを追加します。 ユーザーは、Microsoft Locale Builder ツールを使用して、独自のカスタムカルチャを追加します。 Microsoft Locale Builder は、`CultureAndRegionInfoBuilder` クラスを使用してマネージコードで記述されています。  
  
 いくつかの異なる名前は、特に次のクラスメンバーに関連付けられた名前というカルチャに密接に関連付けられています。  
  
-   <xref:System.Globalization.CultureInfo.ToString%2A?displayProperty=nameWithType>  
  
-   <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>  
  
-   <xref:System.Globalization.CompareInfo.Name%2A?displayProperty=nameWithType>  
  
<a name="Invariant"></a>   
## <a name="invariant-neutral-and-specific-cultures"></a>インバリアント、ニュートラル、および特定のカルチャ  
 カルチャは、通常、インバリアントカルチャ、ニュートラルカルチャ、および特定のカルチャという3つのセットにグループ化されています。  
  
 インバリアントカルチャは、カルチャに依存しません。 アプリケーションで、空の文字列 ("") またはその識別子を使用して、名前でインバリアントカルチャを指定します。 <xref:System.Globalization.CultureInfo.InvariantCulture%2A> は、インバリアントカルチャのインスタンスを定義します。 英語と関連付けられていますが、国/地域には関連付けられていません。 これは、カルチャを必要とする `Globalization` 名前空間のほとんどすべてのメソッドで使用されます。  
  
 ニュートラルカルチャは、言語に関連付けられているが、国/地域に関連付けられていないカルチャです。 特定のカルチャとは、言語および国/地域に関連付けられているカルチャです。 たとえば、fr はフランス語のカルチャのニュートラル名で、fr-fr は特定のフランス語 (フランス) カルチャの名前です。 中国語 (簡体字) と繁体字中国語は、ニュートラルカルチャとも見なされることに注意してください。  
  
 ニュートラルカルチャの <xref:System.Globalization.CompareInfo> クラスのインスタンスを作成することはお勧めしません。含まれるデータは任意です。 データの表示と並べ替えを行うには、言語と地域の両方を指定します。 また、ニュートラルカルチャ用に作成された <xref:System.Globalization.CompareInfo> オブジェクトの <xref:System.Globalization.CompareInfo.Name%2A> プロパティは、国のみを返し、地域は含まれません。  
  
 定義されたカルチャには、特定のカルチャの親がニュートラルカルチャであり、ニュートラルカルチャの親がインバリアントカルチャである階層があります。 <xref:System.Globalization.CultureInfo.Parent%2A> プロパティには、特定のカルチャに関連付けられているニュートラルカルチャが含まれます。 カスタムカルチャでは、このパターンに準拠して <xref:System.Globalization.CultureInfo.Parent%2A> プロパティを定義する必要があります。  
  
 特定のカルチャのリソースがオペレーティングシステムで使用できない場合は、関連付けられているニュートラルカルチャのリソースが使用されます。 ニュートラルカルチャのリソースが使用できない場合は、メインアセンブリに埋め込まれているリソースが使用されます。 リソースフォールバックプロセスの詳細については、「[リソースのパッケージ化と配置](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)」を参照してください。  
  
 Windows API のロケールの一覧は、.NET Framework でサポートされているカルチャの一覧とは若干異なります。 たとえば、p/invoke メカニズムを使用して Windows との相互運用性が必要な場合、アプリケーションでは、オペレーティングシステムに対して定義されている特定のカルチャを使用する必要があります。 特定のカルチャを使用すると、同等の Windows ロケールとの一貫性が確保されます。これは、<xref:System.Globalization.CultureInfo.LCID%2A>と同じロケール識別子で識別されます。  
  
 <xref:System.Globalization.DateTimeFormatInfo> または <xref:System.Globalization.NumberFormatInfo> は、ニュートラルカルチャではなく、特定のカルチャに対してのみ作成できます。  
  
 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> が <xref:System.Globalization.TaiwanCalendar> で、<xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> が zh-tw に設定されていない場合、<xref:System.Globalization.DateTimeFormatInfo.NativeCalendarName%2A?displayProperty=nameWithType>、<xref:System.Globalization.DateTimeFormatInfo.GetEraName%2A?displayProperty=nameWithType>、および <xref:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName%2A?displayProperty=nameWithType> は空の文字列 ("") を返します。  
  
<a name="Custom"></a>   
## <a name="custom-cultures"></a>カスタムカルチャ  
 Windows オペレーティングシステムと .NET Framework によってサポートされる定義済みのカルチャに加えて、.NET Framework は次の3種類のカスタムカルチャをサポートしています。  
  
-   Windows または .NET Framework で使用できるカルチャを補完する新しいカルチャ。 たとえば、アプリケーションでは、システム上の fj-fj (または Fijan (フィジー)) カルチャを表す <xref:System.Globalization.CultureInfo> オブジェクトをインストールできます。  
  
-   Windows および .NET Framework でサポートされる標準カルチャのプロパティとは異なるプロパティを持つ置換カルチャ。  
  
-   ユーザーがオーバーライドする標準カルチャ。 ユーザーは、**コントロールパネル**の **[地域と言語]** アプリケーションを使用して、既存のカルチャのプロパティ値をカスタマイズできます。  
  
> [!NOTE]
>  <xref:System.Globalization.CultureAndRegionInfoBuilder> クラスを使用して、既存のカルチャを補完または置換するカスタムカルチャを定義、保存、および登録できます。 <xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A?displayProperty=nameWithType> メソッドは、ターゲットシステムにカスタムカルチャをインストールするために使用できるロケールデータマークアップ言語 (LDML) ファイルを作成します。 <xref:System.Globalization.CultureAndRegionInfoBuilder> クラスを使用して新しいまたは置換カルチャを作成する方法の詳細な手順については、<xref:System.Globalization.CultureAndRegionInfoBuilder> クラスのトピックを参照してください。  
  
 .NET Framework ではカスタムカルチャがサポートされるため、カルチャ固有のデータを使用する場合は、次の点を考慮する必要があります。  
  
-   カスタムカルチャは、定義済みのカルチャの範囲を超える値を持つことができます。 たとえば、一部のカルチャでは、月の名前が異常に長い、予期しない日付または時刻の形式、またはその他の特殊なデータがあります。  
  
-   カルチャ固有のデータをユーザーインターフェイスに表示する場合は、ユーザーのカスタマイズを尊重する必要があります。たとえば、ユーザーが24時間制または yyyyMMdd 日付形式を使用する場合があります。  
  
-   カスタムカルチャは既定値をオーバーライドすることに注意してください。 したがって、カルチャデータを安定させることはできません。 将来、国名、数字と日付の形式、およびスペルが変わる可能性があります。 日付や時刻の文字列など、カルチャに依存するデータをシリアル化して、日付と時刻の解析関数に渡す場合は、インバリアントカルチャまたは特定のを使用する必要があります。  
  
 システムにインストールされているカスタムカルチャの <xref:System.Globalization.CultureInfo.CultureTypes%2A> プロパティ値には、<xref:System.Globalization.CultureTypes?displayProperty=nameWithType> フラグが含まれ、カスタムカルチャには `LOCALE_CUSTOM_UNSPECIFIED` (0x1000 または 4096) の <xref:System.Globalization.CultureInfo.LCID%2A> プロパティ値が割り当てられます。 Windows 10 以降では、この値は、完全なカルチャデータを持たないシステム定義のカルチャにも割り当てられることに注意してください。  

## <a name="cultureinfo-and-cultural-data"></a>CultureInfo と文化のデータ

.NET は、実装、プラットフォーム、およびバージョンに応じて、さまざまなソースからカルチャデータを派生させることができます。

- .NET Framework 3.5 以前のバージョンでは、カルチャデータは、Windows オペレーティングシステムと .NET Framework の両方によって提供されます。

- .NET Framework 4 以降のバージョンでは、カルチャデータは Windows オペレーティングシステムによって提供されます。

- Windows で実行されている .NET Core のすべてのバージョンでは、Windows オペレーティングシステムによってカルチャデータが提供されます。

- Unix プラットフォームで実行されている .NET Core のすべてのバージョンでは、 [International Components For Unicode (ICU) ライブラリ](http://site.icu-project.org/)によってカルチャデータが提供されます。 ICU ライブラリの特定のバージョンは、個々のオペレーティングシステムによって異なります。

このため、特定の .NET 実装、プラットフォーム、またはバージョンで使用できるカルチャは、別の .NET 実装、プラットフォーム、またはバージョンでは使用できない場合があります。

一部の `CultureInfo` オブジェクトは、基になるプラットフォームによって異なります。 特に、"zh-tw"、または中国語 (簡体字、中国) と zh-tw、または中国語 (繁体字、台湾) は、Windows システムでは使用できますが、Unix システムではエイリアス化されたカルチャです。 "zh-tw" は "zh-tw" カルチャのエイリアスであり、"zh-tw-TW" は "zh-tw-Zh-hant" カルチャのエイリアスとして使用されます。 エイリアス化されたカルチャは、<xref:System.Globalization.CultureInfo.GetCultures%2A> メソッドの呼び出しによって返されることはなく、Windows の対応するカルチャとは異なる <xref:System.Globalization.CultureInfo.Parent> カルチャを含む異なるプロパティ値を持つ場合があります。 Zh-tw と zh-tw のカルチャでは、次のような違いがあります。

- Windows システムでは、"zh-tw" カルチャの親カルチャは "zh-tw-Hans" であり、"zh-tw" カルチャの親カルチャは "zh-tw-Zh-hant" です。 これらのカルチャの親カルチャは、両方とも "zh-tw" です。 Unix システムでは、両方のカルチャの親は "zh-tw" です。 これは、"zh-tw" または "zh-tw" カルチャのカルチャ固有のリソースを提供しないが、ニュートラルな "zh-tw-Hans" または "zh-tw" カルチャのリソースを提供する場合、アプリケーションは、ニュートラルカルチャのリソースを Windows に読み込みますが、Unix 上には読み込まないことを意味します。 Unix システムでは、スレッドの <xref:System.Globalization.CultureInfo.CurrentUICulture> を "zh-tw-Hans" または "zh-tw-Zh-hant" に明示的に設定する必要があります。 

- Windows システムでは、"zh-tw" カルチャを表すインスタンスで <xref:System.Globalization.CultureInfo.Equals%2A?displayProperty=nameWithType> を呼び出し、それに "zh-tw-Hans" インスタンスを渡すと、`true`が返されます。 Unix システムでは、メソッドの呼び出しによって `false`が返されます。 この動作は、"zh-tw" <xref:System.Globalization.CultureInfo> インスタンスで <xref:System.Globalization.CultureInfo.Equals%2A> を呼び出し、それに "zh-tw-Zh-hant" インスタンスを渡す場合にも当てはまります。

<a name="Dynamic"></a>   
## <a name="dynamic-culture-data"></a>動的なカルチャデータ  
 インバリアントカルチャを除き、カルチャデータは動的です。 これは、定義済みのカルチャに対しても当てはまります。 たとえば、国または地域で新しい通貨を採用したり、単語のスペルを変更したり、優先する暦を変更したり、カルチャの定義を変更してこれを追跡したりします。  カスタムカルチャは予告なしに変更される可能性があり、特定のカルチャはカスタムの置換カルチャによってオーバーライドされることがあります。 また、以下で説明するように、個々のユーザーはカルチャ設定をオーバーライドできます。 アプリケーションでは、常に実行時にカルチャデータを取得する必要があります。  
  
> [!CAUTION]
>  データを保存する場合は、アプリケーションでインバリアントカルチャ、バイナリ形式、または特定のカルチャに依存しない形式を使用する必要があります。 インバリアントカルチャ以外の特定のカルチャに関連付けられている現在の値に従って保存されたデータは読み取り不能になるか、またはそのカルチャが変更された場合に意味が変化する可能性があります。  
  
<a name="Current"></a>   
## <a name="the-current-culture-and-current-ui-culture"></a>現在のカルチャと現在の UI カルチャ  
 .NET アプリケーションのすべてのスレッドには、現在のカルチャと現在の UI カルチャがあります。 現在のカルチャでは、日付、時刻、数値、通貨値の書式指定規則、テキストの並べ替え順序、大文字小文字の規則、および文字列を比較する方法が決定されます。 現在の UI カルチャは、実行時にカルチャ固有のリソースを取得するために使用されます。  
  
> [!NOTE]
>  現在の UI カルチャと現在の UI カルチャがスレッドごとにどのように決定されるかについては、「[カルチャとスレッド](#Threads)」セクションを参照してください。 新しいアプリケーションドメインで実行されるスレッドと、アプリケーションドメインの境界を越えるスレッドで現在および現在の UI カルチャがどのように決定されるかについては、「[カルチャとアプリケーションドメイン](#AppDomain)」を参照してください。 タスクベースの非同期操作を実行するスレッドで現在のと現在のがどのように決定されるかについては、「[カルチャとタスクベースの非同期操作](#Async)」セクションを参照してください。  
  
 現在のカルチャの詳細については、<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> プロパティに関するトピックを参照してください。 現在の UI カルチャの詳細については、<xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> プロパティに関するトピックを参照してください。  
  
### <a name="retrieving-the-current-and-current-ui-cultures"></a>現在の UI カルチャと現在の UI カルチャを取得する  
 現在のカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクトは、次の2つの方法のいずれかで取得できます。  
  
-   <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> プロパティの値を取得する。  
  
-   [Thread](<xref:System.Threading.Thread.CurrentCulture>)プロパティの値を取得します。  
  
 次の例では、両方のプロパティ値を取得し、それらが等しいと表示されるように比較し、現在のカルチャの名前を表示します。  
  
 [!code-csharp[System.Globalization.CultureInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Current1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Current1.vb#1)]  
  
 現在の UI カルチャを表す <xref:System.Globalization.CultureInfo> オブジェクトは、次の2つの方法のいずれかで取得できます。  
  
-   <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> プロパティの値を取得する。  
  
-   [CurrentUICulture](<xref:System.Threading.Thread.CurrentUICulture>)プロパティの値を取得します。  
  
 次の例では、両方のプロパティ値を取得し、それらが等しいと表示されるように比較し、現在の UI カルチャの名前を表示します。  
  
 [!code-csharp[System.Globalization.CultureInfo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/CurrentUI1.cs#2)]
 [!code-vb[System.Globalization.CultureInfo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/CurrentUI1.vb#2)]  
  
### <a name="setting-the-current-and-current-ui-cultures"></a>現在の UI カルチャと現在の UI カルチャの設定  
 スレッドのカルチャと UI カルチャを変更するには、次の手順を実行します。  
  
1.  <xref:System.Globalization.CultureInfo> クラスコンストラクターを呼び出し、カルチャの名前を渡すことによって、そのカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクトをインスタンス化します。 <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> コンストラクターは、新しいカルチャが現在の Windows カルチャと同じである場合に、ユーザーオーバーライドを反映する <xref:System.Globalization.CultureInfo> オブジェクトをインスタンス化します。   <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> コンストラクターを使用すると、新しいカルチャが現在の Windows カルチャと同じ場合に、新しくインスタンス化された <xref:System.Globalization.CultureInfo> オブジェクトにユーザーオーバーライドを反映するかどうかを指定できます。  
  
2.  <xref:System.Globalization.CultureInfo> オブジェクトを .NET Core の <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> または <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> プロパティに割り当てるか、4.6 以降のバージョンを .NET Framework します。 (.NET Framework 4.5.2 以前のバージョンでは、`CultureInfo` オブジェクトを <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> または <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> プロパティに割り当てます)。   
  
 次の例では、現在のカルチャを取得します。 フランス語 (フランス) カルチャ以外の場合は、現在のカルチャをフランス語 (フランス) に変更します。 それ以外の場合は、現在のカルチャをフランス語 (ルクセンブルク) に変更します。  
  
 [!code-csharp[System.Globalization.CultureInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Change1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Change1.vb#3)]  
  
 次の例では、現在のカルチャを取得します。 他のスロベニア語 (スロベニア) カルチャである場合は、現在のカルチャをスロベニア語 (スロベニア) に変更します。 それ以外の場合は、現在のカルチャをクロアチア語 (クロアチア) に変更します。  
  
 [!code-csharp[System.Globalization.CultureInfo#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/ChangeUI1.cs#4)]
 [!code-vb[System.Globalization.CultureInfo#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/ChangeUI1.vb#4)]  
  
<a name="GetAll"></a>   
## <a name="getting-all-cultures"></a>すべてのカルチャを取得する  
 <xref:System.Globalization.CultureInfo.GetCultures%2A> メソッドを呼び出すことにより、カルチャの配列固有のカテゴリ、またはローカルコンピューターで使用可能なすべてのカルチャの配列を取得できます。 たとえば、カスタムカルチャ、特定のカルチャ、またはニュートラルカルチャを単独で、または組み合わせて取得できます。  
  
 次の例では、<xref:System.Globalization.CultureInfo.GetCultures%2A> メソッドを2回呼び出します。最初に、<xref:System.Globalization.CultureTypes?displayProperty=nameWithType> 列挙体メンバーを使用してすべてのカスタムカルチャを取得し、次に <xref:System.Globalization.CultureTypes?displayProperty=nameWithType> 列挙体メンバーを使用してすべての置換カルチャを取得します。  
  
 [!code-csharp[System.Globalization.CultureInfo#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/GetCultures1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/GetCultures1.vb#5)]  
  
<a name="Threads"></a>   
## <a name="culture-and-threads"></a>カルチャとスレッド  
 新しいアプリケーションスレッドが開始されると、現在のカルチャと現在の UI カルチャは、現在のシステムカルチャによって定義され、現在のスレッドカルチャによっては定義されません。 この違いを次の例に示します。 現在のカルチャと、アプリケーションスレッドの現在の UI カルチャをフランス語 (フランス) カルチャ (fr-fr) に設定します。 現在のカルチャが既に fr-fr の場合、この例では英語 (米国) カルチャ (en-us) に設定します。 通貨値として3つの乱数が表示され、新しいスレッドが作成されます。これにより、3つの乱数が通貨値として表示されます。 ただし、この例の出力に示されているように、新しいスレッドによって表示される通貨値には、メインアプリケーションスレッドからの出力とは異なり、フランス語 (フランス) カルチャの書式指定規則が反映されていません。  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/defaultthread1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/defaultthread1.vb#1)]  
  
 [!INCLUDE[net_v45](~/includes/net-v45-md.md)]前の .NET Framework のバージョンでは、メインアプリケーションスレッドが他のすべてのワーカースレッドと同じカルチャを共有するための最も一般的な方法は、アプリケーション全体のカルチャの名前か、アプリケーション全体のカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクトを <xref:System.Threading.ParameterizedThreadStart?displayProperty=nameWithType> デリゲートに渡すことです。 次の例では、この方法を使用して、2つのスレッドによって表示される通貨値が、同じカルチャの書式指定規則を反映するようにしています。  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/perthread1.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/perthread1.vb#2)]  
  
 スレッドプールのスレッドのカルチャと UI カルチャは、<xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29?displayProperty=nameWithType> メソッドを呼び出すことによって同様の方法で設定できます。  
  
 [!INCLUDE[net_v45](~/includes/net-v45-md.md)]以降では、そのカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクトを <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> および <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> プロパティに割り当てることにより、アプリケーションドメイン内のすべてのスレッドのカルチャと UI カルチャをより直接的に設定できます。 次の例では、これらのプロパティを使用して、既定のアプリケーションドメイン内のすべてのスレッドが同じカルチャを共有するようにしています。  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/setthreads1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/setthreads1.vb#3)]  
  
> [!WARNING]
>  <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> プロパティと <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> プロパティは静的メンバーですが、既定のカルチャと既定の UI カルチャは、これらのプロパティ値が設定された時点で最新のアプリケーションドメインに対してのみ定義されます。 詳細については、次の「[カルチャとアプリケーションドメイン](#AppDomain)」を参照してください。  
  
 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> と <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> のプロパティに値を割り当てると、アプリケーションドメイン内のスレッドのカルチャと UI カルチャも、カルチャが明示的に割り当てられていない場合は変更されます。 ただし、これらのスレッドは、現在のアプリケーションドメインでの実行中にのみ、新しいカルチャ設定を反映します。 これらのスレッドが別のアプリケーションドメインで実行される場合、そのカルチャは、そのアプリケーションドメインに対して定義されている既定のカルチャになります。 そのため、常にメインアプリケーションスレッドのカルチャを設定することをお勧めします。これは、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> と <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> プロパティに依存せずに変更することをお勧めします。  
  
<a name="AppDomain"></a>   
## <a name="culture-and-application-domains"></a>カルチャとアプリケーションドメイン  
 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> と <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> は、プロパティ値が設定または取得されたときに現在のアプリケーションドメインに対してのみ既定のカルチャを明示的に定義する静的プロパティです。 次の例では、既定のカルチャと既定の UI カルチャを既定のアプリケーションドメインのフランス語 (フランス) に設定し、<xref:System.AppDomainSetup> クラスと <xref:System.AppDomainInitializer> デリゲートを使用して、新しいアプリケーションドメインの既定のカルチャと UI カルチャをロシア語 (ロシア) に設定します。 次に、1つのスレッドが各アプリケーションドメインで2つのメソッドを実行します。 スレッドのカルチャと UI カルチャが明示的に設定されていないことに注意してください。これらは、スレッドが実行されているアプリケーションドメインの既定のカルチャおよび UI カルチャから派生します。 また、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> プロパティと <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> プロパティは、メソッド呼び出しが行われたときに現在のアプリケーションドメインの既定の <xref:System.Globalization.CultureInfo> 値を返すことにも注意してください。  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.AppDomain#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.appdomain/cs/appdomainex1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.AppDomain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.appdomain/vb/appdomainex1.vb#1)]  
  
 カルチャとアプリケーションドメインの詳細については、「[アプリケーション](~/docs/framework/app-domains/application-domains.md)ドメイン」トピックの「アプリケーションドメインとスレッド」セクションを参照してください。  
  
<a name="Async"></a>   
## <a name="culture-and-task-based-asynchronous-operations"></a>カルチャとタスクベースの非同期操作  
 [タスクベースの非同期プログラミングパターン](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md)では、<xref:System.Threading.Tasks.Task> オブジェクトと <xref:System.Threading.Tasks.Task%601> オブジェクトを使用して、スレッドプールのスレッドでデリゲートを非同期的に実行します。 特定のタスクが実行される特定のスレッドは事前にわからないが、実行時にのみ決定されます。  
  
 [!INCLUDE[net_v46](~/includes/net-v46-md.md)] 以降のバージョンを対象とするアプリの場合、カルチャは非同期操作のコンテキストの一部になります。 つまり、[!INCLUDE[net_v46](~/includes/net-v46-md.md)]を対象とするアプリから、既定では、非同期操作は、起動元のスレッドの <xref:System.Globalization.CultureInfo.CurrentCulture%2A> と <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> プロパティの値を継承します。 現在のカルチャまたは現在の UI カルチャがシステムカルチャと異なる場合、現在のカルチャはスレッド境界を越えて、非同期操作を実行しているスレッドプールスレッドの現在のカルチャになります。  
  
 簡単な例を次に示します。 <xref:System.Runtime.Versioning.TargetFrameworkAttribute> 属性を使用して、[!INCLUDE[net_v46](~/includes/net-v46-md.md)]をターゲットにします。 この例では、通貨値として書式設定された数値を返す <xref:System.Func%601> デリゲート `formatDelegate`を定義しています。 この例では、現在のシステムカルチャをフランス語 (フランス) に変更するか、フランス語 (フランス) が既に現在のカルチャである場合は英語 (米国) に変更します。 次のようになります。  
  
-   メインアプリスレッドで同期的に実行されるように、デリゲートを直接呼び出します。  
  
-   スレッドプールのスレッドでデリゲートを非同期的に実行するタスクを作成します。  
  
-   <xref:System.Threading.Tasks.Task.RunSynchronously%2A?displayProperty=nameWithType> メソッドを呼び出すことによって、メインアプリスレッド上でデリゲートを同期的に実行するタスクを作成します。  
  
 この例の出力に示すように、現在のカルチャがフランス語 (フランス) に変更されると、タスクが非同期に呼び出されるスレッドの現在のカルチャが、非同期操作の現在のカルチャになります。  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture1.vb#1)]  
  
 [!INCLUDE[net_v46](~/includes/net-v46-md.md)]より前のバージョンの .NET Framework を対象とするアプリ、または特定のバージョンの .NET Framework を対象としないアプリの場合、呼び出し元スレッドのカルチャは、タスクのコンテキストの一部ではありません。 代わりに、1つのが明示的に定義されている場合を除き、既定では、新しいスレッドのカルチャはシステムカルチャになります。 次の例は、前の例と同じですが、<xref:System.Runtime.Versioning.TargetFrameworkAttribute> 属性がない点が異なります。 実行例が英語 (米国) であるシステムのシステムカルチャは、スレッドプールのスレッドで非同期的に実行されるタスクのカルチャであり、fr-fr ではなく en-us です。  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture2.vb#2)]  
  
 [!INCLUDE[net_v45](~/includes/net-v45-md.md)] 以降、[!INCLUDE[net_v46](~/includes/net-v46-md.md)]より前のバージョンの .NET Framework を対象とするアプリでは、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> および <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> のプロパティを使用して、スレッドプールのスレッドで実行される非同期タスクで、呼び出し元のスレッドのカルチャが使用されるようにすることができます。 次の例は前の例と同じですが、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> プロパティを使用して、スレッドプールのスレッドがメインアプリのスレッドと同じカルチャを持つことを確認します。  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture3.cs#3)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture3.vb#3)]  
  
 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> と <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> はアプリごとのドメインプロパティです。つまり、特定のアプリケーションドメインでカルチャが明示的に割り当てられていないすべてのスレッドの既定のカルチャを設定します。 ただし、[!INCLUDE[net_v46](~/includes/net-v46-md.md)] 以降を対象とするアプリでは、タスクがアプリケーションドメインの境界を越えている場合でも、呼び出し元のスレッドのカルチャは非同期タスクのコンテキストの一部として残ります。  
  
 次の例は、タスクが実行されているメソッドがアプリケーションドメインの境界を越えている場合でも、呼び出し元のスレッドのカルチャがタスクベースの非同期操作の現在のカルチャを維持していることを示しています。 このクラスは、1から1000の間のランダムな倍精度浮動小数点数を通貨値として返す1つのメソッド `GetFormattedNumber`を持つ `DataRetriever`クラスを定義します。 最初のタスクは、単に `DataRetriever` インスタンスをインスタンス化し、その `GetFormattedNumber` メソッドを呼び出します。 2番目のタスクは、現在のアプリケーションドメインを報告し、新しいアプリケーションドメインを作成し、新しいアプリケーションドメインで `DataRetriever` インスタンスをインスタンス化し、その `GetFormattedNumber` メソッドを呼び出します。 この例の出力に示されているように、現在のカルチャは、呼び出し元のスレッド、最初のタスク、および2番目のタスクがメインアプリケーションドメインと2番目のアプリケーションドメインで実行されているときの両方で同じままです。  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture4.cs#4)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture4.vb#4)]  
  
<a name="Serialization"></a>  
## <a name="cultureinfo-object-serialization"></a>CultureInfo オブジェクトのシリアル化  
 <xref:System.Globalization.CultureInfo> オブジェクトがシリアル化されると、実際に格納されるものはすべて <xref:System.Globalization.CultureInfo.Name%2A> と <xref:System.Globalization.CultureInfo.UseUserOverride%2A>になります。 この <xref:System.Globalization.CultureInfo.Name%2A> が同じ意味を持つ環境でのみ、正常にシリアル化解除されます。 次の3つの例では、これが常にそうであるとは限りません。  
  
- <xref:System.Globalization.CultureInfo.CultureTypes%2A> プロパティの値が <xref:System.Globalization.CultureTypes.InstalledWin32Cultures?displayProperty=nameWithType>であり、そのカルチャが特定のバージョンの Windows オペレーティングシステムで初めて導入された場合は、以前のバージョンの Windows で逆シリアル化することはできません。 たとえば、カルチャが Windows 10 で導入された場合、Windows 8 で逆シリアル化することはできません。  
  
-   <xref:System.Globalization.CultureInfo.CultureTypes%2A> 値が <xref:System.Globalization.CultureTypes.UserCustomCulture?displayProperty=nameWithType>であり、シリアル化が解除されているコンピューターにこのユーザーカスタムカルチャがインストールされていない場合、逆シリアル化することはできません。  
  
-   <xref:System.Globalization.CultureInfo.CultureTypes%2A> 値が <xref:System.Globalization.CultureTypes.ReplacementCultures?displayProperty=nameWithType>であり、シリアル化解除されるコンピューターにこの置換カルチャがない場合は、同じ名前にシリアル化解除されますが、同じ特性のすべてには逆シリアル化されません。 たとえば、en-us がコンピューター A の置換カルチャであり、コンピューター B 上にはありません。このカルチャを参照する <xref:System.Globalization.CultureInfo> オブジェクトがコンピューター A でシリアル化され、コンピューター B で逆シリアル化される場合、カルチャのカスタム特性は一切送信されません。 カルチャは正常に逆シリアル化されますが、意味は異なります。  
  
<a name="CPanel"></a>   
## <a name="control-panel-overrides"></a>コントロールパネルの上書き  
 ユーザーは、コントロールパネルの [地域と言語のオプション] の部分を使用して、Windows の現在のカルチャに関連付けられている値の一部を上書きすることができます。 たとえば、ユーザーは、日付を別の形式で表示したり、カルチャに既定以外の通貨を使用したりすることができます。 一般に、アプリケーションはこれらのユーザーのオーバーライドを優先する必要があります。  
  
 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> が `true`、指定されたカルチャが Windows の現在のカルチャに一致する場合、<xref:System.Globalization.CultureInfo> は、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A> プロパティによって返される <xref:System.Globalization.DateTimeFormatInfo> インスタンスのプロパティのユーザー設定や、<xref:System.Globalization.NumberFormatInfo> プロパティによって返される <xref:System.Globalization.CultureInfo.NumberFormat%2A> インスタンスのプロパティなど、これらのオーバーライドを使用します。 ユーザー設定が <xref:System.Globalization.CultureInfo>に関連付けられているカルチャと互換性がない場合、たとえば、選択したカレンダーが <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>でない場合、メソッドの結果とプロパティの値は定義されません。  
  
<a name="AlternateSort"></a>   
## <a name="alternate-sort-orders"></a>代替の並べ替え順序  
 一部のカルチャでは、複数の並べ替え順序がサポートされています。 例 :  
  
-   スペイン語 (スペイン) カルチャには、既定の国際並べ替え順序と従来の並べ替え順序という2つの並べ替え順があります。 Es カルチャ名を使用して <xref:System.Globalization.CultureInfo> オブジェクトをインスタンス化すると、国際並べ替え順が使用されます。 Tradnl カルチャ名を使用して <xref:System.Globalization.CultureInfo> オブジェクトをインスタンス化すると、従来の並べ替え順序が使用されます。  
  
-   Zh-tw (中国語 (簡体字、PRC)) カルチャでは、発音 (既定) とストローク数の2つの並べ替え順がサポートされています。 Zh-tw-CN カルチャ名を使用して <xref:System.Globalization.CultureInfo> オブジェクトをインスタンス化すると、既定の並べ替え順序が使用されます。 0x00020804 のローカル識別子を使用して <xref:System.Globalization.CultureInfo> オブジェクトをインスタンス化すると、文字列はストローク数で並べ替えられます。  
  
 代替の並べ替え順序をサポートするカルチャと、各カルチャの既定の並べ替え順序および代替の並べ替え順序の識別子を次の表に示します。  
  
|カルチャ名|カルチャ|既定の並べ替え名と識別子|代替の並べ替え名と識別子|  
|------------------|-------------|--------------------------------------|----------------------------------------|  
|es-ES|スペイン語 (スペイン)|International: 0x00000C0A|Traditional: 0x0000040A|  
|zh-TW|中国語 (台湾)|Stroke Count: 0x00000404|Bopomofo: 0x00030404|  
|zh-CN|中国語 (中国)|Pronunciation: 0x00000804|Stroke Count: 0x00020804|  
|zh-HK|中国語 (香港特別行政区)|Stroke Count: 0x00000c04|Stroke Count: 0x00020c04|  
|zh-SG|中国語 (シンガポール)|Pronunciation: 0x00001004|Stroke Count: 0x00021004|  
|zh-MO|中国語 (マカオ)|Pronunciation: 0x00001404|Stroke Count: 0x00021404|  
|ja-JP|日本語 (日本)|Default: 0x00000411|Unicode: 0x00010411|  
|ko-KR|韓国語 (韓国)|Default: 0x00000412|Korean Xwansung - Unicode: 0x00010412|  
|de-DE|ドイツ語 (ドイツ)|Dictionary: 0x00000407|Phone Book Sort DIN: 0x00010407|  
|hu-HU|ハンガリー語 (ハンガリー)|Default: 0x0000040e|Technical Sort: 0x0001040e|  
|ka-GE|グルジア語 (グルジア共和国)|Traditional: 0x00000437|Modern Sort: 0x00010437|  
  
<a name="Windows"></a>   
## <a name="the-current-culture-and-uwp-apps"></a>現在のカルチャと UWP アプリ  
 ユニバーサル Windows プラットフォーム (UWP) アプリでは、<xref:System.Globalization.CultureInfo.CurrentCulture%2A> と <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> のプロパティは、.NET Framework や .NET Core アプリの場合と同様に、読み取り/書き込みが可能です。 ただし、UWP アプリでは1つのカルチャが認識されます。 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> と <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> の各プロパティは、 [Windows の ApplicationModel. .resources](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) ..........  

.NET Framework と .NET Core アプリでは、現在のカルチャはスレッドごとの設定であり、<xref:System.Globalization.CultureInfo.CurrentCulture%2A> プロパティと <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> プロパティには、現在のスレッドのカルチャと UI カルチャのみが反映されます。 UWP アプリでは、現在のカルチャは、グローバル設定である、 [Windows の ApplicationModel. .resources](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) ............ .resources コレクションにマップされます。 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> または <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> プロパティを設定すると、アプリ全体のカルチャが変更されます。カルチャは、スレッド単位で設定することはできません。
  
## Examples  
 次の例では、国際並べ替えを使用してスペイン語 (スペイン) 用の <xref:System.Globalization.CultureInfo> オブジェクトを作成し、従来の並べ替えを使用して別の <xref:System.Globalization.CultureInfo> オブジェクトを作成する方法を示します。  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
    <altmember cref="T:System.Globalization.RegionInfo" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Globalization.CultureInfo" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(int culture);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : int -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo culture" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="culture">定義済みの <see cref="T:System.Globalization.CultureInfo" /> 識別子、既存の <see cref="P:System.Globalization.CultureInfo.LCID" /> オブジェクトの <see cref="T:System.Globalization.CultureInfo" /> プロパティ、または Windows 専用カルチャ識別子。</param>
        <summary>カルチャ識別子によって指定するカルチャに基づいて、<see cref="T:System.Globalization.CultureInfo" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

Windows システムで使用できるカルチャの定義済みカルチャ識別子は、 [windows でサポートされている言語/地域名の一覧](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c)の **[言語タグ]** 列に一覧表示されます。 カルチャ名は、[BCP 47](https://tools.ietf.org/html/bcp47) によって定義されている標準に準拠します。

 ほとんどの場合、`culture` パラメーターは、対応する各国語サポート (NLS) のロケール識別子にマップされます。 `culture` パラメーターの値が、新しい <xref:System.Globalization.CultureInfo>の <xref:System.Globalization.CultureInfo.LCID%2A> プロパティの値になります。  
  
 ロケール名は Lcid に適しているため、ロケール名のコンストラクター <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType>を呼び出すことをお勧めします。 カスタムロケールの場合は、ロケール名が必要です。  
  
 ユーザーは、コントロールパネルの [地域と言語のオプション] の部分を使用して、Windows の現在のカルチャに関連付けられている値の一部を上書きすることができます。 たとえば、ユーザーは、日付を別の形式で表示したり、カルチャに既定以外の通貨を使用したりすることができます。 指定したカルチャ識別子が現在の Windows カルチャのカルチャ識別子と一致する場合、このコンストラクターは、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A> プロパティによって返される <xref:System.Globalization.DateTimeFormatInfo> インスタンスのプロパティのユーザー設定、<xref:System.Globalization.CultureInfo.NumberFormat%2A> プロパティによって返される <xref:System.Globalization.NumberFormatInfo> インスタンスのプロパティなど、これらのオーバーライドを使用する <xref:System.Globalization.CultureInfo> を作成します。 ユーザー設定が <xref:System.Globalization.CultureInfo> に関連付けられているカルチャと互換性がない場合 (たとえば、選択したカレンダーが <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>ではない場合)、メソッドの結果とプロパティの値は定義されません。  
  
 指定したカルチャ識別子が現在の Windows カルチャの識別子と一致しない場合、このコンストラクターは、指定されたカルチャの既定値を使用する <xref:System.Globalization.CultureInfo> を作成します。  
  
 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> プロパティは、常に `true`に設定されます。  
  
 たとえば、アラビア語 (サウジアラビア) が現在の Windows カルチャであり、ユーザーが calendar をイスラム暦からグレゴリオ暦に変更したとします。  
  
-   `CultureInfo("0x0401")` (カルチャ名 ar-SA) では、<xref:System.Globalization.CultureInfo.Calendar%2A> が <xref:System.Globalization.GregorianCalendar> (ユーザー設定) に設定され、<xref:System.Globalization.CultureInfo.UseUserOverride%2A> が `true`に設定されます。  
  
-   `CultureInfo("0x041E")` (カルチャ名は th) の場合、<xref:System.Globalization.CultureInfo.Calendar%2A> は <xref:System.Globalization.ThaiBuddhistCalendar> (th の既定の暦) に設定され、<xref:System.Globalization.CultureInfo.UseUserOverride%2A> は `true`に設定されます。  
  
 ユーロを使用するカルチャの場合、.NET Framework と Windows XP では、既定の通貨がユーロとして設定されます。 ただし、以前のバージョンの Windows では、 このため、以前のバージョンの Windows のユーザーがコントロールパネルの [地域と言語のオプション] で通貨の設定を変更していない場合、通貨が正しくない可能性があります。 通貨に .NET Framework 既定の設定を使用するには、アプリケーションで `useUserOverride` パラメーターを受け取り、それを `false`に設定する <xref:System.Globalization.CultureInfo> コンストラクターのオーバーロードを使用する必要があります。  
  
> [!NOTE]
>  旧バージョンとの互換性のために、0x0004 または0x7c04 の `culture` パラメーターを使用して構築されたカルチャは、それぞれ zh-tw または zh-tw-CHT の <xref:System.Globalization.CultureInfo.Name%2A> プロパティを持ちます。 代わりに、古い名前を使用する理由がない限り、zh-tw-Hans または zh-tw の現在の標準カルチャ名を使用してカルチャを構築することをお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="culture" /> が 0 未満です。</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="culture" /> が正しいカルチャ識別子ではありません。 詳細については、「呼び出し時の注意」をご覧ください。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以前のバージョンでは、<paramref name="culture" /> が有効なカルチャ識別子でない場合、<see cref="T:System.ArgumentException" /> がスローされます。 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]以降では、このコンストラクターは <see cref="T:System.Globalization.CultureNotFoundException" />をスローします。 Windows 7 以降で [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 以降で実行されるアプリ以降では、このメソッドは、id がオペレーティングシステムから <paramref name="culture" /> ている <see cref="T:System.Globalization.CultureInfo" /> オブジェクトを取得しようとします。オペレーティングシステムがそのカルチャをサポートしていない場合、メソッドは <see cref="T:System.Globalization.CultureNotFoundException" /> 例外をスローします。</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : string -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">定義済みの <see cref="T:System.Globalization.CultureInfo" /> 名、既存の <see cref="P:System.Globalization.CultureInfo.Name" /> の <see cref="T:System.Globalization.CultureInfo" />、または Windows 専用カルチャ名。 <paramref name="name" /> では、大文字と小文字は区別されません。</param>
        <summary>名前で指定するカルチャに基づいて、<see cref="T:System.Globalization.CultureInfo" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

Windows システム上の定義済みカルチャ名の一覧については、 [windows でサポートされている言語/地域名の一覧](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c)の **[言語タグ]** 列を参照してください。 カルチャ名は、[BCP 47](https://tools.ietf.org/html/bcp47) によって定義されている標準に準拠します。 さらに、Windows 10 以降では、`name` 有効な BCP-47 言語タグを使用できます。  
  
 `name` が <xref:System.String.Empty?displayProperty=nameWithType>の場合、コンストラクターはインバリアントカルチャのインスタンスを作成します。これは、<xref:System.Globalization.CultureInfo.InvariantCulture%2A> プロパティの値を取得することと同じです。  
  
 ユーザーは、コントロールパネルの [地域と言語のオプション] の部分を使用して、Windows の現在のカルチャに関連付けられている値の一部を上書きすることができます。 たとえば、ユーザーは、日付を別の形式で表示したり、カルチャに既定以外の通貨を使用したりすることができます。 `name` に関連付けられているカルチャ識別子が現在の Windows カルチャのカルチャ識別子と一致する場合、このコンストラクターは、これらのオーバーライドを使用する <xref:System.Globalization.CultureInfo> オブジェクトを作成します。これには、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A> プロパティによって返される <xref:System.Globalization.DateTimeFormatInfo> インスタンスのプロパティのユーザー設定、および <xref:System.Globalization.NumberFormatInfo> プロパティによって返される <xref:System.Globalization.CultureInfo.NumberFormat%2A> インスタンスのプロパティが含まれます。 ユーザー設定が <xref:System.Globalization.CultureInfo>に関連付けられているカルチャと互換性がない場合、たとえば、選択したカレンダーが <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>でない場合、メソッドの結果とプロパティの値は定義されません。  
  
 `name` に関連付けられているカルチャ識別子が現在の Windows カルチャのカルチャ識別子と一致しない場合、このコンストラクターは、指定されたカルチャの既定値を使用する <xref:System.Globalization.CultureInfo> オブジェクトを作成します。  
  
 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> プロパティは、常に `true`に設定されます。  
  
 たとえば、アラビア語 (サウジアラビア) が Windows の現在のカルチャであり、ユーザーがカレンダーをイスラム暦からグレゴリオ暦に変更したとします。  
  
-   `CultureInfo("ar-SA")`では、<xref:System.Globalization.CultureInfo.Calendar%2A> が <xref:System.Globalization.GregorianCalendar> (ユーザー設定) に設定され、<xref:System.Globalization.CultureInfo.UseUserOverride%2A> が `true`に設定されます。  
  
-   `CultureInfo("th-TH")`では、<xref:System.Globalization.CultureInfo.Calendar%2A> が <xref:System.Globalization.ThaiBuddhistCalendar> (th の既定の暦) に設定され、<xref:System.Globalization.CultureInfo.UseUserOverride%2A> が `true`に設定されます。  
  
 新しい <xref:System.Globalization.CultureInfo> の <xref:System.Globalization.CultureInfo.LCID%2A> プロパティは、指定された名前に関連付けられているカルチャ識別子に設定されます。  
  
 ユーロを使用するカルチャの場合、.NET Framework と Windows XP では、既定の通貨がユーロとして設定されます。 ただし、以前のバージョンの Windows では、これは実行されません。 このため、以前のバージョンの Windows のユーザーがコントロールパネルの [地域と言語のオプション] で通貨の設定を変更していない場合、通貨が正しくない可能性があります。 通貨に .NET Framework 既定の設定を使用するには、アプリケーションで `useUserOverride` パラメーターを受け取り、それを `false`に設定する <xref:System.Globalization.CultureInfo> コンストラクターのオーバーロードを使用する必要があります。  
  
   
  
## Examples  
 次の例では、現在のカルチャを取得します。 フランス語 (フランス) カルチャ以外のものである場合は、<xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> コンストラクターを呼び出して、フランス語 (フランス) カルチャを表す <xref:System.Globalization.CultureInfo> オブジェクトをインスタンス化し、現在のスレッドカルチャにします。 それ以外の場合は、フランス語 (ルクセンブルク) カルチャを表す <xref:System.Globalization.CultureInfo> オブジェクトをインスタンス化し、それを現在のカルチャにします。  
  
 [!code-csharp[System.Globalization.CultureInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Change1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Change1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> が null です。</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="name" /> が有効なカルチャ名ではありません。 詳細については、「呼び出し時の注意」をご覧ください。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以前のバージョンでは、<paramref name="name" /> が有効なカルチャ名ではない場合、<see cref="T:System.ArgumentException" /> がスローされます。 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]以降では、このコンストラクターは <see cref="T:System.Globalization.CultureNotFoundException" />をスローします。 Windows 7 以降で [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 以降で実行されるアプリ以降では、このメソッドは、id がオペレーティングシステムから <paramref name="name" /> ている <see cref="T:System.Globalization.CultureInfo" /> オブジェクトを取得しようとします。オペレーティングシステムがそのカルチャをサポートしていない場合、<paramref name="name" /> が補助カルチャまたは置換カルチャの名前でない場合、メソッドは <see cref="T:System.Globalization.CultureNotFoundException" /> 例外をスローします。</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (int culture, bool useUserOverride);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 culture, bool useUserOverride) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As Integer, useUserOverride As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(int culture, bool useUserOverride);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : int * bool -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo (culture, useUserOverride)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="useUserOverride" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="culture">定義済みの <see cref="T:System.Globalization.CultureInfo" /> 識別子、既存の <see cref="P:System.Globalization.CultureInfo.LCID" /> オブジェクトの <see cref="T:System.Globalization.CultureInfo" /> プロパティ、または Windows 専用カルチャ識別子。</param>
        <param name="useUserOverride">ユーザーが選択したカルチャ設定 (<see langword="true" />) または既定のカルチャ設定 (<see langword="false" />) のいずれを使用するかを示すブール値。</param>
        <summary>カルチャ識別子で指定したカルチャと、システムからユーザーが選択したカルチャを使用するかどうかを指定するブール値に基づいて、<see cref="T:System.Globalization.CultureInfo" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

Windows システムで使用できる定義済みカルチャ識別子は、 [windows でサポートされている言語/地域名の一覧](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c)の **[言語タグ]** 列に一覧表示されます。 カルチャ名は、[BCP 47](https://tools.ietf.org/html/bcp47) によって定義されている標準に準拠します。

 ほとんどの場合、`culture` パラメーターは、対応する各国語サポート (NLS) のロケール識別子にマップされます。 `culture` パラメーターの値が、新しい <xref:System.Globalization.CultureInfo>の <xref:System.Globalization.CultureInfo.LCID%2A> プロパティの値になります。  
  
 ロケール名は Lcid に適しているため、ロケール名のコンストラクター <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType>を呼び出すことをお勧めします。 カスタムロケールの場合は、ロケール名が必要です。  
  
 ユーザーは、コントロールパネルの [地域と言語のオプション] の部分を使用して、Windows の現在のカルチャに関連付けられている値の一部を上書きすることができます。 たとえば、ユーザーは、日付を別の形式で表示したり、カルチャに既定以外の通貨を使用したりすることができます。  
  
 通常、アプリケーションはユーザーの上書きを許可しません。 上書きを禁止することで、データの安定性が保証されないことに注意してください。ブログの入力[カルチャデータは、安定しているとは見なされません (インバリアントを除く)](https://go.microsoft.com/fwlink/?LinkId=156850)。  
  
 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> プロパティが `true` に設定されていて、指定されたカルチャ識別子が現在の Windows カルチャの識別子と一致する場合、このコンストラクターは、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A> プロパティによって返される <xref:System.Globalization.DateTimeFormatInfo> インスタンスのプロパティのユーザー設定や、<xref:System.Globalization.NumberFormatInfo> プロパティによって返される <xref:System.Globalization.CultureInfo.NumberFormat%2A> インスタンスのプロパティなど、これらのオーバーライドを使用する <xref:System.Globalization.CultureInfo> を作成します。 ユーザー設定が <xref:System.Globalization.CultureInfo>に関連付けられているカルチャと互換性がない場合、たとえば、選択したカレンダーが <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>でない場合、メソッドの結果とプロパティの値は定義されません。  
  
 それ以外の場合、このコンストラクターは、指定されたカルチャの既定値を使用する <xref:System.Globalization.CultureInfo> を作成します。  
  
 `useUserOverride` パラメーターの値が <xref:System.Globalization.CultureInfo.UseUserOverride%2A> プロパティの値になります。  
  
 たとえば、アラビア語 (サウジアラビア) が Windows の現在のカルチャであり、ユーザーが calendar をイスラム暦からグレゴリオ暦に変更したとします。  
  
-   `CultureInfo("0x0401", true)` (カルチャ名 ar-SA) では、<xref:System.Globalization.CultureInfo.Calendar%2A> が <xref:System.Globalization.GregorianCalendar> (ユーザー設定) に設定され、<xref:System.Globalization.CultureInfo.UseUserOverride%2A> が `true`に設定されます。  
  
-   `CultureInfo("0x0401", false)` (カルチャ名 ar) では、<xref:System.Globalization.CultureInfo.Calendar%2A> が <xref:System.Globalization.HijriCalendar> (ar の既定の暦) に設定され、<xref:System.Globalization.CultureInfo.UseUserOverride%2A> が `false`に設定されます。  
  
-   `CultureInfo("0x041E", true)` (カルチャ名は th) の場合、<xref:System.Globalization.CultureInfo.Calendar%2A> は <xref:System.Globalization.ThaiBuddhistCalendar> (th の既定の暦) に設定され、<xref:System.Globalization.CultureInfo.UseUserOverride%2A> は `true`に設定されます。  
  
-   `CultureInfo("0x041E", false)` (カルチャ名は th) の場合、<xref:System.Globalization.CultureInfo.Calendar%2A> は <xref:System.Globalization.ThaiBuddhistCalendar> (th の既定の暦) に設定され、<xref:System.Globalization.CultureInfo.UseUserOverride%2A> は `false`に設定されます。  
  
 ユーロを使用するカルチャの場合、.NET Framework と Windows XP では、既定の通貨がユーロとして設定されます。 ただし、以前のバージョンの Windows では、 このため、以前のバージョンの Windows のユーザーがコントロールパネルの [地域と言語のオプション] で通貨の設定を変更していない場合、通貨が正しくない可能性があります。 通貨に .NET Framework 既定の設定を使用するには、アプリケーションで `useUserOverride` パラメーターを `false`に設定する必要があります。  
  
> [!NOTE]
>  旧バージョンとの互換性のために、0x0004 または0x7c04 の `culture` パラメーターを使用して構築されたカルチャは、それぞれ zh-tw または zh-tw-CHT の <xref:System.Globalization.CultureInfo.Name%2A> プロパティを持ちます。 代わりに、古い名前を使用する理由がない限り、zh-tw-Hans または zh-tw の現在の標準カルチャ名を使用してカルチャを構築することをお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="culture" /> が 0 未満です。</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="culture" /> が正しいカルチャ識別子ではありません。 詳細については、「呼び出し時の注意」をご覧ください。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以前のバージョンでは、<paramref name="culture" /> が有効なカルチャ識別子でない場合、<see cref="T:System.ArgumentException" /> がスローされます。 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]以降では、このコンストラクターは <see cref="T:System.Globalization.CultureNotFoundException" />をスローします。 Windows 7 以降で [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 以降で実行されるアプリ以降では、このメソッドは、id がオペレーティングシステムから <paramref name="culture" /> ている <see cref="T:System.Globalization.CultureInfo" /> オブジェクトを取得しようとします。オペレーティングシステムがそのカルチャをサポートしていない場合、メソッドは <see cref="T:System.Globalization.CultureNotFoundException" /> 例外をスローします。</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (string name, bool useUserOverride);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, bool useUserOverride) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, useUserOverride As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(System::String ^ name, bool useUserOverride);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : string * bool -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo (name, useUserOverride)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="useUserOverride" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="name">定義済みの <see cref="T:System.Globalization.CultureInfo" /> 名、既存の <see cref="P:System.Globalization.CultureInfo.Name" /> の <see cref="T:System.Globalization.CultureInfo" />、または Windows 専用カルチャ名。 <paramref name="name" /> では、大文字と小文字は区別されません。</param>
        <param name="useUserOverride">ユーザーが選択したカルチャ設定 (<see langword="true" />) または既定のカルチャ設定 (<see langword="false" />) のいずれを使用するかを示すブール値。</param>
        <summary>名前で指定したカルチャと、システムからユーザーが選択したカルチャ設定を使用するかどうかを指定するブール値に基づいて、<see cref="T:System.Globalization.CultureInfo" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

定義済みカルチャ名の一覧については、 [Windows でサポートされている言語/地域名の一覧](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c)の **[言語タグ]** 列を参照してください。 カルチャ名は、[BCP 47](https://tools.ietf.org/html/bcp47) によって定義されている標準に準拠します。 さらに、Windows 10 以降では、`name` 有効な BCP-47 言語タグを使用できます。  
  
`name` が <xref:System.String.Empty?displayProperty=nameWithType>の場合、コンストラクターはインバリアントカルチャのインスタンスを作成します。これは、<xref:System.Globalization.CultureInfo.InvariantCulture%2A> プロパティの値を取得することと同じです。  
  
 ユーザーは、コントロールパネルの [地域と言語のオプション] で、現在の Windows カルチャに関連付けられている値の一部を上書きすることもできます。 たとえば、ユーザーは、日付を別の形式で表示したり、カルチャに既定以外の通貨を使用したりすることができます。  
  
 通常、アプリケーションはユーザーの上書きを許可しません。 上書きを禁止することで、データの安定性が保証されないことに注意してください。ブログの入力[カルチャデータは、安定しているとは見なされません (インバリアントを除く)](https://go.microsoft.com/fwlink/?LinkId=156850)。  
  
 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> プロパティが `true` に設定されていて、指定されたカルチャ名に関連付けられているカルチャ識別子が現在の Windows カルチャのカルチャ識別子と一致する場合、このコンストラクターは、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A> プロパティによって返される <xref:System.Globalization.DateTimeFormatInfo> インスタンスのプロパティのユーザー設定、<xref:System.Globalization.NumberFormatInfo> プロパティによって返される <xref:System.Globalization.CultureInfo.NumberFormat%2A> インスタンスのプロパティなど、これらのオーバーライドを使用する <xref:System.Globalization.CultureInfo> を ユーザー設定が <xref:System.Globalization.CultureInfo>に関連付けられているカルチャと互換性がない場合、たとえば、選択したカレンダーが <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>でない場合、メソッドの結果とプロパティの値は定義されません。  
  
 それ以外の場合、このコンストラクターは、指定されたカルチャの既定値を使用する <xref:System.Globalization.CultureInfo> を作成します。  
  
 `useUserOverride` パラメーターの値が <xref:System.Globalization.CultureInfo.UseUserOverride%2A> プロパティの値になります。  
  
 たとえば、アラビア語 (サウジアラビア) が Windows の現在のカルチャであり、ユーザーがカレンダーをイスラム暦からグレゴリオ暦に変更したとします。  
  
-   `CultureInfo("ar-SA", true)`では、<xref:System.Globalization.CultureInfo.Calendar%2A> が <xref:System.Globalization.GregorianCalendar> (ユーザー設定) に設定され、<xref:System.Globalization.CultureInfo.UseUserOverride%2A> が `true`に設定されます。  
  
-   `CultureInfo("ar-SA", false)`では、<xref:System.Globalization.CultureInfo.Calendar%2A> が <xref:System.Globalization.HijriCalendar> (ar の既定の暦) に設定され、<xref:System.Globalization.CultureInfo.UseUserOverride%2A> が `false`に設定されます。  
  
-   `CultureInfo("th-TH", true)`では、<xref:System.Globalization.CultureInfo.Calendar%2A> が <xref:System.Globalization.ThaiBuddhistCalendar> (th の既定の暦) に設定され、<xref:System.Globalization.CultureInfo.UseUserOverride%2A> が `true`に設定されます。  
  
-   `CultureInfo("th-TH", false)`では、<xref:System.Globalization.CultureInfo.Calendar%2A> が <xref:System.Globalization.ThaiBuddhistCalendar> (th の既定の暦) に設定され、<xref:System.Globalization.CultureInfo.UseUserOverride%2A> が `false`に設定されます。  
  
 新しい <xref:System.Globalization.CultureInfo> の <xref:System.Globalization.CultureInfo.LCID%2A> プロパティは、指定された名前に関連付けられているカルチャ識別子に設定されます。  
  
 ユーロを使用するカルチャの場合、.NET Framework と Windows XP では、既定の通貨がユーロとして設定されます。 ただし、以前のバージョンの Windows では、これは実行されません。 このため、以前のバージョンの Windows のユーザーがコントロールパネルの [地域と言語のオプション] で通貨の設定を変更していない場合、通貨が正しくない可能性があります。 通貨に .NET Framework 既定の設定を使用するには、アプリケーションで `useUserOverride` パラメーターを `false`に設定する必要があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> が null です。</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="name" /> が有効なカルチャ名ではありません。 詳細については、「呼び出し時の注意」をご覧ください。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以前のバージョンでは、<paramref name="name" /> が有効なカルチャ名ではない場合、<see cref="T:System.ArgumentException" /> がスローされます。 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]以降では、このコンストラクターは <see cref="T:System.Globalization.CultureNotFoundException" />をスローします。 Windows 7 以降で [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 以降で実行されるアプリ以降では、このメソッドは、id がオペレーティングシステムから <paramref name="name" /> ている <see cref="T:System.Globalization.CultureInfo" /> オブジェクトを取得しようとします。オペレーティングシステムがそのカルチャをサポートしていない場合、<paramref name="name" /> が補助カルチャまたは置換カルチャの名前でない場合、メソッドは <see cref="T:System.Globalization.CultureNotFoundException" /> 例外をスローします。</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Calendar">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.Calendar Calendar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar Calendar" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Calendar" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Calendar As Calendar" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::Calendar ^ Calendar { System::Globalization::Calendar ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Calendar : System.Globalization.Calendar" Usage="System.Globalization.CultureInfo.Calendar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カルチャで使用する既定の暦を取得します。</summary>
        <value>カルチャで使用する既定の暦を表す <see cref="T:System.Globalization.Calendar" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザーは、コントロールパネルの [地域と言語のオプション] の部分を使用して、Windows の現在のカルチャに関連付けられている値の一部を上書きすることができます。 たとえば、ユーザーは、日付を別の形式で表示したり、カルチャに既定以外の通貨を使用したりすることができます。  
  
 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> が `true`、指定されたカルチャが Windows の現在のカルチャに一致する場合、<xref:System.Globalization.CultureInfo> は、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A> プロパティによって返される <xref:System.Globalization.DateTimeFormatInfo> インスタンスのプロパティのユーザー設定や、<xref:System.Globalization.NumberFormatInfo> プロパティによって返される <xref:System.Globalization.CultureInfo.NumberFormat%2A> インスタンスのプロパティなど、これらのオーバーライドを使用します。 ユーザー設定が <xref:System.Globalization.CultureInfo>に関連付けられているカルチャと互換性がない場合、たとえば、選択したカレンダーが <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>でない場合、メソッドの結果とプロパティの値は定義されません。  
  
 したがって、<xref:System.Globalization.CultureInfo.UseUserOverride%2A> が `true`場合、このプロパティの値は、カルチャで使用される既定の暦とは異なる場合があります。  
  
 アプリケーションは、<xref:System.Globalization.DateTimeFormatInfo> クラスのインスタンスである <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>の <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティを設定することによって、現在の <xref:System.Globalization.CultureInfo> によって使用されるカレンダーを変更します。 新しい予定表は、<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>に一覧表示されている予定表のいずれかである必要があります。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> には、その <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>に関連付けられた日付と時刻の書式をカスタマイズするその他のプロパティも含まれています。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="ClearCachedData">
      <MemberSignature Language="C#" Value="public void ClearCachedData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearCachedData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ClearCachedData" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearCachedData ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearCachedData();" />
      <MemberSignature Language="F#" Value="member this.ClearCachedData : unit -&gt; unit" Usage="cultureInfo.ClearCachedData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>キャッシュされたカルチャ関連情報を更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定のカルチャや形式のパターンなどの情報は、初めて要求されたときにキャッシュされます。 この情報は、<xref:System.AppDomain>の有効期間中に変更される可能性があります。たとえば、ユーザーがコントロールパネルの [地域と言語のオプション] の部分を変更した場合などです。 ただし、<xref:System.Globalization.CultureInfo> クラスは、システム設定の変更を自動的に検出しません。  
  
 <xref:System.Globalization.CultureInfo.ClearCachedData%2A> メソッドは <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> によって作成された <xref:System.Globalization.CultureInfo> オブジェクトのキャッシュをクリアし、現在のシステム設定に基づいて、<xref:System.Globalization.CultureInfo.CurrentCulture%2A>、<xref:System.Globalization.CultureInfo.CurrentUICulture%2A>、および <xref:System.Globalization.RegionInfo.CurrentRegion%2A> の各プロパティの情報を更新します。  
  
 <xref:System.Globalization.CultureInfo.ClearCachedData%2A> メソッドは、既存のスレッドの <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> プロパティの情報を更新しません。 ただし、今後のスレッドには、新しい <xref:System.Globalization.CultureInfo> のプロパティ値が追加されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="cultureInfo.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CultureInfo" /> のコピーを作成します。</summary>
        <returns>現在の <see cref="T:System.Globalization.CultureInfo" /> のコピー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 元の <xref:System.Globalization.CultureInfo> が読み取り専用の場合でも、複製は書き込み可能です。 そのため、複製のプロパティは変更できます。  
  
 オブジェクトの簡易コピーは、オブジェクトのコピーにすぎません。 オブジェクトに他のオブジェクトへの参照が含まれている場合、シャローコピーは参照されるオブジェクトのコピーを作成しません。 代わりに、元のオブジェクトを参照します。 これに対し、オブジェクトの詳細コピーでは、オブジェクトのコピーと、そのオブジェクトによって直接または間接的に参照されるすべてのもののコピーが作成されます。  
  
 <xref:System.Globalization.CultureInfo.Clone%2A> メソッドは、強化された簡易コピーを作成します。 <xref:System.Globalization.CultureInfo.NumberFormat%2A>、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>、<xref:System.Globalization.CultureInfo.TextInfo%2A>、および <xref:System.Globalization.CultureInfo.Calendar%2A> プロパティによって返されるオブジェクトもコピーされます。 その結果、複製された <xref:System.Globalization.CultureInfo> オブジェクトは、元の <xref:System.Globalization.CultureInfo> オブジェクトに影響を与えることなく、コピーされたプロパティを変更できます。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Globalization.CultureInfo>に関連付けられている <xref:System.Globalization.DateTimeFormatInfo> と <xref:System.Globalization.NumberFormatInfo> インスタンスも複製することを示しています。  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CompareInfo">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.CompareInfo CompareInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CompareInfo CompareInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CompareInfo" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CompareInfo As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::CompareInfo ^ CompareInfo { System::Globalization::CompareInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CompareInfo : System.Globalization.CompareInfo" Usage="System.Globalization.CultureInfo.CompareInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カルチャの文字列を比較する方法を定義する <see cref="T:System.Globalization.CompareInfo" /> を取得します。</summary>
        <value>カルチャの文字列を比較する方法を定義する <see cref="T:System.Globalization.CompareInfo" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.CompareInfo%2A> プロパティは、カルチャに依存した並べ替えおよび文字列比較操作で使用されるカルチャ固有の情報を提供する <xref:System.Globalization.CompareInfo> オブジェクトを返します。  
  
 ユーザーは、コントロールパネルの [地域と言語のオプション] の部分を使用して、Windows の現在のカルチャに関連付けられている値の一部を上書きすることができます。 たとえば、ユーザーは、日付を別の形式で表示したり、カルチャに既定以外の通貨を使用したりすることができます。  
  
 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> が `true`、指定されたカルチャが Windows の現在のカルチャに一致する場合、<xref:System.Globalization.CultureInfo> は、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A> プロパティによって返される <xref:System.Globalization.DateTimeFormatInfo> インスタンスのプロパティのユーザー設定や、<xref:System.Globalization.NumberFormatInfo> プロパティによって返される <xref:System.Globalization.CultureInfo.NumberFormat%2A> インスタンスのプロパティなど、これらのオーバーライドを使用します。 ユーザー設定が <xref:System.Globalization.CultureInfo>に関連付けられているカルチャと互換性がない場合、たとえば、選択したカレンダーが <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>でない場合、メソッドの結果とプロパティの値は定義されません。  
  
   
  
## Examples  
 次のコード例は、国際並べ替えを使用してスペイン語 (スペイン) 用の <xref:System.Globalization.CultureInfo> を作成し、従来の並べ替えで別の <xref:System.Globalization.CultureInfo> を作成する方法を示しています。  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CompareInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateSpecificCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CreateSpecificCulture (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo CreateSpecificCulture(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateSpecificCulture (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ CreateSpecificCulture(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member CreateSpecificCulture : string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.CreateSpecificCulture name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="name">定義済みの <see cref="T:System.Globalization.CultureInfo" /> の名前または既存の <see cref="T:System.Globalization.CultureInfo" /> オブジェクトの名前。 <paramref name="name" /> では、大文字と小文字は区別されません。</param>
        <summary>指定した名前に関連付けられている特定のカルチャを表す <see cref="T:System.Globalization.CultureInfo" /> を作成します。</summary>
        <returns>次のものを表す <see cref="T:System.Globalization.CultureInfo" /> オブジェクト。 
インバリアント カルチャ (<paramref name="name" /> が空の文字列 ("") の場合)。  
  
または 
<paramref name="name" /> に関連付けられた特定のカルチャ (<paramref name="name" /> がニュートラル カルチャの場合)。  
  
または 
<paramref name="name" /> で指定されたカルチャ (<paramref name="name" /> が既に特定のカルチャの場合)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> メソッドは、<xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> コンストラクターへの呼び出しをラップします。  
  
> [!NOTE]
> Windows システム上の定義済みカルチャ名の一覧については、 [windows でサポートされている言語/地域名の一覧](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c)の **[言語タグ]** 列を参照してください。 カルチャ名は、[BCP 47](https://tools.ietf.org/html/bcp47) によって定義されている標準に準拠します。 さらに、Windows 10 以降では、`name` 有効な BCP-47 言語タグを使用できます。  
  
 カルチャは、インバリアントカルチャ、ニュートラルカルチャ、および特定のカルチャの3つのセットにグループ化されます。 詳細については、<xref:System.Globalization.CultureInfo> クラスの説明を参照してください。  
  
 このメソッドによって返された特定のカルチャのカルチャ識別子が現在の Windows カルチャのカルチャ識別子と一致する場合、このメソッドは、Windows カルチャオーバーライドを使用する <xref:System.Globalization.CultureInfo> オブジェクトを作成します。 オーバーライドには、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A> プロパティによって返される <xref:System.Globalization.DateTimeFormatInfo> オブジェクトのプロパティと、<xref:System.Globalization.CultureInfo.NumberFormat%2A> プロパティによって返される <xref:System.Globalization.NumberFormatInfo> オブジェクトのプロパティのユーザー設定が含まれます。 ユーザーオーバーライドではなく既定のカルチャ設定を使用して <xref:System.Globalization.CultureInfo> オブジェクトをインスタンス化するには、`useUserOverride` 引数に `false` 値を指定して <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> コンストラクターを呼び出します。  
  
 <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> メソッド名には "特定" という用語が含まれていますが、カルチャデータは、バージョン間で変更することも、カスタムカルチャによって変更することも、ユーザーのオーバーライドによって変更することもできます。 データを保存するには、インバリアントカルチャまたはバイナリまたは固定フォームを使用します。  
  
   
  
## Examples  
 次の例では、<xref:System.Globalization.CultureInfo.GetCultures%2A> メソッドからニュートラルカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクトの配列を取得し、配列を並べ替えます。 配列内の要素を反復処理すると、各ニュートラルカルチャの名前が <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> メソッドに渡され、メソッドによって返された特定のカルチャの名前が表示されます。  
  
> [!NOTE]
>  この例では、zh-tw および zh-tw-CHT カルチャ名を使用します。 ただし、Windows Vista 以降を対象とするアプリケーションでは、zh-hant の代わりに zh-tw と zh-tw-zh-tw の代わりに zh-tw-Hans を使用する必要があります。 zh-tw-Hans と zh-tw は、現在の標準を表し、古い名前を使用する理由がない限り、使用する必要があります。  
>   
>  また、この例の結果は、中国語 (繁体字) のニュートラルカルチャ (zh-tw、zh-tw、または zh-tw) の入力が zh-hant を返す、台湾の Windows のインストールで異なる場合があることに注意してください。  
  
 [!code-csharp[System.Globalization.CultureInfo.CreateSpecificCulture2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CreateSpecificCulture2/CS/createspecificculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.CreateSpecificCulture2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CreateSpecificCulture2/VB/createspecificculture2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="name" /> が有効なカルチャ名ではありません。  
  
または 
<paramref name="name" /> で指定されたカルチャには、関連付けられている特定のカルチャがありません。</exception>
        <exception cref="T:System.NullReferenceException"><paramref name="name" /> が null です。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以前のバージョンでは、<paramref name="name" /> が有効なカルチャ名ではない場合、<see cref="T:System.ArgumentException" /> がスローされます。 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]以降では、このメソッドは <see cref="T:System.Globalization.CultureNotFoundException" />をスローします。</para></block>
        <altmember cref="Overload:System.Globalization.CultureInfo.#ctor" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
      </Docs>
    </Member>
    <Member MemberName="CultureTypes">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureTypes CultureTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.CultureTypes CultureTypes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CultureTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CultureTypes As CultureTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureTypes CultureTypes { System::Globalization::CultureTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.CultureTypes : System.Globalization.CultureTypes" Usage="System.Globalization.CultureInfo.CultureTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CultureInfo" /> オブジェクトに関するカルチャ タイプを取得します。</summary>
        <value>1 つ以上の <see cref="T:System.Globalization.CultureTypes" /> 値のビットごとの組み合わせ。 既定値はありません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例は、<xref:System.Globalization.CultureTypes> 列挙型と <xref:System.Globalization.CultureInfo.CultureTypes%2A> プロパティを示しています。  
  
 [!code-csharp[system.globalization.cultureTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureTypes/cs/ct.cs#1)]
 [!code-vb[system.globalization.cultureTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureTypes/vb/ct.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureTypes" />
      </Docs>
    </Member>
    <Member MemberName="CurrentCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CurrentCulture { get; set; }" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo CurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentCulture As CultureInfo" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ CurrentCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.CurrentCulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.CurrentCulture" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CurrentCulture { get; }" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentCulture As CultureInfo" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ CurrentCulture { System::Globalization::CultureInfo ^ get(); };" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
      <MemberSignature Language="F#" Value="member this.CurrentCulture : System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.CurrentCulture" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のスレッドで使用するカルチャを表す <see cref="T:System.Globalization.CultureInfo" /> オブジェクトを取得または設定します。</summary>
        <value>現在のスレッドで使用するカルチャを表すオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティとそれに関連付けられたオブジェクトによって返される <xref:System.Globalization.CultureInfo> オブジェクトは、日付、時刻、数値、通貨値、テキストの並べ替え順序、大文字小文字の表記規則、および文字列比較の既定の形式を決定します。  
  
 現在のカルチャは、実行中のスレッドのプロパティです。 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> プロパティの値を取得することは、`Thread.CurrentThread.CurrentCulture` プロパティによって返される <xref:System.Globalization.CultureInfo> オブジェクトを取得するのと同等の機能です。
  
> [!NOTE]
>  .NET Framework 4.5.2 以前のバージョンでは、<xref:System.Globalization.CultureInfo.CurrentCulture%2A> プロパティは読み取り専用です。 つまり、プロパティ値を取得することはできますが、設定することはできません。 現在のカルチャを変更するには、新しいカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクトを `Thread.CurrentThread.CurrentCulture` プロパティに割り当てます。 [!INCLUDE[net_v46](~/includes/net-v46-md.md)]以降では、<xref:System.Globalization.CultureInfo.CurrentCulture%2A> プロパティは読み取り/書き込み可能です。プロパティの値は、設定と取得の両方を行うことができます。 新しいカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクトにプロパティ値を設定した場合、`Thread.CurrentThread.CurrentCulture` プロパティの値も変更されます。  
  
 このセクションの内容  
  
 [スレッドのカルチャを決定する方法](#ThreadCulture)   
 [現在のカルチャ  を取得する](#Getting)  
 [CurrentCulture プロパティを明示的に設定する](#ExplicitSetting)   
 [現在のカルチャとユーザーのオーバーライド](#Overrides)   
 [カルチャと Windows アプリ](#WindowsAndCurr)  
  
<a name="ThreadCulture"></a>   
## <a name="how-a-threads-culture-is-determined"></a>スレッドのカルチャを決定する方法  
 スレッドが開始されると、そのカルチャは最初に次のように決定されます。  
  
-   スレッドが実行されているアプリケーションドメインの <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> プロパティによって指定されたカルチャを取得する。プロパティ値が `null`ない場合は。  
  
-   スレッドがタスクベースの非同期操作を実行していて、アプリが [!INCLUDE[net_v46](~/includes/net-v46-md.md)] またはそれ以降のバージョンの .NET Framework を対象とするスレッドプールスレッドである場合、そのカルチャは呼び出し元スレッドのカルチャによって決まります。  次の例では、現在のカルチャをポルトガル語 (ブラジル) に変更し、6つのタスクを開始します。各タスクでは、スレッド ID、タスク ID、および現在のカルチャが表示されます。 各タスク (およびスレッド) は、呼び出し元のスレッドのカルチャを継承しています。  
  
     [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/Async1.cs#14)]
     [!code-vb[System.Globalization.CultureInfo.CurrentCulture#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/Async1.vb#14)]  
  
     詳細については、「<xref:System.Globalization.CultureInfo>」トピックの「カルチャとタスクベースの非同期操作」セクションを参照してください。  
  
-   Windows `GetUserDefaultLocaleName` 関数を呼び出します。  
  
 システムでインストールされているカルチャまたはユーザーの優先カルチャとは異なる特定のカルチャを設定した場合、アプリケーションが複数のスレッドを開始すると、スレッドが実行されているアプリケーションドメインの <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> プロパティにカルチャを割り当てない限り、これらのスレッドの現在のカルチャが `GetUserDefaultLocaleName` 関数によって返されるカルチャになります。  
  
 スレッドのカルチャを決定する方法の詳細については、<xref:System.Globalization.CultureInfo> リファレンスページの「カルチャとスレッド」セクションを参照してください。  
  
<a name="Getting"></a>   
## <a name="getting-the-current-culture"></a>現在のカルチャを取得する  
 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> プロパティはスレッドごとの設定です。つまり、各スレッドは独自のカルチャを持つことができます。 次の例に示すように、<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> プロパティの値を取得することにより、現在のスレッドのカルチャを取得します。  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/Get1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/Get1.vb#5)]  
  
 <xref:System.Threading.Thread.CurrentThread%2A?displayProperty=nameWithType> プロパティから、現在のスレッドのカルチャの値を取得することもできます。  
  
<a name="ExplicitSetting"></a>   
## <a name="explicitly-setting-the-currentculture-property"></a>CurrentCulture プロパティの明示的な設定  
 [!INCLUDE[net_v46](~/includes/net-v46-md.md)]では、既存のスレッドで使用されるカルチャを変更するには、<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> プロパティを新しいカルチャに設定します。 この方法でスレッドのカルチャを明示的に変更した場合、スレッドがアプリケーションドメインの境界を越えても、その変更は保持されます。 次の例では、現在のスレッドカルチャをオランダ語 (オランダ) に変更します。 また、現在のスレッドがアプリケーションドメインの境界を越えたときに、現在のカルチャが変更されていることも示しています。  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/changeculture11.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/changeculture11.vb#11)]  
  
> [!NOTE]
>  <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> プロパティを使用してカルチャを変更するには、<xref:System.Security.Permissions.SecurityPermissionFlag.ControlThread> 値が設定された <xref:System.Security.Permissions.SecurityPermission> アクセス許可が必要です。 スレッドに関連付けられているセキュリティ状態により、スレッドの操作は危険です。 したがって、このアクセス許可は、信頼できるコードにのみ付与し、その後必要な場合にのみ指定する必要があります。 スレッドカルチャは、信頼度の低いコードでは変更できません。  
  
 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]以降では、現在のスレッドカルチャを、特定のカルチャ (フランス語 (カナダ) など) またはニュートラルカルチャ (フランス語など) に明示的に変更できます。 <xref:System.Globalization.CultureInfo> オブジェクトがニュートラルカルチャを表す場合、<xref:System.Globalization.CultureInfo.Calendar%2A>、<xref:System.Globalization.CultureInfo.CompareInfo%2A>、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>、<xref:System.Globalization.CultureInfo.NumberFormat%2A>、<xref:System.Globalization.CultureInfo.TextInfo%2A> などの <xref:System.Globalization.CultureInfo> プロパティの値は、ニュートラルカルチャに関連付けられている特定のカルチャを反映します。 たとえば、英語のニュートラルカルチャの主要なカルチャは英語 (米国) です。ドイツ語カルチャの主要なカルチャはドイツ語 (ドイツ) です。 次の例は、現在のカルチャが特定のカルチャ、フランス語 (カナダ)、およびニュートラルカルチャであるフランス語に設定されている場合の書式設定の違いを示しています。  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/specific12.cs#12)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/specific12.vb#12)]  
  
 また、次の例に示すように、<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> プロパティを <xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=nameWithType> プロパティと共に使用して、ASP.NET アプリケーションの <xref:System.Globalization.CultureInfo.CurrentCulture%2A> プロパティをユーザーの優先カルチャに設定することもできます。  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/aspculture13.cs#13)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/aspculture13.vb#13)]  
  
<a name="Overrides"></a>   
## <a name="the-current-culture-and-user-overrides"></a>現在のカルチャとユーザーオーバーライド  
 Windows では、ユーザーはコントロールパネルの **[地域と言語のオプション]** を使用して、<xref:System.Globalization.CultureInfo> オブジェクトとそれに関連付けられているオブジェクトの標準プロパティ値を上書きできます。 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> プロパティによって返される <xref:System.Globalization.CultureInfo> オブジェクトは、次の場合にこれらのユーザーオーバーライドを反映します。  
  
-   現在のスレッドカルチャが Windows `GetUserDefaultLocaleName` 関数によって暗黙的に設定されている場合は。  
  
-   <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> プロパティによって定義されている現在のスレッドカルチャが、現在の Windows システムカルチャに対応する場合は。  
  
-   現在のスレッドカルチャが <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> メソッドによって返されたカルチャに明示的に設定されていて、そのカルチャが現在の Windows システムカルチャに対応している場合は。  
  
-   現在のスレッドカルチャが <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> コンストラクターによってインスタンス化されたカルチャに明示的に設定されていて、そのカルチャが現在の Windows システムカルチャに対応している場合は。  
  
 場合によっては、特にサーバーアプリケーションでは、ユーザーの上書きを反映する <xref:System.Globalization.CultureInfo> オブジェクトに現在のカルチャを設定することが望ましくない場合があります。 代わりに、現在のスレッドカルチャを、次の方法でユーザーのオーバーライドを反映しない <xref:System.Globalization.CultureInfo> オブジェクトに設定できます。  
  
-   `useUserOverride` 引数の値 `false` を指定して <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> コンストラクターを呼び出す。  
  
-   <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> メソッドを呼び出すことにより、キャッシュされた読み取り専用の <xref:System.Globalization.CultureInfo> オブジェクトを返します。  
  
<a name="WindowsAndCurr"></a>   
## <a name="the-current-culture-and-uwp-apps"></a>現在のカルチャと UWP アプリ  
 ユニバーサル Windows プラットフォーム (UWP) アプリでは、<xref:System.Globalization.CultureInfo.CurrentCulture%2A> プロパティは、.NET Framework や .NET Core アプリと同様に、読み取り/書き込みが可能です。このメソッドを使用して、現在のカルチャを取得し、設定することができます。 ただし、UWP アプリでは、現在のカルチャと現在の UI カルチャを区別しません。 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> と <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> の各プロパティは、 [Windows の ApplicationModel. .resources](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) ..........  

.NET Framework と .NET Core アプリでは、現在のカルチャはスレッドごとの設定であり、<xref:System.Globalization.CultureInfo.CurrentCulture%2A> プロパティは現在のスレッドのカルチャのみを反映します。 UWP アプリでは、現在のカルチャは、グローバル設定である、 [Windows の ApplicationModel. .resources](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_)プロパティにマップされます。 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> プロパティを設定すると、アプリ全体のカルチャが変更されます。カルチャは、スレッド単位で設定することはできません。
  
## Examples  
 次の例は、現在のスレッドの <xref:System.Globalization.CultureInfo.CurrentCulture%2A> と <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> を変更する方法を示しています。  
  
 [!code-cpp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CPP/currentculture.cpp#11)]
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CS/currentculture.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/VB/currentculture.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">現在のカルチャを設定する場合は。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></permission>
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
        <altmember cref="T:System.Security.Permissions.SecurityPermission" />
        <altmember cref="T:System.Security.Permissions.SecurityPermissionAttribute" />
      </Docs>
    </Member>
    <Member MemberName="CurrentUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CurrentUICulture { get; set; }" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo CurrentUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CurrentUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentUICulture As CultureInfo" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ CurrentUICulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.CurrentUICulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.CurrentUICulture" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CurrentUICulture { get; }" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentUICulture As CultureInfo" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ CurrentUICulture { System::Globalization::CultureInfo ^ get(); };" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
      <MemberSignature Language="F#" Value="member this.CurrentUICulture : System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.CurrentUICulture" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>実行時にカルチャ固有のリソースを参照するためにリソース マネージャーによって使用される現在のユーザー インターフェイスのカルチャを表す <see cref="T:System.Globalization.CultureInfo" /> オブジェクトを取得または設定します。</summary>
        <value>実行時にカルチャ固有のリソースを検索するためにリソース マネージャーで使用されるカルチャ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在の UI カルチャは、スレッドごとのプロパティです。 つまり、各スレッドには、独自の現在の UI カルチャがあります。 このプロパティは、[!INCLUDE[net_v46](~/includes/net-v46-md.md)]から開始し、`System.Threading.Thread.CurrentThread.CurrentUICulture` プロパティに割り当てられた <xref:System.Globalization.CultureInfo> オブジェクトを設定することと同じです。 スレッドが開始されると、その UI カルチャは最初に次のように決定されます。  
  
-   スレッドが実行されているアプリケーションドメインの <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> プロパティによって指定されたカルチャを取得する。プロパティ値が `null`ない場合は。  
  
-   スレッドがタスクベースの非同期操作を実行していて、アプリが [!INCLUDE[net_v46](~/includes/net-v46-md.md)] またはそれ以降のバージョンの .NET Framework を対象とするスレッドプールスレッドである場合、UI カルチャは呼び出し元スレッドの UI カルチャによって決定されます。  次の例では、現在の UI カルチャをポルトガル語 (ブラジル) に変更し、6つのタスクを開始します。各タスクでは、スレッド ID、タスク ID、および現在の UI カルチャが表示されます。 各タスク (およびスレッド) は、呼び出し元のスレッドの UI カルチャを継承しています。  
  
     [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/Async1.cs#14)]
     [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/Async1.vb#14)]  
  
     詳細については、「<xref:System.Globalization.CultureInfo>」トピックの「カルチャとタスクベースの非同期操作」セクションを参照してください。  
  
-   Windows `GetUserDefaultUILanguage` 関数を呼び出します。  
  
> [!NOTE]
>  [!INCLUDE[Compact](~/includes/compact-md.md)]では、<xref:System.Globalization.CultureInfo.CurrentUICulture%2A> プロパティは読み取り専用です。 現在の UI カルチャはシステムの地域設定によって決定されるため、プログラムで変更することはできません。  
  
 [!INCLUDE[net_v46](~/includes/net-v46-md.md)]以降では、スレッドで使用されるユーザーインターフェイスのカルチャを変更するには、<xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> プロパティを新しいカルチャに設定します。 この方法でスレッドの UI カルチャを明示的に変更した場合、スレッドがアプリケーションドメインの境界を越えても、その変更は保持されます。  
  
> [!NOTE]
>  .NET Framework 4.5.2 以前のバージョンでは、<xref:System.Globalization.CultureInfo.CurrentUICulture%2A> プロパティは読み取り専用です。 つまり、プロパティ値を取得することはできますが、設定することはできません。 現在の UI カルチャを変更するには、新しい UI カルチャを表す <xref:System.Globalization.CultureInfo> オブジェクトを `Thread.CurrentThread.CurrentUICulture` プロパティに割り当てます。 [!INCLUDE[net_v46](~/includes/net-v46-md.md)]以降では、<xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> プロパティは読み取り/書き込み可能です。プロパティの値は、設定と取得の両方を行うことができます。 新しいカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクトにプロパティ値を設定した場合、`Thread.CurrentThread.CurrentCulture` プロパティの値も変更されます。  
  
 このセクションの内容  
  
 [現在の UI カルチャ  を取得する](#Getting)  
 [現在の UI カルチャを明示的に設定する](#Explicit)   
 [現在の UI カルチャを暗黙的に設定する](#Implicit)   
 [セキュリティに関する考慮事項](#Security)   
 [現在の UI カルチャと Windows アプリ](#WindowsAndCurrUI)  
  
<a name="Getting"></a>   
## <a name="getting-the-current-ui-culture"></a>現在の UI カルチャを取得する  
 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> プロパティはスレッドごとの設定です。つまり、各スレッドは独自の UI カルチャを持つことができます。 次の例に示すように、<xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> プロパティの値を取得することにより、現在のスレッドの UI カルチャを取得します。  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/Get1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/Get1.vb#5)]  
  
 <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> プロパティから、現在のスレッドの UI カルチャの値を取得することもできます。  
  
<a name="Explicit"></a>   
## <a name="explicitly-setting-the-current-ui-culture"></a>現在の UI カルチャを明示的に設定する  
 [!INCLUDE[net_v46](~/includes/net-v46-md.md)]以降では、新しいカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクトを <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> プロパティに割り当てることにより、現在の UI カルチャを変更できます。 現在の UI カルチャは、特定のカルチャ (en-us や de など) に設定することも、ニュートラルカルチャ (en や de など) に設定することもできます。 次の例では、現在の UI カルチャを fr-fr またはフランス語 (フランス) に設定します。  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/currentuiculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/currentuiculture1.vb#1)]  
  
 マルチスレッドアプリケーションでは、そのカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクトをスレッドの <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> プロパティに割り当てることにより、任意のスレッドの UI カルチャを明示的に設定できます。 カルチャを設定するスレッドが現在のスレッドである場合は、新しいカルチャを <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> プロパティに割り当てることができます。 スレッドの UI カルチャが明示的に設定されている場合、そのスレッドは、アプリケーションドメインの境界を越えて別のアプリケーションドメインでコードを実行する場合でも、同じカルチャを保持します。  
  
<a name="Implicit"></a>   
## <a name="implicitly-setting-the-current-ui-culture"></a>現在の UI カルチャを暗黙的に設定する  
 メインアプリケーションスレッドを含むスレッドが最初に作成されるとき、既定では、現在の UI カルチャは次のように設定されます。  
  
-   プロパティ値が `null`ない場合に、現在のアプリケーションドメインの <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> プロパティによって定義されたカルチャを使用します。  
  
-   システムの既定のカルチャを使用します。 Windows オペレーティングシステムを使用するシステムでは、共通言語ランタイムが Windows `GetUserDefaultUILanguage` 関数を呼び出して、現在の UI カルチャを設定します。 `GetUserDefaultUILanguage` は、ユーザーによって設定された既定の UI カルチャを返します。 ユーザーが既定の UI 言語を設定していない場合は、システムに最初にインストールされたカルチャが返されます。  
  
 スレッドがアプリケーションの境界を越えて、別のアプリケーションドメインでコードを実行する場合、そのカルチャは、新しく作成されたスレッドと同じ方法で決定されます。  
  
 システムでインストールされている UI カルチャまたはユーザーの優先 UI カルチャとは異なる特定の UI カルチャを設定し、アプリケーションが複数のスレッドを開始した場合は、スレッドが実行されているアプリケーションドメインの <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> プロパティにカルチャを割り当てない限り、これらのスレッドの現在の UI カルチャが `GetUserDefaultUILanguage` 関数によって返されるカルチャになります。  
  
<a name="Security"></a>   
## <a name="security-considerations"></a>セキュリティの考慮事項  
 現在のスレッドのカルチャを変更するには、<xref:System.Security.Permissions.SecurityPermissionFlag.ControlThread> 値が設定された <xref:System.Security.Permissions.SecurityPermission> アクセス許可が必要です。  
  
> [!CAUTION]
>  スレッドに関連付けられているセキュリティ状態により、スレッドの操作は危険です。 したがって、このアクセス許可は、信頼できるコードにのみ付与し、その後必要な場合にのみ指定する必要があります。 スレッドカルチャは、信頼度の低いコードでは変更できません。  
  
<a name="WindowsAndCurrUI"></a>   
## <a name="the-current-ui-culture-and-uwp-apps"></a>現在の UI カルチャと UWP アプリ  
 
ユニバーサル Windows プラットフォーム (UWP) アプリでは、<xref:System.Globalization.CultureInfo.CurrentUICulture%2A> プロパティは、.NET Framework や .NET Core アプリと同様に、読み取り/書き込みが可能です。このメソッドを使用して、現在のカルチャを取得し、設定することができます。 ただし、UWP アプリでは、現在のカルチャと現在の UI カルチャを区別しません。 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> と <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> の各プロパティは、 [Windows の ApplicationModel. .resources](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) ..........

.NET Framework と .NET Core アプリでは、現在の UI カルチャはスレッドごとの設定であり、<xref:System.Globalization.CultureInfo.CurrentUICulture%2A> プロパティは現在のスレッドの UI カルチャのみを反映します。 UWP アプリでは、現在のカルチャは、グローバル設定である、 [Windows の ApplicationModel. .resources](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_)プロパティにマップされます。 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> プロパティを設定すると、アプリ全体のカルチャが変更されます。カルチャは、スレッド単位で設定することはできません。    
  
## Examples  
 次のコード例は、現在のスレッドの <xref:System.Globalization.CultureInfo.CurrentCulture%2A> と <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> を変更する方法を示しています。  
  
 [!code-cpp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CPP/currentculture.cpp#11)]
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CS/currentculture.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/VB/currentculture.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.ArgumentException">プロパティが、リソース ファイルの検索に使用できないカルチャ名に設定されています。 リソース ファイル名に使用できるのは、文字、数字、ハイフン、またはアンダースコアのみです。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">現在の UI カルチャを設定する場合は。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></permission>
        <altmember cref="T:System.Resources.ResourceManager" />
        <altmember cref="P:System.Threading.Thread.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      </Docs>
    </Member>
    <Member MemberName="DateTimeFormat">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.DateTimeFormatInfo DateTimeFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.DateTimeFormatInfo DateTimeFormat" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DateTimeFormat" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DateTimeFormat As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::DateTimeFormatInfo ^ DateTimeFormat { System::Globalization::DateTimeFormatInfo ^ get(); void set(System::Globalization::DateTimeFormatInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DateTimeFormat : System.Globalization.DateTimeFormatInfo with get, set" Usage="System.Globalization.CultureInfo.DateTimeFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カルチャに対応する、日時の表示形式を定義する <see cref="T:System.Globalization.DateTimeFormatInfo" /> を取得または設定します。</summary>
        <value>カルチャに対応する、日時の表示形式を定義する <see cref="T:System.Globalization.DateTimeFormatInfo" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="overrides"></a>オーバーライド  
 ユーザーは、コントロールパネルの [地域と言語のオプション] の部分を使用して、Windows の現在のカルチャに関連付けられている値の一部を上書きすることができます。 たとえば、ユーザーは、日付を別の形式で表示したり、カルチャに既定以外の通貨を使用したりすることができます。  
  
 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> が `true`、指定されたカルチャが Windows の現在のカルチャに一致する場合、<xref:System.Globalization.CultureInfo> は、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A> プロパティによって返される <xref:System.Globalization.DateTimeFormatInfo> インスタンスのプロパティのユーザー設定や、<xref:System.Globalization.NumberFormatInfo> プロパティによって返される <xref:System.Globalization.CultureInfo.NumberFormat%2A> インスタンスのプロパティなど、これらのオーバーライドを使用します。 ユーザー設定が <xref:System.Globalization.CultureInfo>に関連付けられているカルチャと互換性がない場合、たとえば、選択したカレンダーが <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>でない場合、メソッドの結果とプロパティの値は定義されません。  
  
 アプリケーションがプロパティにアクセスするまで、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A> プロパティと <xref:System.Globalization.CultureInfo.NumberFormat%2A> プロパティの値は計算されません。 アプリケーションの実行中にユーザーが現在のカルチャを新しいカルチャに変更でき、アプリケーションが <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> または <xref:System.Globalization.CultureInfo.NumberFormat%2A> プロパティにアクセスする場合、アプリケーションは元のカルチャのオーバーライドではなく、新しいカルチャの既定値を取得します。 元の現在のカルチャのオーバーライドを保持するには、現在のカルチャを変更する前に、アプリケーションが <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> および <xref:System.Globalization.CultureInfo.NumberFormat%2A> プロパティにアクセスする必要があります。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Globalization.CultureInfo>に関連付けられている <xref:System.Globalization.DateTimeFormatInfo> と <xref:System.Globalization.NumberFormatInfo> インスタンスも複製することを示しています。  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが null に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> プロパティまたは <see cref="T:System.Globalization.DateTimeFormatInfo" /> プロパティのいずれかが設定され、<see cref="T:System.Globalization.CultureInfo" /> は読み取り専用です。</exception>
        <block subset="none" type="usage"><para><see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> が <see cref="T:System.Globalization.TaiwanCalendar" /> で、<see cref="P:System.Threading.Thread.CurrentCulture" /> が zh-tw という名前の中国語 (台湾) に設定されていない場合、<see cref="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" />、<see cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />、および <see cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" /> は空の文字列 ("") を返します。</para></block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
        <altmember cref="P:System.Globalization.CultureInfo.NumberFormat" />
      </Docs>
    </Member>
    <Member MemberName="DefaultThreadCurrentCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo DefaultThreadCurrentCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo DefaultThreadCurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultThreadCurrentCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ DefaultThreadCurrentCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultThreadCurrentCulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のアプリケーション ドメインのスレッドの既定のカルチャを取得または設定します。</summary>
        <value>現在のアプリケーション ドメインのスレッドの既定のカルチャ、または現在のシステム カルチャがアプリケーション ドメインの既定のスレッド カルチャの場合は <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 以前のバージョンでは、既定で、すべてのスレッドのカルチャが Windows システムカルチャに設定されています。 現在のカルチャが既定のシステムカルチャと異なるアプリケーションの場合、この動作は望ましくないことがあります。 [!INCLUDE[net_v45](~/includes/net-v45-md.md)]では、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> プロパティを使用して、アプリケーションドメイン内のすべてのスレッドの既定のカルチャをアプリケーションで定義できます。  
  
> [!IMPORTANT]
>  アプリケーションドメインでを実行している既存のスレッドのカルチャを明示的に設定していない場合は、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> プロパティを設定すると、これらのスレッドのカルチャも変更されます。 ただし、これらのスレッドが別のアプリケーションドメインで実行される場合、そのカルチャは、そのアプリケーションドメインの <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> プロパティによって定義されます。既定値が定義されていない場合は、既定のシステムカルチャによって定義されます。 このため、メインアプリケーションスレッドのカルチャを常に明示的に設定し、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> プロパティに依存せずにメインアプリケーションスレッドのカルチャを定義することをお勧めします。  
  
 明示的に設定されている場合を除き、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> プロパティの値は `null`であり、明示的なカルチャが割り当てられていないアプリケーションドメイン内のスレッドのカルチャは、既定の Windows システムカルチャによって定義されます。  
  
 カルチャ、スレッド、およびアプリケーションドメインの詳細については、<xref:System.Globalization.CultureInfo> リファレンスページの「カルチャとスレッド」および「カルチャおよびアプリケーションドメイン」のセクションを参照してください。  
  
   
  
## Examples  
 次の例は、新しいスレッドの現在のカルチャを定義する際の .NET Framework の既定の動作を示しています。 この例では、起動時に、既定のシステムカルチャが既にフランス語 (フランス) の場合を除き、すべてのシステムで現在のカルチャと現在の UI カルチャをフランス語 (フランス) に設定します。 既定のシステムカルチャが既にフランス語 (フランス) の場合、コードは現在のカルチャと現在の UI カルチャを英語 (米国) に設定します。 次に、`DisplayRandomNumbers` ルーチンを呼び出します。このルーチンは、3つの乱数を生成し、通貨値として表示します。 次に、新しいスレッドを作成します。これにより、`DisplayRandomNumbers` ルーチンも実行されます。  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/cs/defaultculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/vb/defaultculture1.vb#1)]  
  
 この例の出力に示すように、システムカルチャが英語 (米国) であるコンピューターでこの例を実行すると、メインスレッドはフランス語 (フランス) カルチャの書式指定規則を使用して通貨値を表示します。 ただし、ワーカースレッドのカルチャは、アプリケーションの現在のカルチャではなく、現在の Windows システムカルチャから派生しているため、作業スレッドは英語 (米国) カルチャの書式指定規則を使用して通貨値を表示します。  
  
 次の例では、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> プロパティと <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> プロパティを使用して、新しいアプリケーションスレッドの現在のカルチャと現在の UI カルチャを定義します。 この例では、起動時に、既定のシステムカルチャが既にフランス語 (フランス) の場合を除き、すべてのシステムで現在のカルチャと現在の UI カルチャをフランス語 (フランス) に設定します。 既定のシステムカルチャが既にフランス語 (フランス) である場合は、現在のカルチャと現在の UI カルチャが英語 (米国) に設定されます。 次に、`DisplayRandomNumbers` ルーチンを呼び出します。このルーチンは、3つの乱数を生成し、通貨値として表示します。 次に、新しいスレッドを作成します。これにより、`DisplayRandomNumbers` ルーチンも実行されます。  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/cs/defaultculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/vb/defaultculture2.vb#2)]  
  
 この例の出力に示すように、システムカルチャが英語 (米国) であるコンピューターでこの例を実行すると、メインスレッドとワーカースレッドの両方でフランス語 (フランス) カルチャの書式指定規則を使用して通貨値が表示されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      </Docs>
    </Member>
    <Member MemberName="DefaultThreadCurrentUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo DefaultThreadCurrentUICulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo DefaultThreadCurrentUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultThreadCurrentUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ DefaultThreadCurrentUICulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultThreadCurrentUICulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のアプリケーション ドメイン内のスレッドの既定 UI カルチャを取得または設定します。</summary>
        <value>現在のアプリケーション ドメイン内のスレッドの既定 UI カルチャ、または現在のシステム UI カルチャがアプリケーション ドメイン内の既定スレッド UI カルチャである場合は <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 以前のバージョンでは、既定で、すべてのスレッドの UI カルチャが Windows システムのカルチャに設定されています。 現在の UI カルチャが既定のシステムカルチャと異なるアプリケーションの場合、この動作は望ましくないことがあります。 [!INCLUDE[net_v45](~/includes/net-v45-md.md)]では、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> プロパティを使用して、アプリケーションドメイン内のすべてのスレッドの既定の UI カルチャを定義できます。  
  
> [!IMPORTANT]
>  アプリケーションドメインで実行されている既存のスレッドの UI カルチャを明示的に設定していない場合は、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> プロパティを設定すると、これらのスレッドのカルチャも変更されます。 ただし、これらのスレッドが別のアプリケーションドメインで実行される場合、そのカルチャは、そのアプリケーションドメインの <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> プロパティによって定義されます。既定値が定義されていない場合は、既定のシステムカルチャによって定義されます。 このため、メインアプリケーションスレッドのカルチャは常に明示的に設定することをお勧めします。また、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> プロパティに依存せずに、メインアプリケーションスレッドのカルチャを定義することをお勧めします。  
  
 明示的に設定されていない限り、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> プロパティの値は `null`、明示的なカルチャが割り当てられていないアプリケーションドメイン内のすべてのスレッドの現在のカルチャは、既定の Windows システムカルチャによって定義されます。  
  
 カルチャ、スレッド、およびアプリケーションドメインの詳細については、<xref:System.Globalization.CultureInfo> リファレンスページの「カルチャとスレッド」および「カルチャおよびアプリケーションドメイン」のセクションを参照してください。  
  
   
  
## Examples  
 次の例は、新しいスレッドの現在のカルチャを定義する際の .NET Framework の既定の動作を示しています。 英語とロシア語の言語リソースが使用されています。 GreetingStrings という名前のテキストファイルには、英語の言語リソースが含まれています。  
  
```  
greeting =Hello again!  
newGreeting=Hello!  
```  
  
 次のコマンドを使用して[リソースファイルジェネレーター](~/docs/framework/tools/resgen-exe-resource-file-generator.md)を使用することにより、GreetingStrings という名前のバイナリファイルにコンパイルされます。  
  
```console  
resgen greetingstrings.txt  
```  
  
 GreetingStrings.ru という名前のテキストファイルには、ロシア語の言語リソースが含まれています。  
  
```  
greeting=Еще раз привет!  
newGreeting=Привет!  
```  
  
 次のコマンドを使用して、[リソースファイルジェネレーター](~/docs/framework/tools/resgen-exe-resource-file-generator.md)を使用して GreetingStrings.ru という名前のバイナリ .resources ファイルにコンパイルされます。  
  
```console  
resgen greetingstrings.ru-RU.txt  
```  
  
 次に示すアプリケーションコードは、Example1 または Example1.cs という名前のファイルに格納されています。 これは、Visual Basic コンパイラに対して次のコマンドを使用して、実行可能ファイルにコンパイルされます。  
  
```console  
vbc Example1.vb /resource:GreetingStrings.resources  
```  
  
 C#コンパイラの場合、コマンドは次のようになります。  
  
```console  
csc /resource:GreetingStrings.resources Example1.cs  
```  
  
 これにより、フォールバックカルチャのリソースと共に、例の実行可能コードを含むアセンブリが作成されます。 また、次のコマンドを使用して、[アセンブリリンカー](~/docs/framework/tools/al-exe-assembly-linker.md)を使用してロシア語 (ロシア) カルチャ用のリソースファイルを作成することもできます。  
  
```console  
>al /embed:greetingstrings.ru-RU.resources /c:ru-RU /template:example1.exe /out:ru-RU\Example1.resources.dll  
```  
  
 この例では、起動時に、既定のシステムカルチャが既にロシア語 (ロシア) である場合を除き、すべてのシステムで現在のカルチャと現在の UI カルチャをロシア語 (ロシア) に設定します。 既定のシステムカルチャが既にロシア語 (ロシア) の場合、コードは現在のカルチャと現在の UI カルチャを英語 (米国) に設定します。 次に、`ShowGreeting` ルーチンを呼び出します。これにより、最初に呼び出されたときに単純な文字列が表示され、後続のメソッド呼び出しでは少し異なる文字列が表示されます。 次に、新しいスレッドを作成します。これにより、`ShowGreeting` ルーチンも実行されます。  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/cs/example1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/vb/example1.vb#1)]  
  
 この例の出力に示すように、システムカルチャが英語 (米国) であるコンピューターでこの例を実行すると、メインスレッドはロシア語の初期文字列を表示します。 ただし、ワーカースレッドのカルチャは、アプリケーションの現在のカルチャではなく、現在の Windows システムカルチャから派生しているので、ワーカースレッドはその文字列を英語で表示します。  
  
 次の例では、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> プロパティと <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> プロパティを使用して、新しいアプリケーションスレッドの現在のカルチャと現在の UI カルチャを定義します。  
  
 この例では、前の例と同じリソースファイルを使用します。 コンパイルして、ローカライズされたロシア語の言語リソースをサテライトアセンブリに埋め込むためのコマンドも同じですが、実行可能アセンブリの名前が変更される点が異なります。  
  
 この例では、起動時に、既定のシステムカルチャが既にロシア語 (ロシア) である場合を除き、すべてのシステムで現在のカルチャと現在の UI カルチャをロシア語 (ロシア) に設定します。 既定のシステムカルチャが既にロシア語 (ロシア) である場合は、現在のカルチャと現在の UI カルチャが英語 (米国) に設定されます。 次に、`ShowGreeting` ルーチンを呼び出します。これにより、最初に呼び出されたときに単純な文字列が表示され、後続のメソッド呼び出しでは少し異なる文字列が表示されます。 次に、新しいスレッドを作成します。これにより、`ShowGreeting` ルーチンも実行されます。  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/cs/example2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/vb/example2.vb#2)]  
  
 この例の出力に示すように、システムカルチャが英語 (米国) であるコンピューターでこの例を実行すると、メインスレッドとワーカースレッドの両方で、ロシア語の言語で文字列が表示されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">設定操作で、<see cref="P:System.Globalization.CultureInfo.Name" /> プロパティ値が正しくありません。</exception>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public virtual string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string" Usage="System.Globalization.CultureInfo.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>完全にローカライズされたカルチャ名を取得します。</summary>
        <value>完全にローカライズされた *languagefull* [*country/regionfull*] という形式のカルチャ名。 *languagefull* は言語の完全名であり、 *country/regionfull* は国/地域の完全名です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、<xref:System.Globalization.CultureInfo> オブジェクトのローカライズされた名前を表します。  
  
 カルチャ名は、スクリプトまたは書式設定の規則によって異なる場合があります。 表示には返された名前を使用する必要があり、解析を試行することはできません。  
  
 <xref:System.Globalization.CultureAndRegionInfoBuilder> クラスによってカスタムカルチャが作成される場合、<xref:System.Globalization.CultureInfo.DisplayName%2A> プロパティは <xref:System.Globalization.CultureInfo.NativeName%2A> プロパティの値に初期化されます。  
  
   
  
## Examples  
 次のコード例では、ニュートラルカルチャのいくつかのプロパティを表示します。  
  
> [!NOTE]
>  この例では、zh-tw と zh-tw のカルチャをそれぞれ0x0004 および0x7C04 カルチャ識別子と共に表示します。 ただし、Windows Vista アプリケーションでは、zh-hant の代わりに zh-tw と zh-tw Zh-tw 名の代わりに zh-tw-Hans 名を使用する必要があります。 Zh-tw と zh-tw の Hans は、現在の標準を表します。古い名前を使用する理由がない限り、この名前を使用する必要があります。  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="EnglishName">
      <MemberSignature Language="C#" Value="public virtual string EnglishName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EnglishName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.EnglishName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EnglishName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ EnglishName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EnglishName : string" Usage="System.Globalization.CultureInfo.EnglishName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>英語で表した "*languagefull* [*country/regionfull*]" という形式のカルチャ名を取得します。</summary>
        <value>英語で表した *languagefull* [*country/regionfull*] という形式のカルチャ名。 *languagefull* は言語の完全名であり、 *country/regionfull* は国/地域の完全名です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 たとえば、特定のカルチャ名 en-us の <xref:System.Globalization.CultureInfo.EnglishName%2A> は、"English (米国)" です。  
  
 .NET Framework の言語バージョンに関係なく、このプロパティの値は同じです。  
  
   
  
## Examples  
 次のコード例では、ニュートラルカルチャのいくつかのプロパティを表示します。  
  
> [!NOTE]
>  この例では、zh-CHS および zh-CHT の古いカルチャ名を、カルチャ識別子としてそれぞれ 0x0004 と 0x7C04 を使用して表示します。 ただし、Windows Vista アプリケーションでは、zh-hant の代わりに zh-tw と zh-tw Zh-tw 名の代わりに zh-tw-Hans 名を使用する必要があります。 Zh-tw と zh-tw の Hans は、現在の標準を表します。古い名前を使用する理由がない限り、この名前を使用する必要があります。  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="cultureInfo.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">現在の <see cref="T:System.Globalization.CultureInfo" /> と比較するオブジェクト。</param>
        <summary>指定したオブジェクトが現在の <see cref="T:System.Globalization.CultureInfo" /> と同じカルチャかどうかを判断します。</summary>
        <returns><see langword="true" /> が現在の <paramref name="value" /> と同じカルチャの場合は <see cref="T:System.Globalization.CultureInfo" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、<xref:System.Object.Equals%2A?displayProperty=nameWithType> をオーバーライドします。  
  
 2つの <xref:System.Globalization.CultureInfo> オブジェクトは、<xref:System.Globalization.CultureInfo.Name%2A> と <xref:System.Globalization.CultureInfo.CompareInfo%2A> プロパティが等しい場合に等しいと見なされます。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetConsoleFallbackUICulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo GetConsoleFallbackUICulture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Globalization.CultureInfo GetConsoleFallbackUICulture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetConsoleFallbackUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConsoleFallbackUICulture () As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Globalization::CultureInfo ^ GetConsoleFallbackUICulture();" />
      <MemberSignature Language="F#" Value="member this.GetConsoleFallbackUICulture : unit -&gt; System.Globalization.CultureInfo" Usage="cultureInfo.GetConsoleFallbackUICulture " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>グラフィック ユーザー インターフェイスの既定のカルチャが不適切な場合、コンソール アプリケーションに適した代替のユーザー インターフェイス カルチャを取得します。</summary>
        <returns>コンソール上のテキストの読み取りおよび表示に使用する代替カルチャ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アラビア語、ヘブライ語、ウルドゥ語、およびシリア文字などの言語は、双方向テキストに基づいています。 グラフィカルユーザーインターフェイスを備えた Windows アプリケーションでは、双方向言語がサポートされています。 ただし、オペレーティングシステムコンソールのテキストユーザーインターフェイスを使用するコンソールアプリケーションでは、双方向サポートは提供されません。 このため、コンソールアプリケーションをアラビア語またはヘブライ語にローカライズすると、アプリケーションでコンソール画面に読み取り不可能なテキストが表示されます。  
  
 ユーザーインターフェイスカルチャは、ユーザーの入力と出力をサポートするためにアプリケーションが必要とするリソースを指定します。既定では、オペレーティングシステムのカルチャと同じです。 たとえば、<xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> プロパティはアラビア語のオペレーティングシステムのアラビア語のカルチャを返します。 <xref:System.Globalization.CultureInfo.GetConsoleFallbackUICulture%2A> メソッドを使用して、コンソールアプリケーションのユーザーインターフェイスに適したカルチャを取得します。 アプリケーションは、フォールバックユーザーインターフェイスカルチャを取得した後、現在のスレッドの現在のユーザーインターフェイスカルチャにカルチャを割り当てる必要があります。 詳細については、「<xref:System.Globalization.CultureInfo.CurrentUICulture%2A> プロパティ」の「現在の UI カルチャを明示的に設定する」セクションを参照してください。  
  
 次に示すのは、定義済みのカルチャ名とは異なるフォールバックユーザーインターフェイスカルチャ名を持つ定義済みカルチャです。  
  
|定義済みカルチャ|カルチャ名|フォールバックユーザーインターフェイスのカルチャ名|  
|------------------------|------------------|------------------------------------------|  
|アムハラ語|使い慣れ|en-US|  
|アムハラ語 (エチオピア)|am-ET|en-US|  
|(ニュートラルアラビア語)|ar|en-US|  
|アラビア語 (U.A.E.)|ar-AE|en-US|  
|アラビア語 (バーレーン)|ar-BH|en-US|  
|アラビア語 (アルジェリア)|ar-DZ|fr-FR|  
|アラビア語 (エジプト)|ar-EG|en-US|  
|アラビア語 (イラク)|ar-IQ|en-US|  
|アラビア語 (ヨルダン)|ar-JO|en-US|  
|アラビア語 (クウェート)|ar-KW|en-US|  
|アラビア語 (レバノン)|ar-LB|en-US|  
|アラビア語 (リビア)|ar-(& a)|en-US|  
|アラビア語 (モロッコ)|ar-MA|fr-FR|  
|アラビア語 (オマーン)|ar-OM|en-US|  
|アラビア語 (カタール)|ar-QA|en-US|  
|アラビア語 (サウジアラビア)|ar-SA|en-US|  
|アラビア語 (シリア)|ar-SY|en-US|  
|アラビア語 (チュニジア)|ar-TN|fr-FR|  
|アラビア語 (イエメン)|ar|en-US|  
|アッサム語|as|en-US|  
|アッサム語 (インド)|as-IN|en-US|  
|語|bn|en-US|  
|バングラ語 (バングラデシュ)|bn-BD|en-US|  
|バングラ語 (インド)|bn-IN|en-US|  
|チベット語|bo|en-US|  
|チベット語 (PRC)|bo-CN|en-US|  
|ディベヒ語|dv|en-US|  
|ディベヒ語 (インド)|dv-MV|en-US|  
|ペルシャ語|fa|en-US|  
|ペルシャ語 (イラン)|fa-IR|en-US|  
|グジャラート語|gu|en-US|  
|グジャラート語 (インド)|gu-IN|en-US|  
|ヘブライ語|he|en-US|  
|ヘブライ語 (イスラエル)|he-IL|en-US|  
|ヒンディー語|こんにちは|en-US|  
|ヒンディー語 (インド)|hi-IN|en-US|  
|Yi|2|en-US|  
|イ語 (PRC)|ii-CN|en-US|  
|Inukitut 音節|iu|en-US|  
|Inukitut 音節文字 (カナダ)|iu|en-US|  
|クメール語|km|en-US|  
|クメール語 (カンボジア)|km-KH|en-US|  
|カナラ語|kn|en-US|  
|カンナダ語 (インド)|kn-IN|en-US|  
|コーンクニー語|kok|en-US|  
|コーンクニー語 (インド)|kok-IN|en-US|  
|ラオス語|lo|en-US|  
|ラオス語 (ラオス人民ラオス)|lo-LA|en-US|  
|マラヤーラム語|ml|en-US|  
|マラヤーラム語 (インド)|ml-IN|en-US|  
|モホーク|moh|en-US|  
|モホーク語 (カナダ)|moh-CA|en-US|  
|マラーティー語|mr|en-US|  
|マラーティー語 (インド)|mr-IN|en-US|  
|ネパール語|ne|en-US|  
|ネパール語 (ネパール)|ne-NP|en-US|  
|ノルウェー語|no|nb-NO|  
|Odiya|、または|en-US|  
|Odiya (インド)|or-IN|en-US|  
|パンジャーブ語|pa|en-US|  
|パンジャーブ語 (インド)|pa-IN|en-US|  
|Dari|pr|en-US|  
|Dari (アフガニスタン)|pr-AF|en-US|  
|パシュトゥー語|ps|en-US|  
|パシュトゥー語 (アフガニスタン)|ps-AF|en-US|  
|サンスクリット語|sa|en-US|  
|サンスクリット語 (インド)|sa-IN|en-US|  
|シンハラ語|si|en-US|  
|シンハラ語 (スリランカ)|si-LK|en-US|  
|シリア語|syr|en-US|  
|シリア語 (シリア)|syr-SY|en-US|  
|タミール語|ta|en-US|  
|タミール語 (インド)|ta-IN|en-US|  
|テルグ語|te|en-US|  
|テルグ語 (インド)|te-IN|en-US|  
|タイ語|台目の|en-US|  
|タイ語 (タイ)|th-Th|en-US|  
|ウイグル語|ug|en-US|  
|Uighur (PRC)|ug-CN|en-US|  
|ウルドゥ語|あなたの|en-US|  
|ウルドゥー語 (パキスタン)|ur-PK|en-US|  
|ベトナム語|vi|en-US|  
|ベトナム語 (ベトナム)|vi-VN|en-US|  
  
 アプリケーションでは、<xref:System.Globalization.CultureAndRegionInfoBuilder> を使用してカルチャの代替を作成できます。また、そのカルチャには、選択したコンソールフォールバックカルチャを設定できます。  
  
   
  
## Examples  
 次のコード例では、カルチャオブジェクトに関連付けられているフォールバックユーザーインターフェイスカルチャを表示します。  
  
 [!code-cpp[sys.glob.ci.getCFUIC#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.ci.getCFUIC/cpp/cfuic.cpp#1)]
 [!code-csharp[sys.glob.ci.getCFUIC#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.ci.getCFUIC/CS/cfuic.cs#1)]
 [!code-vb[sys.glob.ci.getCFUIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.ci.getCFUIC/VB/cfuic.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCultureInfo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>カルチャのキャッシュされた読み取り専用インスタンスを取得します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(int32 culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (culture As Integer) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(int culture);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfo : int -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfo culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="culture">ロケール識別子 (LCID)。</param>
        <summary>指定されたカルチャ識別子を使用して、カルチャのキャッシュされた読み取り専用インスタンスを取得します。</summary>
        <returns>読み取り専用の <see cref="T:System.Globalization.CultureInfo" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lcid ではなくロケール名を使用する必要があるため、このメソッド (<xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29>) の文字列オーバーロードを使用することをお勧めします。 カスタムロケールの場合は、ロケール名が必要です。  
  
 `culture` が現在のカルチャのロケール識別子である場合、返された <xref:System.Globalization.CultureInfo> オブジェクトには、ユーザーのオーバーライドは反映されません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="culture" /> が 0 未満です。</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="culture" /> はサポートされていないカルチャを指定します。 詳細については、「呼び出し時の注意」をご覧ください。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以前のバージョンでは、<paramref name="culture" /> が有効なカルチャ識別子でない場合、<see cref="T:System.ArgumentException" /> がスローされます。 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]以降では、このメソッドは <see cref="T:System.Globalization.CultureNotFoundException" />をスローします。 Windows 7 以降で [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 以降で実行されるアプリ以降では、このメソッドは、id がオペレーティングシステムから <paramref name="culture" /> ている <see cref="T:System.Globalization.CultureInfo" /> オブジェクトを取得しようとします。オペレーティングシステムがそのカルチャをサポートしていない場合、メソッドは <see cref="T:System.Globalization.CultureNotFoundException" />をスローします。</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfo : string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfo name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="name">カルチャの名前。 <paramref name="name" /> では、大文字と小文字は区別されません。</param>
        <summary>指定されたカルチャ名を使用して、カルチャのキャッシュされた読み取り専用インスタンスを取得します。</summary>
        <returns>読み取り専用の <see cref="T:System.Globalization.CultureInfo" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

Windows システム上の定義済みカルチャ名の一覧については、 [windows でサポートされている言語/地域名の一覧](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c)の **[言語タグ]** 列を参照してください。 カルチャ名は、[BCP 47](https://tools.ietf.org/html/bcp47) によって定義されている標準に準拠します。 さらに、Windows 10 以降では、`name` 有効な BCP-47 言語タグを使用できます。  
  
 <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> メソッドは、キャッシュされた読み取り専用の <xref:System.Globalization.CultureInfo> オブジェクトを取得します。 <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29?displayProperty=nameWithType> コンストラクターへの対応する呼び出しよりもパフォーマンスが優れています。  
  
 `name` が現在のカルチャの名前である場合、返された <xref:System.Globalization.CultureInfo> オブジェクトには、ユーザーのオーバーライドは反映されません。 これにより、システム上に実際のユーザーアカウントを持たず、複数のカルチャを効率的に読み込む必要があるサーバーアプリケーションやツールに適した方法になります。  
  
 `name` が <xref:System.String.Empty?displayProperty=nameWithType>の場合、メソッドはインバリアントカルチャを返します。 これは、<xref:System.Globalization.CultureInfo.InvariantCulture%2A> プロパティの値を取得することと同じです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> が null です。</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="name" /> はサポートされていないカルチャを指定します。 詳細については、「呼び出し時の注意」をご覧ください。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以前のバージョンでは、<paramref name="name" /> が有効なカルチャ名ではない場合、<see cref="T:System.ArgumentException" /> がスローされます。 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]以降では、このメソッドは <see cref="T:System.Globalization.CultureNotFoundException" />をスローします。 Windows 7 以降で [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 以降で実行されるアプリ以降では、このメソッドは、id がオペレーティングシステムから <paramref name="name" /> ている <see cref="T:System.Globalization.CultureInfo" /> オブジェクトを取得しようとします。オペレーティングシステムがそのカルチャをサポートしていない場合、<paramref name="name" /> が補助カルチャまたは置換カルチャの名前でない場合、メソッドは <see cref="T:System.Globalization.CultureNotFoundException" />をスローします。</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (string name, string altName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(string name, string altName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (name As String, altName As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(System::String ^ name, System::String ^ altName);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfo : string * string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfo (name, altName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="altName" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="name">カルチャの名前。 <paramref name="name" /> では、大文字と小文字は区別されません。</param>
        <param name="altName"><see cref="T:System.Globalization.TextInfo" /> の初期化に使用される <see cref="T:System.Globalization.CompareInfo" /> オブジェクトおよび <paramref name="name" /> オブジェクトを提供するカルチャの名前。 <paramref name="altName" /> では、大文字と小文字は区別されません。</param>
        <summary>カルチャのキャッシュされた読み取り専用インスタンスを取得します。 パラメーターは、別のカルチャで指定された <see cref="T:System.Globalization.TextInfo" /> オブジェクトおよび <see cref="T:System.Globalization.CompareInfo" /> オブジェクトで初期化されたカルチャを指定します。</summary>
        <returns>読み取り専用の <see cref="T:System.Globalization.CultureInfo" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows システム上の定義済みカルチャ名の一覧については、 [windows でサポートされている言語/地域名の一覧](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c)の **[言語タグ]** 列を参照してください。 カルチャ名は、[BCP 47](https://tools.ietf.org/html/bcp47) によって定義されている標準に準拠します。 さらに、Windows 10 以降では、`name` 有効な BCP-47 言語タグを使用できます。  
  
 <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> メソッドは、キャッシュされた読み取り専用の <xref:System.Globalization.CultureInfo> オブジェクトを取得します。 <xref:System.Globalization.CultureInfo.%23ctor%2A> コンストラクターへの対応する呼び出しよりもパフォーマンスが優れています。 メソッドは、`name` パラメーターで指定したものと似たカルチャを作成するために使用されますが、並べ替えや大文字と小文字の規則は異なります。  
  
 `name` または `altName` が現在のカルチャの名前である場合、返されるオブジェクトにはユーザーのオーバーライドは反映されません。 `name` が <xref:System.String.Empty?displayProperty=nameWithType>の場合、メソッドはインバリアントカルチャを返します。 これは、<xref:System.Globalization.CultureInfo.InvariantCulture%2A> プロパティの値を取得することと同じです。 `altName` が <xref:System.String.Empty?displayProperty=nameWithType>の場合、メソッドは、インバリアントカルチャによって指定された書記体系と比較規則を使用します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> または <paramref name="altName" /> が null です。</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="name" /> または <paramref name="altName" /> が、サポートされていないカルチャを指定しています。 詳細については、「呼び出し時の注意」をご覧ください。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以前のバージョンでは、<paramref name="name" /> または <paramref name="altName" /> が有効なカルチャ名ではない場合、<see cref="T:System.ArgumentException" /> がスローされます。 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]以降では、このメソッドは <see cref="T:System.Globalization.CultureNotFoundException" />をスローします。 Windows 7 以降で [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 以降で実行されるアプリ以降では、このメソッドは、id がオペレーティングシステムから <paramref name="name" /> ている <see cref="T:System.Globalization.CultureInfo" /> オブジェクトを取得しようとします。オペレーティングシステムがそのカルチャをサポートしていない場合、<paramref name="name" /> が補助カルチャまたは置換カルチャの名前でない場合、メソッドは <see cref="T:System.Globalization.CultureNotFoundException" /> 例外をスローします。 Windows 7 以降で [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 以降で実行されるアプリ以降では、このメソッドは、id がオペレーティングシステムから <paramref name="name" /> ている <see cref="T:System.Globalization.CultureInfo" /> オブジェクトを取得しようとします。オペレーティングシステムがそのカルチャをサポートしていない場合、<paramref name="name" /> が補助カルチャまたは置換カルチャの名前でない場合、メソッドは <see cref="T:System.Globalization.CultureNotFoundException" /> 例外をスローします。</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfoByIetfLanguageTag">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfoByIetfLanguageTag (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfoByIetfLanguageTag(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfoByIetfLanguageTag (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfoByIetfLanguageTag(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfoByIetfLanguageTag : string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="name">RFC 4646 標準で指定された言語の名前。</param>
        <summary>非推奨。 指定された RFC 4646 言語タグで示される言語特性を持つ、読み取り専用 <see cref="T:System.Globalization.CultureInfo" /> オブジェクトを取得します。</summary>
        <returns>読み取り専用の <see cref="T:System.Globalization.CultureInfo" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  このメソッドと <xref:System.Globalization.CultureInfo.IetfLanguageTag%2A> プロパティは非推奨とされます。 アプリケーションでは、これらの要素を使用する代わりに、新しい <xref:System.Globalization.CultureInfo> オブジェクトを使用し、<xref:System.Globalization.CultureInfo.Name%2A> プロパティを呼び出す必要があります。 IETF タグと名前は同じです。  
  
 インターネット技術標準化委員会 (IETF) によって管理されている RFC 4646 標準では、IETF 言語タグが定義されています。 IETF 言語タグは、言語を識別するための統一的な手段を提供します。 IETF 言語タグの形式は、<xref:System.Globalization.CultureInfo.Name%2A> プロパティによって返されるカルチャ名と同じですが、カルチャを一意に識別しません。 カルチャによって言語特性が同一である場合、同じ IETF 言語タグが共有されます。 カルチャの言語特性は、<xref:System.Globalization.CultureInfo> オブジェクトに関連付けられている <xref:System.Globalization.TextInfo> オブジェクトに格納されます。  
  
 IETF 言語タグは、必須言語識別子、オプションのスクリプト識別子、およびオプションの地域 id で構成されます。  
  
 アプリケーションでは、取得したカルチャを使用して、スペルチェックや文法チェッカーの管理など、言語固有のタスクを制御する必要があります。 アプリケーションでは、取得したカルチャを使用して、テキストの並べ替え、時刻や日付の書式設定など、カルチャ固有のタスクを制御することはできません。  
  
 詳細については、 [https://go.microsoft.com/fwlink/?LinkId=100231](https://go.microsoft.com/fwlink/?LinkId=100231)の RFC 4646、「言語を識別するためのタグ」、および最新のドラフト標準の Draft-phillips-langtags-05 を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> が null です。</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="name" /> は、サポートされているカルチャに対応していません。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以前のバージョンでは、<paramref name="name" /> がサポートされているカルチャの名前に対応していない場合、<see cref="T:System.ArgumentException" /> がスローされます。 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]以降では、このメソッドは <see cref="T:System.Globalization.CultureNotFoundException" />をスローします。</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.TextInfo" />
        <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultures">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo[] GetCultures (System.Globalization.CultureTypes types);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo[] GetCultures(valuetype System.Globalization.CultureTypes types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultures (types As CultureTypes) As CultureInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Globalization::CultureInfo ^&gt; ^ GetCultures(System::Globalization::CultureTypes types);" />
      <MemberSignature Language="F#" Value="static member GetCultures : System.Globalization.CultureTypes -&gt; System.Globalization.CultureInfo[]" Usage="System.Globalization.CultureInfo.GetCultures types" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Globalization.CultureTypes" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="types">取得するカルチャへのフィルターとして使用する列挙値のビットごとの組み合わせ。</param>
        <summary>サポートされているカルチャを、指定した <see cref="T:System.Globalization.CultureTypes" /> パラメーターでフィルター処理した結果のリストを取得します。</summary>
        <returns><paramref name="types" /> パラメーターで指定されたカルチャを格納する配列。 カルチャの配列が並べ替えられていません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.GetCultures%2A> メソッドは、`types` パラメーターを次の値に設定して、最も一般的に呼び出されます。  
  
-   <xref:System.Globalization.CultureTypes.SpecificCultures>。これにより、すべての特定のカルチャが返されます。  
  
-   <xref:System.Globalization.CultureTypes.NeutralCultures>。すべてのニュートラルカルチャとインバリアントカルチャを返します。  
  
-   <xref:System.Globalization.CultureTypes.AllCultures>は、すべてのニュートラルカルチャと特定のカルチャ、Windows システムにインストールされているカルチャ、ユーザーが作成したカスタムカルチャを返します。  
  
-   <xref:System.Globalization.CultureTypes.UserCustomCulture>。 <xref:System.Globalization.CultureAndRegionInfoBuilder> クラスによって登録されているものなど、すべてのカスタムカルチャを返します。 Windows 10 より前のバージョンの Windows では、<xref:System.Globalization.CultureTypes.UserCustomCulture> 値はすべてのユーザー定義のカスタムカルチャに適用されます。 Windows 10 以降では、完全なカルチャデータを持たず、<xref:System.Globalization.CultureInfo.LCID%2A> プロパティ値によって示される一意のローカル識別子を持たないシステムカルチャに適用されます。 その結果、次のようなコードでは、Windows 10 と以前のバージョンの Windows で実行すると、異なる結果が返されます。  
  
     [!code-csharp[System.Globalization.CultureInfo.GetCultures#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures3.cs#2)]
     [!code-vb[System.Globalization.CultureInfo.GetCultures#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures3.vb#2)]  
  
   
  
## Examples  
 次のコード例では、ニュートラルカルチャのいくつかのプロパティを表示します。  
  
> [!NOTE]
>  この例では、zh-tw と zh-tw のカルチャをそれぞれ0x0004 および0x7C04 カルチャ識別子と共に表示します。 ただし、Windows Vista アプリケーションでは、zh-hant の代わりに zh-tw と zh-tw Zh-tw 名の代わりに zh-tw-Hans 名を使用する必要があります。 Zh-tw と zh-tw の Hans は、現在の標準を表します。古い名前を使用する理由がない限り、この名前を使用する必要があります。  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="types" /> で指定されている <see cref="T:System.Globalization.CultureTypes" /> 値の組み合わせが正しくありません。</exception>
        <altmember cref="T:System.Globalization.CultureTypes" />
      </Docs>
    </Member>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public virtual object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberSignature Language="F#" Value="abstract member GetFormat : Type -&gt; obj&#xA;override this.GetFormat : Type -&gt; obj" Usage="cultureInfo.GetFormat formatType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormatProvider.GetFormat(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">書式指定オブジェクトを取得する <see cref="T:System.Type" />。 このメソッドは、<see cref="T:System.Globalization.NumberFormatInfo" /> 型と <see cref="T:System.Globalization.DateTimeFormatInfo" /> 型だけをサポートしています。</param>
        <summary>指定した型に書式指定する方法を定義するオブジェクトを取得します。</summary>
        <returns><see cref="P:System.Globalization.CultureInfo.NumberFormat" /> プロパティの値。<see cref="T:System.Globalization.NumberFormatInfo" /> が <see cref="T:System.Globalization.CultureInfo" /> クラスの <paramref name="formatType" /> オブジェクトの場合は、現在の <see cref="T:System.Type" /> の既定の数値書式情報が格納された <see cref="T:System.Globalization.NumberFormatInfo" /> です。  
  
または 
<see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> プロパティの値。<see cref="T:System.Globalization.DateTimeFormatInfo" /> が <see cref="T:System.Globalization.CultureInfo" /> クラスの <paramref name="formatType" /> オブジェクトの場合は、現在の <see cref="T:System.Type" /> の既定の日付および時刻の形式に関する情報が格納された <see cref="T:System.Globalization.DateTimeFormatInfo" /> です。  
  
または 
<paramref name="formatType" /> がその他のオブジェクトである場合は null。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.GetFormat%2A> は、<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> を実装します。  
  
 `NumberFormatInfo` は、基本データ型の書式指定メソッドと組み合わせて使用されるカルチャ固有の数値書式を提供します。 `DateTimeFormatInfo` は、特定のカルチャに対して日付と時刻の値を書式設定する方法を制御します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.NumberFormat" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="cultureInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CultureInfo" /> のハッシュ関数として機能します。ハッシュ アルゴリズムや、ハッシュ テーブルのようなデータ構造での使用に適しています。</summary>
        <returns>現在の <see cref="T:System.Globalization.CultureInfo" /> のハッシュ コード。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> をオーバーライドします。  
  
 このメソッドは、<xref:System.Globalization.CultureInfo.Equals%2A> メソッドによって等しいと評価された 2 つのオブジェクトに対して同じハッシュ コードを生成します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Globalization.CultureInfo.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IetfLanguageTag">
      <MemberSignature Language="C#" Value="public string IetfLanguageTag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IetfLanguageTag" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IetfLanguageTag" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IetfLanguageTag As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IetfLanguageTag { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IetfLanguageTag : string" Usage="System.Globalization.CultureInfo.IetfLanguageTag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非推奨。 言語の RFC 4646 標準 ID を取得します。</summary>
        <value>言語の RFC 4646 標準 ID を表す文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  このプロパティと <xref:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag%2A> メソッドは非推奨とされます。 代わりに、<xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType> プロパティを使用する必要があります。 IETF タグと名前は同じです。  
  
 インターネット技術標準化委員会 (IETF) によって管理されている RFC 4646 標準では、IETF 言語タグが定義されています。 IETF 言語タグは、言語を識別するための統一的な手段を提供します。 IETF 言語タグの形式は、<xref:System.Globalization.CultureInfo.Name%2A> プロパティによって返されるカルチャ名に似ていますが、カルチャを一意に識別しません。 つまり、カルチャによって言語特性が同一である場合、異なるカルチャは同じ IETF 言語タグを共有します。 カルチャの言語特性は、<xref:System.Globalization.CultureInfo> オブジェクトに関連付けられている <xref:System.Globalization.TextInfo> オブジェクトに格納されます。  
  
 IETF 言語タグは、必須言語識別子、オプションのスクリプト識別子、およびオプションの地域 id で構成されます。  
  
 詳細については、 [RFC 5646 の「言語を識別するためのタグ」](https://go.microsoft.com/fwlink/?LinkId=230876)を参照してください。 サブタグの一覧については、 [IANA 言語サブタグレジストリ](https://go.microsoft.com/fwlink/?LinkId=230877)を参照してください。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.TextInfo" />
        <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
      </Docs>
    </Member>
    <Member MemberName="InstalledUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo InstalledUICulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo InstalledUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.InstalledUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InstalledUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ InstalledUICulture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InstalledUICulture : System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.InstalledUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>オペレーティング システムと共にインストールされたカルチャを表す <see cref="T:System.Globalization.CultureInfo" /> を取得します。</summary>
        <value>オペレーティング システムと共にインストールされたカルチャを表す <see cref="T:System.Globalization.CultureInfo" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 日本語版の Windows など、ローカライズされたオペレーティングシステムでは、このプロパティはオペレーティングシステムのカルチャを返します。 このプロパティは、Windows API の `GetSystemDefaultUILanguage` に相当します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Resources.ResourceManager" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
      </Docs>
    </Member>
    <Member MemberName="InvariantCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo InvariantCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo InvariantCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.InvariantCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ InvariantCulture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InvariantCulture : System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.InvariantCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カルチャに依存しない (インバリアントな) <see cref="T:System.Globalization.CultureInfo" /> オブジェクトを取得します。</summary>
        <value>カルチャに依存しない (インバリアントな) オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 インバリアントカルチャは、カルチャに依存しません。英語と関連付けられていますが、国/地域には関連付けられていません。 インバリアントカルチャを名前で指定するには、<xref:System.Globalization.CultureInfo> のインスタンス化メソッドの呼び出しで空の文字列 ("") を使用します。 <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> は、インバリアントカルチャのインスタンスも取得します。 カルチャを必要とする <xref:System.Globalization> 名前空間のほとんどすべてのメソッドで使用できます。 <xref:System.Globalization.CultureInfo.CompareInfo%2A>、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>、<xref:System.Globalization.CultureInfo.NumberFormat%2A> などのプロパティによって返されるオブジェクトには、インバリアントカルチャの文字列比較と書式指定規則も反映されます。  
  
 カルチャに依存するデータは、ユーザーのカスタマイズ、または .NET Framework またはオペレーティングシステムの更新によって変更される可能性があるため、インバリアントカルチャデータは時間の経過と共に安定しており、インストールされているカルチャをまたいで、ユーザーがカスタマイズすることはできません。 これにより、書式設定されたデータを保持する書式設定や解析操作や、データを表示する必要がある並べ替え操作や順序付け操作など、カルチャに依存しない結果を必要とする操作には、インバリアントカルチャが特に便利になります。カルチャに関係なく、順序を固定します。  
  
## <a name="string-operations"></a>文字列操作  
 カルチャに依存した文字列操作には、現在のスレッドカルチャの規則の影響を受けず、カルチャ間で一貫性があるカルチャに依存したカルチャを使用できます。 たとえば、並べ替えられたデータを固定された順序で表示したり、現在のスレッドカルチャに関係なく、大文字と小文字の規則の標準セットを文字列に適用したりすることができます。 これを行うには、<xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Boolean%2CSystem.Globalization.CultureInfo%29> や <xref:System.String.ToUpper%28System.Globalization.CultureInfo%29>など、<xref:System.Globalization.CultureInfo> パラメーターを持つメソッドに <xref:System.Globalization.CultureInfo.InvariantCulture%2A> オブジェクトを渡します。  
  
## <a name="persisting-data"></a>データの保持  
 <xref:System.Globalization.CultureInfo.InvariantCulture%2A> プロパティは、カルチャに依存しない形式でデータを保持するために使用できます。 これは、変更されず、カルチャ間でデータをシリアル化および逆シリアル化するために使用できる既知の形式を提供します。 データを逆シリアル化した後は、現在のユーザーのカルチャ規則に基づいて適切に書式設定できます。  
  
 たとえば、日付と時刻のデータを文字列形式で保持する場合は、<xref:System.Globalization.CultureInfo.InvariantCulture%2A> オブジェクトを <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> または <xref:System.DateTimeOffset.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> メソッドに渡して文字列を作成できます。また、<xref:System.Globalization.CultureInfo.InvariantCulture%2A> オブジェクトを <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> または <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> メソッドに渡して、文字列を日付と時刻の値に変換することができます。 この手法により、データが異なるカルチャのユーザーによって読み取られたり、書き込まれたりした場合に、基になる日付と時刻の値が変更されることがなくなります。  
  
 次の例では、インバリアントカルチャを使用して、<xref:System.DateTime> 値を文字列として保持します。 次に、文字列を解析し、フランス語 (フランス) カルチャおよびドイツ語 (ドイツ) カルチャの書式指定規則を使用してその値を表示します。  
  
 [!code-csharp[System.Globalization.CultureInfo.InvariantCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.invariantculture/cs/persist1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.InvariantCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.invariantculture/vb/persist1.vb#1)]  
  
## <a name="security-decisions"></a>セキュリティの決定  
 文字列比較またはケースの変更の結果に基づいてセキュリティの決定 (システムリソースへのアクセスを許可するかどうかなど) を行う場合は、インバリアントカルチャを使用しないでください。 代わりに、<xref:System.StringComparison> パラメーターを含み、<xref:System.StringComparison.Ordinal?displayProperty=nameWithType> または <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType> を引数として指定するメソッドを呼び出して、大文字と小文字を区別するか、大文字と小文字を区別しない序数の比較を実行する必要があります。 カルチャに依存した文字列操作を実行するコードは、現在のカルチャが変更された場合、またはコードを実行しているコンピューターのカルチャが、コードのテストに使用されるカルチャと異なる場合に、セキュリティ上の脆弱性を引き起こす可能性があります。 これに対して、序数に基づく比較は、比較対象の文字のバイナリ値だけに依存します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
        <altmember cref="P:System.Globalization.CultureInfo.IsNeutralCulture" />
      </Docs>
    </Member>
    <Member MemberName="IsNeutralCulture">
      <MemberSignature Language="C#" Value="public virtual bool IsNeutralCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNeutralCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IsNeutralCulture" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsNeutralCulture As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsNeutralCulture { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNeutralCulture : bool" Usage="System.Globalization.CultureInfo.IsNeutralCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CultureInfo" /> がニュートラル カルチャを表しているかどうかを示す値を取得します。</summary>
        <value>現在の <see langword="true" /> がニュートラル カルチャを表している場合は <see cref="T:System.Globalization.CultureInfo" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ニュートラルカルチャは、言語に関連付けられているが、国や地域に関連付けられていないカルチャです。 これは、言語と国または地域の両方に関連付けられているカルチャである、特定のカルチャとは異なります。 たとえば、fr はニュートラルフランス語カルチャの名前、fr-fr はフランスのフランス語カルチャの名前です。  
  
 このプロパティが `false`を返す場合、カルチャは特定のカルチャまたはインバリアントカルチャになります。  
  
   
  
## Examples  
 次のコード例では、中国語を使用するカルチャがニュートラルカルチャであるかどうかを判断します。  
  
> [!NOTE]
>  この例では、zh-CHS および zh-CHT の古いカルチャ名を、カルチャ識別子としてそれぞれ 0x0004 と 0x7C04 を使用して表示します。 ただし、Windows Vista アプリケーションでは、zh-hant の代わりに zh-tw と zh-tw Zh-tw 名の代わりに zh-tw-Hans 名を使用する必要があります。 Zh-tw と zh-tw の Hans は、現在の標準を表します。古い名前を使用する理由がない限り、この名前を使用する必要があります。  
  
 [!code-cpp[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/CPP/neutralculture.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/CS/neutralculture.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/VB/neutralculture.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Globalization.CultureInfo.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CultureInfo" /> が読み取り専用かどうかを示す値を取得します。</summary>
        <value>現在の <see langword="true" /> が読み取り専用の場合は <see cref="T:System.Globalization.CultureInfo" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo> が読み取り専用の場合、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A> インスタンスと <xref:System.Globalization.CultureInfo.NumberFormat%2A> インスタンスも読み取り専用になります。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Globalization.CultureInfo.IsReadOnly%2A> が <xref:System.Globalization.CultureInfo>に関連付けられている <xref:System.Globalization.DateTimeFormatInfo> と <xref:System.Globalization.NumberFormatInfo> インスタンスを保護するのにも役立つことを示しています。  
  
 [!code-cpp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CPP/yslin_cultureinfo_readonly.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CS/yslin_cultureinfo_readonly.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/VB/yslin_cultureinfo_readonly.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="KeyboardLayoutId">
      <MemberSignature Language="C#" Value="public virtual int KeyboardLayoutId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeyboardLayoutId" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.KeyboardLayoutId" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property KeyboardLayoutId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int KeyboardLayoutId { int get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyboardLayoutId : int" Usage="System.Globalization.CultureInfo.KeyboardLayoutId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アクティブな入力ロケール識別子を取得します。</summary>
        <value>入力ロケール識別子を指定する 32 ビットの符号付き数値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 入力ロケール識別子は、以前はキーボードレイアウトと呼ばれていました。 入力ロケール識別子は、音声からテキストへの変換、入力方式エディター (IME)、またはその他の入力形式を示すことができるため、キーボードレイアウトよりも広範な概念です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public virtual int LCID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.LCID" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LCID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int LCID { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LCID : int" Usage="System.Globalization.CultureInfo.LCID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CultureInfo" /> のカルチャ識別子を取得します。</summary>
        <value>現在の <see cref="T:System.Globalization.CultureInfo" /> のカルチャ識別子。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ほとんどの場合、カルチャ識別子は対応する NLS ロケール識別子にマップされます。  
  
 Windows 10 より前のバージョンの Windows では、ロケール識別子 `LOCALE_CUSTOM_UNSPECIFIED` (0x1000 または 4096) が、ユーザーによって作成されたカスタムカルチャに割り当てられています。 Windows 10 以降では、一意のロケール識別子を持たず、システムによって提供される完全なデータを持たないカルチャに割り当てられます。 その結果、カルチャを反復処理し、<xref:System.Globalization.CultureInfo.LCID%2A> 値 `LOCALE_CUSTOM_UNSPECIFIED` を持つコードを取得するコードは、Windows 10 で実行された場合、<xref:System.Globalization.CultureInfo> オブジェクトのより大きなサブセットを返します。  
  
   
  
## Examples  
 次のコード例は、国際並べ替え順序を使用してスペイン語 (スペイン) 用の <xref:System.Globalization.CultureInfo> を作成する方法と、従来の並べ替え順序を持つ別の <xref:System.Globalization.CultureInfo> を作成する方法を示しています。  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Globalization.CultureInfo.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>*languagecode2*-*country/regioncode2* という形式のカルチャ名を取得します。</summary>
        <value>現在の <see cref="T:System.Globalization.CultureInfo" /> がカルチャに依存している場合は、 *languagecode2*-*country/regioncode2*という形式のカルチャ名。または、インバリアントカルチャの場合は空の文字列。 *languagecode2* は、ISO 639-1 に基づく小文字の 2 文字コードです。 *country/regioncode2* は、ISO 3166 から派生したもので、通常は 2 文字の英語大文字で構成されます (BCP-47 の言語タグ)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

Windows システムで <xref:System.Globalization.CultureInfo.Name%2A> プロパティが返すことのできる定義済みカルチャ名と識別子の一覧については、 [windows でサポートされる言語/地域名の一覧](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c)の「**言語タグ**」列を参照してください。 カルチャ名は、[BCP 47](https://tools.ietf.org/html/bcp47) によって定義されている標準に準拠します。 さらに、Windows 10 以降では、`name` 有効な BCP-47 言語タグを使用できます。 カルチャ名は変更される可能性があり、カスタムカルチャの名前を反映することもできます。  
  
 <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType> プロパティは、<xref:System.Globalization.CultureInfo> クラスのトピックに記載されている名前付け基準に従います。 代替の並べ替え順序を指定しないカルチャ名の短い形式を返します。 たとえば、文字列 "de DE_phoneb" を使用して <xref:System.Globalization.CultureInfo> オブジェクトをインスタンス化し、代替の並べ替え順序を反映する場合、<xref:System.Globalization.CultureInfo.Name%2A> プロパティは "de DE" を返します。  
  
 カルチャの完全な名前を取得するには、<xref:System.Globalization.CultureInfo.DisplayName%2A>、<xref:System.Globalization.CultureInfo.EnglishName%2A>、または <xref:System.Globalization.CultureInfo.NativeName%2A> プロパティを使用する必要があります。  
  
   
  
## Examples  
 次のコード例では、ニュートラルカルチャのいくつかのプロパティを表示します。  
  
> [!NOTE]
>  この例では、zh-CHS および zh-CHT の古いカルチャ名を、カルチャ識別子としてそれぞれ 0x0004 と 0x7C04 を使用して表示します。 ただし、Windows Vista アプリケーションでは、zh-hant の代わりに zh-tw と zh-tw Zh-tw 名の代わりに zh-tw-Hans 名を使用する必要があります。 Zh-tw と zh-tw の Hans は、現在の標準を表します。古い名前を使用する理由がない限り、この名前を使用する必要があります。  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="NativeName">
      <MemberSignature Language="C#" Value="public virtual string NativeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NativeName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.NativeName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property NativeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ NativeName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NativeName : string" Usage="System.Globalization.CultureInfo.NativeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カルチャの表示設定である、言語、国/地域、およびオプションのスクリプトで構成されるカルチャ名を取得します。</summary>
        <value>カルチャ名。 言語の完全名、国/地域の完全名、およびオプションのスクリプトで構成されます。 形式については、<see cref="T:System.Globalization.CultureInfo" /> クラスの説明を参照してください。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 .NET Framework の言語バージョンに関係なく、このプロパティの値は同じです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="NumberFormat">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.NumberFormatInfo NumberFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.NumberFormatInfo NumberFormat" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.NumberFormat" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property NumberFormat As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::NumberFormatInfo ^ NumberFormat { System::Globalization::NumberFormatInfo ^ get(); void set(System::Globalization::NumberFormatInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NumberFormat : System.Globalization.NumberFormatInfo with get, set" Usage="System.Globalization.CultureInfo.NumberFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>数値、通貨、割合を表示する、カルチャに対応する書式を定義する <see cref="T:System.Globalization.NumberFormatInfo" /> を取得または設定します。</summary>
        <value>数値、通貨、および割合を表示する、カルチャに対応する書式を定義する <see cref="T:System.Globalization.NumberFormatInfo" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="overrides"></a>オーバーライド  
 ユーザーは、コントロールパネルの [地域と言語のオプション] の部分を使用して、Windows の現在のカルチャに関連付けられている値の一部を上書きすることができます。 たとえば、ユーザーは、日付を別の形式で表示したり、カルチャに既定以外の通貨を使用したりすることができます。  
  
 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> が `true`、指定されたカルチャが Windows の現在のカルチャに一致する場合、<xref:System.Globalization.CultureInfo> は、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A> プロパティによって返される <xref:System.Globalization.DateTimeFormatInfo> インスタンスのプロパティのユーザー設定や、<xref:System.Globalization.NumberFormatInfo> プロパティによって返される <xref:System.Globalization.CultureInfo.NumberFormat%2A> インスタンスのプロパティなど、これらのオーバーライドを使用します。 ユーザー設定が <xref:System.Globalization.CultureInfo>に関連付けられているカルチャと互換性がない場合、たとえば、選択したカレンダーが <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>でない場合、メソッドの結果とプロパティの値は定義されません。  
  
 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> プロパティと <xref:System.Globalization.CultureInfo.NumberFormat%2A> プロパティの値は、ユーザーがプロパティにアクセスするまで計算されません。 アプリケーションの実行中に、ユーザーがコントロールパネルを使用して現在のカルチャを新しいカルチャに変更し、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A> または <xref:System.Globalization.CultureInfo.NumberFormat%2A> プロパティにアクセスする場合、アプリケーションは新しいカルチャの既定値を取得します。 元のカルチャのオーバーライドではありません。 元の現在のカルチャのオーバーライドを保持するには、現在のカルチャを変更する前に、アプリケーションが <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> および <xref:System.Globalization.CultureInfo.NumberFormat%2A> プロパティにアクセスする必要があります。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Globalization.CultureInfo>に関連付けられている <xref:System.Globalization.DateTimeFormatInfo> と <xref:System.Globalization.NumberFormatInfo> インスタンスも複製することを示しています。  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが null に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Globalization.CultureInfo.NumberFormat" /> プロパティまたは <see cref="T:System.Globalization.NumberFormatInfo" /> プロパティのいずれかが設定され、<see cref="T:System.Globalization.CultureInfo" /> は読み取り専用です。</exception>
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="OptionalCalendars">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.Calendar[] OptionalCalendars { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar[] OptionalCalendars" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.OptionalCalendars" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property OptionalCalendars As Calendar()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;System::Globalization::Calendar ^&gt; ^ OptionalCalendars { cli::array &lt;System::Globalization::Calendar ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OptionalCalendars : System.Globalization.Calendar[]" Usage="System.Globalization.CultureInfo.OptionalCalendars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カルチャで使用できる暦の一覧を取得します。</summary>
        <value>現在の <see cref="T:System.Globalization.Calendar" /> が表すカルチャで使用できる暦を表す <see cref="T:System.Globalization.CultureInfo" /> 型の配列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションは、<xref:System.Globalization.DateTimeFormatInfo> クラスのインスタンスである <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>の <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティを設定することによって、現在の <xref:System.Globalization.CultureInfo> によって使用されるカレンダーを変更します。 新しい予定表は、<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>に一覧表示されている予定表のいずれかである必要があります。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> には、その <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>に関連付けられた日付と時刻の書式をカスタマイズするその他のプロパティも含まれています。  
  
   
  
## Examples  
 次のコード例は、カルチャでサポートされている <xref:System.Globalization.GregorianCalendar> のバージョンを確認する方法を示しています。  
  
 [!code-cpp[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/CPP/gregoriancalendartypes.cpp#1)]
 [!code-csharp[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/CS/gregoriancalendartypes.cs#1)]
 [!code-vb[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/VB/gregoriancalendartypes.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.CultureInfo Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Parent" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Parent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Parent As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::CultureInfo ^ Parent { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CultureInfo" /> の親カルチャを表す <see cref="T:System.Globalization.CultureInfo" /> を取得します。</summary>
        <value>現在の <see cref="T:System.Globalization.CultureInfo" /> の親カルチャを表す <see cref="T:System.Globalization.CultureInfo" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 カルチャには、特定のカルチャの親がニュートラルカルチャであり、ニュートラルカルチャの親が <xref:System.Globalization.CultureInfo.InvariantCulture%2A>であり、<xref:System.Globalization.CultureInfo.InvariantCulture%2A> の親がインバリアントカルチャである階層があります。 親カルチャには、その子に共通する情報のセットのみが含まれます。  
  
 特定のカルチャのリソースがシステムで使用できない場合は、ニュートラルカルチャのリソースが使用されます。 ニュートラルカルチャのリソースが使用できない場合は、メインアセンブリに埋め込まれているリソースが使用されます。 リソースフォールバックプロセスの詳細については、「[リソースのパッケージ化と配置](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例では、中国語言語を使用して、特定のカルチャの親カルチャを決定します。  
  
> [!NOTE]
>  この例では、zh-CHS および zh-CHT の古いカルチャ名を、カルチャ識別子としてそれぞれ 0x0004 と 0x7C04 を使用して表示します。 ただし、Windows Vista アプリケーションでは、zh-hant の代わりに zh-tw と zh-tw Zh-tw 名の代わりに zh-tw-Hans 名を使用する必要があります。 Zh-tw と zh-tw の Hans は、現在の標準を表します。古い名前を使用する理由がない限り、この名前を使用する必要があります。  
  
 [!code-cpp[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/CPP/parentculture.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/CS/parentculture.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/VB/parentculture.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Globalization.CultureInfo.#ctor" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo ReadOnly (System.Globalization.CultureInfo ci);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo ReadOnly(class System.Globalization.CultureInfo ci) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadOnly (ci As CultureInfo) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ ReadOnly(System::Globalization::CultureInfo ^ ci);" />
      <MemberSignature Language="F#" Value="static member ReadOnly : System.Globalization.CultureInfo -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.ReadOnly ci" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ci" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="ci">ラップする <see cref="T:System.Globalization.CultureInfo" /> オブジェクト。</param>
        <summary>指定した <see cref="T:System.Globalization.CultureInfo" /> オブジェクトをラップする読み取り専用のラッパーを返します。</summary>
        <returns><see cref="T:System.Globalization.CultureInfo" /> をラップする読み取り専用の <paramref name="ci" /> ラッパー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このラッパーは、`ci`、または `ci`によって返されるオブジェクトに対する変更を防止します。<xref:System.Globalization.CultureInfo.DateTimeFormat%2A> および `ci`ます。<xref:System.Globalization.CultureInfo.NumberFormat%2A> 属性.  
  
   
  
## Examples  
 次の例は、<xref:System.Globalization.CultureInfo.ReadOnly%2A> メソッドを使用して、<xref:System.Globalization.CultureInfo>に関連付けられた <xref:System.Globalization.DateTimeFormatInfo> と <xref:System.Globalization.NumberFormatInfo> インスタンスを保護する方法を示しています。  
  
 [!code-cpp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CPP/yslin_cultureinfo_readonly.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CS/yslin_cultureinfo_readonly.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/VB/yslin_cultureinfo_readonly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ci" /> が null です。</exception>
        <altmember cref="P:System.Globalization.CultureInfo.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="TextInfo">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.TextInfo TextInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.TextInfo TextInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.TextInfo" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TextInfo As TextInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::TextInfo ^ TextInfo { System::Globalization::TextInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TextInfo : System.Globalization.TextInfo" Usage="System.Globalization.CultureInfo.TextInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.TextInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カルチャに関連付けられている書記体系を定義する <see cref="T:System.Globalization.TextInfo" /> を取得します。</summary>
        <value>カルチャに関連付けられている書記体系を定義する <see cref="T:System.Globalization.TextInfo" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.TextInfo%2A> プロパティは、文字列のカルチャ固有の大文字と小文字の情報を提供します。 カルチャを認識しない大文字小文字の区別を行うには、アプリケーションで <xref:System.Globalization.CultureInfo.InvariantCulture%2A>の <xref:System.Globalization.CultureInfo.TextInfo%2A> プロパティを使用する必要があります。  
  
   
  
## Examples  
 次のコード例は、国際並べ替え順序を使用してスペイン語 (スペイン) 用の <xref:System.Globalization.CultureInfo> を作成する方法と、従来の並べ替え順序を持つ別の <xref:System.Globalization.CultureInfo> を作成する方法を示しています。  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.TextInfo" />
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public virtual string ThreeLetterISOLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterISOLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ThreeLetterISOLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ThreeLetterISOLanguageName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterISOLanguageName : string" Usage="System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CultureInfo" /> の言語に対する ISO 639-2 の 3 桁の文字コードを取得します。</summary>
        <value>現在の <see cref="T:System.Globalization.CultureInfo" /> の言語に対する ISO 639-2 の 3 桁文字コード。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 たとえば、英語の3文字の省略形は "eng" です。  
  
> [!NOTE]
>  プロセス間で通信を行う場合やデータを保持する場合は、通常、完全な <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>を使用することをお勧めします。 言語のみを使用すると、コンテキストとデータが失われる可能性があります。  
  
   
  
## Examples  
 次のコード例では、ニュートラルカルチャのいくつかのプロパティを表示します。  
  
> [!NOTE]
>  この例では、zh-CHS および zh-CHT の古いカルチャ名を、カルチャ識別子としてそれぞれ 0x0004 と 0x7C04 を使用して表示します。 ただし、Windows Vista アプリケーションでは、zh-hant の代わりに zh-tw と zh-tw Zh-tw 名の代わりに zh-tw-Hans 名を使用する必要があります。 Zh-tw と zh-tw の Hans は、現在の標準を表します。古い名前を使用する理由がない限り、この名前を使用する必要があります。  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterWindowsLanguageName">
      <MemberSignature Language="C#" Value="public virtual string ThreeLetterWindowsLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterWindowsLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ThreeLetterWindowsLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ThreeLetterWindowsLanguageName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterWindowsLanguageName : string" Usage="System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Windows API の定義に従って、言語に対する 3 文字コードを取得します。</summary>
        <value>Windows API で定義されている言語に対する 3 文字のコード。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、LOCALE_SABBREVLANGNAME 値と `GetLocaleInfo` Windows API メソッドと同じ値を返します。 たとえば、Windows API で定義されているように、英語 (米国) の3文字のコードは "enu" です。  
  
> [!NOTE]
>  プロセス間で通信を行う場合やデータを保持する場合は、通常、完全な <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>を使用することをお勧めします。 言語のみを使用すると、コンテキストとデータが失われる可能性があります。  
  
   
  
## Examples  
 次のコード例では、ニュートラルカルチャのいくつかのプロパティを表示します。  
  
> [!NOTE]
>  この例では、zh-CHS および zh-CHT の古いカルチャ名を、カルチャ識別子としてそれぞれ 0x0004 と 0x7C04 を使用して表示します。 ただし、Windows Vista アプリケーションでは、zh-hant の代わりに zh-tw と zh-tw Zh-tw 名の代わりに zh-tw-Hans 名を使用する必要があります。 Zh-tw と zh-tw の Hans は、現在の標準を表します。古い名前を使用する理由がない限り、この名前を使用する必要があります。  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="cultureInfo.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Globalization.CultureInfo" />languagecode2**-country/regioncode2*という形式で、現在の* の名前を格納している文字列を返します。</summary>
        <returns>現在の <see cref="T:System.Globalization.CultureInfo" /> の名前を格納している文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、<xref:System.Object.ToString%2A?displayProperty=nameWithType> をオーバーライドします。 このメソッドは、<xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> または <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> コンストラクター、または <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> または <xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29> メソッドに渡されるカルチャ名の正規化されたバージョンを返します。 *Languagecode2*の文字を小文字に変換し、必要に応じて*country/regioncode2*の文字を大文字に変換することによって、結果の文字列を正規化します。  
  
 Windows システム上の定義済みカルチャ名は、 [windows でサポートされている言語/地域名の一覧](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c)の **[言語タグ]** 列に一覧表示されます。 カルチャ名は、[BCP 47](https://tools.ietf.org/html/bcp47) によって定義されている標準に準拠します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
      </Docs>
    </Member>
    <Member MemberName="TwoLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public virtual string TwoLetterISOLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TwoLetterISOLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TwoLetterISOLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ TwoLetterISOLanguageName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TwoLetterISOLanguageName : string" Usage="System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CultureInfo" /> の言語に対する ISO 639-1 の 2 桁の文字コードを取得します。</summary>
        <value>現在の <see cref="T:System.Globalization.CultureInfo" /> の言語に対する ISO 639-1 の 2 桁文字コード。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 たとえば、英語の2文字の省略形は "en" です。 インバリアントカルチャの <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A> プロパティ値は "iv" です。  
  
> [!NOTE]
>  プロセス間で通信を行う場合やデータを保持する場合は、通常、完全な <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>を使用することをお勧めします。 言語のみを使用すると、コンテキストとデータが失われる可能性があります。  
  
 ISO 639-1 で特定のカルチャに対して2文字の言語コードが定義されていない場合、<xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A> プロパティは、3つ以上の文字で構成される文字列を返します。 詳細については、例を参照してください。  
  
   
  
## Examples  
 次の例では、<xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A> プロパティが2文字の言語コードで構成されていないカルチャを一覧表示します。  
  
 [!code-csharp[System.Globalization.CultureInfo.TwoLetterISOLanguageName#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.twoletterisolanguagename/cs/twoletterisolanguagename1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.TwoLetterISOLanguageName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.twoletterisolanguagename/vb/twoletterisolanguagename1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="UseUserOverride">
      <MemberSignature Language="C#" Value="public bool UseUserOverride { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseUserOverride" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.UseUserOverride" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UseUserOverride As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseUserOverride { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.UseUserOverride : bool" Usage="System.Globalization.CultureInfo.UseUserOverride" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CultureInfo" /> オブジェクトでユーザーが選択したカルチャ設定を使用するかどうかを示す値を取得します。</summary>
        <value>現在の <see langword="true" /> でユーザーが選択したカルチャ設定を使用する場合は <see cref="T:System.Globalization.CultureInfo" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザーは、コントロールパネルの [地域と言語のオプション] の部分を使用して、Windows の現在のカルチャに関連付けられている値の一部を上書きすることができます。 たとえば、ユーザーは、日付を別の形式で表示したり、カルチャに既定以外の通貨を使用したりすることができます。  
  
 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> が `true`、指定されたカルチャが Windows の現在のカルチャに一致する場合、<xref:System.Globalization.CultureInfo> は、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A> プロパティによって返される <xref:System.Globalization.DateTimeFormatInfo> インスタンスのプロパティのユーザー設定や、<xref:System.Globalization.NumberFormatInfo> プロパティによって返される <xref:System.Globalization.CultureInfo.NumberFormat%2A> インスタンスのプロパティなど、これらのオーバーライドを使用します。 ユーザー設定が <xref:System.Globalization.CultureInfo>に関連付けられているカルチャと互換性がない場合、たとえば、選択したカレンダーが <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>でない場合、メソッドの結果とプロパティの値は定義されません。  
  
 このプロパティは、<xref:System.Globalization.CultureInfo> が作成されるときに設定されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
