<Type Name="CharUnicodeInfo" FullName="System.Globalization.CharUnicodeInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cdf24908c52ca8209beb8a518cbb2ee3f1d52ccb" /><Meta Name="ms.sourcegitcommit" Value="2e48a9d60e44719c021ea403a45f4a08b7f88f08" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="11/14/2019" /><Meta Name="ms.locfileid" Value="74092448" /></Metadata><TypeSignature Language="C#" Value="public static class CharUnicodeInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit CharUnicodeInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CharUnicodeInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CharUnicodeInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharUnicodeInfo abstract sealed" />
  <TypeSignature Language="F#" Value="type CharUnicodeInfo = class" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Unicode 文字に関する情報を取得します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [Unicode 規格](https://go.microsoft.com/fwlink/?linkid=37123)では、多くの unicode 文字カテゴリが定義されています。 たとえば、文字は、大文字、小文字、10進数字、文字番号、段落区切り記号、算術記号、または通貨記号として分類されます。 アプリケーションでは、文字カテゴリを使用して、正規表現を使用した部分文字列の解析や抽出など、文字列ベースの操作を制御できます。 <xref:System.Globalization.UnicodeCategory> 列挙体は、使用可能な文字カテゴリを定義します。  
  
 <xref:System.Globalization.CharUnicodeInfo> クラスを使用して、特定の文字の <xref:System.Globalization.UnicodeCategory> 値を取得します。 <xref:System.Globalization.CharUnicodeInfo> クラスは、次の Unicode 文字値を返すメソッドを定義します。  
  
-   文字またはサロゲートペアが属する特定のカテゴリ。 返される値は、<xref:System.Globalization.UnicodeCategory> 列挙体のメンバーです。  
  
-   数値。 分数、添字、上付き文字、ローマ数字、通貨分子、encircled 番号、スクリプト固有の数字など、数字にのみ適用されます。  
  
-   桁の値。 番号付けシステムの整数を表すために、他の数字と組み合わせて使用できる数字に適用されます。  
  
-   10進数の値。 10進数 (基数 10) システムの10進数を表す文字にのみ適用されます。 10進数の数字は、0 ~ 9 の10桁の数字にすることができます。 これらの文字は <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> カテゴリのメンバーです。  
  
 さらに、<xref:System.Globalization.CharUnicodeInfo> クラスは、文字分類に依存する他の多くの .NET Framework 型およびメソッドによって内部的に使用されます。 次の設定があります。  
  
-   <xref:System.Globalization.StringInfo> クラス。文字列内の単一の文字ではなく、テキスト要素を操作します。  
  
-   文字またはサロゲートペアが属するカテゴリを決定する <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> メソッドのオーバーロード。  
  
-   <xref:System.Text.RegularExpressions.Regex>によって認識される[文字クラス](~/docs/standard/base-types/character-classes-in-regular-expressions.md)は、.NET Framework の正規表現エンジンです。  
  
 アプリケーションでこのクラスを使用する場合は、<xref:System.Char> 型を使用する際のプログラミング上の考慮事項に注意してください。 型を使用することは困難であり、通常は言語のコンテンツを表すために文字列を使用することをお勧めします。  
  
-   <xref:System.Char> オブジェクトは、常に1つの文字に対応するとは限りません。 <xref:System.Char> 型は1つの16ビット値を表しますが、一部の文字 (書記素クラスター、サロゲートペアなど) は2つ以上の UTF-16 コード単位で構成されます。 詳細については、<xref:System.String> クラスの「Char オブジェクトと Unicode 文字」を参照してください。  
  
-   "文字" の概念も柔軟です。 文字はグリフと見なされることがよくありますが、多くのグリフには複数のコードポイントが必要です。 たとえば、äは、2つのコードポイント ("a" + U + 0308 の組み合わせ、ウムラウト)、または単一のコードポイント ("ä" または U + 00A4) で表すことができます。 言語によっては、複数のコードポイントを必要とする文字、文字、グリフが多数ある場合があります。これにより、言語のコンテンツ表現が混乱する可能性があります。 たとえば、ΰ (U + 03B0、ギリシャ文字ウプシロンと tonytika、tonos) がありますが、それに相当する資本文字はありません。 このような値を Uppercasing は、単に元の値を取得します。  
  
   
  
## Examples  
 次のコード例は、さまざまな種類の文字について、各メソッドによって返される値を示しています。  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="usage"><para>認識される文字と、それらが属する特定のカテゴリは Unicode 規格によって定義され、Unicode 標準のあるバージョンから別のバージョンに変更できます。 .NET Framework の特定のバージョンの文字の分類は、.NET Framework が実行されている基になるオペレーティングシステムに関係なく、Unicode 標準の1つのバージョンに基づいています。 次の表は、[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 以降の .NET Framework バージョンと、文字の分類に使用される Unicode 標準のバージョンを示しています。  
  
 <list type="table"><listheader><term> .NET Framework のバージョン 
 </term><description> Unicode 標準のバージョン 
 </description></listheader><item><term> [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]  
  
 </term><description> [Unicode Standard バージョン 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v45](~/includes/net-v45-md.md)]  
  
 </term><description> [Unicode Standard バージョン 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v451](~/includes/net-v451-md.md)]  
  
 </term><description> [Unicode Standard バージョン 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v452](~/includes/net-v452-md.md)]  
  
 </term><description> [Unicode Standard バージョン 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v46](~/includes/net-v46-md.md)]  
  
 </term><description> [Unicode Standard バージョン 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v461](~/includes/net-v461-md.md)]  
  
 </term><description> [Unicode Standard バージョン 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v462](~/includes/net-v462-md.md)]  
  
 </term><description> [Unicode Standard バージョン 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/)  
  
 </description></item></list>  

 Unicode 標準の各バージョンには、以前のバージョン以降の Unicode 文字データベースへの変更に関する情報が含まれています。 Unicode 文字データベースは、文字を分類するために <see cref="T:System.Globalization.CharUnicodeInfo" /> クラスによって使用されます。</para></block>
    <altmember cref="T:System.Globalization.UnicodeCategory" />
    <altmember cref="N:System.Text" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetDecimalDigitValue">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>数値の Unicode 文字の 10 進値を取得します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDecimalDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDecimalDigitValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDecimalDigitValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDecimalDigitValue (ch As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDecimalDigitValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetDecimalDigitValue : char -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDecimalDigitValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="ch">10 進値を取得する対象の Unicode 文字。</param>
        <summary>指定した数字の 10 進値を取得します。</summary>
        <returns>指定した数字の 10 進値。  
  
 - または -  
  
 指定した文字が 10 進数でない場合は -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、10進数を表す文字を等価の整数値に変換します。 10進数は <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber> カテゴリの文字で、10進数の10桁の数字を表すことができます (10 進数は 0 ~ 9)。 U + 0030 ~ (DIGIT 0) から U + 0039 (数字 9) などの文字が含まれます。 u + 0660 (アラビア語-インド数字ゼロ) から U + 0669 (アラビア語-インド数字 9)、u + 07C0 (NKO DIGIT ZERO) から U + 07C0 (NKO DIGIT 9)、u + 1040 (ミャンマー数字ゼロ) から U + 1049 (ミャンマー数字 9)。  
  
 Unicode 文字の詳細については、「 [Unicode 標準](https://go.microsoft.com/fwlink/?linkid=37123)」を参照してください。  
  
   
  
## Examples  
 次のコード例は、さまざまな種類の文字について、各メソッドによって返される値を示しています。  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDecimalDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDecimalDigitValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDecimalDigitValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDecimalDigitValue (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDecimalDigitValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetDecimalDigitValue : string * int -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDecimalDigitValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s">10 進値を取得する対象の Unicode 文字を含む <see cref="T:System.String" />。</param>
        <param name="index">10 進値を取得する対象の Unicode 文字のインデックス。</param>
        <summary>指定した文字列の指定したインデックス位置にある数字の 10 進値を取得します。</summary>
        <returns>指定した文字列の指定したインデックス位置にある数字の 10 進値。  
  
 - または -  
  
 指定した文字列の指定したインデックス位置にある文字が 10 進数でない場合は -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、10進数を表す文字を等価の整数値に変換します。 10進数は <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber> カテゴリの文字で、10進数の10桁の数字を表すことができます (10 進数は 0 ~ 9)。 U + 0030 ~ (DIGIT 0) から U + 0039 (数字 9) などの文字が含まれます。 u + 0660 (アラビア語-インド数字ゼロ) から U + 0669 (アラビア語-インド数字 9)、u + 07C0 (NKO DIGIT ZERO) から U + 07C0 (NKO DIGIT 9)、u + 1040 (ミャンマー数字ゼロ) から U + 1049 (ミャンマー数字 9)。  
  
 Unicode 文字の詳細については、「 [Unicode 標準](https://go.microsoft.com/fwlink/?linkid=37123)」を参照してください。  
  
   
  
## Examples  
 次のコード例は、さまざまな種類の文字について、各メソッドによって返される値を示しています。  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> が <paramref name="s" /> の有効なインデックスの範囲外です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDigitValue">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>数値の Unicode 文字の桁の値を取得します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDigitValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDigitValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDigitValue (ch As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDigitValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetDigitValue : char -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDigitValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="ch">桁の値を取得する対象の Unicode 文字。</param>
        <summary>指定した数字の桁の値を取得します。</summary>
        <returns>指定した数字の桁の値。  
  
 - または -  
  
 指定した文字が桁でない場合は -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Digit value は、数字として使用できる数字にのみ適用されるプロパティです。 数字は、番号付けシステムの整数を表すために他の数字と組み合わせることができる数字です。  
  
 Unicode 文字の詳細については、「 [Unicode 標準](https://go.microsoft.com/fwlink/?linkid=37123)」を参照してください。  
  
   
  
## Examples  
 次のコード例は、さまざまな種類の文字について、各メソッドによって返される値を示しています。  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDigitValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDigitValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDigitValue (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDigitValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetDigitValue : string * int -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDigitValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s">桁の値を取得する対象の Unicode 文字を含む <see cref="T:System.String" />。</param>
        <param name="index">桁の値を取得する対象の Unicode 文字のインデックス。</param>
        <summary>指定した文字列の指定したインデックス位置にある数字の桁の値を取得します。</summary>
        <returns>指定した文字列の指定したインデックス位置にある数字の桁の値。  
  
 - または -  
  
 指定した文字列の指定したインデックス位置にある文字が桁でない場合は -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Digit value は、数字として使用できる数字にのみ適用されるプロパティです。 数字は、番号付けシステムの整数を表すために他の数字と組み合わせることができる数字です。  
  
 Unicode 文字の詳細については、「 [Unicode 標準](https://go.microsoft.com/fwlink/?linkid=37123)」を参照してください。  
  
   
  
## Examples  
 次のコード例は、さまざまな種類の文字について、各メソッドによって返される値を示しています。  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> が <paramref name="s" /> の有効なインデックスの範囲外です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNumericValue">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Unicode 文字に関連付けられている数値を取得します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (ch As Char) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetNumericValue : char -&gt; double" Usage="System.Globalization.CharUnicodeInfo.GetNumericValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">数値を取得する対象の Unicode 文字。</param>
        <summary>指定した文字に関連付けられている数値を取得します。</summary>
        <returns>指定した文字に関連付けられている数値。  
  
 - または -  
  
 指定した文字が数字でない場合は -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数値は、分数、添字、上付き文字、ローマ数字、通貨分子、encircled 番号、スクリプト固有の数字など、数字のみに適用される Unicode 文字プロパティです。 Unicode 文字の詳細については、「 [Unicode 標準](https://go.microsoft.com/fwlink/?linkid=37123)」を参照してください。  
  
 <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29> メソッドは、`ch` が1つの言語に対応し、その文字が10進数に変換できるかどうかをチェックします。 ただし、Unicode 規格の一部の数値は、サロゲートペアを形成する2つの <xref:System.Char> オブジェクトによって表されます。 たとえば、Aegean ナンバリングシステムは、コードポイント U + 10107 から U + 10133 で構成されます。 次の例では、<xref:System.Char.ConvertFromUtf32%2A> メソッドを使用して、AEGEAN NUMBER ONE を表す文字列をインスタンス化します。 この例の出力結果が示すように、<xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29> メソッドは、この文字の上位サロゲートまたは下位サロゲートのいずれかが渡された場合に-1 を返します。  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#2)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#2)]  
  
   
  
## Examples  
 次のコード例は、さまざまな種類の文字について、各メソッドによって返される値を示しています。  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (s As String, index As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetNumericValue : string * int -&gt; double" Usage="System.Globalization.CharUnicodeInfo.GetNumericValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">数値を取得する対象の Unicode 文字を含む <see cref="T:System.String" />。</param>
        <param name="index">数値を取得する対象の Unicode 文字のインデックス。</param>
        <summary>指定した文字列の指定したインデックス位置にある文字に関連付けられている数値を取得します。</summary>
        <returns>指定した文字列の指定したインデックス位置にある文字に関連付けられている数値。  
  
 - または -  
  
 指定した文字列の指定したインデックス位置にある文字が数字でない場合は -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数値は、分数、添字、上付き文字、ローマ数字、通貨分子、encircled 番号、スクリプト固有の数字など、数字のみに適用される Unicode 文字プロパティです。 Unicode 文字の詳細については、「 [Unicode 標準](https://go.microsoft.com/fwlink/?linkid=37123)」を参照してください。  
  
 `index` 位置にある <xref:System.Char> オブジェクトが有効なサロゲートペアの最初の文字である場合、<xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29> メソッドは、サロゲートペアが数字を形成するかどうかを判断し、存在する場合は数値を返します。 たとえば、Aegean ナンバリングシステムは、コードポイント U + 10107 から U + 10133 で構成されます。 次の例では、<xref:System.Char.ConvertFromUtf32%2A> メソッドを使用して、各 Aegean 番号を表す文字列をインスタンス化します。 この例の出力が示すように、Aegean number の上位サロゲートが渡された場合、<xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29> メソッドは正しい数値を返します。 ただし、下位サロゲートを渡すと、下位サロゲートのみが分離され、-1 が返されます。  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#3)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#3)]  
  
   
  
## Examples  
 次のコード例は、さまざまな種類の文字について、各メソッドによって返される値を示しています。  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> が <paramref name="s" /> の有効なインデックスの範囲外です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUnicodeCategory">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Unicode 文字の Unicode カテゴリを取得します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (ch As Char) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(char ch);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : char -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">Unicode カテゴリを取得する対象の Unicode 文字。</param>
        <summary>指定した文字の Unicode カテゴリを取得します。</summary>
        <returns>指定した文字のカテゴリを示す <see cref="T:System.Globalization.UnicodeCategory" /> 値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Unicode 文字は、カテゴリに分類されます。 文字のカテゴリは、そのプロパティの1つです。 たとえば、文字には、大文字、小文字、10進数字、文字番号、コネクタの句読点、数学記号、通貨記号などがあります。 <xref:System.Globalization.UnicodeCategory> クラスは、Unicode 文字のカテゴリを返します。 Unicode 文字の詳細については、「 [Unicode 標準](https://go.microsoft.com/fwlink/?linkid=37123)」を参照してください。  
  
 <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A> メソッドは、`ch` が1つの言語に対応し、そのカテゴリを返すことを前提としています。 これは、サロゲートペアの場合、サロゲートが属するカテゴリではなく <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType> を返すことを意味します。 たとえば、Ugaritic のアルファベットは、コードポイント U + 10380 を U + 1039F に占有します。 次の例では、<xref:System.Char.ConvertFromUtf32%2A> メソッドを使用して、Ugaritic アルファベットの最初の文字である UGARITIC 文字 ALPA (U + 10380) を表す文字列をインスタンス化します。 この例の出力が示すように、<xref:System.Char.IsNumber%28System.Char%29> メソッドは、この文字の上位サロゲートまたは下位サロゲートのいずれかが渡された場合に `false` を返します。  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#1)]  
  
 注意 <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType>は特定の文字がパラメーターとして渡されると、<xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>メソッドと常に同じ<xref:System.Globalization.UnicodeCategory>値を返すとは限りません。 <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType>メソッドは現在のバージョンの Unicode 標準を反映するように設計されています。 これに対し、<xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>メソッドは通常、現在のバージョンの Unicode 標準を反映しますが、以前のバージョンの標準に基づく文字のカテゴリまたは、旧バージョンとの互換性を維持するために現在の標準とは異なるカテゴリを返す場合があります。  
  
   
  
## Examples  
 次のコード例は、さまざまな種類の文字について、各メソッドによって返される値を示しています。  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (int codePoint);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(int32 codePoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (codePoint As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(int codePoint);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : int -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory codePoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codePoint" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="codePoint">Unicode 文字の 32 ビットのコード ポイント値を表す数値。</param>
        <summary>指定した文字の Unicode カテゴリを取得します。</summary>
        <returns>指定した文字のカテゴリを示す <see cref="T:System.Globalization.UnicodeCategory" /> 値。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (s As String, index As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : string * int -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">Unicode カテゴリを取得する対象の Unicode 文字を含む <see cref="T:System.String" />。</param>
        <param name="index">Unicode カテゴリを取得する対象の Unicode 文字のインデックス。</param>
        <summary>指定した文字列の指定したインデックス位置にある文字の Unicode カテゴリを取得します。</summary>
        <returns>指定した文字列の指定したインデックス位置にある文字のカテゴリを示す <see cref="T:System.Globalization.UnicodeCategory" /> 値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Unicode 文字は、カテゴリに分類されます。 文字のカテゴリは、そのプロパティの1つです。 たとえば、文字には、大文字、小文字、10進数字、文字番号、コネクタの句読点、数学記号、通貨記号などがあります。 <xref:System.Globalization.UnicodeCategory> クラスは、Unicode 文字のカテゴリを返します。 Unicode 文字の詳細については、「 [Unicode 標準](https://go.microsoft.com/fwlink/?linkid=37123)」を参照してください。  
  
 `index` 位置にある <xref:System.Char> オブジェクトが有効なサロゲートペアの最初の文字である場合、<xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29> メソッドは <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>を返す代わりに、サロゲートペアの Unicode カテゴリを返します。 たとえば、Ugaritic のアルファベットは、コードポイント U + 10380 を U + 1039F に占有します。 次の例では、<xref:System.Char.ConvertFromUtf32%2A> メソッドを使用して、Ugaritic アルファベットの最初の文字である UGARITIC 文字 ALPA (U + 10380) を表す文字列をインスタンス化します。 この例の出力が示すように、<xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29> メソッドは、サロゲートペアを考慮していることを示す、この文字の上位サロゲートが渡された場合に <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> を返します。 ただし、下位サロゲートが渡された場合は、下位サロゲートのみが分離され、<xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>が返されます。  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#2)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#2)]  
  
 <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> メソッドは、特定の文字をパラメーターとして渡したときに、必ずしも <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> メソッドと同じ <xref:System.Globalization.UnicodeCategory> 値を返さないことに注意してください。 <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType>メソッドは現在のバージョンの Unicode 標準を反映するように設計されています。 これに対し、<xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>メソッドは通常、現在のバージョンの Unicode 標準を反映しますが、以前のバージョンの標準に基づく文字のカテゴリまたは、旧バージョンとの互換性を維持するために現在の標準とは異なるカテゴリを返す場合があります。  
  
   
  
## Examples  
 次のコード例は、さまざまな種類の文字について、各メソッドによって返される値を示しています。  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> が <paramref name="s" /> の有効なインデックスの範囲外です。</exception>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
  </Members>
</Type>
