<Type Name="DateTimeFormatInfo" FullName="System.Globalization.DateTimeFormatInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8312c3ecc06067ba332441caad3f6ca9f1b4cc97" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75133831" /></Metadata><TypeSignature Language="C#" Value="public sealed class DateTimeFormatInfo : ICloneable, IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTimeFormatInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.DateTimeFormatInfo" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DateTimeFormatInfo&#xA;Implements ICloneable, IFormatProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class DateTimeFormatInfo sealed : ICloneable, IFormatProvider" />
  <TypeSignature Language="F#" Value="type DateTimeFormatInfo = class&#xA;    interface ICloneable&#xA;    interface IFormatProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormatProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>日付と時刻の値の書式に関するカルチャ固有の情報を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo> クラスのプロパティには、次のような日付と時刻の値を書式設定または解析するためのカルチャ固有の情報が含まれています。  
  
-   日付値の書式設定に使用するパターン。  
  
-   時刻値の書式設定に使用するパターン。  
  
-   曜日の名前です。  
  
-   年の月の名前。  
  
-   午前 および午後 時刻値で使用される指定子。  
  
-   日付を表す暦。  
  
 このセクションの内容:  
  
-   [DateTimeFormatInfo オブジェクトのインスタンス化](#instantiating)  
  
    -   [インバリアントカルチャの場合](#instantiating_Invariant)  
  
    -   [特定のカルチャの場合](#instantiating_Specific)  
  
    -   [ニュートラルカルチャの場合](#instantiating_neutral)  
  
    -   [現在のカルチャの場合](#instantiating_Current)  
  
-   [DateTimeFormatInfo と動的データ](#dynamic)  
  
-   [日付と時刻の書式設定](#Formatting_dates_times)  
  
-   [書式指定文字列と DateTimeFormatInfo プロパティ](#format-strings-and-datetimeformatinfo-properties)  
  
-   [DateTimeFormatInfo プロパティの変更](#Modifying)  
  
<a name="instantiating"></a>   
## <a name="instantiating-a-datetimeformatinfo-object"></a>DateTimeFormatInfo オブジェクトのインスタンス化  
 <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは、インバリアントカルチャ、特定のカルチャ、ニュートラルカルチャ、または現在のカルチャの書式指定規則を表すことができます。 このセクションでは、<xref:System.Globalization.DateTimeFormatInfo> オブジェクトの各型をインスタンス化する方法について説明します。  
  
<a name="instantiating_Invariant"></a>   
### <a name="instantiating-a-datetimeformatinfo-object-for-the-invariant-culture"></a>インバリアントカルチャの DateTimeFormatInfo オブジェクトのインスタンス化  
 インバリアントカルチャは、カルチャを認識しないカルチャを表します。 英語の言語に基づいていますが、特定の英語圏の国/地域ではありません。 特定のカルチャのデータは動的にすることができ、新しいカルチャ規則やユーザー設定を反映するように変更できますが、インバリアントカルチャのデータは変更されません。 インバリアントカルチャの書式指定規則を表す <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは、次の方法でインスタンス化できます。  
  
-   <xref:System.Globalization.DateTimeFormatInfo.InvariantInfo%2A> プロパティの値を取得する。 返された <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは読み取り専用です。  
  
-   パラメーターなしの <xref:System.Globalization.DateTimeFormatInfo.%23ctor%2A> コンストラクターを呼び出す。 返された <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは読み取り/書き込み可能です。  
  
-   <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> プロパティによって返される <xref:System.Globalization.CultureInfo> オブジェクトから <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> プロパティの値を取得する。 返された <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは読み取り専用です。  
  
 次の例では、これらの各メソッドを使用して、インバリアントカルチャを表す <xref:System.Globalization.DateTimeFormatInfo> オブジェクトをインスタンス化します。 その後、オブジェクトが読み取り専用かどうかを示します。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/create1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/create1.vb#1)]  
  
<a name="instantiating_Specific"></a>   
### <a name="instantiating-a-datetimeformatinfo-object-for-a-specific-culture"></a>特定のカルチャの DateTimeFormatInfo オブジェクトのインスタンス化  
 特定のカルチャは、特定の国/地域で話される言語を表します。 たとえば、en-us は、米国で話されている英語を表す特定のカルチャであり、en-us はカナダで話されている英語の言語を表す特定のカルチャです。 特定のカルチャの書式指定規則を表す <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは、次の方法でインスタンス化できます。  
  
-   <xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29?displayProperty=nameWithType> メソッドを呼び出し、返された <xref:System.Globalization.CultureInfo> オブジェクトの <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> プロパティの値を取得します。 返された <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは読み取り専用です。  
  
-   静的 <xref:System.Globalization.DateTimeFormatInfo.GetInstance%2A> メソッドを、<xref:System.Globalization.DateTimeFormatInfo> オブジェクトを取得するカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクトを渡す。 返された <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは読み取り/書き込み可能です。  
  
-   静的 <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> メソッドを呼び出し、返された <xref:System.Globalization.CultureInfo> オブジェクトの <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> プロパティの値を取得する。 返された <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは読み取り/書き込み可能です。  
  
-   <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType> クラスコンストラクターを呼び出し、返された <xref:System.Globalization.CultureInfo> オブジェクトの <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> プロパティの値を取得する。 返された <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは読み取り/書き込み可能です。  
  
 次の例では、これらの各方法を使用して <xref:System.Globalization.DateTimeFormatInfo> オブジェクトをインスタンス化し、結果のオブジェクトが読み取り専用かどうかを示します。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/create1.cs#3)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/create1.vb#3)]  
  
<a name="instantiating_neutral"></a>   
### <a name="instantiating-a-datetimeformatinfo-object-for-a-neutral-culture"></a>ニュートラルカルチャの DateTimeFormatInfo オブジェクトのインスタンス化  
 ニュートラルカルチャは、国/地域に依存しないカルチャまたは言語を表します。通常は、1つまたは複数の特定のカルチャの親になります。 たとえば、Fr は、フランス語と fr-fr カルチャの親のニュートラルカルチャです。 特定のカルチャの書式指定規則を表す <xref:System.Globalization.DateTimeFormatInfo> オブジェクトを作成するのと同じ方法で、ニュートラルカルチャの書式指定規則を表す <xref:System.Globalization.DateTimeFormatInfo> オブジェクトをインスタンス化できます。 また、特定のカルチャの <xref:System.Globalization.CultureInfo.Parent%2A?displayProperty=nameWithType> プロパティからニュートラルカルチャを取得し、その <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> プロパティによって返された <xref:System.Globalization.DateTimeFormatInfo> オブジェクトを取得することによって、ニュートラルカルチャの <xref:System.Globalization.DateTimeFormatInfo> オブジェクトを取得できます。 親カルチャがインバリアントカルチャを表している場合を除き、返された <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは読み取り/書き込み可能です。 次の例は、ニュートラルカルチャを表す <xref:System.Globalization.DateTimeFormatInfo> オブジェクトをインスタンス化するこれらの方法を示しています。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/create1.cs#2)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/create1.vb#2)]  
  
> [!NOTE]
>  .NET Framework バージョン 1.0 ~ [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]では、ニュートラルカルチャの書式指定規則を反映する <xref:System.Globalization.DateTimeFormatInfo> オブジェクトを取得しようとすると、<xref:System.NotSupportedException> 例外がスローされます。  
  
 ただし、ニュートラルカルチャには、特定の国/地域に依存しないため、カルチャ固有の書式情報がありません。 .NET Framework は、<xref:System.Globalization.DateTimeFormatInfo> オブジェクトにジェネリック値を設定するのではなく、ニュートラルカルチャの子である特定のカルチャの書式指定規則を反映する <xref:System.Globalization.DateTimeFormatInfo> オブジェクトを返します。 たとえば、ニュートラルカルチャの <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは en-us カルチャの書式指定規則を反映し、fr カルチャの <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは fr-fr カルチャの書式指定規則を反映します。  
  
 次のようなコードを使用して、ニュートラルカルチャが表す特定のカルチャの書式指定規則を決定できます。 この例では、リフレクションを使用して、ニュートラルカルチャの <xref:System.Globalization.DateTimeFormatInfo> プロパティを特定の子カルチャのプロパティと比較します。 2つの暦が同じ暦の種類であり、グレゴリオ暦の場合、<xref:System.Globalization.GregorianCalendar.CalendarType%2A?displayProperty=nameWithType> のプロパティの値が同一である場合は、2つの暦が等しいと見なされます。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/instantiate6c.cs#6)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/instantiate6c.vb#6)]  
  
<a name="instantiating_Current"></a>   
### <a name="instantiating-a-datetimeformatinfo-object-for-the-current-culture"></a>現在のカルチャの DateTimeFormatInfo オブジェクトのインスタンス化  
 現在のカルチャの書式指定規則を表す <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは、次の方法でインスタンス化できます。  
  
-   <xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A> プロパティの値を取得する。 返された <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは読み取り専用です。  
  
-   <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> プロパティによって返される <xref:System.Globalization.CultureInfo> オブジェクトから <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> プロパティの値を取得する。 返された <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは読み取り専用です。  
  
-   現在のカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクトを使用して <xref:System.Globalization.NumberFormatInfo.GetInstance%2A> メソッドを呼び出す。 返された <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは読み取り専用です。  
  
 次の例では、これらの各メソッドを使用して、現在のカルチャの書式指定規則を表す <xref:System.Globalization.DateTimeFormatInfo> オブジェクトをインスタンス化します。 その後、オブジェクトが読み取り専用かどうかを示します。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/create2.cs#4)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/create2.vb#4)]  
  
 次のいずれかの方法で、現在のスレッドカルチャの規則を表す書き込み可能 <xref:System.Globalization.DateTimeFormatInfo> オブジェクトを作成できます。  
  
-   前の3つの方法のいずれかで <xref:System.Globalization.DateTimeFormatInfo> オブジェクトを取得し、返された <xref:System.Globalization.DateTimeFormatInfo> オブジェクトで <xref:System.Globalization.DateTimeFormatInfo.Clone%2A> メソッドを呼び出します。 これにより、元の <xref:System.Globalization.DateTimeFormatInfo> オブジェクトのコピーが作成されます。ただし、<xref:System.Globalization.DateTimeFormatInfo.IsReadOnly%2A> プロパティは `false`。  
  
-   <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> メソッドを呼び出して、現在のカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクトを作成し、その <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> プロパティを使用して <xref:System.Globalization.DateTimeFormatInfo> オブジェクトを取得する。  
  
 次の例は、読み取り/書き込み <xref:System.Globalization.DateTimeFormatInfo> オブジェクトをインスタンス化し、その <xref:System.Globalization.DateTimeFormatInfo.IsReadOnly%2A> プロパティの値を表示する方法を示しています。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/instantiate2.cs#7)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/instantiate2.vb#7)]  
  
 Windows では、ユーザーはコントロールパネルの **[地域と言語]** アプリケーションを使用して、書式設定および解析操作で使用される <xref:System.Globalization.DateTimeFormatInfo> のプロパティ値の一部をオーバーライドできます。 たとえば、カルチャが英語 (米国) のユーザーは、既定の12時間制 (h:mm: ss tt の形式) ではなく、24時間制 (HH: mm: ss 形式) を使用して長い時刻値を表示できます。 前に説明した方法で取得した <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは、これらのユーザーオーバーライドを反映しています。 これが望ましくない場合は、<xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> コンストラクターを呼び出し、`useUserOverride` の引数に `false` の値を指定することによって、ユーザーのオーバーライドを反映せずに (読み取り専用ではなく読み取り/書き込みも) <xref:System.Globalization.NumberFormatInfo> オブジェクトを作成できます。 次の例では、現在のカルチャが英語 (米国) で、長い時間パターンが既定の h:mm: ss tt から HH: mm: ss に変更されているシステムについて説明します。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/instantiate3.cs#8)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/instantiate3.vb#8)]  
  
<a name="dynamic"></a>   
## <a name="datetimeformatinfo-and-dynamic-data"></a>DateTimeFormatInfo と動的データ  
 <xref:System.Globalization.DateTimeFormatInfo> クラスによって提供される日付と時刻の値を書式設定するためのカルチャ固有のデータは、<xref:System.Globalization.CultureInfo> クラスによって提供されるカルチャデータと同様に動的になります。 特定の <xref:System.Globalization.CultureInfo> オブジェクトに関連付けられている <xref:System.Globalization.DateTimeFormatInfo> オブジェクトの値の安定性については、想定しないでください。 インバリアントカルチャとそれに関連付けられた <xref:System.Globalization.DateTimeFormatInfo> オブジェクトによって提供されるデータのみが安定しています。 アプリケーションセッション間またはアプリケーションの実行中であっても、他のデータは変更される可能性があります。 変更には主に次の4つのソースがあります。  
  
-   システムの更新プログラム。 優先する暦や標準の日付と時刻の形式などのカルチャ設定は、時間の経過と共に変化します。 この場合、Windows Update には、特定のカルチャの <xref:System.Globalization.DateTimeFormatInfo> プロパティ値への変更が含まれます。  
  
-   置換カルチャ。 <xref:System.Globalization.CultureAndRegionInfoBuilder> クラスを使用して、既存のカルチャのデータを置き換えることができます。  
  
-   プロパティ値へのカスケード変更。 カルチャに関連する多数のプロパティが実行時に変更され、<xref:System.Globalization.DateTimeFormatInfo> データが変更される可能性があります。 たとえば、現在のカルチャは、プログラムによって、またはユーザーの操作によって変更できます。 この場合、<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A> プロパティによって返される <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは、現在のカルチャに関連付けられているオブジェクトに変更されます。 同様に、カルチャの暦も変更される可能性があるため、多数の <xref:System.Globalization.DateTimeFormatInfo> プロパティ値が変更される可能性があります。  
  
-   ユーザー設定。 アプリケーションのユーザーは、コントロールパネルの [地域と言語のオプション] を使用して、現在のシステムのカルチャに関連付けられている値の一部を上書きすることができます。 たとえば、ユーザーは日付を別の形式で表示することができます。 <xref:System.Globalization.CultureInfo.UseUserOverride%2A?displayProperty=nameWithType> プロパティが `true`に設定されている場合、<xref:System.Globalization.DateTimeFormatInfo> オブジェクトのプロパティもユーザー設定から取得されます。 ユーザー設定が <xref:System.Globalization.CultureInfo> オブジェクトに関連付けられているカルチャと互換性がない場合 (たとえば、選択したカレンダーが <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> プロパティで示されるカレンダーの1つではない場合)、メソッドの結果とプロパティの値は定義されません。  
  
 一貫性のないデータの可能性を最小限に抑えるために、オブジェクトの作成時に、<xref:System.Globalization.DateTimeFormatInfo> オブジェクトのユーザーがオーバーライドできるすべてのプロパティが初期化されます。 オブジェクトの作成もユーザーの上書きプロセスもアトミックであり、オブジェクトの作成中に関連する値が変更される可能性があるため、不整合が発生する可能性があります。 ただし、この状況は非常にまれです。  
  
 システムカルチャと同じカルチャを表す <xref:System.Globalization.DateTimeFormatInfo> オブジェクトにユーザーのオーバーライドを反映するかどうかを制御できます。 次の表に、<xref:System.Globalization.DateTimeFormatInfo> オブジェクトを取得する方法と、結果のオブジェクトにユーザーのオーバーライドが反映されるかどうかを示します。  
  
|CultureInfo オブジェクトと DateTimeFormatInfo オブジェクトのソース|ユーザーのオーバーライドを反映します|  
|---------------------------------------------------------|-----------------------------|  
|`CultureInfo.CurrentCulture.DateTimeFormat` プロパティ|はい|  
|<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> プロパティ|はい|  
|<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> メソッド|はい|  
|<xref:System.Globalization.CultureInfo.GetCultureInfo%2A?displayProperty=nameWithType> メソッド|Ｘ|  
|<xref:System.Globalization.CultureInfo.%23ctor%28System.String%29?displayProperty=nameWithType> コンストラクター|はい|  
|<xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> コンストラクター|`useUserOverride` パラメーターの値によって異なります|  
  
 それ以外の理由がない限り、クライアントアプリケーションで <xref:System.Globalization.DateTimeFormatInfo> オブジェクトを使用してユーザー入力の書式設定と解析を行ったり、データを表示したりする場合は、ユーザーの上書きを考慮する必要があります。 サーバーアプリケーションや無人アプリケーションの場合は、お勧めしません。 ただし、<xref:System.Globalization.DateTimeFormatInfo> オブジェクトを明示的または暗黙的に使用して日付と時刻のデータを文字列形式で保持する場合は、インバリアントカルチャの書式指定規則を反映する <xref:System.Globalization.DateTimeFormatInfo> オブジェクトを使用するか、カルチャに関係なく使用するカスタム日時書式指定文字列を指定する必要があります。  
  
<a name="Formatting_dates_times"></a>   
## <a name="formatting-dates-and-times"></a>日付と時刻の書式設定  
 <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは、すべての日付と時刻の書式設定操作で暗黙的または明示的に使用されます。 これには、次のメソッドの呼び出しが含まれます。  
  
-   <xref:System.DateTime.ToString?displayProperty=nameWithType> や <xref:System.DateTimeOffset.ToString%28System.String%29?displayProperty=nameWithType>など、すべての日付と時刻の書式設定メソッド。  
  
-   <xref:System.String.Format%2A?displayProperty=nameWithType>の主要な複合書式指定メソッド。  
  
-   <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> や <xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>などの他の複合書式指定メソッド。  
  
 すべての日付と時刻の書式設定操作によって、<xref:System.IFormatProvider> の実装が使用されます。 <xref:System.IFormatProvider> インターフェイスには、<xref:System.IFormatProvider.GetFormat%28System.Type%29?displayProperty=nameWithType>の1つのメソッドが含まれています。 このコールバックメソッドには、書式設定情報を提供するために必要な型を表す <xref:System.Type> オブジェクトが渡されます。 メソッドは、その型のインスタンスを返すか、型のインスタンスを提供できない場合は `null` を返します。 .NET Framework には、日付と時刻の書式を設定するための2つの <xref:System.IFormatProvider> 実装が含まれています。  
  
-   特定のカルチャ (または特定の国/地域の特定の言語) を表す <xref:System.Globalization.CultureInfo> クラス。 日付と時刻の書式設定操作では、<xref:System.Globalization.CultureInfo.GetFormat%2A?displayProperty=nameWithType> メソッドは <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> プロパティに関連付けられた <xref:System.Globalization.DateTimeFormatInfo> オブジェクトを返します。  
  
-   関連付けられたカルチャの書式指定規則に関する情報を提供する <xref:System.Globalization.DateTimeFormatInfo> クラス。 <xref:System.Globalization.DateTimeFormatInfo.GetFormat%2A?displayProperty=nameWithType> メソッドは、それ自体のインスタンスを返します。  
  
 <xref:System.IFormatProvider> 実装が書式指定メソッドに明示的に指定されていない場合は、現在のスレッドカルチャを表す <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> プロパティによって返される <xref:System.Globalization.CultureInfo> オブジェクトが使用されます。  
  
 次の例は、書式設定操作における <xref:System.IFormatProvider> インターフェイスと <xref:System.Globalization.DateTimeFormatInfo> クラスの関係を示しています。 これは、書式設定操作によって要求されたオブジェクトの型を表示する <xref:System.IFormatProvider.GetFormat%2A> メソッドを持つカスタム <xref:System.IFormatProvider> 実装を定義します。 <xref:System.Globalization.DateTimeFormatInfo> オブジェクトを要求している場合、メソッドは、現在のスレッドカルチャの <xref:System.Globalization.DateTimeFormatInfo> オブジェクトを提供します。 この例の出力に示すように、<xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> メソッドは、書式設定情報を提供する <xref:System.Globalization.DateTimeFormatInfo> オブジェクトを要求します。一方、<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> メソッドは <xref:System.Globalization.NumberFormatInfo> および <xref:System.Globalization.DateTimeFormatInfo> のオブジェクトだけでなく <xref:System.ICustomFormatter> の実装も要求します。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/formatprovider1.cs#9)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/formatprovider1.vb#9)]  
  
## <a name="format-strings-and-datetimeformatinfo-properties"></a>書式指定文字列と DateTimeFormatInfo プロパティ  
 <xref:System.Globalization.DateTimeFormatInfo> オブジェクトには、日付と時刻の値の書式設定操作で使用される3種類のプロパティが含まれています。  
  
-   カレンダー関連のプロパティ。 <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A>、<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>、<xref:System.Globalization.DateTimeFormatInfo.DayNames%2A>、<xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A>などのプロパティは、カルチャによって使用される暦に関連付けられます。この暦は、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティによって定義されます。 これらのプロパティは、長い日付と時刻の形式に使用されます。  
  
-   標準定義の結果文字列を生成するプロパティ。 <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A>、<xref:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern%2A>、および <xref:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern%2A> の各プロパティには、国際標準によって定義された結果文字列を生成するカスタム書式指定文字列が含まれています。 これらのプロパティは読み取り専用で、変更することはできません。  
  
-   カルチャに依存した結果文字列を定義するプロパティ。 <xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A> や <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>などの一部のプロパティには、結果文字列の形式を指定する[カスタム書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)が含まれています。 <xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A>、<xref:System.Globalization.DateTimeFormatInfo.DateSeparator%2A>、<xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A>、<xref:System.Globalization.DateTimeFormatInfo.TimeSeparator%2A>などの他の言語では、カルチャに依存するシンボルや、結果の文字列に含めることができる部分文字列を定義します。  
  
 "D"、"D"、"f"、"F" などの[標準の日時書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)は、特定の <xref:System.Globalization.DateTimeFormatInfo> 書式パターンプロパティに対応するエイリアスです。 [カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)のほとんどは、書式設定操作によって結果ストリームに挿入される文字列または部分文字列に関連付けられています。 次の表に、標準およびカスタムの日時書式指定子とそれに関連付けられた <xref:System.Globalization.DateTimeFormatInfo> プロパティを示します。 これらの書式指定子の使用方法の詳細については、「[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)」および「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照してください。 各標準書式指定文字列は、カスタム日時書式指定文字列を値とする <xref:System.Globalization.DateTimeFormatInfo> プロパティに対応していることに注意してください。 このカスタム書式指定文字列の個々の指定子は、他の <xref:System.Globalization.DateTimeFormatInfo> プロパティに対応します。 テーブルには、標準書式指定文字列がエイリアスとして使用されている <xref:System.Globalization.DateTimeFormatInfo> プロパティのみが一覧表示されます。これらのエイリアスプロパティに割り当てられたカスタム書式指定文字列によってアクセスされる可能性のあるプロパティは表示されません。 また、テーブルには、<xref:System.Globalization.DateTimeFormatInfo> プロパティに対応するカスタム書式指定子のみが表示されます。  
  
|書式指定子|関連付けられたプロパティ|  
|----------------------|---------------------------|  
|"d" (短い形式の日付、標準書式指定文字列)|<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>、結果文字列の全体的な書式を定義します。|  
|"D" (長い形式の日付、標準書式指定文字列)|<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>、結果文字列の全体的な書式を定義します。|  
|"f" (完全な日付と短い時刻、標準書式指定文字列)|<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>、結果文字列の日付要素の書式を定義します。<br /><br /> <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A>、結果文字列の時刻部分の形式を定義します。|  
|"F" (完全な日付/長い時刻、標準書式指定文字列)|<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>、結果文字列の日付要素の書式を定義します。<br /><br /> <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>、結果文字列の時刻部分の形式を定義します。|  
|"g" (一般的な日付/短い時刻、標準書式指定文字列)|<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>、結果文字列の日付要素の書式を定義します。<br /><br /> <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A>、結果文字列の時刻部分の形式を定義します。|  
|"G" (一般日付/長い時刻、標準書式指定文字列)|<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>、結果文字列の日付要素の書式を定義します。<br /><br /> <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>、結果文字列の時刻部分の形式を定義します。|  
|"M"、"m" (月/日、標準書式指定文字列)|<xref:System.Globalization.DateTimeFormatInfo.MonthDayPattern%2A>、結果文字列の全体的な書式を定義します。|  
|"O"、"o" (ラウンドトリップの日付/時刻、標準書式指定文字列)|ありません。|  
|"R"、"r" (RFC1123; 標準書式指定文字列)|<xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A>、RFC 1123 標準に準拠する結果文字列を定義します。 プロパティは読み取り専用です。|  
|"s" (並べ替え可能な日付/時刻、標準書式指定文字列)|<xref:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern%2A>、ISO 8601 標準に準拠する結果文字列を定義します。 プロパティは読み取り専用です。|  
|"t" (短い形式の時刻、標準書式指定文字列)|<xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A>、結果文字列の全体的な書式を定義します。|  
|"T" (長い形式の文字列)|<xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>、結果文字列の全体的な書式を定義します。|  
|"u" (汎用の並べ替え可能な日付/時刻、標準書式指定文字列)|<xref:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern%2A>、ISO 8601 標準に準拠した世界協定時刻の結果文字列を定義します。 プロパティは読み取り専用です。|  
|"U" (汎用完全な日付/時刻、標準書式指定文字列)|<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>、結果文字列の全体的な書式を定義します。|  
|"Y"、"y" (年の月、標準書式指定文字列)|<xref:System.Globalization.DateTimeFormatInfo.YearMonthPattern%2A>、結果文字列の全体的な書式を定義します。|  
|"ddd" (カスタム書式指定子)|<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A>。結果の文字列に曜日の省略名を含めます。|  
|"g"、"gg" (カスタム書式指定子)|<xref:System.Globalization.DateTimeFormatInfo.GetEraName%2A> メソッドを呼び出して、結果文字列に時代 (年号) 名を挿入します。|  
|"MMM" (カスタム書式指定子)|<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>、月の省略名を結果の文字列に含めます。|  
|"MMMM" (カスタム書式指定子)|<xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A> または <xref:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames%2A>、月の完全な名前を結果の文字列に含めます。|  
|"t" (カスタム書式指定子)|<xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A> または <xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A>では、AM/PM 指定子の最初の文字を結果の文字列に含めることができます。|  
|"tt" (カスタム書式指定子)|<xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A> または <xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A>で、完全な AM/PM 指定子を結果の文字列に含めます。|  
|":" (カスタム書式指定子)|<xref:System.Globalization.DateTimeFormatInfo.TimeSeparator%2A>。結果の文字列に時刻の区切り記号を含めます。|  
|"/" (カスタム書式指定子)|<xref:System.Globalization.DateTimeFormatInfo.DateSeparator%2A>、結果文字列に日付の区切り記号を含めます。|  
  
<a name="Modifying"></a>   
## <a name="modifying-datetimeformatinfo-properties"></a>DateTimeFormatInfo プロパティの変更  
 書き込み可能な <xref:System.Globalization.DateTimeFormatInfo> オブジェクトの関連プロパティを変更することで、日付と時刻の書式指定文字列によって生成される結果文字列を変更できます。 <xref:System.Globalization.DateTimeFormatInfo> オブジェクトが書き込み可能かどうかを判断するには、<xref:System.Globalization.DateTimeFormatInfo.IsReadOnly%2A> プロパティを使用します。 この方法で <xref:System.Globalization.DateTimeFormatInfo> オブジェクトをカスタマイズするには、次のようにします。  
  
1.  書式指定規則を変更する <xref:System.Globalization.DateTimeFormatInfo> オブジェクトの読み取り/書き込みコピーを作成します。 (「 [DateTimeFormatInfo オブジェクトのインスタンス](#instantiating)化」セクションを参照してください)。  
  
2.  目的の結果文字列を生成するために使用されるプロパティを変更します。 (書式指定メソッドが <xref:System.Globalization.DateTimeFormatInfo> のプロパティを使用して結果文字列を定義する方法の詳細については、前のセクション「[書式指定文字列」および「DateTimeFormatInfo プロパティ](#format-strings-and-datetimeformatinfo-properties)」を参照してください)。  
  
3.  書式設定メソッドの呼び出しで <xref:System.IFormatProvider> 引数として作成したカスタム <xref:System.Globalization.DateTimeFormatInfo> オブジェクトを使用します。  
  
 結果文字列の形式を変更するには、次の2つの方法があります。  
  
-   <xref:System.Globalization.CultureAndRegionInfoBuilder> クラスを使用すると、カスタムカルチャ (一意の名前を持ち、既存のカルチャを補足するカルチャ) または置換カルチャ (特定のカルチャの代わりに使用されるカルチャ) のいずれかを定義できます。 このカルチャは、.NET Framework でサポートされている <xref:System.Globalization.CultureInfo> オブジェクトと同様に、プログラムによって保存およびアクセスできます。  
  
-   結果の文字列がカルチャに依存せず、定義済みの書式に従っていない場合は、カスタム日時書式指定文字列を使用できます。 たとえば、日付と時刻のデータを YYYYMMDDHHmmss 形式でシリアル化する場合、カスタム書式指定文字列を <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> メソッドに渡して結果の文字列を生成し、<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> メソッドを呼び出すことによって結果の文字列を <xref:System.DateTime> 値に変換できます。  
  
### <a name="changing-the-short-date-pattern"></a>短い日付パターンの変更  
 次の例では、"d" (短い日付) 標準書式指定文字列によって生成される結果文字列の書式を変更します。 En-us または English (米国) カルチャの関連する <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> プロパティを既定の "M/d/yyyy" から "yyyy"-"MM"-"dd" に変更し、"d" 標準書式指定文字列を使用して、<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> プロパティが変更される前と後の両方の日付を表示します。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/example1.cs#10)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/example1.vb#10)]  
  
### <a name="changing-the-date-separator-character"></a>日付の区切り文字の変更  
 次の例では、fr-fr カルチャの書式指定規則を表す <xref:System.Globalization.DateTimeFormatInfo> オブジェクトの日付区切り文字を変更します。 この例では、"g" 標準書式指定文字列を使用して、<xref:System.Globalization.DateTimeFormatInfo.DateSeparator%2A> プロパティが変更される前と後の両方の日付を表示します。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/example3.cs#12)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/example3.vb#12)]  
  
### <a name="changing-day-name-abbreviations-and-the-long-date-pattern"></a>曜日名の省略形と長い形式の日付パターンの変更  
 場合によっては、長い日付パターンを使用することもあります。このパターンでは、通常、日と月の完全な名前と、その月と年の日の番号が表示されます。 次の例では、en-us カルチャの長い日付パターンを短縮して、1文字または2桁の曜日名の省略形とその後に日番号、月の名前の省略形、および年を返します。 これを行うには、短い曜日名の省略形を <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A> 配列に割り当て、<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> プロパティに割り当てられているカスタム書式指定文字列を変更します。 これは、標準書式指定文字列 "D" および "f" によって返される結果の文字列に影響します。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/example2.cs#13)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/example2.vb#13)]  
  
 通常、<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> プロパティへの変更は、<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A> プロパティにも影響します。このプロパティは、"F" 標準書式指定文字列によって返される結果文字列を定義します。 元の完全な日付と時刻のパターンを保持するために、この例では、<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> プロパティが変更された後に、<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A> プロパティに割り当てられた元のカスタム書式指定文字列を再割り当てします。  
  
### <a name="changing-from-a-12-hour-clock-to-a-24-hour-clock"></a>12時間制から24時間制に変更する  
 .NET Framework の多くのカルチャでは、時刻は12時間制と AM/PM 指定子を使用して表されます。 次の例では、12時間制を使用する任意の時刻形式を24時間制の形式に置き換える `ReplaceWith24HourClock` メソッドを定義しています。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/example5.cs#14)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/example5.vb#14)]  
  
 この例では、正規表現を使用して書式指定文字列を変更します。 正規表現パターン `@"^(?<openAMPM>\s*t+\s*)? (?(openAMPM) h+(?<nonHours>[^ht]+)$ | \s*h+(?<nonHours>[^ht]+)\s*t+)` は、次のように定義されています。  
  
|パターン|説明|  
|-------------|-----------------|  
|`^`|文字列の先頭から照合を開始します。|  
|`(?<openAMPM>\s*t+\s*)?`|0個以上の空白文字の後に文字 "t" を1回または複数回続け、その後に0個以上の空白文字が続くパターンの0回または1回の繰り返しに一致します。 このキャプチャグループには `openAMPM`という名前が付けられます。|  
|`(?(openAMPM) h+(?<nonHours>[^ht]+)$`|`openAMPM` グループに一致するものがある場合は、文字 "h" を1回以上一致させ、その後に "h" も "t" でもない1つ以上の文字を入力します。 一致は文字列の末尾で終了します。 "H" の後にキャプチャされたすべての文字は、`nonHours`という名前のキャプチャグループに含まれます。|  
|`&#124; \s*h+(?<nonHours>[^ht]+)\s*t+)`|`openAMPM` グループに一致するものがない場合は、文字 "h" を1回以上一致させた後、"h" でも "t" でもなく、0個以上の空白文字が続く1つ以上の文字が続くパターンに一致します。 最後に、文字 "t" の1回以上の出現と一致します。 "H" の後、および空白と "t" の前にキャプチャされたすべての文字は、`nonHours`という名前のキャプチャグループに含まれています。|  
  
 `nonHours` キャプチャグループには、カスタム日時書式指定文字列の分と (場合によっては) 2 番目の部分が含まれ、任意の時刻の区切り記号を含みます。 置換パターンは、これらの要素に部分文字列 "HH" の先頭に `HH${nonHours}` ます。  
  
### <a name="displaying-and-changing-the-era-in-a-date"></a>日付における時代 (年号) の表示と変更  
 次の例では、en-us カルチャの書式指定規則を表すオブジェクトの <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> プロパティに "g" カスタム書式指定子を追加します。 この加算は、次の3つの標準書式指定文字列に影響します。  
  
-   "D" (長い形式の日付) 標準書式指定文字列。 <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> プロパティに直接マップされます。  
  
-   "F" (完全な日付と短い形式の時刻) 標準書式指定文字列。 <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> および <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A> プロパティによって生成される部分文字列を連結した結果文字列を生成します。  
  
-   "F" (完全な日付と長い形式の時刻) 標準書式指定文字列。 <xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A> プロパティに直接マップされます。 このプロパティ値は明示的に設定されていないため、<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> と <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> のプロパティを連結することによって動的に生成されます。  
  
 この例では、暦の時代 (年号) が1つであるカルチャの時代 (年号) の名前を変更する方法も示しています。 この場合、en-us カルチャでは、<xref:System.Globalization.GregorianCalendar> オブジェクトによって表されるグレゴリオ暦が使用されます。 <xref:System.Globalization.GregorianCalendar> クラスは、A.D. という名前の1つの時代 (年号) をサポートします。 (キリスト Domini)。 この例では、時代 (年号) の名前を紀元に変更します。 (一般的な Era) <xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A> プロパティに割り当てられた書式指定文字列の "g" カスタム書式指定子をリテラル文字列に置き換えます。 通常、時代 (年号) 名は、.NET Framework または Windows オペレーティングシステムによって提供されるカルチャテーブルのプライベートデータから <xref:System.Globalization.DateTimeFormatInfo.GetEraName%2A> メソッドによって返されるため、リテラル文字列を使用する必要があります。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/example4.cs#11)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/example4.vb#11)]  
  
## <a name="parsing-date-and-time-strings"></a>日付と時刻文字列の解析  
 解析では、日付と時刻の文字列形式を <xref:System.DateTime> または <xref:System.DateTimeOffset> 値に変換する必要があります。 これらの型にはどちらも、`Parse`、`TryParse`、`ParseExact`、および `TryParseExact` の各メソッドがあり、解析操作をサポートします。 `Parse` メソッドと `TryParse` メソッドは、さまざまな形式を持つことができる文字列を変換します。一方、`ParseExact` と `TryParseExact` では、文字列の形式が定義されている必要があります。 解析操作が失敗した場合、`Parse` と `ParseExact` は例外をスローしますが、`TryParse` と `TryParseExact` は `false`を返します。  
  
 解析メソッドは、<xref:System.Globalization.DateTimeStyles> 列挙値を暗黙的または明示的に使用して、解析する文字列内に存在できるスタイル要素 (先頭、末尾、または内部の空白) を決定し、解析された文字列または不足している要素を解釈する方法を決定します。 `Parse` または `TryParse` メソッドを呼び出すときに <xref:System.Globalization.DateTimeStyles> 値を指定しなかった場合、既定値は <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType>になります。これは、<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite?displayProperty=nameWithType>、<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite?displayProperty=nameWithType>、および <xref:System.Globalization.DateTimeStyles.AllowInnerWhite?displayProperty=nameWithType> の各フラグを含む複合スタイルです。 `ParseExact` メソッドと `TryParseExact` メソッドの場合、既定値は <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>です。入力文字列は、特定のカスタム日時書式指定文字列と正確に対応している必要があります。  
  
 また、解析メソッドは、解析対象の文字列で発生する可能性のある特定のシンボルとパターンを定義する <xref:System.Globalization.DateTimeFormatInfo> オブジェクトを暗黙的または明示的に使用します。 <xref:System.Globalization.DateTimeFormatInfo> オブジェクトを指定しない場合は、現在のスレッドカルチャの <xref:System.Globalization.DateTimeFormatInfo> オブジェクトが既定で使用されます。 日付と時刻文字列の解析の詳細については、<xref:System.DateTime.Parse%2A?displayProperty=nameWithType>、<xref:System.DateTime.TryParse%2A?displayProperty=nameWithType>、<xref:System.DateTimeOffset.ParseExact%2A?displayProperty=nameWithType>、<xref:System.DateTimeOffset.TryParseExact%2A?displayProperty=nameWithType>などの個々の解析メソッドを参照してください。  
  
 次の例では、カルチャに依存した日付と時刻文字列の解析の性質を示します。 このメソッドは、en-us、en-us、fr-fr、および fi FI の各カルチャの規則を使用して、2つの日付文字列を解析しようとします。 En-us カルチャで8/18/2014 として解釈される日付は、18が月の数値として解釈されるため、他の3つのカルチャで <xref:System.FormatException> 例外をスローします。 1/2/2015 は en-us カルチャの最初の月の2日として解析されますが、残りのカルチャの2番目の月の最初の日として解析されます。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/parsing1.cs#15)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/parsing1.vb#15)]  
  
 通常、日付と時刻の文字列は次の2つの理由で解析されます。  
  
-   ユーザー入力を日付と時刻の値に変換する。  
  
-   日付と時刻の値をラウンドトリップさせるにはつまり、以前に文字列としてシリアル化された日付と時刻の値を逆シリアル化します。  
  
 以下のセクションでは、これら2つの操作について詳しく説明します。  
  
### <a name="parsing-user-strings"></a>ユーザー文字列の解析  
 ユーザーによって入力された日付と時刻の文字列を解析する場合は、ユーザーが行ったカスタマイズも含め、ユーザーのカルチャ設定を反映した <xref:System.Globalization.DateTimeFormatInfo> オブジェクトを常にインスタンス化する必要があります。 それ以外の場合、日付と時刻のオブジェクトの値が正しくない可能性があります。 ユーザーのカルチャのカスタマイズを反映する <xref:System.Globalization.DateTimeFormatInfo> オブジェクトをインスタンス化する方法の詳細については、「 [DateTimeFormatInfo and dynamic data](#dynamic) 」セクションを参照してください。  
  
 次の例は、ユーザーのカルチャ設定を反映する解析操作と、それ以外の設定を比較した場合の違いを示しています。 この場合、既定のシステムカルチャは en-us ですが、ユーザーは コントロールパネル、**地域と言語** を使用して、短い日付パターンを既定値の "M/d/yyyy" から "YY/MM/dd" に変更しました。 ユーザー設定を反映する文字列を入力したときに、ユーザー設定 (上書き) も反映する <xref:System.Globalization.DateTimeFormatInfo> オブジェクトによって文字列が解析されると、解析操作によって正しい結果が返されます。 ただし、文字列が標準の en-us カルチャ設定を反映する <xref:System.Globalization.DateTimeFormatInfo> オブジェクトによって解析される場合、解析メソッドは、年の最後の2桁ではなく、月の番号として14を解釈するため、<xref:System.FormatException> 例外をスローします。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/parse2.cs#16)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/parse2.vb#16)]  
  
### <a name="serializing-and-deserializing-date-and-time-data"></a>日付と時刻のデータのシリアル化と逆シリアル化  
 シリアル化された日付と時刻のデータはラウンドトリップすることが想定されています。つまり、シリアル化および逆シリアル化されたすべての値が同一である必要があります。 日付と時刻の値が1つの時点を表す場合、逆シリアル化された値は、復元元のシステムのカルチャまたはタイムゾーンに関係なく、同じ時間を表す必要があります。 日付と時刻のデータを正常にラウンドトリップさせるには、<xref:System.Globalization.DateTimeFormatInfo.InvariantInfo%2A> プロパティによって返されるインバリアントカルチャの規則を使用して、データを生成して解析する必要があります。 書式設定および解析操作には、既定のカルチャの規則が反映されないようにする必要があります。 既定のカルチャ設定を使用する場合、データの移植性は厳密に制限されます。カルチャ固有の設定が、シリアル化されたスレッドと同じであるスレッドでのみ、正常に逆シリアル化できます。 場合によっては、同じシステム上でデータを正常にシリアル化および逆シリアル化することもできないことを意味します。  
  
 日付と時刻の値の時刻部分が有意である場合は、UTC に変換し、"o" または "r"[標準書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)を使用してシリアル化する必要もあります。 その後、時間データを復元するには、解析メソッドを呼び出し、`provider` 引数として適切な書式指定文字列をインバリアントカルチャと共に渡します。  
  
 次の例は、日付と時刻の値をラウンドトリップさせるプロセスを示しています。 米国太平洋標準時を監視し、現在のカルチャが en-us であるシステム上の日付と時刻をシリアル化します。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/serialize1.cs#17)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/serialize1.vb#17)]  
  
 これは、ブリュッセル、コペンハーゲン、レアルマドリード、パリのタイムゾーンのシステム上のデータを逆シリアル化し、現在のカルチャが fr-fr であることを示します。 復元された日付は、元の日付より9時間後になります。これは、UTC の8時間前から UTC の1時間前までのタイムゾーン調整を反映したものです。 元の日付と復元された日付の両方が同じ時間を表しています。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/serialize2.cs#18)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/serialize2.vb#18)]  
  
   
  
## Examples  
 次の例では、リフレクションを使用して、English (米国) カルチャの <xref:System.Globalization.DateTimeFormatInfo> オブジェクトのプロパティを取得します。 カスタム書式指定文字列を含むプロパティの値を表示し、それらの文字列を使用して書式設定された日付を表示します。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/format1.cs#5)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/format1.vb#5)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.DateTime" />
    <altmember cref="T:System.Globalization.Calendar" />
    <altmember cref="T:System.Globalization.CultureInfo" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeFormatInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeFormatInfo();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>カルチャに依存しない (インバリアントな) <see cref="T:System.Globalization.DateTimeFormatInfo" /> クラスの新しい書き込み可能インスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、インバリアントカルチャの日付と時刻の情報を表す <xref:System.Globalization.DateTimeFormatInfo> オブジェクトを作成します。 特定のカルチャの <xref:System.Globalization.DateTimeFormatInfo> オブジェクトを作成するには、そのカルチャの <xref:System.Globalization.CultureInfo> オブジェクトを作成し、その <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> プロパティによって返される <xref:System.Globalization.DateTimeFormatInfo> オブジェクトを取得します。  
  
 このコンストラクターによって作成された <xref:System.Globalization.DateTimeFormatInfo> オブジェクトのプロパティは変更できます。 ただし、インバリアントカルチャではグレゴリオ暦のローカライズ版のみがサポートされているため、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティを変更することはできません。 特定の暦を使用する <xref:System.Globalization.DateTimeFormatInfo> オブジェクトを作成するには、その暦をサポートする <xref:System.Globalization.CultureInfo> オブジェクトをインスタンス化し、そのカレンダーを <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> プロパティによって返される <xref:System.Globalization.DateTimeFormatInfo> オブジェクトの <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティに割り当てる必要があります。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="AbbreviatedDayNames">
      <MemberSignature Language="C#" Value="public string[] AbbreviatedDayNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] AbbreviatedDayNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" />
      <MemberSignature Language="VB.NET" Value="Public Property AbbreviatedDayNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ AbbreviatedDayNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AbbreviatedDayNames : string[] with get, set" Usage="System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>曜日を表すカルチャ固有の省略名を格納している型 <see cref="T:System.String" /> の 1 次元配列を取得または設定します。</summary>
        <value>曜日を表すカルチャ固有の省略名を格納している型 <see cref="T:System.String" /> の 1 次元配列。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> の配列は、"Sun"、"Mon"、"Tue"、"Wed"、"Thu"、"Fri"、および "Sat" を格納します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを設定する場合、配列は1次元で、正確に7個の要素を持つ必要があります。 最初の要素 (インデックス0の要素) は、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティによって定義された暦の週の最初の曜日を表します。  
  
 カスタム書式指定文字列に "ddd" 書式指定子が含まれている場合、<xref:System.DateTime.ToString%2A?displayProperty=nameWithType> または <xref:System.DateTimeOffset.ToString%2A> メソッドには、結果文字列の "ddd" の代わりに、<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A> 配列の適切なメンバーが含まれます。  
  
 このプロパティは、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティの値が変更された場合に影響を受けます。 選択した <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> が短い曜日名をサポートしていない場合は、完全な曜日名が配列に格納されます。  
  
   
  
## Examples  
 次の例では、英語 (米国) カルチャを表す読み取り/書き込み <xref:System.Globalization.CultureInfo> オブジェクトを作成し、短い曜日名をその <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A> プロパティに割り当てます。 次に、[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)で "ddd" 書式指定子を使用して、1週間の日付の文字列形式を2014年5月28日から表示します。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviateddaynames/cs/abbreviateddaynames1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviateddaynames/vb/abbreviateddaynames1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.ArgumentException">プロパティが、多次元配列または配列長が厳密に 7 ではない配列に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.DayNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedDayName(System.DayOfWeek)" />
      </Docs>
    </Member>
    <Member MemberName="AbbreviatedMonthGenitiveNames">
      <MemberSignature Language="C#" Value="public string[] AbbreviatedMonthGenitiveNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] AbbreviatedMonthGenitiveNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames" />
      <MemberSignature Language="VB.NET" Value="Public Property AbbreviatedMonthGenitiveNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ AbbreviatedMonthGenitiveNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AbbreviatedMonthGenitiveNames : string[] with get, set" Usage="System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトに関連付けられた月の省略名の文字列配列を取得または設定します。</summary>
        <value>月の省略名の文字列配列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 言語によっては、日付の一部である月の名前が genitive の場合に表示されます。 たとえば、ru またはロシア語 (ロシア) カルチャの日付は、1Января (1 月1日) などの日番号と genitive month name で構成されます。 これらのカルチャでは、カスタム書式指定文字列に "MMM" 書式指定子が含まれている場合、<xref:System.DateTime.ToString%2A?displayProperty=nameWithType> または <xref:System.DateTimeOffset.ToString%2A> メソッドには、結果文字列の "MMM" の代わりに、<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A> 配列の適切なメンバーが含まれます。  
  
 設定操作では <xref:System.Globalization.Calendar> オブジェクトが13か月の暦に対応するため、配列は、ちょうど13個の要素を持つ1次元の配列である必要があります。 12か月のカレンダーの場合は、13番目の要素を <xref:System.String.Empty?displayProperty=nameWithType>する必要があります。 最初の要素 (インデックス0の要素) は、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティによって定義された年の最初の月を表します。  
  
 <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A> プロパティを設定する場合は、<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A> プロパティも設定する必要があります。  
  
   
  
## Examples  
 次の例では、英語 (米国) カルチャを表す読み取り/書き込み <xref:System.Globalization.CultureInfo> オブジェクトを作成し、省略された genitive month 名をその <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A> および <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A> プロパティに割り当てます。 次に、カルチャのサポートされている暦に各月の月の省略名を含む文字列形式の日付を表示します。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviatedmonthgenitivenames/cs/abbreviatedmonthnames1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviatedmonthgenitivenames/vb/abbreviatedmonthnames1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">設定操作で、配列が多次元であるか、長さが厳密に 13 ではありません。</exception>
        <exception cref="T:System.ArgumentNullException">設定操作で、配列または配列の要素の 1 つが <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">set 操作において、現在の <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトが読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
      </Docs>
    </Member>
    <Member MemberName="AbbreviatedMonthNames">
      <MemberSignature Language="C#" Value="public string[] AbbreviatedMonthNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] AbbreviatedMonthNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
      <MemberSignature Language="VB.NET" Value="Public Property AbbreviatedMonthNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ AbbreviatedMonthNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AbbreviatedMonthNames : string[] with get, set" Usage="System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>月を表すカルチャ固有の省略名を格納している 1 次元配列を取得または設定します。</summary>
        <value>月を表すカルチャ固有の省略名を格納している、13 個の要素を持つ 1 次元配列。 12 か月の暦では、配列の 13 番目の要素は空の文字列になります。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> の配列は、"Jan"、"Feb"、"Mar"、"Apr"、"May"、"Jun"、"Jul"、"Aug"、"Sep"、"Oct"、"Nov"、"Dec"、および "" を格納します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを設定する場合、配列は、ちょうど13個の要素を持つ1次元の配列である必要があります。 <xref:System.Globalization.Calendar> オブジェクトは、13か月間の予定表に対応しています。 最初の要素 (インデックス0の要素) は、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティによって定義された年の最初の月を表します。  
  
 <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A> プロパティを設定する場合は、<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A> プロパティも設定する必要があります。 <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A> と <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A> のプロパティは、次の書式指定文字列を使用して日付の書式を設定するために使用されます。  
  
-   "MMM" 書式指定子を含むカスタム書式指定文字列を別名とする標準の日時書式指定文字列。  
  
-   "MMM" 書式指定子を含むカスタムの日付と時刻の書式指定文字列。  
  
 このプロパティは、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティの値が変更された場合に影響を受けます。 選択した <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> が省略された月の名前をサポートしていない場合、配列には月の完全な名前が含まれます。  
  
   
  
## Examples  
 次の例では、英語 (米国) カルチャを表す読み取り/書き込み <xref:System.Globalization.CultureInfo> オブジェクトを作成し、省略された genitive month 名をその <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A> および <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A> プロパティに割り当てます。 次に、カルチャのサポートされている暦に含まれる月の省略名を含む日付の文字列形式を表示します。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviatedmonthgenitivenames/cs/abbreviatedmonthnames1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviatedmonthgenitivenames/vb/abbreviatedmonthnames1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.ArgumentException">プロパティが、多次元配列または配列長が厳密に 13 ではない配列に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthNames" />
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedMonthName(System.Int32)" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames" />
      </Docs>
    </Member>
    <Member MemberName="AMDesignator">
      <MemberSignature Language="C#" Value="public string AMDesignator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AMDesignator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.AMDesignator" />
      <MemberSignature Language="VB.NET" Value="Public Property AMDesignator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AMDesignator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AMDesignator : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.AMDesignator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>"ante meridiem" (午前) の時間の文字列指定子を取得または設定します。</summary>
        <value>"ante meridiem" の時間の文字列指定子。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> の既定値は "AM" です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A> プロパティは、0:00:00 (午前0時) から 11:59: 59.999 までまでのすべての時間に使用されます。  
  
 カスタム書式指定文字列に "tt" 書式指定子が含まれていて、時刻が正午より前の場合、<xref:System.DateTime.ToString%2A?displayProperty=nameWithType> または <xref:System.DateTimeOffset.ToString%2A> メソッドには、結果文字列に "tt" の代わりに <xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A> プロパティの値が含まれます。 カスタム書式指定文字列に "t" カスタム書式指定子が含まれている場合は、<xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A> プロパティ値の最初の文字のみが含まれます。 Am の区別を維持するために必要な言語には、"tt" を使用する必要があります。 および午後 例として、「日本語」と指定します。 および午後 最初の文字の代わりに、2番目の文字が区別されます。  
  
 Am を使用しないカルチャの場合 指定子,、このプロパティは空の文字列を返します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.PMDesignator" />
      </Docs>
    </Member>
    <Member MemberName="Calendar">
      <MemberSignature Language="C#" Value="public System.Globalization.Calendar Calendar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar Calendar" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.Calendar" />
      <MemberSignature Language="VB.NET" Value="Public Property Calendar As Calendar" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::Calendar ^ Calendar { System::Globalization::Calendar ^ get(); void set(System::Globalization::Calendar ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Calendar : System.Globalization.Calendar with get, set" Usage="System.Globalization.DateTimeFormatInfo.Calendar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のカルチャで使用する暦を取得または設定します。</summary>
        <value>現在のカルチャで使用する暦。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> の既定値は <see cref="T:System.Globalization.GregorianCalendar" /> オブジェクトです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティは、<xref:System.Globalization.DateTimeFormatInfo> オブジェクトに関連付けられているカルチャに対して有効な暦だけを受け入れます。 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType> プロパティは、特定のカルチャで使用できる暦を指定します。また、<xref:System.Globalization.CultureInfo.Calendar%2A?displayProperty=nameWithType> プロパティは、カルチャの既定の暦を指定します。  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

このプロパティの値を変更すると、<xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A>、<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>、<xref:System.Globalization.DateTimeFormatInfo.DayNames%2A>、<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A>、<xref:System.Globalization.DateTimeFormatInfo.CalendarWeekRule%2A>、<xref:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek%2A>、<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>、<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>、<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>、<xref:System.Globalization.DateTimeFormatInfo.YearMonthPattern%2A>、<xref:System.Globalization.DateTimeFormatInfo.MonthDayPattern%2A>の各プロパティにも影響します。  
  
 たとえば、現在のスレッドのカルチャが日本語の場合、このプロパティは <xref:System.Globalization.JapaneseCalendar>、<xref:System.Globalization.GregorianCalendarTypes.Localized><xref:System.Globalization.GregorianCalendar>、または <xref:System.Globalization.GregorianCalendarTypes.USEnglish><xref:System.Globalization.GregorianCalendar>を受け入れます。 <xref:System.Globalization.JapaneseCalendar> を使用した場合、既定の長い日付指定子は "gg y ' \x5e74 m ' \x6708 ' \x65e5 '" になります。 <xref:System.Globalization.GregorianCalendarTypes.Localized><xref:System.Globalization.GregorianCalendar>を使用した場合、既定の長い日付指定子は "yyyy ' \x5e74 ' \x6708 ' \x65e5 '" になります。  
  
   
  
## Examples  
 次の例では、現在の暦であるか、カルチャでサポートされていない場合に、カルチャの現在の暦を指定された暦に変更する `ChangeCalendar` メソッドを定義します。 メソッドを呼び出すコードは、アラビア語 (エジプト) カルチャを表す <xref:System.Globalization.CultureInfo> オブジェクトをインスタンス化し、最初にカレンダーを日本語の暦に変更しようとします。 日本語の暦はサポートされていないため、メソッドはカルチャの暦を変更しません。 ただし、um al の暦は <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType> コレクションのメンバーであるため、メソッドは、このメソッドを使用して、ar カルチャの現在の暦を作成します。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Calendar#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.DateTimeFormatInfo.Calendar/cs/CalendarTest1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Calendar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.DateTimeFormatInfo.Calendar/vb/CalendarTest1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">プロパティが、現在のカルチャでは有効でない <see cref="T:System.Globalization.Calendar" /> オブジェクトに設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName="CalendarWeekRule">
      <MemberSignature Language="C#" Value="public System.Globalization.CalendarWeekRule CalendarWeekRule { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.CalendarWeekRule CalendarWeekRule" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.CalendarWeekRule" />
      <MemberSignature Language="VB.NET" Value="Public Property CalendarWeekRule As CalendarWeekRule" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CalendarWeekRule CalendarWeekRule { System::Globalization::CalendarWeekRule get(); void set(System::Globalization::CalendarWeekRule value); };" />
      <MemberSignature Language="F#" Value="member this.CalendarWeekRule : System.Globalization.CalendarWeekRule with get, set" Usage="System.Globalization.DateTimeFormatInfo.CalendarWeekRule" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CalendarWeekRule</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>年の最初の週を判断するために使用する規則を指定する値を取得または設定します。</summary>
        <value>年の最初の週を決定する値。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> の既定値は <see cref="F:System.Globalization.CalendarWeekRule.FirstDay" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティの値が変更された場合に影響を受けます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">プロパティが有効な <see cref="T:System.Globalization.CalendarWeekRule" /> 値ではない値に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">set 操作において、現在の <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトが読み取り専用です。</exception>
        <altmember cref="T:System.Globalization.CalendarWeekRule" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Clone() cil managed" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Clone();" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; obj" Usage="dateTimeFormatInfo.Clone " FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="dateTimeFormatInfo.Clone " FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Globalization.DateTimeFormatInfo" /> の簡易コピーを作成します。</summary>
        <returns>元の <see cref="T:System.Globalization.DateTimeFormatInfo" /> からコピーされた新しい <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 元の <xref:System.Globalization.DateTimeFormatInfo> オブジェクトが読み取り専用の場合でも、複製は書き込み可能です。 そのため、複製のプロパティは、ユーザー定義のパターンで変更できます。  
  
 オブジェクトの簡易コピーは、オブジェクトのコピーにすぎません。 オブジェクトに他のオブジェクトへの参照が含まれている場合、シャローコピーは参照されるオブジェクトのコピーを作成しません。 代わりに、元のオブジェクトを参照します。 これに対し、オブジェクトの詳細コピーでは、オブジェクトのコピーと、そのオブジェクトによって直接または間接的に参照されるすべてのもののコピーが作成されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.DateTimeFormatInfo CurrentInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.DateTimeFormatInfo CurrentInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.CurrentInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentInfo As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::DateTimeFormatInfo ^ CurrentInfo { System::Globalization::DateTimeFormatInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentInfo : System.Globalization.DateTimeFormatInfo" Usage="System.Globalization.DateTimeFormatInfo.CurrentInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のカルチャに基づいて値を形式指定する読み取り専用 <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトを取得します。</summary>
        <value>現在のスレッドに対する <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトに基づく読み取り専用の <see cref="T:System.Globalization.CultureInfo" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A> プロパティによって返される <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは、ユーザーのオーバーライドを反映します。  
  
   
  
## Examples  
 次の例では、<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A> プロパティを使用して、現在のカルチャの書式指定規則 (この例では en-us カルチャ) を表す <xref:System.Globalization.DateTimeFormatInfo> オブジェクトを取得します。 次に、6つの書式設定プロパティの書式文字列と結果文字列を表示します。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.CurrentInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.DateTimeFormatInfo.CurrentInfo/cs/CurrentInfo1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.CurrentInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.DateTimeFormatInfo.CurrentInfo/vb/CurrentInfo1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="DateSeparator">
      <MemberSignature Language="C#" Value="public string DateSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DateSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.DateSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property DateSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DateSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DateSeparator : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.DateSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>日付の構成要素、つまり年、月、および日を区切る文字列を取得または設定します。</summary>
        <value>日付の構成要素、つまり年、月、および日を区切る文字列。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> の既定値は、"/" です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 カスタム書式指定文字列に "/" 書式指定子が含まれている場合は、<xref:System.DateTime.ToString%2A?displayProperty=nameWithType> メソッドによって、結果文字列の "/" の代わりに <xref:System.Globalization.DateTimeFormatInfo.DateSeparator%2A> の値が表示されます。  
  
 <xref:System.Globalization.DateTimeFormatInfo.DateSeparator%2A> プロパティは、書式設定操作で結果文字列の日付の区切り記号 ("/" カスタム日時書式指定子) を置き換える文字列を定義します。 また、解析操作で日付の区切り記号文字列を定義します。  
  
   
  
## Examples  
 次の例では、en-us カルチャの <xref:System.Globalization.CultureInfo> オブジェクトをインスタンス化し、その日付の区切り記号を "-" に変更し、"d"、"G"、および "g" の標準書式指定文字列を使用して日付を表示します。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.DateSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.dateseparator/cs/dateseparatorex.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.DateSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.dateseparator/vb/dateseparatorex.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" />
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時形式文字列</related>
      </Docs>
    </Member>
    <Member MemberName="DayNames">
      <MemberSignature Language="C#" Value="public string[] DayNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] DayNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.DayNames" />
      <MemberSignature Language="VB.NET" Value="Public Property DayNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ DayNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DayNames : string[] with get, set" Usage="System.Globalization.DateTimeFormatInfo.DayNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>曜日を表すカルチャ固有の完全名を格納する 1 次元の文字列配列を取得または設定します。</summary>
        <value>曜日を表すカルチャ固有の完全名を格納している 1 次元の文字列配列。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> の配列は、"Sunday"、"Monday"、"Tuesday"、"Wednesday"、"Thursday"、"Friday"、および "Saturday" を格納します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを設定する場合、配列は1次元で、正確に7個の要素を持つ必要があります。 最初の要素 (インデックス0の要素) は、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティによって定義された暦の週の最初の曜日を表します。  
  
 カスタム書式指定文字列に "dddd" 書式指定子が含まれている場合、<xref:System.DateTime.ToString%2A?displayProperty=nameWithType> メソッドには、結果文字列に "dddd" の代わりに適切な <xref:System.Globalization.DateTimeFormatInfo.DayNames%2A> メンバーの値が含まれます。  
  
 このプロパティは、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティの値が変更された場合に影響を受けます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.ArgumentException">プロパティが、多次元配列または配列長が厳密に 7 ではない配列に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthNames" />
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetDayName(System.DayOfWeek)" />
      </Docs>
    </Member>
    <Member MemberName="FirstDayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek FirstDayOfWeek { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek FirstDayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek" />
      <MemberSignature Language="VB.NET" Value="Public Property FirstDayOfWeek As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DayOfWeek FirstDayOfWeek { DayOfWeek get(); void set(DayOfWeek value); };" />
      <MemberSignature Language="F#" Value="member this.FirstDayOfWeek : DayOfWeek with get, set" Usage="System.Globalization.DateTimeFormatInfo.FirstDayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>週の最初の曜日を取得または設定します。</summary>
        <value>週の最初の日を表す列挙値。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> の既定値は <see cref="F:System.DayOfWeek.Sunday" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティの値が変更された場合に影響を受けます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">プロパティが有効な <see cref="T:System.DayOfWeek" /> 値ではない値に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="T:System.DayOfWeek" />
      </Docs>
    </Member>
    <Member MemberName="FullDateTimePattern">
      <MemberSignature Language="C#" Value="public string FullDateTimePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullDateTimePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.FullDateTimePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property FullDateTimePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FullDateTimePattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FullDateTimePattern : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.FullDateTimePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>長い日付値と長い時刻値のカスタム書式指定文字列を取得または設定します。</summary>
        <value>長い日付値と長い時刻値のカスタム書式指定文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 "F" 標準書式指定文字列は、<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A> プロパティのエイリアスです。 つまり、このプロパティに割り当てられたカスタム書式指定文字列は、"F" 標準書式指定文字列の結果文字列の形式を定義します。 詳細については、「[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)」を参照してください。  
  
 <xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A> プロパティの値は、<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> と <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> のプロパティをスペースで区切って連結することによって、動的に生成されます。 この動的割り当ては、次の条件で発生します。  
  
-   プロパティ値が明示的に設定される前に取得される場合は。  
  
-   <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> プロパティの値が変更された場合。  
  
-   <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> プロパティの値が変更された場合。  
  
 このプロパティは、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティの値が変更された場合に影響を受けます。  
  
   
  
## Examples  
 次の例では、いくつかのカルチャの <xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A> の値を表示します。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.FullDateTimePattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.FullDateTimePattern/CPP/dtfi_fulldatetimepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.FullDateTimePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.FullDateTimePattern/CS/dtfi_fulldatetimepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.FullDateTimePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.FullDateTimePattern/VB/dtfi_fulldatetimepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時形式文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="GetAbbreviatedDayName">
      <MemberSignature Language="C#" Value="public string GetAbbreviatedDayName (DayOfWeek dayofweek);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAbbreviatedDayName(valuetype System.DayOfWeek dayofweek) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedDayName(System.DayOfWeek)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAbbreviatedDayName(DayOfWeek dayofweek);" />
      <MemberSignature Language="F#" Value="member this.GetAbbreviatedDayName : DayOfWeek -&gt; string" Usage="dateTimeFormatInfo.GetAbbreviatedDayName dayofweek" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dayofweek" Type="System.DayOfWeek" />
      </Parameters>
      <Docs>
        <param name="dayofweek"><see cref="T:System.DayOfWeek" /> 値。</param>
        <summary>現在の <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトに関連付けられたカルチャに基づいて、指定した曜日のカルチャ固有の省略名を返します。</summary>
        <returns><paramref name="dayofweek" /> が表す曜日のカルチャ固有の省略名。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定のインバリアント <xref:System.Globalization.DateTimeFormatInfo> オブジェクトの場合、このメソッドは <xref:System.Globalization.GregorianCalendar>から文字列を返します。  
  
|`dayofweek`|戻り値|  
|-----------------|------------------|  
|日曜日|日曜日|  
|月曜日|月曜日|  
|火曜日|火曜日|  
|水曜日|(水)|  
|木曜日|Thu|  
|金曜日|Fri|  
|土曜日|始め|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dayofweek" /> が有効な <see cref="T:System.DayOfWeek" /> 値ではありません。</exception>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.GregorianCalendar" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" />
        <altmember cref="T:System.DayOfWeek" />
      </Docs>
    </Member>
    <Member MemberName="GetAbbreviatedEraName">
      <MemberSignature Language="C#" Value="public string GetAbbreviatedEraName (int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAbbreviatedEraName(int32 era) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAbbreviatedEraName (era As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAbbreviatedEraName(int era);" />
      <MemberSignature Language="F#" Value="member this.GetAbbreviatedEraName : int -&gt; string" Usage="dateTimeFormatInfo.GetAbbreviatedEraName era" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="era">時代 (年号) を表す整数。</param>
        <summary>省略形が存在する場合は、指定した時代 (年号) の省略名を格納している文字列を返します。</summary>
        <returns>省略形が存在する場合は、指定した時代 (年号) の省略名を格納している文字列。  
  
 または  
  
 省略形が存在しない場合は、時代 (年号) の完全名を格納している文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 時代 (年号) 名は、固定されたポイントまたはイベントから reckoned 期間を参照するためにカレンダーで使用される名前です。 たとえば、"A.D." のようになります。 または "紀元" グレゴリオ暦の現在の時代 (年号) です。  
  
 `era` の有効な値は、<xref:System.Globalization.Calendar>から派生した適切なクラスの <xref:System.Globalization.Calendar.Eras%2A> プロパティに一覧表示されます。 例: <xref:System.Globalization.JapaneseCalendar.Eras%2A?displayProperty=nameWithType> には、この実装でサポートされている時代 (年号) の一覧が表示されます。  
  
 <xref:System.Globalization.JapaneseCalendar> クラスでは、省略された時代 (年号) 名は、完全な時代 (年号) 名の最初の文字です。 この文字は、大文字と小文字を区別しないラテンアルファベットの省略形、または1文字の漢字の省略形です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="era" /> が、<see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> プロパティで指定した暦の有効な時代 (年号) を表していません。</exception>
        <block subset="none" type="usage"><para><see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> が <see cref="T:System.Globalization.TaiwanCalendar" /> で、<see cref="P:System.Threading.Thread.CurrentCulture" /> が "zh-tw" ではない場合、<see cref="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" />、<see cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />、および <see cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" /> は空の文字列 ("") を返します。</para></block>
        <altmember cref="T:System.Globalization.JapaneseCalendar" />
        <altmember cref="T:System.Globalization.TaiwanCalendar" />
      </Docs>
    </Member>
    <Member MemberName="GetAbbreviatedMonthName">
      <MemberSignature Language="C#" Value="public string GetAbbreviatedMonthName (int month);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAbbreviatedMonthName(int32 month) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedMonthName(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAbbreviatedMonthName (month As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAbbreviatedMonthName(int month);" />
      <MemberSignature Language="F#" Value="member this.GetAbbreviatedMonthName : int -&gt; string" Usage="dateTimeFormatInfo.GetAbbreviatedMonthName month" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="month" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="month">取得する月の名前を表す 1 ～ 13 の整数。</param>
        <summary>現在の <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトに関連付けられたカルチャに基づいて、指定した月のカルチャ固有の省略名を返します。</summary>
        <returns><paramref name="month" /> が表す月のカルチャ固有の省略名。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定のインバリアント <xref:System.Globalization.DateTimeFormatInfo> オブジェクトの場合、このメソッドは <xref:System.Globalization.GregorianCalendar> オブジェクトから文字列を返します。  
  
|`month`|戻り値|  
|-------------|------------------|  
|1|ヤンマイエン|  
|2|月|  
|3|月|  
|4|年率|  
|5|月|  
|6|日|  
|7|7月|  
|8|年|  
|9|区切り|  
|10|シンガポール|  
|11|年|  
|12|Alpha|  
|13|""|  
  
 <xref:System.Globalization.Calendar> オブジェクトは、13か月のカレンダーに対応できます。 12か月のカレンダーの場合、空の文字列は、13か月の名前として常に返されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="month" /> が 1 より小さいか、または 13 を超えています。</exception>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.GregorianCalendar" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAllDateTimePatterns">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>日付と時刻の値を形式指定できる標準パターンを返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAllDateTimePatterns">
      <MemberSignature Language="C#" Value="public string[] GetAllDateTimePatterns ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetAllDateTimePatterns() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllDateTimePatterns () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetAllDateTimePatterns();" />
      <MemberSignature Language="F#" Value="member this.GetAllDateTimePatterns : unit -&gt; string[]" Usage="dateTimeFormatInfo.GetAllDateTimePatterns " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>日付と時刻の値を形式指定できるすべての標準パターンを返します。</summary>
        <returns>日付と時刻の値を形式指定できる標準パターンを格納する配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、標準書式指定文字列に対応するすべてのカスタム書式指定文字列を含む配列を返します。 標準書式指定文字列の一覧については、「[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)」を参照してください。  
  
 <xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A> メソッドによって返される配列のカスタム書式指定文字列は、書式設定操作で使用できます。 ただし、この場合、書式設定操作で返された日付と時刻の値の文字列形式は、`Parse` および `TryParse` メソッドでは、常に正常に解析できません。 したがって、<xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A> メソッドによって返されるカスタム書式指定文字列を使用して、日付と時刻の値をラウンドトリップすることを想定することはできません。 この問題を説明する例を次に示します。 このメソッドは、イタリア語 (イタリア語) カルチャの書式情報を含む <xref:System.Globalization.DateTimeFormatInfo> オブジェクトを取得します。 <xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns> メソッドによって返される配列内の各カスタム書式指定文字列を <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> メソッドに渡して、日付と時刻の文字列形式を作成します。 この例では、<xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> メソッドを呼び出して、この値の解析を試みます。 この例の出力に示すように、カスタム書式指定文字列の中には、正常にラウンドトリップする日付と時刻の値が生成されないものがあります。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/cs/getalldatetimepatternsex1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/vb/getalldatetimepatternsex1.vb#1)]  
  
 いくつかの定義済みのカスタム書式で表現できる日付と時刻の文字列形式を解析するには、次のいずれかのメソッドを呼び出します。  
  
-   <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>  
  
-   <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>  
  
-   <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>  
  
-   <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29?displayProperty=nameWithType>  
  
 <xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A> メソッドによって返される配列内のカスタム書式指定文字列は、<xref:System.Globalization.DateTimeFormatInfo> オブジェクトが書式設定情報を提供するカルチャの現在の暦に依存します。 カレンダーが変更されると、このメソッドによって返される配列も変更されます。  
  
   
  
## Examples  
 次の例では、インバリアントカルチャの日付と時刻の書式指定文字列、および書式指定文字列を使用して特定の日付を書式設定するときに生成される結果文字列を表示します。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/cs/getalldatetimepatternsinv.cs#3)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/vb/getalldatetimepatternsinv.vb#3)]  
  
 この例では、<xref:System.Globalization.DateTimeFormatInfo.%23ctor%2A> コンストラクターを呼び出すことによって、インバリアントカルチャを表す <xref:System.Globalization.DateTimeFormatInfo> オブジェクトをインスタンス化します。 また、<xref:System.Globalization.DateTimeFormatInfo.InvariantInfo%2A> プロパティからインバリアントカルチャを表す <xref:System.Globalization.DateTimeFormatInfo> を取得することもできます。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns(System.String[],System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="GetAllDateTimePatterns">
      <MemberSignature Language="C#" Value="public string[] GetAllDateTimePatterns (char format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetAllDateTimePatterns(char format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllDateTimePatterns (format As Char) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetAllDateTimePatterns(char format);" />
      <MemberSignature Language="F#" Value="member this.GetAllDateTimePatterns : char -&gt; string[]" Usage="dateTimeFormatInfo.GetAllDateTimePatterns format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="format">標準書式指定文字列。</param>
        <summary>指定された標準書式指定文字列を使用して日付と時刻の値を形式指定できるすべてのパターンを返します。</summary>
        <returns>指定された書式指定文字列を使用して日付と時刻の値を形式指定できる標準パターンを格納している配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、特定の標準書式指定文字列に対応するカスタム書式指定文字列を含む配列を返します。 標準書式指定文字列の一覧については、「[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)」を参照してください。  
  
 <xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A> メソッドによって返される配列のカスタム書式指定文字列は、書式設定操作で使用できます。 ただし、この場合、書式設定操作で返された日付と時刻の値の文字列形式は、`Parse` および `TryParse` メソッドでは、常に正常に解析できません。 したがって、<xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A> メソッドによって返されるカスタム書式指定文字列を使用して、日付と時刻の値をラウンドトリップすることを想定することはできません。 この問題を説明する例を次に示します。 ロシア語 (ロシア語) カルチャの書式情報を含む <xref:System.Globalization.DateTimeFormatInfo> オブジェクトを取得します。 各標準書式指定文字列に対して <xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%28System.Char%29> メソッドを呼び出し、返された配列内の各カスタム書式指定文字列を <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> メソッドに渡して、日付と時刻の文字列形式を作成します。 この例では、<xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> メソッドを呼び出して、この値の解析を試みます。 この例の出力に示すように、カスタム書式指定文字列の中には、正常にラウンドトリップする日付と時刻の値が生成されないものがあります。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/cs/getalldatetimepatternsex2.cs#2)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/vb/getalldatetimepatternsex2.vb#2)]  
  
 いくつかの定義済みのカスタム書式で表現できる日付と時刻の文字列形式を解析するには、次のいずれかのメソッドを呼び出します。  
  
-   <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>  
  
-   <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>  
  
-   <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>  
  
-   <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29?displayProperty=nameWithType>  
  
 <xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A> メソッドによって返される配列内のカスタム書式指定文字列は、<xref:System.Globalization.DateTimeFormatInfo> オブジェクトが書式設定情報を提供するカルチャの現在の暦に依存します。 カレンダーが変更されると、このメソッドによって返される配列も変更されます。  
  
   
  
## Examples  
 次の例では、現在の暦の日付と時刻のパターンを表示します。  
  
 [!code-cpp[Classic DateTimeFormatInfo.GetAllDateTimePatterns Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic DateTimeFormatInfo.GetAllDateTimePatterns Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DateTimeFormatInfo.GetAllDateTimePatterns Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic DateTimeFormatInfo.GetAllDateTimePatterns Example/CS/source.cs#1)]
 [!code-vb[Classic DateTimeFormatInfo.GetAllDateTimePatterns Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic DateTimeFormatInfo.GetAllDateTimePatterns Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="format" /> は有効な標準書式指定文字列ではありません。</exception>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns(System.String[],System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="GetDayName">
      <MemberSignature Language="C#" Value="public string GetDayName (DayOfWeek dayofweek);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetDayName(valuetype System.DayOfWeek dayofweek) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetDayName(System.DayOfWeek)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetDayName(DayOfWeek dayofweek);" />
      <MemberSignature Language="F#" Value="member this.GetDayName : DayOfWeek -&gt; string" Usage="dateTimeFormatInfo.GetDayName dayofweek" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dayofweek" Type="System.DayOfWeek" />
      </Parameters>
      <Docs>
        <param name="dayofweek"><see cref="T:System.DayOfWeek" /> 値。</param>
        <summary>現在の <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトに関連付けられたカルチャに基づいて、指定した曜日のカルチャ固有の完全名を返します。</summary>
        <returns><paramref name="dayofweek" /> が表す曜日のカルチャ固有の完全名。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定のインバリアント <xref:System.Globalization.DateTimeFormatInfo> オブジェクトの場合、このメソッドは <xref:System.Globalization.GregorianCalendar> オブジェクトから文字列を返します。  
  
|`dayofweek`|戻り値|  
|-----------------|------------------|  
|日曜日|日曜日|  
|月曜日|月曜日|  
|火曜日|日付|  
|水曜日|毎週|  
|木曜日|(木)|  
|金曜日|月曜|  
|土曜日|土曜日|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dayofweek" /> が有効な <see cref="T:System.DayOfWeek" /> 値ではありません。</exception>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.GregorianCalendar" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.DayNames" />
        <altmember cref="T:System.DayOfWeek" />
      </Docs>
    </Member>
    <Member MemberName="GetEra">
      <MemberSignature Language="C#" Value="public int GetEra (string eraName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetEra(string eraName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetEra(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEra (eraName As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetEra(System::String ^ eraName);" />
      <MemberSignature Language="F#" Value="member this.GetEra : string -&gt; int" Usage="dateTimeFormatInfo.GetEra eraName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eraName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eraName">時代 (年号) の名前を格納している文字列。</param>
        <summary>指定した時代 (年号) を表す整数を返します。</summary>
        <returns><paramref name="eraName" /> が有効な場合は時代 (年号) を表す整数。それ以外の場合は -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 時代 (年号) 名は、固定されたポイントまたはイベントから reckoned 期間を参照するためにカレンダーで使用される名前です。 たとえば、"A.D." のようになります。 または "紀元" グレゴリオ暦の現在の時代 (年号) です。  
  
 `eraName` との比較では大文字と小文字が区別されません (例: "A.D.") は、"a.d." に相当します。  
  
 <xref:System.Globalization.DateTimeFormatInfo.GetEra%2A> は、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> で <xref:System.Globalization.GregorianCalendar> が選択されていて、カルチャが "A.D." を使用している場合にのみ、省略された時代 (年号) 名の句読点を無視します 年号名、つまり "A.D." は、"AD" に相当します。  
  
 <xref:System.Globalization.DateTimeFormatInfo.GetEra%2A> は、`eraName` と <xref:System.Globalization.DateTimeFormatInfo.GetEraName%2A> によって返される完全な時代 (年号) 名と <xref:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName%2A>によって返される省略形の時代 (年号) 名とを比較します。  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

## Examples  
 次の例では、<xref:System.Globalization.DateTimeFormatInfo> が era 名の句読点を無視することを示しています。これは、暦がグレゴリオ暦で、カルチャで時代 (年号) という名前が使用されている場合のみです。  
  
 [!code-cpp[System.Globalization.GregorianCalendar.GetEra#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendar.GetEra/CPP/gregorian_getera.cpp#1)]
 [!code-csharp[System.Globalization.GregorianCalendar.GetEra#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendar.GetEra/CS/gregorian_getera.cs#1)]
 [!code-vb[System.Globalization.GregorianCalendar.GetEra#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.GregorianCalendar.GetEra/VB/gregorian_getera.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="eraName" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName="GetEraName">
      <MemberSignature Language="C#" Value="public string GetEraName (int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetEraName(int32 era) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEraName (era As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetEraName(int era);" />
      <MemberSignature Language="F#" Value="member this.GetEraName : int -&gt; string" Usage="dateTimeFormatInfo.GetEraName era" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="era">時代 (年号) を表す整数。</param>
        <summary>指定した時代 (年号) の名前を格納している文字列を返します。</summary>
        <returns>時代 (年号) の名前を格納している文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 時代 (年号) 名は、固定されたポイントまたはイベントから reckoned 期間を参照するためにカレンダーで使用される名前です。 たとえば、"A.D." のようになります。 または "紀元" グレゴリオ暦の現在の時代 (年号) です。  
  
 `era` の有効な値は、<xref:System.Globalization.Calendar>から派生した適切なクラスの <xref:System.Globalization.Calendar.Eras%2A> プロパティに一覧表示されます。 例: <xref:System.Globalization.JapaneseCalendar.Eras%2A?displayProperty=nameWithType> には、この実装でサポートされている時代 (年号) の一覧が表示されます。  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="era" /> が、<see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> プロパティで指定した暦の有効な時代 (年号) を表していません。</exception>
        <block subset="none" type="usage"><para>カレンダーが <see cref="T:System.Globalization.TaiwanCalendar" /> で表されていても、<see cref="P:System.Threading.Thread.CurrentCulture" /> が "zh-tw" ではない場合、<see cref="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" />、<see cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />、および <see cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" /> は空の文字列 ("") を返します。</para></block>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetEra(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberSignature Language="F#" Value="abstract member GetFormat : Type -&gt; obj&#xA;override this.GetFormat : Type -&gt; obj" Usage="dateTimeFormatInfo.GetFormat formatType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormatProvider.GetFormat(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">要求される形式指定サービスの型。</param>
        <summary>日付と時刻の書式指定サービスを提供する指定した型のオブジェクトを返します。</summary>
        <returns><paramref name="formatType" /> が現在の <see cref="T:System.Globalization.DateTimeFormatInfo" /> の型と同じ場合は現在のオブジェクト。それ以外の場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 基本データ型でサポートされている `Format(String, IFormatProvider)` メソッドは、現在の <xref:System.Globalization.DateTimeFormatInfo> オブジェクトが <xref:System.IFormatProvider> パラメーターとして渡されたときに、このメソッドを呼び出します。 このメソッドは、<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> を実装します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="M:System.Globalization.NumberFormatInfo.GetFormat(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public static System.Globalization.DateTimeFormatInfo GetInstance (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.DateTimeFormatInfo GetInstance(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetInstance(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetInstance (provider As IFormatProvider) As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::DateTimeFormatInfo ^ GetInstance(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member GetInstance : IFormatProvider -&gt; System.Globalization.DateTimeFormatInfo" Usage="System.Globalization.DateTimeFormatInfo.GetInstance provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> オブジェクトを取得する <see cref="T:System.Globalization.DateTimeFormatInfo" />。  
  
または 
 <see langword="null" /> を取得する <see cref="P:System.Globalization.DateTimeFormatInfo.CurrentInfo" />。</param>
        <summary>指定した <see cref="T:System.Globalization.DateTimeFormatInfo" /> に関連付けられている <see cref="T:System.IFormatProvider" /> オブジェクトを返します。</summary>
        <returns><see cref="T:System.Globalization.DateTimeFormatInfo" /> に関連付けられている <see cref="T:System.IFormatProvider" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドでは、`Type` パラメーターとして <xref:System.Globalization.DateTimeFormatInfo> オブジェクトを使用して `formatProvider` の <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> メソッドを使用します。 `formatProvider` が `null` 場合、または <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> が `null`を返す場合、このメソッドは <xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A>を返します。  
  
 アプリケーションでは、次のいずれかの方法を使用して、特定のカルチャの <xref:System.Globalization.DateTimeFormatInfo> オブジェクトを取得できます。  
  
-   <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> プロパティ。  
  
-   <xref:System.Globalization.DateTimeFormatInfo.GetInstance%2A> メソッド。 `provider` は <xref:System.Globalization.CultureInfo> オブジェクトです。  
  
 <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは、ニュートラルカルチャではなく、特定のカルチャに対してのみ作成できます。  
  
 インバリアントカルチャ、特定のカルチャ、およびニュートラルカルチャの詳細については、<xref:System.Globalization.CultureInfo> クラスの説明を参照してください。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="GetMonthName">
      <MemberSignature Language="C#" Value="public string GetMonthName (int month);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetMonthName(int32 month) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetMonthName(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMonthName (month As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetMonthName(int month);" />
      <MemberSignature Language="F#" Value="member this.GetMonthName : int -&gt; string" Usage="dateTimeFormatInfo.GetMonthName month" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="month" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="month">取得する月の名前を表す 1 ～ 13 の整数。</param>
        <summary>現在の <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトに関連付けられたカルチャに基づいて、指定した月のカルチャ固有の完全名を返します。</summary>
        <returns><paramref name="month" /> が表す月のカルチャ固有の完全名。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定のインバリアント <xref:System.Globalization.DateTimeFormatInfo> オブジェクトの場合、このメソッドは <xref:System.Globalization.GregorianCalendar> オブジェクトから文字列を返します。  
  
|`month`|戻り値|  
|-------------|------------------|  
|1|2000|  
|2|月|  
|3|号|  
|4|年4月|  
|5|月|  
|6|5|  
|7|アメリカ|  
|8|月|  
|9|26|  
|10|時点|  
|11|時点|  
|12|年12月|  
|13|""|  
  
 <xref:System.Globalization.Calendar> オブジェクトは、13か月のカレンダーに対応できます。 12か月のカレンダーの場合、空の文字列は、13か月の名前として常に返されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="month" /> が 1 より小さいか、または 13 を超えています。</exception>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.GregorianCalendar" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthNames" />
      </Docs>
    </Member>
    <Member MemberName="GetShortestDayName">
      <MemberSignature Language="C#" Value="public string GetShortestDayName (DayOfWeek dayOfWeek);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetShortestDayName(valuetype System.DayOfWeek dayOfWeek) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetShortestDayName(System.DayOfWeek)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetShortestDayName(DayOfWeek dayOfWeek);" />
      <MemberSignature Language="F#" Value="member this.GetShortestDayName : DayOfWeek -&gt; string" Usage="dateTimeFormatInfo.GetShortestDayName dayOfWeek" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dayOfWeek" Type="System.DayOfWeek" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="dayOfWeek"><see cref="T:System.DayOfWeek" /> 値の 1 つ。</param>
        <summary>現在の <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトに関連付けられた、指定した曜日の最も短い省略名を取得します。</summary>
        <returns><paramref name="dayOfWeek" /> パラメーターに対応する週の省略名。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、日付と時刻の書式パターン、ネイティブのカレンダー名、および完全および省略名の月と曜日の名前を指定するいくつかのメソッドとプロパティを示します。  
  
 [!code-csharp[sys.glob.DTFI1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.DTFI1/cs/dtfi1.cs#1)]
 [!code-vb[sys.glob.DTFI1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.DTFI1/vb/dtfi1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dayOfWeek" /> が <see cref="T:System.DayOfWeek" /> 列挙体の値ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="InvariantInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.DateTimeFormatInfo InvariantInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.DateTimeFormatInfo InvariantInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantInfo As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::DateTimeFormatInfo ^ InvariantInfo { System::Globalization::DateTimeFormatInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InvariantInfo : System.Globalization.DateTimeFormatInfo" Usage="System.Globalization.DateTimeFormatInfo.InvariantInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カルチャに依存しない (インバリアントな) 既定の読み取り専用 <see cref="T:System.Globalization.DateTimeFormatInfo" /> を取得します。</summary>
        <value>カルチャに依存しない (インバリアントな) 読み取り専用オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、現在のカルチャに関係なく、変更されることはありません。 このため、インバリアントカルチャの <xref:System.Globalization.DateTimeFormatInfo> オブジェクトを使用して、多文化のデータに対する解析および書式設定操作で、カルチャに依存しない一貫性のある結果を生成できます。 たとえば、複数のカルチャの日付と時刻のデータを文字列形式で保存する場合は、インバリアントカルチャの <xref:System.Globalization.DateTimeFormatInfo> オブジェクトを使用して書式設定し、保存することができます。 その後、インバリアントカルチャの <xref:System.Globalization.DateTimeFormatInfo> オブジェクトを使用して解析できます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Globalization.DateTimeFormatInfo.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトが読み取り専用かどうかを示す値を取得します。</summary>
        <value><see langword="true" /> オブジェクトが読み取り専用の場合は <see cref="T:System.Globalization.DateTimeFormatInfo" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.ReadOnly(System.Globalization.DateTimeFormatInfo)" />
      </Docs>
    </Member>
    <Member MemberName="LongDatePattern">
      <MemberSignature Language="C#" Value="public string LongDatePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LongDatePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.LongDatePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property LongDatePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LongDatePattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LongDatePattern : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.LongDatePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>長い日付値のカスタム書式指定文字列を取得または設定します。</summary>
        <value>長い日付値のカスタム書式指定文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> プロパティは、<xref:System.DateTime.ToString%2A?displayProperty=nameWithType> および <xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType> メソッドの呼び出し、および "D" 標準書式指定文字列によって提供される複合書式指定文字列によって返される日付文字列のカルチャ固有の書式を定義します。 次の例は、"D" 標準書式指定文字列、<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> プロパティによって返されるカスタム書式指定文字列、およびカルチャ固有の日付の表現の間のリレーションシップを示しています。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.LongDatePattern#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/CS/longdatepattern1.cs#2)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.LongDatePattern#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/VB/longdatepattern1.vb#2)]  
  
 "Dddd, dd MMMM yyyy" などのカスタム書式指定文字列を作成するために組み合わせることができる個々のカスタム書式指定子については[、「カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照してください。  
  
 長い日付パターンの日付の区切り記号を、日付の区切り記号プレースホルダーを使用するのではなく、正確な文字列に設定する必要があります。 たとえば、MM-DD-yyyy というパターンを取得するには、長い日付パターンを "MM-DD-yyyy" に設定します。  
  
 このプロパティの値は、カルチャによって使用される暦が変更された場合に変更される可能性があります。 たとえば、次の例では、カルチャによって使用される <xref:System.Globalization.Calendar> オブジェクトが変更された場合に、アラビア語 (シリア) カルチャを表す <xref:System.Globalization.CultureInfo> オブジェクトの <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> プロパティがどのように変化するかを示しています。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.LongDatePattern#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/CS/longdatepattern2.cs#3)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.LongDatePattern#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/VB/longdatepattern2.vb#3)]  
  
   
  
## Examples  
 次の例では、いくつかのカルチャの <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> プロパティの値を表示します。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.LongDatePattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/CPP/dtfi_longdatepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.LongDatePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/CS/dtfi_longdatepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.LongDatePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/VB/dtfi_longdatepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時形式文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="LongTimePattern">
      <MemberSignature Language="C#" Value="public string LongTimePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LongTimePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.LongTimePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property LongTimePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LongTimePattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LongTimePattern : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.LongTimePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>長い時刻値のカスタム書式指定文字列を取得または設定します。</summary>
        <value>長い形式の時刻値の書式パターン。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> プロパティは、<xref:System.DateTime.ToString%2A?displayProperty=nameWithType> および <xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType> メソッドの呼び出し、および "T" 標準書式指定文字列によって提供される複合書式指定文字列によって返される日付文字列のカルチャ固有の書式を定義します。  
  
 長い時間パターンの時刻の区切り記号は、時間区切り記号のプレースホルダーを使用するのではなく、正確な文字列に設定することをお勧めします。 たとえば、h-mm-ss というパターンを取得するには、長い日付パターンを ".h-mm-ss" に設定します。  
  
   
  
## Examples  
 次の例では、いくつかのカルチャの <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> の値を表示します。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.LongTimePattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongTimePattern/CPP/dtfi_longtimepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.LongTimePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongTimePattern/CS/dtfi_longtimepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.LongTimePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongTimePattern/VB/dtfi_longtimepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時形式文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="MonthDayPattern">
      <MemberSignature Language="C#" Value="public string MonthDayPattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MonthDayPattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.MonthDayPattern" />
      <MemberSignature Language="VB.NET" Value="Public Property MonthDayPattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MonthDayPattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MonthDayPattern : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.MonthDayPattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>月と日の値のカスタム書式指定文字列を取得または設定します。</summary>
        <value>月と日の値のカスタム書式指定文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.MonthDayPattern%2A> プロパティは、<xref:System.DateTime.ToString%2A?displayProperty=nameWithType> および <xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType> メソッドの呼び出しによって返される日付文字列のカルチャ固有の書式を定義します。また、"m" および "M" 標準書式指定文字列を指定する複合書式指定文字列によって返されます。  
  
 このプロパティは、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティの値が変更された場合に影響を受けます。  
  
 月と日のパターンの日付の区切り記号を、日付の区切り記号のプレースホルダーを使用するのではなく、正確な文字列に設定することをお勧めします。 たとえば、MM-DD というパターンを取得するには、月と日のパターンを "MM-DD" に設定します。  
  
   
  
## Examples  
 次の例では、いくつかのカルチャの <xref:System.Globalization.DateTimeFormatInfo.MonthDayPattern%2A> の値を表示します。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.MonthDayPattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.MonthDayPattern/CPP/dtfi_monthdaypattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.MonthDayPattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.MonthDayPattern/CS/dtfi_monthdaypattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.MonthDayPattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.MonthDayPattern/VB/dtfi_monthdaypattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時形式文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="MonthGenitiveNames">
      <MemberSignature Language="C#" Value="public string[] MonthGenitiveNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] MonthGenitiveNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames" />
      <MemberSignature Language="VB.NET" Value="Public Property MonthGenitiveNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ MonthGenitiveNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MonthGenitiveNames : string[] with get, set" Usage="System.Globalization.DateTimeFormatInfo.MonthGenitiveNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトに関連付けられた月名の文字列配列を取得または設定します。</summary>
        <value>月名の文字列配列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 言語によっては、日付の一部である月の名前が genitive の場合に表示されます。 たとえば、ロシア語 (ロシア) または "ru-RU" の日付は、日の番号と genitive の月の名前 (1 Январяなど) で構成されます。  
  
 このプロパティが設定されている場合、配列は1次元で、ちょうど13個の要素を持つ必要があります。 <xref:System.Globalization.Calendar> オブジェクトは、13か月間の予定表に対応しています。 最初の要素 (インデックス0の要素) は、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティによって定義された年の最初の月を表します。<xref:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames%2A> プロパティを設定する場合は、<xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A> プロパティも設定する必要があります。  
  
   
  
## Examples  
 次の例では、日付と時刻の書式パターン、ネイティブのカレンダー名、および完全および省略名の月と曜日の名前を指定するいくつかのメソッドとプロパティを示します。  
  
 [!code-csharp[sys.glob.DTFI1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.DTFI1/cs/dtfi1.cs#1)]
 [!code-vb[sys.glob.DTFI1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.DTFI1/vb/dtfi1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">設定操作で、配列が多次元であるか、長さが厳密に 13 ではありません。</exception>
        <exception cref="T:System.ArgumentNullException">set 操作で、配列または配列の要素の 1 つが <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">set 操作において、現在の <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトが読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
      </Docs>
    </Member>
    <Member MemberName="MonthNames">
      <MemberSignature Language="C#" Value="public string[] MonthNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] MonthNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.MonthNames" />
      <MemberSignature Language="VB.NET" Value="Public Property MonthNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ MonthNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MonthNames : string[] with get, set" Usage="System.Globalization.DateTimeFormatInfo.MonthNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>月を表すカルチャ固有の完全名を格納している型 <see cref="T:System.String" /> の 1 次元配列を取得または設定します。</summary>
        <value>月を表すカルチャ固有の完全名を格納している型 <see cref="T:System.String" /> の 1 次元配列。 12 か月の暦では、配列の 13 番目の要素は空の文字列になります。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> の配列は、"January"、"February"、"March"、"April"、"May"、"June"、"July"、"August"、"September"、"October"、"November"、"December"、および "" を格納します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティが設定されている場合、配列は1次元で、ちょうど13個の要素を持つ必要があります。 <xref:System.Globalization.Calendar> オブジェクトは、13か月間の予定表に対応しています。 最初の要素 (インデックス0の要素) は、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティによって定義された年の最初の月を表します。  
  
 <xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A> プロパティを設定する場合は、<xref:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames%2A> プロパティも設定する必要があります。  
  
 カスタムパターンに "MMMM" という書式パターンが含まれている場合は、書式パターンに "MMMM" の代わりに <xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A> の値が <xref:System.DateTime.ToString%2A?displayProperty=nameWithType> 表示されます。  
  
 このプロパティは、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティの値が変更された場合に影響を受けます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.ArgumentException">プロパティが、多次元配列または配列長が厳密に 13 ではない配列に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames" />
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetMonthName(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="NativeCalendarName">
      <MemberSignature Language="C#" Value="public string NativeCalendarName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NativeCalendarName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NativeCalendarName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NativeCalendarName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NativeCalendarName : string" Usage="System.Globalization.DateTimeFormatInfo.NativeCalendarName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトに関連付けられた暦のネイティブ名を取得します。</summary>
        <value>現在の <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトに関連付けられているカルチャで使用される暦のネイティブ名がある場合は、その名前。暦のネイティブ名がない場合は、空の文字列 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、日付と時刻の書式パターン、ネイティブのカレンダー名、および完全および省略名の月と曜日の名前を指定するいくつかのメソッドとプロパティを示します。  
  
 [!code-csharp[sys.glob.DTFI1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.DTFI1/cs/dtfi1.cs#1)]
 [!code-vb[sys.glob.DTFI1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.DTFI1/vb/dtfi1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> が <see cref="T:System.Globalization.TaiwanCalendar" /> で、<see cref="P:System.Threading.Thread.CurrentCulture" /> が "zh-tw" ではない場合、<see cref="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" />、<see cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />、および <see cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" /> は空の文字列 ("") を返します。</para></block>
      </Docs>
    </Member>
    <Member MemberName="PMDesignator">
      <MemberSignature Language="C#" Value="public string PMDesignator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PMDesignator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.PMDesignator" />
      <MemberSignature Language="VB.NET" Value="Public Property PMDesignator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PMDesignator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PMDesignator : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.PMDesignator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>"post meridiem" (午後) の時間の文字列指定子を取得または設定します。</summary>
        <value>"post meridiem" (午後) の時間の文字列指定子。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> の既定値は "PM" です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A> プロパティは、12:00:00 (正午) から 23:59: 59.999 までまでのすべての時刻に使用されます。  
  
 カスタムパターンに "tt" という形式の書式パターンが含まれていて、時刻が正午より後の場合、<xref:System.DateTime.ToString%2A?displayProperty=nameWithType> は書式パターンに "tt" の代わりに <xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A> の値を表示します。 カスタムパターンに "t" という書式パターンが含まれている場合は、<xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A> の最初の文字のみが表示されます。 アプリケーションでは、AM と PM の区別を維持するために必要な言語に "tt" を使用する必要があります。 たとえば、日本語の場合、AM/PM 指定子の 2 番目の文字は異なりますが、先頭文字は同じです。  
  
 PM 指定子を使用しないカルチャの場合、このプロパティは空の文字列を返します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AMDesignator" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public static System.Globalization.DateTimeFormatInfo ReadOnly (System.Globalization.DateTimeFormatInfo dtfi);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.DateTimeFormatInfo ReadOnly(class System.Globalization.DateTimeFormatInfo dtfi) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.ReadOnly(System.Globalization.DateTimeFormatInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadOnly (dtfi As DateTimeFormatInfo) As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::DateTimeFormatInfo ^ ReadOnly(System::Globalization::DateTimeFormatInfo ^ dtfi);" />
      <MemberSignature Language="F#" Value="static member ReadOnly : System.Globalization.DateTimeFormatInfo -&gt; System.Globalization.DateTimeFormatInfo" Usage="System.Globalization.DateTimeFormatInfo.ReadOnly dtfi" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtfi" Type="System.Globalization.DateTimeFormatInfo" />
      </Parameters>
      <Docs>
        <param name="dtfi">ラップする <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクト。</param>
        <summary>読み取り専用 <see cref="T:System.Globalization.DateTimeFormatInfo" /> ラッパーを返します。</summary>
        <returns>読み取り専用の <see cref="T:System.Globalization.DateTimeFormatInfo" /> ラッパー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このラッパーは、`dtfi`の変更を防止します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="dtfi" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="RFC1123Pattern">
      <MemberSignature Language="C#" Value="public string RFC1123Pattern { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RFC1123Pattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.RFC1123Pattern" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RFC1123Pattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RFC1123Pattern { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RFC1123Pattern : string" Usage="System.Globalization.DateTimeFormatInfo.RFC1123Pattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>インターネット技術標準化委員会の (IETF) の Request for Comments (RFC) 1123 仕様に基づく時刻値のカスタム書式指定文字列を取得します。</summary>
        <value>IETF RFC 1123 仕様に準拠した時刻値のカスタム書式指定文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A> プロパティは、<xref:System.DateTime.ToString%2A?displayProperty=nameWithType> および <xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType> メソッドの呼び出しによって返される日付文字列のカルチャ固有の書式、および "r" および "R" 標準書式指定文字列を提供する複合書式指定文字列を定義します。  
  
 RFC1123 パターンは定義済みの標準を反映し、プロパティは読み取り専用です。 したがって、カルチャに関係なく、常に同じです。 カスタム書式指定文字列は、"ddd, dd MMM yyyy HH':'mm':'ss 'GMT'" です。  
  
   
  
## Examples  
 次の例では、いくつかのカルチャの Datetimeformatinfo.rfc1123pattern の値を表示します。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.RFC1123Pattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.RFC1123Pattern/CPP/dtfi_rfc1123pattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.RFC1123Pattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.RFC1123Pattern/CS/dtfi_rfc1123pattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.RFC1123Pattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.RFC1123Pattern/VB/dtfi_rfc1123pattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時形式文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="SetAllDateTimePatterns">
      <MemberSignature Language="C#" Value="public void SetAllDateTimePatterns (string[] patterns, char format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAllDateTimePatterns(string[] patterns, char format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns(System.String[],System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAllDateTimePatterns (patterns As String(), format As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAllDateTimePatterns(cli::array &lt;System::String ^&gt; ^ patterns, char format);" />
      <MemberSignature Language="F#" Value="member this.SetAllDateTimePatterns : string[] * char -&gt; unit" Usage="dateTimeFormatInfo.SetAllDateTimePatterns (patterns, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patterns" Type="System.String[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="format" Type="System.Char" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="patterns">カスタム書式指定文字列の配列。</param>
        <param name="format"><paramref name="patterns" /> パラメーターに指定されたカスタム書式指定文字列に関連付けられている標準書式指定文字列。</param>
        <summary>指定された標準書式指定文字列に対応する、カスタムの日付と時刻の書式指定文字列を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns%2A> メソッドは、特定の標準日時書式指定文字列に対応するカスタム書式指定文字列を定義します。 日付と時刻の書式指定メソッドの呼び出しに、`format`によって指定された標準の日時書式指定文字列が含まれている場合、メソッドは、`patterns` 配列内の最初の要素を使用して、結果の文字列の形式を定義します。  
  
> [!WARNING]
>  `Parse` メソッドと `TryParse` メソッドは、日付と時刻の文字列形式を解析するときに `patterns` 内のすべての文字列を完全には反復処理しません。 解析操作で特定の形式の日付と時刻の文字列を使用する必要がある場合は、有効な形式の配列を <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>、<xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>、<xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>、または <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29?displayProperty=nameWithType> メソッドに渡す必要があります。  
  
 標準の日時書式指定文字列 "d"、"D"、"t"、"T"、"y"、"Y" に対応するカスタム書式指定文字列を定義できます。 `format` の値がその他の標準書式指定文字列の場合、<xref:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns%2A> メソッドは <xref:System.ArgumentException>をスローします。  
  
 カスタム日時書式指定文字列に日付の区切り文字が含まれている場合は、"/" カスタム書式指定子を特定の日付の区切り記号に置き換える解析または書式設定メソッドに依存するのではなく、明示的に日付の区切り記号を指定する必要があります。 たとえば、MM-DD-yyyy パターンを取得するには、パターン "MM-DD-yyyy" を使用します。  
  
   
  
## Examples  
 次の例では、"en-us" (英語米国) カルチャを表す <xref:System.Globalization.CultureInfo> オブジェクトをインスタンス化し、それを使用して、"Y" 標準書式指定文字列を使用して、日付と時刻の文字列の配列を解析します。 次に、<xref:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns%2A> メソッドを使用して、新しいカスタム書式指定文字列を "Y" 標準書式指定文字列に関連付け、日付と時刻の文字列の配列を解析しようとします。 この例の出力は、新しいカスタム書式指定文字列が解析と書式設定の両方の操作で使用されていることを示しています。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.setalldatetimepatterns/cs/setalldatetimepatterns.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.setalldatetimepatterns/vb/setalldatetimepatterns.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="patterns" /> は <see langword="null" /> か、または長さ 0 の配列です。  
  
または 
 <paramref name="format" /> が有効な標準書式指定文字列でないか、パターンを設定できない標準書式指定文字列です。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="patterns" /> は、値が <see langword="null" /> である配列要素を含んでいます。</exception>
        <exception cref="T:System.InvalidOperationException">この <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="Overload:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時形式文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="ShortDatePattern">
      <MemberSignature Language="C#" Value="public string ShortDatePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ShortDatePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.ShortDatePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property ShortDatePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ShortDatePattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ShortDatePattern : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.ShortDatePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>短い日付値のカスタム書式指定文字列を取得または設定します。</summary>
        <value>短い形式の日付値のカスタム書式指定文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> プロパティは、<xref:System.DateTime.ToString%2A?displayProperty=nameWithType> および <xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType> メソッドの呼び出し、および "d" 標準書式指定文字列によって提供される複合書式指定文字列によって返される日付文字列のカルチャ固有の書式を定義します。  
  
 このプロパティは、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティの値が変更された場合に影響を受けます。  
  
   
  
## Examples  
 次の例では、<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> プロパティの値と、いくつかのカルチャの <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> プロパティを使用して書式設定された日付の値を表示します。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.ShortDatePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortDatePattern/CS/dtfi_shortdatepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.ShortDatePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortDatePattern/VB/dtfi_shortdatepattern.vb#1)]  
  
 次の例では、英語 (米国) カルチャの書式指定規則を表す <xref:System.Globalization.DateTimeFormatInfo> オブジェクトの <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> プロパティを変更します。 また、日付値も2回表示されます。最初に元の <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> プロパティを反映し、次に新しいプロパティ値を反映します。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.ShortDatePattern#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortDatePattern/CS/shortdatepattern1.cs#2)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.ShortDatePattern#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortDatePattern/VB/shortdatepattern1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時形式文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="ShortestDayNames">
      <MemberSignature Language="C#" Value="public string[] ShortestDayNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] ShortestDayNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.ShortestDayNames" />
      <MemberSignature Language="VB.NET" Value="Public Property ShortestDayNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ ShortestDayNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ShortestDayNames : string[] with get, set" Usage="System.Globalization.DateTimeFormatInfo.ShortestDayNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトに関連付けられた曜日の最も短い一意の省略名の文字列配列を取得または設定します。</summary>
        <value>曜日名の文字列配列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

既定の配列は、日曜日に開始されます。

## Examples  
 次の例では、日付と時刻の書式パターン、ネイティブのカレンダー名、および完全および省略名の月と曜日の名前を指定するいくつかのメソッドとプロパティを示します。  
  
 [!code-csharp[sys.glob.DTFI1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.DTFI1/cs/dtfi1.cs#1)]
 [!code-vb[sys.glob.DTFI1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.DTFI1/vb/dtfi1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">設定操作で、配列には厳密に 7 個の要素が含まれていません。</exception>
        <exception cref="T:System.ArgumentNullException">設定操作で、値配列または値配列の要素の 1 つが <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">set 操作において、現在の <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトが読み取り専用です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ShortTimePattern">
      <MemberSignature Language="C#" Value="public string ShortTimePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ShortTimePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.ShortTimePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property ShortTimePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ShortTimePattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ShortTimePattern : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.ShortTimePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>短い時刻値のカスタム書式指定文字列を取得または設定します。</summary>
        <value>短い形式の時刻値のカスタム書式指定文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A> プロパティは、<xref:System.DateTime.ToString%2A?displayProperty=nameWithType> および <xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType> メソッドの呼び出し、および "t" 標準書式指定文字列によって提供される複合書式指定文字列によって返される日付文字列のカルチャ固有の書式を定義します。  
  
 時刻の区切り記号のプレースホルダーを使用する代わりに、短い時刻パターンの時刻の区切り記号を正確な文字列に設定することをお勧めします。 たとえば、"h-mm-ss" というパターンを取得するには、短い時刻パターンを "h-mm-ss" に設定します。  
  
   
  
## Examples  
 次の例では、いくつかのカルチャの <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A> の値を表示します。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.ShortTimePattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortTimePattern/CPP/dtfi_shorttimepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.ShortTimePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortTimePattern/CS/dtfi_shorttimepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.ShortTimePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortTimePattern/VB/dtfi_shorttimepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時形式文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="SortableDateTimePattern">
      <MemberSignature Language="C#" Value="public string SortableDateTimePattern { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SortableDateTimePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SortableDateTimePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SortableDateTimePattern { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SortableDateTimePattern : string" Usage="System.Globalization.DateTimeFormatInfo.SortableDateTimePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>並べ替え可能な日付と時刻の値のカスタム書式指定文字列を取得します。</summary>
        <value>並べ替え可能な日付と時刻の値のカスタム書式指定文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern%2A> プロパティは、<xref:System.DateTime.ToString%2A?displayProperty=nameWithType> および <xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType> メソッドの呼び出し、および "s" 標準書式指定文字列によって提供される複合書式指定文字列によって返される日付文字列のカルチャ固有の書式を定義します。  
  
 <xref:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern%2A> プロパティによって返される書式指定文字列は、定義された標準 (ISO 8601) を反映し、プロパティは読み取り専用です。 したがって、カルチャに関係なく、常に同じです。 カスタム書式指定文字列は、"yyyy'-'MM'-'dd'T'HH':'mm':'ss" です。  
  
   
  
## Examples  
 次の例では、いくつかのカルチャの <xref:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern%2A> の値を表示します。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.SortableDateTimePattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.SortableDateTimePattern/CPP/dtfi_sortabledatetimepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.SortableDateTimePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.SortableDateTimePattern/CS/dtfi_sortabledatetimepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.SortableDateTimePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.SortableDateTimePattern/VB/dtfi_sortabledatetimepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時形式文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="info">To be added.</param>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeSeparator">
      <MemberSignature Language="C#" Value="public string TimeSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TimeSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TimeSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TimeSeparator : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.TimeSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>時刻の構成要素、つまり時間、分、および秒を区切る文字列を取得または設定します。</summary>
        <value>時刻の構成要素を区切る文字列。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> の既定値は、":" です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 カスタムパターンに ":" という書式パターンが含まれている場合、<xref:System.DateTime.ToString%2A?displayProperty=nameWithType> は、書式パターンに ":" の代わりに <xref:System.Globalization.DateTimeFormatInfo.TimeSeparator%2A> の値を表示します。  
  
 時刻の区切り記号は、<xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A> プロパティから派生します。 時刻の区切り記号は、時間区切り記号のプレースホルダーを使用するのではなく、短いまたは長い時間パターンで正確な文字列に設定することをお勧めします。 たとえば、"h-mm-ss" というパターンを取得するには、パターンを "h-mm-ss" に設定します。 この方法では、複数の種類の区切り記号を含む "h'h ' mm m ' ss's '" (3h 36m 12s) などのパターンを設定することもできます。 <xref:System.Globalization.DateTimeFormatInfo.TimeSeparator%2A> プロパティは、書式設定操作で結果文字列の時刻の区切り記号 (":" カスタム日時書式指定子) を置き換える文字列を定義します。 また、解析操作で時間区切り文字列を定義します。  
  
   
  
## Examples  
 次の例では、en-us カルチャの <xref:System.Globalization.CultureInfo> オブジェクトをインスタンス化し、その日付の区切り記号を "." に変更し、"t"、"T"、"F"、"f"、"G"、および "g" の標準書式指定文字列を使用して日付を表示します。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.TimeSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.timeseparator/cs/timeseparatorex.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.TimeSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.timeseparator/vb/timeseparatorex.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" />
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時形式文字列</related>
      </Docs>
    </Member>
    <Member MemberName="UniversalSortableDateTimePattern">
      <MemberSignature Language="C#" Value="public string UniversalSortableDateTimePattern { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UniversalSortableDateTimePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UniversalSortableDateTimePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UniversalSortableDateTimePattern { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UniversalSortableDateTimePattern : string" Usage="System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ISO 8601 での定義に従って、ユニバーサルで並べ替え可能な日付と時刻の文字列のカスタム書式指定文字列を取得します。</summary>
        <value>ユニバーサルで並べ替え可能な日付と時刻の文字列のカスタム書式指定文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern%2A> プロパティは、<xref:System.DateTime.ToString%2A?displayProperty=nameWithType> および <xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType> メソッドの呼び出し、および "u" 標準書式指定文字列によって提供される複合書式指定文字列によって返される日付文字列の形式を定義します。 このメソッドを使用すると、最後に協定世界時指定子 "Z" を使用して、日付と時刻を並べ替え可能な順序で表示できます。 この形式は、年、月、日、時、分、および秒の先頭のゼロを使用しているため、並べ替え可能です。 カスタム書式指定文字列 ("yyyy'-'mm'-'dd't'hh-' MM'-' dd HH ': ' MM ': ' Ss' Z ') は、カルチャまたは書式プロバイダーに関係なく同じです。  
  
 <xref:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern%2A> プロパティによって返される書式指定文字列は、定義された標準を反映し、プロパティは読み取り専用です。 したがって、カルチャに関係なく、常に同じです。 カスタム書式指定文字列は、"yyyy'-'MM'-'dd HH':'mm':'ss'Z'" です。  
  
   
  
## Examples  
 次の例では、いくつかのカルチャの <xref:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern%2A> の値を表示します。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern/CPP/dtfi_universalsortabledatetimepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern/CS/dtfi_universalsortabledatetimepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern/VB/dtfi_universalsortabledatetimepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の DateTime 書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="YearMonthPattern">
      <MemberSignature Language="C#" Value="public string YearMonthPattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string YearMonthPattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.YearMonthPattern" />
      <MemberSignature Language="VB.NET" Value="Public Property YearMonthPattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ YearMonthPattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.YearMonthPattern : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.YearMonthPattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>年と月の値のカスタム書式指定文字列を取得または設定します。</summary>
        <value>年と月の値のカスタム書式指定文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.YearMonthPattern%2A> プロパティは、標準書式指定文字列 "y" と "Y" を指定した複合書式指定文字列によって、<xref:System.DateTime.ToString%2A?displayProperty=nameWithType> および <xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType> メソッドの呼び出しによって返される日付文字列のカルチャ固有の書式を定義します。  
  
 このプロパティは、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティの値が変更された場合に影響を受けます。  
  
 日付の区切り記号を使用する代わりに、年の月のパターンの日付の区切り記号を正確な文字列に設定することをお勧めします。 たとえば、MM-yyyy というパターンを取得するには、年の月のパターンを "MM-yyyy" に設定します。  
  
   
  
## Examples  
 次の例では、いくつかのカルチャの <xref:System.Globalization.DateTimeFormatInfo.YearMonthPattern%2A> の値を表示します。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.YearMonthPattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.YearMonthPattern/CPP/dtfi_yearmonthpattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.YearMonthPattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.YearMonthPattern/CS/dtfi_yearmonthpattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.YearMonthPattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.YearMonthPattern/VB/dtfi_yearmonthpattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時形式文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
  </Members>
</Type>
