<Type Name="SortKey" FullName="System.Globalization.SortKey">
  <Metadata><Meta Name="ms.openlocfilehash" Value="af8658aa65b4a0c49ac7229980e839ed08315577" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78827630" /></Metadata><TypeSignature Language="C#" Value="public class SortKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SortKey extends System.Object" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.SortKey" />
  <TypeSignature Language="VB.NET" Value="Public Class SortKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class SortKey" />
  <TypeSignature Language="F#" Value="type SortKey = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit SortKey extends System.Object" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable beforefieldinit SortKey extends System.Object" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>文字列とその並べ替えキーとの対応付けの結果を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 2つの文字列のカルチャに依存した比較では、スクリプト、アルファベット、大文字と小文字、および発音区別度を含む、いくつかのカテゴリの並べ替えの重みを持つ文字列の各文字に依存します。 並べ替えキーは、特定の文字列のこれらの重みのリポジトリとして機能します。  
  
 <xref:System.Globalization.CompareInfo.GetSortKey%2A?displayProperty=nameWithType> メソッドは、指定された文字列内の文字のカルチャに依存したマッピングを反映する <xref:System.Globalization.SortKey> クラスのインスタンスを返します。 <xref:System.Globalization.SortKey> オブジェクトの値はキーデータであり、<xref:System.Globalization.SortKey.KeyData%2A> プロパティによって返されます。 このキーデータは、文字列、カルチャ固有の並べ替え規則、およびユーザー指定の比較オプションをエンコードする一連のバイトで構成されます。 並べ替えキーを使用した比較は、各並べ替えキーの対応するキーデータのビットごとの比較で構成されます。  たとえば、値 <xref:System.Globalization.CompareOptions.IgnoreCase?displayProperty=nameWithType>を指定して <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29> メソッドを呼び出すことによって並べ替えキーを作成した場合、並べ替えキーを使用する文字列比較操作では大文字と小文字が区別されません。  
  
 文字列の並べ替えキーを作成したら、静的な <xref:System.Globalization.SortKey.Compare%2A?displayProperty=nameWithType> メソッドを呼び出すことによって並べ替えキーを比較します。 このメソッドは、単純なバイト単位の比較を実行するため、<xref:System.String.Compare%2A?displayProperty=nameWithType> または <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> メソッドよりもはるかに高速です。  

> [!NOTE]
> [並べ替えの重みテーブル](https://www.microsoft.com/download/details.aspx?id=10921)をダウンロードできます。これには、Windows オペレーティングシステムの並べ替えおよび比較操作で使用される文字の重みに関する情報が含まれているテキストファイルのセット、[既定の Unicode 照合順序要素テーブル](https://www.unicode.org/Public/UCA/latest/allkeys.txt)、Linux および macOS の並べ替えの重みテーブルが含まれます。

## <a name="performance-considerations"></a>パフォーマンスに関する考慮事項  
 文字列比較を実行する場合、<xref:System.Globalization.SortKey.Compare%2A> メソッドと <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> メソッドは同じ結果を生成しますが、さまざまなシナリオを対象とします。  
  
 大まかに言えば、<xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> メソッドは、各文字列の並べ替えキーを生成し、比較を実行してから、並べ替えキーを破棄し、比較の結果を返します。 ただし、<xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> 方法では、比較を実行するための並べ替えキー全体が実際には生成されません。 代わりに、メソッドによって、各文字列の各テキスト要素 (基本文字、サロゲートペア、または組み合わせ文字シーケンス) のキーデータが生成されます。 次に、メソッドは、対応するテキスト要素のキーデータを比較します。 この操作は、比較の最終的な結果が決定されるとすぐに終了します。 並べ替えキーの情報は計算されますが、<xref:System.Globalization.SortKey> オブジェクトは作成されません。 この方法は、両方の文字列が1回比較される場合のパフォーマンスの点で経済的ですが、同じ文字列が何度も比較される場合はコストが高くなります。  
  
 <xref:System.Globalization.SortKey.Compare%2A> メソッドでは、比較を実行する前に、文字列ごとに <xref:System.Globalization.SortKey> オブジェクトを生成する必要があります。 この戦略は、<xref:System.Globalization.SortKey> オブジェクトの生成に費やした時間とメモリが原因で、最初の比較のパフォーマンスの面でコストが高くなります。 ただし、同じ並べ替えキーが何度も比較されると、経済的になります。  
  
 たとえば、データベーステーブルで、文字列ベースのインデックス列が指定した検索文字列に一致する行を検索するアプリケーションを記述するとします。 テーブルには何千もの行が含まれており、検索文字列を各行のインデックスと比較すると、長い時間がかかります。 このため、アプリケーションで行とそのインデックス列を格納すると、検索のパフォーマンスを向上させるために専用の列にインデックスの並べ替えキーが生成され、格納されます。 アプリケーションは、対象の行を検索するときに、検索文字列をインデックス文字列と比較するのではなく、検索文字列の並べ替えキーをインデックス文字列の並べ替えキーと比較します。  
  
## <a name="security-considerations"></a>セキュリティに関する考慮事項  
 <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType> メソッドは、指定された文字列と <xref:System.Globalization.CompareOptions> 値、および基になる <xref:System.Globalization.CompareInfo> オブジェクトに関連付けられているカルチャに基づいて、値を持つ <xref:System.Globalization.SortKey> オブジェクトを返します。 セキュリティの決定が文字列の比較または大文字と小文字の変更に依存している場合は、オペレーティングシステムのカルチャ設定に関係なく、操作の動作が一貫していることを確認するために、インバリアントカルチャの <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType> メソッドを使用する必要があります。  
  
 並べ替えキーを取得するには、次の手順に従います。  
  
1.  <xref:System.Globalization.CultureInfo.InvariantCulture?displayProperty=nameWithType> プロパティからインバリアントカルチャを取得します。  
  
2.  <xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=nameWithType> プロパティからインバリアントカルチャの <xref:System.Globalization.CompareInfo> オブジェクトを取得します。  
  
3.  <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType> メソッドを呼び出します。  
  
 <xref:System.Globalization.SortKey> オブジェクトの値を使用することは、LCMAP_SORTKEY 値を指定して Windows `LCMapString` メソッドを呼び出すことと同じです。 ただし、<xref:System.Globalization.SortKey> オブジェクトの場合、英語の文字の並べ替えキーは、韓国語の文字の並べ替えキーの前に配置されます。  
  
 <xref:System.Globalization.SortKey> オブジェクトをシリアル化することはできますが、<xref:System.AppDomain> オブジェクトをまたぐことはできません。 アプリケーションが <xref:System.Globalization.SortKey> オブジェクトをシリアル化する場合、.NET Framework の新しいバージョンが存在する場合、アプリケーションはすべての並べ替えキーを再生成する必要があります。  
  
 並べ替えキーの詳細については、「unicode Technical Standard #10」、unicode[コンソーシアムの web サイト](https://go.microsoft.com/fwlink/?linkid=37123)の「Unicode 照合アルゴリズム」を参照してください。  
  
   
  
## Examples  
 次の例では、"en-us" カルチャと "es" カルチャを使用した文字列 "llama" と、"en-us" と "es" の従来のカルチャを比較しています。  
  
 [!code-cpp[System.Globalization.SortKey.Compare#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.SortKey.Compare/CPP/sortkey_compare.cpp#1)]
 [!code-csharp[System.Globalization.SortKey.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.SortKey.Compare/CS/sortkey_compare.cs#1)]
 [!code-vb[System.Globalization.SortKey.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.SortKey.Compare/VB/sortkey_compare.vb#1)]  
  
 次の例は、<xref:System.Globalization.SortKey> クラスを使用して、大規模な配列の並べ替えと検索に大きく依存するアプリケーションのパフォーマンスを向上させる方法を示しています。 この例では、順序付けられていない名前の配列を作成します。この例では、13個の要素があります。 次に、各名前の並べ替えキーが並列配列に格納され、<xref:System.Array.Sort%28System.Array%2CSystem.Array%29?displayProperty=nameWithType> メソッドに渡されます。 結果は並べ替えられた配列になります。 この例では、配列内で3つの文字列を検索します。 検索文字列ごとに、<xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType> メソッドを呼び出して文字列の並べ替えキーを取得し、次に <xref:System.Array.FindIndex%2A?displayProperty=nameWithType> メソッドを呼び出して、並べ替えキーの配列内の並べ替えキーのインデックスを取得します。 名前と並べ替えキーの配列は並列であるため、返されるインデックスも `names` 配列内の名前のインデックスになります。  
  
 [!code-csharp[System.Globalization.SortKey.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.sortkey.class/cs/sortkey1.cs#1)]
 [!code-vb[System.Globalization.SortKey.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.sortkey.class/vb/sortkey1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Globalization.CompareInfo.GetSortKey(System.String,System.Globalization.CompareOptions)" />
    <altmember cref="P:System.Globalization.SortKey.KeyData" />
  </Docs>
  <Members>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (System.Globalization.SortKey sortkey1, System.Globalization.SortKey sortkey2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(class System.Globalization.SortKey sortkey1, class System.Globalization.SortKey sortkey2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortKey.Compare(System.Globalization.SortKey,System.Globalization.SortKey)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (sortkey1 As SortKey, sortkey2 As SortKey) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::Globalization::SortKey ^ sortkey1, System::Globalization::SortKey ^ sortkey2);" />
      <MemberSignature Language="F#" Value="static member Compare : System.Globalization.SortKey * System.Globalization.SortKey -&gt; int" Usage="System.Globalization.SortKey.Compare (sortkey1, sortkey2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sortkey1" Type="System.Globalization.SortKey" />
        <Parameter Name="sortkey2" Type="System.Globalization.SortKey" />
      </Parameters>
      <Docs>
        <param name="sortkey1">比較対象の第 1 並べ替えキー。</param>
        <param name="sortkey2">比較対象の第 2 並べ替えキー。</param>
        <summary>2 つの並べ替えキーを比較します。</summary>
        <returns><paramref name="sortkey1" /> および <paramref name="sortkey2" /> の間のリレーションシップを示す符号付き整数。  
  
 <list type="table"><listheader><term> 値 
 </term><description> 条件 
 </description></listheader><item><term> ゼロより小さい 
 </term><description><paramref name="sortkey1" /> は <paramref name="sortkey2" /> より小さい値です。  
  
 </description></item><item><term> ゼロ 
 </term><description><paramref name="sortkey1" /> と <paramref name="sortkey2" /> が等価です。  
  
 </description></item><item><term> ゼロより大きい 
 </term><description><paramref name="sortkey1" /> が <paramref name="sortkey2" /> より大きくなっています。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.SortKey.Compare%2A> メソッドは、`sortkey1` パラメーターと `sortkey2` パラメーターの <xref:System.Globalization.SortKey.KeyData%2A> プロパティを比較します。 メソッドは、<xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> メソッドと同じ結果を生成します。  
  
 <xref:System.Globalization.SortKey.Compare%2A> メソッドと並べ替えキーの比較の詳細については、<xref:System.Globalization.SortKey> クラスに関するトピックを参照してください。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Globalization.SortKey.Compare%2A> メソッドとそれに相当する <xref:System.Globalization.CompareInfo.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType> メソッドを使用して、2つの文字列を比較します。  
  
 [!code-csharp[sys.glob.sortkey.compare#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.sortkey.compare/cs/skcmp.cs#1)]
 [!code-vb[sys.glob.sortkey.compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.sortkey.compare/vb/skcmp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="sortkey1" /> または <paramref name="sortkey2" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortKey.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="sortKey.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">現在の <see cref="T:System.Globalization.SortKey" /> オブジェクトと比較するオブジェクト。</param>
        <summary>指定したオブジェクトが、現在の <see cref="T:System.Globalization.SortKey" /> オブジェクトと等しいかどうかを判断します。</summary>
        <returns><see langword="true" /> パラメーターが現在の <paramref name="value" /> オブジェクトと等しい場合は <see cref="T:System.Globalization.SortKey" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 2つの <xref:System.Globalization.SortKey> オブジェクトは、<xref:System.Globalization.SortKey.KeyData%2A> プロパティが等しい場合に等しいと見なされます。  
  
 このメソッドは、<xref:System.Object.Equals%2A?displayProperty=nameWithType> をオーバーライドします。  
  
   
  
## Examples  
 次のコード例は、異なる <xref:System.Globalization.SortKey> オブジェクトと比較した場合の <xref:System.Globalization.SortKey.Equals%2A> の結果を示しています。  
  
 [!code-cpp[System.Globalization.SortKey.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.SortKey.Equals/CPP/sortkey_equals.cpp#1)]
 [!code-csharp[System.Globalization.SortKey.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.SortKey.Equals/CS/sortkey_equals.cs#1)]
 [!code-vb[System.Globalization.SortKey.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.SortKey.Equals/VB/sortkey_equals.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="value" /> が <see langword="null" /> です。</exception>
        <altmember cref="M:System.Object.Equals(System.Object)" />
        <altmember cref="P:System.Globalization.SortKey.KeyData" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortKey.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="sortKey.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.SortKey" /> オブジェクトのハッシュ関数として機能します。ハッシュ アルゴリズムや、ハッシュ テーブルのようなデータ構造での使用に適しています。</summary>
        <returns>現在の <see cref="T:System.Globalization.SortKey" /> オブジェクトのハッシュ コード。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、<xref:System.Globalization.SortKey.Equals%2A> メソッドによって等しいと評価された 2 つのオブジェクトに対して同じハッシュ コードを生成します。  
  
 このメソッドは、<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> をオーバーライドします。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Globalization.SortKey.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="KeyData">
      <MemberSignature Language="C#" Value="public virtual byte[] KeyData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] KeyData" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.SortKey.KeyData" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property KeyData As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;System::Byte&gt; ^ KeyData { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyData : byte[]" Usage="System.Globalization.SortKey.KeyData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.SortKey" /> オブジェクトを表すバイト配列を取得します。</summary>
        <value>現在の <see cref="T:System.Globalization.SortKey" /> オブジェクトを表すバイト配列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文字列の比較で <xref:System.Globalization.SortKey.KeyData%2A> プロパティによって返されるデータの使用方法の詳細については、<xref:System.Globalization.SortKey> クラスに関するトピックを参照してください。  
  
   
  
## Examples  
 次のコード例では、大文字小文字を区別する並べ替えキーと大文字と小文字を区別しない並べ替えキーの元の文字列と、それと等価な文字列およびキーデータを表示します。  
  
 [!code-csharp[sys.glob.sortkey.tostring#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.sortkey.tostring/cs/ts.cs#1)]
 [!code-vb[sys.glob.sortkey.tostring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.sortkey.tostring/vb/ts.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalString">
      <MemberSignature Language="C#" Value="public virtual string OriginalString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OriginalString" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.SortKey.OriginalString" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property OriginalString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ OriginalString { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OriginalString : string" Usage="System.Globalization.SortKey.OriginalString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.SortKey" /> オブジェクトを作成するために使用する元の文字列を取得します。</summary>
        <value>現在の <see cref="T:System.Globalization.SortKey" /> オブジェクトを作成するために使用する元の文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例では、大文字小文字を区別する並べ替えキーと大文字と小文字を区別しない並べ替えキーの元の文字列と、それと等価な文字列およびキーデータを表示します。  
  
 [!code-csharp[sys.glob.sortkey.tostring#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.sortkey.tostring/cs/ts.cs#1)]
 [!code-vb[sys.glob.sortkey.tostring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.sortkey.tostring/vb/ts.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortKey.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="sortKey.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.SortKey" /> オブジェクトを表す文字列を返します。</summary>
        <returns>現在の <see cref="T:System.Globalization.SortKey" /> オブジェクトを表す文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 戻り値は、文字列 "SortKey-"、現在の <xref:System.Globalization.SortKey> オブジェクトのカルチャ識別子と比較オプション、および <xref:System.Globalization.SortKey.OriginalString%2A> プロパティの値を連結したものです。  
  
 このメソッドは、<xref:System.Object.ToString%2A?displayProperty=nameWithType> をオーバーライドします。  
  
   
  
## Examples  
 次のコード例では、元の文字列、大文字と小文字を区別する並べ替えキーの <xref:System.Globalization.SortKey.ToString%2A> メソッドによって生成される文字列、大文字と小文字を区別し、大文字と小文字を区別しない並べ替えキーのキーデータを表示します。  
  
 [!code-csharp[sys.glob.sortkey.tostring#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.sortkey.tostring/cs/ts.cs#1)]
 [!code-vb[sys.glob.sortkey.tostring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.sortkey.tostring/vb/ts.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
  </Members>
</Type>
