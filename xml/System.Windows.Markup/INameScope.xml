<Type Name="INameScope" FullName="System.Windows.Markup.INameScope">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e264d8479dec6164dddc623658b41a77d5ae6fd2" /><Meta Name="ms.sourcegitcommit" Value="8b09499854b5b7b909802126edc1f1fca0054c10" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/01/2020" /><Meta Name="ms.locfileid" Value="76955977" /></Metadata><TypeSignature Language="C#" Value="public interface INameScope" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract INameScope" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.INameScope" />
  <TypeSignature Language="VB.NET" Value="Public Interface INameScope" />
  <TypeSignature Language="C++ CLI" Value="public interface class INameScope" />
  <TypeSignature Language="F#" Value="type INameScope = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="d5d2a-101">特定の XAML 名前スコープ内で要素の名前にアクセスする方法、およびその XAML 名前スコープ内で名前の一意性を確保する方法のコントラクトを定義します。</span><span class="sxs-lookup"><span data-stu-id="d5d2a-101">Defines a contract for how names of elements should be accessed within a particular XAML namescope, and how to enforce uniqueness of names within that XAML namescope.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5d2a-102">このインターフェイスは、テンプレートまたは遅延比喩を通じて再利用することを意図した子要素を持つクラスによって実装されます。</span><span class="sxs-lookup"><span data-stu-id="d5d2a-102">This interface is implemented by classes that have child elements that are intended to be reused through the template or defer metaphor.</span></span> <span data-ttu-id="d5d2a-103">テンプレート、ファクトリ、および類似の構成体には、メインオブジェクトグラフとルート XAML とは別の一意の XAML 名前スコープが必要です。</span><span class="sxs-lookup"><span data-stu-id="d5d2a-103">Templates, factories and similar constructs must have unique XAML namescopes that are separate from a main object graph and root XAML.</span></span> <span data-ttu-id="d5d2a-104">ここでの原則は、これらの子要素から作成されたオブジェクトがアプリケーションのオブジェクトグラフに導入されるときに名前の競合が発生しないようにすることです。これにより、名前識別子に依存する DOM 操作および XAML 参照手法が名前に依存する可能性があります。各 XAML 名前スコープの一意性。</span><span class="sxs-lookup"><span data-stu-id="d5d2a-104">The principle here is that there should be no name collisions when objects created from those child elements are introduced to an application's object graph, and so that DOM operations and XAML reference techniques that rely on the name identifier can rely on name uniqueness in each XAML namescope.</span></span>  
  
 <span data-ttu-id="d5d2a-105">以前のバージョンの .NET Framework では、このインターフェイスは WPF 固有のアセンブリ WindowsBase に存在していました。</span><span class="sxs-lookup"><span data-stu-id="d5d2a-105">In previous versions of the .NET Framework, this interface existed in the WPF-specific assembly WindowsBase.</span></span> <span data-ttu-id="d5d2a-106">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]では、<xref:System.Windows.Markup.INameScope> は App.xaml アセンブリにあります。</span><span class="sxs-lookup"><span data-stu-id="d5d2a-106">In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.INameScope> is in the System.Xaml assembly.</span></span> <span data-ttu-id="d5d2a-107">詳細については、「 [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5d2a-107">For more information, see [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).</span></span>  
  
## <a name="wpf-usage-notes"></a><span data-ttu-id="d5d2a-108">WPF の使用上の注意</span><span class="sxs-lookup"><span data-stu-id="d5d2a-108">WPF Usage Notes</span></span>  
 <span data-ttu-id="d5d2a-109">このインターフェイスは <xref:System.Windows.NameScope>WPF クラスによって実装されます。</span><span class="sxs-lookup"><span data-stu-id="d5d2a-109">This interface is implemented by the WPF class <xref:System.Windows.NameScope>.</span></span> <span data-ttu-id="d5d2a-110">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] の XAML 名前スコープ操作のほとんどは <xref:System.Windows.NameScope> インスタンスを使用して動作しますが、情報は <xref:System.Windows.Markup.INameScope> 参照を使用して内部的に通信することがあります。</span><span class="sxs-lookup"><span data-stu-id="d5d2a-110">Most XAML namescope operations in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] operate by using <xref:System.Windows.NameScope> instances, but information is occasionally communicated internally by using <xref:System.Windows.Markup.INameScope> references.</span></span>  
  
 <span data-ttu-id="d5d2a-111">ファクトリまたは遅延の比喩を XAML 表現と組み合わせて使用する WPF クラスの例としては、<xref:System.Windows.Style> と <xref:System.Windows.FrameworkTemplate>があります。</span><span class="sxs-lookup"><span data-stu-id="d5d2a-111">Examples of WPF classes that use a factory or defer metaphor combined with XAML representation are <xref:System.Windows.Style> and <xref:System.Windows.FrameworkTemplate>.</span></span> <span data-ttu-id="d5d2a-112">これらの実装は、通常、<xref:System.Windows.NameScope> クラスから使用できるインターフェイスメソッドの明示的なバージョンに依存しています。</span><span class="sxs-lookup"><span data-stu-id="d5d2a-112">These implementations usually rely on the explicit versions of the interface methods available from the <xref:System.Windows.NameScope> class.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.NameScope" />
    <altmember cref="T:System.Windows.Markup.INameScopeDictionary" />
    <related type="Article" href="https://msdn.microsoft.com/library/b7e61222-e8cf-48d2-acd0-6df3b7685d48"><span data-ttu-id="d5d2a-113">x:Name 属性</span><span class="sxs-lookup"><span data-stu-id="d5d2a-113">x:Name Attribute</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="FindName">
      <MemberSignature Language="C#" Value="public object FindName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FindName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.FindName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindName (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member FindName : string -&gt; obj" Usage="iNameScope.FindName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="d5d2a-114">要求されたオブジェクトの名前の識別子。</span><span class="sxs-lookup"><span data-stu-id="d5d2a-114">The name identifier for the object being requested.</span></span></param>
        <summary><span data-ttu-id="d5d2a-115">指定された識別名を持つオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="d5d2a-115">Returns an object that has the provided identifying name.</span></span></summary>
        <returns><span data-ttu-id="d5d2a-116">見つかった場合はオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5d2a-116">The object, if found.</span></span> <span data-ttu-id="d5d2a-117">その名前のオブジェクトが見つからなかった場合は <see langword="null" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="d5d2a-117">Returns <see langword="null" /> if no object of that name was found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5d2a-118">XAML マークアップ内の有効な名前文字列は、「 [XamlName 文法](~/docs/framework/xaml-services/xamlname-grammar.md)」に記載されている要件と一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5d2a-118">Valid name strings in XAML markup must match the requirements documented in [XamlName Grammar](~/docs/framework/xaml-services/xamlname-grammar.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.NameScope" />
        <related type="Article" href="https://msdn.microsoft.com/library/b7e61222-e8cf-48d2-acd0-6df3b7685d48"><span data-ttu-id="d5d2a-119">x:Name 属性</span><span class="sxs-lookup"><span data-stu-id="d5d2a-119">x:Name Attribute</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RegisterName">
      <MemberSignature Language="C#" Value="public void RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterName (name As String, scopedElement As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterName(System::String ^ name, System::Object ^ scopedElement);" />
      <MemberSignature Language="F#" Value="abstract member RegisterName : string * obj -&gt; unit" Usage="iNameScope.RegisterName (name, scopedElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scopedElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="d5d2a-120">登録する名前。</span><span class="sxs-lookup"><span data-stu-id="d5d2a-120">The name to register.</span></span></param>
        <param name="scopedElement"><span data-ttu-id="d5d2a-121">指定した <paramref name="name" /> が参照する特定の要素。</span><span class="sxs-lookup"><span data-stu-id="d5d2a-121">The specific element that the provided <paramref name="name" /> refers to.</span></span></param>
        <summary><span data-ttu-id="d5d2a-122">現在の XAML 名前スコープに指定された名前を登録します。</span><span class="sxs-lookup"><span data-stu-id="d5d2a-122">Registers the provided name into the current XAML namescope.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5d2a-123">XAML 名前スコープ内の重複する名前は許可されません。</span><span class="sxs-lookup"><span data-stu-id="d5d2a-123">Duplicate names in a XAML namescope are not permitted.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="d5d2a-124">重複する名前の登録を許可しないでください。</span><span class="sxs-lookup"><span data-stu-id="d5d2a-124">Do not permit duplicate names to be registered.</span></span> <span data-ttu-id="d5d2a-125">入力 <paramref name="name" /> が、XAML 名前スコープの内部コレクション表現内の既存の要素に既に割り当てられている場合 (<paramref name="scopedElement" />と同じ場合でも)、例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d5d2a-125">If the input <paramref name="name" /> is already assigned to an existing element in the internal collection representation of the XAML namescope (even if it is the same as <paramref name="scopedElement" />), throw an exception.</span></span>  
  
<span data-ttu-id="d5d2a-126">また、指定された名前が[XamlName 文法](~/docs/framework/xaml-services/xamlname-grammar.md)に準拠していない場合は、例外をスローすることも検討してください。</span><span class="sxs-lookup"><span data-stu-id="d5d2a-126">Also consider throwing an exception if the provided name does not conform to [XamlName Grammar](~/docs/framework/xaml-services/xamlname-grammar.md).</span></span></para></block>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="UnregisterName">
      <MemberSignature Language="C#" Value="public void UnregisterName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.UnregisterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnregisterName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member UnregisterName : string -&gt; unit" Usage="iNameScope.UnregisterName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="d5d2a-127">登録解除する名前。</span><span class="sxs-lookup"><span data-stu-id="d5d2a-127">The name to unregister.</span></span></param>
        <summary><span data-ttu-id="d5d2a-128">指定された名前を現在の XAML 名前スコープから登録解除します。</span><span class="sxs-lookup"><span data-stu-id="d5d2a-128">Unregisters the provided name from the current XAML namescope.</span></span></summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="d5d2a-129">入力名が存在しない場合は、例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d5d2a-129">If the input name does not exist, throw an exception.</span></span>  
  
 <span data-ttu-id="d5d2a-130">同じ名前が今後再登録される可能性があるように、名前と、それが参照する以前に登録した要素を XAML 名前スコープのコレクション表現から削除する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5d2a-130">You should remove the name and the previously registered element it refers to from the collection representation of the XAML namescope, so that the same name could potentially be registered again in the future.</span></span></para></block>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
  </Members>
</Type>
