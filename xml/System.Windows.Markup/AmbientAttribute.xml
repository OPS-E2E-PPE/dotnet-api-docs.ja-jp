<Type Name="AmbientAttribute" FullName="System.Windows.Markup.AmbientAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b9f064ab388c1604ef1904a8a9e8feea70c007c6" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78840539" /></Metadata><TypeSignature Language="C#" Value="public sealed class AmbientAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AmbientAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.AmbientAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AmbientAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class AmbientAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type AmbientAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="WindowsBase" FromVersion="4.0.0.0" To="System.Xaml" ToVersion="4.0.0.0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method | System.AttributeTargets.Property, Inherited=true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Property, Inherited=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="28f4b-101">プロパティまたは型をアンビエントとして扱うように指定しています。</span><span class="sxs-lookup"><span data-stu-id="28f4b-101">Specifies that a property or type should be treated as ambient.</span></span> <span data-ttu-id="28f4b-102">アンビエントの概念は XAML プロセッサがメンバーの型の所有者を確認する方法と関連します。</span><span class="sxs-lookup"><span data-stu-id="28f4b-102">The ambient concept relates to how XAML processors determine type owners of members.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="28f4b-103">アンビエントプロパティは、オブジェクトグラフを作成するときにパーサーコンテキストで値を使用できると想定されるプロパティですが、作成される直前の XAML ノードセットのために一般的な型メンバーの参照が中断されます。</span><span class="sxs-lookup"><span data-stu-id="28f4b-103">An ambient property is a property where the value is expected to be available in the parser context when creating an object graph, but where typical type-member lookup is suspended for purposes of the immediate XAML node set being created.</span></span> <span data-ttu-id="28f4b-104">アンビエント概念には、主に次の2つのシナリオがあります。</span><span class="sxs-lookup"><span data-stu-id="28f4b-104">There are two main scenarios for the ambient concept:</span></span>  
  
-   <span data-ttu-id="28f4b-105">同じオブジェクトの他のいくつかのプロパティは、オブジェクトプロパティの参照がどのように動作するかを指定します。</span><span class="sxs-lookup"><span data-stu-id="28f4b-105">Some other property of the same object influences and qualifies how that object-property lookup should work.</span></span>  
  
-   <span data-ttu-id="28f4b-106">プロパティは、より大きな遅延メカニズムを表し、メンバー値を検索するためのアンビエント機能は、現在のオブジェクト内に含まれるすべてのオブジェクトに拡張されます。</span><span class="sxs-lookup"><span data-stu-id="28f4b-106">The property represents a larger deferral mechanism and the ambient capabilities for looking up a member value extend to all objects contained within the current object.</span></span>  
  
 <span data-ttu-id="28f4b-107">この属性は、アンビエントプロパティの検索動作を有効にするコンテナーが想定されている特定のプロパティに適用できます。また、プロパティに対してその値型のすべてのケースでアンビエントプロパティの動作を有効にするためにクラスに適用することもできます。</span><span class="sxs-lookup"><span data-stu-id="28f4b-107">This attribute can be applied to specific properties that have expected containers that enable an ambient property lookup behavior, or can be applied to a class to enable the ambient property behavior in all cases of that value type for a property.</span></span>  
  
 <span data-ttu-id="28f4b-108"><xref:System.Windows.Markup.AmbientAttribute> は、XAML アタッチ可能なプロパティをアンビエントとして属性をサポートするために、CLR メソッドにも適用できます。</span><span class="sxs-lookup"><span data-stu-id="28f4b-108"><xref:System.Windows.Markup.AmbientAttribute> can also be applied to a CLR method, to support attributing a XAML attachable property as ambient.</span></span> <span data-ttu-id="28f4b-109">これは、CLR の実装では、XAML の添付プロパティが実装されているか、`get` および `set` メソッドを持つアクセサーパターンとしてリフレクションに表されるため、必要になる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="28f4b-109">This is potentially necessary because in a CLR implementation a XAML attached property is implemented/represented to reflection as an accessor pattern with `get` and `set` methods.</span></span> <span data-ttu-id="28f4b-110">属性に対する実際の CLR プロパティが存在しないため、<xref:System.AttributeTargets> の使用を `Property` に制限しても、アタッチ可能なメンバーをアンビエントとして指定することはできません。</span><span class="sxs-lookup"><span data-stu-id="28f4b-110">No actual CLR property to attribute exists, so restricting usage for <xref:System.AttributeTargets> to `Property` would not have enabled specifying an attachable member as ambient.</span></span> <span data-ttu-id="28f4b-111">アンビエントとして報告するアタッチ可能なメンバーの場合は、`get` アクセサーを属性として指定します。</span><span class="sxs-lookup"><span data-stu-id="28f4b-111">For an attachable member that you want to report as ambient, attribute the `get` accessor.</span></span> <span data-ttu-id="28f4b-112">アタッチ可能なメンバーのメソッドを明示的にサポートしていないメソッドは、属性を使用しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="28f4b-112">You should not attempt to attribute methods that are not specifically support methods of attachable members.</span></span>  
  
 <span data-ttu-id="28f4b-113">以前のバージョンの .NET Framework では、このクラスは WPF 固有のアセンブリ WindowsBase に存在していました。</span><span class="sxs-lookup"><span data-stu-id="28f4b-113">In previous versions of the .NET Framework, this class existed in the WPF-specific assembly WindowsBase.</span></span> <span data-ttu-id="28f4b-114">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]では、<xref:System.Windows.Markup.AmbientAttribute> は App.xaml アセンブリにあります。</span><span class="sxs-lookup"><span data-stu-id="28f4b-114">In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.AmbientAttribute> is in the System.Xaml assembly.</span></span> <span data-ttu-id="28f4b-115">詳細については、「 [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="28f4b-115">For more information, see [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).</span></span>  
  
 <span data-ttu-id="28f4b-116">アンビエント型 (<xref:System.Windows.Markup.AmbientAttribute> が型レベルで適用される) は、プロパティの型を順序どおりに解決する必要がある特定の XAML 処理状況に使用できます。</span><span class="sxs-lookup"><span data-stu-id="28f4b-116">Ambient types (types where <xref:System.Windows.Markup.AmbientAttribute> is applied at type level) can be used for certain XAML processing situations where the type of a property needs to be resolved out of order.</span></span>  
  
## <a name="object-writer-scenarios"></a><span data-ttu-id="28f4b-117">オブジェクトライターのシナリオ</span><span class="sxs-lookup"><span data-stu-id="28f4b-117">Object Writer Scenarios</span></span>  
 <span data-ttu-id="28f4b-118">XAML オブジェクトライターを定義するときに、<xref:System.Windows.Markup.AmbientAttribute> が適用されるプロパティ、メソッド、または型が見つかった場合は、通常、サービスにアクセスして、オブジェクトの書き込みに必要なアンビエントプロパティの参照動作を決定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="28f4b-118">If you are defining a XAML object writer, and you encounter a property, method or type where <xref:System.Windows.Markup.AmbientAttribute> is applied, you typically must access a service to determine the intended ambient property lookup behavior that is needed for writing out objects.</span></span> <span data-ttu-id="28f4b-119">詳細については、<xref:System.Xaml.IAmbientProvider> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="28f4b-119">For more information, see <xref:System.Xaml.IAmbientProvider>.</span></span>  
  
## <a name="value-converters"></a><span data-ttu-id="28f4b-120">値コンバーター</span><span class="sxs-lookup"><span data-stu-id="28f4b-120">Value Converters</span></span>  
 <span data-ttu-id="28f4b-121">型コンバーターまたはマークアップ拡張機能は、間接的な型のマッピングを表すプロパティ (修飾の有無にかかわらず、文字列名によってメンバーまたは型を指定するプロパティなど) を処理するために、アンビエント情報を知る必要がある場合があります。</span><span class="sxs-lookup"><span data-stu-id="28f4b-121">Type converters or markup extensions might need to know the ambient information in order to process properties that represent indirect type mappings, such as properties that specify members or types by string names with or without qualification.</span></span> <span data-ttu-id="28f4b-122">このシナリオでは、<xref:System.Windows.Markup.AmbientAttribute> は、値コンバーターのコードロジックに直接使用するためのものではありません。</span><span class="sxs-lookup"><span data-stu-id="28f4b-122">In this scenario, <xref:System.Windows.Markup.AmbientAttribute> is not intended to be used directly for value converter code logic.</span></span> <span data-ttu-id="28f4b-123">代わりに、値コンバーターは XAML ライターの処理動作に依存する必要があります。これにより、呼び出されたときに、そのサービスコンテキストで <xref:System.Xaml.IAmbientProvider> が値コンバーターメソッドに渡されます。</span><span class="sxs-lookup"><span data-stu-id="28f4b-123">Rather, the value converter should rely on the XAML writer processing behavior, which will pass <xref:System.Xaml.IAmbientProvider> in its service contexts to your value converter methods when called.</span></span>  
  
## <a name="wpf-scenarios-for-ambientattribute"></a><span data-ttu-id="28f4b-124">AmbientAttribute の WPF シナリオ</span><span class="sxs-lookup"><span data-stu-id="28f4b-124">WPF Scenarios for AmbientAttribute</span></span>  
  
-   <span data-ttu-id="28f4b-125"><xref:System.Windows.Style> (<xref:System.Windows.Style.TargetType%2A>) のプロパティは、<xref:System.Windows.Setter.Property%2A?displayProperty=nameWithType> 値内のプロパティ名のバッキング参照を検索するために必要なプロパティ名参照を修飾できます。</span><span class="sxs-lookup"><span data-stu-id="28f4b-125">A property of a <xref:System.Windows.Style> (<xref:System.Windows.Style.TargetType%2A>) can qualify the necessary property name lookups that are needed to find the backing references for property names in <xref:System.Windows.Setter.Property%2A?displayProperty=nameWithType> values.</span></span>  
  
-   <span data-ttu-id="28f4b-126">`Resources` プロパティ (<xref:System.Windows.ResourceDictionary>の項目) およびテンプレートコンテンツ内のすべてのコンテンツは、他のピアに値としてアクセスできる必要があります。</span><span class="sxs-lookup"><span data-stu-id="28f4b-126">All content within a `Resources` property (items of a <xref:System.Windows.ResourceDictionary>) as well as template content, should be able to access other peers as values.</span></span> <span data-ttu-id="28f4b-127">アンビエントとして `Resources` プロパティ全体を宣言すると、WPF XAML パーサーでこれを有効にするロジックが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="28f4b-127">Declaring the entire `Resources` property as ambient invokes logic that enables this in the WPF XAML parser.</span></span>  
  
 <span data-ttu-id="28f4b-128">型レベルで <xref:System.Windows.Markup.AmbientAttribute> を設定するシナリオの例については、「<xref:System.Windows.ResourceDictionary>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="28f4b-128">See <xref:System.Windows.ResourceDictionary> for an example of a scenario for setting <xref:System.Windows.Markup.AmbientAttribute> at type level.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Xaml.XamlMember.IsAmbient" />
    <altmember cref="T:System.Xaml.XamlMember" />
    <altmember cref="T:System.Xaml.IAmbientProvider" />
    <related type="Article" href="https://msdn.microsoft.com/library/5dfb299a-b6e2-41b8-8694-e6ac987547f1"><span data-ttu-id="28f4b-129">カスタム型およびライブラリの XAML 関連の CLR 属性</span><span class="sxs-lookup"><span data-stu-id="28f4b-129">XAML-Related CLR Attributes For Custom Types and Libraries</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/c2667cbd-2f46-4a7f-9dfc-53696e35e8e4"><span data-ttu-id="28f4b-130">.NET Framework XAML サービスで使用するためのカスタム型の定義</span><span class="sxs-lookup"><span data-stu-id="28f4b-130">Defining Custom Types for Use with .NET Framework XAML Services</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/0e11f386-808c-4eae-9ba6-029ad7ba2211"><span data-ttu-id="28f4b-131">NET XAML サービスの概念説明ドキュメント</span><span class="sxs-lookup"><span data-stu-id="28f4b-131">NET XAML Services Conceptual Documentation</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AmbientAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.AmbientAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AmbientAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="28f4b-132"><see cref="T:System.Windows.Markup.AmbientAttribute" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="28f4b-132">Initializes a new instance of the <see cref="T:System.Windows.Markup.AmbientAttribute" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
