<Type Name="XamlReader" FullName="System.Windows.Markup.XamlReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6a8046a2e744729cfa54c0517e306269476d2ca1" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82353840" /></Metadata><TypeSignature Language="C#" Value="public class XamlReader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlReader extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.XamlReader" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlReader" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlReader" />
  <TypeSignature Language="F#" Value="type XamlReader = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>WPF の既定の XAML リーダーおよび関連付けられている XAML オブジェクト ライターを使用して、XAML 入力を読み取り、オブジェクト グラフを作成します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 同期 <xref:System.Windows.Markup.XamlReader.Load%2A> メソッドは静的ですが、非同期の <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> メソッドは静的ではなく、使用する <xref:System.Windows.Markup.XamlReader> クラスのインスタンスが必要です。  
  
 `Load` メソッドの出力は、作成されたオブジェクトツリーまたはオブジェクトグラフのルートオブジェクトを表す単一のオブジェクトです。 <xref:System.Windows.Markup.XamlReader> によって作成されたオブジェクトグラフは、通常、実行時に WPF アプリケーションの既存のオブジェクトツリーに追加されます。 それ以外の場合、新しいオブジェクトグラフは、WPF アプリケーションモデルのために切断されたと見なされます。 これは、表示されず、WPF アプリケーションのメインオブジェクトツリーに適用されているオブジェクトツリー技法 (Api <xref:System.Windows.FrameworkElement.FindName%2A>、<xref:System.Windows.LogicalTreeHelper>、<xref:System.Windows.Media.VisualTreeHelper>など) を使用してアクセスできないことを意味します。 オブジェクトツリーの概念の詳細については、「 [WPF のツリー](~/docs/framework/wpf/advanced/trees-in-wpf.md)」を参照してください。  
  
 <xref:System.Windows.Markup.XamlReader> では、次の主要なシナリオがサポートされます。  
  
-   **複製/オブジェクトファクトリ**: 追加の機構を使用しない場合、一般に、WPF オブジェクトツリー内の複数の位置に参照型を含めることはできません。 (WPF での共有または再利用をサポートするその他のメカニズムの例としては、<xref:System.Windows.Freezable>に基づくオブジェクトや、<xref:System.Windows.ResourceDictionary>から項目として参照される <xref:System.Windows.Media.Brush> など、一般的な共有可能なオブジェクトのサポートなどがあります)。オブジェクトツリー内に既に存在するオブジェクトを複製する方法の1つとして、<xref:System.Windows.Markup.XamlWriter.Save%2A?displayProperty=nameWithType>を使用してオブジェクトをシリアル化する方法があります。 次に、ストリームまたは <xref:System.Xml.XmlReader> を仲介者として使用して、シリアル化された文字列を <xref:System.Windows.Markup.XamlReader.Load%2A>の呼び出しの入力として使用します。  
  
-   **ジャストインタイム情報に基づいたオブジェクトの構築**: 遅延バインディングまたはユーザー指定の入力を既存のオブジェクトの状態に変更する方法は、多くの場合、他にもあります。 たとえば、同じ値を使用して複数のプロパティを設定したり、データバインディングを使用したりすることができます。 ただし、作成するオブジェクトの型が実行時またはユーザー操作によってのみ determinable されるシナリオの場合は、多くの場合、<xref:System.Windows.Markup.XamlReader.Load%2A> 入力用に文字列を構築してそのようなオブジェクトを作成すると便利です。  
  
-   **既存のリソース手法の使用**: <xref:System.IO.Stream> の種類は、他のフレームワークまたはテクノロジで頻繁に使用され、アプリケーションの境界を越えて、または同様の状況にデータやオブジェクトを転送します。 その後、<xref:System.IO.Stream> 手法を使用して、アプリケーションの一部としてオブジェクトを作成するために最終的に使用する XAML 形式のデータを格納または取得することができます。  
  
-   **修正済みドキュメント:** アプリケーションでは、WPF アプリケーションオブジェクトツリーおよび UI に含めるために、ローカルまたはダウンロードされた XPS ドキュメントを読み込む場合があります。  
  
> [!NOTE]
>  このドキュメントでは、オブジェクトツリーではなく、オブジェクトグラフについて説明します。 厳密な親子関係は、実行時の WPF アプリケーションの実行時オブジェクトの関係に常に存在するとは限りません。そのため、オブジェクトグラフは、より広く適用される用語です。 ただし、WPF にも2つの異なるツリー概念化 Api (<xref:System.Windows.LogicalTreeHelper>、<xref:System.Windows.Media.VisualTreeHelper>) が含まれているため、ツリーの比喩は WPF のほとんどの実際のケースに適切に適用されます。 ただし、xaml 言語の観点からは、多くの場合、オブジェクトグラフは XAML からオブジェクトがどのように作成されるかを考えるのに最適な方法です。 xaml 言語自体では、リレーションシップをツリー構造に追加するためのヘルパークラスの手法が必ずしも指定されているわけではないからです。  
  
## <a name="code-access-security-loose-xaml-and-xamlreader"></a>コードアクセスセキュリティ、ルース XAML、XamlReader  
 XAML は、オブジェクトのインスタンス化と実行を直接表すマークアップ言語です。 そのため、XAML で作成された要素は、同じように生成されたコードと同じように、システムリソース (ネットワークアクセス、ファイルシステム IO など) と対話することができます。  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] は、[!INCLUDE[TLA2#tla_net](~/includes/tla2sharptla-net-md.md)] セキュリティフレームワーク [!INCLUDE[TLA#tla_cas](~/includes/tlasharptla-cas-md.md)]をサポートしています。 これは、インターネットゾーンで実行されている [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] コンテンツの実行アクセス許可が低下していることを意味します。 "疎 XAML" (XAML ビューアーによって読み込み時に解釈されるコンパイルされていない XAML のページ) と [!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)] は、通常、このインターネットゾーンで実行され、同じアクセス許可セットを使用します。  ただし、完全に信頼されたアプリケーションに読み込まれる XAML は、ホストアプリケーションと同じようにシステムリソースにアクセスできます。 詳細については、「 [WPF 部分信頼セキュリティ](~/docs/framework/wpf/wpf-partial-trust-security.md)」を参照してください。  
  
 これらのステートメントが <xref:System.Windows.Markup.XamlReader> に及ぼす影響は、アプリケーションの設計で、読み込む XAML に関する信頼の決定を行う必要があることです。 信頼されていない XAML を読み込む場合は、結果として得られるオブジェクトグラフを読み込む方法について、独自のサンドボックス手法を実装することを検討してください。  
  
 <xref:System.Windows.Markup.XamlReader> は、部分信頼コードから呼び出すこともできます。 この場合、コードアクセスセキュリティにはインターネットセキュリティゾーンが適用されます。 読み込まれた XAML 内のものがインターネットセキュリティゾーンで無効な場合は、XAML 解析の例外がスローされます。 XBAP や、プラットフォームレベルで部分的に信頼されている他のケースでは <xref:System.Windows.Markup.XamlReader> が実行の一部である場合、明示的な部分信頼呼び出しと同じ例外動作が発生します。  
  
## <a name="wpf-xaml-xaml-readerswriters-and-xaml-language-versioning"></a>WPF XAML、XAML リーダー/ライター、および XAML 言語のバージョン管理  
 XAML2009 には、 [x:Reference](~/docs/framework/xaml-services/x-reference-markup-extension.md)や[x:FactoryMethod](~/docs/framework/xaml-services/x-factorymethod-directive.md)などの言語機能が含まれています。 `Load` または `Parse` のシグネチャを使用して、これらの機能を使用する XAML を読み込むことができます。 ただし、これらの言語機能は、マークアップコンパイルが必要な XAML ではサポートされていません (WPF アプリケーションの**ページ**ビルドアクションの xaml、ビルドアクションのマークアップコンパイルタスクを含む xaml など)。  
  
 Wpf の内部にアクセスする一般的な概念である wpf の型と wpf テクノロジは、一般にサポートされています。 たとえば、WPF が依存関係プロパティを実装する方法は、効率的な型メンバー参照の内部手法に依存します。 これらの内部アクセスは、<xref:System.Windows.Markup.XamlWriter> で提供される XAML の読み取りおよび書き込み Api と、<xref:System.Windows.Markup> 名前空間およびプレゼンテーションフレームワークアセンブリからの <xref:System.Windows.Markup.XamlReader> によって有効になります。 ただし、.xaml アセンブリの下位レベルの XAML リーダーおよび XAML ライター (<xref:System.Xaml.XamlReader?displayProperty=nameWithType>、<xref:System.Xaml.XamlWriter?displayProperty=nameWithType>に基づくクラス) には、WPF の内部構造へのアクセス権はありません。 App.xaml と WPF 固有のアセンブリとの依存関係はありません。 WPF の内部構造にアクセスできない場合、システムの Xaml とライターは、wpf のすべての型、または WPF の種類に基づく型を正しくロードまたは保存することはできません。 特に、.Xaml リーダーとライターは、WPF の依存関係プロパティのバッキングプロパティストアなどの概念や、WPF がスタイル、リソースディクショナリ、テンプレートを使用する方法の詳細については理解していません。 そのため、次のような選択肢があります。  
  
-   WPF 型を読み込む場合、または、何らかの方法で BAML フォームで XAML を使用する場合は、プレゼンテーションフレームワークの XAML リーダーと XAML ライターを使用します。  
  
-   WPF の型や BAML 形式の XAML に依存しておらず、そのフレームワークに固有の理由により、別の特定のテクノロジの XAML リーダーまたは XAML ライターの実装を使用していない場合は、.xaml XAML リーダーと XAML ライターを使用します。  
  
## <a name="systemxaml-backing-implementation-in-net-4"></a>.NET 4 でのシステムのバッキング実装  
 <xref:System.Windows.Markup.XamlReader> は、WPF フレームワークレベルの XAML パーサーの呼び出し可能な API サーフェイスです。 また、同じ基になる XAML パーサーによって、[!INCLUDE[net_v30_short](~/includes/net-v30-short-md.md)] と [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]を対象とする WPF アプリケーションのランタイム XAML の読み込みと解析も実行されます。  
  
 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]を対象としている場合、外部 API は同じですが、実装の一部は、xaml の解析の技術的およびレポートの側面の多くを向上させるために、[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] xaml アセンブリにおける一般的な XAML 実装に基づいて構築されます。 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] をターゲットにすることは、必ずしも参照としての .Xaml を含める必要があります。また、報告される例外などの実装の詳細は、システムの定義済みの型に由来する場合があります。  
  
## Examples  
 次の例では、<xref:System.Windows.Markup.XamlWriter> クラスを使用して、<xref:System.Windows.Controls.Button> を文字列に変換します。  次に、<xref:System.Windows.Markup.XamlReader> クラスの静的 <xref:System.Windows.Markup.XamlReader.Load%2A> メソッドを使用して、文字列が <xref:System.Windows.Controls.Button> に読み込まれます。  
  
 [!code-csharp[xamlreaderwritersnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[xamlreaderwritersnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Markup.XamlWriter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlReader();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Markup.XamlReader" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.CancelAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync();" />
      <MemberSignature Language="F#" Value="member this.CancelAsync : unit -&gt; unit" Usage="xamlReader.CancelAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>非同期読み込み操作が保留中である場合、現在の非同期読み込み操作を中止します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.XamlReader.CancelAsync%2A> は非同期操作です。そのため、一部の読み込みは、操作が中止される前に発生する場合があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWpfSchemaContext">
      <MemberSignature Language="C#" Value="public static System.Xaml.XamlSchemaContext GetWpfSchemaContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xaml.XamlSchemaContext GetWpfSchemaContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.GetWpfSchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetWpfSchemaContext () As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xaml::XamlSchemaContext ^ GetWpfSchemaContext();" />
      <MemberSignature Language="F#" Value="static member GetWpfSchemaContext : unit -&gt; System.Xaml.XamlSchemaContext" Usage="System.Windows.Markup.XamlReader.GetWpfSchemaContext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Xaml.XamlSchemaContext" /> の WPF スキーマ コンテキスト設定を表す <see cref="T:System.Windows.Markup.XamlReader" /> オブジェクトを返します。</summary>
        <returns><see cref="T:System.Xaml.XamlSchemaContext" /> の WPF スキーマ コンテキスト設定を表す <see cref="T:System.Windows.Markup.XamlReader" /> オブジェクト。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>XAML 入力を読み取り、対応するオブジェクト ツリーのルートを返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (stream As Stream) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.Stream -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">ストリーム形式の読み込む XAML。</param>
        <summary>指定した <see cref="T:System.IO.Stream" /> 内の XAML 入力を読み取り、対応するオブジェクト ツリーのルートである <see cref="T:System.Object" /> を返します。</summary>
        <returns>作成されたオブジェクト ツリーのルートのオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、<xref:System.Windows.Markup.XamlWriter> クラスを使用して <xref:System.IO.MemoryStream> に <xref:System.Windows.Controls.Button> を保存します。 次に、<xref:System.Windows.Markup.XamlReader> クラスの静的 <xref:System.Windows.Markup.XamlReader.Load%2A> メソッドを使用して、ストリームが <xref:System.Windows.Controls.Button> に読み込まれます。  
  
 [!code-csharp[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> が <see langword="null" /> です。</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xaml.XamlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xaml.XamlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.Xaml.XamlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XamlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xaml::XamlReader ^ reader);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xaml.XamlReader -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xaml.XamlReader" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="reader"><see cref="T:System.Xaml.XamlReader" /> オブジェクトです。 入力 XAML で初期化されていることが求められます。</param>
        <summary>指定した <see cref="T:System.Xaml.XamlReader" /> を使用して XAML 入力を読み取り、対応するオブジェクト ツリーのルートであるオブジェクトを返します。</summary>
        <returns>作成されたオブジェクト ツリーのルートとなるオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 入力 <xref:System.Xaml.XamlReader> は <xref:System.Windows.Baml2006.Baml2006Reader>できます。 これは、実行時またはローカライズツールの目的で、BAML を読み込む方法です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="reader" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XmlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xml.XmlReader -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">XAML 入力を既に XML 形式で読み込んでいる <see cref="T:System.Xml.XmlReader" />。</param>
        <summary>指定した <see cref="T:System.Xml.XmlReader" /> 内の XAML 入力を読み取り、対応するオブジェクト ツリーのルートであるオブジェクトを返します。</summary>
        <returns>作成されたオブジェクト ツリーのルートとなるオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、<xref:System.Windows.Markup.XamlWriter> クラスを使用して、<xref:System.Windows.Controls.Button> を文字列に変換します。  次に、<xref:System.Windows.Markup.XamlReader> クラスの静的 <xref:System.Windows.Markup.XamlReader.Load%2A> メソッドを使用して、文字列が <xref:System.Windows.Controls.Button> に読み込まれます。  
  
 [!code-csharp[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="reader" /> が <see langword="null" /> です。</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream, bool useRestrictiveXamlReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream, bool useRestrictiveXamlReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.IO.Stream,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (stream As Stream, useRestrictiveXamlReader As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::Stream ^ stream, bool useRestrictiveXamlReader);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.Stream * bool -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load (stream, useRestrictiveXamlReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="useRestrictiveXamlReader" Type="System.Boolean" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <param name="useRestrictiveXamlReader">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.IO.Stream,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (stream As Stream, parserContext As ParserContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::Stream ^ stream, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.Stream * System.Windows.Markup.ParserContext -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load (stream, parserContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="stream">読み込む XAML 入力を格納しているストリーム。</param>
        <param name="parserContext">パーサーで使用するコンテキスト情報。</param>
        <summary>指定した <see cref="T:System.IO.Stream" /> 内の XAML 入力を読み取り、対応するオブジェクト ツリーのルートであるオブジェクトを返します。</summary>
        <returns>作成されたオブジェクト ツリーのルートとなるオブジェクト。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> が <see langword="null" /> です。  
  
または 
 <paramref name="parserContext" /> が <see langword="null" /> です。</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xml.XmlReader reader, bool useRestrictiveXamlReader);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xml.XmlReader reader, bool useRestrictiveXamlReader) cil managed" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.Xml.XmlReader,System.Boolean)" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XmlReader, useRestrictiveXamlReader As Boolean) As Object" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xml::XmlReader ^ reader, bool useRestrictiveXamlReader);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="F#" Value="static member Load : System.Xml.XmlReader * bool -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load (reader, useRestrictiveXamlReader)" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="useRestrictiveXamlReader" Type="System.Boolean" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <param name="useRestrictiveXamlReader">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext, bool useRestrictiveXamlReader);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream, class System.Windows.Markup.ParserContext parserContext, bool useRestrictiveXamlReader) cil managed" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.IO.Stream,System.Windows.Markup.ParserContext,System.Boolean)" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (stream As Stream, parserContext As ParserContext, useRestrictiveXamlReader As Boolean) As Object" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::Stream ^ stream, System::Windows::Markup::ParserContext ^ parserContext, bool useRestrictiveXamlReader);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.Stream * System.Windows.Markup.ParserContext * bool -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load (stream, parserContext, useRestrictiveXamlReader)" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="useRestrictiveXamlReader" Type="System.Boolean" Index="2" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <param name="parserContext">To be added.</param>
        <param name="useRestrictiveXamlReader">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="LoadAsync">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>XAML マークアップを読み取り、指定したマークアップのルートに対応するオブジェクトを返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadAsync (stream As Stream) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.LoadAsync : System.IO.Stream -&gt; obj" Usage="xamlReader.LoadAsync stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">読み込む XAML 入力を格納しているストリーム。</param>
        <summary>指定した <see cref="T:System.IO.Stream" /> 内の XAML 入力を読み取り、対応するオブジェクト ツリーのルートを返します。</summary>
        <returns>作成されたオブジェクト ツリーのルートとなるオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 非同期 XAML 読み込み操作は、最初は単にルートオブジェクトであるオブジェクトを返します。 非同期的に XAML 解析が続行され、子オブジェクトがルートの下に格納されます。 これは、一般的な WPF XAML 処理の動作と、オブジェクトの有効期間の WPF 概念との相互作用とは対照的です。 一般的な (非同期ではない) 相互作用では、要素を返す前にすべての子コレクションを含むオブジェクトのすべてのプロパティが入力され、読み込まれたものとして報告されます。 この動作は、ルートオブジェクトが使用可能になる最後のオブジェクトであるツリーを作成するためのボトムアップ方式に相当します。  
  
 通常、返されたオブジェクトは、WPF アプリケーションのオブジェクトツリー内のある場所に割り当てられます。これにはコンテンツがまだ埋め込まれている可能性があり、コンテンツ全体が UI の一部として公開されている場合は、レイアウトの増分更新が発生する可能性があります。 このため、通常は、非同期的に読み込まれたオブジェクトを XAML から分離または仮想化し、アプリケーション固有のロジックまたはアプリケーションの状態を使用して <xref:System.Windows.Markup.XamlReader.LoadCompleted> が処理されたことを通知します。  
  
 <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> が XAML 入力を非同期に読み込むためには、XAML 入力のルート要素に `x:SynchronousMode="Async"`属性と値が含まれている必要があります。 値は大文字と小文字を区別して扱われます。 XAML 入力ルートに `x:SynchronousMode="Async"`が含まれていない場合、例外はスローされず、呼び出しは同期読み込みとして処理されます (<xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%29>を参照)。  
  
 一度に実行できるのは、<xref:System.Windows.Markup.XamlReader> クラスのインスタンスごとに1つの非同期読み込み操作だけです。  <xref:System.Windows.Markup.XamlReader> クラスの同じインスタンスで複数の非同期操作を実行しようとすると、<xref:System.InvalidOperationException> がスローされます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">1 つの <see cref="T:System.Windows.Markup.XamlReader" /> で、複数の読み込み操作が同時に保留になります。</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadAsync (reader As XmlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.LoadAsync : System.Xml.XmlReader -&gt; obj" Usage="xamlReader.LoadAsync reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">XAML 入力を既に読み込んでいる (読み取っている) 既存の <see cref="T:System.Xml.XmlReader" />。</param>
        <summary>指定した <see cref="T:System.Xml.XmlReader" /> 内の XAML 入力を読み取り、対応するオブジェクト ツリーのルートを返します。</summary>
        <returns>作成されたオブジェクト ツリーのルート。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 非同期 XAML 読み込み操作は、最初は単にルートオブジェクトであるオブジェクトを返します。 非同期的に XAML 解析が続行され、子オブジェクトがルートの下に格納されます。 これは、一般的な WPF XAML 処理の動作と、オブジェクトの有効期間の WPF 概念との相互作用とは対照的です。 一般的な (非同期ではない) 相互作用では、要素を返す前にすべての子コレクションを含むオブジェクトのすべてのプロパティが入力され、読み込まれたものとして報告されます。 この動作は、ルートオブジェクトが使用可能になる最後のオブジェクトであるツリーを作成するためのボトムアップ方式に相当します。  
  
 通常は、返されたオブジェクトを <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> からアプリケーションのオブジェクトツリー内のある場所に割り当てます。これにより、コンテンツがまだ入力されている可能性があります。また、コンテンツ全体が UI の一部として公開されている場合は、レイアウトの増分更新が発生する可能性があります。 このため、通常は、非同期的に読み込まれたオブジェクトを XAML から分離または仮想化し、アプリケーション固有のロジックまたはアプリケーションの状態を使用して <xref:System.Windows.Markup.XamlReader.LoadCompleted> が処理されたことを通知します。  
  
 XAML 入力を非同期に読み込む <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> には、XAML マークアップのルート要素に `x:SynchronousMode="Async"`属性と値が含まれている必要があります。 値は大文字と小文字を区別して扱われます。 XAML マークアップルートに `x:SynchronousMode="Async"`が含まれていない場合、例外はスローされず、呼び出しは代わりに同期読み込みとして処理されます (<xref:System.Windows.Markup.XamlReader.Load%28System.Xml.XmlReader%29>を参照)。  
  
 一度に実行できるのは、<xref:System.Windows.Markup.XamlReader> クラスのインスタンスごとに1つの非同期読み込み操作だけです。  <xref:System.Windows.Markup.XamlReader> クラスの同じインスタンスで複数の非同期操作を実行しようとすると、<xref:System.InvalidOperationException> がスローされます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="reader" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">1 つの <see cref="T:System.Windows.Markup.XamlReader" /> で、複数の読み込み操作が同時に実行されます。</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.IO.Stream stream, bool useRestrictiveXamlReader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.IO.Stream stream, bool useRestrictiveXamlReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadAsync (stream As Stream, useRestrictiveXamlReader As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::IO::Stream ^ stream, bool useRestrictiveXamlReader);" />
      <MemberSignature Language="F#" Value="member this.LoadAsync : System.IO.Stream * bool -&gt; obj" Usage="xamlReader.LoadAsync (stream, useRestrictiveXamlReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="useRestrictiveXamlReader" Type="System.Boolean" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <param name="useRestrictiveXamlReader">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.IO.Stream stream, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadAsync (stream As Stream, parserContext As ParserContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::IO::Stream ^ stream, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberSignature Language="F#" Value="member this.LoadAsync : System.IO.Stream * System.Windows.Markup.ParserContext -&gt; obj" Usage="xamlReader.LoadAsync (stream, parserContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="stream">読み込む XAML 入力を格納しているストリーム。</param>
        <param name="parserContext">パーサーで使用するコンテキスト情報。</param>
        <summary>指定した <see cref="T:System.IO.Stream" /> 内の XAML 入力を読み取り、対応するオブジェクト ツリーのルートを返します。</summary>
        <returns>作成されたオブジェクト ツリーのルート。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 非同期 XAML 読み込み操作は、最初は単にルートオブジェクトであるオブジェクトを返します。 非同期的に XAML 解析が続行され、子オブジェクトがルートの下に格納されます。 これは、一般的な WPF XAML 処理の動作と、オブジェクトの有効期間の WPF 概念との相互作用とは対照的です。 一般的な (非同期ではない) 相互作用では、要素を返す前にすべての子コレクションを含むオブジェクトのすべてのプロパティが入力され、読み込まれたものとして報告されます。 この動作は、ルートオブジェクトが使用可能になる最後のオブジェクトであるツリーを作成するためのボトムアップ方式に相当します。  
  
 通常、返されるオブジェクトは、アプリケーションのオブジェクトツリー内のある場所に割り当てられます。これには、コンテンツがまだ入力されている可能性があり、コンテンツ全体が UI の一部として公開されている場合は、レイアウトの増分更新が発生する可能性があります。 このため、通常は、非同期的に読み込まれたオブジェクトを XAML から分離または仮想化し、アプリケーション固有のロジックまたはアプリケーションの状態を使用して <xref:System.Windows.Markup.XamlReader.LoadCompleted> が処理されたことを通知します。  
  
 <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> がマークアップを非同期に読み込むためには、XAML マークアップのルート要素に `x:SynchronousMode="Async"`属性と値が含まれている必要があります。 値は大文字と小文字を区別して扱われます。 XAML マークアップルートに `x:SynchronousMode="Async"`が含まれていない場合、例外はスローされず、呼び出しは同期読み込みとして処理されます (<xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29>を参照)。  
  
 一度に実行できるのは、<xref:System.Windows.Markup.XamlReader> クラスのインスタンスごとに1つの非同期読み込み操作だけです。  <xref:System.Windows.Markup.XamlReader> クラスの同じインスタンスで複数の非同期操作を実行しようとすると、<xref:System.InvalidOperationException> がスローされます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">1 つの <see cref="T:System.Windows.Markup.XamlReader" /> で、複数の読み込み操作が同時に実行されます。</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.Xml.XmlReader reader, bool useRestrictiveXamlReader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.Xml.XmlReader reader, bool useRestrictiveXamlReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.Xml.XmlReader,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadAsync (reader As XmlReader, useRestrictiveXamlReader As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::Xml::XmlReader ^ reader, bool useRestrictiveXamlReader);" />
      <MemberSignature Language="F#" Value="member this.LoadAsync : System.Xml.XmlReader * bool -&gt; obj" Usage="xamlReader.LoadAsync (reader, useRestrictiveXamlReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="useRestrictiveXamlReader" Type="System.Boolean" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <param name="useRestrictiveXamlReader">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext, bool useRestrictiveXamlReader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.IO.Stream stream, class System.Windows.Markup.ParserContext parserContext, bool useRestrictiveXamlReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream,System.Windows.Markup.ParserContext,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadAsync (stream As Stream, parserContext As ParserContext, useRestrictiveXamlReader As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::IO::Stream ^ stream, System::Windows::Markup::ParserContext ^ parserContext, bool useRestrictiveXamlReader);" />
      <MemberSignature Language="F#" Value="member this.LoadAsync : System.IO.Stream * System.Windows.Markup.ParserContext * bool -&gt; obj" Usage="xamlReader.LoadAsync (stream, parserContext, useRestrictiveXamlReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="useRestrictiveXamlReader" Type="System.Boolean" Index="2" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <param name="parserContext">To be added.</param>
        <param name="useRestrictiveXamlReader">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCompleted">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.AsyncCompletedEventHandler LoadCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.AsyncCompletedEventHandler LoadCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Markup.XamlReader.LoadCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LoadCompleted As AsyncCompletedEventHandler " FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::AsyncCompletedEventHandler ^ LoadCompleted;" />
      <MemberSignature Language="F#" Value="member this.LoadCompleted : System.ComponentModel.AsyncCompletedEventHandler " Usage="member this.LoadCompleted : System.ComponentModel.AsyncCompletedEventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event LoadCompleted As AsyncCompletedEventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期の読み込み操作の完了時に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 非同期読み込み操作が中止されたときにも <xref:System.Windows.Markup.XamlReader.LoadCompleted> が発生します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncCompletedEventHandler" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したテキスト文字列内のマークアップを読み取り、指定したマークアップのルートに対応するオブジェクトを返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xamlText);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xamlText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (xamlText As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(System::String ^ xamlText);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; obj" Usage="System.Windows.Markup.XamlReader.Parse xamlText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xamlText">単一のテキスト文字列としての入力 XAML。</param>
        <summary>指定したテキスト文字列内の XAML 入力を読み取り、指定したマークアップのルートに対応するオブジェクトを返します。</summary>
        <returns>作成されたオブジェクト ツリーのルート。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この実装は、文字列からストリームを作成した後に、内部的に <xref:System.Windows.Markup.XamlReader.Load%2A> を呼び出します。 例外の可能性などの追加情報については、「<xref:System.Windows.Markup.XamlReader.Load%2A>」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xamlText, bool useRestrictiveXamlReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xamlText, bool useRestrictiveXamlReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Parse(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (xamlText As String, useRestrictiveXamlReader As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(System::String ^ xamlText, bool useRestrictiveXamlReader);" />
      <MemberSignature Language="F#" Value="static member Parse : string * bool -&gt; obj" Usage="System.Windows.Markup.XamlReader.Parse (xamlText, useRestrictiveXamlReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlText" Type="System.String" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="useRestrictiveXamlReader" Type="System.Boolean" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="xamlText">To be added.</param>
        <param name="useRestrictiveXamlReader">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xamlText, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xamlText, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Parse(System.String,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (xamlText As String, parserContext As ParserContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(System::String ^ xamlText, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Windows.Markup.ParserContext -&gt; obj" Usage="System.Windows.Markup.XamlReader.Parse (xamlText, parserContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlText" Type="System.String" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="xamlText">単一のテキスト文字列としての入力 XAML。</param>
        <param name="parserContext">パーサーで使用するコンテキスト情報。</param>
        <summary>指定したテキスト文字列 (指定した <see cref="T:System.Windows.Markup.ParserContext" /> を使用) 内の XAML マークアップを読み取り、指定したマークアップのルートに対応するオブジェクトを返します。</summary>
        <returns>作成されたオブジェクト ツリーのルート。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この実装は、文字列からストリームを作成した後に、内部的に <xref:System.Windows.Markup.XamlReader.Load%2A> を呼び出します。 例外の可能性などの追加情報については、「<xref:System.Windows.Markup.XamlReader.Load%2A>」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xamlText, System.Windows.Markup.ParserContext parserContext, bool useRestrictiveXamlReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xamlText, class System.Windows.Markup.ParserContext parserContext, bool useRestrictiveXamlReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Parse(System.String,System.Windows.Markup.ParserContext,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (xamlText As String, parserContext As ParserContext, useRestrictiveXamlReader As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(System::String ^ xamlText, System::Windows::Markup::ParserContext ^ parserContext, bool useRestrictiveXamlReader);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Windows.Markup.ParserContext * bool -&gt; obj" Usage="System.Windows.Markup.XamlReader.Parse (xamlText, parserContext, useRestrictiveXamlReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlText" Type="System.String" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="useRestrictiveXamlReader" Type="System.Boolean" Index="2" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="xamlText">To be added.</param>
        <param name="parserContext">To be added.</param>
        <param name="useRestrictiveXamlReader">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
