<Type Name="ValueSerializer" FullName="System.Windows.Markup.ValueSerializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="510b9e1e2a58ae70cc3dfc373fa2996bfa3394db" /><Meta Name="ms.sourcegitcommit" Value="8b09499854b5b7b909802126edc1f1fca0054c10" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/01/2020" /><Meta Name="ms.locfileid" Value="76944598" /></Metadata><TypeSignature Language="C#" Value="public abstract class ValueSerializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract ValueSerializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.ValueSerializer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueSerializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValueSerializer abstract" />
  <TypeSignature Language="F#" Value="type ValueSerializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>オブジェクト表現からのシリアル化の変換動作を定義する抽象クラス。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 シリアル化のためにコンバーターが返す文字列は、損失が発生しないようにする必要があり、コンバーターは常に特定の値に対して同じ文字列を返す必要があります。  <xref:System.ComponentModel.TypeConverter>から派生した型コンバーターが、文字列出力の `ConvertTo` 実装でこれらの要件を満たしていない場合は、カスタム <xref:System.Windows.Markup.ValueSerializer> を宣言する必要があります。 <xref:System.Windows.Markup.ValueSerializer> が要件を満たすか、null <xref:System.Windows.Markup.ValueSerializer> を型に関連付ける必要があります。 <xref:System.Windows.Markup.ValueSerializerAttribute> 属性を適用することによって、<xref:System.Windows.Markup.ValueSerializer> が型に関連付けられています。  
  
 Null <xref:System.Windows.Markup.ValueSerializer> は、オブジェクトグラフから文字列への変換で型コンバーターが無視されることを示します。  
  
> [!IMPORTANT]
>  <xref:System.Windows.Markup.ValueSerializer> の実装では、例外をスローしないようにする必要があります。 スローされた例外は、シリアル化を終了できます。  
  
 <xref:System.Windows.Markup.ValueSerializer> とその Api の <xref:System.Windows.Markup.IValueSerializerContext> は、<xref:System.ComponentModel.TypeConverter>の <xref:System.ComponentModel.ITypeDescriptorContext> に似ています。 実際、<xref:System.Windows.Markup.IValueSerializerContext> は <xref:System.ComponentModel.ITypeDescriptorContext>を継承します。 <xref:System.Windows.Markup.ValueSerializer> 派生クラス API が呼び出されると、呼び出し元 (通常はシリアライザープロセス) は、特定のサービスを提供する可能性のあるコンテキストを渡します。 一般的なガイダンスにより、<xref:System.Windows.Markup.ValueSerializer> は例外をスローしないようにする必要があります。 コンテキストから特定のサービスを返さないと、例外もスローされません。  
  
 以前のバージョンの .NET Framework では、このクラスは WPF 固有のアセンブリ WindowsBase に存在していました。 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]では、<xref:System.Windows.Markup.ValueSerializer> は App.xaml アセンブリにあります。 詳細については、「 [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)」を参照してください。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlXmlWriter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValueSerializer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Markup.ValueSerializer" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターの本体は空です。<xref:System.Windows.Markup.ValueSerializer> クラスに、初期化を必要とする値が含まれていません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertFromString">
      <MemberSignature Language="C#" Value="public virtual bool CanConvertFromString (string value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanConvertFromString(string value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanConvertFromString (value As String, context As IValueSerializerContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanConvertFromString(System::String ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CanConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; bool&#xA;override this.CanConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; bool" Usage="valueSerializer.CanConvertFromString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">変換の評価対象となる文字列。</param>
        <param name="context">変換に使用されるコンテキスト情報。</param>
        <summary>派生クラスでオーバーライドされたときに、指定した <see cref="T:System.String" /> を <see cref="T:System.Windows.Markup.ValueSerializer" /> の実装でサポートされる型のインスタンスに変換できるかどうか判別します。</summary>
        <returns>値を変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 基本実装では、常に `false` を返します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertToString">
      <MemberSignature Language="C#" Value="public virtual bool CanConvertToString (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanConvertToString(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanConvertToString (value As Object, context As IValueSerializerContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanConvertToString(System::Object ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CanConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; bool&#xA;override this.CanConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; bool" Usage="valueSerializer.CanConvertToString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">変換の評価対象となるオブジェクト。</param>
        <param name="context">変換に使用されるコンテキスト情報。</param>
        <summary>派生クラスでオーバーライドされたとき、指定されたオブジェクトを <see cref="T:System.String" /> に変換できるかどうかを決定します。</summary>
        <returns><see langword="true" /> を <paramref name="value" /> に変換できる場合は <see cref="T:System.String" />。それ以外は <see langword="false." />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 基本実装では、常に `false` を返します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertFromString">
      <MemberSignature Language="C#" Value="public virtual object ConvertFromString (string value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ConvertFromString(string value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConvertFromString (value As String, context As IValueSerializerContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ ConvertFromString(System::String ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; obj&#xA;override this.ConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; obj" Usage="valueSerializer.ConvertFromString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">変換する文字列。</param>
        <param name="context">変換に使用されるコンテキスト情報。</param>
        <summary>派生クラスでオーバーライドされると、<see cref="T:System.String" /> を、<see cref="T:System.Windows.Markup.ValueSerializer" /> の実装でサポートされる型のインスタンスに変換します。</summary>
        <returns>指定された <see cref="T:System.Windows.Markup.ValueSerializer" /> に基づいて <paramref name="value" /> の実装でサポートされる型の新しいインスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 基本実装では、常に例外がスローされます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><paramref name="value" /> を変換できません。</exception>
        <block subset="none" type="overrides"><para>実装から例外をスローしないようにします。 以下を参照してください。<see cref="T:System.Windows.Markup.ValueSerializer" /></para></block>
      </Docs>
    </Member>
    <Member MemberName="ConvertToString">
      <MemberSignature Language="C#" Value="public virtual string ConvertToString (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ConvertToString(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConvertToString (value As Object, context As IValueSerializerContext) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ConvertToString(System::Object ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; string&#xA;override this.ConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; string" Usage="valueSerializer.ConvertToString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">文字列に変換するオブジェクト。</param>
        <param name="context">変換に使用されるコンテキスト情報。</param>
        <summary>派生クラスでオーバーライドされた場合は、指定されたオブジェクトを <see cref="T:System.String" /> に変換します。</summary>
        <returns>指定されたオブジェクトの文字列表現。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 基本実装では、常に例外がスローされます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><paramref name="value" /> を変換できません。</exception>
        <block subset="none" type="overrides"><para>実装から例外をスローしないようにします。 以下を参照してください。<see cref="T:System.Windows.Markup.ValueSerializer" /></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetConvertFromException">
      <MemberSignature Language="C#" Value="protected Exception GetConvertFromException (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Exception GetConvertFromException(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetConvertFromException (value As Object) As Exception" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Exception ^ GetConvertFromException(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.GetConvertFromException : obj -&gt; Exception" Usage="valueSerializer.GetConvertFromException value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">変換できなかったオブジェクト。</param>
        <summary>変換を実行できないときにスローする例外を返します。</summary>
        <returns><see cref="T:System.Exception" /> 変換を実行できないときにスローする例外の <see langword="ConvertFrom" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドでは、実際の `throw` キーワードは呼び出されません。したがって、一般的な使用法は `throw GetConvertFromException` (パラメーターが指定されている) です。  
  
 返される特定の例外は <xref:System.InvalidOperationException>であり、例外メッセージで `value` 渡されます。 使用パターンは、<xref:System.ComponentModel.TypeConverter>の例外ユーティリティの場合と同じです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConvertToException">
      <MemberSignature Language="C#" Value="protected Exception GetConvertToException (object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Exception GetConvertToException(object value, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetConvertToException (value As Object, destinationType As Type) As Exception" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Exception ^ GetConvertToException(System::Object ^ value, Type ^ destinationType);" />
      <MemberSignature Language="F#" Value="member this.GetConvertToException : obj * Type -&gt; Exception" Usage="valueSerializer.GetConvertToException (value, destinationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="value">変換できなかったオブジェクト。</param>
        <param name="destinationType">コンバーターが変換しようとした型を表す型。</param>
        <summary>変換を実行できないときにスローする例外を返します。</summary>
        <returns><see cref="T:System.Exception" /> 変換を実行できないときにスローする例外の <see langword="ConvertTo" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドでは、実際の `throw` キーワードは呼び出されません。したがって、一般的な使用法は `throw GetConvertToException` (`value` パラメーターが指定されている) になります。  
  
 返される特定の例外は <xref:System.InvalidOperationException>であり、例外メッセージで `value` 渡されます。 使用パターンは、<xref:System.ComponentModel.TypeConverter>の例外ユーティリティの場合と同じです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSerializerFor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>オブジェクトの <see cref="T:System.Windows.Markup.ValueSerializer" /> を取得します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (System.ComponentModel.PropertyDescriptor descriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.ComponentModel.PropertyDescriptor descriptor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSerializerFor (descriptor As PropertyDescriptor) As ValueSerializer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(System::ComponentModel::PropertyDescriptor ^ descriptor);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : System.ComponentModel.PropertyDescriptor -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor descriptor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="System.ComponentModel.PropertyDescriptor" />
      </Parameters>
      <Docs>
        <param name="descriptor">シリアル化するプロパティの CLR プロパティ記述子。</param>
        <summary>プロパティの CLR プロパティ記述子を渡すことで、プロパティに対して宣言された <see cref="T:System.Windows.Markup.ValueSerializer" /> を取得します。</summary>
        <returns>指定したプロパティに関連付けられているシリアライザー。 <see langword="null" /> を返す場合があります。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティの <xref:System.Windows.Markup.ValueSerializer>、またはプロパティの値として使用される型については、プロパティまたは型の宣言で <xref:System.Windows.Markup.ValueSerializerAttribute> 属性を適用することによって示されます。 <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> メソッドは、CLR 型システム情報を読み取って、プロパティに存在する場合は属性に基づいて新しい <xref:System.Windows.Markup.ValueSerializer> クラスを返すユーティリティメソッドです。プロパティの型で見つかった場合は、このメソッドを返します。 このようなシリアライザーが存在しない場合は、`null` が返されることがあります。 型またはプロパティに null 値 <xref:System.Windows.Markup.ValueSerializerAttribute>で意図的に属性が設定されている場合も、`null` が返されます。  
  
 <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> がサポートするもう1つのモードでは、内部 `TypeConverterValueSerializer` クラスが返されます。これは、<xref:System.ComponentModel.TypeConverter> をラップして `Convert` メソッドを `Convert*String` メソッドに変換する <xref:System.Windows.Markup.ValueSerializer> の実装です。たとえば、<xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType> 型の入力を使用して呼び出され、<xref:System.String> に変換されます。<xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A> これは、次のすべてが当てはまる場合にのみ実行されます。  
  
-   関連するプロパティ、または関連するプロパティの型に <xref:System.ComponentModel.TypeConverterAttribute> があります。  
  
-   指定された <xref:System.ComponentModel.TypeConverter> は、正常に構築できます。  
  
-   <xref:System.ComponentModel.TypeConverter> は、<xref:System.String> の種類を参照するという <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>の `true` を返します。  
  
-   <xref:System.ComponentModel.TypeConverter> は、<xref:System.String> の種類を参照するという <xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType>の `true` を返します。  
  
-   <xref:System.ComponentModel.TypeConverter> は、<xref:System.String> の種類を参照するという <xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType>の `true` を返します。  
  
> [!NOTE]
>  <xref:System.DateTime> 型が <xref:System.Windows.Markup.DateTimeValueSerializer>を返す特殊なケースを次に示します。<xref:System.String> 型は内部では機能するシリアライザー (`StringValueSerializer`) を返します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="descriptor" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : Type -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><see cref="T:System.Windows.Markup.ValueSerializer" /> を取得する対象の型。</param>
        <summary>指定した型に宣言された <see cref="T:System.Windows.Markup.ValueSerializer" /> を取得します。</summary>
        <returns>指定した型に関連付けられているシリアライザー。 <see langword="null" /> を返す場合があります。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 型の <xref:System.Windows.Markup.ValueSerializer> は、型宣言で <xref:System.Windows.Markup.ValueSerializerAttribute> 属性を適用することによって示されます。 <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> メソッドは、CLR 型システム情報を読み取り、指定された `type`で見つかった場合は、属性に基づいて新しい <xref:System.Windows.Markup.ValueSerializer> クラスを返すユーティリティメソッドです。 このようなシリアライザーが存在しない場合は、`null` が返されることがあります。 型に null 値 <xref:System.Windows.Markup.ValueSerializerAttribute>で意図的に属性が設定されている場合も `null` が返されます。  
  
 <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> がサポートするもう1つのモードでは、内部 `TypeConverterValueSerializer` クラスが返されます。これは、<xref:System.ComponentModel.TypeConverter> をラップして `Convert` メソッドを `Convert*String` メソッドに変換する <xref:System.Windows.Markup.ValueSerializer> の実装です。たとえば、<xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType> 型の入力を使用して呼び出され、<xref:System.String> に変換されます。<xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A> これは、次のすべてが当てはまる場合にのみ実行されます。  
  
-   `type`に <xref:System.ComponentModel.TypeConverterAttribute> が見つかりました。  
  
-   指定された <xref:System.ComponentModel.TypeConverter> は、正常に構築できます。  
  
-   <xref:System.ComponentModel.TypeConverter> は、<xref:System.String> の種類を参照するという <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>の `true` を返します。  
  
-   <xref:System.ComponentModel.TypeConverter> は、<xref:System.String> の種類を参照するという <xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType>の `true` を返します。  
  
-   <xref:System.ComponentModel.TypeConverter> は、<xref:System.String> の種類を参照するという <xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType>の `true` を返します。  
  
> [!NOTE]
>  <xref:System.DateTime> 型が <xref:System.Windows.Markup.DateTimeValueSerializer>を返す特殊なケースを次に示します。<xref:System.String> 型は内部では機能するシリアライザー (`StringValueSerializer`) を返します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="type" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (System.ComponentModel.PropertyDescriptor descriptor, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.ComponentModel.PropertyDescriptor descriptor, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSerializerFor (descriptor As PropertyDescriptor, context As IValueSerializerContext) As ValueSerializer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(System::ComponentModel::PropertyDescriptor ^ descriptor, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : System.ComponentModel.PropertyDescriptor * System.Windows.Markup.IValueSerializerContext -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor (descriptor, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="System.ComponentModel.PropertyDescriptor" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="descriptor">シリアル化するプロパティの記述子。</param>
        <param name="context">変換に使用されるコンテキスト情報。</param>
        <summary>指定したコンテキストを使って、指定したプロパティに対して宣言された <see cref="T:System.Windows.Markup.ValueSerializer" /> を取得します。</summary>
        <returns>指定したプロパティに関連付けられているシリアライザー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 CLR 型システムで報告された属性を純粋に依存するのではなく、このオーバーロードはサービスとしての `context` を使用し、<xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>のサービスの実装を呼び出します。 <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> の実装は、通常、`descriptor`に依存しますが、特定のコンテキストに対して特殊な動作を実装することもあります。  
  
 このメソッドは、呼び出し元がサービスから使用可能な <xref:System.Windows.Markup.IValueSerializerContext> を持っている場合に呼び出す必要があります。  これにより、特定のコンテキストに対して正しい <xref:System.Windows.Markup.ValueSerializer> が返されます。  
  
 コンテキストが、指定された `descriptor`の <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> から `null` を返す場合、または指定したコンテキストが `null`場合、動作は <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.ComponentModel.PropertyDescriptor%29> オーバーロードの呼び出しと同じです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="descriptor" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (Type type, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.Type type, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(Type ^ type, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : Type * System.Windows.Markup.IValueSerializerContext -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor (type, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="type"><see cref="T:System.Windows.Markup.ValueSerializer" /> を取得する対象の型。</param>
        <param name="context">変換に使用されるコンテキスト情報。</param>
        <summary>指定したコンテキストを使用して、指定された型に宣言されている <see cref="T:System.Windows.Markup.ValueSerializer" /> を取得します。</summary>
        <returns>指定した型に関連付けられているシリアライザー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 CLR 型システムで報告された属性を純粋に依存するのではなく、このオーバーロードはサービスとしての `context` を使用し、<xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>のサービスの実装を呼び出します。 <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> の実装は、通常、`type`に依存しますが、特定のコンテキストに対して特殊な動作を実装することもあります。  
  
 このメソッドは、呼び出し元がサービスから使用可能な <xref:System.Windows.Markup.IValueSerializerContext> を持っている場合に呼び出す必要があります。 これにより、特定のコンテキストに対して正しい <xref:System.Windows.Markup.ValueSerializer> が返されます。  
  
 コンテキストが、指定された `type`の <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> から `null` を返す場合、または指定したコンテキストが `null`場合、動作は <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.Type%29> オーバーロードの呼び出しと同じです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="type" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="TypeReferences">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Type&gt; TypeReferences (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; TypeReferences(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TypeReferences (value As Object, context As IValueSerializerContext) As IEnumerable(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ TypeReferences(System::Object ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member TypeReferences : obj * System.Windows.Markup.IValueSerializerContext -&gt; seq&lt;Type&gt;&#xA;override this.TypeReferences : obj * System.Windows.Markup.IValueSerializerContext -&gt; seq&lt;Type&gt;" Usage="valueSerializer.TypeReferences (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">シリアル化する値。</param>
        <param name="context">変換に使用されるコンテキスト情報。</param>
        <summary><see cref="T:System.Windows.Markup.ValueSerializer" /> によって参照される型の列挙体を取得します。</summary>
        <returns>このシリアライザーによって変換された型。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.ValueSerializer> 変換される型は、返された列挙体に含まれる必要があります。  これにより、シリアライザーは、このシリアライザーが変換する型に関する十分な情報を持つことができます。  
  
 このメソッドをオーバーライドすることは高度なシナリオです。 オーバーライドが必要になるのは、XAML スキーマコンテキストで使用できる CLR 型システム ownertype リレーションシップが十分な情報を報告しないシステムを実装している場合のみです。  
  
## <a name="wpf-usage-notes"></a>WPF の使用上の注意  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] プロパティシステムは、依存関係プロパティに所有者を追加できるという概念があるため、<xref:System.Windows.Markup.ValueSerializer.TypeReferences%2A> をオーバーライドする内部値シリアライザーを実装します。 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 式には、特別な内部処理もあります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
