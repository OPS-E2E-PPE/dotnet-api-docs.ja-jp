<Type Name="CodeDomProvider" FullName="System.CodeDom.Compiler.CodeDomProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="71835372e0553700f798b49f0bd01813aac74155" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75153552" /></Metadata><TypeSignature Language="C#" Value="public abstract class CodeDomProvider : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CodeDomProvider extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.Compiler.CodeDomProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CodeDomProvider&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeDomProvider abstract : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type CodeDomProvider = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="c3fa6-101"><see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> の実装の基本クラスを提供します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-101">Provides a base class for <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementations.</span></span> <span data-ttu-id="c3fa6-102">このクラスは抽象クラスです。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-102">This class is abstract.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3fa6-103"><xref:System.CodeDom.Compiler.CodeDomProvider> は、コードジェネレーターとコードコンパイラのインスタンスを作成および取得するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-103">A <xref:System.CodeDom.Compiler.CodeDomProvider> can be used to create and retrieve instances of code generators and code compilers.</span></span> <span data-ttu-id="c3fa6-104">コード ジェネレーターを使用して特定の言語のコードを生成でき、コード コンパイラを使用してコードをアセンブリにコンパイルできます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-104">Code generators can be used to generate code in a particular language, and code compilers can be used to compile code into assemblies.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3fa6-105">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]では、コードジェネレーターとコードコンパイラで使用できるメソッドをコードプロバイダーから直接入手できます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-105">In the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], the methods made available in the code generator and code compiler are available directly from the code provider.</span></span> <span data-ttu-id="c3fa6-106">メソッドにアクセスするために <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> または <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> を呼び出す必要はなく、これらのメソッドは不使用とマークされています。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-106">You do not need to call <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> or <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> to access the methods, and those methods are marked as obsolete.</span></span> <span data-ttu-id="c3fa6-107">これは、既存の、および新しいコードプロバイダーの実装に適用されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-107">This applies to preexisting as well as new code provider implementations.</span></span>  
  
 <span data-ttu-id="c3fa6-108"><xref:System.CodeDom.Compiler.CodeDomProvider> の実装は、通常、コードを生成し、1つのプログラミング言語のコンパイルを管理するためのコード生成インターフェイスまたはコードコンパイルインターフェイスを提供します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-108">A <xref:System.CodeDom.Compiler.CodeDomProvider> implementation typically provides code generation and/or code compilation interfaces for generating code and managing compilation for a single programming language.</span></span> <span data-ttu-id="c3fa6-109">Windows SDK に付属している <xref:System.CodeDom.Compiler.CodeDomProvider> の実装では、いくつかの言語がサポートされています。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-109">Several languages are supported by <xref:System.CodeDom.Compiler.CodeDomProvider> implementations that ship with the Windows SDK.</span></span> <span data-ttu-id="c3fa6-110">これらの言語C#には、 C++、Visual Basic、、および JScript が含まれます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-110">These languages include C#, Visual Basic, C++, and JScript.</span></span> <span data-ttu-id="c3fa6-111">開発者またはコンパイラベンダーは、<xref:System.CodeDom.Compiler.ICodeGenerator> および <xref:System.CodeDom.Compiler.ICodeCompiler> インターフェイスを実装し、CodeDOM サポートを他のプログラミング言語に拡張する <xref:System.CodeDom.Compiler.CodeDomProvider> を提供できます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-111">Developers or compiler vendors can implement the <xref:System.CodeDom.Compiler.ICodeGenerator> and <xref:System.CodeDom.Compiler.ICodeCompiler> interfaces and provide a <xref:System.CodeDom.Compiler.CodeDomProvider> that extends CodeDOM support to other programming languages.</span></span>  
  
 <span data-ttu-id="c3fa6-112">コンピューター構成ファイル (machine.config) の[&lt;の&gt; 要素](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)は、開発者およびコンパイラベンダーが追加の <xref:System.CodeDom.Compiler.CodeDomProvider> 実装の構成設定を追加するためのメカニズムを提供します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-112">The [&lt;system.codedom&gt; Element](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) in the machine configuration file (Machine.config) provides a mechanism for developers and compiler vendors to add configuration settings for additional <xref:System.CodeDom.Compiler.CodeDomProvider> implementations.</span></span>  
  
 <span data-ttu-id="c3fa6-113"><xref:System.CodeDom.Compiler.CodeDomProvider> クラスには、コンピューター上の <xref:System.CodeDom.Compiler.CodeDomProvider> の実装を検出および列挙するための静的メソッドが用意されています。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-113">The <xref:System.CodeDom.Compiler.CodeDomProvider> class provides static methods to discover and enumerate the <xref:System.CodeDom.Compiler.CodeDomProvider> implementations on a computer.</span></span> <span data-ttu-id="c3fa6-114"><xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A> メソッドは、コンピューター上のすべての <xref:System.CodeDom.Compiler.CodeDomProvider> 実装の設定を返します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-114">The <xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A> method returns the settings for all <xref:System.CodeDom.Compiler.CodeDomProvider> implementations on a computer.</span></span> <span data-ttu-id="c3fa6-115"><xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A> メソッドは、プログラミング言語の名前に基づいて、特定の <xref:System.CodeDom.Compiler.CodeDomProvider> の実装の設定を返します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-115">The <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A> method returns the settings for a specific <xref:System.CodeDom.Compiler.CodeDomProvider> implementation, based on the programming language name.</span></span> <span data-ttu-id="c3fa6-116"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> メソッドは、特定の言語の <xref:System.CodeDom.Compiler.CodeDomProvider> の実装のインスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-116">The <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> method returns an instance of a <xref:System.CodeDom.Compiler.CodeDomProvider> implementation for a specific language.</span></span>  
  
 <span data-ttu-id="c3fa6-117">構成ファイルの言語プロバイダー設定の詳細については、「[コンパイラおよび言語プロバイダー設定スキーマ](~/docs/framework/configure-apps/file-schema/compiler/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-117">For more details on language provider settings in the configuration file, see [Compiler and Language Provider Settings Schema](~/docs/framework/configure-apps/file-schema/compiler/index.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3fa6-118">このクラスは、リンク確認要求と継承要求をクラスレベルで行います。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-118">This class makes a link demand and an inheritance demand at the class level.</span></span> <span data-ttu-id="c3fa6-119"><xref:System.Security.SecurityException> は、直前の呼び出し元または派生クラスに完全信頼のアクセス許可がない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-119">A <xref:System.Security.SecurityException> is thrown if either the immediate caller or the derived class does not have full trust permission.</span></span> <span data-ttu-id="c3fa6-120">セキュリティ要求の詳細については、「[リンク](~/docs/framework/misc/link-demands.md)確認要求と[継承の要求](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/x4yx82e6(v=vs.100))」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-120">For details about security demands, see [Link Demands](~/docs/framework/misc/link-demands.md) and [Inheritance Demands](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/x4yx82e6(v=vs.100)).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3fa6-121">次のプログラム例では、<xref:System.Console> クラスを使用して "Hello World" を出力するプログラムの CodeDOM モデルに基づいて、ソースコードを生成およびコンパイルできます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-121">The following example program can generate and compile source code based on a CodeDOM model of a program that prints "Hello World" using the <xref:System.Console> class.</span></span> <span data-ttu-id="c3fa6-122">Windows フォームユーザーインターフェイスが用意されています。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-122">A Windows Forms user interface is provided.</span></span> <span data-ttu-id="c3fa6-123">ユーザーはC#、、Visual Basic、JScript のいくつかの選択肢から対象のプログラミング言語を選択できます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-123">The user can select the target programming language from several selections: C#, Visual Basic, and JScript.</span></span>  
  
 [!code-cpp[CodeDomExample#1](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomExample/CPP/source.cpp#1)]
 [!code-csharp[CodeDomExample#1](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomExample/CS/source.cs#1)]
 [!code-vb[CodeDomExample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomExample/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="c3fa6-124">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-124">for full trust for the immediate caller.</span></span> <span data-ttu-id="c3fa6-125">このクラスは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-125">This class cannot be used by partially trusted code.</span></span></permission>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand"><span data-ttu-id="c3fa6-126">継承者に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-126">for full trust for inheritors.</span></span> <span data-ttu-id="c3fa6-127">このクラスを、部分的に信頼されているコードが継承することはできません。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-127">This class cannot be inherited by partially trusted code.</span></span></permission>
    <block subset="none" type="overrides"><para><span data-ttu-id="c3fa6-128">.NET Framework バージョン1.0 および1.1 では、コードプロバイダーは <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />、<see cref="T:System.CodeDom.Compiler.ICodeGenerator" />、<see cref="T:System.CodeDom.Compiler.ICodeParser" />、および <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />の実装で構成されています。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-128">In the .NET Framework versions 1.0 and 1.1, code providers consist of implementations of <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />, <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />, <see cref="T:System.CodeDom.Compiler.ICodeParser" />, and <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />.</span></span> <span data-ttu-id="c3fa6-129">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]では、<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />、<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" />、および <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> の各メソッドは互換性のために残されており、<see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> クラスで直接使用できます。<see cref="T:System.CodeDom.Compiler.ICodeCompiler" /><see cref="T:System.CodeDom.Compiler.CodeDomProvider" /></span><span class="sxs-lookup"><span data-stu-id="c3fa6-129">In the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />, <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" />, and <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> methods are obsolete, and the methods of <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> and <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> are directly available in the <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> class.</span></span> <span data-ttu-id="c3fa6-130">これらのメソッドは、基本メソッドを呼び出さずに、コードプロバイダーの実装でオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-130">You should override those methods in your code provider implementation and not call the base methods.</span></span></para></block>
    <altmember cref="T:System.CodeDom.Compiler.CompilerInfo" />
    <altmember cref="T:Microsoft.CSharp.CSharpCodeProvider" />
    <altmember cref="T:Microsoft.VisualBasic.VBCodeProvider" />
    <altmember cref="T:Microsoft.JScript.JScriptCodeProvider" />
    <related type="Article" href="~/docs/framework/configure-apps/file-schema/compiler/index.md"><span data-ttu-id="c3fa6-131">コンパイラおよび言語プロバイダー設定のスキーマ</span><span class="sxs-lookup"><span data-stu-id="c3fa6-131">Compiler and Language Provider Settings Schema</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CodeDomProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CodeDomProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3fa6-132"><see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-132">Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="c3fa6-133">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-133">for full trust for the immediate caller.</span></span> <span data-ttu-id="c3fa6-134">このクラスは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-134">This class cannot be used by partially trusted code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CompileAssemblyFromDom">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.CompilerResults CompileAssemblyFromDom (System.CodeDom.Compiler.CompilerParameters options, params System.CodeDom.CodeCompileUnit[] compilationUnits);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.CompilerResults CompileAssemblyFromDom(class System.CodeDom.Compiler.CompilerParameters options, class System.CodeDom.CodeCompileUnit[] compilationUnits) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CompileAssemblyFromDom (options As CompilerParameters, ParamArray compilationUnits As CodeCompileUnit()) As CompilerResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::CompilerResults ^ CompileAssemblyFromDom(System::CodeDom::Compiler::CompilerParameters ^ options, ... cli::array &lt;System::CodeDom::CodeCompileUnit ^&gt; ^ compilationUnits);" />
      <MemberSignature Language="F#" Value="abstract member CompileAssemblyFromDom : System.CodeDom.Compiler.CompilerParameters * System.CodeDom.CodeCompileUnit[] -&gt; System.CodeDom.Compiler.CompilerResults&#xA;override this.CompileAssemblyFromDom : System.CodeDom.Compiler.CompilerParameters * System.CodeDom.CodeCompileUnit[] -&gt; System.CodeDom.Compiler.CompilerResults" Usage="codeDomProvider.CompileAssemblyFromDom (options, compilationUnits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.CodeDom.Compiler.CompilerParameters" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="compilationUnits" Type="System.CodeDom.CodeCompileUnit[]" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-2.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="options"><span data-ttu-id="c3fa6-135">コンパイルの設定を示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-135">A <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> object that indicates the settings for the compilation.</span></span></param>
        <param name="compilationUnits"><span data-ttu-id="c3fa6-136">コンパイルするコードを示す <see cref="T:System.CodeDom.CodeCompileUnit" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-136">An array of type <see cref="T:System.CodeDom.CodeCompileUnit" /> that indicates the code to compile.</span></span></param>
        <summary><span data-ttu-id="c3fa6-137">指定したコンパイラ設定を使用して、指定した <see cref="N:System.CodeDom" /> オブジェクトの配列に含まれている <see cref="T:System.CodeDom.CodeCompileUnit" /> ツリーに基づいてアセンブリをコンパイルします。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-137">Compiles an assembly based on the <see cref="N:System.CodeDom" /> trees contained in the specified array of <see cref="T:System.CodeDom.CodeCompileUnit" /> objects, using the specified compiler settings.</span></span></summary>
        <returns><span data-ttu-id="c3fa6-138">コンパイルの結果を示す <see cref="T:System.CodeDom.Compiler.CompilerResults" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-138">A <see cref="T:System.CodeDom.Compiler.CompilerResults" /> object that indicates the results of the compilation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="c3fa6-139">.NET Framework バージョン1.0 および1.1 では、このメソッドは、プロバイダーの <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> メソッドによって返される <xref:System.CodeDom.Compiler.ICodeCompiler> の実装によって提供されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-139">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeCompiler> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> method of the provider.</span></span> <span data-ttu-id="c3fa6-140">バージョン2.0 では、コードプロバイダーによってオーバーライドされていない場合でも、このメソッドをコードプロバイダーで直接呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-140">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="c3fa6-141">コードプロバイダーがこのメソッドをオーバーライドしない場合、<xref:System.CodeDom.Compiler.ICodeCompiler> の実装は基本クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-141">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeCompiler> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="c3fa6-142">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> メソッドは、いずれも派生クラスでオーバーライドされません。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-142">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> method is overridden in a derived class.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="c3fa6-143">このメソッドをオーバーライドする場合は、基底クラスの対応するメソッドを呼び出さないでください。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-143">If you override this method, you must not call the corresponding method of the base class.</span></span> <span data-ttu-id="c3fa6-144">基底クラスのメソッドは、コードコンパイラを使用する既存のプロバイダーとの互換性のために、廃止された <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> メソッドを使用して、派生クラスにジェネレーターを作成します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-144">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> method for compatibility with preexisting providers that use code compilers.</span></span> <span data-ttu-id="c3fa6-145">次に、基本クラスのメソッドは、この関数を実行するために、<see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> の実装で同等のメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-145">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> implementation to perform this function.</span></span> <span data-ttu-id="c3fa6-146">コードコンパイラを使用しないコードプロバイダーから基本クラスのメソッドを呼び出すと、<see cref="T:System.NotImplementedException" /> が表示されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-146">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code compiler.</span></span></para></block>
        <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
        <altmember cref="T:System.CodeDom.CodeCompileUnit" />
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
      </Docs>
    </Member>
    <Member MemberName="CompileAssemblyFromFile">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.CompilerResults CompileAssemblyFromFile (System.CodeDom.Compiler.CompilerParameters options, params string[] fileNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.CompilerResults CompileAssemblyFromFile(class System.CodeDom.Compiler.CompilerParameters options, string[] fileNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CompileAssemblyFromFile (options As CompilerParameters, ParamArray fileNames As String()) As CompilerResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::CompilerResults ^ CompileAssemblyFromFile(System::CodeDom::Compiler::CompilerParameters ^ options, ... cli::array &lt;System::String ^&gt; ^ fileNames);" />
      <MemberSignature Language="F#" Value="abstract member CompileAssemblyFromFile : System.CodeDom.Compiler.CompilerParameters * string[] -&gt; System.CodeDom.Compiler.CompilerResults&#xA;override this.CompileAssemblyFromFile : System.CodeDom.Compiler.CompilerParameters * string[] -&gt; System.CodeDom.Compiler.CompilerResults" Usage="codeDomProvider.CompileAssemblyFromFile (options, fileNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.CodeDom.Compiler.CompilerParameters" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="fileNames" Type="System.String[]" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-2.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="options"><span data-ttu-id="c3fa6-147">コンパイルの設定を示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-147">A <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> object that indicates the settings for the compilation.</span></span></param>
        <param name="fileNames"><span data-ttu-id="c3fa6-148">コンパイルするファイルの名前の配列。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-148">An array of the names of the files to compile.</span></span></param>
        <summary><span data-ttu-id="c3fa6-149">指定したコンパイラ設定を使用して、指定したファイルに格納されているソース コードからアセンブリをコンパイルします。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-149">Compiles an assembly from the source code contained in the specified files, using the specified compiler settings.</span></span></summary>
        <returns><span data-ttu-id="c3fa6-150">コンパイルの結果を示す <see cref="T:System.CodeDom.Compiler.CompilerResults" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-150">A <see cref="T:System.CodeDom.Compiler.CompilerResults" /> object that indicates the results of compilation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="c3fa6-151">.NET Framework バージョン1.0 および1.1 では、このメソッドは、プロバイダーの <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> メソッドによって返される <xref:System.CodeDom.Compiler.ICodeCompiler> の実装によって提供されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-151">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeCompiler> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> method of the provider.</span></span> <span data-ttu-id="c3fa6-152">バージョン2.0 では、コードプロバイダーによってオーバーライドされていない場合でも、このメソッドをコードプロバイダーで直接呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-152">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="c3fa6-153">コードプロバイダーがこのメソッドをオーバーライドしない場合、<xref:System.CodeDom.Compiler.ICodeCompiler> の実装は基本クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-153">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeCompiler> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="c3fa6-154">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> メソッドは、いずれも派生クラスでオーバーライドされません。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-154">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> method is overridden in a derived class.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="c3fa6-155">このメソッドをオーバーライドする場合は、基底クラスの対応するメソッドを呼び出さないでください。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-155">If you override this method, you must not call the corresponding method of the base class.</span></span> <span data-ttu-id="c3fa6-156">基底クラスのメソッドは、コードコンパイラを使用する既存のプロバイダーとの互換性のために、廃止された <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> メソッドを使用して、派生クラスにジェネレーターを作成します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-156">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> method for compatibility with preexisting providers that use code compilers.</span></span> <span data-ttu-id="c3fa6-157">次に、基本クラスのメソッドは、この関数を実行するために、<see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> の実装で同等のメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-157">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> implementation to perform this function.</span></span> <span data-ttu-id="c3fa6-158">コードコンパイラを使用しないコードプロバイダーから基本クラスのメソッドを呼び出すと、<see cref="T:System.NotImplementedException" /> が表示されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-158">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code compiler.</span></span></para></block>
        <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
      </Docs>
    </Member>
    <Member MemberName="CompileAssemblyFromSource">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.CompilerResults CompileAssemblyFromSource (System.CodeDom.Compiler.CompilerParameters options, params string[] sources);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.CompilerResults CompileAssemblyFromSource(class System.CodeDom.Compiler.CompilerParameters options, string[] sources) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CompileAssemblyFromSource (options As CompilerParameters, ParamArray sources As String()) As CompilerResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::CompilerResults ^ CompileAssemblyFromSource(System::CodeDom::Compiler::CompilerParameters ^ options, ... cli::array &lt;System::String ^&gt; ^ sources);" />
      <MemberSignature Language="F#" Value="abstract member CompileAssemblyFromSource : System.CodeDom.Compiler.CompilerParameters * string[] -&gt; System.CodeDom.Compiler.CompilerResults&#xA;override this.CompileAssemblyFromSource : System.CodeDom.Compiler.CompilerParameters * string[] -&gt; System.CodeDom.Compiler.CompilerResults" Usage="codeDomProvider.CompileAssemblyFromSource (options, sources)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.CodeDom.Compiler.CompilerParameters" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="sources" Type="System.String[]" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-2.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="options"><span data-ttu-id="c3fa6-159">このコンパイルのコンパイラ設定を示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-159">A <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> object that indicates the compiler settings for this compilation.</span></span></param>
        <param name="sources"><span data-ttu-id="c3fa6-160">コンパイルするソース コード文字列の配列。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-160">An array of source code strings to compile.</span></span></param>
        <summary><span data-ttu-id="c3fa6-161">指定したコンパイラ設定を使用して、ソース コードが格納されている指定した文字列の配列からアセンブリをコンパイルします。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-161">Compiles an assembly from the specified array of strings containing source code, using the specified compiler settings.</span></span></summary>
        <returns><span data-ttu-id="c3fa6-162">コンパイルの結果を示す <see cref="T:System.CodeDom.Compiler.CompilerResults" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-162">A <see cref="T:System.CodeDom.Compiler.CompilerResults" /> object that indicates the results of compilation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="c3fa6-163">.NET Framework バージョン1.0 および1.1 では、このメソッドは、プロバイダーの <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> メソッドによって返される <xref:System.CodeDom.Compiler.ICodeCompiler> の実装によって提供されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-163">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeCompiler> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> method of the provider.</span></span> <span data-ttu-id="c3fa6-164">バージョン2.0 では、コードプロバイダーによってオーバーライドされていない場合でも、このメソッドをコードプロバイダーで直接呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-164">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="c3fa6-165">コードプロバイダーがこのメソッドをオーバーライドしない場合、<xref:System.CodeDom.Compiler.ICodeCompiler> の実装は基本クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-165">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeCompiler> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="c3fa6-166">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> メソッドは、いずれも派生クラスでオーバーライドされません。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-166">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> method is overridden in a derived class.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="c3fa6-167">このメソッドをオーバーライドする場合は、基底クラスの対応するメソッドを呼び出さないでください。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-167">If you override this method, you must not call the corresponding method of the base class.</span></span> <span data-ttu-id="c3fa6-168">基底クラスのメソッドは、コードコンパイラを使用する既存のプロバイダーとの互換性のために、廃止された <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> メソッドを使用して、派生クラスにジェネレーターを作成します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-168">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> method for compatibility with preexisting providers that use code compilers.</span></span> <span data-ttu-id="c3fa6-169">次に、基本クラスのメソッドは、この関数を実行するために、<see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> の実装で同等のメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-169">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> implementation to perform this function.</span></span> <span data-ttu-id="c3fa6-170">コードコンパイラを使用しないコードプロバイダーから基本クラスのメソッドを呼び出すと、<see cref="T:System.NotImplementedException" /> が表示されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-170">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code compiler.</span></span></para></block>
        <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
      </Docs>
    </Member>
    <Member MemberName="CreateCompiler">
      <MemberSignature Language="C#" Value="public abstract System.CodeDom.Compiler.ICodeCompiler CreateCompiler ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeCompiler CreateCompiler() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateCompiler () As ICodeCompiler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::CodeDom::Compiler::ICodeCompiler ^ CreateCompiler();" />
      <MemberSignature Language="F#" Value="abstract member CreateCompiler : unit -&gt; System.CodeDom.Compiler.ICodeCompiler" Usage="codeDomProvider.CreateCompiler " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.Obsolete("ICodeCompiler is obsolete")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netcore-2.1;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.2;netcore-3.0;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.1">
          <AttributeName>System.Obsolete("Callers should not use the ICodeCompiler interface and should instead use the methods directly on the CodeDomProvider class. Those inheriting from CodeDomProvider must still implement this interface, and should exclude this warning or also obsolete this method.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeCompiler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3fa6-171">派生クラスでオーバーライドされると、新しいコード コンパイラを作成します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-171">When overridden in a derived class, creates a new code compiler.</span></span></summary>
        <returns><span data-ttu-id="c3fa6-172"><see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> ベースのソース コードをコンパイルするために使用できる <see cref="N:System.CodeDom" />。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-172">An <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> that can be used for compilation of <see cref="N:System.CodeDom" /> based source code representations.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3fa6-173">このメソッドは、[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]では廃止されています。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-173">This method is obsolete in the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)].</span></span> <span data-ttu-id="c3fa6-174">別の方法として、コードプロバイダーで直接使用できる <xref:System.CodeDom.Compiler.ICodeCompiler> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-174">The recommended alternative is to call the <xref:System.CodeDom.Compiler.ICodeCompiler> methods that are directly available in the code provider.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="c3fa6-175">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]では、<see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> クラスに <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> メンバーを実装し、このメソッドが呼び出されたときに <see cref="T:System.NotSupportedException" /> をスローする必要があります。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-175">In the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], you should implement the <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> members in the <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> class and throw a <see cref="T:System.NotSupportedException" /> when this method is called.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="CreateEscapedIdentifier">
      <MemberSignature Language="C#" Value="public virtual string CreateEscapedIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string CreateEscapedIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateEscapedIdentifier (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ CreateEscapedIdentifier(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CreateEscapedIdentifier : string -&gt; string&#xA;override this.CreateEscapedIdentifier : string -&gt; string" Usage="codeDomProvider.CreateEscapedIdentifier value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c3fa6-176">エスケープ識別子作成の対象となる文字列。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-176">The string for which to create an escaped identifier.</span></span></param>
        <summary><span data-ttu-id="c3fa6-177">指定した値のエスケープ識別子を作成します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-177">Creates an escaped identifier for the specified value.</span></span></summary>
        <returns><span data-ttu-id="c3fa6-178">その値のエスケープ識別子。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-178">The escaped identifier for the value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3fa6-179">識別子が予約語または言語のキーワードと競合しているかどうかをテスト <xref:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier%2A> し、存在する場合は、言語固有のエスケープコードの書式設定を使用して同等の名前を返します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-179"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier%2A> tests whether the identifier conflicts with any reserved or language keywords, and if so, returns an equivalent name with language-specific escape code formatting.</span></span> <span data-ttu-id="c3fa6-180">これは、エスケープされた識別子と呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-180">This is referred to an escaped identifier.</span></span> <span data-ttu-id="c3fa6-181">エスケープされた識別子は同じ `value` を含みますが、キーワードから識別子を区別するためにエスケープコードの書式設定が追加されています。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-181">The escaped identifier contains the same `value` but has escape-code formatting added to differentiate the identifier from the keyword.</span></span> <span data-ttu-id="c3fa6-182">2つの実装例は、"@" を使用して `value` の前、または `value` を "[" および "]" で角かっこで示しています。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-182">Two implementation examples are preceding the `value` with "@" or bracketing the `value` with "[" and "]".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3fa6-183">.NET Framework バージョン1.0 および1.1 では、このメソッドは、プロバイダーの <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> メソッドによって返される <xref:System.CodeDom.Compiler.ICodeGenerator> の実装によって提供されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-183">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="c3fa6-184">バージョン2.0 では、コードプロバイダーによってオーバーライドされていない場合でも、このメソッドをコードプロバイダーで直接呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-184">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="c3fa6-185">コードプロバイダーがこのメソッドをオーバーライドしない場合、<xref:System.CodeDom.Compiler.ICodeGenerator> の実装は基本クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-185">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="c3fa6-186">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-186">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="c3fa6-187">このメソッドをオーバーライドする場合は、基底クラスの対応するメソッドを呼び出さないでください。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-187">If you override this method, you must not call the corresponding method of the base class.</span></span> <span data-ttu-id="c3fa6-188">基底クラスのメソッドは、コードジェネレーターを使用する既存のプロバイダーとの互換性のために、廃止された <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドを使用して、派生クラスにジェネレーターを作成します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-188">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators.</span></span> <span data-ttu-id="c3fa6-189">次に、基本クラスのメソッドは、この関数を実行するために、<see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> の実装で同等のメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-189">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function.</span></span> <span data-ttu-id="c3fa6-190">コードジェネレーターを使用しないコードプロバイダーから基本クラスのメソッドを呼び出すと、<see cref="T:System.NotImplementedException" /> が表示されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-190">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</span></span></para></block>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateGenerator">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c3fa6-191">派生クラスでオーバーライドされると、新しいコード ジェネレーターを作成します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-191">When overridden in a derived class, creates a new code generator.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateGenerator">
      <MemberSignature Language="C#" Value="public abstract System.CodeDom.Compiler.ICodeGenerator CreateGenerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeGenerator CreateGenerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateGenerator () As ICodeGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::CodeDom::Compiler::ICodeGenerator ^ CreateGenerator();" />
      <MemberSignature Language="F#" Value="abstract member CreateGenerator : unit -&gt; System.CodeDom.Compiler.ICodeGenerator" Usage="codeDomProvider.CreateGenerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.Obsolete("ICodeGenerator is obsolete")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netcore-2.1;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.2;netcore-3.0;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.1">
          <AttributeName>System.Obsolete("Callers should not use the ICodeGenerator interface and should instead use the methods directly on the CodeDomProvider class. Those inheriting from CodeDomProvider must still implement this interface, and should exclude this warning or also obsolete this method.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeGenerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3fa6-192">派生クラスでオーバーライドされると、新しいコード ジェネレーターを作成します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-192">When overridden in a derived class, creates a new code generator.</span></span></summary>
        <returns><span data-ttu-id="c3fa6-193"><see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> ベースのソース コードを生成するために使用できる <see cref="N:System.CodeDom" />。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-193">An <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> that can be used to generate <see cref="N:System.CodeDom" /> based source code representations.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3fa6-194">このメソッドは、[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]では廃止されています。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-194">This method is obsolete in the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)].</span></span> <span data-ttu-id="c3fa6-195">別の方法として、<xref:System.CodeDom.Compiler.CodeDomProvider> クラスで直接使用できる <xref:System.CodeDom.Compiler.ICodeGenerator> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-195">The recommended alternative is to call the <xref:System.CodeDom.Compiler.ICodeGenerator> methods that are directly available in the <xref:System.CodeDom.Compiler.CodeDomProvider> class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="c3fa6-196">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]では、<see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> クラスに <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> メンバーを実装し、このメソッドが呼び出されたときに <see cref="T:System.NotSupportedException" /> をスローする必要があります。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-196">In the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], you should implement the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> members in the <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> class and throw a <see cref="T:System.NotSupportedException" /> when this method is called.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="CreateGenerator">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.ICodeGenerator CreateGenerator (System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeGenerator CreateGenerator(class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateGenerator (output As TextWriter) As ICodeGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::ICodeGenerator ^ CreateGenerator(System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member CreateGenerator : System.IO.TextWriter -&gt; System.CodeDom.Compiler.ICodeGenerator&#xA;override this.CreateGenerator : System.IO.TextWriter -&gt; System.CodeDom.Compiler.ICodeGenerator" Usage="codeDomProvider.CreateGenerator output" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="output"><span data-ttu-id="c3fa6-197">出力に使用する <see cref="T:System.IO.TextWriter" />。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-197">A <see cref="T:System.IO.TextWriter" /> to use to output.</span></span></param>
        <summary><span data-ttu-id="c3fa6-198">派生クラスでオーバーライドされると、出力用に指定されている <see cref="T:System.IO.TextWriter" /> を使用して、新しいコード ジェネレーターを作成します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-198">When overridden in a derived class, creates a new code generator using the specified <see cref="T:System.IO.TextWriter" /> for output.</span></span></summary>
        <returns><span data-ttu-id="c3fa6-199"><see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> ベースのソース コードを生成するために使用できる <see cref="N:System.CodeDom" />。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-199">An <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> that can be used to generate <see cref="N:System.CodeDom" /> based source code representations.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3fa6-200">このメソッドは、指定された <xref:System.IO.TextWriter> を出力に使用します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-200">This method uses the specified <xref:System.IO.TextWriter> for output.</span></span> <span data-ttu-id="c3fa6-201">このメソッドは、ソースコードを段階的に更新する、より最適化されたコード生成をサポートします。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-201">This method supports more optimized code generation that incrementally updates the source code.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3fa6-202">基底クラスの実装は、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> メソッドを呼び出します。このメソッドは、[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] では廃止されており、<xref:System.CodeDom.Compiler.ICodeGenerator> オブジェクトが返されない場合は <xref:System.NotSupportedException> になります。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-202">The base class implementation calls the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method, which is obsolete in the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] and results in a <xref:System.NotSupportedException> if an <xref:System.CodeDom.Compiler.ICodeGenerator> object is not returned.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="CreateGenerator">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.ICodeGenerator CreateGenerator (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeGenerator CreateGenerator(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateGenerator (fileName As String) As ICodeGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::ICodeGenerator ^ CreateGenerator(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="abstract member CreateGenerator : string -&gt; System.CodeDom.Compiler.ICodeGenerator&#xA;override this.CreateGenerator : string -&gt; System.CodeDom.Compiler.ICodeGenerator" Usage="codeDomProvider.CreateGenerator fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="c3fa6-203">出力ファイル名。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-203">The file name to output to.</span></span></param>
        <summary><span data-ttu-id="c3fa6-204">派生クラスでオーバーライドされると、出力用に指定されているファイル名を使用して、新しいコード ジェネレーターを作成します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-204">When overridden in a derived class, creates a new code generator using the specified file name for output.</span></span></summary>
        <returns><span data-ttu-id="c3fa6-205"><see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> ベースのソース コードを生成するために使用できる <see cref="N:System.CodeDom" />。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-205">An <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> that can be used to generate <see cref="N:System.CodeDom" /> based source code representations.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3fa6-206">このメソッドは、指定されたファイル名を出力に使用します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-206">This method uses the specified file name for output.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3fa6-207">基底クラスの実装は、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> メソッドを呼び出します。このメソッドは、[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] では廃止されており、<xref:System.CodeDom.Compiler.ICodeGenerator> オブジェクトが返されない場合は <xref:System.NotSupportedException> になります。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-207">The base class implementation calls the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method, which is obsolete in the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] and results in a <xref:System.NotSupportedException> if an <xref:System.CodeDom.Compiler.ICodeGenerator> object is not returned.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParser">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.ICodeParser CreateParser ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeParser CreateParser() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateParser () As ICodeParser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::ICodeParser ^ CreateParser();" />
      <MemberSignature Language="F#" Value="abstract member CreateParser : unit -&gt; System.CodeDom.Compiler.ICodeParser&#xA;override this.CreateParser : unit -&gt; System.CodeDom.Compiler.ICodeParser" Usage="codeDomProvider.CreateParser " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.Obsolete("ICodeParser is obsolete")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netcore-2.1;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.2;netcore-3.0;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.1">
          <AttributeName>System.Obsolete("Callers should not use the ICodeParser interface and should instead use the methods directly on the CodeDomProvider class. Those inheriting from CodeDomProvider must still implement this interface, and should exclude this warning or also obsolete this method.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeParser</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3fa6-208">派生クラスでオーバーライドされると、新しいコード パーサーを作成します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-208">When overridden in a derived class, creates a new code parser.</span></span></summary>
        <returns><span data-ttu-id="c3fa6-209">ソース コードを解析するために使用できる <see cref="T:System.CodeDom.Compiler.ICodeParser" />。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-209">An <see cref="T:System.CodeDom.Compiler.ICodeParser" /> that can be used to parse source code.</span></span> <span data-ttu-id="c3fa6-210">基本実装では、常に <see langword="null" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-210">The base implementation always returns <see langword="null" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateProvider">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c3fa6-211">指定した言語の <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> インスタンスを取得します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-211">Gets a <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> instance for the specified language.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateProvider">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CodeDomProvider CreateProvider (string language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CodeDomProvider CreateProvider(string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateProvider (language As String) As CodeDomProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CodeDomProvider ^ CreateProvider(System::String ^ language);" />
      <MemberSignature Language="F#" Value="static member CreateProvider : string -&gt; System.CodeDom.Compiler.CodeDomProvider" Usage="System.CodeDom.Compiler.CodeDomProvider.CreateProvider language" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CodeDomProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="language"><span data-ttu-id="c3fa6-212">言語名。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-212">The language name.</span></span></param>
        <summary><span data-ttu-id="c3fa6-213">指定した言語の <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> インスタンスを取得します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-213">Gets a <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> instance for the specified language.</span></span></summary>
        <returns><span data-ttu-id="c3fa6-214">指定した言語名に対して実装される CodeDOM プロバイダー。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-214">A CodeDOM provider that is implemented for the specified language name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="c3fa6-215">このメソッドは、アプリケーションでコードプロバイダーのインスタンスを作成するために最もよく使用され、必要に応じて複数のプロバイダーの1つを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-215">This method is most commonly used to create an instance of a code provider in an application that may optionally use one of several providers.</span></span> <span data-ttu-id="c3fa6-216"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> を使用すると、インスタンス化するコードプロバイダーを実行時に指定できます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-216"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> allows you to specify at run time the code provider you wish to instantiate.</span></span> <span data-ttu-id="c3fa6-217">使用するコードプロバイダーがデザイン時にわかっている場合は、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> メソッドを使用するのではなく、そのコードプロバイダーのインスタンスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-217">If you know at design time which code provider is to be used, you should create an instance of that code provider rather than use the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> method.</span></span>  
  
 <span data-ttu-id="c3fa6-218"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> メソッドは、特定の言語名の <xref:System.CodeDom.Compiler.CodeDomProvider> インスタンスを返します。これは、言語プロバイダーの型を使用して <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> メソッドを呼び出すことと似ています。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-218">The <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> method returns a <xref:System.CodeDom.Compiler.CodeDomProvider> instance for a specific language name; it is similar to calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method with the language provider type.</span></span> <span data-ttu-id="c3fa6-219">言語名に対して構成されているプロバイダーの実装を動的に検索する場合は、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> を使用します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-219">Use <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> when you want to dynamically find a configured provider implementation for a language name.</span></span>  
  
 <span data-ttu-id="c3fa6-220">言語名に対して複数のプロバイダー実装が構成されている場合、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> は、最後に一致した構成要素のプロバイダーインスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-220">If more than one provider implementation is configured for the language name, <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> returns a provider instance for the last matching configuration element.</span></span>  
  
 <span data-ttu-id="c3fa6-221">特定の言語プロバイダーの実装が必要な場合は、<xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=nameWithType> メソッドのオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-221">Use the <xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=nameWithType> method overload when you want a specific language provider implementation.</span></span> <span data-ttu-id="c3fa6-222">たとえば、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> メソッドを使用して、言語名 `"CSharp"`をサポートするプロバイダーインスタンスを取得します。<xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=nameWithType> メソッドオーバーロードを使用して、<xref:Microsoft.CSharp.CSharpCodeProvider?displayProperty=nameWithType> の実装専用のプロバイダーインスタンスを取得します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-222">For example, use the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> method to get a provider instance that supports the language name `"CSharp"`; use the <xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=nameWithType> method overload to get a provider instance specifically for the <xref:Microsoft.CSharp.CSharpCodeProvider?displayProperty=nameWithType> implementation.</span></span> <span data-ttu-id="c3fa6-223">[\]、CultureInfo、オブジェクト\<xref: Bindingflag% 2Csystem.string% 2Csystem.string%% 5b% 5d% 2Csystem.string% 2Csystem.string% 5B% 5D %29? を使用する必要があります。この場合は、次のように指定します。% 2Csystem.string%% 5B% 5D %29? 1 つの言語用の複数のコードプロバイダーがあり、特定のコードプロバイダーのインスタンスを作成する場合は、displayProperty = nameWithType > メソッド。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-223">You should use the [\], CultureInfo, Object\<xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method if you have multiple code providers for a language and you desire to instantiate a specific code provider.</span></span>  
  
 <span data-ttu-id="c3fa6-224"><xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> メソッドは、少なくとも1つのプロバイダーの実装で特定の言語がサポートされているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-224">The <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> method checks whether at least one provider implementation supports a specific language.</span></span> <span data-ttu-id="c3fa6-225"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>に渡す前に、<xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> を使用して言語名を検証できます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-225">You can validate a language name using <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> before passing it to <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>.</span></span> <span data-ttu-id="c3fa6-226">サポートされていない言語名を <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> に渡すと、<xref:System.Configuration.ConfigurationException?displayProperty=nameWithType> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-226">If you pass an unsupported language name to <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> a <xref:System.Configuration.ConfigurationException?displayProperty=nameWithType> is thrown.</span></span>  
  
 <span data-ttu-id="c3fa6-227"><xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A> メソッドを使用すると、コンピューターの構成ファイル (machine.config) の&lt;の system.servicemodel [&gt; 要素](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)で識別される開発者やコンパイラベンダーによって提供される追加の実装など、コンピューター上のすべての <xref:System.CodeDom.Compiler.CodeDomProvider> 実装を確認できます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-227">The <xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A> method can be used to determine all <xref:System.CodeDom.Compiler.CodeDomProvider> implementations on a computer, including additional implementations provided by developers and compiler vendors that are identified in the [&lt;system.codedom&gt; Element](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) in the machine configuration file (Machine.config).</span></span>  
  
 <span data-ttu-id="c3fa6-228"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> メソッドは、特定の言語の <xref:System.CodeDom.Compiler.CodeDomProvider> の実装のインスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-228">The <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> method returns an instance of a <xref:System.CodeDom.Compiler.CodeDomProvider> implementation for a specific language.</span></span>  
  
 <span data-ttu-id="c3fa6-229">言語名では大文字と小文字が区別されません。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-229">Language names are case-insensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3fa6-230">次のコード例では、入力言語の <xref:System.CodeDom.Compiler.CodeDomProvider> の実装を決定し、言語プロバイダーに対して構成されている設定を表示します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-230">The following code example determines the <xref:System.CodeDom.Compiler.CodeDomProvider> implementation for an input language and displays the configured settings for the language provider.</span></span> <span data-ttu-id="c3fa6-231">このコード例は、<xref:System.CodeDom.Compiler.CompilerInfo> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-231">This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerInfo> class.</span></span>  
  
 [!code-cpp[CodeDom_CompilerInfo#6](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#6)]
 [!code-csharp[CodeDom_CompilerInfo#6](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#6)]
 [!code-vb[CodeDom_CompilerInfo#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException"><span data-ttu-id="c3fa6-232">このコンピューターには、<paramref name="language" /> の構成済みのプロバイダーがありません。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-232">The <paramref name="language" /> does not have a configured provider on this computer.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3fa6-233"><paramref name="language" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-233">The <paramref name="language" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="c3fa6-234">呼び出し元に、必要なアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-234">The caller does not have the required permission.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="c3fa6-235">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-235">for full trust for the immediate caller.</span></span> <span data-ttu-id="c3fa6-236">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-236">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateProvider">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CodeDomProvider CreateProvider (string language, System.Collections.Generic.IDictionary&lt;string,string&gt; providerOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CodeDomProvider CreateProvider(string language, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; providerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateProvider (language As String, providerOptions As IDictionary(Of String, String)) As CodeDomProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CodeDomProvider ^ CreateProvider(System::String ^ language, System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ providerOptions);" />
      <MemberSignature Language="F#" Value="static member CreateProvider : string * System.Collections.Generic.IDictionary&lt;string, string&gt; -&gt; System.CodeDom.Compiler.CodeDomProvider" Usage="System.CodeDom.Compiler.CodeDomProvider.CreateProvider (language, providerOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CodeDomProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="providerOptions" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="language"><span data-ttu-id="c3fa6-237">言語名。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-237">The language name.</span></span></param>
        <param name="providerOptions"><span data-ttu-id="c3fa6-238">構成ファイルのプロバイダー オプションのコレクション。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-238">A collection of provider options from the configuration file.</span></span></param>
        <summary><span data-ttu-id="c3fa6-239">指定された言語オプションおよびプロバイダー オプションの <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> インスタンスを取得します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-239">Gets a <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> instance for the specified language and provider options.</span></span></summary>
        <returns><span data-ttu-id="c3fa6-240">指定した言語名およびオプションに対して実装される CodeDOM プロバイダー。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-240">A CodeDOM provider that is implemented for the specified language name and options.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="c3fa6-241">このメソッドは、アプリケーションでコードプロバイダーのインスタンスを作成するために最もよく使用され、必要に応じて複数のプロバイダーの1つを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-241">This method is most commonly used to create an instance of a code provider in an application that may optionally use one of several providers.</span></span> <span data-ttu-id="c3fa6-242"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29> を使用すると、インスタンス化するコードプロバイダーのバージョンを実行時に指定できます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-242"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29> enables you to specify at run time the version of the code provider you want to instantiate.</span></span> <span data-ttu-id="c3fa6-243">使用するコードプロバイダーがデザイン時にわかっている場合は、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29> メソッドを使用する代わりに、そのコードプロバイダーのインスタンスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-243">If you know at design time which code provider is to be used, you should create an instance of that code provider instead of using the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29> method.</span></span>  
  
 <span data-ttu-id="c3fa6-244">特定の言語およびオプションの構成済みプロバイダーの実装を動的に検索する場合は、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29> を使用します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-244">Use <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29> when you want to dynamically find a configured provider implementation for a specific language and options.</span></span> <span data-ttu-id="c3fa6-245">言語名では大文字と小文字が区別されません。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-245">Language names are case-insensitive.</span></span> <span data-ttu-id="c3fa6-246">サポートされているプロバイダーオプションの詳細については、特定の CodeDOM プロバイダーのドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-246">For information about supported provider options, see the specific CodeDOM provider documentation.</span></span>  
  
 <span data-ttu-id="c3fa6-247">プロバイダーの検証とプロバイダーの呼び出しの詳細については、言語名に対して複数のプロバイダーの実装が構成されている場合は、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%29> メソッドの「解説」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-247">For information about validating a provider and calling a provider if more than one provider implementation is configured for the language name, see the Remarks section of the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3fa6-248">次の例では、`providerOptions` パラメーターを使用してプロバイダーのインスタンスを作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-248">The following example shows how to create an instance of a provider by using the `providerOptions` parameter.</span></span>  
  
 [!code-csharp[CodeDomProvider.ProviderOptions#1](~/samples/snippets/csharp/VS_Snippets_CLR/codedomprovider.provideroptions/cs/program.cs#1)]
 [!code-vb[CodeDomProvider.ProviderOptions#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/codedomprovider.provideroptions/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateValidIdentifier">
      <MemberSignature Language="C#" Value="public virtual string CreateValidIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string CreateValidIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateValidIdentifier (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ CreateValidIdentifier(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CreateValidIdentifier : string -&gt; string&#xA;override this.CreateValidIdentifier : string -&gt; string" Usage="codeDomProvider.CreateValidIdentifier value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c3fa6-249">有効な識別子生成の対象となる文字列。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-249">The string for which to generate a valid identifier.</span></span></param>
        <summary><span data-ttu-id="c3fa6-250">指定した値の有効な識別子を作成します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-250">Creates a valid identifier for the specified value.</span></span></summary>
        <returns><span data-ttu-id="c3fa6-251">指定した値の有効な識別子。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-251">A valid identifier for the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3fa6-252">識別子が予約語または言語キーワードと競合しているかどうかをテストし、有効である場合は、競合していない有効な識別子名を返しようとします。 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier%2A></span><span class="sxs-lookup"><span data-stu-id="c3fa6-252"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier%2A> tests whether the identifier conflicts with reserved or language keywords, and if so, attempts to return a valid identifier name that does not conflict.</span></span> <span data-ttu-id="c3fa6-253">通常、返される識別子はキーワードと区別するために若干変更されています。たとえば、名前の前にアンダースコア ("_") 文字を付けることができます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-253">Usually the returned identifier is only slightly modified to differentiate the identifier from the keyword; for example, the name might be preceded by the underscore ("_") character.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3fa6-254">.NET Framework バージョン1.0 および1.1 では、このメソッドは、プロバイダーの <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> メソッドによって返される <xref:System.CodeDom.Compiler.ICodeGenerator> の実装によって提供されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-254">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="c3fa6-255">バージョン2.0 では、コードプロバイダーによってオーバーライドされていない場合でも、このメソッドをコードプロバイダーで直接呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-255">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="c3fa6-256">コードプロバイダーがこのメソッドをオーバーライドしない場合、<xref:System.CodeDom.Compiler.ICodeGenerator> の実装は基本クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-256">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="c3fa6-257">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-257">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="c3fa6-258">このメソッドをオーバーライドする場合は、基底クラスの対応するメソッドを呼び出さないでください。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-258">If you override this method, you must not call the corresponding method of the base class.</span></span> <span data-ttu-id="c3fa6-259">基底クラスのメソッドは、コードジェネレーターを使用する既存のプロバイダーとの互換性のために、廃止された <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドを使用して、派生クラスにジェネレーターを作成します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-259">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators.</span></span> <span data-ttu-id="c3fa6-260">次に、基本クラスのメソッドは、この関数を実行するために、<see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> の実装で同等のメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-260">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function.</span></span> <span data-ttu-id="c3fa6-261">コードジェネレーターを使用しないコードプロバイダーから基本クラスのメソッドを呼び出すと、<see cref="T:System.NotImplementedException" /> が表示されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-261">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="FileExtension">
      <MemberSignature Language="C#" Value="public virtual string FileExtension { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FileExtension" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property FileExtension As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ FileExtension { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileExtension : string" Usage="System.CodeDom.Compiler.CodeDomProvider.FileExtension" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c3fa6-262">現在の言語のソース コード ファイルに使用する既定のファイル名拡張子を取得します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-262">Gets the default file name extension to use for source code files in the current language.</span></span></summary>
        <value><span data-ttu-id="c3fa6-263">現在の言語のソース ファイルの拡張子に対応するファイル名拡張子。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-263">A file name extension corresponding to the extension of the source files of the current language.</span></span> <span data-ttu-id="c3fa6-264">基本実装では、常に <see cref="F:System.String.Empty" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-264">The base implementation always returns <see cref="F:System.String.Empty" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3fa6-265">このプロパティは、生成または使用するファイル拡張子を示すために、コードジェネレーターとコードコンパイラによって使用されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-265">This property is used by code generators and code compilers to indicate what file extensions should be generated or used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3fa6-266">次のコード例では、<xref:Microsoft.VisualBasic.VBCodeProvider?displayProperty=nameWithType>のインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-266">The following code example creates an instance of <xref:Microsoft.VisualBasic.VBCodeProvider?displayProperty=nameWithType>.</span></span> <span data-ttu-id="c3fa6-267">この例では、プロバイダー名、ハッシュコード、および新しいプロバイダーインスタンスの既定のファイル名拡張子を表示します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-267">The example displays the provider name, hash code and default file name extension for the new provider instance.</span></span>  
  
 [!code-cpp[CodeDom_CompilerInfo#3](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#3)]
 [!code-csharp[CodeDom_CompilerInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#3)]
 [!code-vb[CodeDom_CompilerInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromCompileUnit">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromCompileUnit (System.CodeDom.CodeCompileUnit compileUnit, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromCompileUnit(class System.CodeDom.CodeCompileUnit compileUnit, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromCompileUnit (compileUnit As CodeCompileUnit, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromCompileUnit(System::CodeDom::CodeCompileUnit ^ compileUnit, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromCompileUnit : System.CodeDom.CodeCompileUnit * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromCompileUnit : System.CodeDom.CodeCompileUnit * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromCompileUnit (compileUnit, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compileUnit" Type="System.CodeDom.CodeCompileUnit" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="compileUnit"><span data-ttu-id="c3fa6-268">コード生成の対象となる <see cref="T:System.CodeDom.CodeCompileUnit" />。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-268">A <see cref="T:System.CodeDom.CodeCompileUnit" /> for which to generate code.</span></span></param>
        <param name="writer"><span data-ttu-id="c3fa6-269">出力コードの送信先となる <see cref="T:System.IO.TextWriter" />。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-269">The <see cref="T:System.IO.TextWriter" /> to which the output code is sent.</span></span></param>
        <param name="options"><span data-ttu-id="c3fa6-270">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-270">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> that indicates the options to use for generating code.</span></span></param>
        <summary><span data-ttu-id="c3fa6-271">指定した CodeDOM (Code Document Object Model) コンパイル単位のコードを生成し、指定したオプションを使用して、指定したテキスト ライターに生成されたコードを送信します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-271">Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and sends it to the specified text writer, using the specified options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="c3fa6-272">.NET Framework バージョン1.0 および1.1 では、このメソッドは、プロバイダーの <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> メソッドによって返される <xref:System.CodeDom.Compiler.ICodeGenerator> の実装によって提供されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-272">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="c3fa6-273">バージョン2.0 では、コードプロバイダーによってオーバーライドされていない場合でも、このメソッドをコードプロバイダーで直接呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-273">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="c3fa6-274">コードプロバイダーがこのメソッドをオーバーライドしない場合、<xref:System.CodeDom.Compiler.ICodeGenerator> の実装は基本クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-274">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3fa6-275">次のコード例は、<xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit%2A> メソッドを使用して、<xref:System.CodeDom.CodeCompileUnit>から "Hello World" アプリケーションのコードを生成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-275">The following code example shows the use of the <xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit%2A> method to generate code for a "Hello World" application from a <xref:System.CodeDom.CodeCompileUnit>.</span></span> <span data-ttu-id="c3fa6-276">この例は、<xref:System.CodeDom.Compiler.CodeDomProvider> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-276">This example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CodeDomProvider> class.</span></span>  
  
 [!code-cpp[CodeDomExample#3](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomExample/CPP/source.cpp#3)]
 [!code-csharp[CodeDomExample#3](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomExample/CS/source.cs#3)]
 [!code-vb[CodeDomExample#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomExample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="c3fa6-277">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-277">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="c3fa6-278">このメソッドをオーバーライドする場合は、基底クラスの対応するメソッドを呼び出さないでください。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-278">If you override this method, you must not call the corresponding method of the base class.</span></span> <span data-ttu-id="c3fa6-279">基底クラスのメソッドは、コードジェネレーターを使用する既存のプロバイダーとの互換性のために、廃止された <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドを使用して、派生クラスにジェネレーターを作成します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-279">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators.</span></span> <span data-ttu-id="c3fa6-280">次に、基本クラスのメソッドは、この関数を実行するために、<see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> の実装で同等のメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-280">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function.</span></span> <span data-ttu-id="c3fa6-281">コードジェネレーターを使用しないコードプロバイダーから基本クラスのメソッドを呼び出すと、<see cref="T:System.NotImplementedException" /> が表示されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-281">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</span></span></para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromExpression">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromExpression (System.CodeDom.CodeExpression expression, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromExpression(class System.CodeDom.CodeExpression expression, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromExpression (expression As CodeExpression, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromExpression(System::CodeDom::CodeExpression ^ expression, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromExpression : System.CodeDom.CodeExpression * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromExpression : System.CodeDom.CodeExpression * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromExpression (expression, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.CodeDom.CodeExpression" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="c3fa6-282">コード生成の対象となる式を示す <see cref="T:System.CodeDom.CodeExpression" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-282">A <see cref="T:System.CodeDom.CodeExpression" /> object that indicates the expression for which to generate code.</span></span></param>
        <param name="writer"><span data-ttu-id="c3fa6-283">出力コードの送信先となる <see cref="T:System.IO.TextWriter" />。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-283">The <see cref="T:System.IO.TextWriter" /> to which output code is sent.</span></span></param>
        <param name="options"><span data-ttu-id="c3fa6-284">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-284">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> that indicates the options to use for generating code.</span></span></param>
        <summary><span data-ttu-id="c3fa6-285">指定した CodeDOM (Code Document Object Model) 式のコードを生成し、指定したオプションを使用して、指定したテキスト ライターに生成されたコードを送信します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-285">Generates code for the specified Code Document Object Model (CodeDOM) expression and sends it to the specified text writer, using the specified options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="c3fa6-286">.NET Framework バージョン1.0 および1.1 では、このメソッドは、プロバイダーの <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> メソッドによって返される <xref:System.CodeDom.Compiler.ICodeGenerator> の実装によって提供されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-286">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="c3fa6-287">バージョン2.0 では、コードプロバイダーによってオーバーライドされていない場合でも、このメソッドをコードプロバイダーで直接呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-287">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="c3fa6-288">コードプロバイダーがこのメソッドをオーバーライドしない場合、<xref:System.CodeDom.Compiler.ICodeGenerator> の実装は基本クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-288">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="c3fa6-289">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-289">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="c3fa6-290">このメソッドをオーバーライドする場合は、基底クラスの対応するメソッドを呼び出さないでください。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-290">If you override this method, you must not call the corresponding method of the base class.</span></span> <span data-ttu-id="c3fa6-291">基底クラスのメソッドは、コードジェネレーターを使用する既存のプロバイダーとの互換性のために、廃止された <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドを使用して、派生クラスにジェネレーターを作成します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-291">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators.</span></span> <span data-ttu-id="c3fa6-292">次に、基本クラスのメソッドは、この関数を実行するために、<see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> の実装で同等のメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-292">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function.</span></span> <span data-ttu-id="c3fa6-293">コードジェネレーターを使用しないコードプロバイダーから基本クラスのメソッドを呼び出すと、<see cref="T:System.NotImplementedException" /> が表示されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-293">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</span></span></para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromMember">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromMember (System.CodeDom.CodeTypeMember member, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromMember(class System.CodeDom.CodeTypeMember member, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromMember (member As CodeTypeMember, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromMember(System::CodeDom::CodeTypeMember ^ member, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromMember : System.CodeDom.CodeTypeMember * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromMember : System.CodeDom.CodeTypeMember * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromMember (member, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.CodeDom.CodeTypeMember" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="member"><span data-ttu-id="c3fa6-294">コード生成の対象となるメンバーを示す <see cref="T:System.CodeDom.CodeTypeMember" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-294">A <see cref="T:System.CodeDom.CodeTypeMember" /> object that indicates the member for which to generate code.</span></span></param>
        <param name="writer"><span data-ttu-id="c3fa6-295">出力コードの送信先となる <see cref="T:System.IO.TextWriter" />。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-295">The <see cref="T:System.IO.TextWriter" /> to which output code is sent.</span></span></param>
        <param name="options"><span data-ttu-id="c3fa6-296">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-296">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> that indicates the options to use for generating code.</span></span></param>
        <summary><span data-ttu-id="c3fa6-297">指定した CodeDOM (Code Document Object Model) メンバー宣言のコードを生成し、指定したオプションを使用して、指定したテキスト ライターに生成されたコードを送信します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-297">Generates code for the specified Code Document Object Model (CodeDOM) member declaration and sends it to the specified text writer, using the specified options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3fa6-298">基本クラスの実装は、<xref:System.NotImplementedException>をスローします。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-298">The base class implementation throws a <xref:System.NotImplementedException>.</span></span> <span data-ttu-id="c3fa6-299">このメソッドの実装については、<xref:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember%2A?displayProperty=nameWithType> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-299">See <xref:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember%2A?displayProperty=nameWithType> for documentation describing an implementation of this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3fa6-300">次のコード例は、<xref:Microsoft.CSharp.CSharpCodeProvider> クラスおよび <xref:Microsoft.VisualBasic.VBCodeProvider> クラスによって実装される <xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember%2A> メソッドの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-300">The following code example shows the use of the <xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember%2A> method as implemented by the <xref:Microsoft.CSharp.CSharpCodeProvider> and <xref:Microsoft.VisualBasic.VBCodeProvider> classes.</span></span>  
  
 [!code-csharp[CodeDom_GenerateCodeFromMember#1](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_GenerateCodeFromMember/cs/program.cs#1)]
 [!code-vb[CodeDom_GenerateCodeFromMember#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_GenerateCodeFromMember/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="c3fa6-301">このメソッドは、派生クラスでオーバーライドされません。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-301">This method is not overridden in a derived class.</span></span></exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeTypeMember" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromNamespace">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromNamespace (System.CodeDom.CodeNamespace codeNamespace, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromNamespace(class System.CodeDom.CodeNamespace codeNamespace, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromNamespace(System::CodeDom::CodeNamespace ^ codeNamespace, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromNamespace : System.CodeDom.CodeNamespace * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromNamespace : System.CodeDom.CodeNamespace * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromNamespace (codeNamespace, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeNamespace" Type="System.CodeDom.CodeNamespace" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="codeNamespace"><span data-ttu-id="c3fa6-302">コード生成の対象となる名前空間を示す <see cref="T:System.CodeDom.CodeNamespace" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-302">A <see cref="T:System.CodeDom.CodeNamespace" /> object that indicates the namespace for which to generate code.</span></span></param>
        <param name="writer"><span data-ttu-id="c3fa6-303">出力コードの送信先となる <see cref="T:System.IO.TextWriter" />。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-303">The <see cref="T:System.IO.TextWriter" /> to which output code is sent.</span></span></param>
        <param name="options"><span data-ttu-id="c3fa6-304">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-304">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> that indicates the options to use for generating code.</span></span></param>
        <summary><span data-ttu-id="c3fa6-305">指定した CodeDOM (Code Document Object Model) 名前空間のコードを生成し、指定したオプションを使用して、指定したテキスト ライターに生成されたコードを送信します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-305">Generates code for the specified Code Document Object Model (CodeDOM) namespace and sends it to the specified text writer, using the specified options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="c3fa6-306">.NET Framework バージョン1.0 および1.1 では、このメソッドは、プロバイダーの <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> メソッドによって返される <xref:System.CodeDom.Compiler.ICodeGenerator> の実装によって提供されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-306">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="c3fa6-307">バージョン2.0 では、コードプロバイダーによってオーバーライドされていない場合でも、このメソッドをコードプロバイダーで直接呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-307">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="c3fa6-308">コードプロバイダーがこのメソッドをオーバーライドしない場合、<xref:System.CodeDom.Compiler.ICodeGenerator> の実装は基本クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-308">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="c3fa6-309">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-309">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="c3fa6-310">このメソッドをオーバーライドする場合は、基底クラスの対応するメソッドを呼び出さないでください。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-310">If you override this method, you must not call the corresponding method of the base class.</span></span> <span data-ttu-id="c3fa6-311">基底クラスのメソッドは、コードジェネレーターを使用する既存のプロバイダーとの互換性のために、廃止された <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドを使用して、派生クラスにジェネレーターを作成します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-311">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators.</span></span> <span data-ttu-id="c3fa6-312">次に、基本クラスのメソッドは、この関数を実行するために、<see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> の実装で同等のメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-312">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function.</span></span> <span data-ttu-id="c3fa6-313">コードジェネレーターを使用しないコードプロバイダーから基本クラスのメソッドを呼び出すと、<see cref="T:System.NotImplementedException" /> が表示されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-313">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</span></span></para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeNamespace" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromStatement">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromStatement (System.CodeDom.CodeStatement statement, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromStatement(class System.CodeDom.CodeStatement statement, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromStatement (statement As CodeStatement, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromStatement(System::CodeDom::CodeStatement ^ statement, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromStatement : System.CodeDom.CodeStatement * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromStatement : System.CodeDom.CodeStatement * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromStatement (statement, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="statement" Type="System.CodeDom.CodeStatement" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="statement"><span data-ttu-id="c3fa6-314">コード生成の対象となる CodeDOM 要素を格納する <see cref="T:System.CodeDom.CodeStatement" />。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-314">A <see cref="T:System.CodeDom.CodeStatement" /> containing the CodeDOM elements for which to generate code.</span></span></param>
        <param name="writer"><span data-ttu-id="c3fa6-315">出力コードの送信先となる <see cref="T:System.IO.TextWriter" />。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-315">The <see cref="T:System.IO.TextWriter" /> to which output code is sent.</span></span></param>
        <param name="options"><span data-ttu-id="c3fa6-316">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-316">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> that indicates the options to use for generating code.</span></span></param>
        <summary><span data-ttu-id="c3fa6-317">指定した CodeDOM (Code Document Object Model) ステートメントのコードを生成し、指定したオプションを使用して、指定したテキスト ライターに生成されたコードを送信します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-317">Generates code for the specified Code Document Object Model (CodeDOM) statement and sends it to the specified text writer, using the specified options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="c3fa6-318">.NET Framework バージョン1.0 および1.1 では、このメソッドは、プロバイダーの <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> メソッドによって返される <xref:System.CodeDom.Compiler.ICodeGenerator> の実装によって提供されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-318">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="c3fa6-319">バージョン2.0 では、コードプロバイダーによってオーバーライドされていない場合でも、このメソッドをコードプロバイダーで直接呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-319">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="c3fa6-320">コードプロバイダーがこのメソッドをオーバーライドしない場合、<xref:System.CodeDom.Compiler.ICodeGenerator> の実装は基本クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-320">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="c3fa6-321">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-321">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="c3fa6-322">このメソッドをオーバーライドする場合は、基底クラスの対応するメソッドを呼び出さないでください。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-322">If you override this method, you must not call the corresponding method of the base class.</span></span> <span data-ttu-id="c3fa6-323">基底クラスのメソッドは、コードジェネレーターを使用する既存のプロバイダーとの互換性のために、廃止された <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドを使用して、派生クラスにジェネレーターを作成します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-323">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators.</span></span> <span data-ttu-id="c3fa6-324">次に、基本クラスのメソッドは、この関数を実行するために、<see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> の実装で同等のメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-324">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function.</span></span> <span data-ttu-id="c3fa6-325">コードジェネレーターを使用しないコードプロバイダーから基本クラスのメソッドを呼び出すと、<see cref="T:System.NotImplementedException" /> が表示されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-325">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</span></span></para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeStatement" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromType">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromType (System.CodeDom.CodeTypeDeclaration codeType, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromType(class System.CodeDom.CodeTypeDeclaration codeType, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromType (codeType As CodeTypeDeclaration, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromType(System::CodeDom::CodeTypeDeclaration ^ codeType, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromType : System.CodeDom.CodeTypeDeclaration * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromType : System.CodeDom.CodeTypeDeclaration * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromType (codeType, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeType" Type="System.CodeDom.CodeTypeDeclaration" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="codeType"><span data-ttu-id="c3fa6-326">コード生成の対象となる型を示す <see cref="T:System.CodeDom.CodeTypeDeclaration" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-326">A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> object that indicates the type for which to generate code.</span></span></param>
        <param name="writer"><span data-ttu-id="c3fa6-327">出力コードの送信先となる <see cref="T:System.IO.TextWriter" />。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-327">The <see cref="T:System.IO.TextWriter" /> to which output code is sent.</span></span></param>
        <param name="options"><span data-ttu-id="c3fa6-328">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-328">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> that indicates the options to use for generating code.</span></span></param>
        <summary><span data-ttu-id="c3fa6-329">指定した CodeDOM (Code Document Object Model) 型宣言のコードを生成し、指定したオプションを使用して、指定したテキスト ライターに生成されたコードを送信します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-329">Generates code for the specified Code Document Object Model (CodeDOM) type declaration and sends it to the specified text writer, using the specified options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="c3fa6-330">.NET Framework バージョン1.0 および1.1 では、このメソッドは、プロバイダーの <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> メソッドによって返される <xref:System.CodeDom.Compiler.ICodeGenerator> の実装によって提供されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-330">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="c3fa6-331">バージョン2.0 では、コードプロバイダーによってオーバーライドされていない場合でも、このメソッドをコードプロバイダーで直接呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-331">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="c3fa6-332">コードプロバイダーがこのメソッドをオーバーライドしない場合、<xref:System.CodeDom.Compiler.ICodeGenerator> の実装は基本クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-332">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="c3fa6-333">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-333">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="c3fa6-334">このメソッドをオーバーライドする場合は、基底クラスの対応するメソッドを呼び出さないでください。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-334">If you override this method, you must not call the corresponding method of the base class.</span></span> <span data-ttu-id="c3fa6-335">基底クラスのメソッドは、コードジェネレーターを使用する既存のプロバイダーとの互換性のために、廃止された <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドを使用して、派生クラスにジェネレーターを作成します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-335">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators.</span></span> <span data-ttu-id="c3fa6-336">次に、基本クラスのメソッドは、この関数を実行するために、<see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> の実装で同等のメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-336">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function.</span></span> <span data-ttu-id="c3fa6-337">コードジェネレーターを使用しないコードプロバイダーから基本クラスのメソッドを呼び出すと、<see cref="T:System.NotImplementedException" /> が表示されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-337">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</span></span></para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GetAllCompilerInfo">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CompilerInfo[] GetAllCompilerInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CompilerInfo[] GetAllCompilerInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAllCompilerInfo () As CompilerInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::CodeDom::Compiler::CompilerInfo ^&gt; ^ GetAllCompilerInfo();" />
      <MemberSignature Language="F#" Value="static member GetAllCompilerInfo : unit -&gt; System.CodeDom.Compiler.CompilerInfo[]" Usage="System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3fa6-338">このコンピューターの言語プロバイダーおよびコンパイラの構成設定を返します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-338">Returns the language provider and compiler configuration settings for this computer.</span></span></summary>
        <returns><span data-ttu-id="c3fa6-339">構成済みのすべての <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 実装の設定を表す <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-339">An array of type <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> representing the settings of all configured <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementations.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3fa6-340"><xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A> メソッドを使用して、コンピューターの言語プロバイダーの設定を列挙します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-340">Use the <xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A> method to enumerate the language provider settings on a computer.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3fa6-341">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]では、.NET Framework によって提供される既定の言語プロバイダーは[&lt;システムの codedom&gt; Element](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)コンパイラの構成セクションで指定されていないため、削除できません。したがって、このメソッドは、既定のプロバイダーに関する情報と、構成ファイルで指定されたを返します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-341">In the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], the default language providers supplied by the .NET Framework are not specified in the [&lt;system.codedom&gt; Element](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) compiler configuration section and cannot be removed, so this method returns information about the default providers and any specified in the configuration file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3fa6-342">次のコード例では、コンピューター上の言語プロバイダーを列挙し、各言語プロバイダーの構成とコンパイラの設定を表示します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-342">The following code example enumerates the language providers on the computer and displays the configuration and compiler settings for each language provider.</span></span> <span data-ttu-id="c3fa6-343">このコード例は、<xref:System.CodeDom.Compiler.CompilerInfo> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-343">This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerInfo> class.</span></span>  
  
 [!code-cpp[CodeDom_CompilerInfo#8](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#8)]
 [!code-csharp[CodeDom_CompilerInfo#8](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#8)]
 [!code-vb[CodeDom_CompilerInfo#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="c3fa6-344">呼び出し元に、必要なアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-344">The caller does not have the required permission.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="c3fa6-345">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-345">for full trust for the immediate caller.</span></span> <span data-ttu-id="c3fa6-346">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-346">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="T:System.CodeDom.Compiler.CompilerInfo" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/compiler/index.md"><span data-ttu-id="c3fa6-347">コンパイラおよび言語プロバイダー設定のスキーマ</span><span class="sxs-lookup"><span data-stu-id="c3fa6-347">Compiler and Language Provider Settings Schema</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetCompilerInfo">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CompilerInfo GetCompilerInfo (string language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CompilerInfo GetCompilerInfo(string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCompilerInfo (language As String) As CompilerInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CompilerInfo ^ GetCompilerInfo(System::String ^ language);" />
      <MemberSignature Language="F#" Value="static member GetCompilerInfo : string -&gt; System.CodeDom.Compiler.CompilerInfo" Usage="System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo language" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="language"><span data-ttu-id="c3fa6-348">言語名。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-348">A language name.</span></span></param>
        <summary><span data-ttu-id="c3fa6-349">指定した言語の言語プロバイダーおよびコンパイラの構成設定を返します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-349">Returns the language provider and compiler configuration settings for the specified language.</span></span></summary>
        <returns><span data-ttu-id="c3fa6-350">構成済みの <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 実装の設定で作成された <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-350">A <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> object populated with settings of the configured <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3fa6-351">コンピューター構成ファイルの[&lt;の&gt; 要素](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)には、コンピューター上の各 <xref:System.CodeDom.Compiler.CodeDomProvider> 実装の言語プロバイダーとコンパイラ構成設定が含まれています。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-351">The [&lt;system.codedom&gt; Element](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) in the machine configuration file contains the language provider and compiler configuration settings for each <xref:System.CodeDom.Compiler.CodeDomProvider> implementation on the computer.</span></span> <span data-ttu-id="c3fa6-352">マシン構成ファイルの詳細については、「[アプリ](~/docs/framework/configure-apps/index.md)の構成」の「コンピューター構成ファイル」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-352">For information about machine configuration files, see the Machine Configuration Files section in [Configuring Apps](~/docs/framework/configure-apps/index.md).</span></span> <span data-ttu-id="c3fa6-353"><xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A> メソッドは、各プロバイダーの構成要素で指定された言語名を検索します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-353">The <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A> method searches each provider configuration element for the specified language name.</span></span> <span data-ttu-id="c3fa6-354">返される <xref:System.CodeDom.Compiler.CompilerInfo> インスタンスには、構成済みの言語プロバイダーとコンパイラ設定が含まれます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-354">The returned <xref:System.CodeDom.Compiler.CompilerInfo> instance contains the configured language provider and compiler settings.</span></span>  
  
 <span data-ttu-id="c3fa6-355"><xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> メソッドは、少なくとも1つのプロバイダーの実装で特定の言語がサポートされているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-355">The <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> method checks whether at least one provider implementation supports a specific language.</span></span> <span data-ttu-id="c3fa6-356"><xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A>に渡す前に、<xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> を使用して言語名を検証できます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-356">You can validate a language name using <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> before passing it to <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A>.</span></span> <span data-ttu-id="c3fa6-357">これにより、サポートされていない言語名の <xref:System.CodeDom.Compiler.CompilerInfo> インスタンスにアクセスしたときに、<xref:System.Configuration.ConfigurationException?displayProperty=nameWithType> がスローされるのを防ぐことができます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-357">This prevents throwing a <xref:System.Configuration.ConfigurationException?displayProperty=nameWithType> when you access the <xref:System.CodeDom.Compiler.CompilerInfo> instance for an unsupported language name.</span></span>  
  
 <span data-ttu-id="c3fa6-358">入力言語名に対して複数のプロバイダー実装が構成されている場合、<xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A> は、最後に一致したプロバイダー構成要素から設定を返します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-358">If more than one provider implementation is configured for the input language name, <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A> returns the settings from the last matching provider configuration element.</span></span>  
  
 <span data-ttu-id="c3fa6-359">言語名では大文字と小文字が区別されません。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-359">Language names are case-insensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3fa6-360">次のコード例では、入力言語の <xref:System.CodeDom.Compiler.CodeDomProvider> の実装を決定し、言語プロバイダーに対して構成されている設定を表示します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-360">The following code example determines the <xref:System.CodeDom.Compiler.CodeDomProvider> implementation for an input language and displays the configured settings for the language provider.</span></span> <span data-ttu-id="c3fa6-361">このコード例は、<xref:System.CodeDom.Compiler.CompilerInfo> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-361">This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerInfo> class.</span></span>  
  
 [!code-cpp[CodeDom_CompilerInfo#6](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#6)]
 [!code-csharp[CodeDom_CompilerInfo#6](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#6)]
 [!code-vb[CodeDom_CompilerInfo#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationException"><span data-ttu-id="c3fa6-362">このコンピューターには、<paramref name="language" /> の構成済みのプロバイダーがありません。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-362">The <paramref name="language" /> does not have a configured provider on this computer.</span></span></exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException"><span data-ttu-id="c3fa6-363"><paramref name="language" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-363">The <paramref name="language" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="c3fa6-364">呼び出し元に、必要なアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-364">The caller does not have the required permission.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="c3fa6-365">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-365">for full trust for the immediate caller.</span></span> <span data-ttu-id="c3fa6-366">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-366">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="T:System.CodeDom.Compiler.CompilerInfo" />
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/compiler/index.md"><span data-ttu-id="c3fa6-367">コンパイラおよび言語プロバイダー設定のスキーマ</span><span class="sxs-lookup"><span data-stu-id="c3fa6-367">Compiler and Language Provider Settings Schema</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetConverter">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.TypeConverter GetConverter (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.TypeConverter GetConverter(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::ComponentModel::TypeConverter ^ GetConverter(Type ^ type);" />
      <MemberSignature Language="F#" Value="abstract member GetConverter : Type -&gt; System.ComponentModel.TypeConverter&#xA;override this.GetConverter : Type -&gt; System.ComponentModel.TypeConverter" Usage="codeDomProvider.GetConverter type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.TypeConverter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="c3fa6-368">型コンバーターを取得する対象のオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-368">The type of object to retrieve a type converter for.</span></span></param>
        <summary><span data-ttu-id="c3fa6-369">指定したデータ ソースの <see cref="T:System.ComponentModel.TypeConverter" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-369">Gets a <see cref="T:System.ComponentModel.TypeConverter" /> for the specified data type.</span></span></summary>
        <returns><span data-ttu-id="c3fa6-370">指定した型の <see cref="T:System.ComponentModel.TypeConverter" />。指定した型の <see langword="null" /> が見つからない場合は <see cref="T:System.ComponentModel.TypeConverter" />。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-370">A <see cref="T:System.ComponentModel.TypeConverter" /> for the specified type, or <see langword="null" /> if a <see cref="T:System.ComponentModel.TypeConverter" /> for the specified type cannot be found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3fa6-371">派生クラスは、このメソッドをオーバーライドして、特定のデータ型に対して特定の型コンバーターを提供できます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-371">A derived class can override this method to provide specific types of type converters for specific data types.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.TypeConverter" />
      </Docs>
    </Member>
    <Member MemberName="GetLanguageFromExtension">
      <MemberSignature Language="C#" Value="public static string GetLanguageFromExtension (string extension);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetLanguageFromExtension(string extension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLanguageFromExtension (extension As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetLanguageFromExtension(System::String ^ extension);" />
      <MemberSignature Language="F#" Value="static member GetLanguageFromExtension : string -&gt; string" Usage="System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension extension" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extension" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="extension"><span data-ttu-id="c3fa6-372">ファイル名拡張子。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-372">A file name extension.</span></span></param>
        <summary><span data-ttu-id="c3fa6-373"><see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> のコンパイラ構成セクションに構成されている、指定したファイル名拡張子に関連付けられた言語名を返します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-373">Returns a language name associated with the specified file name extension, as configured in the <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> compiler configuration section.</span></span></summary>
        <returns><span data-ttu-id="c3fa6-374"><see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> のコンパイラ構成設定に構成されている、ファイル名拡張子に関連付けられた言語名。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-374">A language name associated with the file name extension, as configured in the <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> compiler configuration settings.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3fa6-375">コンピューター構成ファイル (machine.config) の[&lt;の&gt; 要素](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)には、コンピューター上の各 <xref:System.CodeDom.Compiler.CodeDomProvider> 実装の言語プロバイダーとコンパイラ構成設定が含まれています。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-375">The [&lt;system.codedom&gt; Element](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) in the machine configuration file (Machine.config) contains the language provider and compiler configuration settings for each <xref:System.CodeDom.Compiler.CodeDomProvider> implementation on the computer.</span></span> <span data-ttu-id="c3fa6-376"><xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> メソッドは、各プロバイダー構成要素で指定されたファイル名拡張子を検索します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-376">The <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> method searches each provider configuration element for the specified file name extension.</span></span>  
  
 <span data-ttu-id="c3fa6-377"><xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A> メソッドは、少なくとも1つのプロバイダーの実装で特定のファイル名拡張子がサポートされているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-377">The <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A> method checks whether at least one provider implementation supports a specific file name extension.</span></span> <span data-ttu-id="c3fa6-378"><xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A>に渡す前に、<xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A> を使用してファイル名拡張子を検証することができます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-378">You can validate a file name extension using <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A> before passing it to <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A>.</span></span> <span data-ttu-id="c3fa6-379">これにより、サポートされていないファイル名拡張子に対して <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> が <xref:System.Configuration.ConfigurationException?displayProperty=nameWithType> をスローするのを防ぐことができます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-379">This prevents <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> from throwing a <xref:System.Configuration.ConfigurationException?displayProperty=nameWithType> for an unsupported file name extension.</span></span>  
  
 <span data-ttu-id="c3fa6-380">プロバイダーの実装が入力ファイル名拡張子をサポートしていて、そのプロバイダーに対して複数のサポートされている言語が構成されている場合、<xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> はそのプロバイダーの最初の言語名を返します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-380">If a provider implementation supports the input file name extension, and there are multiple supported languages configured for that provider, then <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> returns the first language name for that provider.</span></span> <span data-ttu-id="c3fa6-381">入力ファイル名拡張子に対して複数のプロバイダー実装が構成されている場合、<xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> は、最後に一致したプロバイダー構成要素から言語名を返します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-381">If more than one provider implementation is configured for the input file name extension, <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> returns the language name from the last matching provider configuration element.</span></span>  
  
 <span data-ttu-id="c3fa6-382">言語名とファイル名拡張子では大文字と小文字が区別されません。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-382">Language names and file name extensions are case-insensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3fa6-383">次のコード例では、入力ファイル名の拡張子の <xref:System.CodeDom.Compiler.CodeDomProvider> の実装を決定し、言語プロバイダーの構成済みの設定を表示します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-383">The following code example determines the <xref:System.CodeDom.Compiler.CodeDomProvider> implementation for an input file name extension and displays the configured settings for the language provider.</span></span> <span data-ttu-id="c3fa6-384">このコード例は、<xref:System.CodeDom.Compiler.CompilerInfo> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-384">This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerInfo> class.</span></span>  
  
 [!code-cpp[CodeDom_CompilerInfo#5](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#5)]
 [!code-csharp[CodeDom_CompilerInfo#5](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#5)]
 [!code-vb[CodeDom_CompilerInfo#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationException"><span data-ttu-id="c3fa6-385">このコンピューターには、<paramref name="extension" /> の構成済みの言語プロバイダーがありません。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-385">The <paramref name="extension" /> does not have a configured language provider on this computer.</span></span></exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException"><span data-ttu-id="c3fa6-386"><paramref name="extension" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-386">The <paramref name="extension" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="c3fa6-387">呼び出し元に、必要なアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-387">The caller does not have the required permission.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="c3fa6-388">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-388">for full trust for the immediate caller.</span></span> <span data-ttu-id="c3fa6-389">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-389">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)" />
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/compiler/index.md"><span data-ttu-id="c3fa6-390">コンパイラおよび言語プロバイダー設定のスキーマ</span><span class="sxs-lookup"><span data-stu-id="c3fa6-390">Compiler and Language Provider Settings Schema</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetTypeOutput">
      <MemberSignature Language="C#" Value="public virtual string GetTypeOutput (System.CodeDom.CodeTypeReference type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetTypeOutput(class System.CodeDom.CodeTypeReference type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTypeOutput (type As CodeTypeReference) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetTypeOutput(System::CodeDom::CodeTypeReference ^ type);" />
      <MemberSignature Language="F#" Value="abstract member GetTypeOutput : System.CodeDom.CodeTypeReference -&gt; string&#xA;override this.GetTypeOutput : System.CodeDom.CodeTypeReference -&gt; string" Usage="codeDomProvider.GetTypeOutput type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.CodeDom.CodeTypeReference" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="c3fa6-391">返される型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-391">A <see cref="T:System.CodeDom.CodeTypeReference" /> that indicates the type to return.</span></span></param>
        <summary><span data-ttu-id="c3fa6-392">指定した <see cref="T:System.CodeDom.CodeTypeReference" /> で示される型を取得します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-392">Gets the type indicated by the specified <see cref="T:System.CodeDom.CodeTypeReference" />.</span></span></summary>
        <returns><span data-ttu-id="c3fa6-393">このコード ジェネレーターによってコードを生成する際に使用する言語用に書式設定された、指定した型のテキスト表現。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-393">A text representation of the specified type, formatted for the language in which code is generated by this code generator.</span></span> <span data-ttu-id="c3fa6-394">たとえば、Visual Basic では、<see cref="T:System.CodeDom.CodeTypeReference" /> 型の <see cref="T:System.Int32" /> を渡すと、"Integer" が返されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-394">In Visual Basic, for example, passing in a <see cref="T:System.CodeDom.CodeTypeReference" /> for the <see cref="T:System.Int32" /> type will return "Integer".</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="c3fa6-395">.NET Framework バージョン1.0 および1.1 では、このメソッドは、プロバイダーの <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> メソッドによって返される <xref:System.CodeDom.Compiler.ICodeGenerator> の実装によって提供されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-395">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="c3fa6-396">バージョン2.0 では、コードプロバイダーによってオーバーライドされていない場合でも、このメソッドをコードプロバイダーで直接呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-396">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="c3fa6-397">コードプロバイダーがこのメソッドをオーバーライドしない場合、<xref:System.CodeDom.Compiler.ICodeGenerator> の実装は基本クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-397">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="c3fa6-398">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-398">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="c3fa6-399">このメソッドをオーバーライドする場合は、基底クラスの対応するメソッドを呼び出さないでください。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-399">If you override this method, you must not call the corresponding method of the base class.</span></span> <span data-ttu-id="c3fa6-400">基底クラスのメソッドは、コードジェネレーターを使用する既存のプロバイダーとの互換性のために、廃止された <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドを使用して、派生クラスにジェネレーターを作成します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-400">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators.</span></span> <span data-ttu-id="c3fa6-401">次に、基本クラスのメソッドは、この関数を実行するために、<see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> の実装で同等のメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-401">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function.</span></span> <span data-ttu-id="c3fa6-402">コードジェネレーターを使用しないコードプロバイダーから基本クラスのメソッドを呼び出すと、<see cref="T:System.NotImplementedException" /> が表示されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-402">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="IsDefinedExtension">
      <MemberSignature Language="C#" Value="public static bool IsDefinedExtension (string extension);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefinedExtension(string extension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDefinedExtension (extension As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDefinedExtension(System::String ^ extension);" />
      <MemberSignature Language="F#" Value="static member IsDefinedExtension : string -&gt; bool" Usage="System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension extension" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extension" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="extension"><span data-ttu-id="c3fa6-403">ファイル名拡張子。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-403">A file name extension.</span></span></param>
        <summary><span data-ttu-id="c3fa6-404">コンピューター上に、ファイル名拡張子の関連する <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 実装が構成されているかどうかを調べます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-404">Tests whether a file name extension has an associated <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementation configured on the computer.</span></span></summary>
        <returns><span data-ttu-id="c3fa6-405">指定したファイル名拡張子に対して、<see langword="true" /> 実装が構成されている場合は <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-405"><see langword="true" /> if a <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementation is configured for the specified file name extension; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3fa6-406">コンピューター構成ファイル (machine.config) の[&lt;の&gt; 要素](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)には、コンピューター上の各 <xref:System.CodeDom.Compiler.CodeDomProvider> 実装の言語プロバイダーとコンパイラ構成設定が含まれています。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-406">The [&lt;system.codedom&gt; Element](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) in the machine configuration file (Machine.config) contains the language provider and compiler configuration settings for each <xref:System.CodeDom.Compiler.CodeDomProvider> implementation on the computer.</span></span> <span data-ttu-id="c3fa6-407"><xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A> メソッドは、プロバイダーの構成要素で指定されたファイル名拡張子を検索します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-407">The <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A> method searches the provider configuration elements for the specified file name extension.</span></span>  
  
 <span data-ttu-id="c3fa6-408">ファイル名拡張子では大文字と小文字が区別されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-408">File name extensions are case-insensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3fa6-409">次のコード例では、入力ファイル名の拡張子の <xref:System.CodeDom.Compiler.CodeDomProvider> の実装を決定し、言語プロバイダーの構成済みの設定を表示します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-409">The following code example determines the <xref:System.CodeDom.Compiler.CodeDomProvider> implementation for an input file name extension and displays the configured settings for the language provider.</span></span> <span data-ttu-id="c3fa6-410">このコード例は、<xref:System.CodeDom.Compiler.CompilerInfo> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-410">This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerInfo> class.</span></span>  
  
 [!code-cpp[CodeDom_CompilerInfo#5](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#5)]
 [!code-csharp[CodeDom_CompilerInfo#5](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#5)]
 [!code-vb[CodeDom_CompilerInfo#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3fa6-411"><paramref name="extension" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-411">The <paramref name="extension" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="c3fa6-412">呼び出し元に、必要なアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-412">The caller does not have the required permission.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="c3fa6-413">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-413">for full trust for the immediate caller.</span></span> <span data-ttu-id="c3fa6-414">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-414">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)" />
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/compiler/index.md"><span data-ttu-id="c3fa6-415">コンパイラおよび言語プロバイダー設定のスキーマ</span><span class="sxs-lookup"><span data-stu-id="c3fa6-415">Compiler and Language Provider Settings Schema</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsDefinedLanguage">
      <MemberSignature Language="C#" Value="public static bool IsDefinedLanguage (string language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefinedLanguage(string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDefinedLanguage (language As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDefinedLanguage(System::String ^ language);" />
      <MemberSignature Language="F#" Value="static member IsDefinedLanguage : string -&gt; bool" Usage="System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage language" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="language"><span data-ttu-id="c3fa6-416">言語名。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-416">The language name.</span></span></param>
        <summary><span data-ttu-id="c3fa6-417">コンピューター上に、言語の <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 実装が構成されているかどうかを調べます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-417">Tests whether a language has a <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementation configured on the computer.</span></span></summary>
        <returns><span data-ttu-id="c3fa6-418">指定した言語に対して、<see langword="true" /> 実装が構成されている場合は <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-418"><see langword="true" /> if a <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementation is configured for the specified language; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3fa6-419">コンピューター構成ファイル (machine.config) の[&lt;の&gt; 要素](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)には、コンピューター上の各 <xref:System.CodeDom.Compiler.CodeDomProvider> 実装の言語プロバイダーとコンパイラ構成設定が含まれています。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-419">The [&lt;system.codedom&gt; Element](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) in the machine configuration file (Machine.config) contains the language provider and compiler configuration settings for each <xref:System.CodeDom.Compiler.CodeDomProvider> implementation on the computer.</span></span> <span data-ttu-id="c3fa6-420"><xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> メソッドは、プロバイダーの構成要素で指定された言語名を検索します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-420">The <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> method searches the provider configuration elements for the specified language name.</span></span>  
  
 <span data-ttu-id="c3fa6-421">言語名では大文字と小文字が区別されません。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-421">Language names are case-insensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3fa6-422">次のコード例では、入力言語の <xref:System.CodeDom.Compiler.CodeDomProvider> の実装を決定し、言語プロバイダーに対して構成されている設定を表示します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-422">The following code example determines the <xref:System.CodeDom.Compiler.CodeDomProvider> implementation for an input language and displays the configured settings for the language provider.</span></span> <span data-ttu-id="c3fa6-423">このコード例は、<xref:System.CodeDom.Compiler.CompilerInfo> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-423">This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerInfo> class.</span></span>  
  
 [!code-cpp[CodeDom_CompilerInfo#6](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#6)]
 [!code-csharp[CodeDom_CompilerInfo#6](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#6)]
 [!code-vb[CodeDom_CompilerInfo#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3fa6-424"><paramref name="language" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-424">The <paramref name="language" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="c3fa6-425">呼び出し元に、必要なアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-425">The caller does not have the required permission.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="c3fa6-426">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-426">for full trust for the immediate caller.</span></span> <span data-ttu-id="c3fa6-427">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-427">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/compiler/index.md"><span data-ttu-id="c3fa6-428">コンパイラおよび言語プロバイダー設定のスキーマ</span><span class="sxs-lookup"><span data-stu-id="c3fa6-428">Compiler and Language Provider Settings Schema</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsValidIdentifier">
      <MemberSignature Language="C#" Value="public virtual bool IsValidIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsValidIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsValidIdentifier (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsValidIdentifier(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member IsValidIdentifier : string -&gt; bool&#xA;override this.IsValidIdentifier : string -&gt; bool" Usage="codeDomProvider.IsValidIdentifier value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c3fa6-429">有効な識別子かどうかを検査する値。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-429">The value to verify as a valid identifier.</span></span></param>
        <summary><span data-ttu-id="c3fa6-430">指定した値が現在の言語で有効な識別子かどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-430">Returns a value that indicates whether the specified value is a valid identifier for the current language.</span></span></summary>
        <returns><span data-ttu-id="c3fa6-431"><see langword="true" /> パラメーターが有効な識別子である場合は <paramref name="value" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-431"><see langword="true" /> if the <paramref name="value" /> parameter is a valid identifier; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3fa6-432">このメソッドは、識別子が有効かどうかをテストします。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-432">This method tests whether an identifier is valid.</span></span> <span data-ttu-id="c3fa6-433"><xref:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier%2A> メソッドはプロバイダー固有です。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-433">The <xref:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier%2A> method is provider specific.</span></span> <span data-ttu-id="c3fa6-434">1つのプロバイダーに対して有効な識別子は、他のプロバイダーに対して有効でない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-434">Identifiers that are valid for one provider might not be valid for other providers.</span></span> <span data-ttu-id="c3fa6-435">`value` ASCII 文字範囲外の文字が含まれている場合は、コードのコンパイルに使用されるすべての言語の識別子を確認します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-435">If `value` contains characters outside of the ASCII character range, check the identifier for all the languages that might be used to compile the code.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3fa6-436">.NET Framework バージョン1.0 および1.1 では、このメソッドは、プロバイダーの <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> メソッドによって返される <xref:System.CodeDom.Compiler.ICodeGenerator> の実装によって提供されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-436">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="c3fa6-437">バージョン2.0 では、コードプロバイダーによってオーバーライドされていない場合でも、このメソッドをコードプロバイダーで直接呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-437">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="c3fa6-438">コードプロバイダーがこのメソッドをオーバーライドしない場合、<xref:System.CodeDom.Compiler.ICodeGenerator> の実装は基本クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-438">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="c3fa6-439">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-439">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="c3fa6-440">派生クラスで <see cref="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)" /> をオーバーライドする場合は、値が言語の規則に適合し、キーワードと競合しない場合にのみ <see langword="true" /> を返すようにメソッドをデザインします。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-440">When overriding <see cref="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)" /> in a derived class, design the method to return <see langword="true" /> only if the value fits the rules of the language and does not conflict with a keyword.</span></span>  
  
<span data-ttu-id="c3fa6-441">このメソッドをオーバーライドする場合は、基底クラスの対応するメソッドを呼び出さないでください。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-441">If you override this method, you must not call the corresponding method of the base class.</span></span> <span data-ttu-id="c3fa6-442">基底クラスのメソッドは、コードジェネレーターを使用する既存のプロバイダーとの互換性のために、廃止された <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドを使用して、派生クラスにジェネレーターを作成します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-442">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators.</span></span> <span data-ttu-id="c3fa6-443">次に、基本クラスのメソッドは、この関数を実行するために、<see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> の実装で同等のメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-443">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function.</span></span> <span data-ttu-id="c3fa6-444">コードジェネレーターを使用しないコードプロバイダーから基本クラスのメソッドを呼び出すと、<see cref="T:System.NotImplementedException" /> が表示されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-444">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="LanguageOptions">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.LanguageOptions LanguageOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.CodeDom.Compiler.LanguageOptions LanguageOptions" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeDomProvider.LanguageOptions" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LanguageOptions As LanguageOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::CodeDom::Compiler::LanguageOptions LanguageOptions { System::CodeDom::Compiler::LanguageOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.LanguageOptions : System.CodeDom.Compiler.LanguageOptions" Usage="System.CodeDom.Compiler.CodeDomProvider.LanguageOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.LanguageOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c3fa6-445">言語機能識別子を取得します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-445">Gets a language features identifier.</span></span></summary>
        <value><span data-ttu-id="c3fa6-446">言語の特殊な機能を示す <see cref="T:System.CodeDom.Compiler.LanguageOptions" />。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-446">A <see cref="T:System.CodeDom.Compiler.LanguageOptions" /> that indicates special features of the language.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.CodeCompileUnit Parse (System.IO.TextReader codeStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeCompileUnit Parse(class System.IO.TextReader codeStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Parse (codeStream As TextReader) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::CodeCompileUnit ^ Parse(System::IO::TextReader ^ codeStream);" />
      <MemberSignature Language="F#" Value="abstract member Parse : System.IO.TextReader -&gt; System.CodeDom.CodeCompileUnit&#xA;override this.Parse : System.IO.TextReader -&gt; System.CodeDom.CodeCompileUnit" Usage="codeDomProvider.Parse codeStream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeStream" Type="System.IO.TextReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="codeStream"><span data-ttu-id="c3fa6-447">解析するコードの読み取りに使用する <see cref="T:System.IO.TextReader" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-447">A <see cref="T:System.IO.TextReader" /> object that is used to read the code to be parsed.</span></span></param>
        <summary><span data-ttu-id="c3fa6-448">指定したテキスト ストリームから読み取ったコードを <see cref="T:System.CodeDom.CodeCompileUnit" /> にコンパイルします。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-448">Compiles the code read from the specified text stream into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span></span></summary>
        <returns><span data-ttu-id="c3fa6-449">コードの解析後の表現を格納する <see cref="T:System.CodeDom.CodeCompileUnit" />。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-449">A <see cref="T:System.CodeDom.CodeCompileUnit" /> that contains a representation of the parsed code.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="c3fa6-450">.NET Framework バージョン1.0 および1.1 では、このメソッドは、プロバイダーの <xref:System.CodeDom.Compiler.CodeDomProvider.CreateParser%2A> メソッドによって返される <xref:System.CodeDom.Compiler.ICodeParser> の実装によって提供されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-450">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeParser> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateParser%2A> method of the provider.</span></span> <span data-ttu-id="c3fa6-451">バージョン2.0 では、コードプロバイダーによってオーバーライドされていない場合でも、このメソッドをコードプロバイダーで直接呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-451">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="c3fa6-452">コードプロバイダーがこのメソッドをオーバーライドしない場合、<xref:System.CodeDom.Compiler.ICodeParser> の実装は基本クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-452">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeParser> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="c3fa6-453">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-453">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="c3fa6-454">このメソッドをオーバーライドする場合は、基底クラスの対応するメソッドを呼び出さないでください。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-454">If you override this method, you must not call the corresponding method of the base class.</span></span> <span data-ttu-id="c3fa6-455">基底クラスのメソッドは、コードパーサーを使用する既存のプロバイダーとの互換性を保つために、廃止された <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" /> メソッドを使用して、派生クラスにパーサーを作成します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-455">The base-class method creates a parser in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" /> method for compatibility with preexisting providers that use code parsers.</span></span> <span data-ttu-id="c3fa6-456">次に、基本クラスのメソッドは、この関数を実行するために、<see cref="T:System.CodeDom.Compiler.ICodeParser" /> の実装で同等のメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-456">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeParser" /> implementation to perform this function.</span></span> <span data-ttu-id="c3fa6-457">コードパーサーを使用しないコードプロバイダーから基本クラスのメソッドを呼び出すと、<see cref="T:System.NotImplementedException" /> が表示されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-457">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code parser.</span></span></para></block>
        <altmember cref="T:System.CodeDom.CodeCompileUnit" />
        <altmember cref="T:System.IO.TextReader" />
      </Docs>
    </Member>
    <Member MemberName="Supports">
      <MemberSignature Language="C#" Value="public virtual bool Supports (System.CodeDom.Compiler.GeneratorSupport generatorSupport);" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Supports(valuetype System.CodeDom.Compiler.GeneratorSupport generatorSupport) cil managed" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Supports(System::CodeDom::Compiler::GeneratorSupport generatorSupport);" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member Supports : System.CodeDom.Compiler.GeneratorSupport -&gt; bool&#xA;override this.Supports : System.CodeDom.Compiler.GeneratorSupport -&gt; bool" Usage="codeDomProvider.Supports generatorSupport" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C#" Value="public virtual bool Supports (System.CodeDom.Compiler.GeneratorSupport supports);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Supports(valuetype System.CodeDom.Compiler.GeneratorSupport supports) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Supports (supports As GeneratorSupport) As Boolean" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Supports(System::CodeDom::Compiler::GeneratorSupport supports);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member Supports : System.CodeDom.Compiler.GeneratorSupport -&gt; bool&#xA;override this.Supports : System.CodeDom.Compiler.GeneratorSupport -&gt; bool" Usage="codeDomProvider.Supports supports" FrameworkAlternate="xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generatorSupport" Type="System.CodeDom.Compiler.GeneratorSupport" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="supports" Type="System.CodeDom.Compiler.GeneratorSupport" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="generatorSupport"><span data-ttu-id="c3fa6-458">検査するコード生成サポートの種類を示す <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-458">A <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> object that indicates the type of code generation support to verify.</span></span></param>
        <param name="supports">To be added.</param>
        <summary><span data-ttu-id="c3fa6-459">指定したコードを生成できるかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-459">Returns a value indicating whether the specified code generation support is provided.</span></span></summary>
        <returns><span data-ttu-id="c3fa6-460">指定したコードを生成できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-460"><see langword="true" /> if the specified code generation support is provided; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3fa6-461">このメソッドは、適切な機能フラグのセットとバイナリ `OR` 演算子 (&#124;) を結合することによって、一連の機能をテストするために、一度に複数の <xref:System.CodeDom.Compiler.GeneratorSupport> フラグを使用して呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-461">This method can be called with a number of <xref:System.CodeDom.Compiler.GeneratorSupport> flags at once to test for a set of capabilities by joining a set of appropriate capability flags together with a binary `OR` operator (&#124;).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3fa6-462">.NET Framework バージョン1.0 および1.1 では、このメソッドは、プロバイダーの <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> メソッドによって返される <xref:System.CodeDom.Compiler.ICodeGenerator> の実装によって提供されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-462">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="c3fa6-463">バージョン2.0 では、コードプロバイダーによってオーバーライドされていない場合でも、このメソッドをコードプロバイダーで直接呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-463">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="c3fa6-464">コードプロバイダーがこのメソッドをオーバーライドしない場合、<xref:System.CodeDom.Compiler.ICodeGenerator> の実装は基本クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-464">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="c3fa6-465">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-465">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="c3fa6-466">このメソッドをオーバーライドする場合は、基底クラスの対応するメソッドを呼び出さないでください。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-466">If you override this method, you must not call the corresponding method of the base class.</span></span> <span data-ttu-id="c3fa6-467">基底クラスのメソッドは、コードジェネレーターを使用する既存のプロバイダーとの互換性のために、廃止された <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドを使用して、派生クラスにジェネレーターを作成します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-467">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators.</span></span> <span data-ttu-id="c3fa6-468">次に、基本クラスのメソッドは、この関数を実行するために、<see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> の実装で同等のメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-468">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function.</span></span> <span data-ttu-id="c3fa6-469">コードジェネレーターを使用しないコードプロバイダーから基本クラスのメソッドを呼び出すと、<see cref="T:System.NotImplementedException" /> が表示されます。</span><span class="sxs-lookup"><span data-stu-id="c3fa6-469">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</span></span></para></block>
        <altmember cref="T:System.CodeDom.Compiler.GeneratorSupport" />
      </Docs>
    </Member>
  </Members>
</Type>
