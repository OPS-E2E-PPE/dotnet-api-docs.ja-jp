<Type Name="PEHeaders" FullName="System.Reflection.PortableExecutable.PEHeaders">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2a20c03a2d0c48829716d9d490615aadcf409cd5" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75098169" /></Metadata><TypeSignature Language="C#" Value="public sealed class PEHeaders" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PEHeaders extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.PortableExecutable.PEHeaders" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PEHeaders" />
  <TypeSignature Language="C++ CLI" Value="public ref class PEHeaders sealed" />
  <TypeSignature Language="F#" Value="type PEHeaders = class" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Metadata</AssemblyName>
    <AssemblyVersion>1.0.22.0</AssemblyVersion>
    <AssemblyVersion>1.3.0.0</AssemblyVersion>
    <AssemblyVersion>1.4.1.0</AssemblyVersion>
    <AssemblyVersion>1.4.2.0</AssemblyVersion>
    <AssemblyVersion>1.4.3.0</AssemblyVersion>
    <AssemblyVersion>1.4.4.0</AssemblyVersion>
    <AssemblyVersion>1.4.5.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="72220-101">ストリームから PE (移植可能な実行可能ファイル) ヘッダーおよび COFF (Common Object File Format) ヘッダーを読み取る型を定義します。</span><span class="sxs-lookup"><span data-stu-id="72220-101">Defines a type that reads PE (Portable Executable) and COFF (Common Object File Format) headers from a stream.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEHeaders (System.IO.Stream peStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream peStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEHeaders.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (peStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEHeaders(System::IO::Stream ^ peStream);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEHeaders : System.IO.Stream -&gt; System.Reflection.PortableExecutable.PEHeaders" Usage="new System.Reflection.PortableExecutable.PEHeaders peStream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="peStream"><span data-ttu-id="72220-102">ストリームの現在位置で開始し、ストリームの末尾で終了する PE イメージを含むストリーム。</span><span class="sxs-lookup"><span data-stu-id="72220-102">A stream containing the PE image starting at the stream's current position and ending at the end of the stream.</span></span></param>
        <summary><span data-ttu-id="72220-103">指定したストリーム内の現在位置から PE ヘッダーを読み取る <see cref="T:System.Reflection.PortableExecutable.PEHeaders" /> クラスの新しいインスタンスをインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="72220-103">Instantiates a new instance of the <see cref="T:System.Reflection.PortableExecutable.PEHeaders" /> class that reads the PE headers from the current location in the specified stream.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="72220-104">ストリームから読み取られたデータの形式が無効です。</span><span class="sxs-lookup"><span data-stu-id="72220-104">The data read from the stream has an invalid format.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="72220-105">ストリームからの読み取り中のエラー。</span><span class="sxs-lookup"><span data-stu-id="72220-105">Error reading from the stream.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="72220-106">ストリームではシーク操作がサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="72220-106">The stream does not support seek operations.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="72220-107"><paramref name="peStream" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="72220-107"><paramref name="peStream" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEHeaders (System.IO.Stream peStream, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream peStream, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEHeaders.#ctor(System.IO.Stream,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (peStream As Stream, size As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEHeaders(System::IO::Stream ^ peStream, int size);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEHeaders : System.IO.Stream * int -&gt; System.Reflection.PortableExecutable.PEHeaders" Usage="new System.Reflection.PortableExecutable.PEHeaders (peStream, size)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peStream" Type="System.IO.Stream" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="peStream"><span data-ttu-id="72220-108">現在の位置から始まる指定されたサイズの PE イメージを含むストリーム。</span><span class="sxs-lookup"><span data-stu-id="72220-108">A stream containing PE image of the given size starting at its current position.</span></span></param>
        <param name="size"><span data-ttu-id="72220-109">PE イメージのサイズです。</span><span class="sxs-lookup"><span data-stu-id="72220-109">The size of the PE image.</span></span></param>
        <summary><span data-ttu-id="72220-110">指定されたサイズの PE イメージを表すストリームから PE ヘッダーを読み取る <see cref="T:System.Reflection.PortableExecutable.PEHeaders" /> クラスの新しいインスタンスをインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="72220-110">Instantiates a new instance of the <see cref="T:System.Reflection.PortableExecutable.PEHeaders" /> class that reads the PE headers from a stream that represents a PE image of a specified size.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="72220-111">ストリームから読み取られたデータの形式が無効です。</span><span class="sxs-lookup"><span data-stu-id="72220-111">The data read from the stream has an invalid format.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="72220-112">ストリームからの読み取り中のエラー。</span><span class="sxs-lookup"><span data-stu-id="72220-112">Error reading from the stream.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="72220-113">ストリームではシーク操作がサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="72220-113">The stream does not support seek operations.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="72220-114"><paramref name="peStream" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="72220-114"><paramref name="peStream" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="72220-115"><paramref name="size" /> が負の値であるか、ストリームの末尾を超えています。</span><span class="sxs-lookup"><span data-stu-id="72220-115"><paramref name="size" /> is negative or extends past the end of the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEHeaders (System.IO.Stream peStream, int size, bool isLoadedImage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream peStream, int32 size, bool isLoadedImage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEHeaders.#ctor(System.IO.Stream,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (peStream As Stream, size As Integer, isLoadedImage As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEHeaders(System::IO::Stream ^ peStream, int size, bool isLoadedImage);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEHeaders : System.IO.Stream * int * bool -&gt; System.Reflection.PortableExecutable.PEHeaders" Usage="new System.Reflection.PortableExecutable.PEHeaders (peStream, size, isLoadedImage)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peStream" Type="System.IO.Stream" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
        <Parameter Name="size" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
        <Parameter Name="isLoadedImage" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="peStream"><span data-ttu-id="72220-116">現在の位置から始まる指定されたサイズの PE イメージを含むストリーム。</span><span class="sxs-lookup"><span data-stu-id="72220-116">The stream containing PE image of the given size starting at its current position.</span></span></param>
        <param name="size"><span data-ttu-id="72220-117">PE イメージのサイズです。</span><span class="sxs-lookup"><span data-stu-id="72220-117">The size of the PE image.</span></span></param>
        <param name="isLoadedImage"><span data-ttu-id="72220-118">OS ローダーによって PE イメージがメモリに読み込まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="72220-118"><see langword="true" /> if the PE image has been loaded into memory by the OS loader; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="72220-119">指定されたサイズの PE イメージを表すと共に PE イメージがメモリに読み込まれているかどうかを示すストリームから PE ヘッダーを読み取る <see cref="T:System.Reflection.PortableExecutable.PEHeaders" /> クラスの新しいインスタンスをインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="72220-119">Instantiates a new instance of the <see cref="T:System.Reflection.PortableExecutable.PEHeaders" /> class that reads the PE headers from a stream that represents a PE image of a specified size and indicates whether the PE image has been loaded into memory.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="72220-120">ストリームから読み取られたデータの形式が無効です。</span><span class="sxs-lookup"><span data-stu-id="72220-120">The data read from the stream has invalid format.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="72220-121">ストリームからの読み取り中のエラー。</span><span class="sxs-lookup"><span data-stu-id="72220-121">Error reading from the stream.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="72220-122">ストリームではシーク操作がサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="72220-122">The stream does not support seek operations.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="72220-123"><paramref name="peStream" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="72220-123"><paramref name="peStream" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="72220-124"><paramref name="size" /> が負の値であるか、ストリームの末尾を超えています。</span><span class="sxs-lookup"><span data-stu-id="72220-124"><paramref name="size" /> is negative or extends past the end of the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CoffHeader">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.CoffHeader CoffHeader { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.PortableExecutable.CoffHeader CoffHeader" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEHeaders.CoffHeader" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CoffHeader As CoffHeader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::PortableExecutable::CoffHeader ^ CoffHeader { System::Reflection::PortableExecutable::CoffHeader ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CoffHeader : System.Reflection.PortableExecutable.CoffHeader" Usage="System.Reflection.PortableExecutable.PEHeaders.CoffHeader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.CoffHeader</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="72220-125">イメージの COFF ヘッダーを取得します。</span><span class="sxs-lookup"><span data-stu-id="72220-125">Gets the COFF header of the image.</span></span></summary>
        <value><span data-ttu-id="72220-126">イメージの COFF ヘッダー。</span><span class="sxs-lookup"><span data-stu-id="72220-126">The COFF header of the image.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoffHeaderStartOffset">
      <MemberSignature Language="C#" Value="public int CoffHeaderStartOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CoffHeaderStartOffset" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEHeaders.CoffHeaderStartOffset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CoffHeaderStartOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CoffHeaderStartOffset { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CoffHeaderStartOffset : int" Usage="System.Reflection.PortableExecutable.PEHeaders.CoffHeaderStartOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="72220-127">PE イメージの先頭から COFF ヘッダーの先頭までのバイト オフセットを取得します。</span><span class="sxs-lookup"><span data-stu-id="72220-127">Gets the byte offset from the start of the PE image to the start of the COFF header.</span></span></summary>
        <value><span data-ttu-id="72220-128">PE イメージの先頭から COFF ヘッダーの先頭までのバイトオフセット。</span><span class="sxs-lookup"><span data-stu-id="72220-128">The byte offset from the start of the PE image to the start of the COFF header.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CorHeader">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.CorHeader CorHeader { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.PortableExecutable.CorHeader CorHeader" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEHeaders.CorHeader" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CorHeader As CorHeader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::PortableExecutable::CorHeader ^ CorHeader { System::Reflection::PortableExecutable::CorHeader ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CorHeader : System.Reflection.PortableExecutable.CorHeader" Usage="System.Reflection.PortableExecutable.PEHeaders.CorHeader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.CorHeader</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="72220-129">COR ヘッダーを取得します。</span><span class="sxs-lookup"><span data-stu-id="72220-129">Gets the COR header.</span></span></summary>
        <value><span data-ttu-id="72220-130">COR ヘッダー。イメージに含まれていない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="72220-130">The COR header, or <see langword="null" /> if the image does not have one.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CorHeaderStartOffset">
      <MemberSignature Language="C#" Value="public int CorHeaderStartOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CorHeaderStartOffset" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEHeaders.CorHeaderStartOffset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CorHeaderStartOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CorHeaderStartOffset { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CorHeaderStartOffset : int" Usage="System.Reflection.PortableExecutable.PEHeaders.CorHeaderStartOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="72220-131">イメージの先頭から COR ヘッダーまでのバイト オフセットを取得します。</span><span class="sxs-lookup"><span data-stu-id="72220-131">Gets the byte offset from the start of the image to the COR header.</span></span></summary>
        <value><span data-ttu-id="72220-132">イメージの先頭から COR ヘッダーまでのバイトオフセット。イメージに COR ヘッダーがない場合は-1。</span><span class="sxs-lookup"><span data-stu-id="72220-132">The byte offset from the start of the image to the COR header, or -1 if the image does not have a COR header.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainingSectionIndex">
      <MemberSignature Language="C#" Value="public int GetContainingSectionIndex (int relativeVirtualAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetContainingSectionIndex(int32 relativeVirtualAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEHeaders.GetContainingSectionIndex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContainingSectionIndex (relativeVirtualAddress As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetContainingSectionIndex(int relativeVirtualAddress);" />
      <MemberSignature Language="F#" Value="member this.GetContainingSectionIndex : int -&gt; int" Usage="pEHeaders.GetContainingSectionIndex relativeVirtualAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relativeVirtualAddress" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="relativeVirtualAddress"><span data-ttu-id="72220-133">検索対象の相対仮想アドレス。</span><span class="sxs-lookup"><span data-stu-id="72220-133">The relative virtual address to search for.</span></span></param>
        <summary><span data-ttu-id="72220-134">指定された相対仮想アドレスを含むセクションを求めて PE イメージのセクションを検索します。</span><span class="sxs-lookup"><span data-stu-id="72220-134">Searches sections of the PE image for the section that contains the specified Relative Virtual Address.</span></span></summary>
        <returns><span data-ttu-id="72220-135"><paramref name="relativeVirtualAddress" /> を含むセクションのインデックス。検索が失敗した場合は -1。</span><span class="sxs-lookup"><span data-stu-id="72220-135">The index of the section that contains <paramref name="relativeVirtualAddress" />, or -1 if there the search is unsuccessful.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCoffOnly">
      <MemberSignature Language="C#" Value="public bool IsCoffOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCoffOnly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEHeaders.IsCoffOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCoffOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCoffOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCoffOnly : bool" Usage="System.Reflection.PortableExecutable.PEHeaders.IsCoffOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="72220-136">イメージが Coff のみであるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="72220-136">Gets a value that indicates whether the image is Coff only.</span></span></summary>
        <value><span data-ttu-id="72220-137">イメージが Coff のみである場合は <see langword="true" /> します。それ以外の場合は、<see langword="false" />ます。</span><span class="sxs-lookup"><span data-stu-id="72220-137"><see langword="true" /> if the image is Coff only; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConsoleApplication">
      <MemberSignature Language="C#" Value="public bool IsConsoleApplication { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConsoleApplication" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEHeaders.IsConsoleApplication" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsConsoleApplication As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsConsoleApplication { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsConsoleApplication : bool" Usage="System.Reflection.PortableExecutable.PEHeaders.IsConsoleApplication" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="72220-138">イメージが Windows コンソール アプリケーションを表すかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="72220-138">Gets a value that indicates whether the image represents a Windows console application.</span></span></summary>
        <value><span data-ttu-id="72220-139">イメージが Windows コンソールアプリケーションである場合は <see langword="true" /> します。それ以外の場合は、<see langword="false" />ます。</span><span class="sxs-lookup"><span data-stu-id="72220-139"><see langword="true" /> if the image is a Windows console applications; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDll">
      <MemberSignature Language="C#" Value="public bool IsDll { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDll" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEHeaders.IsDll" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDll As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDll { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDll : bool" Usage="System.Reflection.PortableExecutable.PEHeaders.IsDll" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="72220-140">イメージがダイナミック リンク ライブラリを表すかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="72220-140">Gets a value that indicates whether the image represents a dynamic link library.</span></span></summary>
        <value><span data-ttu-id="72220-141">イメージが DLL である場合は <see langword="true" /> します。それ以外の場合は、<see langword="false" />ます。</span><span class="sxs-lookup"><span data-stu-id="72220-141"><see langword="true" /> if the image is a DLL; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsExe">
      <MemberSignature Language="C#" Value="public bool IsExe { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExe" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEHeaders.IsExe" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExe As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExe { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExe : bool" Usage="System.Reflection.PortableExecutable.PEHeaders.IsExe" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="72220-142">イメージが実行可能ファイルを表すかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="72220-142">Gets a value that indicates whether the image represents an executable.</span></span></summary>
        <value><span data-ttu-id="72220-143">イメージが実行可能な場合は <see langword="true" />。それ以外の場合は、<see langword="false" />ます。</span><span class="sxs-lookup"><span data-stu-id="72220-143"><see langword="true" /> if the image is an executable; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MetadataSize">
      <MemberSignature Language="C#" Value="public int MetadataSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MetadataSize" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEHeaders.MetadataSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MetadataSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MetadataSize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MetadataSize : int" Usage="System.Reflection.PortableExecutable.PEHeaders.MetadataSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="72220-144">CLI メタデータのサイズを取得します。</span><span class="sxs-lookup"><span data-stu-id="72220-144">Gets the size of the CLI metadata.</span></span></summary>
        <value><span data-ttu-id="72220-145">CLI メタデータのサイズ。イメージにメタデータが含まれていない場合は0。</span><span class="sxs-lookup"><span data-stu-id="72220-145">the size of the CLI metadata, or 0 if the image does not contain metadata.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MetadataStartOffset">
      <MemberSignature Language="C#" Value="public int MetadataStartOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MetadataStartOffset" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEHeaders.MetadataStartOffset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MetadataStartOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MetadataStartOffset { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MetadataStartOffset : int" Usage="System.Reflection.PortableExecutable.PEHeaders.MetadataStartOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="72220-146">PE イメージの先頭から CLI メタデータの先頭までのオフセット (バイト単位) を取得します。</span><span class="sxs-lookup"><span data-stu-id="72220-146">Gets the offset (in bytes) from the start of the PE image to the start of the CLI metadata.</span></span></summary>
        <value><span data-ttu-id="72220-147">PE イメージの開始から CLI メタデータの先頭までのオフセット (バイト単位)。または、イメージにメタデータが含まれていない場合は-1。</span><span class="sxs-lookup"><span data-stu-id="72220-147">The offset (in bytes) from the start of the PE image to the start of the CLI metadata, or -1 if the image does not contain metadata.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PEHeader">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PEHeader PEHeader { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.PortableExecutable.PEHeader PEHeader" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEHeaders.PEHeader" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PEHeader As PEHeader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::PortableExecutable::PEHeader ^ PEHeader { System::Reflection::PortableExecutable::PEHeader ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PEHeader : System.Reflection.PortableExecutable.PEHeader" Usage="System.Reflection.PortableExecutable.PEHeaders.PEHeader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEHeader</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="72220-148">イメージの PE ヘッダーを取得します。</span><span class="sxs-lookup"><span data-stu-id="72220-148">Gets the image's PE header.</span></span></summary>
        <value><span data-ttu-id="72220-149">イメージの PE ヘッダー、またはイメージが COFF のみの場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="72220-149">The image's PE header, or <see langword="null" /> if the image is COFF only.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PEHeaderStartOffset">
      <MemberSignature Language="C#" Value="public int PEHeaderStartOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PEHeaderStartOffset" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEHeaders.PEHeaderStartOffset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PEHeaderStartOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PEHeaderStartOffset { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PEHeaderStartOffset : int" Usage="System.Reflection.PortableExecutable.PEHeaders.PEHeaderStartOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="72220-150">イメージの先頭からのヘッダーのバイト オフセットを取得します。</span><span class="sxs-lookup"><span data-stu-id="72220-150">Gets the byte offset of the header from the start of the image.</span></span></summary>
        <value><span data-ttu-id="72220-151">イメージの先頭からのヘッダーのバイトオフセット。</span><span class="sxs-lookup"><span data-stu-id="72220-151">The byte offset of the header from the start of the image.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SectionHeaders">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;System.Reflection.PortableExecutable.SectionHeader&gt; SectionHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;valuetype System.Reflection.PortableExecutable.SectionHeader&gt; SectionHeaders" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEHeaders.SectionHeaders" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SectionHeaders As ImmutableArray(Of SectionHeader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Immutable::ImmutableArray&lt;System::Reflection::PortableExecutable::SectionHeader&gt; SectionHeaders { System::Collections::Immutable::ImmutableArray&lt;System::Reflection::PortableExecutable::SectionHeader&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.SectionHeaders : System.Collections.Immutable.ImmutableArray&lt;System.Reflection.PortableExecutable.SectionHeader&gt;" Usage="System.Reflection.PortableExecutable.PEHeaders.SectionHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;System.Reflection.PortableExecutable.SectionHeader&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="72220-152">PE セクション ヘッダーを取得します。</span><span class="sxs-lookup"><span data-stu-id="72220-152">Gets the PE section headers.</span></span></summary>
        <value><span data-ttu-id="72220-153">PE セクションヘッダーを格納している配列。</span><span class="sxs-lookup"><span data-stu-id="72220-153">An array containing the PE section headers.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetDirectoryOffset">
      <MemberSignature Language="C#" Value="public bool TryGetDirectoryOffset (System.Reflection.PortableExecutable.DirectoryEntry directory, out int offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetDirectoryOffset(valuetype System.Reflection.PortableExecutable.DirectoryEntry directory, [out] int32&amp; offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEHeaders.TryGetDirectoryOffset(System.Reflection.PortableExecutable.DirectoryEntry,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetDirectoryOffset (directory As DirectoryEntry, ByRef offset As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetDirectoryOffset(System::Reflection::PortableExecutable::DirectoryEntry directory, [Runtime::InteropServices::Out] int % offset);" />
      <MemberSignature Language="F#" Value="member this.TryGetDirectoryOffset : System.Reflection.PortableExecutable.DirectoryEntry * int -&gt; bool" Usage="pEHeaders.TryGetDirectoryOffset (directory, offset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.Reflection.PortableExecutable.DirectoryEntry" />
        <Parameter Name="offset" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="directory"><span data-ttu-id="72220-154">PE ディレクトリ エントリ。</span><span class="sxs-lookup"><span data-stu-id="72220-154">The PE directory entry.</span></span></param>
        <param name="offset"><span data-ttu-id="72220-155">メソッドから制御が戻るときに、イメージの先頭から、指定されたディレクトリ データまでのオフセットを含めます。</span><span class="sxs-lookup"><span data-stu-id="72220-155">When the method returns, contains the offset from the start of the image to the given directory data.</span></span></param>
        <summary><span data-ttu-id="72220-156">イメージの先頭から、指定されたディレクトリ データまでのオフセット (バイト単位) を取得します。</span><span class="sxs-lookup"><span data-stu-id="72220-156">Gets the offset (in bytes) from the start of the image to the given directory data.</span></span></summary>
        <returns><span data-ttu-id="72220-157">ディレクトリ データが見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="72220-157"><see langword="true" /> if the directory data is found; <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
