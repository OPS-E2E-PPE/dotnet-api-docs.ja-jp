<Type Name="PEReader" FullName="System.Reflection.PortableExecutable.PEReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="81f69aceab6250f7dfd05fd392369884a9b55823" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75167631" /></Metadata><TypeSignature Language="C#" Value="public sealed class PEReader : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PEReader extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.PortableExecutable.PEReader" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PEReader&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class PEReader sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type PEReader = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Metadata</AssemblyName>
    <AssemblyVersion>1.0.22.0</AssemblyVersion>
    <AssemblyVersion>1.3.0.0</AssemblyVersion>
    <AssemblyVersion>1.4.1.0</AssemblyVersion>
    <AssemblyVersion>1.4.2.0</AssemblyVersion>
    <AssemblyVersion>1.4.3.0</AssemblyVersion>
    <AssemblyVersion>1.4.4.0</AssemblyVersion>
    <AssemblyVersion>1.4.5.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>移植可能な実行可能 (PE) 形式ファイルのリーダーを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

実装はスレッドセーフです。 つまり、複数のスレッドが同時にリーダーからデータを読み取ることができます。 リーダーの破棄はスレッドセーフではありません (<xref:System.Reflection.PortableExecutable.PEReader.Dispose>を参照してください)。

          ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (System.Collections.Immutable.ImmutableArray&lt;byte&gt; peImage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Collections.Immutable.ImmutableArray`1&lt;unsigned int8&gt; peImage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.Collections.Immutable.ImmutableArray{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (peImage As ImmutableArray(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::Collections::Immutable::ImmutableArray&lt;System::Byte&gt; peImage);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : System.Collections.Immutable.ImmutableArray&lt;byte&gt; -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader peImage" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peImage" Type="System.Collections.Immutable.ImmutableArray&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="peImage">PE イメージを表す、変更できないバイト配列。</param>
        <summary>バイト配列に格納されている PE イメージに対して、移植可能な実行可能リーダーを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

イメージの内容は、の構築時には読み取られません <xref:System.Reflection.PortableExecutable.PEReader>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="peImage" /> が <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (System.IO.Stream peStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream peStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (peStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::IO::Stream ^ peStream);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : System.IO.Stream -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader peStream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="peStream">PE イメージ ストリーム。</param>
        <summary>ストリームに格納されている PE イメージに対して、移植可能な実行可能リーダーを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

コンストラクター引数が正常に検証されると、ストリームの所有権が <xref:System.Reflection.PortableExecutable.PEReader> に転送されます。 <xref:System.Reflection.PortableExecutable.PEReader> によって破棄され、呼び出し元は操作できません。

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="peStream" /> が <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (byte* peImage, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8* peImage, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::Byte* peImage, int size);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : nativeptr&lt;byte&gt; * int -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader (peImage, size)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peImage" Type="System.Byte*" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="peImage">PE イメージの開始へのポインター。</param>
        <param name="size">PE イメージのサイズです。</param>
        <summary>メモリに格納されている PE イメージに対して、移植可能な実行可能リーダーを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

メモリは呼び出し元によって所有されており、<xref:System.Reflection.PortableExecutable.PEReader>の破棄時に解放されません。 呼び出し元は、メモリを保持し、<xref:System.Reflection.PortableExecutable.PEReader>の有効期間全体にわたって変更されないようにする責任があります。


イメージの内容は、の構築時には読み取られません <xref:System.Reflection.PortableExecutable.PEReader>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="peImage" /> が <see cref="F:System.IntPtr.Zero" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size" /> が負の値です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (System.IO.Stream peStream, System.Reflection.PortableExecutable.PEStreamOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream peStream, valuetype System.Reflection.PortableExecutable.PEStreamOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (peStream As Stream, options As PEStreamOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::IO::Stream ^ peStream, System::Reflection::PortableExecutable::PEStreamOptions options);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : System.IO.Stream * System.Reflection.PortableExecutable.PEStreamOptions -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader (peStream, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peStream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Reflection.PortableExecutable.PEStreamOptions" />
      </Parameters>
      <Docs>
        <param name="peStream">PE イメージ ストリーム。</param>
        <param name="options">ストリームから、PE イメージのセクションを読み取る方法を指定するオプション。</param>
        <summary>現在の位置から開始し、ストリームの末尾で終わるストリームに格納されている PE イメージに対して、移植可能な実行可能リーダーを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 
<xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType> が指定されていない限り、成功した引数の検証時にストリームの所有権が <xref:System.Reflection.PortableExecutable.PEReader> に転送されます。 <xref:System.Reflection.PortableExecutable.PEReader> によって破棄され、呼び出し元は操作できません。
 
<xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> または <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType> が指定されていない限り、<xref:System.Reflection.PortableExecutable.PEReader>の構築時にストリームからデータが読み取られません。 さらに、<xref:System.Reflection.PortableExecutable.PEReader> が有効になっていて破棄されていない場合、ストリームは呼び出し元によって操作されないようにする必要があります。
 
`options` に <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> または <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType>が含まれている場合、<xref:System.Reflection.PortableExecutable.PEReader> は構築中に要求されたすべてのデータを読み取ります。 そのため <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType> が指定されている場合、呼び出し元はストリームの完全な所有権を保持し、構築後に <xref:System.Reflection.PortableExecutable.PEReader> によって操作されないことを保証します。

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="peStream" /> が <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" /> の値が無効です。</exception>
        <exception cref="T:System.IO.IOException">ストリームから読み取り中のエラー (データをプリフェッチする場合のみ)。</exception>
        <exception cref="T:System.BadImageFormatException"><see cref="F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata" /> が指定されており、イメージの PE ヘッダーが無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (byte* peImage, int size, bool isLoadedImage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8* peImage, int32 size, bool isLoadedImage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.Byte*,System.Int32,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::Byte* peImage, int size, bool isLoadedImage);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : nativeptr&lt;byte&gt; * int * bool -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader (peImage, size, isLoadedImage)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peImage" Type="System.Byte*" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
        <Parameter Name="size" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
        <Parameter Name="isLoadedImage" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="peImage">PE イメージの開始へのポインター。</param>
        <param name="size">PE イメージのサイズです。</param>
        <param name="isLoadedImage">OS ローダーによって PE イメージがメモリに読み込まれている場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</param>
        <summary>メモリに格納されている PE イメージに対して、移植可能な実行可能リーダーを作成します。 フラグは、イメージが既にメモリに読み込まれているかどうかを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

メモリは呼び出し元によって所有されており、<xref:System.Reflection.PortableExecutable.PEReader> が破棄されるときに解放されません。 呼び出し元は、メモリを保持し、<xref:System.Reflection.PortableExecutable.PEReader>の有効期間全体にわたって変更されないようにする責任があります。


イメージの内容は、の構築時には読み取られません <xref:System.Reflection.PortableExecutable.PEReader>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="peImage" /> が <see cref="F:System.IntPtr.Zero" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size" /> が負の値です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (System.IO.Stream peStream, System.Reflection.PortableExecutable.PEStreamOptions options, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream peStream, valuetype System.Reflection.PortableExecutable.PEStreamOptions options, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (peStream As Stream, options As PEStreamOptions, size As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::IO::Stream ^ peStream, System::Reflection::PortableExecutable::PEStreamOptions options, int size);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : System.IO.Stream * System.Reflection.PortableExecutable.PEStreamOptions * int -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader (peStream, options, size)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peStream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Reflection.PortableExecutable.PEStreamOptions" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="peStream">PE イメージ ストリーム。</param>
        <param name="options">ストリームから、PE イメージのセクションを読み取る方法を指定するオプション。</param>
        <param name="size">PE イメージ サイズ。</param>
        <summary>ストリームの現在の位置から開始する、指定されたサイズの PE イメージに対して、移植可能な実行可能リーダーを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType> が指定されていない限り、成功した引数の検証時にストリームの所有権が <xref:System.Reflection.PortableExecutable.PEReader> に転送されます。 これは <xref:System.Reflection.PortableExecutable.PEReader>によって破棄され、呼び出し元は操作できません。
 
<xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> または <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType> が指定されていない限り、<xref:System.Reflection.PortableExecutable.PEReader>の構築時にストリームからデータが読み取られません。 さらに、<xref:System.Reflection.PortableExecutable.PEReader> が有効で破棄されていないときに、呼び出し元がストリームを操作することはできません。
 
`options` に <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> 値または <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType> 値が含まれている場合、<xref:System.Reflection.PortableExecutable.PEReader> は構築中に要求されたすべてのデータを読み取ります。 そのため <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType> が指定されている場合、呼び出し元はストリームの完全な所有権を保持し、構築後に <xref:System.Reflection.PortableExecutable.PEReader> によって操作されないことを保証します。

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size" /> が負の値であるか、ストリームの末尾を超えています。</exception>
        <exception cref="T:System.IO.IOException">ストリームから読み取り中のエラー (データをプリフェッチする場合のみ)。</exception>
        <exception cref="T:System.BadImageFormatException"><see cref="F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata" /> が指定されており、イメージの PE ヘッダーが無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="pEReader.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>リーダーによって割り当てられたすべてのメモリを破棄します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!IMPORTANT]
> <xref:System.Reflection.PortableExecutable.PEReader.Dispose> は複数回呼び出すことができますが、並列では呼び出せません。
> <xref:System.Reflection.PortableExecutable.PEReader> に対する他の操作と並行して <xref:System.Reflection.PortableExecutable.PEReader.Dispose> を呼び出したり、リーダーから取得した <xref:System.Reflection.PortableExecutable.PEMemoryBlock>から読み取りを行ったりすることは安全ではありません。

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEntireImage">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PEMemoryBlock GetEntireImage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.PEMemoryBlock GetEntireImage() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.GetEntireImage" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEntireImage () As PEMemoryBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::PEMemoryBlock GetEntireImage();" />
      <MemberSignature Language="F#" Value="member this.GetEntireImage : unit -&gt; System.Reflection.PortableExecutable.PEMemoryBlock" Usage="pEReader.GetEntireImage " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEMemoryBlock</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>PE イメージ全体が含まれている <see cref="T:System.Reflection.PortableExecutable.PEMemoryBlock" /> オブジェクトを取得します。</summary>
        <returns>PE イメージ全体が含まれているメモリ ブロック。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<xref:System.Reflection.PortableExecutable.PEReader.IsEntireImageAvailable> プロパティの値を取得して、<xref:System.Reflection.PortableExecutable.PEReader> によってイメージ全体が使用可能になるかどうかを判断できます。

         ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">PE イメージ全体は使用できません。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PEMemoryBlock GetMetadata ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.PEMemoryBlock GetMetadata() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.GetMetadata" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMetadata () As PEMemoryBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::PEMemoryBlock GetMetadata();" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : unit -&gt; System.Reflection.PortableExecutable.PEMemoryBlock" Usage="pEReader.GetMetadata " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEMemoryBlock</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>CLI メタデータが含まれている PE セクションを読み込みます。</summary>
        <returns>CLI メタデータが含まれているメモリ ブロック。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">PE イメージにはメタデータが含まれていません (<see cref="P:System.Reflection.PortableExecutable.PEReader.HasMetadata" /> は <see langword="false" /> を返します)。</exception>
        <exception cref="T:System.BadImageFormatException">PE ヘッダーに無効なデータが含まれています。</exception>
        <exception cref="T:System.IO.IOException">基になるストリームからの読み取り中の入出力エラー。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSectionData">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PEMemoryBlock GetSectionData (int relativeVirtualAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.PEMemoryBlock GetSectionData(int32 relativeVirtualAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.GetSectionData(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSectionData (relativeVirtualAddress As Integer) As PEMemoryBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::PEMemoryBlock GetSectionData(int relativeVirtualAddress);" />
      <MemberSignature Language="F#" Value="member this.GetSectionData : int -&gt; System.Reflection.PortableExecutable.PEMemoryBlock" Usage="pEReader.GetSectionData relativeVirtualAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEMemoryBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relativeVirtualAddress" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="relativeVirtualAddress">読み取るデータの相対仮想アドレス。</param>
        <summary>指定した相対仮想アドレスが含まれている PE セクションをメモリに読み込み、そのアドレスから開始し、含まれているセクションの末尾で終了するメモリ ブロックを返します。</summary>
        <returns><paramref name="relativeVirtualAddress" /> で開始し、含まれているセクションの末尾で終了するメモリ ブロック、または <paramref name="relativeVirtualAddress" /> がこの PE イメージのいずれかの PE セクション内の場所を表していない場合は空のブロック。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.BadImageFormatException">PE ヘッダーに無効なデータが含まれています。</exception>
        <exception cref="T:System.IO.IOException">基になるストリームからの読み取り中に IO エラーが発生しました。</exception>
        <exception cref="T:System.InvalidOperationException">PE イメージは使用できません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="relativeVirtualAddress" /> が負の値です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSectionData">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PEMemoryBlock GetSectionData (string sectionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.PEMemoryBlock GetSectionData(string sectionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.GetSectionData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSectionData (sectionName As String) As PEMemoryBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::PEMemoryBlock GetSectionData(System::String ^ sectionName);" />
      <MemberSignature Language="F#" Value="member this.GetSectionData : string -&gt; System.Reflection.PortableExecutable.PEMemoryBlock" Usage="pEReader.GetSectionData sectionName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEMemoryBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sectionName" Type="System.String" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="sectionName">セクションの名前。</param>
        <summary>指定した名前の PE セクションをメモリに読み込み、そのセクションにまたがるメモリ ブロックを返します。</summary>
        <returns>セクションにまたがるメモリ ブロック。または、指定された <paramref name="sectionName" /> のセクションがこの PE イメージ内に存在しない場合は空のブロック。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="sectionName" /> が <see langword="null" />です。</exception>
        <exception cref="T:System.InvalidOperationException">PE イメージは使用できません。</exception>
      </Docs>
    </Member>
    <Member MemberName="HasMetadata">
      <MemberSignature Language="C#" Value="public bool HasMetadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasMetadata" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEReader.HasMetadata" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasMetadata As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasMetadata { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasMetadata : bool" Usage="System.Reflection.PortableExecutable.PEReader.HasMetadata" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>PE イメージに CLI メタデータが含まれているかどうかを示す値を取得します。</summary>
        <value>PE イメージに CLI メタデータが含まれている場合は <see langword="true" /> します。それ以外の場合は、<see langword="false" />ます。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.BadImageFormatException">PE ヘッダーに無効なデータが含まれています。</exception>
        <exception cref="T:System.IO.IOException">基になるストリームからの読み取り中のエラー。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEntireImageAvailable">
      <MemberSignature Language="C#" Value="public bool IsEntireImageAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEntireImageAvailable" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEReader.IsEntireImageAvailable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEntireImageAvailable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEntireImageAvailable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEntireImageAvailable : bool" Usage="System.Reflection.PortableExecutable.PEReader.IsEntireImageAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>リーダーが PE イメージ全体にアクセスできるかどうかを示す値を取得します。</summary>
        <value>リーダーが PE イメージ全体にアクセスできるかどうかを <see langword="true" /> します。それ以外の場合は、<see langword="false" />ます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<xref:System.Reflection.PortableExecutable.PEReader> がストリームから構築され、その一部だけがメモリにプリフェッチされる場合、プロパティは `false` を返します。

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLoadedImage">
      <MemberSignature Language="C#" Value="public bool IsLoadedImage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLoadedImage" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEReader.IsLoadedImage" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLoadedImage As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLoadedImage { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLoadedImage : bool" Usage="System.Reflection.PortableExecutable.PEReader.IsLoadedImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>OS ローダーによって PE イメージがメモリに読み込まれているかどうかを示す値を取得します。</summary>
        <value>OS ローダーによって PE イメージがメモリに読み込まれている場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PEHeaders">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PEHeaders PEHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.PortableExecutable.PEHeaders PEHeaders" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEReader.PEHeaders" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PEHeaders As PEHeaders" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::PortableExecutable::PEHeaders ^ PEHeaders { System::Reflection::PortableExecutable::PEHeaders ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PEHeaders : System.Reflection.PortableExecutable.PEHeaders" Usage="System.Reflection.PortableExecutable.PEReader.PEHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEHeaders</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>PE ヘッダーを取得します。</summary>
        <value>この PE イメージの PE ヘッダー。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.BadImageFormatException">ヘッダーに無効なデータが含まれています。</exception>
        <exception cref="T:System.IO.IOException">ストリームからの読み取り中のエラー。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadCodeViewDebugDirectoryData">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.CodeViewDebugDirectoryData ReadCodeViewDebugDirectoryData (System.Reflection.PortableExecutable.DebugDirectoryEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.CodeViewDebugDirectoryData ReadCodeViewDebugDirectoryData(valuetype System.Reflection.PortableExecutable.DebugDirectoryEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.ReadCodeViewDebugDirectoryData(System.Reflection.PortableExecutable.DebugDirectoryEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadCodeViewDebugDirectoryData (entry As DebugDirectoryEntry) As CodeViewDebugDirectoryData" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::CodeViewDebugDirectoryData ReadCodeViewDebugDirectoryData(System::Reflection::PortableExecutable::DebugDirectoryEntry entry);" />
      <MemberSignature Language="F#" Value="member this.ReadCodeViewDebugDirectoryData : System.Reflection.PortableExecutable.DebugDirectoryEntry -&gt; System.Reflection.PortableExecutable.CodeViewDebugDirectoryData" Usage="pEReader.ReadCodeViewDebugDirectoryData entry" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.CodeViewDebugDirectoryData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Reflection.PortableExecutable.DebugDirectoryEntry" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="entry">デバッグ ディレクトリ エントリ インスタンス。</param>
        <summary>指定されたデバッグ ディレクトリ エントリでポイントされたデータを読み取り、それを CodeView として解釈します。</summary>
        <returns>コード ビューのデバッグ ディレクトリ データ インスタンス。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="entry" /> は CodeView エントリではありません。</exception>
        <exception cref="T:System.BadImageFormatException">データの形式が正しくありません。</exception>
        <exception cref="T:System.IO.IOException">基になるストリームからの読み取り中の入出力エラー。</exception>
        <exception cref="T:System.InvalidOperationException">PE イメージは使用できません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadDebugDirectory">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;System.Reflection.PortableExecutable.DebugDirectoryEntry&gt; ReadDebugDirectory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;valuetype System.Reflection.PortableExecutable.DebugDirectoryEntry&gt; ReadDebugDirectory() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.ReadDebugDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadDebugDirectory () As ImmutableArray(Of DebugDirectoryEntry)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;System::Reflection::PortableExecutable::DebugDirectoryEntry&gt; ReadDebugDirectory();" />
      <MemberSignature Language="F#" Value="member this.ReadDebugDirectory : unit -&gt; System.Collections.Immutable.ImmutableArray&lt;System.Reflection.PortableExecutable.DebugDirectoryEntry&gt;" Usage="pEReader.ReadDebugDirectory " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;System.Reflection.PortableExecutable.DebugDirectoryEntry&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>すべてのデバッグ ディレクトリ テーブル エントリを読み取ります。</summary>
        <returns>デバッグ ディレクトリ テーブル エントリの配列。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.BadImageFormatException">エントリの形式が正しくありません。</exception>
        <exception cref="T:System.IO.IOException">基になるストリームからの読み取り中の入出力エラー。</exception>
        <exception cref="T:System.InvalidOperationException">PE イメージは使用できません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadEmbeddedPortablePdbDebugDirectoryData">
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.MetadataReaderProvider ReadEmbeddedPortablePdbDebugDirectoryData (System.Reflection.PortableExecutable.DebugDirectoryEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Metadata.MetadataReaderProvider ReadEmbeddedPortablePdbDebugDirectoryData(valuetype System.Reflection.PortableExecutable.DebugDirectoryEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.ReadEmbeddedPortablePdbDebugDirectoryData(System.Reflection.PortableExecutable.DebugDirectoryEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadEmbeddedPortablePdbDebugDirectoryData (entry As DebugDirectoryEntry) As MetadataReaderProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Metadata::MetadataReaderProvider ^ ReadEmbeddedPortablePdbDebugDirectoryData(System::Reflection::PortableExecutable::DebugDirectoryEntry entry);" />
      <MemberSignature Language="F#" Value="member this.ReadEmbeddedPortablePdbDebugDirectoryData : System.Reflection.PortableExecutable.DebugDirectoryEntry -&gt; System.Reflection.Metadata.MetadataReaderProvider" Usage="pEReader.ReadEmbeddedPortablePdbDebugDirectoryData entry" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.MetadataReaderProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Reflection.PortableExecutable.DebugDirectoryEntry" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="entry">データの読み取り元のデバッグ ディレクトリ エントリ。</param>
        <summary>指定されたデバッグ ディレクトリ エントリでポイントされたデータを読み取り、それを埋め込まれたポータブル PDB の BLOB として解釈します。</summary>
        <returns>ポータブル PDB イメージを読み取るためのメタデータ リーダーのプロバイダー。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="entry" /> は <see cref="F:System.Reflection.PortableExecutable.DebugDirectoryEntryType.EmbeddedPortablePdb" /> エントリではありません。</exception>
        <exception cref="T:System.BadImageFormatException">データの形式が正しくありません。</exception>
        <exception cref="T:System.InvalidOperationException">PE イメージは使用できません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadPdbChecksumDebugDirectoryData">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PdbChecksumDebugDirectoryData ReadPdbChecksumDebugDirectoryData (System.Reflection.PortableExecutable.DebugDirectoryEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.PdbChecksumDebugDirectoryData ReadPdbChecksumDebugDirectoryData(valuetype System.Reflection.PortableExecutable.DebugDirectoryEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.ReadPdbChecksumDebugDirectoryData(System.Reflection.PortableExecutable.DebugDirectoryEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadPdbChecksumDebugDirectoryData (entry As DebugDirectoryEntry) As PdbChecksumDebugDirectoryData" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::PdbChecksumDebugDirectoryData ReadPdbChecksumDebugDirectoryData(System::Reflection::PortableExecutable::DebugDirectoryEntry entry);" />
      <MemberSignature Language="F#" Value="member this.ReadPdbChecksumDebugDirectoryData : System.Reflection.PortableExecutable.DebugDirectoryEntry -&gt; System.Reflection.PortableExecutable.PdbChecksumDebugDirectoryData" Usage="pEReader.ReadPdbChecksumDebugDirectoryData entry" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PdbChecksumDebugDirectoryData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Reflection.PortableExecutable.DebugDirectoryEntry" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="entry">データの読み取り元のデバッグ ディレクトリ エントリ。</param>
        <summary>指定されたデバッグ ディレクトリ エントリでポイントされたデータを読み取り、それを PDB チェックサム エントリとして解釈します。</summary>
        <returns>PDB チェックサム エントリ。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="entry" /> は PDB チェックサム エントリではありません。</exception>
        <exception cref="T:System.BadImageFormatException">データの形式が正しくありません。</exception>
        <exception cref="T:System.IO.IOException">基になるストリームからの読み取り中の入出力エラー。</exception>
        <exception cref="T:System.InvalidOperationException">PE イメージは使用できません。</exception>
      </Docs>
    </Member>
    <Member MemberName="TryOpenAssociatedPortablePdb">
      <MemberSignature Language="C#" Value="public bool TryOpenAssociatedPortablePdb (string peImagePath, Func&lt;string,System.IO.Stream&gt; pdbFileStreamProvider, out System.Reflection.Metadata.MetadataReaderProvider pdbReaderProvider, out string pdbPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryOpenAssociatedPortablePdb(string peImagePath, class System.Func`2&lt;string, class System.IO.Stream&gt; pdbFileStreamProvider, [out] class System.Reflection.Metadata.MetadataReaderProvider&amp; pdbReaderProvider, [out] string&amp; pdbPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.TryOpenAssociatedPortablePdb(System.String,System.Func{System.String,System.IO.Stream},System.Reflection.Metadata.MetadataReaderProvider@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryOpenAssociatedPortablePdb (peImagePath As String, pdbFileStreamProvider As Func(Of String, Stream), ByRef pdbReaderProvider As MetadataReaderProvider, ByRef pdbPath As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryOpenAssociatedPortablePdb(System::String ^ peImagePath, Func&lt;System::String ^, System::IO::Stream ^&gt; ^ pdbFileStreamProvider, [Runtime::InteropServices::Out] System::Reflection::Metadata::MetadataReaderProvider ^ % pdbReaderProvider, [Runtime::InteropServices::Out] System::String ^ % pdbPath);" />
      <MemberSignature Language="F#" Value="member this.TryOpenAssociatedPortablePdb : string * Func&lt;string, System.IO.Stream&gt; * MetadataReaderProvider * string -&gt; bool" Usage="pEReader.TryOpenAssociatedPortablePdb (peImagePath, pdbFileStreamProvider, pdbReaderProvider, pdbPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="peImagePath" Type="System.String" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
        <Parameter Name="pdbFileStreamProvider" Type="System.Func&lt;System.String,System.IO.Stream&gt;" Index="1" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
        <Parameter Name="pdbReaderProvider" Type="System.Reflection.Metadata.MetadataReaderProvider" RefType="out" Index="2" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
        <Parameter Name="pdbPath" Type="System.String" RefType="out" Index="3" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="peImagePath">PE イメージへのパス。 このパスは、PE ファイルが含まれているディレクトリ内で PDB ファイルを検索するために使用されます。</param>
        <param name="pdbFileStreamProvider">指定されている場合、指定されたファイル パスの <see cref="T:System.IO.Stream" /> を開くために呼び出されます。 プロバイダーは、読み取り可能でシーク可能な <see cref="T:System.IO.Stream" />、またはターゲット ファイルが存在しないか、何らかの理由で無視する必要がある場合は、<see langword="null" /> のいずれかを返す必要があります。 予期しない IO エラーが原因でファイルを開くことができない場合、プロバイダーは <see cref="T:System.IO.IOException" /> をスローする必要があります。</param>
        <param name="pdbReaderProvider">正常に終了した場合は、ポータブル PDB を読み取るために <see cref="T:System.Reflection.Metadata.MetadataReaderProvider" /> の新しいインスタンスが使用されます。</param>
        <param name="pdbPath">正常に終了し、PDB がファイル内で見つかった場合は、ファイルへのパス、または PDB が PE イメージ自体に埋め込まれている場合は <see langword="null" /> が使用されます。</param>
        <summary>この PE イメージに関連付けられているポータブル PDB を開きます。</summary>
        <returns>PE イメージに PDB が関連付けられていて、PDB が正常に開かれている場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

このメソッドは、PE イメージのデバッグディレクトリの内容に基づいて、単純な PDB ファイル参照を実装します。 より高度なツールでは、検索パスまたはシンボルサーバーに対する追加の参照が必要になる場合があります。
 
メソッドは、PDB を次の順序で検索します。

1) PE ファイル (`peImagePath`のディレクトリ) が格納されているディレクトリ内の CodeView エントリに存在する名前の、一致する PDB ファイルがあるかどうかを確認します。
2) PE イメージ自体に埋め込まれている PDB があるかどうかを確認します。
 
デバッグディレクトリに指定された情報に一致する最初の PDB が返されます。

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="peImagePath" /> または <paramref name="pdbFileStreamProvider" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="pdbFileStreamProvider" /> から返されたストリームでは、読み取りとシークの操作がサポートされません。</exception>
        <exception cref="T:System.BadImageFormatException">次のエラーにより、一致する PDB ファイルが見つかりませんでした。PE イメージまたは PDB が無効です。</exception>
        <exception cref="T:System.IO.IOException">次のエラーにより、一致する PDB ファイルが見つかりませんでした。PE イメージまたは PDB の読み取り中に IO エラーが発生しました。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
