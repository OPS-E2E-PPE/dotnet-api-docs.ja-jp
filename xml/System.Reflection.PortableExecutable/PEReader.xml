<Type Name="PEReader" FullName="System.Reflection.PortableExecutable.PEReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a53f2b8559f81b4099ca583f6f30750a242adb1b" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73390496" /></Metadata><TypeSignature Language="C#" Value="public sealed class PEReader : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PEReader extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.PortableExecutable.PEReader" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PEReader&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class PEReader sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type PEReader = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Metadata</AssemblyName>
    <AssemblyVersion>1.0.22.0</AssemblyVersion>
    <AssemblyVersion>1.3.0.0</AssemblyVersion>
    <AssemblyVersion>1.4.1.0</AssemblyVersion>
    <AssemblyVersion>1.4.2.0</AssemblyVersion>
    <AssemblyVersion>1.4.3.0</AssemblyVersion>
    <AssemblyVersion>1.4.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="7e574-101">移植可能な実行可能 (PE) 形式ファイルのリーダーを提供します。</span><span class="sxs-lookup"><span data-stu-id="7e574-101">Provides a reader for Portable Executable format (PE) files.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7e574-102">実装はスレッドセーフです。</span><span class="sxs-lookup"><span data-stu-id="7e574-102">The implementation is thread-safe.</span></span> <span data-ttu-id="7e574-103">つまり、複数のスレッドが同時にリーダーからデータを読み取ることができます。</span><span class="sxs-lookup"><span data-stu-id="7e574-103">That is, multiple threads can read data from the reader in parallel.</span></span> <span data-ttu-id="7e574-104">リーダーの破棄はスレッドセーフではありません (<xref:System.Reflection.PortableExecutable.PEReader.Dispose> を参照)。</span><span class="sxs-lookup"><span data-stu-id="7e574-104">Disposal of the reader is not thread-safe (see <xref:System.Reflection.PortableExecutable.PEReader.Dispose>).</span></span>

          ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (System.Collections.Immutable.ImmutableArray&lt;byte&gt; peImage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Collections.Immutable.ImmutableArray`1&lt;unsigned int8&gt; peImage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.Collections.Immutable.ImmutableArray{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (peImage As ImmutableArray(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::Collections::Immutable::ImmutableArray&lt;System::Byte&gt; peImage);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : System.Collections.Immutable.ImmutableArray&lt;byte&gt; -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader peImage" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peImage" Type="System.Collections.Immutable.ImmutableArray&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="peImage"><span data-ttu-id="7e574-105">PE イメージを表す、変更できないバイト配列。</span><span class="sxs-lookup"><span data-stu-id="7e574-105">An immutable array of bytes representing the PE image.</span></span></param>
        <summary><span data-ttu-id="7e574-106">バイト配列に格納されている PE イメージに対して、移植可能な実行可能リーダーを作成します。</span><span class="sxs-lookup"><span data-stu-id="7e574-106">Creates a Portable Executable reader over a PE image stored in a byte array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7e574-107">イメージの内容は、の構築時には読み取られません <xref:System.Reflection.PortableExecutable.PEReader></span><span class="sxs-lookup"><span data-stu-id="7e574-107">The content of the image is not read during the construction of the <xref:System.Reflection.PortableExecutable.PEReader></span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7e574-108"><paramref name="peImage" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="7e574-108"><paramref name="peImage" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (System.IO.Stream peStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream peStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (peStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::IO::Stream ^ peStream);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : System.IO.Stream -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader peStream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="peStream"><span data-ttu-id="7e574-109">PE イメージ ストリーム。</span><span class="sxs-lookup"><span data-stu-id="7e574-109">PE image stream.</span></span></param>
        <summary><span data-ttu-id="7e574-110">ストリームに格納されている PE イメージに対して、移植可能な実行可能リーダーを作成します。</span><span class="sxs-lookup"><span data-stu-id="7e574-110">Creates a Portable Executable reader over a PE image stored in a stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7e574-111">コンストラクター引数が正常に検証されると、ストリームの所有権は <xref:System.Reflection.PortableExecutable.PEReader> に転送されます。</span><span class="sxs-lookup"><span data-stu-id="7e574-111">Ownership of the stream is transferred to the <xref:System.Reflection.PortableExecutable.PEReader> upon successful validation of constructor arguments.</span></span> <span data-ttu-id="7e574-112"><xref:System.Reflection.PortableExecutable.PEReader> によって破棄され、呼び出し元は操作できません。</span><span class="sxs-lookup"><span data-stu-id="7e574-112">It will be disposed by the <xref:System.Reflection.PortableExecutable.PEReader> and the caller must not manipulate it.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7e574-113"><paramref name="peStream" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="7e574-113"><paramref name="peStream" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (byte* peImage, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8* peImage, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::Byte* peImage, int size);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : nativeptr&lt;byte&gt; * int -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader (peImage, size)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peImage" Type="System.Byte*" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="peImage"><span data-ttu-id="7e574-114">PE イメージの開始へのポインター。</span><span class="sxs-lookup"><span data-stu-id="7e574-114">A pointer to the start of the PE image.</span></span></param>
        <param name="size"><span data-ttu-id="7e574-115">PE イメージのサイズです。</span><span class="sxs-lookup"><span data-stu-id="7e574-115">The size of the PE image.</span></span></param>
        <summary><span data-ttu-id="7e574-116">メモリに格納されている PE イメージに対して、移植可能な実行可能リーダーを作成します。</span><span class="sxs-lookup"><span data-stu-id="7e574-116">Creates a Portable Executable reader over a PE image stored in memory.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7e574-117">メモリは呼び出し元によって所有されており、<xref:System.Reflection.PortableExecutable.PEReader> の破棄時に解放されません。</span><span class="sxs-lookup"><span data-stu-id="7e574-117">The memory is owned by the caller and not released on disposal of the <xref:System.Reflection.PortableExecutable.PEReader>.</span></span> <span data-ttu-id="7e574-118">呼び出し元は、メモリを保持し、<xref:System.Reflection.PortableExecutable.PEReader>の有効期間全体にわたって変更されないようにする責任があります。</span><span class="sxs-lookup"><span data-stu-id="7e574-118">The caller is responsible for keeping the memory alive and unmodified throughout the lifetime of the <xref:System.Reflection.PortableExecutable.PEReader>.</span></span>


<span data-ttu-id="7e574-119">イメージの内容は、の構築時には読み取られません <xref:System.Reflection.PortableExecutable.PEReader></span><span class="sxs-lookup"><span data-stu-id="7e574-119">The content of the image is not read during the construction of the <xref:System.Reflection.PortableExecutable.PEReader></span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7e574-120"><paramref name="peImage" /> が <see cref="F:System.IntPtr.Zero" /> です。</span><span class="sxs-lookup"><span data-stu-id="7e574-120"><paramref name="peImage" /> is <see cref="F:System.IntPtr.Zero" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7e574-121"><paramref name="size" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="7e574-121"><paramref name="size" /> is negative.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (System.IO.Stream peStream, System.Reflection.PortableExecutable.PEStreamOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream peStream, valuetype System.Reflection.PortableExecutable.PEStreamOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (peStream As Stream, options As PEStreamOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::IO::Stream ^ peStream, System::Reflection::PortableExecutable::PEStreamOptions options);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : System.IO.Stream * System.Reflection.PortableExecutable.PEStreamOptions -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader (peStream, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peStream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Reflection.PortableExecutable.PEStreamOptions" />
      </Parameters>
      <Docs>
        <param name="peStream"><span data-ttu-id="7e574-122">PE イメージ ストリーム。</span><span class="sxs-lookup"><span data-stu-id="7e574-122">A PE image stream.</span></span></param>
        <param name="options"><span data-ttu-id="7e574-123">ストリームから、PE イメージのセクションを読み取る方法を指定するオプション。</span><span class="sxs-lookup"><span data-stu-id="7e574-123">Options specifying how sections of the PE image are read from the stream.</span></span></param>
        <summary><span data-ttu-id="7e574-124">現在の位置から開始し、ストリームの末尾で終わるストリームに格納されている PE イメージに対して、移植可能な実行可能リーダーを作成します。</span><span class="sxs-lookup"><span data-stu-id="7e574-124">Creates a Portable Executable reader over a PE image stored in a stream beginning at its current position and ending at the end of the stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 
<span data-ttu-id="7e574-125"><xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType> が指定されていない限り、成功した引数の検証時にストリームの所有権が <xref:System.Reflection.PortableExecutable.PEReader> に転送されます。</span><span class="sxs-lookup"><span data-stu-id="7e574-125">Unless <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType> is specified, ownership of the stream is transferred to the <xref:System.Reflection.PortableExecutable.PEReader> upon successful argument validation.</span></span> <span data-ttu-id="7e574-126"><xref:System.Reflection.PortableExecutable.PEReader> によって破棄され、呼び出し元は操作できません。</span><span class="sxs-lookup"><span data-stu-id="7e574-126">It will be disposed by the <xref:System.Reflection.PortableExecutable.PEReader> and the caller must not manipulate it.</span></span>
 
<span data-ttu-id="7e574-127"><xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> または <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType> が指定されていない限り、<xref:System.Reflection.PortableExecutable.PEReader>の構築時にストリームからデータが読み取られません。</span><span class="sxs-lookup"><span data-stu-id="7e574-127">Unless <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> or <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType> is specified, no data is read from the stream during the construction of the <xref:System.Reflection.PortableExecutable.PEReader>.</span></span> <span data-ttu-id="7e574-128">さらに、<xref:System.Reflection.PortableExecutable.PEReader> が有効になっていて破棄されていない場合、ストリームは呼び出し元によって操作されないようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="7e574-128">Furthermore, the stream must not be manipulated by caller while the <xref:System.Reflection.PortableExecutable.PEReader> is alive and undisposed.</span></span>
 
<span data-ttu-id="7e574-129">`options` に <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> または <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType>が含まれている場合、<xref:System.Reflection.PortableExecutable.PEReader> は構築中に要求されたすべてのデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="7e574-129">If `options` includes <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> or <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType>, the <xref:System.Reflection.PortableExecutable.PEReader> will have read all of the data requested during construction.</span></span> <span data-ttu-id="7e574-130">そのため <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType> が指定されている場合、呼び出し元はストリームの完全な所有権を保持し、構築後に <xref:System.Reflection.PortableExecutable.PEReader> によって操作されないことを保証します。</span><span class="sxs-lookup"><span data-stu-id="7e574-130">As such, if <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType> is also specified, the caller retains full ownership of the stream and is assured that it will not be manipulated by the <xref:System.Reflection.PortableExecutable.PEReader> after construction.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7e574-131"><paramref name="peStream" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7e574-131"><paramref name="peStream" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7e574-132"><paramref name="options" /> の値が無効です。</span><span class="sxs-lookup"><span data-stu-id="7e574-132"><paramref name="options" /> has an invalid value.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="7e574-133">ストリームから読み取り中のエラー (データをプリフェッチする場合のみ)。</span><span class="sxs-lookup"><span data-stu-id="7e574-133">Error reading from the stream (only when prefetching data).</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="7e574-134"><see cref="F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata" /> が指定されており、イメージの PE ヘッダーが無効です。</span><span class="sxs-lookup"><span data-stu-id="7e574-134"><see cref="F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata" /> is specified, and the PE headers of the image are invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (byte* peImage, int size, bool isLoadedImage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8* peImage, int32 size, bool isLoadedImage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.Byte*,System.Int32,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::Byte* peImage, int size, bool isLoadedImage);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : nativeptr&lt;byte&gt; * int * bool -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader (peImage, size, isLoadedImage)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peImage" Type="System.Byte*" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="size" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="isLoadedImage" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="peImage"><span data-ttu-id="7e574-135">PE イメージの開始へのポインター。</span><span class="sxs-lookup"><span data-stu-id="7e574-135">A pointer to the start of the PE image.</span></span></param>
        <param name="size"><span data-ttu-id="7e574-136">PE イメージのサイズです。</span><span class="sxs-lookup"><span data-stu-id="7e574-136">The size of the PE image.</span></span></param>
        <param name="isLoadedImage"><span data-ttu-id="7e574-137">OS ローダーによって PE イメージがメモリに読み込まれている場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7e574-137"><see langword="true" /> if the PE image has been loaded into memory by the OS loader; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="7e574-138">メモリに格納されている PE イメージに対して、移植可能な実行可能リーダーを作成します。</span><span class="sxs-lookup"><span data-stu-id="7e574-138">Creates a Portable Executable reader over a PE image stored in memory.</span></span> <span data-ttu-id="7e574-139">フラグは、イメージが既にメモリに読み込まれているかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="7e574-139">A flag indicates whether the image has already been loaded into memory.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7e574-140">メモリは呼び出し元によって所有されており、<xref:System.Reflection.PortableExecutable.PEReader> が破棄されるときに解放されません。</span><span class="sxs-lookup"><span data-stu-id="7e574-140">The memory is owned by the caller and is not released when the <xref:System.Reflection.PortableExecutable.PEReader> is disposed.</span></span> <span data-ttu-id="7e574-141">呼び出し元は、メモリを保持し、<xref:System.Reflection.PortableExecutable.PEReader>の有効期間全体にわたって変更されないようにする責任があります。</span><span class="sxs-lookup"><span data-stu-id="7e574-141">The caller is responsible for keeping the memory alive and unmodified throughout the lifetime of the <xref:System.Reflection.PortableExecutable.PEReader>.</span></span>


<span data-ttu-id="7e574-142">イメージの内容は、の構築時には読み取られません <xref:System.Reflection.PortableExecutable.PEReader></span><span class="sxs-lookup"><span data-stu-id="7e574-142">The content of the image is not read during the construction of the <xref:System.Reflection.PortableExecutable.PEReader></span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7e574-143"><paramref name="peImage" /> が <see cref="F:System.IntPtr.Zero" /> です。</span><span class="sxs-lookup"><span data-stu-id="7e574-143"><paramref name="peImage" /> is <see cref="F:System.IntPtr.Zero" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7e574-144"><paramref name="size" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="7e574-144"><paramref name="size" /> is negative.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (System.IO.Stream peStream, System.Reflection.PortableExecutable.PEStreamOptions options, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream peStream, valuetype System.Reflection.PortableExecutable.PEStreamOptions options, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (peStream As Stream, options As PEStreamOptions, size As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::IO::Stream ^ peStream, System::Reflection::PortableExecutable::PEStreamOptions options, int size);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : System.IO.Stream * System.Reflection.PortableExecutable.PEStreamOptions * int -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader (peStream, options, size)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peStream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Reflection.PortableExecutable.PEStreamOptions" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="peStream"><span data-ttu-id="7e574-145">PE イメージ ストリーム。</span><span class="sxs-lookup"><span data-stu-id="7e574-145">A PE image stream.</span></span></param>
        <param name="options"><span data-ttu-id="7e574-146">ストリームから、PE イメージのセクションを読み取る方法を指定するオプション。</span><span class="sxs-lookup"><span data-stu-id="7e574-146">Options specifying how sections of the PE image are read from the stream.</span></span></param>
        <param name="size"><span data-ttu-id="7e574-147">PE イメージ サイズ。</span><span class="sxs-lookup"><span data-stu-id="7e574-147">The PE image size.</span></span></param>
        <summary><span data-ttu-id="7e574-148">ストリームの現在の位置から開始する、指定されたサイズの PE イメージに対して、移植可能な実行可能リーダーを作成します。</span><span class="sxs-lookup"><span data-stu-id="7e574-148">Creates a Portable Executable reader over a PE image of the given size beginning at the stream's current position.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7e574-149"><xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType> が指定されていない限り、成功した引数の検証時にストリームの所有権が <xref:System.Reflection.PortableExecutable.PEReader> に転送されます。</span><span class="sxs-lookup"><span data-stu-id="7e574-149">Unless <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType> is specified, ownership of the stream is transferred to the <xref:System.Reflection.PortableExecutable.PEReader> upon successful argument validation.</span></span> <span data-ttu-id="7e574-150">これは <xref:System.Reflection.PortableExecutable.PEReader>によって破棄され、呼び出し元は操作できません。</span><span class="sxs-lookup"><span data-stu-id="7e574-150">It will be disposed by the <xref:System.Reflection.PortableExecutable.PEReader>, and the caller must not manipulate it.</span></span>
 
<span data-ttu-id="7e574-151"><xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> または <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType> が指定されていない限り、<xref:System.Reflection.PortableExecutable.PEReader>の構築時にストリームからデータが読み取られません。</span><span class="sxs-lookup"><span data-stu-id="7e574-151">Unless <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> or <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType> is specified, no data is read from the stream during the construction of the <xref:System.Reflection.PortableExecutable.PEReader>.</span></span> <span data-ttu-id="7e574-152">さらに、<xref:System.Reflection.PortableExecutable.PEReader> が有効で破棄されていないときに、呼び出し元がストリームを操作することはできません。</span><span class="sxs-lookup"><span data-stu-id="7e574-152">Furthermore, the stream must not be manipulated by the caller while the <xref:System.Reflection.PortableExecutable.PEReader> is alive and undisposed.</span></span>
 
<span data-ttu-id="7e574-153">`options` に <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> 値または <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType> 値が含まれている場合、<xref:System.Reflection.PortableExecutable.PEReader> は構築中に要求されたすべてのデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="7e574-153">If `options` includes the <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> or <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType> values, the <xref:System.Reflection.PortableExecutable.PEReader> will have read all of the data requested during construction.</span></span> <span data-ttu-id="7e574-154">そのため <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType> が指定されている場合、呼び出し元はストリームの完全な所有権を保持し、構築後に <xref:System.Reflection.PortableExecutable.PEReader> によって操作されないことを保証します。</span><span class="sxs-lookup"><span data-stu-id="7e574-154">As such, if <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType> is also specified, the caller retains full ownership of the stream and is assured that it will not be manipulated by the <xref:System.Reflection.PortableExecutable.PEReader> after construction.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7e574-155"><paramref name="size" /> が負の値であるか、ストリームの末尾を超えています。</span><span class="sxs-lookup"><span data-stu-id="7e574-155"><paramref name="size" /> is negative or extends past the end of the stream.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="7e574-156">ストリームから読み取り中のエラー (データをプリフェッチする場合のみ)。</span><span class="sxs-lookup"><span data-stu-id="7e574-156">Error reading from the stream (only when prefetching data).</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="7e574-157"><see cref="F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata" /> が指定されており、イメージの PE ヘッダーが無効です。</span><span class="sxs-lookup"><span data-stu-id="7e574-157"><see cref="F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata" /> is specified, and the PE headers of the image are invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="pEReader.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e574-158">リーダーによって割り当てられたすべてのメモリを破棄します。</span><span class="sxs-lookup"><span data-stu-id="7e574-158">Disposes all memory allocated by the reader.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!IMPORTANT]
> <span data-ttu-id="7e574-159"><xref:System.Reflection.PortableExecutable.PEReader.Dispose> は複数回呼び出すことができますが、並列では呼び出せません。</span><span class="sxs-lookup"><span data-stu-id="7e574-159"><xref:System.Reflection.PortableExecutable.PEReader.Dispose>  can be called multiple times, but not in parallel.</span></span>
> <span data-ttu-id="7e574-160"><xref:System.Reflection.PortableExecutable.PEReader> に対する他の操作と並行して <xref:System.Reflection.PortableExecutable.PEReader.Dispose> を呼び出したり、リーダーから取得した <xref:System.Reflection.PortableExecutable.PEMemoryBlock>から読み取りを行ったりすることは安全ではありません。</span><span class="sxs-lookup"><span data-stu-id="7e574-160">It is not safe to call <xref:System.Reflection.PortableExecutable.PEReader.Dispose> in parallel with any other operation on the <xref:System.Reflection.PortableExecutable.PEReader> or when reading from <xref:System.Reflection.PortableExecutable.PEMemoryBlock>s retrieved from the reader.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEntireImage">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PEMemoryBlock GetEntireImage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.PEMemoryBlock GetEntireImage() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.GetEntireImage" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEntireImage () As PEMemoryBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::PEMemoryBlock GetEntireImage();" />
      <MemberSignature Language="F#" Value="member this.GetEntireImage : unit -&gt; System.Reflection.PortableExecutable.PEMemoryBlock" Usage="pEReader.GetEntireImage " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEMemoryBlock</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e574-161">PE イメージ全体が含まれている <see cref="T:System.Reflection.PortableExecutable.PEMemoryBlock" /> オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="7e574-161">Gets a <see cref="T:System.Reflection.PortableExecutable.PEMemoryBlock" /> object containing the entire PE image.</span></span></summary>
        <returns><span data-ttu-id="7e574-162">PE イメージ全体が含まれているメモリ ブロック。</span><span class="sxs-lookup"><span data-stu-id="7e574-162">A memory block that contains the entire PE image.</span></span></returns>
        <remarks>  
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="7e574-163"><xref:System.Reflection.PortableExecutable.PEReader.IsEntireImageAvailable> プロパティの値を取得して、<xref:System.Reflection.PortableExecutable.PEReader> によってイメージ全体が使用可能になるかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="7e574-163">You can retrieve the value of the <xref:System.Reflection.PortableExecutable.PEReader.IsEntireImageAvailable> property to determine whether the <xref:System.Reflection.PortableExecutable.PEReader> makes the entire image available.</span></span>

         ]]></format>
         </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e574-164">PE イメージ全体は使用できません。</span><span class="sxs-lookup"><span data-stu-id="7e574-164">The entire PE image is not available.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PEMemoryBlock GetMetadata ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.PEMemoryBlock GetMetadata() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.GetMetadata" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMetadata () As PEMemoryBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::PEMemoryBlock GetMetadata();" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : unit -&gt; System.Reflection.PortableExecutable.PEMemoryBlock" Usage="pEReader.GetMetadata " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEMemoryBlock</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e574-165">CLI メタデータが含まれている PE セクションを読み込みます。</span><span class="sxs-lookup"><span data-stu-id="7e574-165">Loads a PE section that contains CLI metadata.</span></span></summary>
        <returns><span data-ttu-id="7e574-166">CLI メタデータが含まれているメモリ ブロック。</span><span class="sxs-lookup"><span data-stu-id="7e574-166">A memory block that contains the CLI metadata.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e574-167">PE イメージにはメタデータが含まれていません (<see cref="P:System.Reflection.PortableExecutable.PEReader.HasMetadata" /> は <see langword="false" /> を返します)。</span><span class="sxs-lookup"><span data-stu-id="7e574-167">The PE image doesn't contain metadata (<see cref="P:System.Reflection.PortableExecutable.PEReader.HasMetadata" /> returns <see langword="false" />).</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="7e574-168">PE ヘッダーに無効なデータが含まれています。</span><span class="sxs-lookup"><span data-stu-id="7e574-168">The PE headers contain invalid data.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="7e574-169">基になるストリームからの読み取り中の入出力エラー。</span><span class="sxs-lookup"><span data-stu-id="7e574-169">IO error while reading from the underlying stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetSectionData">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PEMemoryBlock GetSectionData (int relativeVirtualAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.PEMemoryBlock GetSectionData(int32 relativeVirtualAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.GetSectionData(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSectionData (relativeVirtualAddress As Integer) As PEMemoryBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::PEMemoryBlock GetSectionData(int relativeVirtualAddress);" />
      <MemberSignature Language="F#" Value="member this.GetSectionData : int -&gt; System.Reflection.PortableExecutable.PEMemoryBlock" Usage="pEReader.GetSectionData relativeVirtualAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEMemoryBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relativeVirtualAddress" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="relativeVirtualAddress"><span data-ttu-id="7e574-170">読み取るデータの相対仮想アドレス。</span><span class="sxs-lookup"><span data-stu-id="7e574-170">The Relative Virtual Address of the data to read.</span></span></param>
        <summary><span data-ttu-id="7e574-171">指定した相対仮想アドレスが含まれている PE セクションをメモリに読み込み、そのアドレスから開始し、含まれているセクションの末尾で終了するメモリ ブロックを返します。</span><span class="sxs-lookup"><span data-stu-id="7e574-171">Loads the PE section that contains the specified relative virtual address into memory and returns a memory block that starts at that address and ends at the end of the containing section.</span></span></summary>
        <returns><span data-ttu-id="7e574-172"><paramref name="relativeVirtualAddress" /> で開始し、含まれているセクションの末尾で終了するメモリ ブロック、または <paramref name="relativeVirtualAddress" /> がこの PE イメージのいずれかの PE セクション内の場所を表していない場合は空のブロック。</span><span class="sxs-lookup"><span data-stu-id="7e574-172">A memory block that starats at <paramref name="relativeVirtualAddress" /> and ends at the end of the containing section, or an empty block if <paramref name="relativeVirtualAddress" /> doesn't represent a location in any of the PE sections of this PE image.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="7e574-173">PE ヘッダーに無効なデータが含まれています。</span><span class="sxs-lookup"><span data-stu-id="7e574-173">The PE headers contain invalid data.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="7e574-174">基になるストリームからの読み取り中に IO エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="7e574-174">An IO error occurred while reading from the underlying stream.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e574-175">PE イメージは使用できません。</span><span class="sxs-lookup"><span data-stu-id="7e574-175">The PE image is not available.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7e574-176"><paramref name="relativeVirtualAddress" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="7e574-176"><paramref name="relativeVirtualAddress" /> is negative.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetSectionData">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PEMemoryBlock GetSectionData (string sectionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.PEMemoryBlock GetSectionData(string sectionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.GetSectionData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSectionData (sectionName As String) As PEMemoryBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::PEMemoryBlock GetSectionData(System::String ^ sectionName);" />
      <MemberSignature Language="F#" Value="member this.GetSectionData : string -&gt; System.Reflection.PortableExecutable.PEMemoryBlock" Usage="pEReader.GetSectionData sectionName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEMemoryBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sectionName" Type="System.String" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="sectionName"><span data-ttu-id="7e574-177">セクションの名前。</span><span class="sxs-lookup"><span data-stu-id="7e574-177">The name of the section.</span></span></param>
        <summary><span data-ttu-id="7e574-178">指定した名前の PE セクションをメモリに読み込み、そのセクションにまたがるメモリ ブロックを返します。</span><span class="sxs-lookup"><span data-stu-id="7e574-178">Loads the PE section with the specified name into memory and returns a memory block that spans the section.</span></span></summary>
        <returns><span data-ttu-id="7e574-179">セクションにまたがるメモリ ブロック。または、指定された <paramref name="sectionName" /> のセクションがこの PE イメージ内に存在しない場合は空のブロック。</span><span class="sxs-lookup"><span data-stu-id="7e574-179">A memory block that spans the section, or an empty block if no section of the given <paramref name="sectionName" /> exists in this PE image.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7e574-180"><paramref name="sectionName" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7e574-180"><paramref name="sectionName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e574-181">PE イメージは使用できません。</span><span class="sxs-lookup"><span data-stu-id="7e574-181">The PE image is not available.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="HasMetadata">
      <MemberSignature Language="C#" Value="public bool HasMetadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasMetadata" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEReader.HasMetadata" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasMetadata As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasMetadata { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasMetadata : bool" Usage="System.Reflection.PortableExecutable.PEReader.HasMetadata" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e574-182">PE イメージに CLI メタデータが含まれているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="7e574-182">Gets a value that indicates if the PE image contains CLI metadata.</span></span></summary>
        <value><span data-ttu-id="7e574-183"><see langword="true" /> (PE イメージに CLI メタデータが含まれている場合)。それ以外の場合は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="7e574-183"><see langword="true" /> if the PE image contains CLI metadata; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="7e574-184">PE ヘッダーに無効なデータが含まれています。</span><span class="sxs-lookup"><span data-stu-id="7e574-184">The PE headers contain invalid data.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="7e574-185">基になるストリームからの読み取り中のエラー。</span><span class="sxs-lookup"><span data-stu-id="7e574-185">Error reading from the underlying stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsEntireImageAvailable">
      <MemberSignature Language="C#" Value="public bool IsEntireImageAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEntireImageAvailable" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEReader.IsEntireImageAvailable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEntireImageAvailable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEntireImageAvailable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEntireImageAvailable : bool" Usage="System.Reflection.PortableExecutable.PEReader.IsEntireImageAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e574-186">リーダーが PE イメージ全体にアクセスできるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="7e574-186">Gets a value that indicates if the reader can access the entire PE image.</span></span></summary>
        <value><span data-ttu-id="7e574-187">リーダーが PE イメージ全体にアクセスできるかどうかを <see langword="true" /> します。それ以外の場合は、<see langword="false" />ます。</span><span class="sxs-lookup"><span data-stu-id="7e574-187"><see langword="true" /> if the reader can access the entire PE image; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7e574-188"><xref:System.Reflection.PortableExecutable.PEReader> がストリームから構築され、その一部だけがメモリにプリフェッチされる場合、プロパティは `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="7e574-188">The property returns `false` if the <xref:System.Reflection.PortableExecutable.PEReader> is constructed from a stream and only part of it is prefetched into memory.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLoadedImage">
      <MemberSignature Language="C#" Value="public bool IsLoadedImage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLoadedImage" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEReader.IsLoadedImage" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLoadedImage As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLoadedImage { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLoadedImage : bool" Usage="System.Reflection.PortableExecutable.PEReader.IsLoadedImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e574-189">OS ローダーによって PE イメージがメモリに読み込まれているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="7e574-189">Gets a value that indicates if the PE image has been loaded into memory by the OS loader.</span></span></summary>
        <value><span data-ttu-id="7e574-190">OS ローダーによって PE イメージがメモリに読み込まれている場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7e574-190"><see langword="true" /> if the PE image has been loaded into memory by the OS loader; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PEHeaders">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PEHeaders PEHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.PortableExecutable.PEHeaders PEHeaders" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEReader.PEHeaders" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PEHeaders As PEHeaders" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::PortableExecutable::PEHeaders ^ PEHeaders { System::Reflection::PortableExecutable::PEHeaders ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PEHeaders : System.Reflection.PortableExecutable.PEHeaders" Usage="System.Reflection.PortableExecutable.PEReader.PEHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEHeaders</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e574-191">PE ヘッダーを取得します。</span><span class="sxs-lookup"><span data-stu-id="7e574-191">Gets the PE headers.</span></span></summary>
        <value><span data-ttu-id="7e574-192">この PE イメージの PE ヘッダー。</span><span class="sxs-lookup"><span data-stu-id="7e574-192">The PE headers for this PE image.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="7e574-193">ヘッダーに無効なデータが含まれています。</span><span class="sxs-lookup"><span data-stu-id="7e574-193">The headers contain invalid data.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="7e574-194">ストリームからの読み取り中のエラー。</span><span class="sxs-lookup"><span data-stu-id="7e574-194">Error reading from the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadCodeViewDebugDirectoryData">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.CodeViewDebugDirectoryData ReadCodeViewDebugDirectoryData (System.Reflection.PortableExecutable.DebugDirectoryEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.CodeViewDebugDirectoryData ReadCodeViewDebugDirectoryData(valuetype System.Reflection.PortableExecutable.DebugDirectoryEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.ReadCodeViewDebugDirectoryData(System.Reflection.PortableExecutable.DebugDirectoryEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadCodeViewDebugDirectoryData (entry As DebugDirectoryEntry) As CodeViewDebugDirectoryData" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::CodeViewDebugDirectoryData ReadCodeViewDebugDirectoryData(System::Reflection::PortableExecutable::DebugDirectoryEntry entry);" />
      <MemberSignature Language="F#" Value="member this.ReadCodeViewDebugDirectoryData : System.Reflection.PortableExecutable.DebugDirectoryEntry -&gt; System.Reflection.PortableExecutable.CodeViewDebugDirectoryData" Usage="pEReader.ReadCodeViewDebugDirectoryData entry" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.CodeViewDebugDirectoryData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Reflection.PortableExecutable.DebugDirectoryEntry" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="entry"><span data-ttu-id="7e574-195">デバッグ ディレクトリ エントリ インスタンス。</span><span class="sxs-lookup"><span data-stu-id="7e574-195">A Debug Directory entry instance.</span></span></param>
        <summary><span data-ttu-id="7e574-196">指定されたデバッグ ディレクトリ エントリでポイントされたデータを読み取り、それを CodeView として解釈します。</span><span class="sxs-lookup"><span data-stu-id="7e574-196">Reads the data pointed to by the specified Debug Directory entry and interprets it as CodeView.</span></span></summary>
        <returns><span data-ttu-id="7e574-197">コード ビューのデバッグ ディレクトリ データ インスタンス。</span><span class="sxs-lookup"><span data-stu-id="7e574-197">A code view debug directory data instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7e574-198"><paramref name="entry" /> は CodeView エントリではありません。</span><span class="sxs-lookup"><span data-stu-id="7e574-198"><paramref name="entry" /> is not a CodeView entry.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="7e574-199">データの形式が正しくありません。</span><span class="sxs-lookup"><span data-stu-id="7e574-199">Bad format of the data.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="7e574-200">基になるストリームからの読み取り中の入出力エラー。</span><span class="sxs-lookup"><span data-stu-id="7e574-200">IO error while reading from the underlying stream.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e574-201">PE イメージは使用できません。</span><span class="sxs-lookup"><span data-stu-id="7e574-201">The PE image is not available.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadDebugDirectory">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;System.Reflection.PortableExecutable.DebugDirectoryEntry&gt; ReadDebugDirectory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;valuetype System.Reflection.PortableExecutable.DebugDirectoryEntry&gt; ReadDebugDirectory() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.ReadDebugDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadDebugDirectory () As ImmutableArray(Of DebugDirectoryEntry)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;System::Reflection::PortableExecutable::DebugDirectoryEntry&gt; ReadDebugDirectory();" />
      <MemberSignature Language="F#" Value="member this.ReadDebugDirectory : unit -&gt; System.Collections.Immutable.ImmutableArray&lt;System.Reflection.PortableExecutable.DebugDirectoryEntry&gt;" Usage="pEReader.ReadDebugDirectory " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;System.Reflection.PortableExecutable.DebugDirectoryEntry&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e574-202">すべてのデバッグ ディレクトリ テーブル エントリを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="7e574-202">Reads all Debug Directory table entries.</span></span></summary>
        <returns><span data-ttu-id="7e574-203">デバッグ ディレクトリ テーブル エントリの配列。</span><span class="sxs-lookup"><span data-stu-id="7e574-203">An array of Debug Directory table entries.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="7e574-204">エントリの形式が正しくありません。</span><span class="sxs-lookup"><span data-stu-id="7e574-204">Bad format of the entry.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="7e574-205">基になるストリームからの読み取り中の入出力エラー。</span><span class="sxs-lookup"><span data-stu-id="7e574-205">IO error while reading from the underlying stream.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e574-206">PE イメージは使用できません。</span><span class="sxs-lookup"><span data-stu-id="7e574-206">The PE image is not available.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadEmbeddedPortablePdbDebugDirectoryData">
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.MetadataReaderProvider ReadEmbeddedPortablePdbDebugDirectoryData (System.Reflection.PortableExecutable.DebugDirectoryEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Metadata.MetadataReaderProvider ReadEmbeddedPortablePdbDebugDirectoryData(valuetype System.Reflection.PortableExecutable.DebugDirectoryEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.ReadEmbeddedPortablePdbDebugDirectoryData(System.Reflection.PortableExecutable.DebugDirectoryEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadEmbeddedPortablePdbDebugDirectoryData (entry As DebugDirectoryEntry) As MetadataReaderProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Metadata::MetadataReaderProvider ^ ReadEmbeddedPortablePdbDebugDirectoryData(System::Reflection::PortableExecutable::DebugDirectoryEntry entry);" />
      <MemberSignature Language="F#" Value="member this.ReadEmbeddedPortablePdbDebugDirectoryData : System.Reflection.PortableExecutable.DebugDirectoryEntry -&gt; System.Reflection.Metadata.MetadataReaderProvider" Usage="pEReader.ReadEmbeddedPortablePdbDebugDirectoryData entry" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.MetadataReaderProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Reflection.PortableExecutable.DebugDirectoryEntry" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="entry"><span data-ttu-id="7e574-207">データの読み取り元のデバッグ ディレクトリ エントリ。</span><span class="sxs-lookup"><span data-stu-id="7e574-207">The Debug Directory entry whose data is to be read.</span></span></param>
        <summary><span data-ttu-id="7e574-208">指定されたデバッグ ディレクトリ エントリでポイントされたデータを読み取り、それを埋め込まれたポータブル PDB の BLOB として解釈します。</span><span class="sxs-lookup"><span data-stu-id="7e574-208">Reads the data pointed to by the specified Debug Directory entry and interprets it as an Embedded Portable PDB blob.</span></span></summary>
        <returns><span data-ttu-id="7e574-209">ポータブル PDB イメージを読み取るためのメタデータ リーダーのプロバイダー。</span><span class="sxs-lookup"><span data-stu-id="7e574-209">The provider of a metadata reader for reading a Portable PDB image.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7e574-210"><paramref name="entry" /> は <see cref="F:System.Reflection.PortableExecutable.DebugDirectoryEntryType.EmbeddedPortablePdb" /> エントリではありません。</span><span class="sxs-lookup"><span data-stu-id="7e574-210"><paramref name="entry" /> is not a <see cref="F:System.Reflection.PortableExecutable.DebugDirectoryEntryType.EmbeddedPortablePdb" /> entry.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="7e574-211">データの形式が正しくありません。</span><span class="sxs-lookup"><span data-stu-id="7e574-211">Bad format of the data.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e574-212">PE イメージは使用できません。</span><span class="sxs-lookup"><span data-stu-id="7e574-212">PE image not available.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadPdbChecksumDebugDirectoryData">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PdbChecksumDebugDirectoryData ReadPdbChecksumDebugDirectoryData (System.Reflection.PortableExecutable.DebugDirectoryEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.PdbChecksumDebugDirectoryData ReadPdbChecksumDebugDirectoryData(valuetype System.Reflection.PortableExecutable.DebugDirectoryEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.ReadPdbChecksumDebugDirectoryData(System.Reflection.PortableExecutable.DebugDirectoryEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadPdbChecksumDebugDirectoryData (entry As DebugDirectoryEntry) As PdbChecksumDebugDirectoryData" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::PdbChecksumDebugDirectoryData ReadPdbChecksumDebugDirectoryData(System::Reflection::PortableExecutable::DebugDirectoryEntry entry);" />
      <MemberSignature Language="F#" Value="member this.ReadPdbChecksumDebugDirectoryData : System.Reflection.PortableExecutable.DebugDirectoryEntry -&gt; System.Reflection.PortableExecutable.PdbChecksumDebugDirectoryData" Usage="pEReader.ReadPdbChecksumDebugDirectoryData entry" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PdbChecksumDebugDirectoryData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Reflection.PortableExecutable.DebugDirectoryEntry" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="entry"><span data-ttu-id="7e574-213">データの読み取り元のデバッグ ディレクトリ エントリ。</span><span class="sxs-lookup"><span data-stu-id="7e574-213">The Debug Directory entry whose data is to be read.</span></span></param>
        <summary><span data-ttu-id="7e574-214">指定されたデバッグ ディレクトリ エントリでポイントされたデータを読み取り、それを PDB チェックサム エントリとして解釈します。</span><span class="sxs-lookup"><span data-stu-id="7e574-214">Reads the data pointed to by the specified Debug Directory entry and interprets it as a PDB Checksum entry.</span></span></summary>
        <returns><span data-ttu-id="7e574-215">PDB チェックサム エントリ。</span><span class="sxs-lookup"><span data-stu-id="7e574-215">The PDB Checksum entry.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7e574-216"><paramref name="entry" /> は PDB チェックサム エントリではありません。</span><span class="sxs-lookup"><span data-stu-id="7e574-216"><paramref name="entry" /> is not a PDB Checksum entry.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="7e574-217">データの形式が正しくありません。</span><span class="sxs-lookup"><span data-stu-id="7e574-217">Bad format of the data.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="7e574-218">基になるストリームからの読み取り中の入出力エラー。</span><span class="sxs-lookup"><span data-stu-id="7e574-218">IO error while reading from the underlying stream.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e574-219">PE イメージは使用できません。</span><span class="sxs-lookup"><span data-stu-id="7e574-219">The PE image is not available.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryOpenAssociatedPortablePdb">
      <MemberSignature Language="C#" Value="public bool TryOpenAssociatedPortablePdb (string peImagePath, Func&lt;string,System.IO.Stream&gt; pdbFileStreamProvider, out System.Reflection.Metadata.MetadataReaderProvider pdbReaderProvider, out string pdbPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryOpenAssociatedPortablePdb(string peImagePath, class System.Func`2&lt;string, class System.IO.Stream&gt; pdbFileStreamProvider, [out] class System.Reflection.Metadata.MetadataReaderProvider&amp; pdbReaderProvider, [out] string&amp; pdbPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.TryOpenAssociatedPortablePdb(System.String,System.Func{System.String,System.IO.Stream},System.Reflection.Metadata.MetadataReaderProvider@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryOpenAssociatedPortablePdb (peImagePath As String, pdbFileStreamProvider As Func(Of String, Stream), ByRef pdbReaderProvider As MetadataReaderProvider, ByRef pdbPath As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryOpenAssociatedPortablePdb(System::String ^ peImagePath, Func&lt;System::String ^, System::IO::Stream ^&gt; ^ pdbFileStreamProvider, [Runtime::InteropServices::Out] System::Reflection::Metadata::MetadataReaderProvider ^ % pdbReaderProvider, [Runtime::InteropServices::Out] System::String ^ % pdbPath);" />
      <MemberSignature Language="F#" Value="member this.TryOpenAssociatedPortablePdb : string * Func&lt;string, System.IO.Stream&gt; * MetadataReaderProvider * string -&gt; bool" Usage="pEReader.TryOpenAssociatedPortablePdb (peImagePath, pdbFileStreamProvider, pdbReaderProvider, pdbPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="peImagePath" Type="System.String" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="pdbFileStreamProvider" Type="System.Func&lt;System.String,System.IO.Stream&gt;" Index="1" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="pdbReaderProvider" Type="System.Reflection.Metadata.MetadataReaderProvider" RefType="out" Index="2" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="pdbPath" Type="System.String" RefType="out" Index="3" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="peImagePath"><span data-ttu-id="7e574-220">PE イメージへのパス。</span><span class="sxs-lookup"><span data-stu-id="7e574-220">The path to the PE image.</span></span> <span data-ttu-id="7e574-221">このパスは、PE ファイルが含まれているディレクトリ内で PDB ファイルを検索するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="7e574-221">The path is used to locate the PDB file located in the directory containing the PE file.</span></span></param>
        <param name="pdbFileStreamProvider"><span data-ttu-id="7e574-222">指定されている場合、指定されたファイル パスの <see cref="T:System.IO.Stream" /> を開くために呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="7e574-222">If specified, called to open a <see cref="T:System.IO.Stream" /> for a given file path.</span></span> <span data-ttu-id="7e574-223">プロバイダーは、読み取り可能でシーク可能な <see cref="T:System.IO.Stream" />、またはターゲット ファイルが存在しないか、何らかの理由で無視する必要がある場合は、<see langword="null" /> のいずれかを返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="7e574-223">The provider is expected to either return a readable and seekable <see cref="T:System.IO.Stream" />, or <see langword="null" /> if the target file doesn't exist or should be ignored for some reason.</span></span> <span data-ttu-id="7e574-224">予期しない IO エラーが原因でファイルを開くことができない場合、プロバイダーは <see cref="T:System.IO.IOException" /> をスローする必要があります。</span><span class="sxs-lookup"><span data-stu-id="7e574-224">The provider should throw <see cref="T:System.IO.IOException" /> if it fails to open the file due to an unexpected IO error.</span></span></param>
        <param name="pdbReaderProvider"><span data-ttu-id="7e574-225">正常に終了した場合は、ポータブル PDB を読み取るために <see cref="T:System.Reflection.Metadata.MetadataReaderProvider" /> の新しいインスタンスが使用されます。</span><span class="sxs-lookup"><span data-stu-id="7e574-225">If successful, a new instance of <see cref="T:System.Reflection.Metadata.MetadataReaderProvider" /> to be used to read the Portable PDB,.</span></span></param>
        <param name="pdbPath"><span data-ttu-id="7e574-226">正常に終了し、PDB がファイル内で見つかった場合は、ファイルへのパス、または PDB が PE イメージ自体に埋め込まれている場合は <see langword="null" /> が使用されます。</span><span class="sxs-lookup"><span data-stu-id="7e574-226">If successful and the PDB is found in a file, the path to the file, or <see langword="null" /> if the PDB is embedded in the PE image itself.</span></span></param>
        <summary><span data-ttu-id="7e574-227">この PE イメージに関連付けられているポータブル PDB を開きます。</span><span class="sxs-lookup"><span data-stu-id="7e574-227">Opens a Portable PDB associated with this PE image.</span></span></summary>
        <returns><span data-ttu-id="7e574-228">PE イメージに PDB が関連付けられていて、PDB が正常に開かれている場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7e574-228"><see langword="true" /> if the PE image has a PDB associated with it and the PDB has been successfully opened; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7e574-229">このメソッドは、PE イメージのデバッグディレクトリの内容に基づいて、単純な PDB ファイル参照を実装します。</span><span class="sxs-lookup"><span data-stu-id="7e574-229">This method implements a simple PDB file lookup based on the content of the PE image Debug Directory.</span></span> <span data-ttu-id="7e574-230">より高度なツールでは、検索パスまたはシンボルサーバーに対する追加の参照が必要になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="7e574-230">A more sophisticated tool might need to follow up with additional lookup on search paths or a symbol server.</span></span>
 
<span data-ttu-id="7e574-231">メソッドは、PDB を次の順序で検索します。</span><span class="sxs-lookup"><span data-stu-id="7e574-231">The method looks the PDB up in the following order:</span></span>

1) <span data-ttu-id="7e574-232">PE ファイルが格納されているディレクトリ (`peImagePath` のディレクトリ) の CodeView エントリに存在する名前の、一致する PDB ファイルがあるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="7e574-232">Checks for a matching PDB file of the name found in the CodeView entry in the directory containing the PE file (the directory of `peImagePath`).</span></span>
2) <span data-ttu-id="7e574-233">PE イメージ自体に埋め込まれている PDB があるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="7e574-233">Checks for a PDB embedded in the PE image itself.</span></span>
 
<span data-ttu-id="7e574-234">デバッグディレクトリに指定された情報に一致する最初の PDB が返されます。</span><span class="sxs-lookup"><span data-stu-id="7e574-234">The first PDB that matches the information specified in the Debug Directory is returned.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7e574-235"><paramref name="peImagePath" /> または <paramref name="pdbFileStreamProvider" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7e574-235"><paramref name="peImagePath" /> or <paramref name="pdbFileStreamProvider" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e574-236"><paramref name="pdbFileStreamProvider" /> から返されたストリームでは、読み取りとシークの操作がサポートされません。</span><span class="sxs-lookup"><span data-stu-id="7e574-236">The stream returned from <paramref name="pdbFileStreamProvider" /> doesn't support read and seek operations.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="7e574-237">次のエラーにより、一致する PDB ファイルが見つかりませんでした。PE イメージまたは PDB が無効です。</span><span class="sxs-lookup"><span data-stu-id="7e574-237">No matching PDB file was found due to an error: The PE image or the PDB is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="7e574-238">次のエラーにより、一致する PDB ファイルが見つかりませんでした。PE イメージまたは PDB の読み取り中に IO エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="7e574-238">No matching PDB file was found due to an error: An IO error occurred while reading the PE image or the PDB.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
