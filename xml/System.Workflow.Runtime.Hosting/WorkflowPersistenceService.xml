<Type Name="WorkflowPersistenceService" FullName="System.Workflow.Runtime.Hosting.WorkflowPersistenceService">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fb7e9199a0d1ccd876d87e58a26a103fa78ed60c" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78807545" /></Metadata><TypeSignature Language="C#" Value="public abstract class WorkflowPersistenceService : System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit WorkflowPersistenceService extends System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.Hosting.WorkflowPersistenceService" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WorkflowPersistenceService&#xA;Inherits WorkflowRuntimeService" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowPersistenceService abstract : System::Workflow::Runtime::Hosting::WorkflowRuntimeService" />
  <TypeSignature Language="F#" Value="type WorkflowPersistenceService = class&#xA;    inherit WorkflowRuntimeService" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Workflow.Runtime.Hosting.WorkflowRuntimeService</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="732d1-101">すべての永続性サービスの派生元となる抽象基本クラスです。</span><span class="sxs-lookup"><span data-stu-id="732d1-101">The abstract base class from which all persistence services are derived.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 <span data-ttu-id="732d1-102">ワークフローの実行中に特定の状態になると、ワークフロー ランタイム エンジンはワークフロー インスタンスに関する状態情報を永続化します。</span><span class="sxs-lookup"><span data-stu-id="732d1-102">When certain conditions occur while the workflow is running, the workflow runtime engine persists state information about the workflow instance.</span></span> <span data-ttu-id="732d1-103">永続化が行われるのは、たとえば、アトミック トランザクションが完了したとき、ワークフロー インスタンスがアイドル状態になったとき、ホストがワークフロー インスタンスに対する <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A?displayProperty=nameWithType> を呼び出したとき、ワークフロー インスタンスが終了または完了したときです。</span><span class="sxs-lookup"><span data-stu-id="732d1-103">Persistence can occur, for example, when an atomic transaction finishes, when the workflow instance becomes idle, when the host calls <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A?displayProperty=nameWithType> on the workflow instance, or when a workflow instance is terminated or finishes.</span></span> <span data-ttu-id="732d1-104">永続化を行う必要があることがワークフロー ランタイム エンジンのセマンティクスにより決定されると、ワークフロー ランタイム エンジンは永続性サービスによって提供されるメソッドを呼び出し、ワークフロー インスタンスに関する状態情報を保存します。</span><span class="sxs-lookup"><span data-stu-id="732d1-104">When the workflow runtime engine semantics dictate that persistence should occur, the workflow runtime engine calls methods that are supplied by a persistence service to save state information about the workflow instance.</span></span> <span data-ttu-id="732d1-105">同様に、ワークフロー ランタイム エンジンが以前に永続化されたワークフロー インスタンスを復元する必要がある場合、ワークフロー ランタイム エンジンは永続性サービスによって提供されるメソッドを呼び出し、その状態情報を読み込みます。</span><span class="sxs-lookup"><span data-stu-id="732d1-105">Likewise, when the workflow runtime engine needs to restore a previously persisted workflow instance, it calls methods that are supplied by the persistence service to load this state information.</span></span> <span data-ttu-id="732d1-106">ワークフロー ランタイム エンジンは、永続化を行う必要がある場合についてのすべてのセマンティクスを扱います。</span><span class="sxs-lookup"><span data-stu-id="732d1-106">The workflow runtime engine handles all the semantics regarding when to perform persistence.</span></span> <span data-ttu-id="732d1-107">永続性サービスは、ワークフロー状態情報のデータ ストアへの保存およびデータ ストアからの読み込みを実際に処理します。</span><span class="sxs-lookup"><span data-stu-id="732d1-107">The persistence service handles actually saving and loading the workflow state information to or from a data store.</span></span>  
  
 <span data-ttu-id="732d1-108"><xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> クラスからクラスを派生させることにより、永続性サービスを作成できます。</span><span class="sxs-lookup"><span data-stu-id="732d1-108">You can create a persistence service by deriving a class from the <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> class.</span></span>  <span data-ttu-id="732d1-109">永続性サービスをワークフロー ランタイム エンジンに追加するには、<xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> を呼び出すか、アプリケーション構成ファイルに適切なエントリを追加します。</span><span class="sxs-lookup"><span data-stu-id="732d1-109">You can add your persistence service to the workflow runtime engine by calling <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> or by making an appropriate entry in the application configuration file.</span></span> <span data-ttu-id="732d1-110"><xref:System.Workflow.Runtime.WorkflowRuntime> に含めることができる永続性サービスは 1 つだけです。</span><span class="sxs-lookup"><span data-stu-id="732d1-110">The <xref:System.Workflow.Runtime.WorkflowRuntime> should only contain one persistence service.</span></span> <span data-ttu-id="732d1-111">Windows Workflow Foundation に用意されている <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> クラスは、そのまますぐに使用できる永続性サービスですが、拡張して使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="732d1-111">Windows Workflow Foundation provides the <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> class, an out-of-box persistence service, which you can use as is or extend.</span></span>  
  
 <span data-ttu-id="732d1-112">ワークフロー ランタイム エンジンは、ワークフロー状態情報をロックするためのセマンティクスを持っています。これは、異なるプロセスで実行される永続性サービスが単一のデータ ストアにアクセスできる環境で使用されます。</span><span class="sxs-lookup"><span data-stu-id="732d1-112">The workflow runtime engine has semantics for locking workflow state information for use in environments where persistence services that run in different processes might have access to a single data store.</span></span> <span data-ttu-id="732d1-113"><xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> クラスを使用すると、ワークフロー ランタイム エンジンのこの機能をサポートできます。そのためには、データ ストア内のワークフロー インスタンスの状態情報のロックを解除するかどうかを指定するパラメーターを <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> に提供し、以前にロックされたワークフロー状態情報のロックを解除する <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A> メソッドを提供します。</span><span class="sxs-lookup"><span data-stu-id="732d1-113">The <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> class provides the capability to support this functionality of the workflow runtime engine by providing a parameter to <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> that specifies whether the state information of a workflow instance should be unlocked in the data store, and by providing a method <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A> to unlock previously locked workflow state information.</span></span> <span data-ttu-id="732d1-114">ロックを実装する永続性サービスでは、<xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A> を呼び出してワークフロー インスタンスの状態情報をロックする必要があります。</span><span class="sxs-lookup"><span data-stu-id="732d1-114">In a persistence service that implements locking, a call to <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A> should lock the state information for a workflow instance.</span></span>  
  
 <span data-ttu-id="732d1-115">永続性サービスは、状態情報をデータ ストアに保存できなかった場合、またはデータ ストアから状態情報を読み込めなかった場合は、<xref:System.Workflow.Runtime.Hosting.PersistenceException> をスローする必要があります。</span><span class="sxs-lookup"><span data-stu-id="732d1-115">Your persistence service should throw a <xref:System.Workflow.Runtime.Hosting.PersistenceException> if it fails to save state information to its data store or load state information from its data store.</span></span> <span data-ttu-id="732d1-116">ワークフロー ランタイム エンジンにはこの動作が必要です。</span><span class="sxs-lookup"><span data-stu-id="732d1-116">The workflow runtime engine expects this behavior.</span></span>  
  
 <span data-ttu-id="732d1-117">耐久性のあるストアを使用してワークフローの状態情報を保存するサービスには、バッチ メカニズムが用意されています。</span><span class="sxs-lookup"><span data-stu-id="732d1-117">A batching mechanism is provided for services that use a durable store to save workflow state information.</span></span> <span data-ttu-id="732d1-118">このような場合には、永続性サービスで使用する耐久性のあるストアとワークフロー ランタイム エンジンの内部状態の整合性を保持することが重要です。</span><span class="sxs-lookup"><span data-stu-id="732d1-118">It is important in these cases to maintain consistency between the durable store that is used by the persistence service and the internal state of the workflow runtime engine.</span></span> <span data-ttu-id="732d1-119"><xref:System.Workflow.Runtime.IPendingWork> インターフェイスで定義されている機能をサービスに追加してから、<xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> によって提供されているワークフロー トランザクション バッチに参加することができます。これは、データ ストアに対する変更を <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A> に対する作業項目として追加することにより実行されます。</span><span class="sxs-lookup"><span data-stu-id="732d1-119">You can add functionality defined by the <xref:System.Workflow.Runtime.IPendingWork> interface to your service, and then participate in workflow transaction batching provided by the <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> by adding changes to your data store as work items to the <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>.</span></span> <span data-ttu-id="732d1-120">永続的ストア自体によって <xref:System.Transactions.IEnlistmentNotification> インターフェイスが実装されるため、トランザクション ロールバックが発生した場合でもワークフロー情報が誤って永続化されることはありません。</span><span class="sxs-lookup"><span data-stu-id="732d1-120">The durable store itself should implement the <xref:System.Transactions.IEnlistmentNotification> interface, so that workflow information is not persisted incorrectly in the event of a transaction rollback.</span></span> <span data-ttu-id="732d1-121">詳細については、「<xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity%2A>」または「<xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="732d1-121">For more information, see <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity%2A> or <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A>.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WorkflowPersistenceService ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WorkflowPersistenceService();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="732d1-122">派生クラスとして実装された場合、<see cref="T:System.Workflow.Runtime.Hosting.WorkflowPersistenceService" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="732d1-122">When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowPersistenceService" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="732d1-123">`SqlWorkflowPersistenceService` から派生した `WorkflowPersistenceService` クラスのインスタンスを作成する例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="732d1-123">The following example demonstrates creating an instance of the `SqlWorkflowPersistenceService` class (derived from `WorkflowPersistenceService`).</span></span> <span data-ttu-id="732d1-124">この例は、Program.cs クラスに含まれている、入れ子にされた例外ハンドラーを示す SDK サンプルです。</span><span class="sxs-lookup"><span data-stu-id="732d1-124">This example is from the Nested Exception Handlers SDK sample, from the Program.cs class.</span></span>  <span data-ttu-id="732d1-125">詳細については、「[入れ子になった例外ハンドラーのサンプル](https://msdn.microsoft.com/library/d1da0209-842b-41c8-9b7c-0cbaa1034265)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="732d1-125">For more information, see the [Nested Exception Handlers Sample](https://msdn.microsoft.com/library/d1da0209-842b-41c8-9b7c-0cbaa1034265).</span></span>  
  
 [!code-csharp[WF_Samples#161](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#161)]
 [!code-vb[WF_Samples#161](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#161)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultSerializedForm">
      <MemberSignature Language="C#" Value="protected static byte[] GetDefaultSerializedForm (System.Workflow.ComponentModel.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig unsigned int8[] GetDefaultSerializedForm(class System.Workflow.ComponentModel.Activity activity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetDefaultSerializedForm(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetDefaultSerializedForm (activity As Activity) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static cli::array &lt;System::Byte&gt; ^ GetDefaultSerializedForm(System::Workflow::ComponentModel::Activity ^ activity);" />
      <MemberSignature Language="F#" Value="static member GetDefaultSerializedForm : System.Workflow.ComponentModel.Activity -&gt; byte[]" Usage="System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetDefaultSerializedForm activity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="activity"><span data-ttu-id="732d1-126">シリアル化された形式が要求される <see cref="T:System.Workflow.ComponentModel.Activity" />。</span><span class="sxs-lookup"><span data-stu-id="732d1-126">The <see cref="T:System.Workflow.ComponentModel.Activity" /> whose serialized form is requested.</span></span></param>
        <summary><span data-ttu-id="732d1-127">シリアル化された既定の形式の <see cref="T:System.Workflow.ComponentModel.Activity" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="732d1-127">Retrieves the serialized default form of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</span></span></summary>
        <returns><span data-ttu-id="732d1-128">シリアル化された既定の形式の <see cref="T:System.Workflow.ComponentModel.Activity" />。</span><span class="sxs-lookup"><span data-stu-id="732d1-128">The serialized default form of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIsBlocked">
      <MemberSignature Language="C#" Value="protected internal static bool GetIsBlocked (System.Workflow.ComponentModel.Activity rootActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblystatic hidebysig bool GetIsBlocked(class System.Workflow.ComponentModel.Activity rootActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetIsBlocked(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared Function GetIsBlocked (rootActivity As Activity) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; static bool GetIsBlocked(System::Workflow::ComponentModel::Activity ^ rootActivity);" />
      <MemberSignature Language="F#" Value="static member GetIsBlocked : System.Workflow.ComponentModel.Activity -&gt; bool" Usage="System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetIsBlocked rootActivity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="rootActivity"><span data-ttu-id="732d1-129">ワークフロー インスタンスのルート アクティビティ。</span><span class="sxs-lookup"><span data-stu-id="732d1-129">The root activity of the workflow instance.</span></span></param>
        <summary><span data-ttu-id="732d1-130">指定したアクティビティがブロックされているかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="732d1-130">Indicates whether the given activity is blocked.</span></span></summary>
        <returns><span data-ttu-id="732d1-131">指定したアクティビティがブロックされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="732d1-131"><see langword="true" /> if the given activity is blocked; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSuspendOrTerminateInfo">
      <MemberSignature Language="C#" Value="protected internal static string GetSuspendOrTerminateInfo (System.Workflow.ComponentModel.Activity rootActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblystatic hidebysig string GetSuspendOrTerminateInfo(class System.Workflow.ComponentModel.Activity rootActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetSuspendOrTerminateInfo(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared Function GetSuspendOrTerminateInfo (rootActivity As Activity) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; static System::String ^ GetSuspendOrTerminateInfo(System::Workflow::ComponentModel::Activity ^ rootActivity);" />
      <MemberSignature Language="F#" Value="static member GetSuspendOrTerminateInfo : System.Workflow.ComponentModel.Activity -&gt; string" Usage="System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetSuspendOrTerminateInfo rootActivity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="rootActivity"><span data-ttu-id="732d1-132">ワークフロー インスタンスのルート アクティビティ。</span><span class="sxs-lookup"><span data-stu-id="732d1-132">The root activity of the workflow instance.</span></span></param>
        <summary><span data-ttu-id="732d1-133">指定したアクティビティの終了または中断の情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="732d1-133">Retrieves the termination or suspend information of the given activity.</span></span></summary>
        <returns><span data-ttu-id="732d1-134">終了または中断の情報を格納している <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="732d1-134">A <see cref="T:System.String" /> that contains the termination or suspend information.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowStatus">
      <MemberSignature Language="C#" Value="protected internal static System.Workflow.Runtime.WorkflowStatus GetWorkflowStatus (System.Workflow.ComponentModel.Activity rootActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblystatic hidebysig valuetype System.Workflow.Runtime.WorkflowStatus GetWorkflowStatus(class System.Workflow.ComponentModel.Activity rootActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared Function GetWorkflowStatus (rootActivity As Activity) As WorkflowStatus" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; static System::Workflow::Runtime::WorkflowStatus GetWorkflowStatus(System::Workflow::ComponentModel::Activity ^ rootActivity);" />
      <MemberSignature Language="F#" Value="static member GetWorkflowStatus : System.Workflow.ComponentModel.Activity -&gt; System.Workflow.Runtime.WorkflowStatus" Usage="System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus rootActivity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="rootActivity"><span data-ttu-id="732d1-135">ワークフロー インスタンスのルート アクティビティ。</span><span class="sxs-lookup"><span data-stu-id="732d1-135">The root activity of the workflow instance.</span></span></param>
        <summary><span data-ttu-id="732d1-136">ワークフローのステータスを取得します。</span><span class="sxs-lookup"><span data-stu-id="732d1-136">Retrieves the status of the workflow.</span></span></summary>
        <returns><span data-ttu-id="732d1-137">ワークフローのステータスを示す <see cref="T:System.Workflow.Runtime.WorkflowStatus" /> 列挙値。</span><span class="sxs-lookup"><span data-stu-id="732d1-137">A <see cref="T:System.Workflow.Runtime.WorkflowStatus" /> enumeration value that denotes the status of the workflow.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCompletedContextActivity">
      <MemberSignature Language="C#" Value="protected internal abstract System.Workflow.ComponentModel.Activity LoadCompletedContextActivity (Guid scopeId, System.Workflow.ComponentModel.Activity outerActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Workflow.ComponentModel.Activity LoadCompletedContextActivity(valuetype System.Guid scopeId, class System.Workflow.ComponentModel.Activity outerActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity(System.Guid,System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Function LoadCompletedContextActivity (scopeId As Guid, outerActivity As Activity) As Activity" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract System::Workflow::ComponentModel::Activity ^ LoadCompletedContextActivity(Guid scopeId, System::Workflow::ComponentModel::Activity ^ outerActivity);" />
      <MemberSignature Language="F#" Value="abstract member LoadCompletedContextActivity : Guid * System.Workflow.ComponentModel.Activity -&gt; System.Workflow.ComponentModel.Activity" Usage="workflowPersistenceService.LoadCompletedContextActivity (scopeId, outerActivity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopeId" Type="System.Guid" />
        <Parameter Name="outerActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="scopeId"><span data-ttu-id="732d1-138">完了したスコープの <see cref="T:System.Guid" />。</span><span class="sxs-lookup"><span data-stu-id="732d1-138">The <see cref="T:System.Guid" /> of the completed scope.</span></span></param>
        <param name="outerActivity"><span data-ttu-id="732d1-139">完了したスコープを囲むアクティビティを表す <see cref="T:System.Workflow.ComponentModel.Activity" />。</span><span class="sxs-lookup"><span data-stu-id="732d1-139">An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the activity that encloses the completed scope.</span></span></param>
        <summary><span data-ttu-id="732d1-140">派生クラスとして実装された場合、指定した完了スコープをメモリに戻します。</span><span class="sxs-lookup"><span data-stu-id="732d1-140">When implemented in a derived class, loads the specified completed scope back into memory.</span></span></summary>
        <returns><span data-ttu-id="732d1-141">完了したスコープを表す <see cref="T:System.Workflow.ComponentModel.Activity" />。</span><span class="sxs-lookup"><span data-stu-id="732d1-141">An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the completed scope.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="732d1-142">ワークフロー ランタイム エンジンは、補正を実装するために <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A> を使用します。</span><span class="sxs-lookup"><span data-stu-id="732d1-142">The workflow runtime engine uses <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A> to implement compensation.</span></span> <span data-ttu-id="732d1-143">完了したスコープの完全なコピーを復元する必要があります。</span><span class="sxs-lookup"><span data-stu-id="732d1-143">You must restore an identical copy of the completed scope.</span></span> <span data-ttu-id="732d1-144">そのためには、データ ストア内の完了スコープを表すものから有効な <xref:System.IO.Stream> を復元する必要があります。</span><span class="sxs-lookup"><span data-stu-id="732d1-144">To do this, you must restore a valid <xref:System.IO.Stream> from your representation of the completed scope in the data store.</span></span> <span data-ttu-id="732d1-145">次に、オーバーロードされた <xref:System.IO.Stream> メソッドの 1 つに、この <xref:System.Workflow.ComponentModel.Activity.Load%2A> を渡してスコープの逆シリアル化を実行します。</span><span class="sxs-lookup"><span data-stu-id="732d1-145">Then you must pass this <xref:System.IO.Stream> to one of the overloaded methods of <xref:System.Workflow.ComponentModel.Activity.Load%2A> to perform deserialization of the scope.</span></span>  
  
 <span data-ttu-id="732d1-146">永続性サービスは、データ ストアから完了スコープを読み込めなかった場合に、適切なメッセージを含めた <xref:System.Workflow.Runtime.Hosting.PersistenceException> をスローする必要があります。</span><span class="sxs-lookup"><span data-stu-id="732d1-146">If your persistence service cannot load the completed scope from its data store, it should throw a <xref:System.Workflow.Runtime.Hosting.PersistenceException> with an appropriate message.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="732d1-147">`LoadCompletedContextActivity` メソッドの実装例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="732d1-147">The following example demonstrates an implementation of the `LoadCompletedContextActivity` method.</span></span> <span data-ttu-id="732d1-148">この例は、FilePersistenceService.cs ファイルに含まれているカスタム永続性サービスのサンプルです。</span><span class="sxs-lookup"><span data-stu-id="732d1-148">This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file.</span></span> <span data-ttu-id="732d1-149">詳細については、「[カスタム永続性サービスのサンプル](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="732d1-149">For more information, see [Custom Persistence Service Sample](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).</span></span>  
  
 [!code-csharp[WF_Samples#269](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#269)]
 [!code-vb[WF_Samples#269](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#269)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadWorkflowInstanceState">
      <MemberSignature Language="C#" Value="protected internal abstract System.Workflow.ComponentModel.Activity LoadWorkflowInstanceState (Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Workflow.ComponentModel.Activity LoadWorkflowInstanceState(valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Function LoadWorkflowInstanceState (instanceId As Guid) As Activity" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract System::Workflow::ComponentModel::Activity ^ LoadWorkflowInstanceState(Guid instanceId);" />
      <MemberSignature Language="F#" Value="abstract member LoadWorkflowInstanceState : Guid -&gt; System.Workflow.ComponentModel.Activity" Usage="workflowPersistenceService.LoadWorkflowInstanceState instanceId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="instanceId"><span data-ttu-id="732d1-150">ワークフロー インスタンスのルート アクティビティの <see cref="T:System.Guid" />。</span><span class="sxs-lookup"><span data-stu-id="732d1-150">The <see cref="T:System.Guid" /> of the root activity of the workflow instance.</span></span></param>
        <summary><span data-ttu-id="732d1-151">派生クラスとして実装された場合、指定したワークフロー インスタンス状態をメモリに戻します。</span><span class="sxs-lookup"><span data-stu-id="732d1-151">When implemented in a derived class, loads the specified state of the workflow instance back into memory.</span></span></summary>
        <returns><span data-ttu-id="732d1-152">ワークフロー インスタンスのルート アクティビティを表す <see cref="T:System.Workflow.ComponentModel.Activity" />。</span><span class="sxs-lookup"><span data-stu-id="732d1-152">An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the root activity of the workflow instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="732d1-153">アクティビティの完全なコピーを復元する必要があります。</span><span class="sxs-lookup"><span data-stu-id="732d1-153">You must restore an identical copy of the activity.</span></span> <span data-ttu-id="732d1-154">そのためには、データ ストア内のワークフロー インスタンスを表すものから有効な <xref:System.IO.Stream> を復元し、オーバーロードされた <xref:System.IO.Stream> メソッドの 1 つに、この <xref:System.Workflow.ComponentModel.Activity.Load%2A> を渡してワークフロー インスタンス状態を逆シリアル化する必要があります。</span><span class="sxs-lookup"><span data-stu-id="732d1-154">To do this, you must restore a valid <xref:System.IO.Stream> from your representation of the workflow instance in the data store; then you must pass this <xref:System.IO.Stream> to one of the overloaded <xref:System.Workflow.ComponentModel.Activity.Load%2A> methods to deserialize the workflow instance state.</span></span> <span data-ttu-id="732d1-155">永続性サービスは、データ ストアからワークフロー インスタンス状態を読み込めなかった場合に、適切なメッセージを含めた <xref:System.Workflow.Runtime.Hosting.PersistenceException> をスローする必要があります。</span><span class="sxs-lookup"><span data-stu-id="732d1-155">If your persistence service cannot load the workflow instance state from its data store, it should throw a <xref:System.Workflow.Runtime.Hosting.PersistenceException> with an appropriate message.</span></span>  
  
 <span data-ttu-id="732d1-156">ワークフロー ランタイム エンジンは、データ ストアに保存されたワークフロー インスタンス状態へのアクセスを制限するためのロック セマンティクスを実装しています。</span><span class="sxs-lookup"><span data-stu-id="732d1-156">The workflow runtime engine implements locking semantics to restrict access to a workflow instance state that is saved in a data store.</span></span> <span data-ttu-id="732d1-157">これは、複数のプロセスで実行される永続性サービスによって利用されます。</span><span class="sxs-lookup"><span data-stu-id="732d1-157">This can be accessed by persistence services that run in multiple processes.</span></span> <span data-ttu-id="732d1-158">ロック セマンティクスは、2 つの異なるプロセスで実行される永続性サービスが同時に同じワークフロー インスタンスをメモリに読み込むことがないようにするためのものです。</span><span class="sxs-lookup"><span data-stu-id="732d1-158">The locking semantics are designed to prevent persistence services that run in two different processes from loading the same workflow instance into memory at the same time.</span></span> <span data-ttu-id="732d1-159">永続性サービスがサポートする目的の環境のタイプに応じて、この機能をサポートするかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="732d1-159">Depending on the type of environment that your persistence service is designed to support, you may choose whether to support this functionality.</span></span> <span data-ttu-id="732d1-160">ランタイム ロック セマンティクスをサポートすることを選択した場合は、そのワークフロー インスタンス状態が既に別のプロセスによってロックされているときに、<xref:System.Workflow.Runtime.WorkflowOwnershipException> をスローする必要があります。</span><span class="sxs-lookup"><span data-stu-id="732d1-160">If you choose to support the runtime locking semantics, and if this workflow instance state has been previously locked by another process, then you should throw a <xref:System.Workflow.Runtime.WorkflowOwnershipException>.</span></span> <span data-ttu-id="732d1-161">その他の場合は、データ ストア内のワークフロー インスタンス状態へのアクセスをロックする必要があります。</span><span class="sxs-lookup"><span data-stu-id="732d1-161">Otherwise, you should lock access to the workflow instance state in your data store.</span></span> <span data-ttu-id="732d1-162">ワークフロー インスタンス状態のロックを解除するには、<xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A> を呼び出すか、ロック解除パラメーターを <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> に設定して `true` を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="732d1-162">The workflow instance state can be unlocked by a call to <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A> or a call to <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> with the unlock parameter set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="732d1-163">`LoadWorkflowInstanceState` メソッドの実装例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="732d1-163">The following example demonstrates an implementation of the `LoadWorkflowInstanceState` method.</span></span> <span data-ttu-id="732d1-164">この例は、FilePersistenceService.cs ファイルに含まれているカスタム永続性サービスのサンプルです。</span><span class="sxs-lookup"><span data-stu-id="732d1-164">This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file.</span></span> <span data-ttu-id="732d1-165">詳細については、「[カスタム永続性サービスのサンプル](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="732d1-165">For more information, see [Custom Persistence Service Sample](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).</span></span>  
  
 [!code-csharp[WF_Samples#266](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#266)]
 [!code-vb[WF_Samples#266](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#266)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RestoreFromDefaultSerializedForm">
      <MemberSignature Language="C#" Value="protected static System.Workflow.ComponentModel.Activity RestoreFromDefaultSerializedForm (byte[] activityBytes, System.Workflow.ComponentModel.Activity outerActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Workflow.ComponentModel.Activity RestoreFromDefaultSerializedForm(unsigned int8[] activityBytes, class System.Workflow.ComponentModel.Activity outerActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.RestoreFromDefaultSerializedForm(System.Byte[],System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function RestoreFromDefaultSerializedForm (activityBytes As Byte(), outerActivity As Activity) As Activity" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Workflow::ComponentModel::Activity ^ RestoreFromDefaultSerializedForm(cli::array &lt;System::Byte&gt; ^ activityBytes, System::Workflow::ComponentModel::Activity ^ outerActivity);" />
      <MemberSignature Language="F#" Value="static member RestoreFromDefaultSerializedForm : byte[] * System.Workflow.ComponentModel.Activity -&gt; System.Workflow.ComponentModel.Activity" Usage="System.Workflow.Runtime.Hosting.WorkflowPersistenceService.RestoreFromDefaultSerializedForm (activityBytes, outerActivity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activityBytes" Type="System.Byte[]" />
        <Parameter Name="outerActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="activityBytes"><span data-ttu-id="732d1-166">シリアル化された形式の <see cref="T:System.Workflow.ComponentModel.Activity" />。</span><span class="sxs-lookup"><span data-stu-id="732d1-166">The serialized form of <see cref="T:System.Workflow.ComponentModel.Activity" />.</span></span></param>
        <param name="outerActivity"><span data-ttu-id="732d1-167">復元する <see cref="T:System.Workflow.ComponentModel.Activity" /> を含む外側の <see cref="T:System.Workflow.ComponentModel.Activity" />。</span><span class="sxs-lookup"><span data-stu-id="732d1-167">The outer <see cref="T:System.Workflow.ComponentModel.Activity" />, containing the <see cref="T:System.Workflow.ComponentModel.Activity" /> to restore.</span></span></param>
        <summary><span data-ttu-id="732d1-168">シリアル化された形式から <see cref="T:System.Workflow.ComponentModel.Activity" /> を復元します。</span><span class="sxs-lookup"><span data-stu-id="732d1-168">Restores the <see cref="T:System.Workflow.ComponentModel.Activity" /> from its serialized form.</span></span></summary>
        <returns><span data-ttu-id="732d1-169">復元された <see cref="T:System.Workflow.ComponentModel.Activity" />。</span><span class="sxs-lookup"><span data-stu-id="732d1-169">The restored <see cref="T:System.Workflow.ComponentModel.Activity" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="732d1-170">`RestoreFromDefaultSerializedForm` メソッドの実装例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="732d1-170">The following example demonstrates an implementation of the `RestoreFromDefaultSerializedForm` method.</span></span> <span data-ttu-id="732d1-171">この例は、FilePersistenceService.cs ファイルに含まれているカスタム永続性サービスのサンプルです。</span><span class="sxs-lookup"><span data-stu-id="732d1-171">This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file.</span></span> <span data-ttu-id="732d1-172">詳細については、「[カスタム永続性サービスのサンプル](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="732d1-172">For more information, see [Custom Persistence Service Sample](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).</span></span>  
  
 [!code-csharp[WF_Samples#269](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#269)]
 [!code-vb[WF_Samples#269](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#269)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveCompletedContextActivity">
      <MemberSignature Language="C#" Value="protected internal abstract void SaveCompletedContextActivity (System.Workflow.ComponentModel.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void SaveCompletedContextActivity(class System.Workflow.ComponentModel.Activity activity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Sub SaveCompletedContextActivity (activity As Activity)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract void SaveCompletedContextActivity(System::Workflow::ComponentModel::Activity ^ activity);" />
      <MemberSignature Language="F#" Value="abstract member SaveCompletedContextActivity : System.Workflow.ComponentModel.Activity -&gt; unit" Usage="workflowPersistenceService.SaveCompletedContextActivity activity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="activity"><span data-ttu-id="732d1-173">完了したスコープを表す <see cref="T:System.Workflow.ComponentModel.Activity" />。</span><span class="sxs-lookup"><span data-stu-id="732d1-173">An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the completed scope.</span></span></param>
        <summary><span data-ttu-id="732d1-174">派生クラスとして実装された場合、指定した完了スコープをデータ ストアに保存します。</span><span class="sxs-lookup"><span data-stu-id="732d1-174">When implemented in a derived class, saves the specified completed scope to a data store.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="732d1-175">ワークフロー ランタイム エンジンは、補正を実装するために完了スコープのアクティビティの状態を保存します。</span><span class="sxs-lookup"><span data-stu-id="732d1-175">The workflow runtime engine saves the state of completed scope activities in order to implement compensation.</span></span> <span data-ttu-id="732d1-176">オーバーロードされた <xref:System.Workflow.ComponentModel.Activity.Save%2A> メソッドの 1 つを呼び出して、`activity` を <xref:System.IO.Stream> にシリアル化する必要があります。その後、<xref:System.IO.Stream> を追加処理してからデータ ストアに書き込むこともできます。</span><span class="sxs-lookup"><span data-stu-id="732d1-176">You must call one of the overloaded <xref:System.Workflow.ComponentModel.Activity.Save%2A> methods to serialize `activity` into a <xref:System.IO.Stream>; you may then choose to additionally process the <xref:System.IO.Stream> before writing it to your data store.</span></span> <span data-ttu-id="732d1-177">ただし、ワークフロー ランタイム エンジンが <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A> を呼び出したときは、アクティビティの完全なコピーを復元する必要があります。</span><span class="sxs-lookup"><span data-stu-id="732d1-177">However, when the workflow runtime engine calls <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A>, you must restore an identical copy of the activity.</span></span>  
  
 <span data-ttu-id="732d1-178">完了したスコープを、それが囲まれるワークフロー インスタンスに関連付け、ワークフロー インスタンスが完了または終了したときに、データ ストア内のそのスコープを不要とマークすることが可能である必要があります。</span><span class="sxs-lookup"><span data-stu-id="732d1-178">You must be able to associate the completed scope with its enclosing workflow instance to mark the scope as unneeded in your data store when the workflow instance finishes or is terminated.</span></span> <span data-ttu-id="732d1-179">したがって、完了したスコープに関連付けられたワークフロー インスタンスの <xref:System.Guid> も保存する必要があります。これは、<xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> に関連付けられた <xref:System.Workflow.Runtime.WorkflowInstance> の `activity` プロパティから取得できます。</span><span class="sxs-lookup"><span data-stu-id="732d1-179">Therefore, you should also save the <xref:System.Guid> of the workflow instance that is associated with the completed scope; this can be obtained from the <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> property of the <xref:System.Workflow.Runtime.WorkflowInstance> associated with `activity`.</span></span>  
  
 <span data-ttu-id="732d1-180"><xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A> は、完了したスコープの <xref:System.Guid> をパラメーターとして受け取ります。</span><span class="sxs-lookup"><span data-stu-id="732d1-180"><xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A> takes the <xref:System.Guid> of the completed scope as a parameter.</span></span> <span data-ttu-id="732d1-181">したがって、<xref:System.Workflow.ComponentModel.ActivityExecutionContext.ContextGuid%2A> に関連付けられた `activity` プロパティも保存する必要があります。</span><span class="sxs-lookup"><span data-stu-id="732d1-181">Therefore, you must also save the <xref:System.Workflow.ComponentModel.ActivityExecutionContext.ContextGuid%2A> property associated with `activity`.</span></span> <span data-ttu-id="732d1-182">このプロパティは、<xref:System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty> の `activity` フィールドを通じて参照できます。</span><span class="sxs-lookup"><span data-stu-id="732d1-182">This property can be referenced through the <xref:System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty> field of `activity`.</span></span>  
  
 <span data-ttu-id="732d1-183">永続的ストアを使用する永続性サービスを実装する場合は、ワークフロー ランタイム エンジンの内部状態との整合性を維持するために、ワークフロー トランザクション バッチに参加する必要があります。こうすることで、永続的ストアへの実際の書き込みをワークフロー コミット ポイントに達するまで遅らせます。</span><span class="sxs-lookup"><span data-stu-id="732d1-183">If you are implementing a persistence service that uses a durable store, to maintain consistency with the internal state of the workflow runtime engine, you should participate in workflow transaction batching to defer the actual write to your durable store until a workflow commit point.</span></span> <span data-ttu-id="732d1-184">バッチに参加するには、データベースに対する保留中の変更を表す <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A> プロパティに作業項目を追加し、永続性サービスに <xref:System.Workflow.Runtime.IPendingWork> インターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="732d1-184">To participate in batching, add a work item to the <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A> property that represents the pending changes to the database, and implement the <xref:System.Workflow.Runtime.IPendingWork> interface in your persistence service.</span></span>  
  
 <span data-ttu-id="732d1-185">完了したスコープをデータ ストアに保存できなかった場合は、適切なエラー メッセージを含めた <xref:System.Workflow.Runtime.Hosting.PersistenceException> をスローする必要があります。</span><span class="sxs-lookup"><span data-stu-id="732d1-185">If you cannot save the completed scope to your data store, you should throw a <xref:System.Workflow.Runtime.Hosting.PersistenceException> with an appropriate error message.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="732d1-186">`SaveCompletedContextActivity` メソッドの実装例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="732d1-186">The following example demonstrates an implementation of the `SaveCompletedContextActivity` method.</span></span> <span data-ttu-id="732d1-187">この例は、FilePersistenceService.cs ファイルに含まれているカスタム永続性サービスのサンプルです。</span><span class="sxs-lookup"><span data-stu-id="732d1-187">This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file.</span></span> <span data-ttu-id="732d1-188">詳細については、「[カスタム永続性サービスのサンプル](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="732d1-188">For more information, see [Custom Persistence Service Sample](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).</span></span>  
  
 [!code-csharp[WF_Samples#268](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#268)]
 [!code-vb[WF_Samples#268](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#268)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveWorkflowInstanceState">
      <MemberSignature Language="C#" Value="protected internal abstract void SaveWorkflowInstanceState (System.Workflow.ComponentModel.Activity rootActivity, bool unlock);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void SaveWorkflowInstanceState(class System.Workflow.ComponentModel.Activity rootActivity, bool unlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState(System.Workflow.ComponentModel.Activity,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Sub SaveWorkflowInstanceState (rootActivity As Activity, unlock As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract void SaveWorkflowInstanceState(System::Workflow::ComponentModel::Activity ^ rootActivity, bool unlock);" />
      <MemberSignature Language="F#" Value="abstract member SaveWorkflowInstanceState : System.Workflow.ComponentModel.Activity * bool -&gt; unit" Usage="workflowPersistenceService.SaveWorkflowInstanceState (rootActivity, unlock)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootActivity" Type="System.Workflow.ComponentModel.Activity" />
        <Parameter Name="unlock" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rootActivity"><span data-ttu-id="732d1-189">ワークフロー インスタンスのルート アクティビティ。</span><span class="sxs-lookup"><span data-stu-id="732d1-189">The root activity of the workflow instance.</span></span></param>
        <param name="unlock"><span data-ttu-id="732d1-190">ワークフロー インスタンスをロックしない場合は <see langword="true" />、ロックする場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="732d1-190"><see langword="true" /> if the workflow instance should not be locked; <see langword="false" /> if the workflow instance should be locked.</span></span></param>
        <summary><span data-ttu-id="732d1-191">派生クラスとして実装された場合、ワークフロー インスタンス状態をデータ ストアに保存します。</span><span class="sxs-lookup"><span data-stu-id="732d1-191">When implemented in a derived class, saves the workflow instance state to a data store.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="732d1-192">オーバーロードされた <xref:System.Workflow.ComponentModel.Activity.Save%2A> メソッドの 1 つを呼び出し、`rootActivity` を <xref:System.IO.Stream> にシリアル化する必要があります。</span><span class="sxs-lookup"><span data-stu-id="732d1-192">You must call one of the overloaded <xref:System.Workflow.ComponentModel.Activity.Save%2A> methods to serialize `rootActivity` into a <xref:System.IO.Stream>.</span></span> <span data-ttu-id="732d1-193">その後、<xref:System.IO.Stream> を追加処理してからデータ ストアに書き込むこともできます。</span><span class="sxs-lookup"><span data-stu-id="732d1-193">You can then choose to additionally process the <xref:System.IO.Stream> before writing it to your data store.</span></span> <span data-ttu-id="732d1-194">ただし、ワークフロー ランタイム エンジンが <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A> を呼び出したときは、ルート アクティビティの完全なコピーを復元する必要があります。</span><span class="sxs-lookup"><span data-stu-id="732d1-194">However, when the workflow runtime engine calls <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A>, you must restore an identical copy of the root activity.</span></span> <span data-ttu-id="732d1-195">ワークフロー インスタンス状態をデータ ストアに保存できなかった場合は、適切なエラー メッセージを含めた <xref:System.Workflow.Runtime.Hosting.PersistenceException> をスローする必要があります。</span><span class="sxs-lookup"><span data-stu-id="732d1-195">If you cannot save the workflow instance state to your data store, you should throw a <xref:System.Workflow.Runtime.Hosting.PersistenceException> with an appropriate error message.</span></span>  
  
 <span data-ttu-id="732d1-196">ワークフロー ランタイム エンジンは、データ ストアに保存されたワークフロー インスタンス状態へのアクセスを制限するためのロック セマンティクスを提供します。</span><span class="sxs-lookup"><span data-stu-id="732d1-196">The workflow runtime engine provides locking semantics to restrict access to a workflow instance state that is saved in the data store.</span></span> <span data-ttu-id="732d1-197">これは、複数のホストで実行される、同じデータ ストアを指す永続性サービスによって利用されます。</span><span class="sxs-lookup"><span data-stu-id="732d1-197">This can be accessed by the persistence services running in multiple hosts and pointing to the same data store.</span></span> <span data-ttu-id="732d1-198">ロック セマンティクスは、2 つの異なるワークフロー ランタイムで実行される永続性サービスが同時に同じワークフロー インスタンスをメモリに読み込むことを防ぐように設計されています。</span><span class="sxs-lookup"><span data-stu-id="732d1-198">The locking semantics are designed to prevent persistence services that run in two different workflow runtimes from loading the same workflow instance into memory at the same time.</span></span> <span data-ttu-id="732d1-199">永続性サービスがサポートする目的の環境のタイプに応じて、この機能をサポートするかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="732d1-199">Depending on the type of environment your persistence service is designed to support, you can choose whether to support this functionality.</span></span> <span data-ttu-id="732d1-200">ランタイム ロック セマンティクスをサポートすることにした場合、永続性サービスが保存しようとしているワークフロー インスタンス状態が別の永続性サービスによって既にロックされているときは、<xref:System.Workflow.Runtime.WorkflowOwnershipException> をスローする必要があります。</span><span class="sxs-lookup"><span data-stu-id="732d1-200">If you choose to support the runtime locking semantics, then, if a persistence service tries to save a workflow instance state that has been previously locked by another persistence service, you should throw a <xref:System.Workflow.Runtime.WorkflowOwnershipException>.</span></span> <span data-ttu-id="732d1-201">`unlock` を `true` にした場合、ワークフロー インスタンス状態を保存した後、保存したワークフロー インスタンス状態へのアクセスのロックを解除する必要があります。</span><span class="sxs-lookup"><span data-stu-id="732d1-201">If `unlock` is `true`, you should unlock access to the workflow instance state after you save it.</span></span>  
  
 <span data-ttu-id="732d1-202"><xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A> は、ワークフロー インスタンスの <xref:System.Guid> をパラメーターとして受け取ります。</span><span class="sxs-lookup"><span data-stu-id="732d1-202"><xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A> takes the <xref:System.Guid> of the workflow instance as a parameter.</span></span> <span data-ttu-id="732d1-203">したがって、この <xref:System.Guid> を保存する必要があります。</span><span class="sxs-lookup"><span data-stu-id="732d1-203">Therefore, you should save this <xref:System.Guid>.</span></span> <span data-ttu-id="732d1-204">また、この <xref:System.Guid> を使用して、ワークフロー インスタンスを、保存されたその完了スコープの状態に関連付けることができます。</span><span class="sxs-lookup"><span data-stu-id="732d1-204">You can also use this <xref:System.Guid> to associate the workflow instance with the saved states of its completed scopes.</span></span> <span data-ttu-id="732d1-205">この操作は必須です。これは、ワークフロー インスタンスが完了したときに、このような完了スコープを不要とマークすることが可能である必要があるためです。</span><span class="sxs-lookup"><span data-stu-id="732d1-205">You must do this because you must be able to mark these completed scopes as unneeded when the workflow instance completes.</span></span>  
  
 <span data-ttu-id="732d1-206">ワークフロー インスタンスが完了または終了した最終的な時点で、ワークフロー ランタイム エンジンは <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="732d1-206">The workflow runtime engine calls <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> a final time when the workflow instance is completed or terminated.</span></span> <span data-ttu-id="732d1-207">したがって、<xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus%2A> で <xref:System.Workflow.Runtime.WorkflowStatus.Completed> または <xref:System.Workflow.Runtime.WorkflowStatus.Terminated> になった場合は、ワークフロー インスタンスとそれに関連付けられたすべての完了スコープを、データ ストアから安全に削除できます。</span><span class="sxs-lookup"><span data-stu-id="732d1-207">Therefore, if <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus%2A> is equal to <xref:System.Workflow.Runtime.WorkflowStatus.Completed> or <xref:System.Workflow.Runtime.WorkflowStatus.Terminated>, you can safely delete the workflow instance and all its associated completed scopes from your data store.</span></span> <span data-ttu-id="732d1-208">あるいは、<xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted> イベントまたは <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> イベントに定期受信することによって、ワークフロー インスタンスに関連付けられたレコードを安全に削除できるタイミングを判断することもできます。</span><span class="sxs-lookup"><span data-stu-id="732d1-208">Alternatively, you can subscribe to the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted> or <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> events to determine when it is safe to delete records associated with the workflow instance.</span></span> <span data-ttu-id="732d1-209">データ ストアからレコードを実際に削除するかどうかは、実装に依存します。</span><span class="sxs-lookup"><span data-stu-id="732d1-209">Whether you actually delete the records from your data store depends on your implementation.</span></span>  
  
 <span data-ttu-id="732d1-210">永続的ストアを使用する永続性サービスを実装する場合は、ワークフロー ランタイム エンジンの内部状態との整合性を維持するために、ワークフロー トランザクション バッチに参加する必要があります。こうすることで、永続的ストアへの実際の書き込みをワークフロー コミット ポイントに達するまで遅らせます。</span><span class="sxs-lookup"><span data-stu-id="732d1-210">If you implement a persistence service that uses a durable store, then, to maintain consistency with the internal state of the workflow runtime engine, you should participate in workflow transaction batching to defer the actual write to your durable store until a workflow commit point.</span></span> <span data-ttu-id="732d1-211">バッチに参加するには、永続的ストアに対する保留中の変更を表す作業項目を <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A> プロパティに追加し、永続性サービスに <xref:System.Workflow.Runtime.IPendingWork> インターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="732d1-211">To participate in batching, add a work item that represents the pending changes to your durable store to the <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A> property, and implement the <xref:System.Workflow.Runtime.IPendingWork> interface in your persistence service.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="732d1-212">`SaveWorkflowInstanceState` メソッドの実装例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="732d1-212">The following example demonstrates an implementation of the `SaveWorkflowInstanceState` method.</span></span> <span data-ttu-id="732d1-213">この例は、FilePersistenceService.cs ファイルに含まれているカスタム永続性サービスのサンプルです。</span><span class="sxs-lookup"><span data-stu-id="732d1-213">This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file.</span></span> <span data-ttu-id="732d1-214">詳細については、「[カスタム永続性サービスのサンプル](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="732d1-214">For more information, see [Custom Persistence Service Sample](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).</span></span>  
  
 [!code-csharp[WF_Samples#264](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#264)]
 [!code-vb[WF_Samples#264](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#264)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnloadOnIdle">
      <MemberSignature Language="C#" Value="protected internal abstract bool UnloadOnIdle (System.Workflow.ComponentModel.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool UnloadOnIdle(class System.Workflow.ComponentModel.Activity activity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnloadOnIdle(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Function UnloadOnIdle (activity As Activity) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract bool UnloadOnIdle(System::Workflow::ComponentModel::Activity ^ activity);" />
      <MemberSignature Language="F#" Value="abstract member UnloadOnIdle : System.Workflow.ComponentModel.Activity -&gt; bool" Usage="workflowPersistenceService.UnloadOnIdle activity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="activity"><span data-ttu-id="732d1-215">完了したスコープを表す <see cref="T:System.Workflow.ComponentModel.Activity" />。</span><span class="sxs-lookup"><span data-stu-id="732d1-215">An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the completed scope.</span></span></param>
        <summary><span data-ttu-id="732d1-216">アイドル状態になったワークフローがアンロードされるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="732d1-216">Determines whether a workflow should be unloaded when idle.</span></span></summary>
        <returns><span data-ttu-id="732d1-217"><see langword="true" /> の場合、ワークフロー ランタイム エンジンは、指定したワークフローがアイドル状態になると、そのワークフローをアンロードします。</span><span class="sxs-lookup"><span data-stu-id="732d1-217">If <see langword="true" />, the workflow runtime engine unloads the specified workflow when it becomes idle.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="732d1-218">`UnloadOnIdle` メソッドの実装例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="732d1-218">The following example demonstrates an implementation of the `UnloadOnIdle` method.</span></span> <span data-ttu-id="732d1-219">この例は、FilePersistenceService.cs ファイルに含まれているカスタム永続性サービスのサンプルです。</span><span class="sxs-lookup"><span data-stu-id="732d1-219">This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file.</span></span> <span data-ttu-id="732d1-220">詳細については、「[カスタム永続性サービスのサンプル](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="732d1-220">For more information, see [Custom Persistence Service Sample](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).</span></span>  
  
 [!code-csharp[WF_Samples#270](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#270)]
 [!code-vb[WF_Samples#270](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#270)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnlockWorkflowInstanceState">
      <MemberSignature Language="C#" Value="protected internal abstract void UnlockWorkflowInstanceState (System.Workflow.ComponentModel.Activity rootActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void UnlockWorkflowInstanceState(class System.Workflow.ComponentModel.Activity rootActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Sub UnlockWorkflowInstanceState (rootActivity As Activity)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract void UnlockWorkflowInstanceState(System::Workflow::ComponentModel::Activity ^ rootActivity);" />
      <MemberSignature Language="F#" Value="abstract member UnlockWorkflowInstanceState : System.Workflow.ComponentModel.Activity -&gt; unit" Usage="workflowPersistenceService.UnlockWorkflowInstanceState rootActivity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="rootActivity"><span data-ttu-id="732d1-221">ワークフロー インスタンスのルート アクティビティ。</span><span class="sxs-lookup"><span data-stu-id="732d1-221">The root activity of the workflow instance.</span></span></param>
        <summary><span data-ttu-id="732d1-222">派生クラスでオーバーライドされると、ワークフロー インスタンス状態のロックを解除します。</span><span class="sxs-lookup"><span data-stu-id="732d1-222">When overridden in a derived class, unlocks the workflow instance state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="732d1-223">このメソッドは抽象メソッドであるため、ロックおよびロック解除に関する既定の実装を含んでいません。</span><span class="sxs-lookup"><span data-stu-id="732d1-223">This method is abstract, so it does not contain a default implementation on locking and unlocking.</span></span>  
  
 <span data-ttu-id="732d1-224">カスタム永続性サービスの実装では、ロック スキームを実装する場合は、このメソッドをオーバーライドし、ロック解除パラメーターの値に基づいて、<xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> メソッドのロック/ロック解除機構を提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="732d1-224">While implementing a custom persistence service, if you want to implement a locking scheme you will need to override this method and provide a locking-unlocking mechanism in the <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> method based on the value of the unlock parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="732d1-225">`UnlockWorkflowInstanceState` メソッドの実装例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="732d1-225">The following example demonstrates an implementation of the `UnlockWorkflowInstanceState` method.</span></span> <span data-ttu-id="732d1-226">この例は、FilePersistenceService.cs ファイルに含まれているカスタム永続性サービスのサンプルです。</span><span class="sxs-lookup"><span data-stu-id="732d1-226">This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file.</span></span> <span data-ttu-id="732d1-227">詳細については、「[カスタム永続性サービスのサンプル](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="732d1-227">For more information, see [Custom Persistence Service Sample](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).</span></span>  
  
 [!code-csharp[WF_Samples#267](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#267)]
 [!code-vb[WF_Samples#267](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#267)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
