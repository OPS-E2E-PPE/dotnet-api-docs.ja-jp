<Type Name="IEnlistmentNotification" FullName="System.Transactions.IEnlistmentNotification">
  <Metadata><Meta Name="ms.openlocfilehash" Value="16ecff6e491b37458e455bfc9b15800cbfba9cf7" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83963227" /></Metadata><TypeSignature Language="C#" Value="public interface IEnlistmentNotification" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnlistmentNotification" />
  <TypeSignature Language="DocId" Value="T:System.Transactions.IEnlistmentNotification" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnlistmentNotification" />
  <TypeSignature Language="C++ CLI" Value="public interface class IEnlistmentNotification" />
  <TypeSignature Language="F#" Value="type IEnlistmentNotification = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Transactions</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Transactions.Local</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Transactions.Local" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Interfaces />
  <Docs>
    <summary>リソース マネージャーが参加の登録時にトランザクション マネージャーに対して 2 フェーズ コミット通知コールバックを提供するために実装する必要があるインターフェイスについて説明します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 リソースマネージャーをトランザクションに参加させるには、トランザクションマネージャーを使用してトランザクションに参加する必要があります。 <xref:System.Transactions.Transaction> クラスは、この機能を提供する一連のメソッドを定義しています。これらのメソッドの名前は `Enlist` で始まります。 さまざまな `Enlist` メソッドは、リソース マネージャーが持つ各種の参加リストにそれぞれ対応しています。  
  
 このクラスは、参加の登録時にトランザクションマネージャーに対して2フェーズコミット通知コールバックを提供するために、リソースマネージャーが実装する必要のあるインターフェイスを表します。 リソースマネージャーが <xref:System.Transactions.IEnlistmentNotification> インターフェイスを実装するたびに、リソースが揮発性であるか永続であるかに応じて、<xref:System.Transactions.Transaction.EnlistVolatile%2A> メソッド、または <xref:System.Transactions.Transaction> クラスの <xref:System.Transactions.Transaction.EnlistDurable%2A> メソッドを使用して、そのインターフェイスを参加させる必要があります。 参加リストと2PC の詳細については、「[トランザクション内の参加要素としてのリソースの参加](/dotnet/framework/data/transactions/enlisting-resources-as-participants-in-a-transaction)」と「[単一フェーズと複数フェーズでのトランザクションのコミット](/dotnet/framework/data/transactions/committing-a-transaction-in-single-phase-and-multi-phase)」を参照してください。  
  
 トランザクションマネージャーは、次のメソッドによって、2フェーズコミットプロトコルの異なるフェーズで参加オブジェクトに通知します。  
  
|方法|説明|  
|------------|-----------------|  
|<xref:System.Transactions.IEnlistmentNotification.Prepare%2A>|参加しているオブジェクトのこのメソッドは、トランザクションの最初のフェーズでトランザクションマネージャーによってコールバックとして使用されます。トランザクションマネージャーは、トランザクションをコミットできるかどうかを参加者に要求します。|  
|<xref:System.Transactions.IEnlistmentNotification.Commit%2A>|参加しているオブジェクトのこのメソッドは、トランザクションがコミットされた場合にトランザクションの2番目のフェーズでトランザクションマネージャーによってコールバックとして使用されます。|  
|<xref:System.Transactions.IEnlistmentNotification.Rollback%2A>|参加しているオブジェクトのこのメソッドは、トランザクションが中止された場合 (ロールバックされた場合) に、トランザクションマネージャーによってトランザクションマネージャーによってコールバックとして使用されます。|  
|<xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>|参加しているオブジェクトのこのメソッドは、トランザクションがインダウトの場合、トランザクションの2番目のフェーズでトランザクションマネージャーによってコールバックとして使用されます。|  
  
> [!NOTE]
>  通知は、順番に、または特定の順序で送信されないことに注意してください。  
  
   
  
## Examples  
 次の例は、このインターフェイスの実装と、<xref:System.Transactions.Transaction.EnlistVolatile%2A> メソッドを使用して、オブジェクトをトランザクションの参加要素として参加させる方法を示しています。  
  
 [!code-csharp[Tx_Enlist#1](~/samples/snippets/csharp/VS_Snippets_CFX/tx_enlist/cs/enlist.cs#1)]
 [!code-vb[Tx_Enlist#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/tx_enlist/vb/enlist.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Transactions.ISinglePhaseNotification" />
    <related type="Article" href="https://msdn.microsoft.com/library/786a12c2-d530-49f4-9c59-5c973e15a11d">トランザクションの参加要素としてのリソースの参加</related>
    <related type="Article" href="https://msdn.microsoft.com/library/694ea153-e4db-41ae-96ac-9ac66dcb69a9">単一フェースおよび複数フェーズでのトランザクションのコミット</related>
  </Docs>
  <Members>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public void Commit (System.Transactions.Enlistment enlistment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Commit(class System.Transactions.Enlistment enlistment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.IEnlistmentNotification.Commit(System.Transactions.Enlistment)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Commit (enlistment As Enlistment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Commit(System::Transactions::Enlistment ^ enlistment);" />
      <MemberSignature Language="F#" Value="abstract member Commit : System.Transactions.Enlistment -&gt; unit" Usage="iEnlistmentNotification.Commit enlistment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enlistment" Type="System.Transactions.Enlistment" />
      </Parameters>
      <Docs>
        <param name="enlistment">トランザクション マネージャーに対して応答を送信するために使用する <see cref="T:System.Transactions.Enlistment" /> オブジェクト。</param>
        <summary>トランザクションのコミット中であることを参加オブジェクトに通知します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 トランザクションマネージャーは、コミットメントの2番目のフェーズで、すべての参加要素がトランザクションをコミットするように指示するときに、このメソッドを呼び出します。  
  
 リソースマネージャーは、トランザクションを完了するために必要な作業を実行し、`enlistment` パラメーターの <xref:System.Transactions.Enlistment.Done%2A> メソッドを呼び出すことによって、その処理が完了したことを TM に通知する必要があります。  
  
 リソースマネージャーが永続的にを参加させても、<xref:System.Transactions.Enlistment.Done%2A> メソッドを呼び出すことによって応答しない場合、トランザクションマネージャーは、リソースマネージャーが <xref:System.Transactions.IEnlistmentNotification.Commit%2A> 呼び出しを受信したことを認識できません。 そのため、トランザクションマネージャーは応答を待機し続け、このトランザクションに関連する情報を保持します。  <xref:System.Transactions.Enlistment.Done%2A> が呼び出されない場合、この情報はメモリ内またはシステム全体のリソース内で無期限に保持されます。 これにより、リソースを再利用できなくなります。 分散トランザクションの場合、msdtc ログが最終的にいっぱいになり、MSDTC プロセスが停止する可能性があります。 <xref:System.Transactions>によって管理されるトランザクションの場合、これにより、リソースマネージャーのプロセスのメモリ消費量が徐々に増加し続けます。 そのため、リソースマネージャーで準備作業を行った後に、<xref:System.Transactions.Enlistment.Done%2A> メソッドを呼び出すことが重要です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InDoubt">
      <MemberSignature Language="C#" Value="public void InDoubt (System.Transactions.Enlistment enlistment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InDoubt(class System.Transactions.Enlistment enlistment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.IEnlistmentNotification.InDoubt(System.Transactions.Enlistment)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InDoubt (enlistment As Enlistment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InDoubt(System::Transactions::Enlistment ^ enlistment);" />
      <MemberSignature Language="F#" Value="abstract member InDoubt : System.Transactions.Enlistment -&gt; unit" Usage="iEnlistmentNotification.InDoubt enlistment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enlistment" Type="System.Transactions.Enlistment" />
      </Parameters>
      <Docs>
        <param name="enlistment">トランザクション マネージャーに対して応答を送信するために使用する <see cref="T:System.Transactions.Enlistment" /> オブジェクト。</param>
        <summary>トランザクションのステータスが未決定であることを参加オブジェクトに通知します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、トランザクションマネージャーが1つの永続リソースに対して単一フェーズコミット操作を呼び出し、その後、トランザクション結果を取得する前に、永続リソースへの接続が失われた場合に、揮発性リソースに対して呼び出されます。 その時点では、トランザクションの結果を安全に特定できません。  
  
 <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> はトランザクションの最終状態と見なされるため、<xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>を呼び出した後 <xref:System.Transactions.IEnlistmentNotification.Commit%2A> または <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> を呼び出さないでください。  
  
> [!NOTE]
>  揮発性リソースに対してこのメソッドを実装する場合は、影響を受けるデータに対して認識されている回復またはコンテインメント操作を実行する必要があります。  また、`enlistment` パラメーターの処理が完了したら、で <xref:System.Transactions.Enlistment.Done%2A> メソッドを呼び出す必要があります。  
  
 リソースマネージャーが永続的にを参加させても、<xref:System.Transactions.Enlistment.Done%2A> メソッドを呼び出すことによって応答しない場合、トランザクションマネージャーは、リソースマネージャーが <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> 呼び出しを受信したことを認識できません。 そのため、トランザクションマネージャーは応答を待機し続け、このトランザクションに関連する情報を保持します。  <xref:System.Transactions.Enlistment.Done%2A> が呼び出されない場合、この情報はメモリ内またはシステム全体のリソース内で無期限に保持されます。 これにより、リソースを再利用できなくなります。 分散トランザクションの場合、msdtc ログが最終的にいっぱいになり、MSDTC プロセスが停止する可能性があります。 <xref:System.Transactions>によって管理されるトランザクションの場合、これにより、リソースマネージャーのプロセスのメモリ消費量が徐々に増加し続けます。 そのため、リソースマネージャーで準備作業を行った後に、<xref:System.Transactions.Enlistment.Done%2A> メソッドを呼び出すことが重要です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prepare">
      <MemberSignature Language="C#" Value="public void Prepare (System.Transactions.PreparingEnlistment preparingEnlistment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Prepare(class System.Transactions.PreparingEnlistment preparingEnlistment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.IEnlistmentNotification.Prepare(System.Transactions.PreparingEnlistment)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Prepare (preparingEnlistment As PreparingEnlistment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Prepare(System::Transactions::PreparingEnlistment ^ preparingEnlistment);" />
      <MemberSignature Language="F#" Value="abstract member Prepare : System.Transactions.PreparingEnlistment -&gt; unit" Usage="iEnlistmentNotification.Prepare preparingEnlistment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="preparingEnlistment" Type="System.Transactions.PreparingEnlistment" />
      </Parameters>
      <Docs>
        <param name="preparingEnlistment">トランザクション マネージャーに応答を送信するために使用する <see cref="T:System.Transactions.PreparingEnlistment" /> オブジェクト。</param>
        <summary>トランザクションのコミットの準備中であることを参加オブジェクトに通知します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 トランザクションマネージャーは、コミットメントのフェーズ1で、トランザクションをコミットできるかどうかを参加者に確認するときに、参加しているリソースマネージャーのこのメソッドを呼び出します。  
  
 持続性のあるリソースマネージャーを実装する場合は、このフェーズで準備レコードをログに記録する必要があります。 このレコードには、回復を実行するために必要なすべての情報が含まれている必要があります。 これには、復旧時に <xref:System.Transactions.TransactionManager.Reenlist%2A> メソッドでトランザクションマネージャーに渡される <xref:System.Transactions.PreparingEnlistment.RecoveryInformation%2A> プロパティが含まれます。 回復の詳細については、「[回復の実行](https://msdn.microsoft.com/library/d342c5c7-da64-4a4c-8e63-b52f4fbf2691)」を参照してください。  
  
 リソースマネージャーは、`preparingEnlistment` パラメーターの <xref:System.Transactions.PreparingEnlistment.Prepared%2A> メソッドを呼び出してコミットメントの投票を示す前に、完了する必要があるすべての作業を完了する必要があります。 コミット、ロールバック、または不明なフェーズ2の通知を受け取る前に、これが確実に実行されるようにする必要があります。 フェーズ2の通知は、フェーズ1で <xref:System.Transactions.PreparingEnlistment.Prepared%2A> メソッドを呼び出したのと同じスレッドでインラインで発生する可能性があるためです。 このため、フェーズ 2 の通知を受け取る前に既に完了したと考えられる作業 (ロックの解除など) は、<xref:System.Transactions.PreparingEnlistment.Prepared%2A> 呼び出しの後には実行できません。  
  
 `preparingEnlistment` パラメーターのメソッドを呼び出して、ロールバックの投票を示すこともできます。  
  
 オブジェクトがトランザクションの進行状況を単に観察して対処する必要がある場合は、このメソッドの実装で、作業が完了したときに `preparingEnlistment` パラメーターの <xref:System.Transactions.Enlistment.Done%2A> メソッドを呼び出す必要があります。 これにより、リソースマネージャーはフェーズ2の通知を受け取りません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public void Rollback (System.Transactions.Enlistment enlistment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Rollback(class System.Transactions.Enlistment enlistment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.IEnlistmentNotification.Rollback(System.Transactions.Enlistment)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rollback (enlistment As Enlistment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Rollback(System::Transactions::Enlistment ^ enlistment);" />
      <MemberSignature Language="F#" Value="abstract member Rollback : System.Transactions.Enlistment -&gt; unit" Usage="iEnlistmentNotification.Rollback enlistment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enlistment" Type="System.Transactions.Enlistment" />
      </Parameters>
      <Docs>
        <param name="enlistment">トランザクション マネージャーに応答を送信するために使用する <see cref="T:System.Transactions.Enlistment" /> オブジェクト。</param>
        <summary>トランザクションのロールバック (中止) 中であることを参加オブジェクトに通知します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 トランザクションをコミットするのに1つ以上のトランザクションの参加要素がないためにトランザクションがロールバック (中止) されるときに、トランザクションマネージャーは、参加しているオブジェクトのこのメソッドを呼び出します。  
  
 リソースマネージャーは、トランザクションを完了するために必要な作業を実行し、`enlistment` パラメーターの <xref:System.Transactions.Enlistment.Done%2A> メソッドを呼び出すことによって、その処理が完了したことを TM に通知する必要があります。  
  
 リソースマネージャーが永続的にを参加させても、<xref:System.Transactions.Enlistment.Done%2A> メソッドを呼び出すことによって応答しない場合、トランザクションマネージャーは、リソースマネージャーが <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> 呼び出しを受信したことを認識できません。 そのため、トランザクションマネージャーは応答を待機し続け、このトランザクションに関連する情報を保持します。  <xref:System.Transactions.Enlistment.Done%2A> が呼び出されない場合、この情報はメモリ内またはシステム全体のリソース内で無期限に保持されます。 これにより、リソースを再利用できなくなります。 分散トランザクションの場合、msdtc ログが最終的にいっぱいになり、MSDTC プロセスが停止する可能性があります。 <xref:System.Transactions>によって管理されるトランザクションの場合、これにより、リソースマネージャーのプロセスのメモリ消費量が徐々に増加し続けます。 そのため、リソースマネージャーで準備作業を行った後に、<xref:System.Transactions.Enlistment.Done%2A> メソッドを呼び出すことが重要です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
