<Type Name="IEnlistmentNotification" FullName="System.Transactions.IEnlistmentNotification">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6a5956f235013aa410c603ab941ca11ded8c4b13" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83451063" /></Metadata><TypeSignature Language="C#" Value="public interface IEnlistmentNotification" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnlistmentNotification" />
  <TypeSignature Language="DocId" Value="T:System.Transactions.IEnlistmentNotification" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnlistmentNotification" />
  <TypeSignature Language="C++ CLI" Value="public interface class IEnlistmentNotification" />
  <TypeSignature Language="F#" Value="type IEnlistmentNotification = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Transactions</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Transactions.Local</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Transactions.Local" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="d76fc-101">リソース マネージャーが参加の登録時にトランザクション マネージャーに対して 2 フェーズ コミット通知コールバックを提供するために実装する必要があるインターフェイスについて説明します。</span><span class="sxs-lookup"><span data-stu-id="d76fc-101">Describes an interface that a resource manager should implement to provide two phase commit notification callbacks for the transaction manager upon enlisting for participation.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d76fc-102">リソースマネージャーをトランザクションに参加させるには、トランザクションマネージャーを使用してトランザクションに参加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d76fc-102">In order for a resource manager to participate in a transaction, it must enlist in the transaction through the transaction manager.</span></span> <span data-ttu-id="d76fc-103"><xref:System.Transactions.Transaction> クラスは、この機能を提供する一連のメソッドを定義しています。これらのメソッドの名前は `Enlist` で始まります。</span><span class="sxs-lookup"><span data-stu-id="d76fc-103">The <xref:System.Transactions.Transaction> class defines a set of methods whose names begin with `Enlist` that provide this functionality.</span></span> <span data-ttu-id="d76fc-104">さまざまな `Enlist` メソッドは、リソース マネージャーが持つ各種の参加リストにそれぞれ対応しています。</span><span class="sxs-lookup"><span data-stu-id="d76fc-104">The different `Enlist` methods correspond to the different types of enlistment that a resource manager may have.</span></span>  
  
 <span data-ttu-id="d76fc-105">このクラスは、参加の登録時にトランザクションマネージャーに対して2フェーズコミット通知コールバックを提供するために、リソースマネージャーが実装する必要のあるインターフェイスを表します。</span><span class="sxs-lookup"><span data-stu-id="d76fc-105">This class describes an interface that a resource manager should implement to provide two phase commit notification callbacks for the transaction manager upon enlisting for participation.</span></span> <span data-ttu-id="d76fc-106">リソースマネージャーが <xref:System.Transactions.IEnlistmentNotification> インターフェイスを実装するたびに、リソースが揮発性であるか永続であるかに応じて、<xref:System.Transactions.Transaction.EnlistVolatile%2A> メソッド、または <xref:System.Transactions.Transaction> クラスの <xref:System.Transactions.Transaction.EnlistDurable%2A> メソッドを使用して、そのインターフェイスを参加させる必要があります。</span><span class="sxs-lookup"><span data-stu-id="d76fc-106">For each resource manager's implementation of the <xref:System.Transactions.IEnlistmentNotification> interface, you should enlist it using the <xref:System.Transactions.Transaction.EnlistVolatile%2A> method or the <xref:System.Transactions.Transaction.EnlistDurable%2A> method of the <xref:System.Transactions.Transaction> class, depending on whether your resource is volatile or durable.</span></span> <span data-ttu-id="d76fc-107">参加リストと2PC の詳細については、「[トランザクション内の参加要素としてのリソースの参加](~/docs/framework/data/transactions/enlisting-resources-as-participants-in-a-transaction.md)」と「[単一フェーズと複数フェーズでのトランザクションのコミット](~/docs/framework/data/transactions/committing-a-transaction-in-single-phase-and-multi-phase.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d76fc-107">For more information on enlistment and 2PC, see [Enlisting Resources as Participants in a Transaction](~/docs/framework/data/transactions/enlisting-resources-as-participants-in-a-transaction.md) and [Committing a Transaction in Single-Phase and Multi-Phase](~/docs/framework/data/transactions/committing-a-transaction-in-single-phase-and-multi-phase.md) respectively.</span></span>  
  
 <span data-ttu-id="d76fc-108">トランザクションマネージャーは、次のメソッドによって、2フェーズコミットプロトコルの異なるフェーズで参加オブジェクトに通知します。</span><span class="sxs-lookup"><span data-stu-id="d76fc-108">The transaction manager notifies the enlisted object at different phases of the Two Phase Commit Protocol by the following methods.</span></span>  
  
|<span data-ttu-id="d76fc-109">方法</span><span class="sxs-lookup"><span data-stu-id="d76fc-109">Method</span></span>|<span data-ttu-id="d76fc-110">説明</span><span class="sxs-lookup"><span data-stu-id="d76fc-110">Description</span></span>|  
|------------|-----------------|  
|<xref:System.Transactions.IEnlistmentNotification.Prepare%2A>|<span data-ttu-id="d76fc-111">参加しているオブジェクトのこのメソッドは、トランザクションの最初のフェーズでトランザクションマネージャーによってコールバックとして使用されます。トランザクションマネージャーは、トランザクションをコミットできるかどうかを参加者に要求します。</span><span class="sxs-lookup"><span data-stu-id="d76fc-111">This method of an enlisted object is used as a callback by the Transaction Manager during the first phase of a transaction, when the transaction manager asks participants whether they can commit the transaction.</span></span>|  
|<xref:System.Transactions.IEnlistmentNotification.Commit%2A>|<span data-ttu-id="d76fc-112">参加しているオブジェクトのこのメソッドは、トランザクションがコミットされた場合にトランザクションの2番目のフェーズでトランザクションマネージャーによってコールバックとして使用されます。</span><span class="sxs-lookup"><span data-stu-id="d76fc-112">This method of an enlisted object is used as a callback by the Transaction Manager during the second phase of a transaction if the transaction is committed.</span></span>|  
|<xref:System.Transactions.IEnlistmentNotification.Rollback%2A>|<span data-ttu-id="d76fc-113">参加しているオブジェクトのこのメソッドは、トランザクションが中止された場合 (ロールバックされた場合) に、トランザクションマネージャーによってトランザクションマネージャーによってコールバックとして使用されます。</span><span class="sxs-lookup"><span data-stu-id="d76fc-113">This method of an enlisted object is used as a callback by the Transaction Manager during the second phase of a transaction if the transaction is aborted (that is, rolled back).</span></span>|  
|<xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>|<span data-ttu-id="d76fc-114">参加しているオブジェクトのこのメソッドは、トランザクションがインダウトの場合、トランザクションの2番目のフェーズでトランザクションマネージャーによってコールバックとして使用されます。</span><span class="sxs-lookup"><span data-stu-id="d76fc-114">This method of an enlisted object is used as a callback by the Transaction Manager during the second phase of a transaction if the transaction is in doubt.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="d76fc-115">通知は、順番に、または特定の順序で送信されないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d76fc-115">You should be aware that notifications might not be sent sequentially, or in a particular order.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d76fc-116">次の例は、このインターフェイスの実装と、<xref:System.Transactions.Transaction.EnlistVolatile%2A> メソッドを使用して、オブジェクトをトランザクションの参加要素として参加させる方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="d76fc-116">The following example shows an implementation of this interface, as well as enlisting the object as a participant in a transaction using the <xref:System.Transactions.Transaction.EnlistVolatile%2A> method.</span></span>  
  
 [!code-csharp[Tx_Enlist#1](~/samples/snippets/csharp/VS_Snippets_CFX/tx_enlist/cs/enlist.cs#1)]
 [!code-vb[Tx_Enlist#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/tx_enlist/vb/enlist.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Transactions.ISinglePhaseNotification" />
    <related type="Article" href="https://msdn.microsoft.com/library/786a12c2-d530-49f4-9c59-5c973e15a11d"><span data-ttu-id="d76fc-117">トランザクションの参加要素としてのリソースの参加</span><span class="sxs-lookup"><span data-stu-id="d76fc-117">Enlisting Resources as Participants in a Transaction</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/694ea153-e4db-41ae-96ac-9ac66dcb69a9"><span data-ttu-id="d76fc-118">単一フェースおよび複数フェーズでのトランザクションのコミット</span><span class="sxs-lookup"><span data-stu-id="d76fc-118">Committing a Transaction in Single-Phase and Multi-Phase</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public void Commit (System.Transactions.Enlistment enlistment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Commit(class System.Transactions.Enlistment enlistment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.IEnlistmentNotification.Commit(System.Transactions.Enlistment)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Commit (enlistment As Enlistment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Commit(System::Transactions::Enlistment ^ enlistment);" />
      <MemberSignature Language="F#" Value="abstract member Commit : System.Transactions.Enlistment -&gt; unit" Usage="iEnlistmentNotification.Commit enlistment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enlistment" Type="System.Transactions.Enlistment" />
      </Parameters>
      <Docs>
        <param name="enlistment"><span data-ttu-id="d76fc-119">トランザクション マネージャーに対して応答を送信するために使用する <see cref="T:System.Transactions.Enlistment" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d76fc-119">An <see cref="T:System.Transactions.Enlistment" /> object used to send a response to the transaction manager.</span></span></param>
        <summary><span data-ttu-id="d76fc-120">トランザクションのコミット中であることを参加オブジェクトに通知します。</span><span class="sxs-lookup"><span data-stu-id="d76fc-120">Notifies an enlisted object that a transaction is being committed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d76fc-121">トランザクションマネージャーは、コミットメントの2番目のフェーズで、すべての参加要素がトランザクションをコミットするように指示するときに、このメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d76fc-121">The transaction manager calls this method of an enlisted object during the second phase of a commitment, when it instructs all participants to commit the transaction.</span></span>  
  
 <span data-ttu-id="d76fc-122">リソースマネージャーは、トランザクションを完了するために必要な作業を実行し、`enlistment` パラメーターの <xref:System.Transactions.Enlistment.Done%2A> メソッドを呼び出すことによって、その処理が完了したことを TM に通知する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d76fc-122">The resource manager should perform any work necessary to finish the transaction and then inform the TM that it has finished by calling the <xref:System.Transactions.Enlistment.Done%2A> method on the `enlistment` parameter.</span></span>  
  
 <span data-ttu-id="d76fc-123">リソースマネージャーが永続的にを参加させても、<xref:System.Transactions.Enlistment.Done%2A> メソッドを呼び出すことによって応答しない場合、トランザクションマネージャーは、リソースマネージャーが <xref:System.Transactions.IEnlistmentNotification.Commit%2A> 呼び出しを受信したことを認識できません。</span><span class="sxs-lookup"><span data-stu-id="d76fc-123">If the resource manager has enlisted durably, but does not respond by calling <xref:System.Transactions.Enlistment.Done%2A> method, the transaction manager is unsure that the resource manager has received the <xref:System.Transactions.IEnlistmentNotification.Commit%2A> call.</span></span> <span data-ttu-id="d76fc-124">そのため、トランザクションマネージャーは応答を待機し続け、このトランザクションに関連する情報を保持します。</span><span class="sxs-lookup"><span data-stu-id="d76fc-124">As such, the transaction manager keeps waiting for a response, and maintains information relevant to this transaction.</span></span>  <span data-ttu-id="d76fc-125"><xref:System.Transactions.Enlistment.Done%2A> が呼び出されない場合、この情報はメモリ内またはシステム全体のリソース内で無期限に保持されます。</span><span class="sxs-lookup"><span data-stu-id="d76fc-125">If <xref:System.Transactions.Enlistment.Done%2A> is never called, this piece of information is kept around indefinitely in memory or in a system-wide resource.</span></span> <span data-ttu-id="d76fc-126">これにより、リソースを再利用できなくなります。</span><span class="sxs-lookup"><span data-stu-id="d76fc-126">This results in resources not being able to be reclaimed.</span></span> <span data-ttu-id="d76fc-127">分散トランザクションの場合、msdtc ログが最終的にいっぱいになり、MSDTC プロセスが停止する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="d76fc-127">In the case of a distributed transaction, this could eventually fill the MSDTC log which halts the MSDTC process.</span></span> <span data-ttu-id="d76fc-128"><xref:System.Transactions>によって管理されるトランザクションの場合、これにより、リソースマネージャーのプロセスのメモリ消費量が徐々に増加し続けます。</span><span class="sxs-lookup"><span data-stu-id="d76fc-128">In the case of a transaction managed by <xref:System.Transactions>, this results in a gradual and continual increase in the memory consumption of the resource manager's process.</span></span> <span data-ttu-id="d76fc-129">そのため、リソースマネージャーで準備作業を行った後に、<xref:System.Transactions.Enlistment.Done%2A> メソッドを呼び出すことが重要です。</span><span class="sxs-lookup"><span data-stu-id="d76fc-129">Therefore, it is crucial that you call the <xref:System.Transactions.Enlistment.Done%2A> method once your resource manager is done with your prepare work.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InDoubt">
      <MemberSignature Language="C#" Value="public void InDoubt (System.Transactions.Enlistment enlistment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InDoubt(class System.Transactions.Enlistment enlistment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.IEnlistmentNotification.InDoubt(System.Transactions.Enlistment)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InDoubt (enlistment As Enlistment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InDoubt(System::Transactions::Enlistment ^ enlistment);" />
      <MemberSignature Language="F#" Value="abstract member InDoubt : System.Transactions.Enlistment -&gt; unit" Usage="iEnlistmentNotification.InDoubt enlistment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enlistment" Type="System.Transactions.Enlistment" />
      </Parameters>
      <Docs>
        <param name="enlistment"><span data-ttu-id="d76fc-130">トランザクション マネージャーに対して応答を送信するために使用する <see cref="T:System.Transactions.Enlistment" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d76fc-130">An <see cref="T:System.Transactions.Enlistment" /> object used to send a response to the transaction manager.</span></span></param>
        <summary><span data-ttu-id="d76fc-131">トランザクションのステータスが未決定であることを参加オブジェクトに通知します。</span><span class="sxs-lookup"><span data-stu-id="d76fc-131">Notifies an enlisted object that the status of a transaction is in doubt.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d76fc-132">このメソッドは、トランザクションマネージャーが1つの永続リソースに対して単一フェーズコミット操作を呼び出し、その後、トランザクション結果を取得する前に、永続リソースへの接続が失われた場合に、揮発性リソースに対して呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d76fc-132">This method is called for volatile resources when the transaction manager has invoked a single phase commit operation to a single durable resource, and then connection to the durable resource was lost prior to getting the transaction result.</span></span> <span data-ttu-id="d76fc-133">その時点では、トランザクションの結果を安全に特定できません。</span><span class="sxs-lookup"><span data-stu-id="d76fc-133">At that point, the transaction outcome cannot be safely determined.</span></span>  
  
 <span data-ttu-id="d76fc-134"><xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> はトランザクションの最終状態と見なされるため、<xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>を呼び出した後 <xref:System.Transactions.IEnlistmentNotification.Commit%2A> または <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> を呼び出さないでください。</span><span class="sxs-lookup"><span data-stu-id="d76fc-134">As <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> is considered to be a final state for a transaction, you should not call <xref:System.Transactions.IEnlistmentNotification.Commit%2A> or <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> after calling <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d76fc-135">揮発性リソースに対してこのメソッドを実装する場合は、影響を受けるデータに対して認識されている回復またはコンテインメント操作を実行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d76fc-135">Your implementation of this method for the volatile resource should perform whatever recovery or containment operation it understands on the affected data.</span></span>  <span data-ttu-id="d76fc-136">また、`enlistment` パラメーターの処理が完了したら、で <xref:System.Transactions.Enlistment.Done%2A> メソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="d76fc-136">It must also call the <xref:System.Transactions.Enlistment.Done%2A> method on the on the `enlistment` parameter when it has finished its work.</span></span>  
  
 <span data-ttu-id="d76fc-137">リソースマネージャーが永続的にを参加させても、<xref:System.Transactions.Enlistment.Done%2A> メソッドを呼び出すことによって応答しない場合、トランザクションマネージャーは、リソースマネージャーが <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> 呼び出しを受信したことを認識できません。</span><span class="sxs-lookup"><span data-stu-id="d76fc-137">If the resource manager has enlisted durably, but does not respond by calling <xref:System.Transactions.Enlistment.Done%2A> method, the transaction manager is unsure that the resource manager has received the <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> call.</span></span> <span data-ttu-id="d76fc-138">そのため、トランザクションマネージャーは応答を待機し続け、このトランザクションに関連する情報を保持します。</span><span class="sxs-lookup"><span data-stu-id="d76fc-138">As such, the transaction manager keeps waiting for a response, and maintains information relevant to this transaction.</span></span>  <span data-ttu-id="d76fc-139"><xref:System.Transactions.Enlistment.Done%2A> が呼び出されない場合、この情報はメモリ内またはシステム全体のリソース内で無期限に保持されます。</span><span class="sxs-lookup"><span data-stu-id="d76fc-139">If <xref:System.Transactions.Enlistment.Done%2A> is never called, this piece of information is kept around indefinitely in memory or in a system-wide resource.</span></span> <span data-ttu-id="d76fc-140">これにより、リソースを再利用できなくなります。</span><span class="sxs-lookup"><span data-stu-id="d76fc-140">This results in resources not being able to be reclaimed.</span></span> <span data-ttu-id="d76fc-141">分散トランザクションの場合、msdtc ログが最終的にいっぱいになり、MSDTC プロセスが停止する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="d76fc-141">In the case of a distributed transaction, this could eventually fill the MSDTC log which halts the MSDTC process.</span></span> <span data-ttu-id="d76fc-142"><xref:System.Transactions>によって管理されるトランザクションの場合、これにより、リソースマネージャーのプロセスのメモリ消費量が徐々に増加し続けます。</span><span class="sxs-lookup"><span data-stu-id="d76fc-142">In the case of a transaction managed by <xref:System.Transactions>, this results in a gradual and continual increase in the memory consumption of the resource manager's process.</span></span> <span data-ttu-id="d76fc-143">そのため、リソースマネージャーで準備作業を行った後に、<xref:System.Transactions.Enlistment.Done%2A> メソッドを呼び出すことが重要です。</span><span class="sxs-lookup"><span data-stu-id="d76fc-143">Therefore, it is crucial that you call the <xref:System.Transactions.Enlistment.Done%2A> method once your resource manager is done with your prepare work.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prepare">
      <MemberSignature Language="C#" Value="public void Prepare (System.Transactions.PreparingEnlistment preparingEnlistment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Prepare(class System.Transactions.PreparingEnlistment preparingEnlistment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.IEnlistmentNotification.Prepare(System.Transactions.PreparingEnlistment)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Prepare (preparingEnlistment As PreparingEnlistment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Prepare(System::Transactions::PreparingEnlistment ^ preparingEnlistment);" />
      <MemberSignature Language="F#" Value="abstract member Prepare : System.Transactions.PreparingEnlistment -&gt; unit" Usage="iEnlistmentNotification.Prepare preparingEnlistment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="preparingEnlistment" Type="System.Transactions.PreparingEnlistment" />
      </Parameters>
      <Docs>
        <param name="preparingEnlistment"><span data-ttu-id="d76fc-144">トランザクション マネージャーに応答を送信するために使用する <see cref="T:System.Transactions.PreparingEnlistment" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d76fc-144">A <see cref="T:System.Transactions.PreparingEnlistment" /> object used to send a response to the transaction manager.</span></span></param>
        <summary><span data-ttu-id="d76fc-145">トランザクションのコミットの準備中であることを参加オブジェクトに通知します。</span><span class="sxs-lookup"><span data-stu-id="d76fc-145">Notifies an enlisted object that a transaction is being prepared for commitment.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d76fc-146">トランザクションマネージャーは、コミットメントのフェーズ1で、トランザクションをコミットできるかどうかを参加者に確認するときに、参加しているリソースマネージャーのこのメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d76fc-146">The transaction manager calls this method of an enlisted resource manager during the phase 1 of a commitment, when it asks participants whether they can commit the transaction.</span></span>  
  
 <span data-ttu-id="d76fc-147">持続性のあるリソースマネージャーを実装する場合は、このフェーズで準備レコードをログに記録する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d76fc-147">When you are implementing a durable resource manager, you should log your prepare record during this phase.</span></span> <span data-ttu-id="d76fc-148">このレコードには、回復を実行するために必要なすべての情報が含まれている必要があります。</span><span class="sxs-lookup"><span data-stu-id="d76fc-148">The record should contain all the necessary information to perform recovery.</span></span> <span data-ttu-id="d76fc-149">これには、復旧時に <xref:System.Transactions.TransactionManager.Reenlist%2A> メソッドでトランザクションマネージャーに渡される <xref:System.Transactions.PreparingEnlistment.RecoveryInformation%2A> プロパティが含まれます。</span><span class="sxs-lookup"><span data-stu-id="d76fc-149">This includes the <xref:System.Transactions.PreparingEnlistment.RecoveryInformation%2A> property, which is passed to the transaction manager in the <xref:System.Transactions.TransactionManager.Reenlist%2A> method during recovery.</span></span> <span data-ttu-id="d76fc-150">回復の詳細については、「[回復の実行](https://msdn.microsoft.com/library/d342c5c7-da64-4a4c-8e63-b52f4fbf2691)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d76fc-150">For more information on recovery, see [Performing Recovery](https://msdn.microsoft.com/library/d342c5c7-da64-4a4c-8e63-b52f4fbf2691).</span></span>  
  
 <span data-ttu-id="d76fc-151">リソースマネージャーは、`preparingEnlistment` パラメーターの <xref:System.Transactions.PreparingEnlistment.Prepared%2A> メソッドを呼び出してコミットメントの投票を示す前に、完了する必要があるすべての作業を完了する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d76fc-151">Your resource manager should complete all work that must be finished before calling the <xref:System.Transactions.PreparingEnlistment.Prepared%2A> method of the `preparingEnlistment` parameter to indicate its vote for commitment.</span></span> <span data-ttu-id="d76fc-152">コミット、ロールバック、または不明なフェーズ2の通知を受け取る前に、これが確実に実行されるようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="d76fc-152">You should make sure that this is accomplished before receiving any phase 2 notification such as commit, rollback or in doubt.</span></span> <span data-ttu-id="d76fc-153">フェーズ2の通知は、フェーズ1で <xref:System.Transactions.PreparingEnlistment.Prepared%2A> メソッドを呼び出したのと同じスレッドでインラインで発生する可能性があるためです。</span><span class="sxs-lookup"><span data-stu-id="d76fc-153">This is because phase 2 notifications can happen inline on the same thread that called the <xref:System.Transactions.PreparingEnlistment.Prepared%2A> method in phase 1.</span></span> <span data-ttu-id="d76fc-154">このため、フェーズ 2 の通知を受け取る前に既に完了したと考えられる作業 (ロックの解除など) は、<xref:System.Transactions.PreparingEnlistment.Prepared%2A> 呼び出しの後には実行できません。</span><span class="sxs-lookup"><span data-stu-id="d76fc-154">As such, you should not do any work after the <xref:System.Transactions.PreparingEnlistment.Prepared%2A> call (for example, releasing locks) that you would expect to have completed before receiving the phase 2 notifications.</span></span>  
  
 <span data-ttu-id="d76fc-155">`preparingEnlistment` パラメーターのメソッドを呼び出して、ロールバックの投票を示すこともできます。</span><span class="sxs-lookup"><span data-stu-id="d76fc-155">You can also call the method of the `preparingEnlistment` parameter to indicate a vote for rollback.</span></span>  
  
 <span data-ttu-id="d76fc-156">オブジェクトがトランザクションの進行状況を単に観察して対処する必要がある場合は、このメソッドの実装で、作業が完了したときに `preparingEnlistment` パラメーターの <xref:System.Transactions.Enlistment.Done%2A> メソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="d76fc-156">If you want the object to merely observe and react to the progress of the transaction, without participating in it, your implementation of this method should call the <xref:System.Transactions.Enlistment.Done%2A> method of the `preparingEnlistment` parameter when it has finished its work.</span></span> <span data-ttu-id="d76fc-157">これにより、リソースマネージャーはフェーズ2の通知を受け取りません。</span><span class="sxs-lookup"><span data-stu-id="d76fc-157">By doing so, your resource manager would not receive any phase 2 notification.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public void Rollback (System.Transactions.Enlistment enlistment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Rollback(class System.Transactions.Enlistment enlistment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.IEnlistmentNotification.Rollback(System.Transactions.Enlistment)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rollback (enlistment As Enlistment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Rollback(System::Transactions::Enlistment ^ enlistment);" />
      <MemberSignature Language="F#" Value="abstract member Rollback : System.Transactions.Enlistment -&gt; unit" Usage="iEnlistmentNotification.Rollback enlistment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enlistment" Type="System.Transactions.Enlistment" />
      </Parameters>
      <Docs>
        <param name="enlistment"><span data-ttu-id="d76fc-158">トランザクション マネージャーに応答を送信するために使用する <see cref="T:System.Transactions.Enlistment" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d76fc-158">A <see cref="T:System.Transactions.Enlistment" /> object used to send a response to the transaction manager.</span></span></param>
        <summary><span data-ttu-id="d76fc-159">トランザクションのロールバック (中止) 中であることを参加オブジェクトに通知します。</span><span class="sxs-lookup"><span data-stu-id="d76fc-159">Notifies an enlisted object that a transaction is being rolled back (aborted).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d76fc-160">トランザクションをコミットするのに1つ以上のトランザクションの参加要素がないためにトランザクションがロールバック (中止) されるときに、トランザクションマネージャーは、参加しているオブジェクトのこのメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d76fc-160">The transaction manager calls this method of an enlisted object when the transaction is being rolled back (aborted) due to the inability of one or more transaction participants to commit the transaction.</span></span>  
  
 <span data-ttu-id="d76fc-161">リソースマネージャーは、トランザクションを完了するために必要な作業を実行し、`enlistment` パラメーターの <xref:System.Transactions.Enlistment.Done%2A> メソッドを呼び出すことによって、その処理が完了したことを TM に通知する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d76fc-161">The resource manager should perform any work necessary to finish the transaction and then inform the TM that it has finished by calling the <xref:System.Transactions.Enlistment.Done%2A> method on the `enlistment` parameter.</span></span>  
  
 <span data-ttu-id="d76fc-162">リソースマネージャーが永続的にを参加させても、<xref:System.Transactions.Enlistment.Done%2A> メソッドを呼び出すことによって応答しない場合、トランザクションマネージャーは、リソースマネージャーが <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> 呼び出しを受信したことを認識できません。</span><span class="sxs-lookup"><span data-stu-id="d76fc-162">If the resource manager has enlisted durably, but does not respond by calling <xref:System.Transactions.Enlistment.Done%2A> method, the transaction manager is unsure that the resource manager has received the <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> call.</span></span> <span data-ttu-id="d76fc-163">そのため、トランザクションマネージャーは応答を待機し続け、このトランザクションに関連する情報を保持します。</span><span class="sxs-lookup"><span data-stu-id="d76fc-163">As such, the transaction manager keeps waiting for a response, and maintains information relevant to this transaction.</span></span>  <span data-ttu-id="d76fc-164"><xref:System.Transactions.Enlistment.Done%2A> が呼び出されない場合、この情報はメモリ内またはシステム全体のリソース内で無期限に保持されます。</span><span class="sxs-lookup"><span data-stu-id="d76fc-164">If <xref:System.Transactions.Enlistment.Done%2A> is never called, this piece of information is kept around indefinitely in memory or in a system-wide resource.</span></span> <span data-ttu-id="d76fc-165">これにより、リソースを再利用できなくなります。</span><span class="sxs-lookup"><span data-stu-id="d76fc-165">This results in resources not being able to be reclaimed.</span></span> <span data-ttu-id="d76fc-166">分散トランザクションの場合、msdtc ログが最終的にいっぱいになり、MSDTC プロセスが停止する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="d76fc-166">In the case of a distributed transaction, this could eventually fill the MSDTC log which halts the MSDTC process.</span></span> <span data-ttu-id="d76fc-167"><xref:System.Transactions>によって管理されるトランザクションの場合、これにより、リソースマネージャーのプロセスのメモリ消費量が徐々に増加し続けます。</span><span class="sxs-lookup"><span data-stu-id="d76fc-167">In the case of a transaction managed by <xref:System.Transactions>, this results in a gradual and continual increase in the memory consumption of the resource manager's process.</span></span> <span data-ttu-id="d76fc-168">そのため、リソースマネージャーで準備作業を行った後に、<xref:System.Transactions.Enlistment.Done%2A> メソッドを呼び出すことが重要です。</span><span class="sxs-lookup"><span data-stu-id="d76fc-168">Therefore, it is crucial that you call the <xref:System.Transactions.Enlistment.Done%2A> method once your resource manager is done with your prepare work.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
