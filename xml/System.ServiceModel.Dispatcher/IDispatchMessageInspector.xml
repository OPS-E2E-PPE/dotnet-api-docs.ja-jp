<Type Name="IDispatchMessageInspector" FullName="System.ServiceModel.Dispatcher.IDispatchMessageInspector">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e22af5818fea05c2ae1faf9ee78ca4da5e9cff78" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73393132" /></Metadata><TypeSignature Language="C#" Value="public interface IDispatchMessageInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDispatchMessageInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDispatchMessageInspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDispatchMessageInspector" />
  <TypeSignature Language="F#" Value="type IDispatchMessageInspector = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="b004a-101">サービス アプリケーションで受信および送信アプリケーション メッセージのカスタム検査または変更を可能にするメソッドを定義します。</span><span class="sxs-lookup"><span data-stu-id="b004a-101">Defines the methods that enable custom inspection or modification of inbound and outbound application messages in service applications.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b004a-102">要求メッセージを操作にディスパッチする前に、または応答メッセージを呼び出し元に返す前に、受信または送信アプリケーション メッセージを検査または変更するには、<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> を実装します。</span><span class="sxs-lookup"><span data-stu-id="b004a-102">Implement <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to inspect or modify inbound or outbound application messages either prior to dispatching a request message to an operation or before returning a reply message to a caller.</span></span> <span data-ttu-id="b004a-103">メッセージの宛先の操作を呼び出す前にメッセージをインターセプトする必要のあるシナリオは、数多くあります。</span><span class="sxs-lookup"><span data-stu-id="b004a-103">There are a large number of scenarios that require intercepting messages prior to invoking the operation for which it is destined.</span></span> <span data-ttu-id="b004a-104">たとえば、受信アプリケーション メッセージをログに記録したり、メッセージ ヘッダーに基づいてなんらかの機能を実行したりすることが考えられます。</span><span class="sxs-lookup"><span data-stu-id="b004a-104">For example, you can log incoming application messages or perform some feature based on a message header.</span></span>  
  
 <span data-ttu-id="b004a-105">通常、メッセージ インスペクターは、サービス動作 (<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>)、エンドポイント動作 (<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>)、またはコントラクト動作 (<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>) により挿入されます。</span><span class="sxs-lookup"><span data-stu-id="b004a-105">Typically, message inspectors are inserted by a service behavior (<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>), an endpoint behavior (<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>), or a contract behavior (<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>).</span></span> <span data-ttu-id="b004a-106">その後、動作は、メッセージ インスペクターを <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> コレクションに追加します。</span><span class="sxs-lookup"><span data-stu-id="b004a-106">The behavior then adds the message inspector to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span> <span data-ttu-id="b004a-107">動作を使用したランタイムの拡張の詳細については、「 [ServiceHost とサービスモデルレイヤーの拡張](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="b004a-107">For more information about extending the runtime using behaviors, see [Extending ServiceHost and the Service Model Layer](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).</span></span>  
  
-   <span data-ttu-id="b004a-108"><xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> メソッドを使用すると、メッセージを受信した後で、目的の操作にメッセージをディスパッチする前に、カスタム動作を実行できます。</span><span class="sxs-lookup"><span data-stu-id="b004a-108">The <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method enables custom behavior after receiving the message but before dispatching it to the intended operation.</span></span>  
  
-   <span data-ttu-id="b004a-109"><xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> メソッドを使用すると、操作から返った後で、応答を送信する前に、カスタム動作を実行できます。</span><span class="sxs-lookup"><span data-stu-id="b004a-109">The <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method enables custom behavior after the operation returns but before the reply is sent.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b004a-110"><xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> オブジェクトは、操作が一方向か要求/応答かに関係なく、メッセージのディスパッチ時に常に同じ場所で呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="b004a-110"><xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> objects are always called at the same point during message dispatch regardless of whether an operation is one-way or request-reply.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b004a-111">次のコード例では、呼び出されるときにコンソールに文字列を書き出す基本的な <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> を示します。</span><span class="sxs-lookup"><span data-stu-id="b004a-111">The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.</span></span>  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 <span data-ttu-id="b004a-112">次のコード例では、<xref:System.ServiceModel.Description.IServiceBehavior>`Inspector` を <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> に追加する <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> の実装を示します。</span><span class="sxs-lookup"><span data-stu-id="b004a-112">The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span>  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 <span data-ttu-id="b004a-113">次のコード例では、アプリケーション構成ファイルを使用して、`Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> を挿入するサービス動作を読み込む方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="b004a-113">The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span></span>  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterReceiveRequest">
      <MemberSignature Language="C#" Value="public object AfterReceiveRequest (ref System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel, System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AfterReceiveRequest(class System.ServiceModel.Channels.Message&amp; request, class System.ServiceModel.IClientChannel channel, class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AfterReceiveRequest(System::ServiceModel::Channels::Message ^ % request, System::ServiceModel::IClientChannel ^ channel, System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member AfterReceiveRequest : Message * System.ServiceModel.IClientChannel * System.ServiceModel.InstanceContext -&gt; obj" Usage="iDispatchMessageInspector.AfterReceiveRequest (request, channel, instanceContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.ServiceModel.Channels.Message" RefType="ref" />
        <Parameter Name="channel" Type="System.ServiceModel.IClientChannel" />
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="b004a-114">要求メッセージ。</span><span class="sxs-lookup"><span data-stu-id="b004a-114">The request message.</span></span></param>
        <param name="channel"><span data-ttu-id="b004a-115">受信チャネル。</span><span class="sxs-lookup"><span data-stu-id="b004a-115">The incoming channel.</span></span></param>
        <param name="instanceContext"><span data-ttu-id="b004a-116">現在のサービス インスタンス。</span><span class="sxs-lookup"><span data-stu-id="b004a-116">The current service instance.</span></span></param>
        <summary><span data-ttu-id="b004a-117">受信メッセージを受信した後で、ただし、目的の操作にメッセージをディスパッチする前に、呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="b004a-117">Called after an inbound message has been received but before the message is dispatched to the intended operation.</span></span></summary>
        <returns><span data-ttu-id="b004a-118">状態を相関させるために使用するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b004a-118">The object used to correlate state.</span></span> <span data-ttu-id="b004a-119">このオブジェクトは、<see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" /> メソッドに戻します。</span><span class="sxs-lookup"><span data-stu-id="b004a-119">This object is passed back in the <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" /> method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b004a-120"><xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> メソッドは、受信メッセージ、メッセージを提供したクライアント チャネル、および現在のサービス インスタンスを検査または変更するために使用します。</span><span class="sxs-lookup"><span data-stu-id="b004a-120">Use the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method to inspect or modify the incoming message, the client channel that provided it, and the current service instance.</span></span> <span data-ttu-id="b004a-121">戻り値は、相関のために使用する任意のオブジェクトです。`correlationState` メソッドの <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> パラメーターとして返されます。</span><span class="sxs-lookup"><span data-stu-id="b004a-121">The return value can be any object that you want to use for correlation purposes; it is returned to you as the `correlationState` parameter in the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="b004a-122">メッセージ全体をバッファーに格納してコピーを作成しない限り、メッセージの本文を使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="b004a-122">You cannot use the body of the message unless you buffer the entire message and make a copy.</span></span> <span data-ttu-id="b004a-123">これを行う場合は、メッセージのコピーを 2 つ作成する必要があります。1 つは検査用で、もう 1 つは `request` パラメーターを上書きするためです。</span><span class="sxs-lookup"><span data-stu-id="b004a-123">If you do this, you must make two copies of the message: one to inspect, and the other to overwrite the `request` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b004a-124">次のコード例では、呼び出されるときにコンソールに文字列を書き出す基本的な <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> を示します。</span><span class="sxs-lookup"><span data-stu-id="b004a-124">The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.</span></span>  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 <span data-ttu-id="b004a-125">次のコード例では、<xref:System.ServiceModel.Description.IServiceBehavior>`Inspector` を <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> に追加する <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> の実装を示します。</span><span class="sxs-lookup"><span data-stu-id="b004a-125">The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span>  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 <span data-ttu-id="b004a-126">次のコード例では、アプリケーション構成ファイルを使用して、`Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> を挿入するサービス動作を読み込む方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="b004a-126">The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span></span>  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeSendReply">
      <MemberSignature Language="C#" Value="public void BeforeSendReply (ref System.ServiceModel.Channels.Message reply, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeforeSendReply(class System.ServiceModel.Channels.Message&amp; reply, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeforeSendReply (ByRef reply As Message, correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeforeSendReply(System::ServiceModel::Channels::Message ^ % reply, System::Object ^ correlationState);" />
      <MemberSignature Language="F#" Value="abstract member BeforeSendReply : Message * obj -&gt; unit" Usage="iDispatchMessageInspector.BeforeSendReply (reply, correlationState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reply" Type="System.ServiceModel.Channels.Message" RefType="ref" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reply"><span data-ttu-id="b004a-127">応答メッセージ。</span><span class="sxs-lookup"><span data-stu-id="b004a-127">The reply message.</span></span> <span data-ttu-id="b004a-128">操作が一方向の場合は、この値が null です。</span><span class="sxs-lookup"><span data-stu-id="b004a-128">This value is null if the operation is one way.</span></span></param>
        <param name="correlationState"><span data-ttu-id="b004a-129"><see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" /> メソッドから返された相関オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b004a-129">The correlation object returned from the <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" /> method.</span></span></param>
        <summary><span data-ttu-id="b004a-130">操作から返った後で、ただし、応答メッセージを送信する前に、呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="b004a-130">Called after the operation has returned but before the reply message is sent.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b004a-131"><xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> メソッドは、戻りメッセージを送信する前にカスタム動作を実行するために使用します。</span><span class="sxs-lookup"><span data-stu-id="b004a-131">Use the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method to perform custom behavior prior to sending the return message.</span></span> <span data-ttu-id="b004a-132">`correlationState` は <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> メソッドから返されるオブジェクトで、これを使用すると、受信呼び出しと送信呼び出しの間の相関を実行し、独自の動作をサポートすることができます。</span><span class="sxs-lookup"><span data-stu-id="b004a-132">The `correlationState` is the object returned from the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method that you can use to perform correlation between inbound and outbound calls to support your behavior.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b004a-133">次のコード例では、呼び出されるときにコンソールに文字列を書き出す基本的な <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> を示します。</span><span class="sxs-lookup"><span data-stu-id="b004a-133">The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.</span></span>  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 <span data-ttu-id="b004a-134">次のコード例では、<xref:System.ServiceModel.Description.IServiceBehavior>`Inspector` を <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> に追加する <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> の実装を示します。</span><span class="sxs-lookup"><span data-stu-id="b004a-134">The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span>  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 <span data-ttu-id="b004a-135">次のコード例では、アプリケーション構成ファイルを使用して、`Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> を挿入するサービス動作を読み込む方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="b004a-135">The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span></span>  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
