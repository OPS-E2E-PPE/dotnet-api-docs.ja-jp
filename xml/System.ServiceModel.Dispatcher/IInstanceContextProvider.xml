<Type Name="IInstanceContextProvider" FullName="System.ServiceModel.Dispatcher.IInstanceContextProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5334d292a9b05b1dc2b0e6a6cba501aeb6017308" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78744625" /></Metadata><TypeSignature Language="C#" Value="public interface IInstanceContextProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInstanceContextProvider" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IInstanceContextProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInstanceContextProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInstanceContextProvider" />
  <TypeSignature Language="F#" Value="type IInstanceContextProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="092d9-101"><see cref="T:System.ServiceModel.InstanceContext" /> オブジェクトの作成または選択に参加するために実装します。特に、共有セッションを有効にします。</span><span class="sxs-lookup"><span data-stu-id="092d9-101">Implement to participate in the creation or choosing of a <see cref="T:System.ServiceModel.InstanceContext" /> object, especially to enable shared sessions.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="092d9-102"><xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> インターフェイスを実装して、システムに適切な <xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType> オブジェクトを提供します。</span><span class="sxs-lookup"><span data-stu-id="092d9-102">Implement the <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> interface to provide the appropriate <xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType> object to the system.</span></span> <span data-ttu-id="092d9-103">通常、このインターフェイスの実装では、共有セッションのサポート、サービス インスタンス プールの有効化、サービス インスタンスの有効期間の制御、またはクライアント間でのコンテキストのグループ化を実現します。</span><span class="sxs-lookup"><span data-stu-id="092d9-103">Typically, this interface is implemented to support shared sessions, enable service instance pooling, control lifetimes of service instances, or to group contexts among clients.</span></span>  
  
 <span data-ttu-id="092d9-104">たとえば、共有を実装するには、カスタム <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> を挿入して、クライアントからのどのセッションまたは呼び出しをどの <xref:System.ServiceModel.InstanceContext> オブジェクトと関連付けるかを決定します。</span><span class="sxs-lookup"><span data-stu-id="092d9-104">For example, to implement sharing, insert a custom <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> to decide which session or call from a client is associated with which <xref:System.ServiceModel.InstanceContext> object.</span></span> <span data-ttu-id="092d9-105">インスタンスコンテキストの共有を示す例については、「 [InstanceContextSharing](https://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="092d9-105">For an example that demonstrates the sharing of instance contexts, see [InstanceContextSharing](https://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="092d9-106"><xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> が Windows Communication Foundation (WCF) に挿入されると、<xref:System.ServiceModel.InstanceContext> オブジェクトの作成を制御する通常のプロパティ (<xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> プロパティ) はチェックされなくなり、効果はありません。</span><span class="sxs-lookup"><span data-stu-id="092d9-106">When an <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> is inserted into Windows Communication Foundation (WCF), the normal property that controls the creation of <xref:System.ServiceModel.InstanceContext> objects (the <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> property) is no longer checked and has no effect.</span></span>  
  
 <span data-ttu-id="092d9-107"><xref:System.ServiceModel.InstanceContext> オブジェクトを作成時に初期化できるさらに一般的なメカニズムは (たとえば、各 <xref:System.ServiceModel.InstanceContext> にカスタム拡張機能を関連付けるなど)、<xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=nameWithType> です。</span><span class="sxs-lookup"><span data-stu-id="092d9-107">A more generic mechanism by which you can initialize <xref:System.ServiceModel.InstanceContext> objects when created (for example, to attach custom extensions to each <xref:System.ServiceModel.InstanceContext>) is the <xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetExistingInstanceContext">
      <MemberSignature Language="C#" Value="public System.ServiceModel.InstanceContext GetExistingInstanceContext (System.ServiceModel.Channels.Message message, System.ServiceModel.IContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.InstanceContext GetExistingInstanceContext(class System.ServiceModel.Channels.Message message, class System.ServiceModel.IContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExistingInstanceContext (message As Message, channel As IContextChannel) As InstanceContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::InstanceContext ^ GetExistingInstanceContext(System::ServiceModel::Channels::Message ^ message, System::ServiceModel::IContextChannel ^ channel);" />
      <MemberSignature Language="F#" Value="abstract member GetExistingInstanceContext : System.ServiceModel.Channels.Message * System.ServiceModel.IContextChannel -&gt; System.ServiceModel.InstanceContext" Usage="iInstanceContextProvider.GetExistingInstanceContext (message, channel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.InstanceContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="channel" Type="System.ServiceModel.IContextChannel" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="092d9-108">受信メッセージ。</span><span class="sxs-lookup"><span data-stu-id="092d9-108">The incoming message.</span></span></param>
        <param name="channel"><span data-ttu-id="092d9-109">メッセージを受信したチャネル。</span><span class="sxs-lookup"><span data-stu-id="092d9-109">The channel that received the message.</span></span></param>
        <summary><span data-ttu-id="092d9-110">新しいメッセージを受信すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="092d9-110">Called when a new message is received.</span></span></summary>
        <returns><span data-ttu-id="092d9-111">メッセージの処理に使用する <see cref="T:System.ServiceModel.InstanceContext" /> オブジェクト。新しい <see cref="T:System.ServiceModel.InstanceContext" /> オブジェクトを作成するよう WCF に指示するには、<see langword="null" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="092d9-111">The <see cref="T:System.ServiceModel.InstanceContext" /> object that is used to process the message; return <see langword="null" /> to instruct WCF to create a new <see cref="T:System.ServiceModel.InstanceContext" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="092d9-112"><xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> メソッドは、メッセージを受信すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="092d9-112">The <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> method is called when a message is received.</span></span> <span data-ttu-id="092d9-113">メッセージの処理に使用する <xref:System.ServiceModel.InstanceContext> オブジェクト、または `null` を返します。</span><span class="sxs-lookup"><span data-stu-id="092d9-113">Return the <xref:System.ServiceModel.InstanceContext> object that you want to process the message, or `null`.</span></span> <span data-ttu-id="092d9-114">`null`の場合、WCF はメッセージの新しい <xref:System.ServiceModel.InstanceContext> オブジェクトを作成し、<xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="092d9-114">In the case of `null`, WCF creates a new <xref:System.ServiceModel.InstanceContext> object for the message and then calls the <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> method.</span></span>  
  
 <span data-ttu-id="092d9-115">`null` を返すと、新しい <xref:System.ServiceModel.InstanceContext> オブジェクトがスロットル システムに渡って、<xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=nameWithType> のカウントをインクリメントします。</span><span class="sxs-lookup"><span data-stu-id="092d9-115">If you return `null`, the new <xref:System.ServiceModel.InstanceContext> object goes through the throttling system and increments the count of <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeInstanceContext">
      <MemberSignature Language="C#" Value="public void InitializeInstanceContext (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message, System.ServiceModel.IContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InitializeInstanceContext(class System.ServiceModel.InstanceContext instanceContext, class System.ServiceModel.Channels.Message message, class System.ServiceModel.IContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InitializeInstanceContext (instanceContext As InstanceContext, message As Message, channel As IContextChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InitializeInstanceContext(System::ServiceModel::InstanceContext ^ instanceContext, System::ServiceModel::Channels::Message ^ message, System::ServiceModel::IContextChannel ^ channel);" />
      <MemberSignature Language="F#" Value="abstract member InitializeInstanceContext : System.ServiceModel.InstanceContext * System.ServiceModel.Channels.Message * System.ServiceModel.IContextChannel -&gt; unit" Usage="iInstanceContextProvider.InitializeInstanceContext (instanceContext, message, channel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="channel" Type="System.ServiceModel.IContextChannel" />
      </Parameters>
      <Docs>
        <param name="instanceContext"><span data-ttu-id="092d9-116">新しい <see cref="T:System.ServiceModel.InstanceContext" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="092d9-116">The new <see cref="T:System.ServiceModel.InstanceContext" /> object.</span></span></param>
        <param name="message"><span data-ttu-id="092d9-117">受信メッセージ。</span><span class="sxs-lookup"><span data-stu-id="092d9-117">The incoming message.</span></span></param>
        <param name="channel"><span data-ttu-id="092d9-118">メッセージを受信したチャネル。</span><span class="sxs-lookup"><span data-stu-id="092d9-118">The channel that received the message.</span></span></param>
        <summary><span data-ttu-id="092d9-119"><see langword="null" /> メソッドから <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" /> が返されると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="092d9-119">Called when <see langword="null" /> is returned from the <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="092d9-120"><xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> が <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> を返し、新しい `null` オブジェクトが作成されると、<xref:System.ServiceModel.InstanceContext> が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="092d9-120"><xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> is called when <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> returns `null` and a new <xref:System.ServiceModel.InstanceContext> object is created.</span></span> <span data-ttu-id="092d9-121">このメソッドは、新しい <xref:System.ServiceModel.InstanceContext> が作成されたことを通知するために呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="092d9-121">This method is called to notify you that a new <xref:System.ServiceModel.InstanceContext> has been created.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIdle">
      <MemberSignature Language="C#" Value="public bool IsIdle (System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsIdle(class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsIdle (instanceContext As InstanceContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsIdle(System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member IsIdle : System.ServiceModel.InstanceContext -&gt; bool" Usage="iInstanceContextProvider.IsIdle instanceContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="instanceContext"><span data-ttu-id="092d9-122">アイドル状態と見なされる <see cref="T:System.ServiceModel.InstanceContext" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="092d9-122">The <see cref="T:System.ServiceModel.InstanceContext" /> object that is considered idle.</span></span></param>
        <summary><span data-ttu-id="092d9-123">すべての <see cref="T:System.ServiceModel.InstanceContext" /> アクティビティが完了すると呼び出され、実装者は <see cref="T:System.ServiceModel.InstanceContext" /> がリサイクルされないようにすることができます。</span><span class="sxs-lookup"><span data-stu-id="092d9-123">Called when all <see cref="T:System.ServiceModel.InstanceContext" /> activities have completed to enable implementers to prevent the <see cref="T:System.ServiceModel.InstanceContext" /> from being recycled.</span></span></summary>
        <returns><span data-ttu-id="092d9-124">Windows Communication Foundation (WCF) が <see langword="true" /> オブジェクトを閉じてリサイクルし、<see cref="T:System.ServiceModel.InstanceContext" /> の値を調節する場合は <see cref="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="092d9-124"><see langword="true" /> if Windows Communication Foundation (WCF) is to close and recycle the <see cref="T:System.ServiceModel.InstanceContext" /> object and adjust the value of <see cref="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="092d9-125"><xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> は、WCF がアイドル状態の <xref:System.ServiceModel.InstanceContext> オブジェクトを閉じてリサイクルしようとしているときに呼び出され、継続するかどうかをランタイムに通知できます。</span><span class="sxs-lookup"><span data-stu-id="092d9-125"><xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> is called when WCF is about to close and recycle an idle <xref:System.ServiceModel.InstanceContext> object so that you can inform the runtime whether to continue doing so.</span></span>  
  
 <span data-ttu-id="092d9-126">インスタンスコンテキストの共有を示す例については、「 [InstanceContextSharing](https://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="092d9-126">For an example that demonstrates the sharing of instance contexts, see [InstanceContextSharing](https://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyIdle">
      <MemberSignature Language="C#" Value="public void NotifyIdle (System.ServiceModel.Dispatcher.InstanceContextIdleCallback callback, System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NotifyIdle(class System.ServiceModel.Dispatcher.InstanceContextIdleCallback callback, class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub NotifyIdle (callback As InstanceContextIdleCallback, instanceContext As InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void NotifyIdle(System::ServiceModel::Dispatcher::InstanceContextIdleCallback ^ callback, System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member NotifyIdle : System.ServiceModel.Dispatcher.InstanceContextIdleCallback * System.ServiceModel.InstanceContext -&gt; unit" Usage="iInstanceContextProvider.NotifyIdle (callback, instanceContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.ServiceModel.Dispatcher.InstanceContextIdleCallback" />
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="092d9-127"><see cref="T:System.ServiceModel.InstanceContext" /> オブジェクトを閉じてリサイクルする時期を WCF に通知する <see cref="T:System.ServiceModel.Dispatcher.InstanceContextIdleCallback" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="092d9-127">The <see cref="T:System.ServiceModel.Dispatcher.InstanceContextIdleCallback" /> object that notifies WCF when the <see cref="T:System.ServiceModel.InstanceContext" /> object is to be closed and recycled.</span></span></param>
        <param name="instanceContext"><span data-ttu-id="092d9-128">現在の <see cref="T:System.ServiceModel.InstanceContext" /> です。</span><span class="sxs-lookup"><span data-stu-id="092d9-128">The current <see cref="T:System.ServiceModel.InstanceContext" />.</span></span></param>
        <summary><span data-ttu-id="092d9-129"><see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" /> メソッドが <see langword="false" /> を返すと呼び出されます。これにより、実装者は <see cref="T:System.ServiceModel.InstanceContext" /> オブジェクトの終了を WCF に通知するコールバックを提供できます。</span><span class="sxs-lookup"><span data-stu-id="092d9-129">Called when the <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" /> method returns <see langword="false" /> to enable implementers to provide a callback to notify WCF when the <see cref="T:System.ServiceModel.InstanceContext" /> object is finished.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="092d9-130"><xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle%2A> メソッドは、<xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> メソッドが `false` を返したときに呼び出されます。これにより、<xref:System.ServiceModel.InstanceContext> が作業を完了したことをランタイムに通知するために使用する <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType> オブジェクトを WCF に渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="092d9-130">The <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle%2A> method is called when the <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> method returns `false` to enable you to provide WCF with a <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType> object that you use to inform the runtime that the <xref:System.ServiceModel.InstanceContext> has finished its work.</span></span> <span data-ttu-id="092d9-131"><xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType> オブジェクトが、<xref:System.ServiceModel.InstanceContext> が作業を完了したことをランタイムに通知すると、WCF は <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> を再度呼び出します。</span><span class="sxs-lookup"><span data-stu-id="092d9-131">When the <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType> object notifies the runtime that the <xref:System.ServiceModel.InstanceContext> has finished its work, WCF calls <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> once again.</span></span> <span data-ttu-id="092d9-132">このサイクルは、<xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> が `true` を返すまで継続されます。コンテキストはサイクルごとに閉じられ、再利用されます。</span><span class="sxs-lookup"><span data-stu-id="092d9-132">This cycle continues until <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> returns `true` and the context is closed and recycled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
