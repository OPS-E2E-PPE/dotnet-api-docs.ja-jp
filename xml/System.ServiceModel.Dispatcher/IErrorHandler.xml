<Type Name="IErrorHandler" FullName="System.ServiceModel.Dispatcher.IErrorHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f8114a14f1e73407c3ce90a94ca5576512bea734" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83960731" /></Metadata><TypeSignature Language="C#" Value="public interface IErrorHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IErrorHandler" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IErrorHandler" />
  <TypeSignature Language="VB.NET" Value="Public Interface IErrorHandler" />
  <TypeSignature Language="C++ CLI" Value="public interface class IErrorHandler" />
  <TypeSignature Language="F#" Value="type IErrorHandler = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="f5faa-101">呼び出し側から返されたエラー メッセージを実装者が制御し、ログ記録などのカスタム エラー処理をオプションで実行できるようにします。</span><span class="sxs-lookup"><span data-stu-id="f5faa-101">Allows an implementer to control the fault message returned to the caller and optionally perform custom error processing such as logging.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5faa-102">例外がスローされたときにアプリケーションの動作を明示的に制御するには、<xref:System.ServiceModel.Dispatcher.IErrorHandler> インターフェイスを実装し、<xref:System.ServiceModel.Dispatcher.ChannelDispatcher>の <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> プロパティに追加します。</span><span class="sxs-lookup"><span data-stu-id="f5faa-102">To explicitly control the behavior of the application when an exception is thrown, implement the <xref:System.ServiceModel.Dispatcher.IErrorHandler> interface and add it to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher>'s <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.</span></span> <span data-ttu-id="f5faa-103"><xref:System.ServiceModel.Dispatcher.IErrorHandler> は、生成される SOAP エラーを明示的に制御し、このエラーをクライアントに返すかどうかを決定し、関連付けられたタスク (ログ記録など) を実行できるようにします。</span><span class="sxs-lookup"><span data-stu-id="f5faa-103"><xref:System.ServiceModel.Dispatcher.IErrorHandler> enables you to explicitly control the SOAP fault generated, decide whether to send it back to the client, and perform associated tasks, such as logging.</span></span> <span data-ttu-id="f5faa-104">エラー ハンドラーは、<xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> プロパティに追加された順序で呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="f5faa-104">Error handlers are called in the order in which they were added to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.</span></span>  
  
 <span data-ttu-id="f5faa-105"><xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> メソッドを実装して、クライアントに返されるエラー メッセージを制御します。</span><span class="sxs-lookup"><span data-stu-id="f5faa-105">Implement the <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> method to control the fault message that is returned to the client.</span></span>  
  
 <span data-ttu-id="f5faa-106">エラー ログの記録、フェイル ファーストの保証、アプリケーションのシャットダウンなどのエラー関連の動作を行うには、<xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="f5faa-106">Implement the <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> method to ensure error-related behaviors, including error logging, assuring a fail fast, shutting down the application, and so on.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f5faa-107"><xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> メソッドはさまざまな場所から呼び出すことができるため、このメソッドがどのスレッドで呼び出されるのかについての保証はありません。</span><span class="sxs-lookup"><span data-stu-id="f5faa-107">Because the <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> method can be called from many different places there are no guarantees made about which thread the method is called on.</span></span> <span data-ttu-id="f5faa-108"><xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> メソッドが操作スレッドで呼び出されるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="f5faa-108">Do not depend on <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> method being called on the operation thread.</span></span>  
  
 <span data-ttu-id="f5faa-109">すべての <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 実装は、応答メッセージを送信する前に、まず呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="f5faa-109">All <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> implementations are called first, prior to sending a response message.</span></span> <span data-ttu-id="f5faa-110">すべての <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 実装が呼び出されて返されたときに、`fault` が `null` 以外の場合は、操作コントラクトに従ってクライアントに返されます。</span><span class="sxs-lookup"><span data-stu-id="f5faa-110">When all <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> implementations have been called and return, and if `fault` is non-`null`, it is sent back to the client according to the operation contract.</span></span> <span data-ttu-id="f5faa-111">すべての実装が呼び出された後に `fault` が `null` である場合、応答メッセージは <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> プロパティ値で制御されます。</span><span class="sxs-lookup"><span data-stu-id="f5faa-111">If `fault` is `null` after all implementations have been called, the response message is controlled by the <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> property value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f5faa-112">例外は、すべての <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 実装が呼び出され、応答メッセージがチャネルに渡された後で発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f5faa-112">Exceptions can occur after all <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> implementations are called and a response message is handed to the channel.</span></span> <span data-ttu-id="f5faa-113">チャネルの例外が発生した場合 (メッセージのシリアル化が困難な場合など) <xref:System.ServiceModel.Dispatcher.IErrorHandler> オブジェクトには通知されます。</span><span class="sxs-lookup"><span data-stu-id="f5faa-113">If a channel exception occurs (for example, difficulty serializing the message) <xref:System.ServiceModel.Dispatcher.IErrorHandler> objects are notified.</span></span> <span data-ttu-id="f5faa-114">この場合でも、開発環境がそのような例外をキャッチして表示したり、トレースを利用して問題を検出したりすることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f5faa-114">In this case, you should still make sure that your development environment catches and displays such exceptions to you or makes use of tracing to discover the problem.</span></span> <span data-ttu-id="f5faa-115">トレースの詳細については、「[トレースを使用したアプリケーションのトラブルシューティング](/dotnet/framework/wcf/diagnostics/tracing/using-tracing-to-troubleshoot-your-application)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f5faa-115">For more information about tracing, see [Using Tracing to Troubleshoot Your Application](/dotnet/framework/wcf/diagnostics/tracing/using-tracing-to-troubleshoot-your-application).</span></span>  
  
 <span data-ttu-id="f5faa-116">応答メッセージが送信された後に、すべての <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> 実装が同じ順序で呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="f5faa-116">After the response message has been sent, all <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> implementations are called in the same order.</span></span>  
  
 <span data-ttu-id="f5faa-117">通常、<xref:System.ServiceModel.Dispatcher.IErrorHandler> の実装は、サービス (双方向通信の場合は、サービスとクライアント) の <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> プロパティに追加されます。</span><span class="sxs-lookup"><span data-stu-id="f5faa-117">Typically, an <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementation is added to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property on the service (and the client in the case of duplex communication).</span></span>  
  
 <span data-ttu-id="f5faa-118">動作 (<xref:System.ServiceModel.Dispatcher.IErrorHandler>、<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>、<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>、または <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> オブジェクト) を実装して <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType> をランタイムに追加し、プログラム、構成ファイル、またはカスタム属性でその動作を使用して <xref:System.ServiceModel.Dispatcher.IErrorHandler> を関連付けることができます。</span><span class="sxs-lookup"><span data-stu-id="f5faa-118">You can add the <xref:System.ServiceModel.Dispatcher.IErrorHandler> to the runtime by implementing a behavior (either an <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>, or <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType> object) and use the behavior programmatically, from a configuration file or with a custom attribute to attach your <xref:System.ServiceModel.Dispatcher.IErrorHandler>.</span></span>  
  
 <span data-ttu-id="f5faa-119">動作を使用してランタイムを変更する方法の詳細については、「動作を使用した[ランタイムの構成と拡張](/dotnet/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f5faa-119">For more information about using behaviors to modify the runtime, see [Configuring and Extending the Runtime with Behaviors](/dotnet/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5faa-120">次のコード例では、サービス メソッドがマネージド例外をスローしたときに、<xref:System.ServiceModel.Dispatcher.IErrorHandler> 型の <xref:System.ServiceModel.FaultException%601> だけを返す `GreetingFault` を実装するサービスを示します。</span><span class="sxs-lookup"><span data-stu-id="f5faa-120">The following code example demonstrates a service that implements <xref:System.ServiceModel.Dispatcher.IErrorHandler> that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.</span></span>  
  
 [!code-csharp[IErrorHandler#6](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#6)]
 [!code-vb[IErrorHandler#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#6)]  
  
 <span data-ttu-id="f5faa-121">次のコード例では、サービス動作を使用して、<xref:System.ServiceModel.Dispatcher.IErrorHandler> の実装を <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> プロパティに追加する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f5faa-121">The following code example shows how to use a service behavior to add the <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.</span></span>  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 <span data-ttu-id="f5faa-122">次のコード例では、アプリケーション構成ファイルを使用してサービス動作を読み込むようにサービスを構成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f5faa-122">The following code example shows how to configure the service to load the service behavior using an application configuration file.</span></span> <span data-ttu-id="f5faa-123">構成ファイル内のサービス動作を公開する方法の詳細については、「<xref:System.ServiceModel.Description.IServiceBehavior>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f5faa-123">For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.</span></span>  

 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="HandleError">
      <MemberSignature Language="C#" Value="public bool HandleError (Exception error);" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HandleError(class System.Exception error) cil managed" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Function HandleError (error As Exception) As Boolean" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HandleError(Exception ^ error);" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member HandleError : Exception -&gt; bool" Usage="iErrorHandler.HandleError error" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C#" Value="public bool HandleError (Exception exception);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HandleError(class System.Exception exception) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function HandleError (exception As Exception) As Boolean" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HandleError(Exception ^ exception);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member HandleError : Exception -&gt; bool" Usage="iErrorHandler.HandleError exception" FrameworkAlternate="xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.Exception" Index="0" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="exception" Type="System.Exception" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="error"><span data-ttu-id="f5faa-124">処理中にスローされた例外。</span><span class="sxs-lookup"><span data-stu-id="f5faa-124">The exception thrown during processing.</span></span></param>
        <param name="exception"><span data-ttu-id="f5faa-125">処理中にスローされた例外。</span><span class="sxs-lookup"><span data-stu-id="f5faa-125">The exception thrown during processing.</span></span></param>
        <summary><span data-ttu-id="f5faa-126">エラー関連の処理を可能にし、特定の状況でセッションおよびインスタンス コンテキストをディスパッチャーが中断するかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="f5faa-126">Enables error-related processing and returns a value that indicates whether the dispatcher aborts the session and the instance context in certain cases.</span></span></summary>
        <returns><span data-ttu-id="f5faa-127">インスタンス コンテキストが <see cref="F:System.ServiceModel.InstanceContextMode.Single" /> でない場合、Windows Communication Foundation (WCF) でセッション (存在する場合) およびインスタンス コンテキストを中断しない場合は <see langword="true" />、そうでない場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f5faa-127"><see langword="true" /> if Windows Communication Foundation (WCF) should not abort the session (if there is one) and instance context if the instance context is not <see cref="F:System.ServiceModel.InstanceContextMode.Single" />; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="f5faa-128">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="f5faa-128">The default is <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5faa-129">エラー ログの記録、システム通知、アプリケーションのシャットダウンなどのエラー関連動作を実装し、例外が適切に処理されたかどうかを示す値を返すには、<xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="f5faa-129">Use the <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> method to implement error-related behaviors such as error logging, system notifications, shutting down the application, and so on, and return a value that specifies whether the exception has been handled appropriately.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f5faa-130"><xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> メソッドはさまざまな場所から呼び出すことができるため、このメソッドがどのスレッドで呼び出されるのかについての保証はありません。</span><span class="sxs-lookup"><span data-stu-id="f5faa-130">Because the <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> method can be called from many different places there are no guarantees made about which thread the method is called on.</span></span> <span data-ttu-id="f5faa-131"><xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> メソッドが操作スレッドで呼び出されるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="f5faa-131">Do not depend on <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> method being called on the operation thread.</span></span>  
  
 <span data-ttu-id="f5faa-132">すべての <xref:System.ServiceModel.Dispatcher.IErrorHandler> 実装が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="f5faa-132">All <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementations are called.</span></span> <span data-ttu-id="f5faa-133">既定では (戻り値が `false`の場合)、例外が発生すると、ディスパッチャーはすべてのセッションを中止し、<xref:System.ServiceModel.InstanceContextMode> が <xref:System.ServiceModel.InstanceContextMode.Single>以外のものである場合は <xref:System.ServiceModel.InstanceContext> を中止します。</span><span class="sxs-lookup"><span data-stu-id="f5faa-133">By default (when the return value is `false`), if there is an exception, the dispatcher aborts any session and aborts the <xref:System.ServiceModel.InstanceContext> if the <xref:System.ServiceModel.InstanceContextMode> is anything other than <xref:System.ServiceModel.InstanceContextMode.Single>.</span></span>  <span data-ttu-id="f5faa-134">例外はハンドルされない例外と見なされ、どの状態も破損していると見なされます。</span><span class="sxs-lookup"><span data-stu-id="f5faa-134">The exception is then considered unhandled and any state is considered corrupt.</span></span>  
  
 <span data-ttu-id="f5faa-135">この既定の動作を回避するには、`true` から <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> を返します。</span><span class="sxs-lookup"><span data-stu-id="f5faa-135">Return `true` from <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> to prevent this default behavior.</span></span> <span data-ttu-id="f5faa-136">エラーハンドラーが `true` 返す場合は、失敗した要求に関連付けられている状態を継続して使用することが安全であることを WCF に指示します。</span><span class="sxs-lookup"><span data-stu-id="f5faa-136">If any error handler returns `true` it instructs WCF that it is safe to continue using state associated with the failed request.</span></span>  
  
 <span data-ttu-id="f5faa-137">エラー ハンドラーが `true` メソッドから<xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> を返さない場合、例外は未処理と見なされて既定の応答が適用されます。そして、セッション チャネルで通信を行う際や <xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType> プロパティが <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> に設定されていない場合、<xref:System.ServiceModel.InstanceContextMode.Single?displayProperty=nameWithType> とチャネルが中断する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f5faa-137">If no error handler returns `true` from the <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> method the exception is considered unhandled and the default response applies, potentially resulting in an aborted <xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType> and channel when communicating on a session channel or the <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> property is not set to <xref:System.ServiceModel.InstanceContextMode.Single?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="f5faa-138">`error` パラメーターは、`null` になることはなく、スローされた例外オブジェクトを格納します。</span><span class="sxs-lookup"><span data-stu-id="f5faa-138">The `error` parameter is never `null` and contains the exception object that was thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5faa-139">次のコード例では、サービス メソッドがマネージド例外をスローしたときに、<xref:System.ServiceModel.Dispatcher.IErrorHandler> 型の <xref:System.ServiceModel.FaultException%601> だけを返す `GreetingFault` を実装するサービスを示します。</span><span class="sxs-lookup"><span data-stu-id="f5faa-139">The following code example demonstrates a service that implements <xref:System.ServiceModel.Dispatcher.IErrorHandler> that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.</span></span>  
  
 [!code-csharp[IErrorHandler#6](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#6)]
 [!code-vb[IErrorHandler#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#6)]  
  
 <span data-ttu-id="f5faa-140">次のコード例では、サービス動作を使用して、<xref:System.ServiceModel.Dispatcher.IErrorHandler> の実装を <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> プロパティに追加する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f5faa-140">The following code example shows how to use a service behavior to add the <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.</span></span>  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 <span data-ttu-id="f5faa-141">次のコード例では、アプリケーション構成ファイルを使用してサービス動作を読み込むようにサービスを構成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f5faa-141">The following code example shows how to configure the service to load the service behavior using an application configuration file.</span></span> <span data-ttu-id="f5faa-142">構成ファイル内のサービス動作を公開する方法の詳細については、「<xref:System.ServiceModel.Description.IServiceBehavior>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f5faa-142">For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.</span></span>  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProvideFault">
      <MemberSignature Language="C#" Value="public void ProvideFault (Exception error, System.ServiceModel.Channels.MessageVersion version, ref System.ServiceModel.Channels.Message fault);" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProvideFault(class System.Exception error, class System.ServiceModel.Channels.MessageVersion version, class System.ServiceModel.Channels.Message&amp; fault) cil managed" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ProvideFault (error As Exception, version As MessageVersion, ByRef fault As Message)" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ProvideFault(Exception ^ error, System::ServiceModel::Channels::MessageVersion ^ version, System::ServiceModel::Channels::Message ^ % fault);" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member ProvideFault : Exception * System.ServiceModel.Channels.MessageVersion * Message -&gt; unit" Usage="iErrorHandler.ProvideFault (error, version, fault)" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C#" Value="public void ProvideFault (Exception exception, System.ServiceModel.Channels.MessageVersion version, ref System.ServiceModel.Channels.Message fault);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProvideFault(class System.Exception exception, class System.ServiceModel.Channels.MessageVersion version, class System.ServiceModel.Channels.Message&amp; fault) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub ProvideFault (exception As Exception, version As MessageVersion, ByRef fault As Message)" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ProvideFault(Exception ^ exception, System::ServiceModel::Channels::MessageVersion ^ version, System::ServiceModel::Channels::Message ^ % fault);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member ProvideFault : Exception * System.ServiceModel.Channels.MessageVersion * Message -&gt; unit" Usage="iErrorHandler.ProvideFault (exception, version, fault)" FrameworkAlternate="xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.Exception" Index="0" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="exception" Type="System.Exception" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="version" Type="System.ServiceModel.Channels.MessageVersion" Index="1" />
        <Parameter Name="fault" Type="System.ServiceModel.Channels.Message" RefType="ref" Index="2" />
      </Parameters>
      <Docs>
        <param name="error"><span data-ttu-id="f5faa-143">サービス操作の過程でスローされる <see cref="T:System.Exception" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f5faa-143">The <see cref="T:System.Exception" /> object thrown in the course of the service operation.</span></span></param>
        <param name="exception"><span data-ttu-id="f5faa-144">サービス操作の過程でスローされる <see cref="T:System.Exception" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f5faa-144">The <see cref="T:System.Exception" /> object thrown in the course of the service operation.</span></span></param>
        <param name="version"><span data-ttu-id="f5faa-145">SOAP バージョンのメッセージ。</span><span class="sxs-lookup"><span data-stu-id="f5faa-145">The SOAP version of the message.</span></span></param>
        <param name="fault"><span data-ttu-id="f5faa-146">クライアントまたはサービス (双方向の場合) に返される <see cref="T:System.ServiceModel.Channels.Message" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f5faa-146">The <see cref="T:System.ServiceModel.Channels.Message" /> object that is returned to the client, or service, in the duplex case.</span></span></param>
        <summary><span data-ttu-id="f5faa-147">サービス メソッドの途中で例外から返されるカスタム <see cref="T:System.ServiceModel.FaultException`1" /> を作成できます。</span><span class="sxs-lookup"><span data-stu-id="f5faa-147">Enables the creation of a custom <see cref="T:System.ServiceModel.FaultException`1" /> that is returned from an exception in the course of a service method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5faa-148"><xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> メソッドを実装して、クライアントに返されるカスタムのエラー メッセージを作成します。</span><span class="sxs-lookup"><span data-stu-id="f5faa-148">Implement the <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> method to create a custom fault message that is returned to the client.</span></span>  <span data-ttu-id="f5faa-149"><xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> メソッドは、操作を終了する例外に対して常に呼び出されます。ただし、WCF ランタイムが例外を特に致命的と認識し、例外自体を再スローする場合を除きます。</span><span class="sxs-lookup"><span data-stu-id="f5faa-149">The <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> method will always be called for exceptions that leave operations, except when the WCF runtime recognizes the exception as especially fatal and rethrows the exception itself.</span></span> <span data-ttu-id="f5faa-150">すべての <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 実装が呼び出されたときに、エラー メッセージがクライアントに返されます (`fault` が `null` 以外の場合)。</span><span class="sxs-lookup"><span data-stu-id="f5faa-150">When all <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> implementations have been called, the fault message is sent back to the client (if `fault` is non-`null`).</span></span> <span data-ttu-id="f5faa-151">`fault` パラメーターが `null` 場合は、既定のエラーがクライアントに送信されます。</span><span class="sxs-lookup"><span data-stu-id="f5faa-151">If the `fault` parameter is `null` the default fault is sent to the client.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f5faa-152">処理エラーの原因となった受信メッセージは、このメソッドの間に <xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=nameWithType> プロパティから入手できます。</span><span class="sxs-lookup"><span data-stu-id="f5faa-152">The inbound message that caused the processing error is available during this method from the <xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=nameWithType> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f5faa-153"><xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> メソッドはさまざまな場所から呼び出すことができるため、このメソッドがどのスレッドで呼び出されるのかについての保証はありません。</span><span class="sxs-lookup"><span data-stu-id="f5faa-153">Because the <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> method can be called from many different places there are no guarantees made about which thread the method is called on.</span></span> <span data-ttu-id="f5faa-154"><xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> メソッドが操作スレッドで呼び出されるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="f5faa-154">Do not depend on <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> method being called on the operation thread.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5faa-155">次のコード例では、サービス メソッドがマネージド例外をスローしたときに、<xref:System.ServiceModel.Dispatcher.IErrorHandler> 型の <xref:System.ServiceModel.FaultException%601> だけを返す `GreetingFault` を実装するサービスを示します。</span><span class="sxs-lookup"><span data-stu-id="f5faa-155">The following code example demonstrates a service that implements <xref:System.ServiceModel.Dispatcher.IErrorHandler> that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.</span></span>  
  
 [!code-csharp[IErrorHandler#6](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#6)]
 [!code-vb[IErrorHandler#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#6)]  
  
 <span data-ttu-id="f5faa-156">次のコード例では、サービス動作を使用して、<xref:System.ServiceModel.Dispatcher.IErrorHandler> の実装を <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> プロパティに追加する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f5faa-156">The following code example shows how to use a service behavior to add the <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.</span></span>  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 <span data-ttu-id="f5faa-157">次のコード例では、アプリケーション構成ファイルを使用してサービス動作を読み込むようにサービスを構成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f5faa-157">The following code example shows how to configure the service to load the service behavior using an application configuration file.</span></span> <span data-ttu-id="f5faa-158">構成ファイル内のサービス動作を公開する方法の詳細については、「<xref:System.ServiceModel.Description.IServiceBehavior>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f5faa-158">For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.</span></span>  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
