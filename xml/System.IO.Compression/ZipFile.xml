<Type Name="ZipFile" FullName="System.IO.Compression.ZipFile">
  <Metadata><Meta Name="ms.openlocfilehash" Value="269ebd50b3f1373f5fd0e5fc7e9a1a96a7986dec" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75133285" /></Metadata><TypeSignature Language="C#" Value="public static class ZipFile" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ZipFile extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.Compression.ZipFile" />
  <TypeSignature Language="VB.NET" Value="Public Class ZipFile" />
  <TypeSignature Language="C++ CLI" Value="public ref class ZipFile abstract sealed" />
  <TypeSignature Language="F#" Value="type ZipFile = class" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
    <AssemblyVersion>4.0.5.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>zip アーカイブの作成、抽出、および解凍の静的メソッドを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <xref:System.IO.Compression.ZipFile> クラスを使用するには、プロジェクトの `System.IO.Compression.FileSystem` アセンブリへの参照を追加する必要があります。そうしないと、コンパイル時に次のエラーメッセージが表示されます。**現在のコンテキストに ' ZipFile ' という名前は存在しません**。 Visual Studio でプロジェクトに参照を追加する方法の詳細については、「[方法: 参照マネージャーを使用して参照を追加または削除](https://msdn.microsoft.com/library/1aabb520-99b0-46c6-9368-21b4d84793eb)する」を参照してください。  
  
 Zip アーカイブとそのファイルを操作するためのメソッドは、<xref:System.IO.Compression.ZipFile>、<xref:System.IO.Compression.ZipArchive>、および <xref:System.IO.Compression.ZipArchiveEntry>の3つのクラスに分散しています。  
  
|宛先|使用するケース|  
|---------|----------|  
|ディレクトリから zip アーカイブを作成する|<xref:System.IO.Compression.ZipFile.CreateFromDirectory%2A?displayProperty=nameWithType>|  
|Zip アーカイブの内容をディレクトリに抽出する|<xref:System.IO.Compression.ZipFile.ExtractToDirectory%2A?displayProperty=nameWithType>|  
|既存の zip アーカイブに新しいファイルを追加する|<xref:System.IO.Compression.ZipArchive.CreateEntry%2A?displayProperty=nameWithType>|  
|Zip アーカイブ内のファイルを取得する|<xref:System.IO.Compression.ZipArchive.GetEntry%2A?displayProperty=nameWithType>|  
|Zip アーカイブ内のすべてのファイルを取得する|<xref:System.IO.Compression.ZipArchive.Entries%2A?displayProperty=nameWithType>|  
|Zip アーカイブに含まれる個々のファイルへのストリームを開くには|<xref:System.IO.Compression.ZipArchiveEntry.Open%2A?displayProperty=nameWithType>|  
|Zip アーカイブからファイルを削除する|<xref:System.IO.Compression.ZipArchiveEntry.Delete%2A?displayProperty=nameWithType>|  
  
 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] アプリで <xref:System.IO.Compression.ZipFile> クラスまたは <xref:System.IO.Compression.ZipFileExtensions> クラスを使用することはできません。 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] アプリでは、次のクラスを使用して圧縮ファイルを操作する必要があります。  
  
-   <xref:System.IO.Compression.ZipArchive>  
  
-   <xref:System.IO.Compression.ZipArchiveEntry>  
  
-   <xref:System.IO.Compression.DeflateStream>  
  
-   <xref:System.IO.Compression.GZipStream>  
  
   
  
## Examples  
 この例では、<xref:System.IO.Compression.ZipFile> クラスを使用して zip アーカイブを作成および抽出する方法を示します。 フォルダーの内容を zip アーカイブに圧縮し、そのコンテンツを新しいフォルダーに抽出します。  
  
> [!TIP]
>  <xref:System.IO.Compression.ZipFile> クラスを使用するには、プロジェクトの `System.IO.Compression.FileSystem` アセンブリを参照する必要があります。  
  
 [!code-csharp[System.IO.Compression.ZipFile#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.zipfile/cs/program1.cs#1)]
 [!code-vb[System.IO.Compression.ZipFile#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.zipfile/vb/program1.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/1aabb520-99b0-46c6-9368-21b4d84793eb">方法: 参照マネージャーを使用して参照を追加または削除する</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="CreateFromDirectory">
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したディレクトリのファイルおよびディレクトリを含む zip アーカイブを作成します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateFromDirectory">
      <MemberSignature Language="C#" Value="public static void CreateFromDirectory (string sourceDirectoryName, string destinationArchiveFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CreateFromDirectory (sourceDirectoryName As String, destinationArchiveFileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateFromDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationArchiveFileName);" />
      <MemberSignature Language="F#" Value="static member CreateFromDirectory : string * string -&gt; unit" Usage="System.IO.Compression.ZipFile.CreateFromDirectory (sourceDirectoryName, destinationArchiveFileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationArchiveFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">アーカイブするディレクトリのパス。相対パスまたは絶対パスとして指定します。 相対パスは、現在の作業ディレクトリに対して相対的に解釈されます。</param>
        <param name="destinationArchiveFileName">作成するアーカイブのパス。相対パスまたは絶対パスとして指定します。 相対パスは、現在の作業ディレクトリに対して相対的に解釈されます。</param>
        <summary>指定したディレクトリのファイルおよびディレクトリを含む zip アーカイブを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ファイルシステムのディレクトリ構造はアーカイブ内に保持されます。 ディレクトリが空の場合は、空のアーカイブが作成されます。 このメソッドのオーバーロードにはアーカイブ内のベースディレクトリは含まれず、圧縮レベルを指定することはできません。 ベースディレクトリを含める場合、または圧縮レベルを指定する場合は、<xref:System.IO.Compression.ZipFile.CreateFromDirectory%28System.String%2CSystem.String%2CSystem.IO.Compression.CompressionLevel%2CSystem.Boolean%29> メソッドのオーバーロードを呼び出します。  
  
 アーカイブが既に存在する場合は、<xref:System.IO.IOException> 例外がスローされます。 指定した名前のエントリがアーカイブ内に既に存在する場合は、同じ名前で2番目のエントリが作成されます。  
  
 ディレクトリ内のファイルをアーカイブに追加できない場合、アーカイブは不完全なままで無効になり、メソッドは <xref:System.IO.IOException> 例外をスローします。  
  
   
  
## Examples  
 この例では、<xref:System.IO.Compression.ZipFile> クラスを使用して zip アーカイブを作成および抽出する方法を示します。 フォルダーの内容を zip アーカイブに圧縮し、そのコンテンツを新しいフォルダーに抽出します。 <xref:System.IO.Compression.ZipFile> クラスを使用するには、プロジェクトの `System.IO.Compression.FileSystem` アセンブリを参照する必要があります。  
  
 [!code-csharp[System.IO.Compression.ZipFile#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.zipfile/cs/program1.cs#1)]
 [!code-vb[System.IO.Compression.ZipFile#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.zipfile/vb/program1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="sourceDirectoryName" /> または <paramref name="destinationArchiveFileName" /> が <see cref="F:System.String.Empty" /> であるか、空白文字のみが含まれているか、無効な文字が少なくとも 1 つ含まれています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceDirectoryName" /> または <paramref name="destinationArchiveFileName" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException"><paramref name="sourceDirectoryName" /> または <paramref name="destinationArchiveFileName" /> で、指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="sourceDirectoryName" /> が無効または存在しません (割り当てられていないドライブであるなど)。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="destinationArchiveFileName" /> が既に存在します。  
  
または 
指定したディレクトリのファイルが開きませんでした。</exception>
        <exception cref="T:System.UnauthorizedAccessException"><paramref name="destinationArchiveFileName" /> がディレクトリを指定しています。  
  
または 
呼び出し元に <paramref name="sourceDirectoryName" /> で指定されたディレクトリまたは <paramref name="destinationArchiveFileName" /> で指定されたファイルにアクセスするために必要なアクセス許可がありません。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="sourceDirectoryName" /> または <paramref name="destinationArchiveFileName" /> に無効な書式が含まれています。  
  
または 
zip アーカイブは書き込みをサポートしません。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromDirectory">
      <MemberSignature Language="C#" Value="public static void CreateFromDirectory (string sourceDirectoryName, string destinationArchiveFileName, System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName, valuetype System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String,System.IO.Compression.CompressionLevel,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateFromDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationArchiveFileName, System::IO::Compression::CompressionLevel compressionLevel, bool includeBaseDirectory);" />
      <MemberSignature Language="F#" Value="static member CreateFromDirectory : string * string * System.IO.Compression.CompressionLevel * bool -&gt; unit" Usage="System.IO.Compression.ZipFile.CreateFromDirectory (sourceDirectoryName, destinationArchiveFileName, compressionLevel, includeBaseDirectory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationArchiveFileName" Type="System.String" />
        <Parameter Name="compressionLevel" Type="System.IO.Compression.CompressionLevel" />
        <Parameter Name="includeBaseDirectory" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">アーカイブするディレクトリのパス。相対パスまたは絶対パスとして指定します。 相対パスは、現在の作業ディレクトリに対して相対的に解釈されます。</param>
        <param name="destinationArchiveFileName">作成するアーカイブのパス。相対パスまたは絶対パスとして指定します。 相対パスは、現在の作業ディレクトリに対して相対的に解釈されます。</param>
        <param name="compressionLevel">エントリの作成時に速度または圧縮の有効性を強調するかどうかを示す列挙値の 1 つ。</param>
        <param name="includeBaseDirectory">アーカイブのルートにある <see langword="true" /> からのディレクトリ名を含める場合は <paramref name="sourceDirectoryName" />。ディレクトリの内容のみを含める場合は <see langword="false" />。</param>
        <summary>指定したディレクトリのファイルおよびディレクトリを含む zip アーカイブを作成し、指定した圧縮レベルを使用し、オプションでベース ディレクトリを含みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ファイルシステムのディレクトリ構造はアーカイブ内に保持されます。 ディレクトリが空の場合は、空のアーカイブが作成されます。 このメソッドオーバーロードを使用して、圧縮レベルと、アーカイブにベースディレクトリを含めるかどうかを指定します。  
  
 アーカイブが既に存在する場合は、<xref:System.IO.IOException> 例外がスローされます。 指定した名前のエントリがアーカイブ内に既に存在する場合は、同じ名前で2番目のエントリが作成されます。  
  
 ディレクトリ内のファイルをアーカイブに追加できない場合、アーカイブは不完全なままで無効になり、メソッドは <xref:System.IO.IOException> 例外をスローします。  
  
   
  
## Examples  
 この例では、<xref:System.IO.Compression.ZipFile> クラスを使用して zip アーカイブを作成および抽出する方法を示します。 フォルダーの内容を zip アーカイブに圧縮し、そのコンテンツを新しいフォルダーに抽出します。 アーカイブを圧縮すると、ベースディレクトリが含められ、圧縮レベルが設定され、操作の速度が効率を超えて強調されます。 <xref:System.IO.Compression.ZipFile> クラスを使用するには、プロジェクトの `System.IO.Compression.FileSystem` アセンブリを参照する必要があります。  
  
 [!code-csharp[System.IO.Compression.ZipFile#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.zipfile/cs/program2.cs#2)]
 [!code-vb[System.IO.Compression.ZipFile#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.zipfile/vb/program2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="sourceDirectoryName" /> または <paramref name="destinationArchiveFileName" /> が <see cref="F:System.String.Empty" /> であるか、空白文字のみが含まれているか、無効な文字が少なくとも 1 つ含まれています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceDirectoryName" /> または <paramref name="destinationArchiveFileName" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException"><paramref name="sourceDirectoryName" /> または <paramref name="destinationArchiveFileName" /> で、指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="sourceDirectoryName" /> が無効または存在しません (割り当てられていないドライブであるなど)。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="destinationArchiveFileName" /> が既に存在します。  
  
または 
指定したディレクトリのファイルが開きませんでした。</exception>
        <exception cref="T:System.UnauthorizedAccessException"><paramref name="destinationArchiveFileName" /> がディレクトリを指定しています。  
  
または 
呼び出し元に <paramref name="sourceDirectoryName" /> で指定されたディレクトリまたは <paramref name="destinationArchiveFileName" /> で指定されたファイルにアクセスするために必要なアクセス許可がありません。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="sourceDirectoryName" /> または <paramref name="destinationArchiveFileName" /> に無効な書式が含まれています。  
  
または 
zip アーカイブは書き込みをサポートしません。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromDirectory">
      <MemberSignature Language="C#" Value="public static void CreateFromDirectory (string sourceDirectoryName, string destinationArchiveFileName, System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory, System.Text.Encoding entryNameEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName, valuetype System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory, class System.Text.Encoding entryNameEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String,System.IO.Compression.CompressionLevel,System.Boolean,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateFromDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationArchiveFileName, System::IO::Compression::CompressionLevel compressionLevel, bool includeBaseDirectory, System::Text::Encoding ^ entryNameEncoding);" />
      <MemberSignature Language="F#" Value="static member CreateFromDirectory : string * string * System.IO.Compression.CompressionLevel * bool * System.Text.Encoding -&gt; unit" Usage="System.IO.Compression.ZipFile.CreateFromDirectory (sourceDirectoryName, destinationArchiveFileName, compressionLevel, includeBaseDirectory, entryNameEncoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationArchiveFileName" Type="System.String" />
        <Parameter Name="compressionLevel" Type="System.IO.Compression.CompressionLevel" />
        <Parameter Name="includeBaseDirectory" Type="System.Boolean" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">アーカイブするディレクトリのパス。相対パスまたは絶対パスとして指定します。 相対パスは、現在の作業ディレクトリに対して相対的に解釈されます。</param>
        <param name="destinationArchiveFileName">作成するアーカイブのパス。相対パスまたは絶対パスとして指定します。 相対パスは、現在の作業ディレクトリに対して相対的に解釈されます。</param>
        <param name="compressionLevel">エントリの作成時に速度または圧縮の有効性を強調するかどうかを示す列挙値の 1 つ。</param>
        <param name="includeBaseDirectory">アーカイブのルートにある <see langword="true" /> からのディレクトリ名を含める場合は <paramref name="sourceDirectoryName" />。ディレクトリの内容のみを含める場合は <see langword="false" />。</param>
        <param name="entryNameEncoding">このアーカイブのエントリ名の読み取りまたは書き込み時に使用するエンコード。 エントリ名の UTF-8 エンコードをサポートしない zip アーカイブ ツールとライブラリとの相互運用性のためにエンコードが必要な場合にのみ、このパラメーターの値を指定してください。</param>
        <summary>指定したディレクトリのファイルおよびディレクトリを含む zip アーカイブを作成し、指定した圧縮レベルとエントリ名の文字エンコーディングを使用し、オプションでベース ディレクトリを含みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ファイルシステムのディレクトリ構造はアーカイブ内に保持されます。 ディレクトリが空の場合は、空のアーカイブが作成されます。 このメソッドオーバーロードを使用して、圧縮レベルと文字エンコーディングを指定し、アーカイブにベースディレクトリを含めるかどうかを指定します。  
  
 アーカイブが既に存在する場合は、<xref:System.IO.IOException> 例外がスローされます。 指定した名前のエントリがアーカイブ内に既に存在する場合は、同じ名前で2番目のエントリが作成されます。  
  
 ディレクトリ内のファイルをアーカイブに追加できない場合、アーカイブは不完全なままで無効になり、メソッドは <xref:System.IO.IOException> 例外をスローします。  
  
 `entryNameEncoding` が `null`以外の値に設定されている場合は、指定されたエンコーディングを使用してエントリ名がエンコードされます。 指定されたエンコーディングが UTF-8 の場合、言語エンコードフラグ (ローカルファイルヘッダーの汎用ビットフラグ) が各エントリに対して設定されます。  
  
 `entryNameEncoding` が `null`に設定されている場合、エントリ名は次の規則に従ってエンコードされます。  
  
-   ASCII の範囲外の文字を含むエントリ名の場合、言語エンコードフラグが設定され、UTF-8 を使用してエントリ名がエンコードされます。  
  
-   ASCII 文字のみを含むエントリ名の場合、言語エンコードフラグが設定され、現在のシステムの既定のコードページを使用してエントリ名がエンコードされます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="sourceDirectoryName" /> または <paramref name="destinationArchiveFileName" /> が <see cref="F:System.String.Empty" /> であるか、空白文字のみが含まれているか、無効な文字が少なくとも 1 つ含まれています。  
  
または 
 <paramref name="entryNameEncoding" /> は UTF-8 以外の Unicode エンコーディングに設定されています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceDirectoryName" /> または <paramref name="destinationArchiveFileName" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException"><paramref name="sourceDirectoryName" /> または <paramref name="destinationArchiveFileName" /> で、指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="sourceDirectoryName" /> が無効または存在しません (割り当てられていないドライブであるなど)。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="destinationArchiveFileName" /> が既に存在します。  
  
または 
指定したディレクトリのファイルが開きませんでした。</exception>
        <exception cref="T:System.UnauthorizedAccessException"><paramref name="destinationArchiveFileName" /> がディレクトリを指定しています。  
  
または 
呼び出し元に <paramref name="sourceDirectoryName" /> で指定されたディレクトリまたは <paramref name="destinationArchiveFileName" /> で指定されたファイルにアクセスするために必要なアクセス許可がありません。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="sourceDirectoryName" /> または <paramref name="destinationArchiveFileName" /> に無効な書式が含まれています。  
  
または 
zip アーカイブは書き込みをサポートしません。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExtractToDirectory">
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した zip アーカイブのすべてのファイルをファイル システムのディレクトリに抽出します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExtractToDirectory">
      <MemberSignature Language="C#" Value="public static void ExtractToDirectory (string sourceArchiveFileName, string destinationDirectoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExtractToDirectory (sourceArchiveFileName As String, destinationDirectoryName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExtractToDirectory(System::String ^ sourceArchiveFileName, System::String ^ destinationDirectoryName);" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectory : string * string -&gt; unit" Usage="System.IO.Compression.ZipFile.ExtractToDirectory (sourceArchiveFileName, destinationDirectoryName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArchiveFileName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceArchiveFileName">抽出するアーカイブのパス。</param>
        <param name="destinationDirectoryName">抽出ファイルを置くディレクトリのパス。相対パスまたは絶対パスとして指定します。 相対パスは、現在の作業ディレクトリに対して相対的に解釈されます。</param>
        <summary>指定した zip アーカイブのすべてのファイルをファイル システムのディレクトリに抽出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定されたディレクトリとすべてのサブディレクトリを作成します。 コピー先のディレクトリが既に存在することはできません。 `destinationDirectoryName` パラメーターまたは `sourceArchiveFileName` パラメーターのパスの検証に関連する例外は、抽出の前にスローされます。 それ以外の場合、抽出中にエラーが発生すると、アーカイブは部分的に抽出されたままになります。 抽出された各ファイルには、`destinationDirectoryName` によって指定されたディレクトリへの相対パスがあります。ソースエントリはアーカイブのルートにあります。  
  
   
  
## Examples  
 この例では、<xref:System.IO.Compression.ZipFile> クラスを使用して zip アーカイブを作成および抽出する方法を示します。 フォルダーの内容を zip 形式のアーカイブに圧縮し、そのコンテンツを新しいフォルダーに抽出します。 <xref:System.IO.Compression.ZipFile> クラスを使用するには、プロジェクトの `System.IO.Compression.FileSystem` アセンブリを参照する必要があります。  
  
 [!code-csharp[System.IO.Compression.ZipFile#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.zipfile/cs/program1.cs#1)]
 [!code-vb[System.IO.Compression.ZipFile#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.zipfile/vb/program1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="destinationDirectoryName" /> または <paramref name="sourceArchiveFileName" /> が <see cref="F:System.String.Empty" /> であるか、空白文字のみが含まれているか、無効な文字が少なくとも 1 つ含まれています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationDirectoryName" /> または <paramref name="sourceArchiveFileName" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException"><paramref name="destinationDirectoryName" /> または <paramref name="sourceArchiveFileName" /> の指定されたパスがシステムで定義されている最大長を超えています。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません (たとえば、マップされていないドライブにあるなど)。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="destinationDirectoryName" /> で指定したディレクトリが既に存在します。  
  
または 
アーカイブ内のエントリの名前が <see cref="F:System.String.Empty" /> か、空白のみが含まれているか、無効な文字が少なくとも 1 つ含まれています。  
  
または 
アーカイブ エントリを抽出すると、<paramref name="destinationDirectoryName" /> で指定されているディレクトリの外部にファイルが作成されます。 (たとえば、これはエントリ名に親ディレクトリのアクセサーが含まれている場合に発生する可能性があります。) 
または 
抽出するアーカイブ エントリの名前が、同じアーカイブから既に抽出したエントリと同じです。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、アーカイブまたは目的のディレクトリにアクセスするために必要な許可がありません。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="destinationDirectoryName" /> または <paramref name="sourceArchiveFileName" /> に無効な書式が含まれています。</exception>
        <exception cref="T:System.IO.FileNotFoundException"><paramref name="sourceArchiveFileName" /> が見つかりませんでした。</exception>
        <exception cref="T:System.IO.InvalidDataException"><paramref name="sourceArchiveFileName" /> で指定されたアーカイブが有効な zip アーカイブではありません。  
  
または 
アーカイブ エントリが見つからないか、破損しています。  
  
または 
アーカイブ エントリがサポートされていない圧縮方式を使用して圧縮されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtractToDirectory">
      <MemberSignature Language="C#" Value="public static void ExtractToDirectory (string sourceArchiveFileName, string destinationDirectoryName, bool overwriteFiles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName, bool overwriteFiles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExtractToDirectory (sourceArchiveFileName As String, destinationDirectoryName As String, overwriteFiles As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExtractToDirectory(System::String ^ sourceArchiveFileName, System::String ^ destinationDirectoryName, bool overwriteFiles);" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectory : string * string * bool -&gt; unit" Usage="System.IO.Compression.ZipFile.ExtractToDirectory (sourceArchiveFileName, destinationDirectoryName, overwriteFiles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArchiveFileName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="destinationDirectoryName" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="overwriteFiles" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="sourceArchiveFileName">抽出されるアーカイブへのファイル システム上のパス。</param>
        <param name="destinationDirectoryName">ファイル システム上のコピー先ディレクトリへのパス。 指定されたディレクトリは存在する必要がありませんが、含まれるディレクトリは存在する必要があります。</param>
        <param name="overwriteFiles">ファイルを上書きする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>指定したアーカイブのすべてのファイルをファイル システムのディレクトリに抽出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 指定されたディレクトリが存在してはなりません。 メソッドは、指定されたディレクトリとすべてのサブディレクトリを作成します。
 
 アーカイブの抽出中にエラーが発生した場合、アーカイブは部分的に抽出されたままになります。
  
 抽出されたファイルの相対パスが、アーカイブに対するエントリの場合と同じ `destinationDirectoryName` になるように、各エントリが抽出されます。
 
 パスには、相対パスまたは絶対パス情報を指定できます。 相対パスは、現在の作業ディレクトリに対して相対的に解釈されます。
 
 アーカイブ対象のファイルの最終更新時刻が無効である場合、Zip タイムスタンプ形式 (1980 年1月1日午前0時) で表現できる最初の日付と時刻が使用されます。

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="sourceArchiveFileName" /> または <paramref name="destinationDirectoryName" /> は長さ 0 の文字列で、空白のみが含まれるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つまたは複数の無効な文字が含まれます。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceArchiveFileName" /> または <paramref name="destinationDirectoryName" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException"><paramref name="sourceArchiveFileName" /> または <paramref name="destinationDirectoryName" /> で、システム定義の最大長を超えるパス、ファイル名、またはその両方を指定します。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="sourceArchiveFileName" /> または <paramref name="destinationDirectoryName" /> で指定されたパスが正しくありません (マップされていないドライブ上にあるなど)。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="destinationDirectoryName" /> で指定したディレクトリが既に存在します。

または

I/O エラーが発生しました。

または

<see cref="T:System.IO.Compression.ZipArchiveEntry" /> の名前は長さ 0 の文字列で、空白のみが含まれるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つまたは複数の無効な文字が含まれます。

または

<see cref="T:System.IO.Compression.ZipArchiveEntry" /> を抽出すると、(親ディレクトリのアクセサーによってなど) コピー先のディレクトリの外部にあるターゲット ファイルが生成されます。

または

<see cref="T:System.IO.Compression.ZipArchiveEntry" /> には、同じアーカイブから既に抽出されたエントリと同じ名前が付けられています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="sourceArchiveFileName" /> または <paramref name="destinationDirectoryName" /> の形式が正しくありません。</exception>
        <exception cref="T:System.IO.FileNotFoundException"><paramref name="sourceArchiveFileName" /> が見つかりませんでした。</exception>
        <exception cref="T:System.IO.InvalidDataException"><paramref name="sourceArchiveFileName" /> で指定されたアーカイブが有効な <see cref="T:System.IO.Compression.ZipArchive" /> ではありません。

または

<see cref="T:System.IO.Compression.ZipArchiveEntry" /> が見つからないか、破損しています。

または

<see cref="T:System.IO.Compression.ZipArchiveEntry" /> は、サポートされていない圧縮方法を使用して圧縮されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtractToDirectory">
      <MemberSignature Language="C#" Value="public static void ExtractToDirectory (string sourceArchiveFileName, string destinationDirectoryName, System.Text.Encoding entryNameEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName, class System.Text.Encoding entryNameEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExtractToDirectory (sourceArchiveFileName As String, destinationDirectoryName As String, entryNameEncoding As Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExtractToDirectory(System::String ^ sourceArchiveFileName, System::String ^ destinationDirectoryName, System::Text::Encoding ^ entryNameEncoding);" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectory : string * string * System.Text.Encoding -&gt; unit" Usage="System.IO.Compression.ZipFile.ExtractToDirectory (sourceArchiveFileName, destinationDirectoryName, entryNameEncoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArchiveFileName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="sourceArchiveFileName">抽出するアーカイブのパス。</param>
        <param name="destinationDirectoryName">抽出ファイルを置くディレクトリのパス。相対パスまたは絶対パスとして指定します。 相対パスは、現在の作業ディレクトリに対して相対的に解釈されます。</param>
        <param name="entryNameEncoding">このアーカイブのエントリ名の読み取りまたは書き込み時に使用するエンコード。 エントリ名の UTF-8 エンコードをサポートしない zip アーカイブ ツールとライブラリとの相互運用性のためにエンコードが必要な場合にのみ、このパラメーターの値を指定してください。</param>
        <summary>指定した zip アーカイブのすべてのファイルをファイル システムのディレクトリに抽出し、エントリ名に指定した文字エンコーディングを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定されたディレクトリとすべてのサブディレクトリを作成します。 コピー先のディレクトリが既に存在することはできません。 `destinationDirectoryName` パラメーターまたは `sourceArchiveFileName` パラメーターのパスの検証に関連する例外は、抽出の前にスローされます。 それ以外の場合、抽出中にエラーが発生すると、アーカイブは部分的に抽出されたままになります。 抽出された各ファイルには、`destinationDirectoryName` によって指定されたディレクトリへの相対パスがあります。ソースエントリはアーカイブのルートにあります。  
  
 `entryNameEncoding` が `null`以外の値に設定されている場合、エントリ名は次の規則に従ってデコードされます。  
  
-   言語エンコードフラグ (ローカルファイルヘッダーの汎用ビットフラグ) が設定されていないエントリ名の場合は、指定されたエンコーディングを使用してエントリ名がデコードされます。  
  
-   言語エンコードフラグが設定されているエントリでは、UTF-8 を使用してエントリ名がデコードされます。  
  
 `entryNameEncoding` が `null`に設定されている場合、エントリ名は次の規則に従ってデコードされます。  
  
-   言語エンコードフラグ (ローカルファイルヘッダーの汎用ビットフラグ) が設定されていないエントリの場合、エントリ名は、現在のシステムの既定のコードページを使用してデコードされます。  
  
-   言語エンコードフラグが設定されているエントリでは、UTF-8 を使用してエントリ名がデコードされます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="destinationDirectoryName" /> または <paramref name="sourceArchiveFileName" /> が <see cref="F:System.String.Empty" /> であるか、空白文字のみが含まれているか、無効な文字が少なくとも 1 つ含まれています。  
  
または 
 <paramref name="entryNameEncoding" /> は UTF-8 以外の Unicode エンコーディングに設定されています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationDirectoryName" /> または <paramref name="sourceArchiveFileName" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException"><paramref name="destinationDirectoryName" /> または <paramref name="sourceArchiveFileName" /> の指定されたパスがシステムで定義されている最大長を超えています。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません (たとえば、マップされていないドライブにあるなど)。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="destinationDirectoryName" /> で指定したディレクトリが既に存在します。  
  
または 
アーカイブ内のエントリの名前が <see cref="F:System.String.Empty" /> か、空白のみが含まれているか、無効な文字が少なくとも 1 つ含まれています。  
  
または 
アーカイブ エントリを抽出すると、<paramref name="destinationDirectoryName" /> で指定されているディレクトリの外部にファイルが作成されます。 (たとえば、これはエントリ名に親ディレクトリのアクセサーが含まれている場合に発生する可能性があります。) 
または 
抽出するアーカイブ エントリの名前が、同じアーカイブから既に抽出したエントリと同じです。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、アーカイブまたは目的のディレクトリにアクセスするために必要な許可がありません。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="destinationDirectoryName" /> または <paramref name="sourceArchiveFileName" /> に無効な書式が含まれています。</exception>
        <exception cref="T:System.IO.FileNotFoundException"><paramref name="sourceArchiveFileName" /> が見つかりませんでした。</exception>
        <exception cref="T:System.IO.InvalidDataException"><paramref name="sourceArchiveFileName" /> で指定されたアーカイブが有効な zip アーカイブではありません。  
  
または 
アーカイブ エントリが見つからないか、破損しています。  
  
または 
アーカイブ エントリがサポートされていない圧縮方式を使用して圧縮されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtractToDirectory">
      <MemberSignature Language="C#" Value="public static void ExtractToDirectory (string sourceArchiveFileName, string destinationDirectoryName, System.Text.Encoding entryNameEncoding, bool overwriteFiles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName, class System.Text.Encoding entryNameEncoding, bool overwriteFiles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExtractToDirectory (sourceArchiveFileName As String, destinationDirectoryName As String, entryNameEncoding As Encoding, overwriteFiles As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExtractToDirectory(System::String ^ sourceArchiveFileName, System::String ^ destinationDirectoryName, System::Text::Encoding ^ entryNameEncoding, bool overwriteFiles);" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectory : string * string * System.Text.Encoding * bool -&gt; unit" Usage="System.IO.Compression.ZipFile.ExtractToDirectory (sourceArchiveFileName, destinationDirectoryName, entryNameEncoding, overwriteFiles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArchiveFileName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="destinationDirectoryName" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="overwriteFiles" Type="System.Boolean" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="sourceArchiveFileName">抽出されるアーカイブへのファイル システム上のパス。</param>
        <param name="destinationDirectoryName">ファイル システム上のコピー先ディレクトリへのパス。 指定されたディレクトリは存在する必要がありませんが、含まれるディレクトリは存在する必要があります。</param>
        <param name="entryNameEncoding">この <see cref="T:System.IO.Compression.ZipArchive" /> のエントリ名の読み取り時に使用するエンコード。</param>
        <param name="overwriteFiles">ファイルを上書きする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>指定したアーカイブのすべてのファイルをファイル システムのディレクトリに抽出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 指定されたディレクトリが存在してはなりません。 このメソッドは、指定されたディレクトリとすべてのサブディレクトリを作成します。

 アーカイブの抽出中にエラーが発生した場合、アーカイブは部分的に抽出されたままになります。

 抽出されたファイルの相対パスが、アーカイブに対するエントリの場合と同じ `destinationDirectoryName` になるように、各エントリが抽出されます。

 パスには、相対パスまたは絶対パス情報を指定できます。 相対パスは、現在の作業ディレクトリに対して相対的に解釈されます。

 アーカイブ対象のファイルの最終更新時刻が無効である場合、Zip タイムスタンプ形式 (1980 年1月1日午前0時) で表現できる最初の日付と時刻が使用されます。
 
]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="sourceArchiveFileName" /> または <paramref name="destinationDirectoryName" /> は長さ 0 の文字列で、空白のみが含まれるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つまたは複数の無効な文字が含まれます。
 
または 
 <paramref name="entryNameEncoding" /> は UTF-8 以外の Unicode エンコーディングに設定されています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceArchiveFileName" /> または <paramref name="destinationDirectoryName" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException"><paramref name="sourceArchiveFileName" /> または <paramref name="destinationDirectoryName" /> で、システム定義の最大長を超えるパス、ファイル名、またはその両方を指定します。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="sourceArchiveFileName" /> または <paramref name="destinationDirectoryName" /> で指定されたパスが正しくありません (マップされていないドライブ上にあるなど)。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="destinationDirectoryName" /> で指定したディレクトリが既に存在します。

または

I/O エラーが発生しました。

または

<see cref="T:System.IO.Compression.ZipArchiveEntry" /> の名前は長さ 0 の文字列で、空白のみが含まれるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つまたは複数の無効な文字が含まれます。

または

<see cref="T:System.IO.Compression.ZipArchiveEntry" /> を抽出すると、(親ディレクトリのアクセサーによってなど) コピー先のディレクトリの外部にあるターゲット ファイルが生成されます。

または

<see cref="T:System.IO.Compression.ZipArchiveEntry" /> には、同じアーカイブから既に抽出されたエントリと同じ名前が付けられています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="sourceArchiveFileName" /> または <paramref name="destinationDirectoryName" /> の形式が正しくありません。</exception>
        <exception cref="T:System.IO.FileNotFoundException"><paramref name="sourceArchiveFileName" /> が見つかりませんでした。</exception>
        <exception cref="T:System.IO.InvalidDataException"><paramref name="sourceArchiveFileName" /> で指定されたアーカイブが有効な <see cref="T:System.IO.Compression.ZipArchive" /> ではありません。

または

アーカイブ エントリが見つからないか、破損しています。

または

サポートされていない圧縮方式を使用して、アーカイブ エントリが圧縮されています。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Open">
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したパスとモードで zip アーカイブを開きます。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Compression.ZipArchive Open (string archiveFileName, System.IO.Compression.ZipArchiveMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Compression.ZipArchive Open(string archiveFileName, valuetype System.IO.Compression.ZipArchiveMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.Open(System.String,System.IO.Compression.ZipArchiveMode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (archiveFileName As String, mode As ZipArchiveMode) As ZipArchive" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Compression::ZipArchive ^ Open(System::String ^ archiveFileName, System::IO::Compression::ZipArchiveMode mode);" />
      <MemberSignature Language="F#" Value="static member Open : string * System.IO.Compression.ZipArchiveMode -&gt; System.IO.Compression.ZipArchive" Usage="System.IO.Compression.ZipFile.Open (archiveFileName, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Compression.ZipArchive</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="archiveFileName" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.Compression.ZipArchiveMode" />
      </Parameters>
      <Docs>
        <param name="archiveFileName">開くアーカイブのパス。相対パスまたは絶対パスとして指定します。 相対パスは、現在の作業ディレクトリに対して相対的に解釈されます。</param>
        <param name="mode">開いているアーカイブのエントリで許可されている操作を指定する列挙値の 1 つ。</param>
        <summary>指定したパスとモードで zip アーカイブを開きます。</summary>
        <returns>開いている zip アーカイブ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `mode` パラメーターを <xref:System.IO.Compression.ZipArchiveMode.Read>に設定すると、ファイルモード値として <xref:System.IO.FileMode> 列挙の <xref:System.IO.FileMode.Open> を使用してアーカイブが開かれます。 アーカイブが存在しない場合は、<xref:System.IO.FileNotFoundException> 例外がスローされます。 `mode` パラメーターを <xref:System.IO.Compression.ZipArchiveMode.Read> に設定することは、<xref:System.IO.Compression.ZipFile.OpenRead%2A> メソッドを呼び出すことと同じです。  
  
 `mode` パラメーターを <xref:System.IO.Compression.ZipArchiveMode.Create>に設定すると、ファイルモード値として <xref:System.IO.FileMode.CreateNew?displayProperty=nameWithType> を使用してアーカイブが開かれます。 アーカイブが既に存在する場合は、<xref:System.IO.IOException> がスローされます。  
  
 `mode` パラメーターを <xref:System.IO.Compression.ZipArchiveMode.Update>に設定すると、ファイルモード値として <xref:System.IO.FileMode.OpenOrCreate?displayProperty=nameWithType> を使用してアーカイブが開かれます。 アーカイブが存在する場合は、そのアーカイブが開かれます。 既存のエントリを変更して、新しいエントリを作成することができます。 アーカイブが存在しない場合は、新しいアーカイブが作成されます。ただし、<xref:System.IO.Compression.ZipArchiveMode.Update> モードで zip アーカイブを作成することは、<xref:System.IO.Compression.ZipArchiveMode.Create> モードで作成するほど効率的ではありません。  
  
   
  
## Examples  
 次の例では、更新モードで zip アーカイブを開き、アーカイブにエントリを追加する方法を示します。  
  
 [!code-csharp[System.IO.Compression.ZipArchive#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.ziparchive/cs/program3.cs#3)]
 [!code-vb[System.IO.Compression.ZipArchive#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.ziparchive/vb/program3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="archiveFileName" /> が <see cref="F:System.String.Empty" /> か、空白のみが含まれているか、無効な文字が少なくとも 1 つ含まれています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="archiveFileName" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException"><paramref name="archiveFileName" /> で、指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="archiveFileName" /> が無効または存在しません (割り当てられていないドライブであるなど)。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="archiveFileName" /> を開けませんでした。  
  
または 
 <paramref name="mode" /> が <see cref="F:System.IO.Compression.ZipArchiveMode.Create" /> に設定されていますが、<paramref name="archiveFileName" /> に指定されたファイルが既に存在します。</exception>
        <exception cref="T:System.UnauthorizedAccessException"><paramref name="archiveFileName" /> がディレクトリを指定しています。  
  
または 
<paramref name="archiveFileName" /> で指定されたファイルにアクセスするために必要なアクセス許可が呼び出し元にありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" /> に無効な値が指定されています。</exception>
        <exception cref="T:System.IO.FileNotFoundException"><paramref name="mode" /> が <see cref="F:System.IO.Compression.ZipArchiveMode.Read" /> に設定されていますが、<paramref name="archiveFileName" /> に指定されたファイルが見つかりません。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="archiveFileName" /> に無効な書式指定が格納されています。</exception>
        <exception cref="T:System.IO.InvalidDataException"><paramref name="archiveFileName" /> は zip アーカイブとして解釈できませんでした。  
  
または 
 <paramref name="mode" /> が <see cref="F:System.IO.Compression.ZipArchiveMode.Update" /> ですが、エントリが見つからないか、または破損していて読み取ることができません。  
  
または 
 <paramref name="mode" /> が <see cref="F:System.IO.Compression.ZipArchiveMode.Update" /> ですが、エントリが大きすぎてメモリに収まりません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Compression.ZipArchive Open (string archiveFileName, System.IO.Compression.ZipArchiveMode mode, System.Text.Encoding entryNameEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Compression.ZipArchive Open(string archiveFileName, valuetype System.IO.Compression.ZipArchiveMode mode, class System.Text.Encoding entryNameEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.Open(System.String,System.IO.Compression.ZipArchiveMode,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (archiveFileName As String, mode As ZipArchiveMode, entryNameEncoding As Encoding) As ZipArchive" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Compression::ZipArchive ^ Open(System::String ^ archiveFileName, System::IO::Compression::ZipArchiveMode mode, System::Text::Encoding ^ entryNameEncoding);" />
      <MemberSignature Language="F#" Value="static member Open : string * System.IO.Compression.ZipArchiveMode * System.Text.Encoding -&gt; System.IO.Compression.ZipArchive" Usage="System.IO.Compression.ZipFile.Open (archiveFileName, mode, entryNameEncoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Compression.ZipArchive</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="archiveFileName" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.Compression.ZipArchiveMode" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="archiveFileName">開くアーカイブのパス。相対パスまたは絶対パスとして指定します。 相対パスは、現在の作業ディレクトリに対して相対的に解釈されます。</param>
        <param name="mode">開いているアーカイブのエントリで許可されている操作を指定する列挙値の 1 つ。</param>
        <param name="entryNameEncoding">このアーカイブのエントリ名の読み取りまたは書き込み時に使用するエンコード。 エントリ名の UTF-8 エンコードをサポートしない zip アーカイブ ツールとライブラリとの相互運用性のためにエンコードが必要な場合にのみ、このパラメーターの値を指定してください。</param>
        <summary>指定されたモードで、エントリ名に指定された文字エンコーディングを使用して指定されたパスの zip のアーカイブを開きます。</summary>
        <returns>開いている zip アーカイブ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `mode` パラメーターを <xref:System.IO.Compression.ZipArchiveMode.Read>に設定すると、ファイルモード値として <xref:System.IO.FileMode.Open?displayProperty=nameWithType> を使用してアーカイブが開かれます。 アーカイブが存在しない場合は、<xref:System.IO.FileNotFoundException> 例外がスローされます。 `mode` パラメーターを <xref:System.IO.Compression.ZipArchiveMode.Read> に設定することは、<xref:System.IO.Compression.ZipFile.OpenRead%2A> メソッドを呼び出すことと同じです。  
  
 `mode` パラメーターを <xref:System.IO.Compression.ZipArchiveMode.Create>に設定すると、ファイルモード値として <xref:System.IO.FileMode.CreateNew?displayProperty=nameWithType> を使用してアーカイブが開かれます。 アーカイブが既に存在する場合は、<xref:System.IO.IOException> がスローされます。  
  
 `mode` パラメーターを <xref:System.IO.Compression.ZipArchiveMode.Update>に設定すると、ファイルモード値として <xref:System.IO.FileMode.OpenOrCreate?displayProperty=nameWithType> を使用してアーカイブが開かれます。 アーカイブが存在する場合は、そのアーカイブが開かれます。 既存のエントリを変更して、新しいエントリを作成することができます。 アーカイブが存在しない場合は、新しいアーカイブが作成されます。ただし、<xref:System.IO.Compression.ZipArchiveMode.Update> モードで zip アーカイブを作成することは、<xref:System.IO.Compression.ZipArchiveMode.Create> モードで作成するほど効率的ではありません。  
  
 Zip アーカイブファイルを読み取り用に開いて `entryNameEncoding` が `null`に設定されている場合、エントリ名は次の規則に従ってデコードされます。  
  
-   言語エンコードフラグ (ローカルファイルヘッダーの汎用ビットフラグ) が設定されていない場合、現在のシステムの既定のコードページを使用してエントリ名がデコードされます。  
  
-   言語のエンコードフラグが設定されている場合は、UTF-8 を使用してエントリ名がデコードされます。  
  
 Zip アーカイブファイルを読み取り用に開き、`entryNameEncoding` が `null`以外の値に設定されている場合、エントリ名は次の規則に従ってデコードされます。  
  
-   言語のエンコードフラグが設定されていない場合、指定された `entryNameEncoding` を使用してエントリ名がデコードされます。  
  
-   言語のエンコードフラグが設定されている場合は、UTF-8 を使用してエントリ名がデコードされます。  
  
 アーカイブファイルに書き込むと `entryNameEncoding` が `null`に設定されている場合、エントリ名は次の規則に従ってエンコードされます。  
  
-   ASCII の範囲外の文字を含むエントリ名の場合、言語エンコードフラグが設定され、エントリ名は UTF-8 を使用してエンコードされます。  
  
-   ASCII 文字のみを含むエントリ名の場合、言語エンコードフラグは設定されず、エントリ名は、現在のシステムの既定のコードページを使用してエンコードされます。  
  
 アーカイブファイルに書き込むときに、`entryNameEncoding` が `null`以外の値に設定されている場合は、指定した `entryNameEncoding` を使用してエントリ名がバイトにエンコードされます。 言語エンコードフラグ (ローカルファイルヘッダーの汎用ビットフラグ) は、指定されたエンコードが UTF-8 エンコーディングの場合にのみ設定されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="archiveFileName" /> が <see cref="F:System.String.Empty" /> か、空白のみが含まれているか、無効な文字が少なくとも 1 つ含まれています。  
  
または 
 <paramref name="entryNameEncoding" /> は UTF-8 以外の Unicode エンコーディングに設定されています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="archiveFileName" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException"><paramref name="archiveFileName" /> で、指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="archiveFileName" /> が無効または存在しません (割り当てられていないドライブであるなど)。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="archiveFileName" /> を開けませんでした。  
  
または 
 <paramref name="mode" /> が <see cref="F:System.IO.Compression.ZipArchiveMode.Create" /> に設定されていますが、<paramref name="archiveFileName" /> に指定されたファイルが既に存在します。</exception>
        <exception cref="T:System.UnauthorizedAccessException"><paramref name="archiveFileName" /> がディレクトリを指定しています。  
  
または 
<paramref name="archiveFileName" /> で指定されたファイルにアクセスするために必要なアクセス許可が呼び出し元にありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" /> に無効な値が指定されています。</exception>
        <exception cref="T:System.IO.FileNotFoundException"><paramref name="mode" /> が <see cref="F:System.IO.Compression.ZipArchiveMode.Read" /> に設定されていますが、<paramref name="archiveFileName" /> に指定されたファイルが見つかりません。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="archiveFileName" /> に無効な書式指定が格納されています。</exception>
        <exception cref="T:System.IO.InvalidDataException"><paramref name="archiveFileName" /> は zip アーカイブとして解釈できませんでした。  
  
または 
 <paramref name="mode" /> が <see cref="F:System.IO.Compression.ZipArchiveMode.Update" /> ですが、エントリが見つからないか、または破損していて読み取ることができません。  
  
または 
 <paramref name="mode" /> が <see cref="F:System.IO.Compression.ZipArchiveMode.Update" /> ですが、エントリが大きすぎてメモリに収まりません。</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenRead">
      <MemberSignature Language="C#" Value="public static System.IO.Compression.ZipArchive OpenRead (string archiveFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Compression.ZipArchive OpenRead(string archiveFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.OpenRead(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenRead (archiveFileName As String) As ZipArchive" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Compression::ZipArchive ^ OpenRead(System::String ^ archiveFileName);" />
      <MemberSignature Language="F#" Value="static member OpenRead : string -&gt; System.IO.Compression.ZipArchive" Usage="System.IO.Compression.ZipFile.OpenRead archiveFileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Compression.ZipArchive</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="archiveFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="archiveFileName">開くアーカイブのパス。相対パスまたは絶対パスとして指定します。 相対パスは、現在の作業ディレクトリに対して相対的に解釈されます。</param>
        <summary>指定されたパスで読み取りのための zip のアーカイブを開きます。</summary>
        <returns>開いている zip アーカイブ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、<xref:System.IO.Compression.ZipFile.Open%2A> メソッドを呼び出し、`mode` パラメーターを <xref:System.IO.Compression.ZipArchiveMode.Read>に設定することと同じです。 アーカイブは、ファイルモード値として <xref:System.IO.FileMode.Open?displayProperty=nameWithType> で開かれます。 アーカイブが存在しない場合は、<xref:System.IO.FileNotFoundException> 例外がスローされます。  
  
   
  
## Examples  
 次の例では、読み取り用に zip アーカイブを開く方法を示します。  
  
 [!code-csharp[System.IO.Compression.ZipArchive#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.ziparchive/cs/program1.cs#1)]
 [!code-vb[System.IO.Compression.ZipArchive#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.ziparchive/vb/program1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="archiveFileName" /> が <see cref="F:System.String.Empty" /> か、空白のみが含まれているか、無効な文字が少なくとも 1 つ含まれています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="archiveFileName" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException"><paramref name="archiveFileName" /> で、指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="archiveFileName" /> が無効または存在しません (割り当てられていないドライブであるなど)。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="archiveFileName" /> を開けませんでした。</exception>
        <exception cref="T:System.UnauthorizedAccessException"><paramref name="archiveFileName" /> がディレクトリを指定しています。  
  
または 
<paramref name="archiveFileName" /> で指定されたファイルにアクセスするために必要なアクセス許可が呼び出し元にありません。</exception>
        <exception cref="T:System.IO.FileNotFoundException"><paramref name="archiveFileName" /> で指定されたファイルが見つかりません。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="archiveFileName" /> に無効な書式指定が格納されています。</exception>
        <exception cref="T:System.IO.InvalidDataException"><paramref name="archiveFileName" /> は zip アーカイブとして解釈できませんでした。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
