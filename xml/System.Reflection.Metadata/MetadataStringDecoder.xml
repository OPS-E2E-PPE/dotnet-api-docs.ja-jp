<Type Name="MetadataStringDecoder" FullName="System.Reflection.Metadata.MetadataStringDecoder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="93d37bfa801e1ea453d9ec422a9e369a496fbb73" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78801201" /></Metadata><TypeSignature Language="C#" Value="public class MetadataStringDecoder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MetadataStringDecoder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Metadata.MetadataStringDecoder" />
  <TypeSignature Language="VB.NET" Value="Public Class MetadataStringDecoder" />
  <TypeSignature Language="C++ CLI" Value="public ref class MetadataStringDecoder" />
  <TypeSignature Language="F#" Value="type MetadataStringDecoder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Metadata</AssemblyName>
    <AssemblyVersion>1.0.22.0</AssemblyVersion>
    <AssemblyVersion>1.3.0.0</AssemblyVersion>
    <AssemblyVersion>1.4.1.0</AssemblyVersion>
    <AssemblyVersion>1.4.2.0</AssemblyVersion>
    <AssemblyVersion>1.4.3.0</AssemblyVersion>
    <AssemblyVersion>1.4.4.0</AssemblyVersion>
    <AssemblyVersion>1.4.5.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="9ac5a-101">テキストを表すメタデータ内のバイト シーケンスをデコードするためのカスタム メカニズムを備えた <see cref="T:System.Reflection.Metadata.MetadataReader" /> を提供します。</span><span class="sxs-lookup"><span data-stu-id="9ac5a-101">Provides the <see cref="T:System.Reflection.Metadata.MetadataReader" /> with a custom mechanism for decoding byte sequences in metadata that represent text.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="9ac5a-102">この型は次のように使用できます。</span><span class="sxs-lookup"><span data-stu-id="9ac5a-102">This type can be used as follows:</span></span>
 
1. <span data-ttu-id="9ac5a-103">無効な入力の処理をカスタマイズします。</span><span class="sxs-lookup"><span data-stu-id="9ac5a-103">To customize the treatment of invalid input.</span></span> <span data-ttu-id="9ac5a-104">デコーダーが指定されていない場合、<xref:System.Reflection.Metadata.MetadataReader> は `\uFFFD`に既定のフォールバック置換を使用します。</span><span class="sxs-lookup"><span data-stu-id="9ac5a-104">When no decoder is provided, the <xref:System.Reflection.Metadata.MetadataReader> uses the default fallback replacement with `\uFFFD`.</span></span>

2. <span data-ttu-id="9ac5a-105">デコード操作ごとに新しい文字列を割り当てる代わりに、既存の文字列を再利用すること。</span><span class="sxs-lookup"><span data-stu-id="9ac5a-105">To reuse existing strings instead of allocating a new one for each decoding operation.</span></span>

      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MetadataStringDecoder (System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.MetadataStringDecoder.#ctor(System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (encoding As Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MetadataStringDecoder(System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Metadata.MetadataStringDecoder : System.Text.Encoding -&gt; System.Reflection.Metadata.MetadataStringDecoder" Usage="new System.Reflection.Metadata.MetadataStringDecoder encoding" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="encoding"><span data-ttu-id="9ac5a-106">使用するエンコーディング。</span><span class="sxs-lookup"><span data-stu-id="9ac5a-106">The encoding to use.</span></span></param>
        <summary><span data-ttu-id="9ac5a-107">指定のエンコーディングを使用し、<see cref="T:System.Reflection.Metadata.MetadataStringDecoder" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="9ac5a-107">Initializes a new instance of the <see cref="T:System.Reflection.Metadata.MetadataStringDecoder" /> class using the given encoding.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="9ac5a-108">既存の文字列をキャッシュして再利用するには、派生クラスを作成し、<xref:System.Reflection.Metadata.MetadataStringDecoder.GetString(System.Byte*,System.Int32)>をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="9ac5a-108">To cache and reuse existing strings, create a derived class and override <xref:System.Reflection.Metadata.MetadataStringDecoder.GetString(System.Byte*,System.Int32)>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultUTF8">
      <MemberSignature Language="C#" Value="public static System.Reflection.Metadata.MetadataStringDecoder DefaultUTF8 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Reflection.Metadata.MetadataStringDecoder DefaultUTF8" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Metadata.MetadataStringDecoder.DefaultUTF8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultUTF8 As MetadataStringDecoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Reflection::Metadata::MetadataStringDecoder ^ DefaultUTF8 { System::Reflection::Metadata::MetadataStringDecoder ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultUTF8 : System.Reflection.Metadata.MetadataStringDecoder" Usage="System.Reflection.Metadata.MetadataStringDecoder.DefaultUTF8" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.MetadataStringDecoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9ac5a-109">デコーダーがコンストラクターに与えられないときに UTF-8 をデコードする目的で <see cref="T:System.Reflection.Metadata.MetadataReader" /> で使用される既定のデコーダーを取得します。</span><span class="sxs-lookup"><span data-stu-id="9ac5a-109">Gets the default decoder used by <see cref="T:System.Reflection.Metadata.MetadataReader" /> to decode UTF-8 when no decoder is provided to the constructor.</span></span></summary>
        <value><span data-ttu-id="9ac5a-110">UTF-8 をデコードするために <see cref="T:System.Reflection.Metadata.MetadataReader" /> によって使用される既定のデコーダー。</span><span class="sxs-lookup"><span data-stu-id="9ac5a-110">The default decoder used by <see cref="T:System.Reflection.Metadata.MetadataReader" /> to decode UTF-8.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Metadata.MetadataStringDecoder.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding" Usage="System.Reflection.Metadata.MetadataStringDecoder.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9ac5a-111">このインスタンスで使用されるエンコーディングを取得します。</span><span class="sxs-lookup"><span data-stu-id="9ac5a-111">Gets the encoding used by this instance.</span></span></summary>
        <value><span data-ttu-id="9ac5a-112">このインスタンスによって使用されるエンコーディング。</span><span class="sxs-lookup"><span data-stu-id="9ac5a-112">The encoding used by this instance.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public virtual string GetString (byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetString(unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.MetadataStringDecoder.GetString(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetString(System::Byte* bytes, int byteCount);" />
      <MemberSignature Language="F#" Value="abstract member GetString : nativeptr&lt;byte&gt; * int -&gt; string&#xA;override this.GetString : nativeptr&lt;byte&gt; * int -&gt; string" Usage="metadataStringDecoder.GetString (bytes, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="9ac5a-113">デコードするバイトへのポインター。</span><span class="sxs-lookup"><span data-stu-id="9ac5a-113">Pointer to bytes to decode.</span></span></param>
        <param name="byteCount"><span data-ttu-id="9ac5a-114">デコードするバイト数。</span><span class="sxs-lookup"><span data-stu-id="9ac5a-114">Number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="9ac5a-115">メタデータでバイト シーケンスの文字列を取得します。</span><span class="sxs-lookup"><span data-stu-id="9ac5a-115">Obtains strings for byte sequences in metadata.</span></span> <span data-ttu-id="9ac5a-116">これをオーバーライドし、必要に応じて文字列をキャッシュします。</span><span class="sxs-lookup"><span data-stu-id="9ac5a-116">Override this to cache strings if required.</span></span> <span data-ttu-id="9ac5a-117">それ以外の場合、<see cref="P:System.Reflection.Metadata.MetadataStringDecoder.Encoding" /> に直接転送することで実装されます。呼び出しごとに新しい文字列が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="9ac5a-117">Otherwise, it is implemented by forwarding straight to <see cref="P:System.Reflection.Metadata.MetadataStringDecoder.Encoding" /> and every call will allocate a new string.</span></span></summary>
        <returns><span data-ttu-id="9ac5a-118">デコードされた文字列。</span><span class="sxs-lookup"><span data-stu-id="9ac5a-118">The decoded string.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
