<Type Name="GroupCollection" FullName="System.Text.RegularExpressions.GroupCollection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2f47c180954a5a86bcbe2a18f3a4430ba08ae425" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82332390" /></Metadata><TypeSignature Language="C#" Value="public class GroupCollection : System.Collections.ICollection" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GroupCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.GroupCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class GroupCollection&#xA;Implements ICollection" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class GroupCollection : System::Collections::ICollection" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type GroupCollection = class&#xA;    interface ICollection&#xA;    interface IEnumerable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C#" Value="public class GroupCollection : System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,System.Text.RegularExpressions.Group&gt;&gt;, System.Collections.Generic.IEnumerable&lt;System.Text.RegularExpressions.Group&gt;, System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;, System.Collections.Generic.IReadOnlyCollection&lt;System.Collections.Generic.KeyValuePair&lt;string,System.Text.RegularExpressions.Group&gt;&gt;, System.Collections.Generic.IReadOnlyCollection&lt;System.Text.RegularExpressions.Group&gt;, System.Collections.Generic.IReadOnlyDictionary&lt;string,System.Text.RegularExpressions.Group&gt;, System.Collections.Generic.IReadOnlyList&lt;System.Text.RegularExpressions.Group&gt;, System.Collections.IList" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GroupCollection extends System.Object implements class System.Collections.Generic.ICollection`1&lt;class System.Text.RegularExpressions.Group&gt;, class System.Collections.Generic.IEnumerable`1&lt;class System.Text.RegularExpressions.Group&gt;, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Text.RegularExpressions.Group&gt;&gt;, class System.Collections.Generic.IList`1&lt;class System.Text.RegularExpressions.Group&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;class System.Text.RegularExpressions.Group&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Text.RegularExpressions.Group&gt;&gt;, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, class System.Text.RegularExpressions.Group&gt;, class System.Collections.Generic.IReadOnlyList`1&lt;class System.Text.RegularExpressions.Group&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="VB.NET" Value="Public Class GroupCollection&#xA;Implements ICollection(Of Group), IEnumerable(Of Group), IEnumerable(Of KeyValuePair(Of String, Group)), IList, IList(Of Group), IReadOnlyCollection(Of Group), IReadOnlyCollection(Of KeyValuePair(Of String, Group)), IReadOnlyDictionary(Of String, Group), IReadOnlyList(Of Group)" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class GroupCollection : System::Collections::Generic::ICollection&lt;System::Text::RegularExpressions::Group ^&gt;, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Text::RegularExpressions::Group ^&gt;&gt;, System::Collections::Generic::IEnumerable&lt;System::Text::RegularExpressions::Group ^&gt;, System::Collections::Generic::IList&lt;System::Text::RegularExpressions::Group ^&gt;, System::Collections::Generic::IReadOnlyCollection&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Text::RegularExpressions::Group ^&gt;&gt;, System::Collections::Generic::IReadOnlyCollection&lt;System::Text::RegularExpressions::Group ^&gt;, System::Collections::Generic::IReadOnlyDictionary&lt;System::String ^, System::Text::RegularExpressions::Group ^&gt;, System::Collections::Generic::IReadOnlyList&lt;System::Text::RegularExpressions::Group ^&gt;, System::Collections::IList" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="F#" Value="type GroupCollection = class&#xA;    interface ICollection&lt;Group&gt;&#xA;    interface seq&lt;Group&gt;&#xA;    interface IEnumerable&#xA;    interface seq&lt;KeyValuePair&lt;string, Group&gt;&gt;&#xA;    interface IList&lt;Group&gt;&#xA;    interface IReadOnlyCollection&lt;KeyValuePair&lt;string, Group&gt;&gt;&#xA;    interface IReadOnlyCollection&lt;Group&gt;&#xA;    interface IReadOnlyDictionary&lt;string, Group&gt;&#xA;    interface IReadOnlyList&lt;Group&gt;&#xA;    interface ICollection&#xA;    interface IList" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="C#" Value="public class GroupCollection : System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;, System.Collections.Generic.IEnumerable&lt;System.Text.RegularExpressions.Group&gt;, System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;, System.Collections.Generic.IReadOnlyCollection&lt;System.Text.RegularExpressions.Group&gt;, System.Collections.Generic.IReadOnlyList&lt;System.Text.RegularExpressions.Group&gt;, System.Collections.IList" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netstandard-2.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GroupCollection extends System.Object implements class System.Collections.Generic.ICollection`1&lt;class System.Text.RegularExpressions.Group&gt;, class System.Collections.Generic.IEnumerable`1&lt;class System.Text.RegularExpressions.Group&gt;, class System.Collections.Generic.IList`1&lt;class System.Text.RegularExpressions.Group&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;class System.Text.RegularExpressions.Group&gt;, class System.Collections.Generic.IReadOnlyList`1&lt;class System.Text.RegularExpressions.Group&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netstandard-2.1" />
  <TypeSignature Language="VB.NET" Value="Public Class GroupCollection&#xA;Implements ICollection(Of Group), IEnumerable(Of Group), IList, IList(Of Group), IReadOnlyCollection(Of Group), IReadOnlyList(Of Group)" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netstandard-2.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class GroupCollection : System::Collections::Generic::ICollection&lt;System::Text::RegularExpressions::Group ^&gt;, System::Collections::Generic::IEnumerable&lt;System::Text::RegularExpressions::Group ^&gt;, System::Collections::Generic::IList&lt;System::Text::RegularExpressions::Group ^&gt;, System::Collections::Generic::IReadOnlyCollection&lt;System::Text::RegularExpressions::Group ^&gt;, System::Collections::Generic::IReadOnlyList&lt;System::Text::RegularExpressions::Group ^&gt;, System::Collections::IList" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netstandard-2.1" />
  <TypeSignature Language="F#" Value="type GroupCollection = class&#xA;    interface ICollection&#xA;    interface IEnumerable&#xA;    interface ICollection&lt;Group&gt;&#xA;    interface seq&lt;Group&gt;&#xA;    interface IList&lt;Group&gt;&#xA;    interface IReadOnlyCollection&lt;Group&gt;&#xA;    interface IReadOnlyList&lt;Group&gt;&#xA;    interface IList" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit GroupCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type GroupCollection = class&#xA;    interface ICollection&lt;Group&gt;&#xA;    interface seq&lt;Group&gt;&#xA;    interface IEnumerable&#xA;    interface IList&lt;Group&gt;&#xA;    interface IReadOnlyCollection&lt;Group&gt;&#xA;    interface IReadOnlyList&lt;Group&gt;&#xA;    interface ICollection&#xA;    interface IList" FrameworkAlternate="netstandard-2.1" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System" FromVersion="4.0.0.0" To="System.Text.RegularExpressions" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="0d094-101">1 回の検索一致でキャプチャされたグループのセットを返します。</span><span class="sxs-lookup"><span data-stu-id="0d094-101">Returns the set of captured groups in a single match.</span></span> <span data-ttu-id="0d094-102">コレクションは変更不可 (読み取り専用) であり、パブリック コンストラクターがありません。</span><span class="sxs-lookup"><span data-stu-id="0d094-102">The collection is immutable (read-only) and has no public constructor.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d094-103"><xref:System.Text.RegularExpressions.GroupCollection> クラスは、0から始まるコレクションクラスであり、正規表現の一致でキャプチャされたグループに関する情報を提供する1つ以上の <xref:System.Text.RegularExpressions.Group> オブジェクトで構成されます。</span><span class="sxs-lookup"><span data-stu-id="0d094-103">The <xref:System.Text.RegularExpressions.GroupCollection> class is a zero-based collection class that consists of one or more <xref:System.Text.RegularExpressions.Group> objects that provide information about captured groups in a regular expression match.</span></span> <span data-ttu-id="0d094-104">コレクションは変更不可 (読み取り専用) であり、パブリックコンストラクターがありません。</span><span class="sxs-lookup"><span data-stu-id="0d094-104">The collection is immutable (read-only) and has no public constructor.</span></span> <span data-ttu-id="0d094-105"><xref:System.Text.RegularExpressions.GroupCollection> オブジェクトは、<xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> プロパティによって返されます。</span><span class="sxs-lookup"><span data-stu-id="0d094-105">A <xref:System.Text.RegularExpressions.GroupCollection> object is returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="0d094-106">コレクションには、1つまたは複数の <xref:System.Text.RegularExpressions.Group?displayProperty=nameWithType> オブジェクトが含まれています。</span><span class="sxs-lookup"><span data-stu-id="0d094-106">The collection contains one or more <xref:System.Text.RegularExpressions.Group?displayProperty=nameWithType> objects.</span></span> <span data-ttu-id="0d094-107">一致が成功した場合、コレクション内の最初の要素には、一致した文字列全体に対応する <xref:System.Text.RegularExpressions.Group> オブジェクトが格納されます。</span><span class="sxs-lookup"><span data-stu-id="0d094-107">If the match is successful, the first element in the collection contains the <xref:System.Text.RegularExpressions.Group> object that corresponds to the entire match.</span></span> <span data-ttu-id="0d094-108">正規表現にキャプチャグループが含まれている場合、後続の各要素はキャプチャされたグループを表します。</span><span class="sxs-lookup"><span data-stu-id="0d094-108">Each subsequent element represents a captured group, if the regular expression includes capturing groups.</span></span> <span data-ttu-id="0d094-109">番号付きの (名前のない) キャプチャグループからの一致は、名前付きキャプチャグループと一致する前に数値順に表示されます。</span><span class="sxs-lookup"><span data-stu-id="0d094-109">Matches from numbered (unnamed) capturing groups appear in numeric order before matches from named capturing groups.</span></span> <span data-ttu-id="0d094-110">一致が失敗した場合、コレクションには、<xref:System.Text.RegularExpressions.Group.Success%2A> プロパティが `false`、<xref:System.Text.RegularExpressions.Capture.Value%2A> プロパティが <xref:System.String.Empty?displayProperty=nameWithType>と等しい1つの <xref:System.Text.RegularExpressions.Group?displayProperty=nameWithType> オブジェクトが格納されます。</span><span class="sxs-lookup"><span data-stu-id="0d094-110">If the match is unsuccessful, the collection contains a single <xref:System.Text.RegularExpressions.Group?displayProperty=nameWithType> object whose <xref:System.Text.RegularExpressions.Group.Success%2A> property is `false` and whose <xref:System.Text.RegularExpressions.Capture.Value%2A> property equals <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0d094-111">詳細については、「[グループ化構成体](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)」の記事の「グループ化構成体と正規表現オブジェクト」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="0d094-111">For more information, see the "Grouping Constructs and Regular Expression Objects" section in the [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md) article.</span></span>  
  
 <span data-ttu-id="0d094-112">コレクションのメンバーを反復処理するには、言語によって提供されるコレクションイテレーションコンストラクトを使用する必要がC#あります (の `foreach` や `For Each`...`Next`</span><span class="sxs-lookup"><span data-stu-id="0d094-112">To iterate through the members of the collection, you should use the collection iteration construct provided by your language (such as `foreach` in C# and `For Each`…`Next`</span></span> <span data-ttu-id="0d094-113">Visual Basic)。 <xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A> メソッドによって返される列挙子を取得する代わりに。</span><span class="sxs-lookup"><span data-stu-id="0d094-113">in Visual Basic) instead of retrieving the enumerator that is returned by the <xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A> method.</span></span> <span data-ttu-id="0d094-114">さらに、<xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> プロパティ (のC#インデクサー) から個々の番号付きキャプチャグループにアクセスできます。また、<xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> プロパティから、キャプチャされた個々のグループにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="0d094-114">In addition, you can access individual numbered captured groups from the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> property (the indexer in C#), and you can access individual named captured groups from the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> property.</span></span> <span data-ttu-id="0d094-115"><xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> メソッドと <xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=nameWithType> メソッドをそれぞれ呼び出して、すべてのキャプチャグループの数と名前を含む配列を取得できることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="0d094-115">Note that you can retrieve an array that contains the numbers and names of all capturing groups by calling the <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> and <xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=nameWithType> methods, respectively.</span></span> <span data-ttu-id="0d094-116">どちらもインスタンスメソッドであり、一致させる正規表現を表す <xref:System.Text.RegularExpressions.Regex> オブジェクトをインスタンス化する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0d094-116">Both are instance methods and require that you instantiate a <xref:System.Text.RegularExpressions.Regex> object that represents the regular expression to be matched.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0d094-117">次の例では、キャプチャグループで正規表現を使用して、テキストで使用される商標と登録商標に関する情報を抽出します。</span><span class="sxs-lookup"><span data-stu-id="0d094-117">The following example uses a regular expression with capturing groups to extract information about trademarks and registered trademarks used in text.</span></span> <span data-ttu-id="0d094-118">正規表現パターンは `\b(\w+?)([\u00AE\u2122])`であり、次の表に示すように解釈されます。</span><span class="sxs-lookup"><span data-stu-id="0d094-118">The regular expression pattern is `\b(\w+?)([\u00AE\u2122])`, which is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="0d094-119">パターン</span><span class="sxs-lookup"><span data-stu-id="0d094-119">Pattern</span></span>|<span data-ttu-id="0d094-120">説明</span><span class="sxs-lookup"><span data-stu-id="0d094-120">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="0d094-121">ワード境界を探します。</span><span class="sxs-lookup"><span data-stu-id="0d094-121">Look for a word boundary.</span></span>|  
|`(\w+?)`|<span data-ttu-id="0d094-122">1つ以上の単語文字を検索します。</span><span class="sxs-lookup"><span data-stu-id="0d094-122">Look for one or more word characters.</span></span> <span data-ttu-id="0d094-123">これらは共に商標名を形成します。</span><span class="sxs-lookup"><span data-stu-id="0d094-123">Together, these form the trademarked name.</span></span> <span data-ttu-id="0d094-124">(この正規表現は、商標が1つの単語で構成されていることを前提としています)。これが最初のキャプチャグループです。</span><span class="sxs-lookup"><span data-stu-id="0d094-124">(Note that this regular expression assumes that a trademark consists of a single word.) This is the first capturing group.</span></span>|  
|`([\u00AE\u2122])`|<span data-ttu-id="0d094-125">®または™のいずれかの文字を探します。</span><span class="sxs-lookup"><span data-stu-id="0d094-125">Look for either the ® or the ™ character.</span></span> <span data-ttu-id="0d094-126">これが 2 番目のキャプチャ グループです。</span><span class="sxs-lookup"><span data-stu-id="0d094-126">This is the second capturing group.</span></span>|  
  
 <span data-ttu-id="0d094-127">一致するたびに、<xref:System.Text.RegularExpressions.GroupCollection> には3つの <xref:System.Text.RegularExpressions.Group> オブジェクトが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0d094-127">For each match, the <xref:System.Text.RegularExpressions.GroupCollection> contains three <xref:System.Text.RegularExpressions.Group> objects.</span></span> <span data-ttu-id="0d094-128">最初のオブジェクトには、正規表現全体に一致する文字列が含まれています。</span><span class="sxs-lookup"><span data-stu-id="0d094-128">The first object contains the string that matches the entire regular expression.</span></span> <span data-ttu-id="0d094-129">最初のキャプチャグループを表す2番目のオブジェクトには、製品名が含まれています。</span><span class="sxs-lookup"><span data-stu-id="0d094-129">The second object, which represents the first captured group, contains the product name.</span></span> <span data-ttu-id="0d094-130">2番目のキャプチャグループを表す3番目のオブジェクトには、商標または登録商標記号が含まれています。</span><span class="sxs-lookup"><span data-stu-id="0d094-130">The third object, which represents the second captured group, contains the trademark or registered trademark symbol.</span></span>  
  
  [!code-csharp[System.Text.RegularExpressions.GroupCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.GroupCollection/cs/Example1.cs#1)]
  [!code-vb[System.Text.RegularExpressions.GroupCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.GroupCollection/vb/Example1.vb#1)]  
   
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.RegularExpressions.Group" />
  </Docs>
  <Members>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public bool ContainsKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.ContainsKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContainsKey (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsKey(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member ContainsKey : string -&gt; bool&#xA;override this.ContainsKey : string -&gt; bool" Usage="groupCollection.ContainsKey key" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="0d094-131">検索するキャプチャ グループの名前を含む文字列。</span><span class="sxs-lookup"><span data-stu-id="0d094-131">A string with the name of the captured group to locate.</span></span></param>
        <summary><span data-ttu-id="0d094-132">指定された名前で識別されるキャプチャ グループがグループ コレクションに含まれているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="0d094-132">Determines whether the group collection contains a captured group identified by the specified name.</span></span></summary>
        <returns><span data-ttu-id="0d094-133"><paramref name="key" /> で識別されるキャプチャ グループがグループ コレクションに含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0d094-133"><see langword="true" /> if the group collection contains a captured group identified by <paramref name="key" />; <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As Array, arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="groupCollection.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="arrayIndex" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="0d094-134">コレクションのコピー先の配列。</span><span class="sxs-lookup"><span data-stu-id="0d094-134">The array the collection is to be copied into.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="0d094-135">コピーの開始位置を示す、コピー先の配列内の位置。</span><span class="sxs-lookup"><span data-stu-id="0d094-135">The position in the destination array where the copying is to begin.</span></span></param>
        <summary><span data-ttu-id="0d094-136">指定したインデックスを開始位置として、指定した配列にコレクションのすべての要素をコピーします。</span><span class="sxs-lookup"><span data-stu-id="0d094-136">Copies all the elements of the collection to the given array beginning at the given index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d094-137">コレクション全体が指定されたインデックスを開始位置として配列にコピーされるため、コピー先の配列は、少なくともコレクションのサイズ以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="0d094-137">Because the entire collection is copied into the array starting at the given index, the destination array must be at least as large as the collection.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="0d094-138">このメンバーは [!INCLUDE[net_portable](~/includes/net-portable-md.md)]に存在しません。</span><span class="sxs-lookup"><span data-stu-id="0d094-138">This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)].</span></span> <span data-ttu-id="0d094-139">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]を対象とするアプリケーションを開発している場合は、代わりに <xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23CopyTo%2A?displayProperty=nameWithType> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="0d094-139">If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23CopyTo%2A?displayProperty=nameWithType> method instead.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0d094-140">次の例では、文から各単語を抽出し、キャプチャグループにキャプチャします。次に、<xref:System.Text.RegularExpressions.GroupCollection.CopyTo%2A> メソッドを使用して、各一致の <xref:System.Text.RegularExpressions.GroupCollection> オブジェクト内の要素を、すべての一致からキャプチャグループを含む配列にコピーします。</span><span class="sxs-lookup"><span data-stu-id="0d094-140">The following example extracts each word from a sentence and captures it in a capturing group, The <xref:System.Text.RegularExpressions.GroupCollection.CopyTo%2A> method is then used to copy the elements in each match's <xref:System.Text.RegularExpressions.GroupCollection> object to an array that contains the capturing groups from all matches.</span></span> <span data-ttu-id="0d094-141">キャプチャした個々の単語がコンソールに表示されます。</span><span class="sxs-lookup"><span data-stu-id="0d094-141">The individual captured words are then displayed to the console.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.copyto/cs/copyto1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.copyto/vb/copyto1.vb" id="Snippet1":::
  
 <span data-ttu-id="0d094-142">正規表現は次のように定義されています。</span><span class="sxs-lookup"><span data-stu-id="0d094-142">The regular expression is defined as follows:</span></span>  
  
|<span data-ttu-id="0d094-143">パターン</span><span class="sxs-lookup"><span data-stu-id="0d094-143">Pattern</span></span>|<span data-ttu-id="0d094-144">説明</span><span class="sxs-lookup"><span data-stu-id="0d094-144">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="0d094-145">ワード境界に一致します。</span><span class="sxs-lookup"><span data-stu-id="0d094-145">Match a word boundary.</span></span>|  
|`(\S+?)`|<span data-ttu-id="0d094-146">1個以上の空白以外の文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="0d094-146">Match one or more non-white space characters.</span></span> <span data-ttu-id="0d094-147">最初のキャプチャグループに割り当てます。</span><span class="sxs-lookup"><span data-stu-id="0d094-147">Assign them to the first capturing group.</span></span>|  
|`\b`|<span data-ttu-id="0d094-148">ワード境界に一致します。</span><span class="sxs-lookup"><span data-stu-id="0d094-148">Match a word boundary.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0d094-149"><paramref name="array" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="0d094-149"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="0d094-150"><paramref name="arrayIndex" /> が <paramref name="array" /> の境界の外側にあります。</span><span class="sxs-lookup"><span data-stu-id="0d094-150"><paramref name="arrayIndex" /> is outside the bounds of <paramref name="array" />.</span></span>

<span data-ttu-id="0d094-151">- または -</span><span class="sxs-lookup"><span data-stu-id="0d094-151">-or-</span></span>

<span data-ttu-id="0d094-152"><paramref name="arrayIndex" /> に <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> を加えた値が <paramref name="array" /> の境界の外側にあります。</span><span class="sxs-lookup"><span data-stu-id="0d094-152"><paramref name="arrayIndex" /> plus <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> is outside the bounds of <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Text.RegularExpressions.Group[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Text.RegularExpressions.Group[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Text.RegularExpressions.Group[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As Group(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;System::Text::RegularExpressions::Group ^&gt; ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : System.Text.RegularExpressions.Group[] * int -&gt; unit&#xA;override this.CopyTo : System.Text.RegularExpressions.Group[] * int -&gt; unit" Usage="groupCollection.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Text.RegularExpressions.Group[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="arrayIndex" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="0d094-153">グループ コレクションからコピーされる要素のコピー先となる 1 次元配列。</span><span class="sxs-lookup"><span data-stu-id="0d094-153">The one-dimensional array that is the destination of the elements copied from the group collection.</span></span> <span data-ttu-id="0d094-154">配列には、0 から始まるインデックスが設定されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="0d094-154">The array must have zero-based indexing.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="0d094-155">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</span><span class="sxs-lookup"><span data-stu-id="0d094-155">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="0d094-156">特定の配列インデックスを開始位置として、<see cref="T:System.Text.RegularExpressions.Group" /> 配列にグループ コレクションの要素をコピーします。</span><span class="sxs-lookup"><span data-stu-id="0d094-156">Copies the elements of the group collection to a <see cref="T:System.Text.RegularExpressions.Group" /> array, starting at a particular array index.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0d094-157"><paramref name="array" /> が null です。</span><span class="sxs-lookup"><span data-stu-id="0d094-157"><paramref name="array" /> is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0d094-158"><paramref name="arrayIndex" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="0d094-158"><paramref name="arrayIndex" /> is less than zero.</span></span>

<span data-ttu-id="0d094-159">- または -</span><span class="sxs-lookup"><span data-stu-id="0d094-159">-or-</span></span>

<span data-ttu-id="0d094-160"><paramref name="arrayIndex" /> が <paramref name="array" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="0d094-160"><paramref name="arrayIndex" /> is greater than the length of <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0d094-161"><paramref name="array" /> - <paramref name="arrayIndex" /> の長さがグループ コレクションの数を下回っています。</span><span class="sxs-lookup"><span data-stu-id="0d094-161">The length of <paramref name="array" /> - <paramref name="arrayIndex" /> is less than the group collection count.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Text.RegularExpressions.GroupCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0d094-162">コレクション内のグループの数を返します。</span><span class="sxs-lookup"><span data-stu-id="0d094-162">Returns the number of groups in the collection.</span></span></summary>
        <value><span data-ttu-id="0d094-163">コレクション内のグループの数。</span><span class="sxs-lookup"><span data-stu-id="0d094-163">The number of groups in the collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d094-164"><xref:System.Text.RegularExpressions.GroupCollection> オブジェクトには、常に少なくとも1つのメンバーがあります。</span><span class="sxs-lookup"><span data-stu-id="0d094-164">The <xref:System.Text.RegularExpressions.GroupCollection> object always has at least one member.</span></span> <span data-ttu-id="0d094-165">一致が失敗した場合、<xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> プロパティは、1つのメンバーを含む <xref:System.Text.RegularExpressions.GroupCollection> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="0d094-165">If a match is unsuccessful, the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> property returns a <xref:System.Text.RegularExpressions.GroupCollection> object that contains a single member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="groupCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0d094-166">コレクションを反復処理する列挙子を提供します。</span><span class="sxs-lookup"><span data-stu-id="0d094-166">Provides an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="0d094-167"><see cref="T:System.Text.RegularExpressions.Group" /> 内のすべての <see cref="T:System.Text.RegularExpressions.GroupCollection" /> オブジェクトを含む列挙子。</span><span class="sxs-lookup"><span data-stu-id="0d094-167">An enumerator that contains all <see cref="T:System.Text.RegularExpressions.Group" /> objects in the <see cref="T:System.Text.RegularExpressions.GroupCollection" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d094-168"><xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A> メソッドを呼び出して、コレクション内の <xref:System.Text.RegularExpressions.Group> オブジェクトを反復処理できる列挙子を取得するのではなく、グループイテレーション構成 (in C#や `For Each`... `foreach` など) を使用する必要があり`Next`</span><span class="sxs-lookup"><span data-stu-id="0d094-168">Instead of calling the <xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A> method to retrieve an enumerator that lets you iterate through the <xref:System.Text.RegularExpressions.Group> objects in the collection, you should use the group iteration construct (such as `foreach` in C# and `For Each`…`Next`</span></span> <span data-ttu-id="0d094-169">Visual Basic)。プログラミング言語によって提供されます。</span><span class="sxs-lookup"><span data-stu-id="0d094-169">in Visual Basic) that is provided by your programming language.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Text.RegularExpressions.GroupCollection.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0d094-170">コレクションが読み取り専用かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="0d094-170">Gets a value that indicates whether the collection is read-only.</span></span></summary>
        <value><span data-ttu-id="0d094-171">常に <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="0d094-171"><see langword="true" /> in all cases.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="0d094-172">読み取り専用のコレクションでは、コレクションの作成後に要素を追加または削除することはできません。</span><span class="sxs-lookup"><span data-stu-id="0d094-172">A collection that is read-only does not allow the addition or removal of elements after the collection is created.</span></span> <span data-ttu-id="0d094-173">このコンテキストでの読み取り専用は、コレクションの個々の要素を変更できるかどうかを示すものではないことに注意してください。 <xref:System.Collections.Generic.ICollection%601> インターフェイスは、追加と削除の操作のみをサポートするためです。</span><span class="sxs-lookup"><span data-stu-id="0d094-173">Note that read-only in this context does not indicate whether individual elements of the collection can be modified, since the <xref:System.Collections.Generic.ICollection%601> interface only supports addition and removal operations.</span></span> <span data-ttu-id="0d094-174">たとえば、<xref:System.Collections.Generic.ICollection%601> オブジェクトにキャストまたは変換される配列の <xref:System.Collections.Generic.ICollection%601.IsReadOnly%2A> プロパティは、個々の配列要素を変更できる場合でも `true`を返します。</span><span class="sxs-lookup"><span data-stu-id="0d094-174">For example, the <xref:System.Collections.Generic.ICollection%601.IsReadOnly%2A> property of an array that is cast or converted to an <xref:System.Collections.Generic.ICollection%601> object returns `true`, even though individual array elements can be modified.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSynchronized : bool" Usage="System.Text.RegularExpressions.GroupCollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0d094-175"><see cref="T:System.Text.RegularExpressions.GroupCollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="0d094-175">Gets a value that indicates whether access to the <see cref="T:System.Text.RegularExpressions.GroupCollection" /> is synchronized (thread-safe).</span></span></summary>
        <value><span data-ttu-id="0d094-176">常に <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0d094-176"><see langword="false" /> in all cases.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!WARNING]
>  <span data-ttu-id="0d094-177">このメンバーは [!INCLUDE[net_portable](~/includes/net-portable-md.md)]に存在しません。</span><span class="sxs-lookup"><span data-stu-id="0d094-177">This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)].</span></span> <span data-ttu-id="0d094-178">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]を対象とするアプリケーションを開発している場合は、代わりに <xref:System.Text.RegularExpressions.CaptureCollection.System%23Collections%23ICollection%23IsSynchronized%2A?displayProperty=nameWithType> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="0d094-178">If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.CaptureCollection.System%23Collections%23ICollection%23IsSynchronized%2A?displayProperty=nameWithType> property instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.RegularExpressions.GroupCollection.SyncRoot" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0d094-179">整数インデックスまたは文字列インデックスによってコレクションの単一のメンバーにアクセスできるようになります。</span><span class="sxs-lookup"><span data-stu-id="0d094-179">Enables access to a single member of the collection by integer or string index.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Group this[int groupnum] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.Group Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(groupnum As Integer) As Group" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::RegularExpressions::Group ^ default[int] { System::Text::RegularExpressions::Group ^ get(int groupnum); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : System.Text.RegularExpressions.Group" Usage="System.Text.RegularExpressions.GroupCollection.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Group</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupnum" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="groupnum"><span data-ttu-id="0d094-180">取得するコレクション メンバーの 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="0d094-180">The zero-based index of the collection member to be retrieved.</span></span></param>
        <summary><span data-ttu-id="0d094-181">整数インデックスによってコレクションのメンバーにアクセスできるようにします。</span><span class="sxs-lookup"><span data-stu-id="0d094-181">Enables access to a member of the collection by integer index.</span></span></summary>
        <value><span data-ttu-id="0d094-182"><paramref name="groupnum" /> で指定されたコレクションのメンバー。</span><span class="sxs-lookup"><span data-stu-id="0d094-182">The member of the collection specified by <paramref name="groupnum" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d094-183"><xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> プロパティは、<xref:System.Text.RegularExpressions.GroupCollection> クラスのインデックスC#(の場合) または既定のプロパティ (Visual Basic の場合) です。</span><span class="sxs-lookup"><span data-stu-id="0d094-183">The <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> property is the index (in C#) or the default property (in Visual Basic) of the <xref:System.Text.RegularExpressions.GroupCollection> class.</span></span> <span data-ttu-id="0d094-184">または Visual Basic の `For Each` ステートメントでC# `foreach` ステートメントを使用して、コレクションのメンバーを列挙できます。</span><span class="sxs-lookup"><span data-stu-id="0d094-184">It allows you to enumerate the members of the collection by using a `foreach` statement in C# or a `For Each` statement in Visual Basic.</span></span>  
  
 <span data-ttu-id="0d094-185">このプロパティを使用して、キャプチャされた個々のグループをインデックス番号で取得することもできます。</span><span class="sxs-lookup"><span data-stu-id="0d094-185">You can also use this property to retrieve individual captured groups by their index number.</span></span> <span data-ttu-id="0d094-186">インスタンス <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> メソッドを呼び出すことによって、正規表現内のすべてのキャプチャグループの数を含む配列を取得できます。</span><span class="sxs-lookup"><span data-stu-id="0d094-186">You can retrieve an array that contains the numbers of all capturing groups in a regular expression by calling the instance <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="0d094-187">インスタンス <xref:System.Text.RegularExpressions.Regex.GroupNumberFromName%2A?displayProperty=nameWithType> メソッドを呼び出すことによって、名前付きキャプチャグループを数値にマップすることもできます。</span><span class="sxs-lookup"><span data-stu-id="0d094-187">You can also map named capturing groups to their numbers by calling the instance <xref:System.Text.RegularExpressions.Regex.GroupNumberFromName%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="0d094-188">コレクション内の項目の数を確認するには、<xref:System.Text.RegularExpressions.GroupCollection.Count%2A> プロパティの値を取得します。</span><span class="sxs-lookup"><span data-stu-id="0d094-188">You can determine the number of items in the collection by retrieving the value of the <xref:System.Text.RegularExpressions.GroupCollection.Count%2A> property.</span></span> <span data-ttu-id="0d094-189">`groupnum` パラメーターの有効な値は、0からコレクション内の項目の数までの範囲です。</span><span class="sxs-lookup"><span data-stu-id="0d094-189">Valid values for the `groupnum` parameter range from 0 to one less than the number of items in the collection.</span></span>  
  
 <span data-ttu-id="0d094-190"><xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> プロパティによって返される <xref:System.Text.RegularExpressions.GroupCollection> オブジェクトには、常に少なくとも1つのメンバーがあります。</span><span class="sxs-lookup"><span data-stu-id="0d094-190">The <xref:System.Text.RegularExpressions.GroupCollection> object returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> property always has at least one member.</span></span> <span data-ttu-id="0d094-191">正規表現エンジンが特定の入力文字列に一致する文字列が見つからない場合、コレクション内の1つの <xref:System.Text.RegularExpressions.Group> オブジェクトの <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> プロパティが `false` に設定され、その `Group.Value` プロパティが <xref:System.String.Empty?displayProperty=nameWithType>に設定されます。</span><span class="sxs-lookup"><span data-stu-id="0d094-191">If the regular expression engine cannot find any matches in a particular input string, the single <xref:System.Text.RegularExpressions.Group> object in the collection has its <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> property set to `false` and its `Group.Value` property set to <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="0d094-192">`groupnum` がコレクションのメンバーのインデックスでない場合、または `groupnum` が入力文字列で一致していないキャプチャグループのインデックスである場合、メソッドは <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> プロパティが `false` で `Group.Value` プロパティが <xref:System.String.Empty?displayProperty=nameWithType>である <xref:System.Text.RegularExpressions.Group> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="0d094-192">If `groupnum` is not the index of a member of the collection, or if `groupnum` is the index of a capturing group that has not been matched in the input string, the method returns a <xref:System.Text.RegularExpressions.Group> object whose <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> property is `false` and whose `Group.Value` property is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0d094-193">次の例では、2つの番号付きグループで構成される正規表現を定義しています。</span><span class="sxs-lookup"><span data-stu-id="0d094-193">The following example defines a regular expression that consists of two numbered groups.</span></span> <span data-ttu-id="0d094-194">最初のグループは、1つ以上の連続する数字をキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="0d094-194">The first group captures one or more consecutive digits.</span></span> <span data-ttu-id="0d094-195">2番目のグループは1つの文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="0d094-195">The second group matches a single character.</span></span> <span data-ttu-id="0d094-196">正規表現エンジンは、最初のグループの0回または1回の出現を検索するので、正規表現の一致が成功した場合でも、常に一致を検出するとは限りません。</span><span class="sxs-lookup"><span data-stu-id="0d094-196">Because the regular expression engine looks for zero or one occurrence of the first group, it does not always find a match even if the regular expression match is successful.</span></span> <span data-ttu-id="0d094-197">この例では、<xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> プロパティを使用して、一致しないグループ、一致するグループ、および正規表現で定義されていないグループを取得した場合の結果を示します。</span><span class="sxs-lookup"><span data-stu-id="0d094-197">The example then illustrates the result when the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> property is used to retrieve an unmatched group, a matched group, and a group that is not defined in the regular expression.</span></span> <span data-ttu-id="0d094-198">この例では、次の表に示すように、正規表現パターン `(\d+)*(\w)\2`を定義しています。</span><span class="sxs-lookup"><span data-stu-id="0d094-198">The example defines a regular expression pattern `(\d+)*(\w)\2`, which is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="0d094-199">パターン</span><span class="sxs-lookup"><span data-stu-id="0d094-199">Pattern</span></span>|<span data-ttu-id="0d094-200">説明</span><span class="sxs-lookup"><span data-stu-id="0d094-200">Description</span></span>|  
|-------------|-----------------|  
|`(\d+)*`|<span data-ttu-id="0d094-201">10進数字の1回以上の出現と一致します。</span><span class="sxs-lookup"><span data-stu-id="0d094-201">Match one or more occurrence of a decimal digit.</span></span> <span data-ttu-id="0d094-202">これが最初のキャプチャ グループです。</span><span class="sxs-lookup"><span data-stu-id="0d094-202">This is the first capturing group.</span></span> <span data-ttu-id="0d094-203">0回または1回、このパターンに一致します。</span><span class="sxs-lookup"><span data-stu-id="0d094-203">Match this pattern either zero or one time.</span></span>|  
|`(\w)`|<span data-ttu-id="0d094-204">これが 2 番目のキャプチャ グループです。</span><span class="sxs-lookup"><span data-stu-id="0d094-204">This is the second capturing group.</span></span>|  
|`\k`|<span data-ttu-id="0d094-205">2番目のキャプチャグループによってキャプチャされた文字列と一致します。</span><span class="sxs-lookup"><span data-stu-id="0d094-205">Match the string captured by the second capturing group.</span></span>|  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.item/cs/item3.cs" interactive="try-dotnet" id="Snippet2":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.item/vb/item3.vb" id="Snippet2":::  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md"><span data-ttu-id="0d094-206">正規表現でのコンストラクトのグループ化</span><span class="sxs-lookup"><span data-stu-id="0d094-206">Grouping Constructs in Regular Expressions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Group this[string groupname] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.Group Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(groupname As String) As Group" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::RegularExpressions::Group ^ default[System::String ^] { System::Text::RegularExpressions::Group ^ get(System::String ^ groupname); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : System.Text.RegularExpressions.Group" Usage="System.Text.RegularExpressions.GroupCollection.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyDictionary`2.Item(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Group</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupname" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="groupname"><span data-ttu-id="0d094-207">キャプチャ グループの名前。</span><span class="sxs-lookup"><span data-stu-id="0d094-207">The name of a capturing group.</span></span></param>
        <summary><span data-ttu-id="0d094-208">文字列インデックスによってコレクションのメンバーにアクセスできるようにします。</span><span class="sxs-lookup"><span data-stu-id="0d094-208">Enables access to a member of the collection by string index.</span></span></summary>
        <value><span data-ttu-id="0d094-209"><paramref name="groupname" /> で指定されたコレクションのメンバー。</span><span class="sxs-lookup"><span data-stu-id="0d094-209">The member of the collection specified by <paramref name="groupname" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d094-210">`groupName` には、正規表現で `(?<`*name*`>)` 要素で定義されているキャプチャグループの名前、またはグループ化構成体で定義されているキャプチャグループの番号の文字列形式のいずれかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="0d094-210">`groupName` can be either the name of a capturing group that is defined by the `(?<`*name*`>)` element in a regular expression, or the string representation of the number of a capturing group that is defined by a grouping construct.</span></span> <span data-ttu-id="0d094-211">正規表現でのグループの詳細については、「[グループ化構成体](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0d094-211">For more information about groups in regular expressions, see [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md).</span></span>  
  
 <span data-ttu-id="0d094-212"><xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=nameWithType> メソッドを呼び出すことによって、<xref:System.Text.RegularExpressions.Regex> オブジェクト内のすべてのキャプチャ対象グループの名前を取得できます。</span><span class="sxs-lookup"><span data-stu-id="0d094-212">You can retrieve the names of all the captured groups in a <xref:System.Text.RegularExpressions.Regex> object by calling the <xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="0d094-213"><xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A?displayProperty=nameWithType> メソッドを呼び出すことによって、正規表現内のキャプチャグループの数を名前にマップすることもできます。</span><span class="sxs-lookup"><span data-stu-id="0d094-213">You can also map the numbers of capturing groups in a regular expression to their names by calling the <xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="0d094-214">配列の個々の名前は、キャプチャされた文字列を取得するために <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> プロパティに渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="0d094-214">Individual names from the array can then be passed to the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> property to retrieve the captured string.</span></span>  
  
 <span data-ttu-id="0d094-215">`groupname` がコレクション内のキャプチャグループの名前でない場合、または `groupname` が入力文字列で一致していないキャプチャグループの名前である場合、メソッドは <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> プロパティが `false` で `Group.Value` プロパティが <xref:System.String.Empty?displayProperty=nameWithType>である <xref:System.Text.RegularExpressions.Group> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="0d094-215">If `groupname` is not the name of a capturing group in the collection, or if `groupname` is the name of a capturing group that has not been matched in the input string, the method returns a <xref:System.Text.RegularExpressions.Group> object whose <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> property is `false` and whose `Group.Value` property is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0d094-216">次の例では、2つの名前付きグループで構成される正規表現を定義します。</span><span class="sxs-lookup"><span data-stu-id="0d094-216">The following example defines a regular expression that consists of two named groups.</span></span> <span data-ttu-id="0d094-217">最初のグループである `numbers`は、1つ以上の連続する数字をキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="0d094-217">The first group, `numbers`, captures one or more consecutive digits.</span></span> <span data-ttu-id="0d094-218">2番目のグループである `letter`は、1つの文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="0d094-218">The second group, `letter`, matches a single character.</span></span> <span data-ttu-id="0d094-219">正規表現エンジンは、`numbers` グループによって定義されたパターンの0回または1回の出現を検索するため、一致が成功した場合でも、`numbers` グループは常に存在するとは限りません。</span><span class="sxs-lookup"><span data-stu-id="0d094-219">Because the regular expression engine looks for zero or one occurrence of the pattern defined by the `numbers` group, the `numbers` group is not always present even if a match is successful.</span></span> <span data-ttu-id="0d094-220">この例では、<xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> プロパティを使用して、一致しないグループ、一致するグループ、および正規表現で定義されていないグループを取得した場合の結果を示します。</span><span class="sxs-lookup"><span data-stu-id="0d094-220">The example then illustrates the result when the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> property is used to retrieve an unmatched group, a matched group, and a group that is not defined in the regular expression.</span></span> <span data-ttu-id="0d094-221">この例では、次の表に示すように、正規表現パターン `(?<numbers>\d+)*(?<letter>\w)\k<letter>`を定義しています。</span><span class="sxs-lookup"><span data-stu-id="0d094-221">The example defines a regular expression pattern `(?<numbers>\d+)*(?<letter>\w)\k<letter>`, which is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="0d094-222">パターン</span><span class="sxs-lookup"><span data-stu-id="0d094-222">Pattern</span></span>|<span data-ttu-id="0d094-223">説明</span><span class="sxs-lookup"><span data-stu-id="0d094-223">Description</span></span>|  
|-------------|-----------------|  
|`(?<numbers>\d+)*`|<span data-ttu-id="0d094-224">10進数字の1回以上の出現と一致します。</span><span class="sxs-lookup"><span data-stu-id="0d094-224">Match one or more occurrence of a decimal digit.</span></span> <span data-ttu-id="0d094-225">`numbers` キャプチャグループの名前を指定します。</span><span class="sxs-lookup"><span data-stu-id="0d094-225">Name this the `numbers` capturing group.</span></span> <span data-ttu-id="0d094-226">0回または1回、このパターンに一致します。</span><span class="sxs-lookup"><span data-stu-id="0d094-226">Match this pattern either zero or one time.</span></span>|  
|`(?<letter>\w)`|<span data-ttu-id="0d094-227">1つの単語文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="0d094-227">Match a single word character.</span></span> <span data-ttu-id="0d094-228">`letter` キャプチャグループの名前を指定します。</span><span class="sxs-lookup"><span data-stu-id="0d094-228">Name this the `letter` capturing group.</span></span>|  
|`\k<letter>`|<span data-ttu-id="0d094-229">`letter` キャプチャグループによってキャプチャされた文字列と一致します。</span><span class="sxs-lookup"><span data-stu-id="0d094-229">Match the string captured by the `letter` capturing group.</span></span>|  
 
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.item/cs/item2.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.item/vb/item2.vb" id="Snippet1":::
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md"><span data-ttu-id="0d094-230">正規表現でのコンストラクトのグループ化</span><span class="sxs-lookup"><span data-stu-id="0d094-230">Grouping Constructs in Regular Expressions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;string&gt; Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;string&gt; Keys" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.Keys" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Keys As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ Keys { System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Keys : seq&lt;string&gt;" Usage="System.Text.RegularExpressions.GroupCollection.Keys" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyDictionary`2.Keys</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0d094-231">グループ コレクションの名前キーを含む文字列列挙体を取得します。</span><span class="sxs-lookup"><span data-stu-id="0d094-231">Gets a string enumeration that contains the name keys of the group collection.</span></span></summary>
        <value><span data-ttu-id="0d094-232">グループコレクションの名前キー。</span><span class="sxs-lookup"><span data-stu-id="0d094-232">The name keys of the group collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="0d094-233">列挙可能なコレクション内のキーの順序は指定されていませんが、実装では、キーが <xref:System.Collections.Generic.IReadOnlyDictionary%602.Values%2A> プロパティによって返される列挙可能なコレクション内の対応する値と同じ順序であることを保証する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0d094-233">The order of the keys in the enumerable collection is unspecified, but the implementation must guarantee that the keys are in the same order as the corresponding values in the enumerable collection that is returned by the <xref:System.Collections.Generic.IReadOnlyDictionary%602.Values%2A> property.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SyncRoot : obj" Usage="System.Text.RegularExpressions.GroupCollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0d094-234"><see cref="T:System.Text.RegularExpressions.GroupCollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="0d094-234">Gets an object that can be used to synchronize access to the <see cref="T:System.Text.RegularExpressions.GroupCollection" />.</span></span></summary>
        <value><span data-ttu-id="0d094-235">同期する <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトのコピー。</span><span class="sxs-lookup"><span data-stu-id="0d094-235">A copy of the <see cref="T:System.Text.RegularExpressions.Match" /> object to synchronize.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!WARNING]
>  <span data-ttu-id="0d094-236">このメンバーは [!INCLUDE[net_portable](~/includes/net-portable-md.md)]に存在しません。</span><span class="sxs-lookup"><span data-stu-id="0d094-236">This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)].</span></span> <span data-ttu-id="0d094-237">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]を対象とするアプリケーションを開発している場合は、代わりに <xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23SyncRoot%2A?displayProperty=nameWithType> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="0d094-237">If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23SyncRoot%2A?displayProperty=nameWithType> property instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.RegularExpressions.GroupCollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Add">
      <MemberSignature Language="C#" Value="void ICollection&lt;Group&gt;.Add (System.Text.RegularExpressions.Group item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Add(class System.Text.RegularExpressions.Group item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection&lt;System#Text#RegularExpressions#Group&gt;#Add(System.Text.RegularExpressions.Group)" />
      <MemberSignature Language="VB.NET" Value="Sub Add (item As Group) Implements ICollection(Of Group).Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Add(System::Text::RegularExpressions::Group ^ item) = System::Collections::Generic::ICollection&lt;System::Text::RegularExpressions::Group ^&gt;::Add;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Add : System.Text.RegularExpressions.Group -&gt; unit&#xA;override this.System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Add : System.Text.RegularExpressions.Group -&gt; unit" Usage="groupCollection.System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Add item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Text.RegularExpressions.Group" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="0d094-238">コレクションに追加するグループ。</span><span class="sxs-lookup"><span data-stu-id="0d094-238">The group to add to the collection.</span></span></param>
        <summary><span data-ttu-id="0d094-239">このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="0d094-239">Calling this method always throws <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="0d094-240">このメソッドはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="0d094-240">This method is not supported.</span></span> <span data-ttu-id="0d094-241">これは読み取り専用のコレクションです。</span><span class="sxs-lookup"><span data-stu-id="0d094-241">This is a read-only collection.</span></span></exception>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Clear">
      <MemberSignature Language="C#" Value="void ICollection&lt;Group&gt;.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection&lt;System#Text#RegularExpressions#Group&gt;#Clear" />
      <MemberSignature Language="VB.NET" Value="Sub Clear () Implements ICollection(Of Group).Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Clear() = System::Collections::Generic::ICollection&lt;System::Text::RegularExpressions::Group ^&gt;::Clear;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Clear : unit -&gt; unit&#xA;override this.System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Clear : unit -&gt; unit" Usage="groupCollection.System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0d094-242">このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="0d094-242">Calling this method always throws <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="0d094-243">このメソッドはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="0d094-243">This method is not supported.</span></span> <span data-ttu-id="0d094-244">これは読み取り専用のコレクションです。</span><span class="sxs-lookup"><span data-stu-id="0d094-244">This is a read-only collection.</span></span></exception>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Contains">
      <MemberSignature Language="C#" Value="bool ICollection&lt;Group&gt;.Contains (System.Text.RegularExpressions.Group item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Contains(class System.Text.RegularExpressions.Group item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection&lt;System#Text#RegularExpressions#Group&gt;#Contains(System.Text.RegularExpressions.Group)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (item As Group) As Boolean Implements ICollection(Of Group).Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Contains(System::Text::RegularExpressions::Group ^ item) = System::Collections::Generic::ICollection&lt;System::Text::RegularExpressions::Group ^&gt;::Contains;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Contains : System.Text.RegularExpressions.Group -&gt; bool&#xA;override this.System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Contains : System.Text.RegularExpressions.Group -&gt; bool" Usage="groupCollection.System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Contains item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Text.RegularExpressions.Group" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="0d094-245">グループ コレクションで検索するグループ。</span><span class="sxs-lookup"><span data-stu-id="0d094-245">The group to locate in the group collection.</span></span></param>
        <summary><span data-ttu-id="0d094-246">グループ コレクションに特定のグループ項目が含まれているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="0d094-246">Determines whether the group collection contains a specific group item.</span></span></summary>
        <returns><span data-ttu-id="0d094-247">グループ項目がグループ コレクションで見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0d094-247"><see langword="true" /> if the group item is found in the group collection; <see langword="false" /> otherwise.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="0d094-248">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="0d094-248">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="0d094-249">これは、<xref:System.Text.RegularExpressions.GroupCollection> のインスタンスが <xref:System.Collections.Generic.ICollection%601> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="0d094-249">It can be used only when the <xref:System.Text.RegularExpressions.GroupCollection> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.</span></span> 

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Remove">
      <MemberSignature Language="C#" Value="bool ICollection&lt;Group&gt;.Remove (System.Text.RegularExpressions.Group item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Remove(class System.Text.RegularExpressions.Group item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection&lt;System#Text#RegularExpressions#Group&gt;#Remove(System.Text.RegularExpressions.Group)" />
      <MemberSignature Language="VB.NET" Value="Function Remove (item As Group) As Boolean Implements ICollection(Of Group).Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Remove(System::Text::RegularExpressions::Group ^ item) = System::Collections::Generic::ICollection&lt;System::Text::RegularExpressions::Group ^&gt;::Remove;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Remove : System.Text.RegularExpressions.Group -&gt; bool&#xA;override this.System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Remove : System.Text.RegularExpressions.Group -&gt; bool" Usage="groupCollection.System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Remove item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Text.RegularExpressions.Group" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="0d094-250">削除するグループ。</span><span class="sxs-lookup"><span data-stu-id="0d094-250">The group to remove.</span></span></param>
        <summary><span data-ttu-id="0d094-251">このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="0d094-251">Calling this method always throws <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <returns><span data-ttu-id="0d094-252">このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="0d094-252">Calling this method always throws <see cref="T:System.NotSupportedException" />.</span></span></returns>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="0d094-253">このメソッドはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="0d094-253">This method is not supported.</span></span> <span data-ttu-id="0d094-254">これは読み取り専用のコレクションです。</span><span class="sxs-lookup"><span data-stu-id="0d094-254">This is a read-only collection.</span></span></exception>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.RegularExpressions.Group&gt;&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;string,System.Text.RegularExpressions.Group&gt;&gt; IEnumerable&lt;KeyValuePair&lt;string,Group&gt;&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Text.RegularExpressions.Group&gt;&gt; System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.RegularExpressions.Group&gt;&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IEnumerable&lt;System#Collections#Generic#KeyValuePair&lt;System#String,System#Text#RegularExpressions#Group&gt;&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of KeyValuePair(Of String, Group)) Implements IEnumerable(Of KeyValuePair(Of String, Group)).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Text::RegularExpressions::Group ^&gt;&gt; ^ System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.RegularExpressions.Group&gt;&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Text::RegularExpressions::Group ^&gt;&gt;::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.RegularExpressions.Group&gt;&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;string, System.Text.RegularExpressions.Group&gt;&gt;&#xA;override this.System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.RegularExpressions.Group&gt;&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;string, System.Text.RegularExpressions.Group&gt;&gt;" Usage="groupCollection.System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.RegularExpressions.Group&gt;&gt;.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.RegularExpressions.Group&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0d094-255">グループ コレクションを反復処理する列挙子を提供します。</span><span class="sxs-lookup"><span data-stu-id="0d094-255">Provides an enumerator that iterates through the group collection.</span></span></summary>
        <returns><span data-ttu-id="0d094-256"><see cref="T:System.Text.RegularExpressions.Group" /> コレクション内のすべての名前とオブジェクトを含む列挙子。</span><span class="sxs-lookup"><span data-stu-id="0d094-256">An enumerator that contains all names and objects in the <see cref="T:System.Text.RegularExpressions.Group" /> collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="0d094-257">コレクション内の <xref:System.Text.RegularExpressions.Group> オブジェクトを反復処理できる列挙子を取得するには、このメソッドを呼び出すのではなく、グループイテレーション構成 (のC# `foreach` や `For Each`...`Next` を使用する必要があり</span><span class="sxs-lookup"><span data-stu-id="0d094-257">Instead of calling this method to retrieve an enumerator that lets you iterate through the <xref:System.Text.RegularExpressions.Group> objects in the collection, you should use the group iteration construct (such as `foreach` in C# and `For Each`…`Next`</span></span> <span data-ttu-id="0d094-258">Visual Basic)。プログラミング言語によって提供されます。</span><span class="sxs-lookup"><span data-stu-id="0d094-258">in Visual Basic) that is provided by your programming language.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;System.Text.RegularExpressions.Group&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;System.Text.RegularExpressions.Group&gt; IEnumerable&lt;Group&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class System.Text.RegularExpressions.Group&gt; System.Collections.Generic.IEnumerable&lt;System.Text.RegularExpressions.Group&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IEnumerable&lt;System#Text#RegularExpressions#Group&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of Group) Implements IEnumerable(Of Group).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;System::Text::RegularExpressions::Group ^&gt; ^ System.Collections.Generic.IEnumerable&lt;System.Text.RegularExpressions.Group&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;System::Text::RegularExpressions::Group ^&gt;::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.IEnumerable&lt;System.Text.RegularExpressions.Group&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.Text.RegularExpressions.Group&gt;&#xA;override this.System.Collections.Generic.IEnumerable&lt;System.Text.RegularExpressions.Group&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.Text.RegularExpressions.Group&gt;" Usage="groupCollection.System.Collections.Generic.IEnumerable&lt;System.Text.RegularExpressions.Group&gt;.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Text.RegularExpressions.Group&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0d094-259">グループ コレクションを反復処理する列挙子を提供します。</span><span class="sxs-lookup"><span data-stu-id="0d094-259">Provides an enumerator that iterates through the group collection.</span></span></summary>
        <returns><span data-ttu-id="0d094-260">グループ コレクション内のすべての <see cref="T:System.Text.RegularExpressions.Group" /> オブジェクトを含む列挙子。</span><span class="sxs-lookup"><span data-stu-id="0d094-260">An enumerator that contains all <see cref="T:System.Text.RegularExpressions.Group" /> objects in the group collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="0d094-261">コレクション内の <xref:System.Text.RegularExpressions.Group> オブジェクトを反復処理できる列挙子を取得するには、このメソッドを呼び出すのではなく、グループイテレーション構成 (のC# `foreach` や `For Each`...`Next` を使用する必要があり</span><span class="sxs-lookup"><span data-stu-id="0d094-261">Instead of calling this method to retrieve an enumerator that lets you iterate through the <xref:System.Text.RegularExpressions.Group> objects in the collection, you should use the group iteration construct (such as `foreach` in C# and `For Each`…`Next`</span></span> <span data-ttu-id="0d094-262">Visual Basic)。プログラミング言語によって提供されます。</span><span class="sxs-lookup"><span data-stu-id="0d094-262">in Visual Basic) that is provided by your programming language.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.IndexOf">
      <MemberSignature Language="C#" Value="int IList&lt;Group&gt;.IndexOf (System.Text.RegularExpressions.Group item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.IndexOf(class System.Text.RegularExpressions.Group item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList&lt;System#Text#RegularExpressions#Group&gt;#IndexOf(System.Text.RegularExpressions.Group)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (item As Group) As Integer Implements IList(Of Group).IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.IndexOf(System::Text::RegularExpressions::Group ^ item) = System::Collections::Generic::IList&lt;System::Text::RegularExpressions::Group ^&gt;::IndexOf;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.IndexOf : System.Text.RegularExpressions.Group -&gt; int&#xA;override this.System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.IndexOf : System.Text.RegularExpressions.Group -&gt; int" Usage="groupCollection.System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.IndexOf item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.IndexOf(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Text.RegularExpressions.Group" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="0d094-263">グループ コレクションで検索するグループ。</span><span class="sxs-lookup"><span data-stu-id="0d094-263">The group to locate in the group collection.</span></span></param>
        <summary><span data-ttu-id="0d094-264">グループ コレクション内の特定グループのインデックスを確認します。</span><span class="sxs-lookup"><span data-stu-id="0d094-264">Determines the index of a specific group in the group collection.</span></span></summary>
        <returns><span data-ttu-id="0d094-265"><paramref name="item" /> が見つかった場合はそのインデックス。それ以外の場合は -1。</span><span class="sxs-lookup"><span data-stu-id="0d094-265">The index of the <paramref name="item" /> if found; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="0d094-266">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="0d094-266">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="0d094-267">これは、<xref:System.Text.RegularExpressions.GroupCollection> のインスタンスが <xref:System.Collections.Generic.IList%601> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="0d094-267">It can be used only when the <xref:System.Text.RegularExpressions.GroupCollection> instance is cast to an <xref:System.Collections.Generic.IList%601> interface.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Insert">
      <MemberSignature Language="C#" Value="void IList&lt;Group&gt;.Insert (int index, System.Text.RegularExpressions.Group item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Insert(int32 index, class System.Text.RegularExpressions.Group item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList&lt;System#Text#RegularExpressions#Group&gt;#Insert(System.Int32,System.Text.RegularExpressions.Group)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, item As Group) Implements IList(Of Group).Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Insert(int index, System::Text::RegularExpressions::Group ^ item) = System::Collections::Generic::IList&lt;System::Text::RegularExpressions::Group ^&gt;::Insert;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Insert : int * System.Text.RegularExpressions.Group -&gt; unit&#xA;override this.System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Insert : int * System.Text.RegularExpressions.Group -&gt; unit" Usage="groupCollection.System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Insert (index, item)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="item" Type="System.Text.RegularExpressions.Group" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="0d094-268">グループを挿入する位置。</span><span class="sxs-lookup"><span data-stu-id="0d094-268">The position at which to insert the group.</span></span></param>
        <param name="item"><span data-ttu-id="0d094-269">挿入するグループ。</span><span class="sxs-lookup"><span data-stu-id="0d094-269">The group to insert.</span></span></param>
        <summary><span data-ttu-id="0d094-270">このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="0d094-270">Calling this method always throws <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="0d094-271">このメソッドはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="0d094-271">This method is not supported.</span></span> <span data-ttu-id="0d094-272">これは読み取り専用のコレクションです。</span><span class="sxs-lookup"><span data-stu-id="0d094-272">This is a read-only collection.</span></span></exception>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Item">
      <MemberSignature Language="C#" Value="System.Text.RegularExpressions.Group System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.Group System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList&lt;System#Text#RegularExpressions#Group&gt;#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Group Implements IList(Of Group).Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Text::RegularExpressions::Group ^ System::Collections::Generic::IList&lt;System::Text::RegularExpressions::Group&gt;::Item[int] { System::Text::RegularExpressions::Group ^ get(int index); void set(int index, System::Text::RegularExpressions::Group ^ value); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Item(int) : System.Text.RegularExpressions.Group with get, set" Usage="System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IList`1.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Group</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="0d094-273">グループ コレクションのグループの 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="0d094-273">The zero-based index of the group in the group collection.</span></span></param>
        <summary><span data-ttu-id="0d094-274">コレクション内の指定した位置のグループを取得します。</span><span class="sxs-lookup"><span data-stu-id="0d094-274">Gets the group at the specified position in the collection.</span></span></summary>
        <value><span data-ttu-id="0d094-275">目的の位置にあるグループ。</span><span class="sxs-lookup"><span data-stu-id="0d094-275">The group in the desired position.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="0d094-276">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="0d094-276">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="0d094-277">これは、<xref:System.Text.RegularExpressions.GroupCollection> のインスタンスが <xref:System.Collections.Generic.IList%601> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="0d094-277">It can be used only when the <xref:System.Text.RegularExpressions.GroupCollection> instance is cast to an <xref:System.Collections.Generic.IList%601> interface.</span></span>

         ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="0d094-278">項目を設定できません。</span><span class="sxs-lookup"><span data-stu-id="0d094-278">Cannot set an item.</span></span> <span data-ttu-id="0d094-279">これは読み取り専用のコレクションです。</span><span class="sxs-lookup"><span data-stu-id="0d094-279">This is a read-only collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.RemoveAt">
      <MemberSignature Language="C#" Value="void IList&lt;Group&gt;.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList&lt;System#Text#RegularExpressions#Group&gt;#RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub RemoveAt (index As Integer) Implements IList(Of Group).RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.RemoveAt(int index) = System::Collections::Generic::IList&lt;System::Text::RegularExpressions::Group ^&gt;::RemoveAt;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.RemoveAt : int -&gt; unit&#xA;override this.System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.RemoveAt : int -&gt; unit" Usage="groupCollection.System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.RemoveAt index" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="0d094-280">削除するグループの 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="0d094-280">The zero-based index of the group to remove.</span></span></param>
        <summary><span data-ttu-id="0d094-281">このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="0d094-281">Calling this method always throws <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="0d094-282">このメソッドはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="0d094-282">This method is not supported.</span></span> <span data-ttu-id="0d094-283">これは読み取り専用のコレクションです。</span><span class="sxs-lookup"><span data-stu-id="0d094-283">This is a read-only collection.</span></span></exception>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub CopyTo (array As Array, arrayIndex As Integer) Implements ICollection.CopyTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int arrayIndex) = System::Collections::ICollection::CopyTo;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.ICollection.CopyTo : Array * int -&gt; unit&#xA;override this.System.Collections.ICollection.CopyTo : Array * int -&gt; unit" Usage="groupCollection.System.Collections.ICollection.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
        <Parameter Name="arrayIndex" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="0d094-284">コレクションのコピー先の 1 次元配列。</span><span class="sxs-lookup"><span data-stu-id="0d094-284">The one-dimensional array the collection is to be copied into.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="0d094-285">コピーの開始位置となる、コピー先配列内の 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="0d094-285">The zero-based index in the destination array where copying is to begin.</span></span></param>
        <summary><span data-ttu-id="0d094-286">指定したインデックスを開始位置として、指定した配列にコレクションのすべての要素をコピーします。</span><span class="sxs-lookup"><span data-stu-id="0d094-286">Copies all the elements of the collection to the specified array beginning at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="0d094-287">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="0d094-287">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="0d094-288">これは、<xref:System.Text.RegularExpressions.GroupCollection> のインスタンスが <xref:System.Collections.ICollection> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="0d094-288">It can be used only when the <xref:System.Text.RegularExpressions.GroupCollection> instance is cast to an <xref:System.Collections.ICollection> interface.</span></span> 

         ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0d094-289"><paramref name="array" /> が null です。</span><span class="sxs-lookup"><span data-stu-id="0d094-289"><paramref name="array" /> is null.</span></span></exception>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="0d094-290"><paramref name="arrayIndex" /> が <paramref name="array" /> の境界の外側にあります。あるいは、<paramref name="arrayIndex" /> に <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> を加えた値が <paramref name="array" /> の境界の外側にあります。</span><span class="sxs-lookup"><span data-stu-id="0d094-290"><paramref name="arrayIndex" /> is outside the bounds of <paramref name="array" />.-or-<paramref name="arrayIndex" /> plus <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> is outside the bounds of <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.ICollection.IsSynchronized : bool" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0d094-291">コレクションへのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="0d094-291">Gets a value that indicates whether access to the collection is synchronized (thread-safe).</span></span></summary>
        <value><span data-ttu-id="0d094-292">常に <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0d094-292"><see langword="false" /> in all cases.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="0d094-293">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="0d094-293">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="0d094-294">これは、<xref:System.Text.RegularExpressions.GroupCollection> のインスタンスが <xref:System.Collections.ICollection> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="0d094-294">It can be used only when the <xref:System.Text.RegularExpressions.GroupCollection> instance is cast to an <xref:System.Collections.ICollection> interface.</span></span>
 
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.ICollection.SyncRoot : obj" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0d094-295">コレクションへのアクセスを同期するために使用できるオブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="0d094-295">Gets an object that can be used to synchronize access to the collection.</span></span></summary>
        <value><span data-ttu-id="0d094-296">コレクションへのアクセスを同期するために使用できるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0d094-296">An object that can be used to synchronize access to the collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="0d094-297">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="0d094-297">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="0d094-298">これは、<xref:System.Text.RegularExpressions.GroupCollection> のインスタンスが <xref:System.Collections.ICollection> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="0d094-298">It can be used only when the <xref:System.Text.RegularExpressions.GroupCollection> instance is cast to an <xref:System.Collections.ICollection> interface.</span></span>
 
           ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IList.Add : obj -&gt; int&#xA;override this.System.Collections.IList.Add : obj -&gt; int" Usage="groupCollection.System.Collections.IList.Add value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="0d094-299">グループ コレクションに追加するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0d094-299">The object to add to the group collection.</span></span></param>
        <summary><span data-ttu-id="0d094-300">このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="0d094-300">Calling this method always throws <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <returns><span data-ttu-id="0d094-301">このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="0d094-301">Calling this method always throws <see cref="T:System.NotSupportedException" />.</span></span></returns>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="0d094-302">このメソッドはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="0d094-302">This method is not supported.</span></span> <span data-ttu-id="0d094-303">これは読み取り専用のコレクションです。</span><span class="sxs-lookup"><span data-stu-id="0d094-303">This is a read-only collection.</span></span></exception>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Clear">
      <MemberSignature Language="C#" Value="void IList.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Clear" />
      <MemberSignature Language="VB.NET" Value="Sub Clear () Implements IList.Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Clear() = System::Collections::IList::Clear;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IList.Clear : unit -&gt; unit&#xA;override this.System.Collections.IList.Clear : unit -&gt; unit" Usage="groupCollection.System.Collections.IList.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0d094-304">このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="0d094-304">Calling this method always throws <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="0d094-305">このメソッドはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="0d094-305">This method is not supported.</span></span> <span data-ttu-id="0d094-306">これは読み取り専用のコレクションです。</span><span class="sxs-lookup"><span data-stu-id="0d094-306">This is a read-only collection.</span></span></exception>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IList.Contains : obj -&gt; bool&#xA;override this.System.Collections.IList.Contains : obj -&gt; bool" Usage="groupCollection.System.Collections.IList.Contains value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="0d094-307">グループ コレクションで検索するグループ。</span><span class="sxs-lookup"><span data-stu-id="0d094-307">The group to locate in the group collection.</span></span></param>
        <summary><span data-ttu-id="0d094-308">グループ コレクションに特定のグループ項目が含まれているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="0d094-308">Determines whether the group collection contains a specific group item.</span></span></summary>
        <returns><span data-ttu-id="0d094-309">グループ項目がグループ コレクションで見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0d094-309"><see langword="true" /> if the group item is found in the group collection; <see langword="false" /> otherwise.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="0d094-310">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="0d094-310">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="0d094-311">これは、<xref:System.Text.RegularExpressions.GroupCollection> のインスタンスが <xref:System.Collections.IList> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="0d094-311">It can be used only when the <xref:System.Text.RegularExpressions.GroupCollection> instance is cast to an <xref:System.Collections.IList> interface.</span></span> 

           ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IList.IndexOf : obj -&gt; int&#xA;override this.System.Collections.IList.IndexOf : obj -&gt; int" Usage="groupCollection.System.Collections.IList.IndexOf value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="0d094-312">グループ コレクションで検索するグループ。</span><span class="sxs-lookup"><span data-stu-id="0d094-312">The group to locate in the group collection.</span></span></param>
        <summary><span data-ttu-id="0d094-313">グループ コレクション内の特定グループのインデックスを確認します。</span><span class="sxs-lookup"><span data-stu-id="0d094-313">Determines the index of a specific group in the group collection.</span></span></summary>
        <returns><span data-ttu-id="0d094-314"><paramref name="item" /> が見つかった場合はそのインデックス。それ以外の場合は -1。</span><span class="sxs-lookup"><span data-stu-id="0d094-314">The index of the <paramref name="item" /> if found; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="0d094-315">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="0d094-315">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="0d094-316">これは、<xref:System.Text.RegularExpressions.GroupCollection> のインスタンスが <xref:System.Collections.IList> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="0d094-316">It can be used only when the <xref:System.Text.RegularExpressions.GroupCollection> instance is cast to an <xref:System.Collections.IList> interface.</span></span> 

           ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IList.Insert : int * obj -&gt; unit&#xA;override this.System.Collections.IList.Insert : int * obj -&gt; unit" Usage="groupCollection.System.Collections.IList.Insert (index, value)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="0d094-317">グループを挿入する位置。</span><span class="sxs-lookup"><span data-stu-id="0d094-317">The position at which to insert the group.</span></span></param>
        <param name="value"><span data-ttu-id="0d094-318">挿入するグループ。</span><span class="sxs-lookup"><span data-stu-id="0d094-318">The group to insert.</span></span></param>
        <summary><span data-ttu-id="0d094-319">このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="0d094-319">Calling this method always throws <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="0d094-320">このメソッドはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="0d094-320">This method is not supported.</span></span> <span data-ttu-id="0d094-321">これは読み取り専用のコレクションです。</span><span class="sxs-lookup"><span data-stu-id="0d094-321">This is a read-only collection.</span></span></exception>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.IList.IsFixedSize : bool" Usage="System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0d094-322">グループ コレクションが固定サイズかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="0d094-322">Gets a value indicating whether the group collection has a fixed size.</span></span></summary>
        <value><span data-ttu-id="0d094-323">常に <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="0d094-323"><see langword="true" /> always.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="0d094-324">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="0d094-324">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="0d094-325">これは、<xref:System.Text.RegularExpressions.GroupCollection> のインスタンスが <xref:System.Collections.IList> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="0d094-325">It can be used only when the <xref:System.Text.RegularExpressions.GroupCollection> instance is cast to an <xref:System.Collections.IList> interface.</span></span> 

           ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IList::Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.IList.Item(int) : obj with get, set" Usage="System.Collections.IList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="0d094-326">グループ コレクションのグループの 0 から始まるインデックスの位置。</span><span class="sxs-lookup"><span data-stu-id="0d094-326">The zero-index position of the group in the group collection.</span></span></param>
        <summary><span data-ttu-id="0d094-327">目的の位置にあるグループを取得します。</span><span class="sxs-lookup"><span data-stu-id="0d094-327">Gets the group in the desired position.</span></span></summary>
        <value><span data-ttu-id="0d094-328">目的の位置にあるグループ。</span><span class="sxs-lookup"><span data-stu-id="0d094-328">The group in the desired position.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="0d094-329">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="0d094-329">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="0d094-330">これは、<xref:System.Text.RegularExpressions.GroupCollection> のインスタンスが <xref:System.Collections.IList> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="0d094-330">It can be used only when the <xref:System.Text.RegularExpressions.GroupCollection> instance is cast to an <xref:System.Collections.IList> interface.</span></span> 

           ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="0d094-331">項目を設定できません。</span><span class="sxs-lookup"><span data-stu-id="0d094-331">Cannot set an item.</span></span> <span data-ttu-id="0d094-332">これは読み取り専用のコレクションです。</span><span class="sxs-lookup"><span data-stu-id="0d094-332">This is a read-only collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IList.Remove : obj -&gt; unit&#xA;override this.System.Collections.IList.Remove : obj -&gt; unit" Usage="groupCollection.System.Collections.IList.Remove value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="0d094-333">削除するグループ。</span><span class="sxs-lookup"><span data-stu-id="0d094-333">The group to remove.</span></span></param>
        <summary><span data-ttu-id="0d094-334">このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="0d094-334">Calling this method always throws <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="0d094-335">このメソッドはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="0d094-335">This method is not supported.</span></span> <span data-ttu-id="0d094-336">これは読み取り専用のコレクションです。</span><span class="sxs-lookup"><span data-stu-id="0d094-336">This is a read-only collection.</span></span></exception>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.RemoveAt">
      <MemberSignature Language="C#" Value="void IList.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub RemoveAt (index As Integer) Implements IList.RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.RemoveAt(int index) = System::Collections::IList::RemoveAt;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IList.RemoveAt : int -&gt; unit&#xA;override this.System.Collections.IList.RemoveAt : int -&gt; unit" Usage="groupCollection.System.Collections.IList.RemoveAt index" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="0d094-337">削除するグループの 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="0d094-337">The zero-based index of the group to remove.</span></span></param>
        <summary><span data-ttu-id="0d094-338">このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="0d094-338">Calling this method always throws <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="0d094-339">このメソッドはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="0d094-339">This method is not supported.</span></span> <span data-ttu-id="0d094-340">これは読み取り専用のコレクションです。</span><span class="sxs-lookup"><span data-stu-id="0d094-340">This is a read-only collection.</span></span></exception>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (string key, out System.Text.RegularExpressions.Group value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetValue(string key, [out] class System.Text.RegularExpressions.Group&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.TryGetValue(System.String,System.Text.RegularExpressions.Group@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (key As String, ByRef value As Group) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetValue(System::String ^ key, [Runtime::InteropServices::Out] System::Text::RegularExpressions::Group ^ % value);" />
      <MemberSignature Language="F#" Value="abstract member TryGetValue : string * Group -&gt; bool&#xA;override this.TryGetValue : string * Group -&gt; bool" Usage="groupCollection.TryGetValue (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="value" Type="System.Text.RegularExpressions.Group" RefType="out" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="0d094-341">検索するグループ名キーを含む文字列。</span><span class="sxs-lookup"><span data-stu-id="0d094-341">A string with the group name key to look for.</span></span></param>
        <param name="value"><span data-ttu-id="0d094-342">メソッドが返されるときに <paramref name="key" /> が見つかった場合はグループ名。見つからなかった場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="0d094-342">When the method returns, the group whose name is <paramref name="key" />, if it is found; otherwise, <see langword="null" /> if not found.</span></span></param>
        <summary><span data-ttu-id="0d094-343">指定された名前キー (グループ コレクションに存在する場合) で識別されるグループの取得を試みます。</span><span class="sxs-lookup"><span data-stu-id="0d094-343">Attempts to retrieve a group identified by the provided name key, if it exists in the group collection.</span></span></summary>
        <returns><span data-ttu-id="0d094-344">指定された名前キーで識別されるグループが存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0d094-344"><see langword="true" /> if a group identified by the provided name key exists; <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Text.RegularExpressions.Group&gt; Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Text.RegularExpressions.Group&gt; Values" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.Values" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Values As IEnumerable(Of Group)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Text::RegularExpressions::Group ^&gt; ^ Values { System::Collections::Generic::IEnumerable&lt;System::Text::RegularExpressions::Group ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Values : seq&lt;System.Text.RegularExpressions.Group&gt;" Usage="System.Text.RegularExpressions.GroupCollection.Values" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyDictionary`2.Values</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Text.RegularExpressions.Group&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0d094-345">グループ コレクション内のすべてのグループを含むグループ列挙体を取得します。</span><span class="sxs-lookup"><span data-stu-id="0d094-345">Gets a group enumeration with all the groups in the group collection.</span></span></summary>
        <value><span data-ttu-id="0d094-346">グループ列挙体。</span><span class="sxs-lookup"><span data-stu-id="0d094-346">A group enumeration.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="0d094-347">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="0d094-347">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="0d094-348">これは、<xref:System.Text.RegularExpressions.GroupCollection> のインスタンスが <xref:System.Collections.Generic.IEnumerable%601> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="0d094-348">It can be used only when the <xref:System.Text.RegularExpressions.GroupCollection> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface.</span></span> 

         ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
