<Type Name="Match" FullName="System.Text.RegularExpressions.Match">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7604f3887c4a588a01499e20c6908f7daad83892" /><Meta Name="ms.sourcegitcommit" Value="f9576bf8c61e3d46834aeeff50f858359f2a99ba" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/09/2020" /><Meta Name="ms.locfileid" Value="77102017" /></Metadata><TypeSignature Language="C#" Value="public class Match : System.Text.RegularExpressions.Group" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Match extends System.Text.RegularExpressions.Group" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Match" />
  <TypeSignature Language="VB.NET" Value="Public Class Match&#xA;Inherits Group" />
  <TypeSignature Language="C++ CLI" Value="public ref class Match : System::Text::RegularExpressions::Group" />
  <TypeSignature Language="F#" Value="type Match = class&#xA;    inherit Group" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.RegularExpressions.Group</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="9bd5d-101">1 回の正規表現検索に一致した結果を表します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-101">Represents the results from a single regular expression match.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bd5d-102"><xref:System.Text.RegularExpressions.Match> オブジェクトは変更できず、パブリックコンストラクターもありません。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-102">The <xref:System.Text.RegularExpressions.Match> object is immutable and has no public constructor.</span></span> <span data-ttu-id="9bd5d-103"><xref:System.Text.RegularExpressions.Match> クラスのインスタンスは、<xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> メソッドによって返され、文字列内の最初のパターン一致を表します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-103">An instance of the <xref:System.Text.RegularExpressions.Match> class is returned by the <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> method and represents the first pattern match in a string.</span></span> <span data-ttu-id="9bd5d-104">後続の一致は、<xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> メソッドによって返される <xref:System.Text.RegularExpressions.Match> のオブジェクトによって表されます。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-104">Subsequent matches are represented by <xref:System.Text.RegularExpressions.Match> objects returned by the <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="9bd5d-105">さらに、0個以上の <xref:System.Text.RegularExpressions.Match> オブジェクトで構成される <xref:System.Text.RegularExpressions.MatchCollection> オブジェクトは、<xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType> メソッドによって返されます。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-105">In addition, a <xref:System.Text.RegularExpressions.MatchCollection> object that consists of zero, one, or more <xref:System.Text.RegularExpressions.Match> objects is returned by the <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="9bd5d-106"><xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType> メソッドが入力文字列内の正規表現パターンと一致しない場合、空の <xref:System.Text.RegularExpressions.MatchCollection> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-106">If the <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType> method fails to match a regular expression pattern in an input string, it returns an empty <xref:System.Text.RegularExpressions.MatchCollection> object.</span></span> <span data-ttu-id="9bd5d-107">その後、コレクションを反復処理するC#ために、または Visual Basic 内の `For Each` コンストラクトで `foreach` コンストラクトを使用できます。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-107">You can then use a `foreach` construct in C# or a `For Each` construct in Visual Basic to iterate the collection.</span></span>  
  
 <span data-ttu-id="9bd5d-108"><xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> メソッドが正規表現パターンに一致しない場合、<xref:System.Text.RegularExpressions.Match.Empty%2A?displayProperty=nameWithType>と等しい <xref:System.Text.RegularExpressions.Match> オブジェクトが返されます。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-108">If the <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> method fails to match the regular expression pattern, it returns a <xref:System.Text.RegularExpressions.Match> object that is equal to <xref:System.Text.RegularExpressions.Match.Empty%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="9bd5d-109"><xref:System.Text.RegularExpressions.Group.Success%2A> プロパティを使用して、一致が成功したかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-109">You can use the <xref:System.Text.RegularExpressions.Group.Success%2A> property to determine whether the match was successful.</span></span> <span data-ttu-id="9bd5d-110">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-110">The following example provides an illustration.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match1.vb#1)]  
  
 <span data-ttu-id="9bd5d-111">パターン一致が成功した場合、<xref:System.Text.RegularExpressions.Capture.Value%2A> プロパティには一致した部分文字列が含まれ、<xref:System.Text.RegularExpressions.Capture.Index%2A> プロパティは入力文字列内の一致した部分文字列の0から始まる開始位置を示し、<xref:System.Text.RegularExpressions.Capture.Length%2A> プロパティは入力文字列内の一致した部分文字列の長さを示します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-111">If a pattern match is successful, the <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the matched substring, the <xref:System.Text.RegularExpressions.Capture.Index%2A> property indicates the zero-based starting position of the matched substring in the input string, and the <xref:System.Text.RegularExpressions.Capture.Length%2A> property indicates the length of matched substring in the input string.</span></span>  
  
 <span data-ttu-id="9bd5d-112">単一の一致には複数のキャプチャグループが含まれる可能性があるため、<xref:System.Text.RegularExpressions.Match> には <xref:System.Text.RegularExpressions.GroupCollection>を返す <xref:System.Text.RegularExpressions.Match.Groups%2A> プロパティがあります。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-112">Because a single match can involve multiple capturing groups, <xref:System.Text.RegularExpressions.Match> has a <xref:System.Text.RegularExpressions.Match.Groups%2A> property that returns the <xref:System.Text.RegularExpressions.GroupCollection>.</span></span> <span data-ttu-id="9bd5d-113"><xref:System.Text.RegularExpressions.Match> インスタンス自体は、コレクション内の最初のオブジェクトに相当します。 `Match.Groups[0]` (Visual Basic の`Match.Groups(0)`) で、一致した文字列全体を表します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-113">The <xref:System.Text.RegularExpressions.Match> instance itself is equivalent to the first object in the collection, at `Match.Groups[0]` (`Match.Groups(0)` in Visual Basic), which represents the entire match.</span></span> <span data-ttu-id="9bd5d-114">次の方法で、キャプチャされたグループに一致したグループにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-114">You can access the captured groups in a match in the following ways:</span></span>  
  
-   <span data-ttu-id="9bd5d-115">`foreach` (C#) または `For Each` (Visual Basic) コンストラクトを使用して、<xref:System.Text.RegularExpressions.GroupCollection> オブジェクトのメンバーを反復処理できます。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-115">You can iterate the members of the <xref:System.Text.RegularExpressions.GroupCollection> object  by using a `foreach` (C#) or `For Each` (Visual Basic) construct.</span></span>  
  
-   <span data-ttu-id="9bd5d-116"><xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29?displayProperty=nameWithType> プロパティを使用して、キャプチャグループの番号によってグループを取得できます。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-116">You can use the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29?displayProperty=nameWithType> property to retrieve groups by the number of the capturing group.</span></span> <span data-ttu-id="9bd5d-117">インスタンス <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> メソッドを呼び出すことによって、正規表現に存在する番号付きグループを特定できます。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-117">Note that you can determine which numbered groups are present in a regular expression by calling the instance <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="9bd5d-118"><xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29?displayProperty=nameWithType> プロパティを使用して、キャプチャグループの名前でグループを取得できます。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-118">You can use the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29?displayProperty=nameWithType> property to retrieve groups by the name of the capturing group.</span></span> <span data-ttu-id="9bd5d-119">インスタンス <xref:System.Text.RegularExpressions.Regex.GetGroupNames?displayProperty=nameWithType> メソッドを呼び出すことによって、正規表現に存在する名前付きグループを特定できます。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-119">Note that you can determine which named groups are present in a regular expression by calling the instance <xref:System.Text.RegularExpressions.Regex.GetGroupNames?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9bd5d-120">次の例では、正規表現 `Console\.Write(Line)?`を使用します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-120">The following examples use the regular expression `Console\.Write(Line)?`.</span></span> <span data-ttu-id="9bd5d-121">この正規表現パターンは、次のように解釈されます。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-121">The regular expression is interpreted as follows:</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9bd5d-122">コンソール\\。企画</span><span class="sxs-lookup"><span data-stu-id="9bd5d-122">Console\\.Write</span></span>|<span data-ttu-id="9bd5d-123">文字列 "Console.Write" と一致します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-123">Match the string "Console.Write".</span></span> <span data-ttu-id="9bd5d-124">"." 文字はエスケープされ、任意の文字と一致するワイルドカードとしてではなく、リテラル期間として解釈されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-124">Note that the "." character is escaped so that it is interpreted as a literal period rather than as a wildcard that matches any character.</span></span>|  
|<span data-ttu-id="9bd5d-125">(行)?</span><span class="sxs-lookup"><span data-stu-id="9bd5d-125">(Line)?</span></span>|<span data-ttu-id="9bd5d-126">文字列 "Line" の 0 回または 1 回の繰り返しに一致します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-126">Match zero or one occurrence of the string "Line".</span></span>|  
  
 <span data-ttu-id="9bd5d-127">**例 1**</span><span class="sxs-lookup"><span data-stu-id="9bd5d-127">**Example 1**</span></span>  
  
 <span data-ttu-id="9bd5d-128">次の例では、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType> メソッドを呼び出して、入力文字列内のすべてのパターン一致を取得します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-128">The following example calls the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType> method to retrieve all pattern matches in an input string.</span></span> <span data-ttu-id="9bd5d-129">次に、返された <xref:System.Text.RegularExpressions.MatchCollection> オブジェクト内の <xref:System.Text.RegularExpressions.Match> オブジェクトを反復処理して、各一致に関する情報を表示します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-129">It then iterates the <xref:System.Text.RegularExpressions.Match> objects in the returned <xref:System.Text.RegularExpressions.MatchCollection> object to display information about each match.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match2.vb#2)]  
  
 <span data-ttu-id="9bd5d-130">**例 2**</span><span class="sxs-lookup"><span data-stu-id="9bd5d-130">**Example 2**</span></span>  
  
 <span data-ttu-id="9bd5d-131">次の例では、<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> と <xref:System.Text.RegularExpressions.Match.NextMatch%2A> メソッドを呼び出して、一度に1つの一致を取得します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-131">The following example calls the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> and <xref:System.Text.RegularExpressions.Match.NextMatch%2A> methods to retrieve one match at a time.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match3.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.RegularExpressions.MatchCollection" />
    <altmember cref="T:System.Text.RegularExpressions.Regex" />
  </Docs>
  <Members>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.RegularExpressions.Match Empty" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Match.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::RegularExpressions::Match ^ Empty { System::Text::RegularExpressions::Match ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Empty : System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Match.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9bd5d-132">空のグループを取得します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-132">Gets the empty group.</span></span> <span data-ttu-id="9bd5d-133">一致する対象が見つからなかった検索は、この空一致を返します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-133">All failed matches return this empty match.</span></span></summary>
        <value><span data-ttu-id="9bd5d-134">空一致。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-134">An empty match.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bd5d-135">このプロパティを使用して、一致が成功したかどうかを判断することはできません。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-135">This property should not be used to determine if a match is successful.</span></span> <span data-ttu-id="9bd5d-136">代わりに、`Match.Success` プロパティ (<xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType>から継承されます) を使用します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-136">Instead, use the `Match.Success` property (which is inherited from <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType>).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Groups">
      <MemberSignature Language="C#" Value="public virtual System.Text.RegularExpressions.GroupCollection Groups { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.GroupCollection Groups" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Match.Groups" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Groups As GroupCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Text::RegularExpressions::GroupCollection ^ Groups { System::Text::RegularExpressions::GroupCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Groups : System.Text.RegularExpressions.GroupCollection" Usage="System.Text.RegularExpressions.Match.Groups" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.GroupCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9bd5d-137">正規表現に一致したグループのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-137">Gets a collection of groups matched by the regular expression.</span></span></summary>
        <value><span data-ttu-id="9bd5d-138">パターンに一致した文字グループ。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-138">The character groups matched by the pattern.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bd5d-139">正規表現パターンには、正規表現パターンの一部をかっこで囲むことによって定義される部分式を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-139">A regular expression pattern can include subexpressions, which are defined by enclosing a portion of the regular expression pattern in parentheses.</span></span> <span data-ttu-id="9bd5d-140">このような部分式はすべてグループを形成します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-140">Every such subexpression forms a group.</span></span> <span data-ttu-id="9bd5d-141"><xref:System.Text.RegularExpressions.Match.Groups%2A> プロパティは、これらの部分式の一致に関する情報へのアクセスを提供します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-141">The <xref:System.Text.RegularExpressions.Match.Groups%2A> property provides access to information about those subexpression matches.</span></span> <span data-ttu-id="9bd5d-142">たとえば、北アメリカの電話番号に一致する正規表現パターン `(\d{3})-(\d{3}-\d{4})`には、2つの部分式があります。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-142">For example, the regular expression pattern `(\d{3})-(\d{3}-\d{4})`, which matches North American telephone numbers, has two subexpressions.</span></span> <span data-ttu-id="9bd5d-143">最初の部分は、電話番号の最初の3桁を構成する市外局番で構成されています。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-143">The first consists of the area code, which composes the first three digits of the telephone number.</span></span> <span data-ttu-id="9bd5d-144">このグループは、正規表現の最初の部分 (`(\d{3})`) によってキャプチャされます。2つ目は、電話番号の最後の7桁を構成する個々の電話番号で構成されます。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-144">This group is captured by the first portion of the regular expression, `(\d{3})`.The second consists of the individual telephone number, which composes the last seven digits of the telephone number.</span></span> <span data-ttu-id="9bd5d-145">このグループは、正規表現の2番目の部分 (`(\d{3}-\d{4})`) によってキャプチャされます。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-145">This group is captured by the second portion of the regular expression, `(\d{3}-\d{4})`.</span></span> <span data-ttu-id="9bd5d-146">この2つのグループは、次の例に示すように、<xref:System.Text.RegularExpressions.Match.Groups%2A> プロパティによって返される <xref:System.Text.RegularExpressions.GroupCollection> オブジェクトから取得できます。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-146">These two groups can then be retrieved from the <xref:System.Text.RegularExpressions.GroupCollection> object that is returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A> property, as the following example shows.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Groups#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/cs/groups1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Groups#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/vb/groups1.vb#1)]  
  
 <span data-ttu-id="9bd5d-147"><xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> プロパティによって返される <xref:System.Text.RegularExpressions.GroupCollection> オブジェクトは、0から始まるコレクションオブジェクトであり、常に少なくとも1つのメンバーを持ちます。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-147">The <xref:System.Text.RegularExpressions.GroupCollection> object returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> property is a zero-based collection object that always has at least one member.</span></span> <span data-ttu-id="9bd5d-148">正規表現エンジンが特定の入力文字列に一致するものが見つからない場合は、コレクション内の単一の <xref:System.Text.RegularExpressions.Group> オブジェクトの <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> プロパティ (インデックス0のオブジェクト) が `false` に設定され、<xref:System.Text.RegularExpressions.Group> オブジェクトの <xref:System.Text.RegularExpressions.Capture.Value%2A> プロパティが <xref:System.String.Empty?displayProperty=nameWithType>に設定されます。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-148">If the regular expression engine cannot find any matches in a particular input string, the <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> property of the single <xref:System.Text.RegularExpressions.Group> object in the collection (the object at index 0) is set to `false` and the <xref:System.Text.RegularExpressions.Group> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property is set to <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="9bd5d-149">正規表現エンジンが一致を見つけることができる場合、<xref:System.Text.RegularExpressions.Match.Groups%2A> プロパティによって返される <xref:System.Text.RegularExpressions.GroupCollection> オブジェクト (インデックス0の要素) の最初の要素には、正規表現パターン全体と一致する文字列が含まれます。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-149">If the regular expression engine can find a match, the first element of the <xref:System.Text.RegularExpressions.GroupCollection> object (the element at index 0) returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A> property contains a string that matches the entire regular expression pattern.</span></span> <span data-ttu-id="9bd5d-150">正規表現にキャプチャグループが含まれている場合、後続の各要素 (インデックス1の上から上) は、キャプチャされたグループを表します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-150">Each subsequent element, from index one upward, represents a captured group, if the regular expression includes capturing groups.</span></span> <span data-ttu-id="9bd5d-151">詳細については、「[グループ化構成体](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)」の記事の「グループ化構成体と正規表現オブジェクト」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-151">For more information, see the "Grouping Constructs and Regular Expression Objects" section of the [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md) article.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9bd5d-152">次の例では、正規表現パターンとサンプル文字列との照合を試みます。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-152">The following example attempts to match a regular expression pattern against a sample string.</span></span> <span data-ttu-id="9bd5d-153">この例では、<xref:System.Text.RegularExpressions.Match.Groups%2A> プロパティを使用して、コンソールに表示する一致によって取得される情報を格納します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-153">The example uses the <xref:System.Text.RegularExpressions.Match.Groups%2A> property to store information that is retrieved by the match for display to the console.</span></span>  
  
 [!code-cpp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]
 [!code-csharp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]
 [!code-vb[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextMatch">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Match NextMatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.Match NextMatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.NextMatch" />
      <MemberSignature Language="VB.NET" Value="Public Function NextMatch () As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::Match ^ NextMatch();" />
      <MemberSignature Language="F#" Value="member this.NextMatch : unit -&gt; System.Text.RegularExpressions.Match" Usage="match.NextMatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9bd5d-154">一致する対象が最後に見つかった位置の終了位置 (最後に一致した文字の後の文字) から開始して、次に一致する対象を検索した結果の新しい <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-154">Returns a new <see cref="T:System.Text.RegularExpressions.Match" /> object with the results for the next match, starting at the position at which the last match ended (at the character after the last matched character).</span></span></summary>
        <returns><span data-ttu-id="9bd5d-155">次の正規表現一致。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-155">The next regular expression match.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bd5d-156">このメソッドは、<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> を再度呼び出し、(`Index+Length`) を新しい開始位置として渡すことと似ています。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-156">This method is similar to calling <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> again and passing (`Index+Length`) as the new starting position.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9bd5d-157">このメソッドは、現在のインスタンスを変更しません。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-157">This method does not modify the current instance.</span></span> <span data-ttu-id="9bd5d-158">代わりに、次の一致に関する情報を含む新しい <xref:System.Text.RegularExpressions.Match> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-158">Instead, it returns a new <xref:System.Text.RegularExpressions.Match> object that contains information about the next match.</span></span>  
  
 <span data-ttu-id="9bd5d-159">次の一致を取得しようとすると、一致操作のタイムアウト値が有効であり、次の一致を検索する試みがタイムアウト間隔を超えた場合に、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException> がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-159">Attempting to retrieve the next match may throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> if a time-out value for matching operations is in effect and the attempt to find the next match exceeds that time-out interval.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9bd5d-160">次の例では、<xref:System.Text.RegularExpressions.Match.NextMatch%2A> メソッドを使用して、最初の一致を超える正規表現の一致を取得します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-160">The following example uses the <xref:System.Text.RegularExpressions.Match.NextMatch%2A> method to capture regular expression matches beyond the first match.</span></span>  
  
 [!code-cpp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]
 [!code-csharp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]
 [!code-vb[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"><span data-ttu-id="9bd5d-161">タイムアウトが発生しました。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-161">A time-out occurred.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="9bd5d-162"><see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> メソッドを呼び出すことによって一致試行が繰り返されると、正規表現エンジンによって空の文字列が特別に処理されます。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-162">When a match attempt is repeated by calling the <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> method, the regular expression engine gives empty matches special treatment.</span></span> <span data-ttu-id="9bd5d-163">通常、<see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> は、前回の一致が終了した箇所で、次の一致の検索を開始します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-163">Usually, <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> begins the search for the next match exactly where the previous match left off.</span></span> <span data-ttu-id="9bd5d-164">ただし、空の一致の後、<see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> メソッドは、次の一致を試行する前に1文字進めます。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-164">However, after an empty match, the <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> method advances by one character before trying the next match.</span></span> <span data-ttu-id="9bd5d-165">この動作により、正規表現エンジンが文字列を処理することが保証されます。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-165">This behavior guarantees that the regular expression engine will progress through the string.</span></span> <span data-ttu-id="9bd5d-166">それ以外の場合は、空の一致によって前方移動が行われないため、次の一致は前の一致とまったく同じ場所で開始され、同じ空の文字列と繰り返し一致します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-166">Otherwise, because an empty match does not result in any forward movement, the next match would start in exactly the same place as the previous match, and it would match the same empty string repeatedly.</span></span>  
  
<span data-ttu-id="9bd5d-167">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-167">The following example provides an illustration.</span></span> <span data-ttu-id="9bd5d-168">正規表現パターン<c>a \*</c>は、文字列 "abaabb" で、文字 "a" の0回以上の出現を検索します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-168">The regular expression pattern <c>a\*</c> searches for zero or more occurrences of the letter "a" in the string "abaabb".</span></span> <span data-ttu-id="9bd5d-169">この例の出力が示すように、検索では6つの一致が検出されます。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-169">As the output from the example shows, the search finds six matches.</span></span> <span data-ttu-id="9bd5d-170">最初の一致試行で最初の "a" が検索されます。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-170">The first match attempt finds the first "a".</span></span> <span data-ttu-id="9bd5d-171">2番目の一致は、最初の一致が終了した場所から最初の2つ前まで、"a" の0回の出現を検出し、空の文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-171">The second match starts exactly where the first match ends, before the first b; it finds zero occurrences of "a" and returns an empty string.</span></span> <span data-ttu-id="9bd5d-172">3番目の一致は、2番目の一致が終了した場所を正確に開始しません。これは、2番目の一致が空の文字列を返したためです。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-172">The third match does not begin exactly where the second match ended, because the second match returned an empty string.</span></span> <span data-ttu-id="9bd5d-173">代わりに、最初の "b" の後に1文字後に開始します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-173">Instead, it begins one character later, after the first "b".</span></span> <span data-ttu-id="9bd5d-174">3番目の一致では、"a" の2回の出現が検出され、"aa" が返されます。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-174">The third match finds two occurrences of "a" and returns "aa".</span></span> <span data-ttu-id="9bd5d-175">4回目の一致試行は、3番目の一致が終了し、2番目の "b" の前に、空の文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-175">The fourth match attempt begins where the third match ended, before the second "b", and returns an empty string.</span></span> <span data-ttu-id="9bd5d-176">5回目の一致では、1つの文字を再び進め、3番目の "b" の前に開始し、空の文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-176">The fifth match attempt again advances one character so that it begins before the third "b" and returns an empty string.</span></span> <span data-ttu-id="9bd5d-177">6番目の一致は、最後の "b" の後に始まり、空の文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-177">The sixth match begins after the last "b" and returns an empty string again.</span></span>  
  
<span data-ttu-id="9bd5d-178">[![system.text.regularexpressions.regexoptions. match.nextmatch # 1] と](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/cs/nextmatch1.cs#1)入力します。[! code-vb[system.text.regularexpressions.regexoptions. match.nextmatch # 1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/vb/nextmatch1.vb#1)]。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-178">[!code-csharp[System.Text.RegularExpressions.Match.NextMatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/cs/nextmatch1.cs#1)] [!code-vb[System.Text.RegularExpressions.Match.NextMatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/vb/nextmatch1.vb#1)]</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public virtual string Result (string replacement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Result(string replacement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.Result(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Result (replacement As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ Result(System::String ^ replacement);" />
      <MemberSignature Language="F#" Value="abstract member Result : string -&gt; string&#xA;override this.Result : string -&gt; string" Usage="match.Result replacement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replacement" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="replacement"><span data-ttu-id="9bd5d-179">使用する置換パターン。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-179">The replacement pattern to use.</span></span></param>
        <summary><span data-ttu-id="9bd5d-180">指定された置換パターンを展開して返します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-180">Returns the expansion of the specified replacement pattern.</span></span></summary>
        <returns><span data-ttu-id="9bd5d-181"><paramref name="replacement" /> パラメーターの展開形式。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-181">The expanded version of the <paramref name="replacement" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bd5d-182"><xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=nameWithType> メソッドは、入力文字列内のすべての一致を指定された置換パターンに置き換えますが、<xref:System.Text.RegularExpressions.Match.Result%2A> メソッドは、単一の一致を指定された置換パターンに置き換えます。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-182">Whereas the <xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=nameWithType> method replaces all matches in an input string with a specified replacement pattern, the <xref:System.Text.RegularExpressions.Match.Result%2A> method replaces a single match with a specified replacement pattern.</span></span> <span data-ttu-id="9bd5d-183">個々の一致で動作するため、<xref:System.Text.RegularExpressions.Match.Result%2A> メソッドを呼び出す前に、一致した文字列に対して処理を実行することもできます。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-183">Because it operates on an individual match, it is also possible to perform processing on the matched string before you call the <xref:System.Text.RegularExpressions.Match.Result%2A> method.</span></span>  
  
 <span data-ttu-id="9bd5d-184">`replacement` パラメーターは標準的な正規表現の置換パターンです。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-184">The `replacement` parameter is a standard regular expression replacement pattern.</span></span> <span data-ttu-id="9bd5d-185">これは、リテラル文字と正規表現の置換で構成されます。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-185">It can consist of literal characters and regular expression substitutions.</span></span> <span data-ttu-id="9bd5d-186">詳細については、「 [置換](~/docs/standard/base-types/substitutions-in-regular-expressions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-186">For more information, see [Substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9bd5d-187">次の例では、かっこで囲まれた式を開始および終了するハイフンをかっこで置き換えています。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-187">The following example replaces the hyphens that begin and end a parenthetical expression with parentheses.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Result#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/cs/result1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Result#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/vb/result1.vb#1)]  
  
 <span data-ttu-id="9bd5d-188">この正規表現パターン `--(.+?)--` の解釈を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-188">The regular expression pattern `--(.+?)--` is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="9bd5d-189">[パターン]</span><span class="sxs-lookup"><span data-stu-id="9bd5d-189">Pattern</span></span>|<span data-ttu-id="9bd5d-190">説明</span><span class="sxs-lookup"><span data-stu-id="9bd5d-190">Description</span></span>|  
|-------------|-----------------|  
|`--`|<span data-ttu-id="9bd5d-191">2つのハイフンに一致します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-191">Match two hyphens.</span></span>|  
|`(.+?)`|<span data-ttu-id="9bd5d-192">任意の文字と1回以上 (ただし、できるだけ少ない回数) 一致します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-192">Match any character one or more times, but as few times as possible.</span></span> <span data-ttu-id="9bd5d-193">これが最初のキャプチャ グループです。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-193">This is the first capturing group.</span></span>|  
|`--`|<span data-ttu-id="9bd5d-194">2つのハイフンに一致します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-194">Match two hyphens.</span></span>|  
  
 <span data-ttu-id="9bd5d-195">正規表現パターン `--(.+?)--` は、`+?`のレイジー量指定子を使用することに注意してください。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-195">Note that the regular expression pattern `--(.+?)--` uses the lazy quantifier `+?`.</span></span> <span data-ttu-id="9bd5d-196">最長一致の量指定子 `+` を代わりに使用した場合、正規表現エンジンは入力文字列内で1つの一致のみを検索します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-196">If the greedy quantifier `+` were used instead, the regular expression engine would find only a single match in the input string.</span></span>  
  
 <span data-ttu-id="9bd5d-197">置換文字列 `($1)`、一致をかっこで囲まれた最初のキャプチャグループに置換します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-197">The replacement string `($1)` replaces the match with the first captured group, which is enclosed in parentheses.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9bd5d-198"><paramref name="replacement" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-198"><paramref name="replacement" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9bd5d-199">このパターンは展開できません。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-199">Expansion is not allowed for this pattern.</span></span></exception>
        <altmember cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)" />
        <related type="Article" href="~/docs/standard/base-types/substitutions-in-regular-expressions.md"><span data-ttu-id="9bd5d-200">正規表現での置換</span><span class="sxs-lookup"><span data-stu-id="9bd5d-200">Substitutions in Regular Expressions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Synchronized (System.Text.RegularExpressions.Match inner);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Match Synchronized(class System.Text.RegularExpressions.Match inner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Synchronized (inner As Match) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::Match ^ Synchronized(System::Text::RegularExpressions::Match ^ inner);" />
      <MemberSignature Language="F#" Value="static member Synchronized : System.Text.RegularExpressions.Match -&gt; System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Match.Synchronized inner" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inner" Type="System.Text.RegularExpressions.Match" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="inner"><span data-ttu-id="9bd5d-201">要求する一致と等価の正規表現一致。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-201">A regular expression match equivalent to the one expected.</span></span></param>
        <summary><span data-ttu-id="9bd5d-202">指定されたオブジェクトと等価であり、かつ複数のスレッド間での共有に適した <see cref="T:System.Text.RegularExpressions.Match" /> インスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-202">Returns a <see cref="T:System.Text.RegularExpressions.Match" /> instance equivalent to the one supplied that is suitable to share between multiple threads.</span></span></summary>
        <returns><span data-ttu-id="9bd5d-203">複数のスレッド間での共有に適した正規表現一致。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-203">A regular expression match that is suitable to share between multiple threads.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9bd5d-204"><paramref name="inner" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9bd5d-204"><paramref name="inner" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
