<Type Name="Match" FullName="System.Text.RegularExpressions.Match">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c4072677b91d8235d8a129dcf31e085d90ea588f" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83456016" /></Metadata><TypeSignature Language="C#" Value="public class Match : System.Text.RegularExpressions.Group" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Match extends System.Text.RegularExpressions.Group" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Match" />
  <TypeSignature Language="VB.NET" Value="Public Class Match&#xA;Inherits Group" />
  <TypeSignature Language="C++ CLI" Value="public ref class Match : System::Text::RegularExpressions::Group" />
  <TypeSignature Language="F#" Value="type Match = class&#xA;    inherit Group" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Match extends System.Text.RegularExpressions.Group" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System" FromVersion="4.0.0.0" To="System.Text.RegularExpressions" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Text.RegularExpressions" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Text.RegularExpressions.Group</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>1 回の正規表現検索に一致した結果を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Match> オブジェクトは変更できず、パブリックコンストラクターもありません。 <xref:System.Text.RegularExpressions.Match> クラスのインスタンスは、<xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> メソッドによって返され、文字列内の最初のパターン一致を表します。 後続の一致は、<xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> メソッドによって返される <xref:System.Text.RegularExpressions.Match> のオブジェクトによって表されます。 さらに、0個以上の <xref:System.Text.RegularExpressions.Match> オブジェクトで構成される <xref:System.Text.RegularExpressions.MatchCollection> オブジェクトは、<xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType> メソッドによって返されます。  
  
 <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType> メソッドが入力文字列内の正規表現パターンと一致しない場合、空の <xref:System.Text.RegularExpressions.MatchCollection> オブジェクトを返します。 その後、コレクションを反復処理するC#ために、または Visual Basic 内の `For Each` コンストラクトで `foreach` コンストラクトを使用できます。  
  
 <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> メソッドが正規表現パターンに一致しない場合、<xref:System.Text.RegularExpressions.Match.Empty%2A?displayProperty=nameWithType>と等しい <xref:System.Text.RegularExpressions.Match> オブジェクトが返されます。 <xref:System.Text.RegularExpressions.Group.Success%2A> プロパティを使用して、一致が成功したかどうかを判断できます。 次に例を示します。  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match1.vb#1)]  
  
 パターン一致が成功した場合、<xref:System.Text.RegularExpressions.Capture.Value%2A> プロパティには一致した部分文字列が含まれ、<xref:System.Text.RegularExpressions.Capture.Index%2A> プロパティは入力文字列内の一致した部分文字列の0から始まる開始位置を示し、<xref:System.Text.RegularExpressions.Capture.Length%2A> プロパティは入力文字列内の一致した部分文字列の長さを示します。  
  
 単一の一致には複数のキャプチャグループが含まれる可能性があるため、<xref:System.Text.RegularExpressions.Match> には <xref:System.Text.RegularExpressions.GroupCollection>を返す <xref:System.Text.RegularExpressions.Match.Groups%2A> プロパティがあります。 <xref:System.Text.RegularExpressions.Match> インスタンス自体は、コレクション内の最初のオブジェクトに相当します。 `Match.Groups[0]` (Visual Basic の`Match.Groups(0)`) で、一致した文字列全体を表します。 次の方法で、キャプチャされたグループに一致したグループにアクセスできます。  
  
-   `foreach` (C#) または `For Each` (Visual Basic) コンストラクトを使用して、<xref:System.Text.RegularExpressions.GroupCollection> オブジェクトのメンバーを反復処理できます。  
  
-   <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29?displayProperty=nameWithType> プロパティを使用して、キャプチャグループの番号によってグループを取得できます。 インスタンス <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> メソッドを呼び出すことによって、正規表現に存在する番号付きグループを特定できます。  
  
-   <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29?displayProperty=nameWithType> プロパティを使用して、キャプチャグループの名前でグループを取得できます。 インスタンス <xref:System.Text.RegularExpressions.Regex.GetGroupNames?displayProperty=nameWithType> メソッドを呼び出すことによって、正規表現に存在する名前付きグループを特定できます。  
  
   
  
## Examples  
 次の例では、正規表現 `Console\.Write(Line)?`を使用します。 この正規表現パターンは、次のように解釈されます。  
  
|||  
|-|-|  
|コンソール\\。企画|文字列 "Console.Write" と一致します。 "." 文字はエスケープされ、任意の文字と一致するワイルドカードとしてではなく、リテラル期間として解釈されることに注意してください。|  
|(行)?|文字列 "Line" の 0 回または 1 回の繰り返しに一致します。|  
  
 **例 1**  
  
 次の例では、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType> メソッドを呼び出して、入力文字列内のすべてのパターン一致を取得します。 次に、返された <xref:System.Text.RegularExpressions.MatchCollection> オブジェクト内の <xref:System.Text.RegularExpressions.Match> オブジェクトを反復処理して、各一致に関する情報を表示します。  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match2.vb#2)]  
  
 **例 2**  
  
 次の例では、<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> と <xref:System.Text.RegularExpressions.Match.NextMatch%2A> メソッドを呼び出して、一度に1つの一致を取得します。  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match3.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.RegularExpressions.MatchCollection" />
    <altmember cref="T:System.Text.RegularExpressions.Regex" />
  </Docs>
  <Members>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.RegularExpressions.Match Empty" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Match.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::RegularExpressions::Match ^ Empty { System::Text::RegularExpressions::Match ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Empty : System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Match.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>空のグループを取得します。 一致する対象が見つからなかった検索は、この空一致を返します。</summary>
        <value>空一致。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを使用して、一致が成功したかどうかを判断することはできません。 代わりに、`Match.Success` プロパティ (<xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType>から継承されます) を使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Groups">
      <MemberSignature Language="C#" Value="public virtual System.Text.RegularExpressions.GroupCollection Groups { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.GroupCollection Groups" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Match.Groups" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Groups As GroupCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Text::RegularExpressions::GroupCollection ^ Groups { System::Text::RegularExpressions::GroupCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Groups : System.Text.RegularExpressions.GroupCollection" Usage="System.Text.RegularExpressions.Match.Groups" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.GroupCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>正規表現に一致したグループのコレクションを取得します。</summary>
        <value>パターンに一致した文字グループ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 正規表現パターンには、正規表現パターンの一部をかっこで囲むことによって定義される部分式を含めることができます。 このような部分式はすべてグループを形成します。 <xref:System.Text.RegularExpressions.Match.Groups%2A> プロパティは、これらの部分式の一致に関する情報へのアクセスを提供します。 たとえば、北アメリカの電話番号に一致する正規表現パターン `(\d{3})-(\d{3}-\d{4})`には、2つの部分式があります。 最初の部分は、電話番号の最初の3桁を構成する市外局番で構成されています。 このグループは、正規表現の最初の部分 (`(\d{3})`) によってキャプチャされます。 2つ目は、電話番号の最後の7桁を構成する個々の電話番号で構成されます。 このグループは、正規表現の2番目の部分 (`(\d{3}-\d{4})`) によってキャプチャされます。 この2つのグループは、次の例に示すように、<xref:System.Text.RegularExpressions.Match.Groups%2A> プロパティによって返される <xref:System.Text.RegularExpressions.GroupCollection> オブジェクトから取得できます。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/cs/groups1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/vb/groups1.vb" id="Snippet1"::: 
  
 <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> プロパティによって返される <xref:System.Text.RegularExpressions.GroupCollection> オブジェクトは、0から始まるコレクションオブジェクトであり、常に少なくとも1つのメンバーを持ちます。 正規表現エンジンが特定の入力文字列に一致するものが見つからない場合は、コレクション内の単一の <xref:System.Text.RegularExpressions.Group> オブジェクトの <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> プロパティ (インデックス0のオブジェクト) が `false` に設定され、<xref:System.Text.RegularExpressions.Group> オブジェクトの <xref:System.Text.RegularExpressions.Capture.Value%2A> プロパティが <xref:System.String.Empty?displayProperty=nameWithType>に設定されます。 正規表現エンジンが一致を見つけることができる場合、<xref:System.Text.RegularExpressions.Match.Groups%2A> プロパティによって返される <xref:System.Text.RegularExpressions.GroupCollection> オブジェクト (インデックス0の要素) の最初の要素には、正規表現パターン全体と一致する文字列が含まれます。 正規表現にキャプチャグループが含まれている場合、後続の各要素 (インデックス1の上から上) は、キャプチャされたグループを表します。 詳細については、「[グループ化構成体](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)」の記事の「グループ化構成体と正規表現オブジェクト」を参照してください。  
  
   
  
## Examples  
 次の例では、正規表現パターンとサンプル文字列との照合を試みます。 この例では、<xref:System.Text.RegularExpressions.Match.Groups%2A> プロパティを使用して、コンソールに表示する一致によって取得される情報を格納します。  
 
 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp" id="Snippet8":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs" interactive="try-dotnet" id="Snippet8":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb" id="Snippet8":::
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextMatch">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Match NextMatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.Match NextMatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.NextMatch" />
      <MemberSignature Language="VB.NET" Value="Public Function NextMatch () As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::Match ^ NextMatch();" />
      <MemberSignature Language="F#" Value="member this.NextMatch : unit -&gt; System.Text.RegularExpressions.Match" Usage="match.NextMatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>一致する対象が最後に見つかった位置の終了位置 (最後に一致した文字の後の文字) から開始して、次に一致する対象を検索した結果の新しい <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトを返します。</summary>
        <returns>次の正規表現一致。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> を再度呼び出し、(`Index+Length`) を新しい開始位置として渡すことと似ています。  
  
> [!NOTE]
>  このメソッドは、現在のインスタンスを変更しません。 代わりに、次の一致に関する情報を含む新しい <xref:System.Text.RegularExpressions.Match> オブジェクトを返します。  
  
 次の一致を取得しようとすると、一致操作のタイムアウト値が有効であり、次の一致を検索する試みがタイムアウト間隔を超えた場合に、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException> がスローされる可能性があります。  
  
   
  
## Examples  
 次の例では、<xref:System.Text.RegularExpressions.Match.NextMatch%2A> メソッドを使用して、最初の一致を超える正規表現の一致を取得します。  

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp" id="Snippet8":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs" interactive="try-dotnet" id="Snippet8":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb" id="Snippet8":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。</exception>
        <block subset="none" type="usage"><para><see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> メソッドを呼び出すことによって一致試行が繰り返されると、正規表現エンジンによって空の文字列が特別に処理されます。 通常、<see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> は、前回の一致が終了した箇所で、次の一致の検索を開始します。 ただし、空の一致の後、<see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> メソッドは、次の一致を試行する前に1文字進めます。 この動作により、正規表現エンジンが文字列を処理することが保証されます。 それ以外の場合は、空の一致によって前方移動が行われないため、次の一致は前の一致とまったく同じ場所で開始され、同じ空の文字列と繰り返し一致します。  
  
次に例を示します。 正規表現パターン<c>a *</c>は、文字列 "abaabb" で、文字 "a" の0回以上の出現を検索します。 この例の出力が示すように、検索では6つの一致が検出されます。 最初の一致試行で最初の "a" が検索されます。 2番目の一致は、最初の一致が終了した場所から最初の2つ前まで、"a" の0回の出現を検出し、空の文字列を返します。 3番目の一致は、2番目の一致が終了した場所を正確に開始しません。これは、2番目の一致が空の文字列を返したためです。 代わりに、最初の "b" の後に1文字後に開始します。 3番目の一致では、"a" の2回の出現が検出され、"aa" が返されます。 4回目の一致試行は、3番目の一致が終了し、2番目の "b" の前に、空の文字列を返します。 5回目の一致では、1つの文字を再び進め、3番目の "b" の前に開始し、空の文字列を返します。 6番目の一致は、最後の "b" の後に始まり、空の文字列を返します。  
 
::: code language = "csharp" source = "~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/cs/nextmatch1.cs" interactive = "dotnet" id = "Snippet1":::::: code language = "vb" source = "~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/vb/nextmatch1.vb" id = "Snippet1":::</para></block>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public virtual string Result (string replacement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Result(string replacement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.Result(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Result (replacement As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ Result(System::String ^ replacement);" />
      <MemberSignature Language="F#" Value="abstract member Result : string -&gt; string&#xA;override this.Result : string -&gt; string" Usage="match.Result replacement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replacement" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="replacement">使用する置換パターン。</param>
        <summary>指定された置換パターンを展開して返します。</summary>
        <returns><paramref name="replacement" /> パラメーターの展開形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=nameWithType> メソッドは、入力文字列内のすべての一致を指定された置換パターンに置き換えますが、<xref:System.Text.RegularExpressions.Match.Result%2A> メソッドは、単一の一致を指定された置換パターンに置き換えます。 個々の一致で動作するため、<xref:System.Text.RegularExpressions.Match.Result%2A> メソッドを呼び出す前に、一致した文字列に対して処理を実行することもできます。  
  
 `replacement` パラメーターは標準的な正規表現の置換パターンです。 これは、リテラル文字と正規表現の置換で構成されます。 詳細については、「 [置換](~/docs/standard/base-types/substitutions-in-regular-expressions.md)」を参照してください。  
  
   
  
## Examples  
 次の例では、かっこで囲まれた式を開始および終了するハイフンをかっこで置き換えています。  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/cs/result1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/vb/result1.vb" id="Snippet1":::
  
 この正規表現パターン `--(.+?)--` の解釈を次の表に示します。  
  
|Pattern|説明|  
|-------------|-----------------|  
|`--`|2つのハイフンに一致します。|  
|`(.+?)`|任意の文字と1回以上 (ただし、できるだけ少ない回数) 一致します。 これが最初のキャプチャ グループです。|  
|`--`|2つのハイフンに一致します。|  
  
 正規表現パターン `--(.+?)--` は、`+?`のレイジー量指定子を使用することに注意してください。 最長一致の量指定子 `+` を代わりに使用した場合、正規表現エンジンは入力文字列内で1つの一致のみを検索します。  
  
 置換文字列 `($1)`、一致をかっこで囲まれた最初のキャプチャグループに置換します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="replacement" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.NotSupportedException">このパターンは展開できません。</exception>
        <altmember cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)" />
        <related type="Article" href="~/docs/standard/base-types/substitutions-in-regular-expressions.md">正規表現での置換</related>
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Synchronized (System.Text.RegularExpressions.Match inner);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Match Synchronized(class System.Text.RegularExpressions.Match inner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Synchronized (inner As Match) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::Match ^ Synchronized(System::Text::RegularExpressions::Match ^ inner);" />
      <MemberSignature Language="F#" Value="static member Synchronized : System.Text.RegularExpressions.Match -&gt; System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Match.Synchronized inner" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inner" Type="System.Text.RegularExpressions.Match" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="inner">要求する一致と等価の正規表現一致。</param>
        <summary>指定されたオブジェクトと等価であり、かつ複数のスレッド間での共有に適した <see cref="T:System.Text.RegularExpressions.Match" /> インスタンスを返します。</summary>
        <returns>複数のスレッド間での共有に適した正規表現一致。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="inner" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
