<Type Name="Regex" FullName="System.Text.RegularExpressions.Regex">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bd2da2fec4bf08aea40cc461ac92981f90eec61a" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83448041" /></Metadata><TypeSignature Language="C#" Value="public class Regex" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Regex extends System.Object" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Regex" />
  <TypeSignature Language="VB.NET" Value="Public Class Regex" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="C++ CLI" Value="public ref class Regex" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="F#" Value="type Regex = class" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="C#" Value="public class Regex : System.Runtime.Serialization.ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Regex extends System.Object implements class System.Runtime.Serialization.ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="VB.NET" Value="Public Class Regex&#xA;Implements ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class Regex : System::Runtime::Serialization::ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type Regex = class&#xA;    interface ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Regex extends System.Object implements class System.Runtime.Serialization.ISerializable" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System" FromVersion="4.0.0.0" To="System.Text.RegularExpressions" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Text.RegularExpressions" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>変更不可の正規表現を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex> クラスは、.NET Framework の正規表現エンジンを表します。 これを使用すると、大量のテキストをすばやく解析して特定の文字パターンを見つけることができます。テキスト部分文字列を抽出、編集、置換、または削除するには抽出された文字列をコレクションに追加して、レポートを生成します。  
  
> [!NOTE]
>  主に、特定のパターンに準拠しているかどうかを判断して文字列を検証することが重要な場合は、<xref:System.Configuration.RegexStringValidator?displayProperty=nameWithType> クラスを使用できます。  
  
 正規表現を使用するには、「[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」に記載されている構文を使用して、テキストストリームで識別するパターンを定義します。 次に、必要に応じて <xref:System.Text.RegularExpressions.Regex> オブジェクトをインスタンス化できます。 最後に、正規表現パターンに一致するテキストを置換したり、パターン一致を識別したりするなど、何らかの操作を実行するメソッドを呼び出します。  
  
> [!NOTE]
>  一般的な正規表現パターンの一部については、「[正規表現の例](~/docs/standard/base-types/regular-expression-examples.md)」を参照してください。 正規表現パターンのオンラインライブラリも多数あります。たとえば、 [Regular-Expressions.info](https://www.regular-expressions.info/examples.html)のようなものがあります。  
  
<a name="remarks"></a><xref:System.Text.RegularExpressions.Regex> クラスの使用方法の詳細については、このトピックの次のセクションを参照してください。  
  
-   [Regex および文字列メソッド](#regex_vs_string)  
  
-   [静的メソッドとインスタンスメソッド](#static_vs_instance)  
  
-   [正規表現操作の実行](#regex_ops)  
  
-   [タイムアウト値の定義](#define_timeout)  
  
 正規表現の言語について詳しくは、「[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照するか、次の資料のいずれかをダウンロードして印刷してください。  
  
 [Word (.docx) 形式のクイック リファレンス](https://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.docx)  
 [PDF (.pdf) 形式のクイック リファレンス](https://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.pdf)  
  
<a name="regex_vs_string"></a>   
## <a name="regex-vs-string-methods"></a>Regex および文字列メソッド  
 <xref:System.String?displayProperty=nameWithType> クラスには、テキストを使用してパターンマッチングを実行するために使用できる、いくつかの検索および比較メソッドが含まれています。 たとえば、<xref:System.String.Contains%2A?displayProperty=nameWithType>、<xref:System.String.EndsWith%2A?displayProperty=nameWithType>、および <xref:System.String.StartsWith%2A?displayProperty=nameWithType> メソッドは、文字列インスタンスに指定した部分文字列が含まれているかどうかを判断します。また、<xref:System.String.IndexOf%2A?displayProperty=nameWithType>、<xref:System.String.IndexOfAny%2A?displayProperty=nameWithType>、<xref:System.String.LastIndexOf%2A?displayProperty=nameWithType>、および <xref:System.String.LastIndexOfAny%2A?displayProperty=nameWithType> の各メソッドは、文字列内の指定した部分文字列の開始位置を返します。 特定の文字列を検索する場合は、<xref:System.String?displayProperty=nameWithType> クラスのメソッドを使用します。 文字列内の特定のパターンを検索する場合は、<xref:System.Text.RegularExpressions.Regex> クラスを使用します。 詳細と例については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)」を参照してください。  
  
 [「解説」に戻る](#remarks)  
  
<a name="static_vs_instance"></a>   
## <a name="static-vs-instance-methods"></a>静的メソッドとインスタンスメソッド  
 正規表現パターンを定義した後は、次の2つの方法のいずれかで正規表現エンジンに渡すことができます。  
  
-   正規表現を表す <xref:System.Text.RegularExpressions.Regex> オブジェクトをインスタンス化する。 これを行うには、正規表現パターンを <xref:System.Text.RegularExpressions.Regex.%23ctor%2A> コンストラクターに渡します。 <xref:System.Text.RegularExpressions.Regex> オブジェクトは変更できません。正規表現を使用して <xref:System.Text.RegularExpressions.Regex> オブジェクトをインスタンス化する場合、そのオブジェクトの正規表現は変更できません。  
  
-   正規表現とテキストの両方を指定して `static` (Visual Basic で`Shared`) <xref:System.Text.RegularExpressions.Regex> メソッドに検索する。 これにより、<xref:System.Text.RegularExpressions.Regex> オブジェクトを明示的に作成せずに、正規表現を使用できます。  
  
 すべての <xref:System.Text.RegularExpressions.Regex> パターン識別メソッドには、静的オーバーロードとインスタンスオーバーロードの両方が含まれます。  
  
 正規表現エンジンは、パターンを使用する前に、特定のパターンをコンパイルする必要があります。 <xref:System.Text.RegularExpressions.Regex> オブジェクトは不変であるため、これは、<xref:System.Text.RegularExpressions.Regex> クラスコンストラクターまたは静的メソッドが呼び出されたときに発生する1回限りのプロシージャです。 1つの正規表現を繰り返しコンパイルする必要性をなくすために、正規表現エンジンは、静的メソッド呼び出しで使用されるコンパイル済みの正規表現をキャッシュします。 結果として、正規表現パターン一致メソッドは、静的メソッドとインスタンスメソッドに対して同等のパフォーマンスを提供します。  
  
> [!IMPORTANT]
>  .NET Framework バージョン1.0 および1.1 では、インスタンスまたは静的メソッドの呼び出しで使用されたかどうかにかかわらず、コンパイルされたすべての正規表現がキャッシュされていました。 .NET Framework 2.0 以降では、静的メソッドの呼び出しで使用される正規表現だけがキャッシュされます。  
  
 ただし、次の2つの場合は、キャッシュがパフォーマンスに悪影響を及ぼす可能性があります。  
  
-   多数の正規表現で静的メソッド呼び出しを使用する場合。 既定では、正規表現エンジンは、最近使用された15個の静的正規表現をキャッシュします。 アプリケーションで15個を超える静的正規表現を使用する場合は、一部の正規表現を再コンパイルする必要があります。 この再コンパイルを回避するには、<xref:System.Text.RegularExpressions.Regex.CacheSize%2A?displayProperty=nameWithType> プロパティを増やします。  
  
-   以前にコンパイルされた正規表現を使用して新しい <xref:System.Text.RegularExpressions.Regex> オブジェクトをインスタンス化する場合。 たとえば、次のコードでは、テキストストリーム内の重複する単語を検索する正規表現を定義しています。 この例では1つの正規表現を使用しますが、新しい <xref:System.Text.RegularExpressions.Regex> オブジェクトをインスタンス化して、テキストの各行を処理します。 この結果、ループの反復ごとに正規表現が再コンパイルされます。  
  
     [!code-csharp[System.Text.RegularExpressions.Class.Caching#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/cs/caching1.cs#1)]
     [!code-vb[System.Text.RegularExpressions.Class.Caching#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/vb/caching1.vb#1)]  
  
     再コンパイルが行われないようにするには、次に書き直された例に示すように、必要なすべてのコードからアクセスできる単一の <xref:System.Text.RegularExpressions.Regex> オブジェクトをインスタンス化する必要があります。  
  
     [!code-csharp[System.Text.RegularExpressions.Class.Caching#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/cs/caching1.cs#2)]
     [!code-vb[System.Text.RegularExpressions.Class.Caching#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/vb/caching1.vb#2)]  
  
 [「解説」に戻る](#remarks)  
  
<a name="regex_ops"></a>   
## <a name="performing-regular-expression-operations"></a>正規表現操作の実行  
 <xref:System.Text.RegularExpressions.Regex> オブジェクトをインスタンス化し、そのメソッドを呼び出すか、静的メソッドを呼び出すかにかかわらず、<xref:System.Text.RegularExpressions.Regex> クラスは次のパターン一致機能を提供します。  
  
-   一致の検証。 一致が存在するかどうかを判断するには、<xref:System.Text.RegularExpressions.Regex.IsMatch%2A> メソッドを呼び出します。  
  
-   単一の一致を取得します。 文字列または文字列の一部で最初に一致した文字列を表す <xref:System.Text.RegularExpressions.Match> オブジェクトを取得するには、<xref:System.Text.RegularExpressions.Regex.Match%2A> メソッドを呼び出します。 後続の一致は、<xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> メソッドを呼び出すことによって取得できます。  
  
-   すべての一致を取得します。 <xref:System.Text.RegularExpressions.Regex.Matches%2A> メソッドを呼び出して、文字列または文字列の一部で見つかったすべての一致を表す <xref:System.Text.RegularExpressions.MatchCollection?displayProperty=nameWithType> オブジェクトを取得します。  
  
-   一致したテキストの置換。 <xref:System.Text.RegularExpressions.Regex.Replace%2A> メソッドを呼び出して、一致するテキストを置換します。 置換テキストは、正規表現で定義することもできます。 また、<xref:System.Text.RegularExpressions.Regex.Replace%2A> メソッドの一部には、置換テキストをプログラムで定義できるようにするための <xref:System.Text.RegularExpressions.MatchEvaluator> パラメーターが含まれています。  
  
-   入力文字列の一部から形成される文字列配列の作成。 <xref:System.Text.RegularExpressions.Regex.Split%2A> メソッドを呼び出して、正規表現で定義されている位置で入力文字列を分割します。  
  
 <xref:System.Text.RegularExpressions.Regex> クラスには、パターン一致メソッドに加えて、いくつかの特殊な目的のメソッドが含まれています。  
  
-   <xref:System.Text.RegularExpressions.Regex.Escape%2A> メソッドは、正規表現または入力文字列で正規表現演算子として解釈される可能性のあるすべての文字をエスケープします。  
  
-   <xref:System.Text.RegularExpressions.Regex.Unescape%2A> メソッドは、これらのエスケープ文字を削除します。  
  
-   <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> メソッドは、定義済みの正規表現を含むアセンブリを作成します。 .NET Framework には、これらの特殊な用途のアセンブリの例が <xref:System.Web.RegularExpressions?displayProperty=nameWithType> 名前空間に含まれています。  
  
 [「解説」に戻る](#remarks)  
  
<a name="define_timeout"></a>   
## <a name="defining-a-time-out-value"></a>タイムアウト値の定義  
 .NET Framework は、完全な機能を備えた正規表現言語をサポートしています。この言語では、パターンマッチングに大きな力と柔軟性が提供されます。 しかし、パワーと柔軟性にはコストがかかります。パフォーマンスが低下する可能性があります。 適切に動作しない正規表現は、驚くほど簡単に作成できます。 場合によっては、過度なバックトラッキングに依存する正規表現操作が、正規表現パターンにほぼ一致するテキストを処理するときに応答を停止するように見えることがあります。 .NET Framework 正規表現エンジンの詳細については、「[正規表現の動作の詳細](~/docs/standard/base-types/details-of-regular-expression-behavior.md)」を参照してください。 過度なバックトラッキングの詳細については、「[バックトラッキング](~/docs/standard/base-types/backtracking-in-regular-expressions.md)」を参照してください。  
  
 [!INCLUDE[net_v45](~/includes/net-v45-md.md)]以降では、正規表現の一致のタイムアウト間隔を定義できます。 正規表現エンジンがこの期間内に一致を識別できない場合、一致操作は <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外をスローします。 ほとんどの場合、正規表現パターンにほぼ一致するテキストを照合しようとすることで、正規表現エンジンが処理能力を無駄にするのを防ぐことができます。 また、タイムアウト間隔の設定が低すぎるか、または現在のコンピューターの負荷によってパフォーマンスが全体的に低下していることを示している可能性もあります。  
  
 例外の処理方法は、例外の原因によって異なります。 タイムアウト間隔の設定が低すぎるか、コンピューターの負荷が過剰であるために例外が発生した場合は、タイムアウト間隔を長くして、照合操作を再試行できます。 正規表現が過剰なバックトラッキングに依存しているために例外が発生した場合は、一致するものが存在しないと見なすことができます。また、必要に応じて、正規表現パターンの変更に役立つ情報をログに記録することもできます。  
  
 タイムアウト間隔を設定するには、正規表現オブジェクトをインスタンス化するときに <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> コンストラクターを呼び出します。 静的メソッドの場合は、`matchTimeout` パラメーターを持つ一致するメソッドのオーバーロードを呼び出すことにより、タイムアウト間隔を設定できます。 タイムアウト値を明示的に設定しない場合、既定のタイムアウト値は次のように決定されます。  
  
-   アプリケーション全体のタイムアウト値を使用する (存在する場合)。 これには、<xref:System.Text.RegularExpressions.Regex> オブジェクトがインスタンス化されるアプリケーションドメインに適用される任意のタイムアウト値を指定することも、静的メソッド呼び出しを行うこともできます。 <xref:System.AppDomain.SetData%2A?displayProperty=nameWithType> メソッドを呼び出して <xref:System.TimeSpan> 値の文字列形式を "REGEX_DEFAULT_MATCH_TIMEOUT" プロパティに割り当てることにより、アプリケーション全体のタイムアウト値を設定できます。  
  
-   アプリケーション全体のタイムアウト値が設定されていない場合は、<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout>値を使用します。  
  
> [!IMPORTANT]
>  すべての正規表現のパターン一致操作で、タイムアウト値を設定することをお勧めします。 詳細については、「[正規表現のベストプラクティス](~/docs/standard/base-types/best-practices.md)」を参照してください。  
  
 [「解説」に戻る](#remarks)  
  
   
  
## Examples  
 次の例では、正規表現を使用して、文字列内の単語が繰り返し出現するかどうかを確認します。 次の表に示すように、正規表現の `\b(?<word>\w+)\s+(\k<word>)\b` を解釈できます。  
  
|Pattern|説明|  
|-------------|-----------------|  
|`\b`|ワード境界から照合を開始します。|  
|`(?<word>\w+)`|ワード境界までの1つ以上の単語文字と一致します。 このキャプチャグループに `word`という名前を指定します。|  
|`\s+`|1個以上の空白文字と一致します。|  
|`(\k<word>)`|`word`という名前のキャプチャされたグループと一致します。|  
|`\b`|ワード境界に一致します。|  

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/Regex_Words/CPP/words.cpp" id="Snippet0":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/Regex_Words/CS/words.cs" interactive="try-dotnet" id="Snippet0":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/Regex_Words/VB/words.vb" id="Snippet0"::: 
  
 次の例は、正規表現を使用して、文字列が通貨値を表しているか、通貨値を表す正しい形式であるかどうかを確認する方法を示しています。 この場合、正規表現は、ユーザーの現在のカルチャの <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A?displayProperty=nameWithType>、<xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A>、<xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A?displayProperty=nameWithType>、<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType>、および <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> の各プロパティから動的に構築されます。 システムの現在のカルチャが en-us の場合、結果として得られる正規表現は `^\s*[\+-]?\s?\$?\s?(\d*\.?\d{2}?){1}$`になります。 この正規表現は、次の表に示すように解釈できます。  
  
|Pattern|説明|  
|-------------|-----------------|  
|`^`|文字列の先頭から開始します。|  
|`\s*`|0 個以上の空白文字と一致します。|  
|`[\+-]?`|正符号または負符号のいずれかの0回または1回の繰り返しに一致します。|  
|`\s?`|0 個または 1 個の空白文字と一致します。|  
|`\$?`|ドル記号の0回または1回の繰り返しに一致します。|  
|`\s?`|0 個または 1 個の空白文字と一致します。|  
|`\d*`|0 個以上の 10 進数と一致します。|  
|`\.?`|0個または1個の小数点の記号と一致します。|  
|`\d{2}?`|2桁の10進数と0回または1回一致します。|  
|`(\d*\.?\d{2}?){1}`|小数点の記号で区切られた整数と小数の数字のパターンを、少なくとも1回一致します。|  
|`$`|文字列の末尾と一致します。|  
  
 この場合、正規表現では、有効な通貨文字列に桁区切り記号が含まれておらず、小数点以下の桁数または現在のカルチャの <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A> プロパティで定義された小数部の桁数が含まれていることを前提としています。  
 
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.class/cs/regex_example1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.class/vb/regex_example1.vb" id="Snippet1"::: 
  
 この例の正規表現は動的に構築されるため、現在のカルチャの通貨記号、10進記号、または正と負の記号が正規表現エンジンによって誤って解釈される可能性があるかどうかは、デザイン時にはわかりません。 この例では、解釈が変化しないように、動的に生成された各文字列を <xref:System.Text.RegularExpressions.Regex.Escape%2A> メソッドに渡しています。  
  
 ]]></format>
    </remarks>
    <threadsafe><see cref="T:System.Text.RegularExpressions.Regex" /> クラスは変更できない (読み取り専用)、スレッドセーフです。 <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトは任意のスレッドで作成でき、スレッド間で共有できます。 詳細については、「[スレッドセーフ](~/docs/standard/base-types/thread-safety-in-regular-expressions.md)」を参照してください。</threadsafe>
    <altmember cref="T:System.Configuration.RegexStringValidator" />
    <related type="Article" href="~/docs/standard/base-types/regular-expressions.md">.NET Framework の正規表現</related>
    <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
    <related type="ExternalDocumentation" href="https://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.docx">正規表現 - クイック リファレンス (Word 形式でダウンロード)</related>
    <related type="ExternalDocumentation" href="https://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.pdf">正規表現 - クイック リファレンス (PDF 形式でダウンロード)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Text.RegularExpressions.Regex" /> クラスの新しいインスタンスを初期化します。</summary>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Regex ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Regex();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Text.RegularExpressions.Regex" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは保護されていることに注意してください。このメソッドは、<xref:System.Text.RegularExpressions.Regex> クラスから派生したクラスによってのみ呼び出すことができます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Regex (string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Regex(System::String ^ pattern);" />
      <MemberSignature Language="F#" Value="new System.Text.RegularExpressions.Regex : string -&gt; System.Text.RegularExpressions.Regex" Usage="new System.Text.RegularExpressions.Regex pattern" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pattern">一致させる正規表現パターン。</param>
        <summary>指定した正規表現の <see cref="T:System.Text.RegularExpressions.Regex" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `pattern` パラメーターは、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。 正規表現の詳細については、「[正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語](~/docs/standard/base-types/regular-expression-language-quick-reference.md)の .NET Framework」を参照してください。  
  
 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%29> コンストラクターを呼び出すことは、`options` 引数に <xref:System.Text.RegularExpressions.RegexOptions.None> 値を指定して <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29> コンストラクターを呼び出すことと同じです。  
  
 <xref:System.Text.RegularExpressions.Regex> オブジェクトは不変であるため、作成時に定義した一致パターンに対してのみ使用できます。 ただし、再コンパイルせずに何回でも使用できます。  
  
 このコンストラクターは、`pattern`で定義されている英文字の大文字と小文字を区別して照合を試みる正規表現オブジェクトをインスタンス化します。 大文字と小文字を区別しない一致の場合は、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType> コンストラクターを使用します。  
  
   
  
## Examples  
 次の例は、このコンストラクターを使用して、文字 "a" または "t" で始まる任意の単語と一致する正規表現をインスタンス化する方法を示しています。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Constructors/cs/constructors1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Constructors/vb/constructors1.vb" id="Snippet1":::
  
 既定では比較では大文字と小文字が区別されるため、正規表現パターンは、テキストの先頭の "the" という語とは一致しません。 大文字と小文字を区別しない比較の例については、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29> コンストラクターを参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <block subset="none" type="usage"><para>このコンストラクターは、作成されたアプリケーションドメインの既定のタイムアウト値を使用する <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトを作成します。 タイムアウト値がアプリケーションドメインに対して定義されていない場合、<see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトは <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />値を使用して、操作がタイムアウトしないようにします。<see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトを作成するために推奨されるコンストラクターは <see cref="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />であり、タイムアウト間隔を設定できます。</para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Regex (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Regex(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new System.Text.RegularExpressions.Regex : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; System.Text.RegularExpressions.Regex" Usage="new System.Text.RegularExpressions.Regex (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="info">シリアル化されたパターンと <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 情報を保持するオブジェクト。</param>
        <param name="context">このシリアル化のシリアル化先です。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>シリアル化したデータを使用して、<see cref="T:System.Text.RegularExpressions.Regex" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="info" /> に含まれているパターンが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="info" /> に無効な <see cref="T:System.Text.RegularExpressions.RegexOptions" /> フラグが含まれています。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Regex (string pattern, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Regex(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options);" />
      <MemberSignature Language="F#" Value="new System.Text.RegularExpressions.Regex : string * System.Text.RegularExpressions.RegexOptions -&gt; System.Text.RegularExpressions.Regex" Usage="new System.Text.RegularExpressions.Regex (pattern, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="options">正規表現を変更する列挙値のビットごとの組み合わせ。</param>
        <summary>パターンを変更するオプションを使用して、指定した正規表現の <see cref="T:System.Text.RegularExpressions.Regex" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `pattern` パラメーターは、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。 正規表現の詳細については、「[正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語](~/docs/standard/base-types/regular-expression-language-quick-reference.md)の .NET Framework」を参照してください。  
  
 <xref:System.Text.RegularExpressions.Regex> オブジェクトは不変であるため、作成時に定義した一致パラメーターに対してのみ使用できます。 ただし、再コンパイルせずに何回でも使用できます。  
  
   
  
## Examples  
 次の例は、このコンストラクターを使用して、文字 "a" または "t" で始まる任意の単語と一致する正規表現をインスタンス化する方法を示しています。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Constructors/cs/Constructors2.cs" interactive="try-dotnet" id="Snippet2":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Constructors/vb/Constructors2.vb" id="Snippet2":::
  
 Match コレクションには、`options` パラメーターで大文字と小文字を区別しない比較が定義されているため、テキストを開始する "the" という単語が含まれていることに注意してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" /> に無効なフラグが含まれています。</exception>
        <block subset="none" type="usage"><para>このコンストラクターは、作成されたアプリケーションドメインの既定のタイムアウト値を使用する <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトを作成します。 タイムアウト値がアプリケーションドメインに対して定義されていない場合、<see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトは <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />値を使用して、操作がタイムアウトしないようにします。<see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトを作成するために推奨されるコンストラクターは <see cref="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />であり、タイムアウト間隔を設定できます。</para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Regex (string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions, matchTimeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Regex(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="F#" Value="new System.Text.RegularExpressions.Regex : string * System.Text.RegularExpressions.RegexOptions * TimeSpan -&gt; System.Text.RegularExpressions.Regex" Usage="new System.Text.RegularExpressions.Regex (pattern, options, matchTimeout)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="options">正規表現を変更する列挙値のビットごとの組み合わせ。</param>
        <param name="matchTimeout">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
        <summary>パターンを変更するオプションと、パターン マッチ メソッドがタイムアウトするまでに一致を試みる時間を指定する値を使用して、指定した正規表現の <see cref="T:System.Text.RegularExpressions.Regex" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `pattern` パラメーターは、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。 正規表現の詳細については、「[正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語](~/docs/standard/base-types/regular-expression-language-quick-reference.md)の .NET Framework」を参照してください。  
  
 <xref:System.Text.RegularExpressions.Regex> オブジェクトは不変であるため、作成時に定義した一致パターンに対してのみ使用できます。 ただし、再コンパイルせずに何回でも使用できます。  
  
 `matchTimeout` パラメーターは、パターン一致メソッドがタイムアウトする前に一致を検索する期間を指定します。この期間内に一致するものが見つからない場合、パターン一致メソッドは <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外をスローします。 `matchTimeout` は、<xref:System.Text.RegularExpressions.Regex> オブジェクトが作成されるアプリケーションドメインに対して定義されている既定のタイムアウト値をオーバーライドします。 `matchTimeout` のタイムアウト間隔を観察するインスタンスパターン一致メソッドには、次のものが含まれます。  
  
-   <xref:System.Text.RegularExpressions.Regex.IsMatch%2A>  
  
-   <xref:System.Text.RegularExpressions.Regex.Match%2A>  
  
-   <xref:System.Text.RegularExpressions.Regex.Matches%2A>  
  
-   <xref:System.Text.RegularExpressions.Regex.Replace%2A>  
  
-   <xref:System.Text.RegularExpressions.Regex.Split%2A>  
  
-   <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType>  
  
 タイムアウト間隔を設定すると、過度なバックトラッキングに依存している正規表現が、ほぼ一致する入力を処理するときに応答を停止することを防ぎます。 詳細については、「正規表現と[バックトラッキング](~/docs/standard/base-types/backtracking-in-regular-expressions.md)[のベストプラクティス](~/docs/standard/base-types/best-practices.md)」を参照してください。 妥当なタイムアウト期間を設定するには、次の要因を考慮してください。  
  
-   正規表現パターンの長さと複雑さ。 長くて複雑な正規表現の方が、短くて単純な式よりも多くの時間を必要とします。  
  
-   予想されるコンピューター負荷。 CPU とメモリの使用率が高いシステムでは、処理に時間がかかります。  
  
   
  
## Examples  
 次の例では、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> コンストラクターを呼び出して、1秒のタイムアウト値を使用して <xref:System.Text.RegularExpressions.Regex> オブジェクトをインスタンス化します。 正規表現パターン `(a+)+$`は、行の末尾にある 1 つ以上の "a" 文字の 1 つ以上のシーケンスに一致しますが、過度なバックトラッキングの対象になります。 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> がスローされた場合、この例ではタイムアウト値を3秒の最大値まで増やします。 それ以外の場合は、パターンに一致する試行を破棄します。  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ctor/cs/ctor1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ctor/vb/ctor1.vb" id="Snippet1"::: 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" /> が有効な <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値ではありません。  
  
または 
 <paramref name="matchTimeout" /> が負の値か、0 か、または約 24 日を超えています。</exception>
        <block subset="none" type="usage"><para><paramref name="matchTimeout" /> パラメーターには、2秒などの適切な値を設定することをお勧めします。 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />を指定してタイムアウトを無効にすると、正規表現エンジンのパフォーマンスが若干向上します。 ただし、次の条件下でのみタイムアウトを無効にする必要があります。 
-正規表現によって処理される入力が既知の信頼できるソースから派生した場合、または静的なテキストで構成されている場合。 これにより、ユーザーが動的に入力したテキストは除外されます。  
  
-正規表現パターンが完全にテストされ、一致、一致しない、および近い一致を効率的に処理できるようになった場合。  
  
-正規表現パターンに、ほぼ一致を処理するときに過度なバックトラッキングを発生させることがわかっている言語要素が含まれていない場合。</para></block>
        <related type="Article" href="~/docs/standard/base-types/backtracking-in-regular-expressions.md">正規表現におけるバックトラッキング</related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <Member MemberName="CacheSize">
      <MemberSignature Language="C#" Value="public static int CacheSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CacheSize" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Regex.CacheSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CacheSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int CacheSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CacheSize : int with get, set" Usage="System.Text.RegularExpressions.Regex.CacheSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンパイルされた正規表現の現在の静的キャッシュ内の最大エントリ数を取得または設定します。</summary>
        <value>静的キャッシュの最大エントリ数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex> クラスは、静的メソッド呼び出しで使用されるコンパイル済みの正規表現の内部キャッシュを保持します。 設定操作で指定された値が現在のキャッシュサイズよりも小さい場合、キャッシュエントリはキャッシュサイズが指定した値と等しいまで破棄されます。  
  
 既定では、キャッシュは、コンパイルされた静的な正規表現を15個保持します。 通常、アプリケーションでキャッシュのサイズを変更する必要はありません。 <xref:System.Text.RegularExpressions.Regex.CacheSize%2A> プロパティは、キャッシュを無効にする場合、またはキャッシュのサイズが非常に大きい場合にのみ使用します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作の値が 0 より小さい値です。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)]前の .NET Framework では、静的メソッドとインスタンスメソッドの呼び出しで使用される正規表現はキャッシュされていました。 [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)]以降では、静的メソッドの呼び出しで使用される正規表現だけがキャッシュされます。</para></block>
      </Docs>
    </Member>
    <Member MemberName="capnames">
      <MemberSignature Language="C#" Value="protected internal System.Collections.Hashtable capnames;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly class System.Collections.Hashtable capnames" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.capnames" />
      <MemberSignature Language="VB.NET" Value="Protected Friend capnames As Hashtable " />
      <MemberSignature Language="C++ CLI" Value="protected public: System::Collections::Hashtable ^ capnames;" />
      <MemberSignature Language="F#" Value="val mutable capnames : System.Collections.Hashtable" Usage="System.Text.RegularExpressions.Regex.capnames" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CapNames">
      <MemberSignature Language="C#" Value="protected System.Collections.IDictionary CapNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IDictionary CapNames" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Regex.CapNames" />
      <MemberSignature Language="VB.NET" Value="Protected Property CapNames As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::IDictionary ^ CapNames { System::Collections::IDictionary ^ get(); void set(System::Collections::IDictionary ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CapNames : System.Collections.IDictionary with get, set" Usage="System.Text.RegularExpressions.Regex.CapNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>名前付きキャプチャ対象グループをインデックス値にマップする辞書を取得または設定します。</summary>
        <value>名前付きキャプチャ対象グループをインデックス値にマップする辞書。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは保護されていることに注意してください。<xref:System.Text.RegularExpressions.Regex> クラスから派生したクラスからのみアクセスできます。  
  
 Set 操作は、プロパティに割り当てられた値を <xref:System.Collections.Hashtable> オブジェクトに変換しようとします。この変換が失敗した場合、<xref:System.Collections.Hashtable.%23ctor%28System.Collections.IDictionary%29?displayProperty=nameWithType> コンストラクターを呼び出します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">セット操作で <see cref="P:System.Text.RegularExpressions.Regex.CapNames" /> プロパティに割り当てられた値は、<see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="caps">
      <MemberSignature Language="C#" Value="protected internal System.Collections.Hashtable caps;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly class System.Collections.Hashtable caps" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.caps" />
      <MemberSignature Language="VB.NET" Value="Protected Friend caps As Hashtable " />
      <MemberSignature Language="C++ CLI" Value="protected public: System::Collections::Hashtable ^ caps;" />
      <MemberSignature Language="F#" Value="val mutable caps : System.Collections.Hashtable" Usage="System.Text.RegularExpressions.Regex.caps" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Caps">
      <MemberSignature Language="C#" Value="protected System.Collections.IDictionary Caps { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IDictionary Caps" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Regex.Caps" />
      <MemberSignature Language="VB.NET" Value="Protected Property Caps As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::IDictionary ^ Caps { System::Collections::IDictionary ^ get(); void set(System::Collections::IDictionary ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Caps : System.Collections.IDictionary with get, set" Usage="System.Text.RegularExpressions.Regex.Caps" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>番号付きのキャプチャ対象グループをインデックス値にマップする辞書を取得または設定します。</summary>
        <value>番号付きのキャプチャ対象グループをインデックス値にマップする辞書。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは保護されていることに注意してください。<xref:System.Text.RegularExpressions.Regex> クラスから派生したクラスからのみアクセスできます。  
  
 Set 操作は、プロパティに割り当てられた値を <xref:System.Collections.Hashtable> オブジェクトに変換しようとします。この変換が失敗した場合、<xref:System.Collections.Hashtable.%23ctor%28System.Collections.IDictionary%29?displayProperty=nameWithType> コンストラクターを呼び出します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">セット操作で <see cref="P:System.Text.RegularExpressions.Regex.Caps" /> プロパティに割り当てられた値は、<see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="capsize">
      <MemberSignature Language="C#" Value="protected internal int capsize;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly int32 capsize" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.capsize" />
      <MemberSignature Language="VB.NET" Value="Protected Friend capsize As Integer " />
      <MemberSignature Language="C++ CLI" Value="protected public: int capsize;" />
      <MemberSignature Language="F#" Value="val mutable capsize : int" Usage="System.Text.RegularExpressions.Regex.capsize" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="capslist">
      <MemberSignature Language="C#" Value="protected internal string[] capslist;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly string[] capslist" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.capslist" />
      <MemberSignature Language="VB.NET" Value="Protected Friend capslist As String() " />
      <MemberSignature Language="C++ CLI" Value="protected public: cli::array &lt;System::String ^&gt; ^ capslist;" />
      <MemberSignature Language="F#" Value="val mutable capslist : string[]" Usage="System.Text.RegularExpressions.Regex.capslist" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CompileToAssembly">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>正規表現をコンパイルして、ディスク上の単一のアセンブリに保存します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

.NET Core では、`Regex.CompileToAssembly` メソッドを呼び出すと、<xref:System.PlatformNotSupportedException>がスローされます。アセンブリの書き込みはサポートされていません。
  
       ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompileToAssembly">
      <MemberSignature Language="C#" Value="public static void CompileToAssembly (System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, System.Reflection.AssemblyName assemblyname);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CompileToAssembly(class System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, class System.Reflection.AssemblyName assemblyname) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CompileToAssembly (regexinfos As RegexCompilationInfo(), assemblyname As AssemblyName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CompileToAssembly(cli::array &lt;System::Text::RegularExpressions::RegexCompilationInfo ^&gt; ^ regexinfos, System::Reflection::AssemblyName ^ assemblyname);" />
      <MemberSignature Language="F#" Value="static member CompileToAssembly : System.Text.RegularExpressions.RegexCompilationInfo[] * System.Reflection.AssemblyName -&gt; unit" Usage="System.Text.RegularExpressions.Regex.CompileToAssembly (regexinfos, assemblyname)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="regexinfos" Type="System.Text.RegularExpressions.RegexCompilationInfo[]" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="assemblyname" Type="System.Reflection.AssemblyName" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="regexinfos">コンパイルする正規表現を記述する配列。</param>
        <param name="assemblyname">アセンブリのファイル名。</param>
        <summary>1 つ以上の指定した <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトをコンパイルして、名前付きアセンブリに保存します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%29> メソッドは、`regexinfos` 配列に定義されている各正規表現がクラスによって表される .NET Framework アセンブリを生成します。 通常、<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%29> メソッドは、コンパイルされた正規表現のアセンブリを生成する別のアプリケーションから呼び出されます。 アセンブリに含まれる各正規表現には、次の特性があります。  
  
-   これは <xref:System.Text.RegularExpressions.Regex> クラスから派生します。  
  
-   これには、`fullnamespace` によって定義される完全修飾名と、対応する <xref:System.Text.RegularExpressions.RegexCompilationInfo> オブジェクトの `name` パラメーターが割り当てられます。  
  
-   これには、既定の (またはパラメーターなしの) コンストラクターがあります。  
  
 通常、コンパイルされた正規表現をインスタンス化して使用するコードは、アセンブリを作成するコードとは別のアセンブリまたはアプリケーションにあります。  
  
   
  
## Examples  
 次の例では、RegexLib という名前のアセンブリを作成します。 アセンブリには、2つのコンパイルされた正規表現が含まれています。 1つ目の `Utilities.RegularExpressions.DuplicatedString`は、同じ連続する2つの単語に一致します。 2番目の `Utilities.RegularExpressions.EmailAddress`は、文字列が電子メールアドレスとして正しい形式であるかどうかを確認します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.CompileToAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/cs/Compile1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.CompileToAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/vb/Compile1.vb#1)]  
  
 次の例では、重複する単語の文字列を確認する正規表現をインスタンス化し、使用します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.CompileToAssembly#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/cs/Compile2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.CompileToAssembly#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/vb/Compile2.vb#2)]  
  
 この2番目の例を正常にコンパイルするには、プロジェクトに追加する RegexLib (最初の例で作成したアセンブリ) への参照が必要です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="assemblyname" /> パラメーターの <see cref="P:System.Reflection.AssemblyName.Name" /> プロパティの値が空または null 文字列です。  
  
または 
<paramref name="regexinfos" /> の 1 つ以上のオブジェクトの正規表現パターンに、無効な構文が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="assemblyname" /> または <paramref name="regexinfos" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.PlatformNotSupportedException">.NET Core のみ: コンパイルされた正規表現のアセンブリの作成はサポートされていません。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v45](~/includes/net-v45-md.md)] またはそのポイントリリースがインストールされているシステムで開発する場合は、[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]を対象とし、<see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> メソッドを使用して、コンパイルされた正規表現を含むアセンブリを作成します。 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] があるシステムでそのアセンブリの正規表現の1つを使用しようとすると、例外がスローされます。 この問題を回避するには、次のいずれかの方法を実行します。 
-コンパイルされた正規表現を含むアセンブリを、それ以降のバージョンではなく [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] を持つシステムでビルドします。  
  
-<see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> を呼び出し、コンパイルされた正規表現をアセンブリから取得するのではなく、<see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトをインスタンス化したり、正規表現パターン一致メソッドを呼び出したりするときに、<see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> オプションで static または instance <see cref="T:System.Text.RegularExpressions.Regex" /> メソッドを使用します。</para></block>
        <related type="Article" href="~/docs/standard/base-types/compilation-and-reuse-in-regular-expressions.md">コンパイルと再利用</related>
      </Docs>
    </Member>
    <Member MemberName="CompileToAssembly">
      <MemberSignature Language="C#" Value="public static void CompileToAssembly (System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, System.Reflection.AssemblyName assemblyname, System.Reflection.Emit.CustomAttributeBuilder[] attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CompileToAssembly(class System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, class System.Reflection.AssemblyName assemblyname, class System.Reflection.Emit.CustomAttributeBuilder[] attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CompileToAssembly (regexinfos As RegexCompilationInfo(), assemblyname As AssemblyName, attributes As CustomAttributeBuilder())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CompileToAssembly(cli::array &lt;System::Text::RegularExpressions::RegexCompilationInfo ^&gt; ^ regexinfos, System::Reflection::AssemblyName ^ assemblyname, cli::array &lt;System::Reflection::Emit::CustomAttributeBuilder ^&gt; ^ attributes);" />
      <MemberSignature Language="F#" Value="static member CompileToAssembly : System.Text.RegularExpressions.RegexCompilationInfo[] * System.Reflection.AssemblyName * System.Reflection.Emit.CustomAttributeBuilder[] -&gt; unit" Usage="System.Text.RegularExpressions.Regex.CompileToAssembly (regexinfos, assemblyname, attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="regexinfos" Type="System.Text.RegularExpressions.RegexCompilationInfo[]" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="assemblyname" Type="System.Reflection.AssemblyName" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="attributes" Type="System.Reflection.Emit.CustomAttributeBuilder[]" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="regexinfos">コンパイルする正規表現を記述する配列。</param>
        <param name="assemblyname">アセンブリのファイル名。</param>
        <param name="attributes">アセンブリに適用する属性を定義する配列。</param>
        <summary>指定した 1 つ以上の <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトをコンパイルして、指定した属性を持つ名前付きアセンブリに保存します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29> メソッドは、`regexinfos` 配列に定義されている各正規表現がクラスによって表される .NET Framework アセンブリを生成します。 通常、<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29> メソッドは、コンパイルされた正規表現のアセンブリを生成する別のアプリケーションから呼び出されます。 アセンブリに含まれる各正規表現には、次の特性があります。  
  
-   これは <xref:System.Text.RegularExpressions.Regex> クラスから派生します。  
  
-   これには、`fullnamespace` によって定義される完全修飾名と、対応する <xref:System.Text.RegularExpressions.RegexCompilationInfo> オブジェクトの `name` パラメーターが割り当てられます。  
  
-   これには、既定の (またはパラメーターなしの) コンストラクターがあります。  
  
 通常、コンパイルされた正規表現をインスタンス化して使用するコードは、アセンブリを作成するコードとは別のアセンブリまたはアプリケーションにあります。  
  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> メソッドは、特定の言語のクラス定義 `class` キーワードを使用するのでC#はなく、メソッドの呼び出しから .NET Framework アセンブリを生成するため、または `Class`...`End Class` Visual Basic) では、開発言語の標準属性構文を使用して、.NET Framework 属性をアセンブリに割り当てることはできません。 `attributes` パラメーターは、アセンブリに適用される属性を定義するための別の方法を提供します。 アセンブリに適用する属性ごとに、次の操作を行います。  
  
1.  呼び出す属性コンストラクターのパラメーターの型を表す <xref:System.Type> オブジェクトの配列を作成します。  
  
2.  新しいアセンブリに適用する属性クラスを表す <xref:System.Type> オブジェクトを取得します。  
  
3.  属性 <xref:System.Type> オブジェクトの <xref:System.Type.GetConstructor%2A> メソッドを呼び出して、呼び出す属性コンストラクターを表す <xref:System.Reflection.ConstructorInfo> オブジェクトを取得します。 <xref:System.Type.GetConstructor%2A> メソッドを、コンストラクターのパラメーターの型を表す <xref:System.Type> オブジェクトの配列に渡します。  
  
4.  属性のコンストラクターに渡すパラメーターを定義する <xref:System.Object> 配列を作成します。  
  
5.  手順 3. で取得した <xref:System.Reflection.ConstructorInfo> オブジェクトと手順 4. で作成した <xref:System.Object> 配列をコンストラクターに渡すことによって、<xref:System.Reflection.Emit.CustomAttributeBuilder> オブジェクトをインスタンス化します。  
  
 その後、これらの <xref:System.Reflection.Emit.CustomAttributeBuilder> オブジェクトの配列を、`attributes` パラメーターの代わりに <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29?displayProperty=nameWithType> メソッドに渡すことができます。  
  
   
  
## Examples  
 次の例では、RegexLib という名前のアセンブリを作成し、そのアセンブリに <xref:System.Reflection.AssemblyTitleAttribute> 属性を適用します。 アセンブリには、2つのコンパイルされた正規表現が含まれています。 1つ目の `Utilities.RegularExpressions.DuplicatedString`は、同じ連続する2つの単語に一致します。 2番目の `Utilities.RegularExpressions.EmailAddress`は、文字列が電子メールアドレスとして正しい形式であるかどうかを確認します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.CompileToAssembly#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/cs/Compile3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Regex.CompileToAssembly#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/vb/Compile3.vb#3)]  
  
 <xref:System.Reflection.AssemblyTitleAttribute> 属性がアセンブリに適用されていることを確認するには、Ildasm.exe などのリフレクションユーティリティを使用してマニフェストを調べます。  
  
 次の例では、重複する単語の文字列を確認する正規表現をインスタンス化し、使用します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.CompileToAssembly#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/cs/Compile2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.CompileToAssembly#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/vb/Compile2.vb#2)]  
  
 この2番目の例を正常にコンパイルするには、プロジェクトに追加する RegexLib (最初の例で作成したアセンブリ) への参照が必要です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="assemblyname" /> パラメーターの <see cref="P:System.Reflection.AssemblyName.Name" /> プロパティの値が空または null 文字列です。  
  
または 
<paramref name="regexinfos" /> の 1 つ以上のオブジェクトの正規表現パターンに、無効な構文が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="assemblyname" /> または <paramref name="regexinfos" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.PlatformNotSupportedException">.NET Core のみ: コンパイルされた正規表現のアセンブリの作成はサポートされていません。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v45](~/includes/net-v45-md.md)] またはそのポイントリリースがインストールされているシステムで開発する場合は、[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]を対象とし、<see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> メソッドを使用して、コンパイルされた正規表現を含むアセンブリを作成します。 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] があるシステムでそのアセンブリの正規表現の1つを使用しようとすると、例外がスローされます。 この問題を回避するには、次のいずれかの方法を実行します。 
-コンパイルされた正規表現を含むアセンブリを、それ以降のバージョンではなく [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] を持つシステムでビルドします。  
  
-<see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> を呼び出し、コンパイルされた正規表現をアセンブリから取得するのではなく、<see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトをインスタンス化したり、正規表現パターン一致メソッドを呼び出したりするときに、<see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> オプションで static または instance <see cref="T:System.Text.RegularExpressions.Regex" /> メソッドを使用します。</para></block>
        <related type="Article" href="~/docs/standard/base-types/compilation-and-reuse-in-regular-expressions.md">コンパイルと再利用</related>
      </Docs>
    </Member>
    <Member MemberName="CompileToAssembly">
      <MemberSignature Language="C#" Value="public static void CompileToAssembly (System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, System.Reflection.AssemblyName assemblyname, System.Reflection.Emit.CustomAttributeBuilder[] attributes, string resourceFile);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CompileToAssembly(class System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, class System.Reflection.AssemblyName assemblyname, class System.Reflection.Emit.CustomAttributeBuilder[] attributes, string resourceFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CompileToAssembly (regexinfos As RegexCompilationInfo(), assemblyname As AssemblyName, attributes As CustomAttributeBuilder(), resourceFile As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CompileToAssembly(cli::array &lt;System::Text::RegularExpressions::RegexCompilationInfo ^&gt; ^ regexinfos, System::Reflection::AssemblyName ^ assemblyname, cli::array &lt;System::Reflection::Emit::CustomAttributeBuilder ^&gt; ^ attributes, System::String ^ resourceFile);" />
      <MemberSignature Language="F#" Value="static member CompileToAssembly : System.Text.RegularExpressions.RegexCompilationInfo[] * System.Reflection.AssemblyName * System.Reflection.Emit.CustomAttributeBuilder[] * string -&gt; unit" Usage="System.Text.RegularExpressions.Regex.CompileToAssembly (regexinfos, assemblyname, attributes, resourceFile)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="regexinfos" Type="System.Text.RegularExpressions.RegexCompilationInfo[]" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="assemblyname" Type="System.Reflection.AssemblyName" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="attributes" Type="System.Reflection.Emit.CustomAttributeBuilder[]" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="resourceFile" Type="System.String" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="regexinfos">コンパイルする正規表現を記述する配列。</param>
        <param name="assemblyname">アセンブリのファイル名。</param>
        <param name="attributes">アセンブリに適用する属性を定義する配列。</param>
        <param name="resourceFile">アセンブリに含める Win32 リソース ファイルの名前。</param>
        <summary>指定した 1 つ以上の <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトと、指定した 1 つのリソース ファイルをコンパイルして、指定した属性を持つ名前付きアセンブリに保存します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [\]、AssemblyName、CustomAttributeBuilder\<xref: System.text.regularexpressions.regexoptions% 5B% 5d% RegexCompilationInfo% 2csystem.string% system.text.regularexpressions.regex.compiletoassembly %29 > メソッドによって、`regexinfos` 配列に定義されている各正規表現がクラスによって表される .NET Framework アセンブリが生成されます。このアセンブリが生成される場合は、このアセンブリが生成されます。 通常、[\], AssemblyName, CustomAttributeBuilder\<xref: RegexCompilationInfo% 5b% 5d% 2csystem.string% 2csystem.string% system.text.regularexpressions.regex.compiletoassembly %29 > メソッドは、コンパイルされた正規表現のアセンブリを生成する別のアプリケーションから呼び出されますが、このような場合には、このメソッドは別のアプリケーションから呼び出されます。 アセンブリに含まれる各正規表現には、次の特性があります。  
  
-   これは <xref:System.Text.RegularExpressions.Regex> クラスから派生します。  
  
-   これには、`fullnamespace` によって定義される完全修飾名と、対応する <xref:System.Text.RegularExpressions.RegexCompilationInfo> オブジェクトの `name` パラメーターが割り当てられます。  
  
-   これには、既定の (またはパラメーターなしの) コンストラクターがあります。  
  
 通常、コンパイルされた正規表現をインスタンス化して使用するコードは、アセンブリを作成するコードとは別のアセンブリまたはアプリケーションにあります。  
  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> メソッドは、特定の言語のクラス定義 `class` キーワードを使用するのでC#はなく、メソッドの呼び出しから .NET Framework アセンブリを生成するため、または `Class`...`End Class` Visual Basic) では、開発言語の標準属性構文を使用して、.NET Framework 属性をアセンブリに割り当てることはできません。 `attributes` パラメーターは、アセンブリに適用される属性を定義するための別の方法を提供します。 アセンブリに適用する属性ごとに、次の操作を行います。  
  
1.  呼び出す属性コンストラクターのパラメーターの型を表す <xref:System.Type> オブジェクトの配列を作成します。  
  
2.  新しいアセンブリに適用する属性クラスを表す <xref:System.Type> オブジェクトを取得します。  
  
3.  属性 <xref:System.Type> オブジェクトの <xref:System.Type.GetConstructor%2A> メソッドを呼び出して、呼び出す属性コンストラクターを表す <xref:System.Reflection.ConstructorInfo> オブジェクトを取得します。 <xref:System.Type.GetConstructor%2A> メソッドを、コンストラクターのパラメーターの型を表す <xref:System.Type> オブジェクトの配列に渡します。  
  
4.  属性のコンストラクターに渡すパラメーターを定義する <xref:System.Object> 配列を作成します。  
  
5.  手順 3. で取得した <xref:System.Reflection.ConstructorInfo> オブジェクトと手順 4. で作成した <xref:System.Object> 配列をコンストラクターに渡すことによって、<xref:System.Reflection.Emit.CustomAttributeBuilder> オブジェクトをインスタンス化します。  
  
 次に、`attributes` パラメーターの代わりに、これらの <xref:System.Reflection.Emit.CustomAttributeBuilder> オブジェクトの配列を [\], AssemblyName, CustomAttributeBuilder\<xref: System.text.regularexpressions.regex.compiletoassembly%%%%%%%% System.text.regularexpressions.regexoptions% %29 > メソッドに渡すことができます。このメソッドについては、「」をご覧ください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="assemblyname" /> パラメーターの <see cref="P:System.Reflection.AssemblyName.Name" /> プロパティの値が空または null 文字列です。  
  
または 
<paramref name="regexinfos" /> の 1 つ以上のオブジェクトの正規表現パターンに、無効な構文が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="assemblyname" /> または <paramref name="regexinfos" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Runtime.InteropServices.COMException"><paramref name="resourceFile" /> パラメーターは無効な Win32 リソース ファイルを指定します。</exception>
        <exception cref="T:System.IO.FileNotFoundException"><paramref name="resourceFile" /> パラメーターで指定されているファイルが見つかりません。</exception>
        <exception cref="T:System.PlatformNotSupportedException">.NET Core のみ: コンパイルされた正規表現のアセンブリの作成はサポートされていません。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v45](~/includes/net-v45-md.md)] またはそのポイントリリースがインストールされているシステムで開発する場合は、[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]を対象とし、<see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> メソッドを使用して、コンパイルされた正規表現を含むアセンブリを作成します。 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] があるシステムでそのアセンブリの正規表現の1つを使用しようとすると、例外がスローされます。 この問題を回避するには、次のいずれかの方法を実行します。 
-コンパイルされた正規表現を含むアセンブリを、それ以降のバージョンではなく [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] を持つシステムでビルドします。  
  
-<see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> を呼び出し、コンパイルされた正規表現をアセンブリから取得するのではなく、<see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトをインスタンス化したり、正規表現パターン一致メソッドを呼び出したりするときに、<see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> オプションで static または instance <see cref="T:System.Text.RegularExpressions.Regex" /> メソッドを使用します。</para></block>
        <related type="Article" href="~/docs/standard/base-types/compilation-and-reuse-in-regular-expressions.md">コンパイルと再利用</related>
      </Docs>
    </Member>
    <Member MemberName="Escape">
      <MemberSignature Language="C#" Value="public static string Escape (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Escape(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Escape(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Escape (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Escape(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member Escape : string -&gt; string" Usage="System.Text.RegularExpressions.Regex.Escape str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">変換対象のテキストを含んでいる入力文字列。</param>
        <summary>文字 (\\、*、+、?、|、{、[、(、)、^、$、.、#、および空白) をエスケープ コードに置き換えることにより、このような文字をエスケープします。 これにより、正規表現エンジンではこのような文字がメタ文字ではなくリテラルとして解釈されます。</summary>
        <returns>メタ文字がエスケープされた形式に変換された文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Escape%2A> は、文字列を変換して、正規表現エンジンが文字リテラルとして格納できるメタ文字を解釈できるようにします。 たとえば、テキストから右と終わりの角かっこ ([および]) で区切られたコメントを抽出するように設計された正規表現を考えてみます。 次の例では、正規表現 "[(. *?)]" が文字クラスとして解釈されます。 正規表現は、入力テキストに埋め込まれたコメントと一致するのではなく、それぞれの開始かっこ、閉じかっこ、ピリオド、アスタリスク、または疑問符に一致します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Escape#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/cs/Escape1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Escape#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/vb/Escape1.vb#1)]  
  
 ただし、開始角かっこを <xref:System.Text.RegularExpressions.Regex.Escape%2A> メソッドに渡すことによってエスケープした場合、正規表現は、入力文字列に埋め込まれているコメントに一致します。 次の例を使って説明します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Escape#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/cs/Escape1.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.Escape#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/vb/Escape1.vb#2)]  
  
 静的なテキストを使用して定義されている正規表現では、メタ文字としてではなく文字どおりに解釈される文字は、円記号 (\\) を使用してエスケープすることも、<xref:System.Text.RegularExpressions.Regex.Escape%2A> メソッドを呼び出すことによってエスケープすることもできます。 デザイン時に認識されない文字を使用して動的に定義される正規表現では、<xref:System.Text.RegularExpressions.Regex.Escape%2A> メソッドを呼び出すことは、正規表現エンジンが個々の文字をメタ文字としてではなくリテラルとして解釈するようにするために特に重要です。  
  
> [!NOTE]
>  正規表現パターンにシャープ記号 (#) またはリテラルの空白文字が含まれている場合は、<xref:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace?displayProperty=nameWithType> オプションを有効にして入力テキストを解析する場合は、エスケープする必要があります。  
  
 <xref:System.Text.RegularExpressions.Regex.Escape%2A> メソッドは、右角かっこ ([) と左中かっこ ({) 文字をエスケープしますが、対応する終了文字 (] と}) はエスケープされません。 ほとんどの場合、これらのエスケープは必要ありません。 右角かっこまたは中かっこの前に、対応する開始文字がない場合、正規表現エンジンはこれを文字どおりに解釈します。 左角かっこまたは中かっこがメタ文字として解釈される場合、正規表現エンジンは、最初に対応する終了文字をメタ文字として解釈します。 これが目的の動作でない場合は、円記号 (\\) 文字の前に明示的に付加することによって、右角かっこまたは中かっこをエスケープする必要があります。 図については、「例」のセクションを参照してください。  
  
   
  
## Examples  
 次の例では、テキストからコメントを抽出します。 コメントは、開始コメント記号とユーザーが選択した終了コメント記号で区切られていることを前提としています。 コメント記号はリテラルとして解釈されるため、<xref:System.Text.RegularExpressions.Regex.Escape%2A> メソッドに渡され、誤ってメタ文字として解釈されないようにします。 さらに、この例では、ユーザーによって入力された終了コメントシンボルが右角かっこ (]) または中かっこ (}) であるかどうかを明示的に確認します。 そうでない場合は、円記号 (\\) が角かっこまたは中かっこの前に付加され、文字どおりに解釈されます。 また、この例では、コメントを開始および終了コメント記号と共に使用するのではなく、<xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> コレクションを使用してコメントのみを表示することに注意してください。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Escape#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/cs/Escape3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Regex.Escape#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/vb/Escape3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="str" /> が <see langword="null" /> です。</exception>
        <altmember cref="M:System.Text.RegularExpressions.Regex.Unescape(System.String)" />
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
        <related type="Article" href="~/docs/standard/base-types/character-escapes-in-regular-expressions.md">正規表現での文字のエスケープ</related>
      </Docs>
    </Member>
    <Member MemberName="factory">
      <MemberSignature Language="C#" Value="protected internal System.Text.RegularExpressions.RegexRunnerFactory factory;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly class System.Text.RegularExpressions.RegexRunnerFactory factory" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.factory" />
      <MemberSignature Language="VB.NET" Value="Protected Friend factory As RegexRunnerFactory " />
      <MemberSignature Language="C++ CLI" Value="protected public: System::Text::RegularExpressions::RegexRunnerFactory ^ factory;" />
      <MemberSignature Language="F#" Value="val mutable factory : System.Text.RegularExpressions.RegexRunnerFactory" Usage="System.Text.RegularExpressions.Regex.factory" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.RegexRunnerFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Regex ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Regex ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="regex.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このメンバーは <see cref="M:System.Object.Finalize" /> をオーバーライドし、より詳細なドキュメントがそのトピックで使用できるようになる場合があります。

<see cref="T:System.Object" /> がガベージ コレクションにより収集される前に、その <see cref="T:System.Object" /> がリソースを解放し、その他のクリーンアップ操作を実行できるようにします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGroupNames">
      <MemberSignature Language="C#" Value="public string[] GetGroupNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetGroupNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.GetGroupNames" />
      <MemberSignature Language="VB.NET" Value="Public Function GetGroupNames () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetGroupNames();" />
      <MemberSignature Language="F#" Value="member this.GetGroupNames : unit -&gt; string[]" Usage="regex.GetGroupNames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>正規表現で使用されるキャプチャ グループ名の配列を返します。</summary>
        <returns>グループ名の文字列配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 グループ名のコレクションには、式でキャプチャグループの名前を指定するために使用される文字列のセットが含まれます。 キャプチャグループに明示的な名前が付けられていない場合でも、数値名 ("0"、"1"、"2"、"3" など) が自動的に割り当てられます。 "0" という名前付きグループは、正規表現パターンに一致したすべてのテキストを表します。 番号付きグループは、コレクション内の明示的な名前付きグループの前に配置され、名前付きグループは正規表現パターンで定義されている順序で表示されます。  
  
 このメソッドによって返される配列の <xref:System.Array.Length%2A> プロパティを使用して、正規表現内のグループの数を決定できます。  
  
   
  
## Examples  
 次の例では、正規表現グループの名前と、一致したテキストを表示する汎用 `ShowMatches` メソッドを定義します。  
 
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.getgroupnames/cs/getgroupnames1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.getgroupnames/vb/getgroupnames1.vb" id="Snippet1":::
  
 この場合、正規表現パターン `\b(?<FirstWord>\w+)\s?((\w+)\s)*(?<LastWord>\w+)?(?<Punctuation>\p{Po})` は、単純な文を解析し、最初の単語、最後の単語、および末尾の区切り記号を識別するためのものです。 次の表は、正規表現パターンがどのように解釈されるかを示しています。  
  
|Pattern|説明|  
|-------------|-----------------|  
|`\b`|ワード境界から照合を開始します。|  
|`(?<FirstWord>\w+)`|1 つ以上の単語文字に一致します。 これは `FirstWord` 名前付きグループです。|  
|¥?|0 個または 1 個の空白文字と一致します。|  
|(\w+)|1 つ以上の単語文字に一致します。 これが 2 番目のキャプチャ グループです。|  
|\s|空白文字と一致します。|  
|((\w +) \s) *|1個以上の単語文字の後に空白が続くパターンの0回以上の繰り返しに一致します。 これが最初のキャプチャ グループです。|  
|(?\<LastWord > \w +)?|1個以上の単語文字の0回または1回の繰り返しに一致します。 これは `LastWord` 名前付きグループです。|  
|(?\<句読点 > \p{Po})|Unicode カテゴリが句読点 (Other) である文字と一致します。 これは `Punctuation` 名前付きグループです。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.RegularExpressions.GroupCollection" />
        <related type="Article" href="~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md">正規表現でのコンストラクトのグループ化</related>
      </Docs>
    </Member>
    <Member MemberName="GetGroupNumbers">
      <MemberSignature Language="C#" Value="public int[] GetGroupNumbers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32[] GetGroupNumbers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.GetGroupNumbers" />
      <MemberSignature Language="VB.NET" Value="Public Function GetGroupNumbers () As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;int&gt; ^ GetGroupNumbers();" />
      <MemberSignature Language="F#" Value="member this.GetGroupNumbers : unit -&gt; int[]" Usage="regex.GetGroupNumbers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>配列内のグループ名に対応したキャプチャ グループ番号の配列を返します。</summary>
        <returns>グループ番号の整数配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 名前のないキャプチャグループと名前付きキャプチャグループの両方に、数値でアクセスできます。 名前のないグループには、左から右に1から順に番号が付けられます。 (インデックス 0 (ゼロ) のキャプチャグループは、照合全体を表します)。 名前付きグループには、名前のないキャプチャグループの数より1つ大きい数値から始まる番号が付けられます。  
  
 文字列名ではなく数値を使用してグループを参照すると、アクセスが高速になります。  
  
   
  
## Examples  
 次の例では、文に一致する正規表現 `\b((?<word>\w+)\s*)+(?<end>[.?!])`を定義しています。 正規表現には、次の3つのキャプチャグループが含まれます。個々の単語とその後に続く空白文字をキャプチャする名前のないグループ。文内の個々の単語をキャプチャする `word` という名前のグループ。文を終了する句読点をキャプチャする `end` という名前のグループ。 この例では、<xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A> メソッドを呼び出してすべてのキャプチャグループの数を取得し、キャプチャした文字列を表示します。 また、<xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A> メソッドは、特定の番号付きグループが名前付きグループに対応するかどうかを示すために使用されます。  
 
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.getgroupnumbers/cs/getgroupnumbers1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.getgroupnumbers/vb/getgroupnumbers1.vb" id="Snippet1":::
  
 この正規表現パターンの解釈を次の表に示します。  
  
|Pattern|説明|  
|-------------|-----------------|  
|`\b`|ワード境界から照合を開始します。|  
|`(?<word>\w+)`|1個以上の単語文字と一致し、一致した文字列を `word`という名前のグループに代入します。|  
|`\s*`|0 個以上の空白文字と一致します。|  
|`((?<word>\w+)\s*)`|キャプチャされたグループ `word` に、キャプチャされた最初のグループに対してキャプチャされた空白文字を割り当てます。|  
|`((?<word>\w+)\s*)+`|1個以上の単語文字の後に空白文字が1回以上続くパターンと一致します。|  
|`(?<end>[.?!])`|ピリオド、疑問符、または感嘆符に一致します。 一致した文字を `end` のキャプチャグループに割り当てます。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.RegularExpressions.GroupCollection" />
        <related type="Article" href="~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md">正規表現でのコンストラクトのグループ化</related>
      </Docs>
    </Member>
    <Member MemberName="GroupNameFromNumber">
      <MemberSignature Language="C#" Value="public string GroupNameFromNumber (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GroupNameFromNumber(int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GroupNameFromNumber (i As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GroupNameFromNumber(int i);" />
      <MemberSignature Language="F#" Value="member this.GroupNameFromNumber : int -&gt; string" Usage="regex.GroupNameFromNumber i" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">対応するグループ名に変換するグループ番号。</param>
        <summary>指定したグループ番号に対応するグループ名を取得します。</summary>
        <returns>指定したグループ番号に関連付けられたグループ名を含んでいる文字列。 <paramref name="i" /> に対応するグループ名がない場合、このメソッドは <see cref="F:System.String.Empty" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 正規表現パターンには、名前付きまたは番号付きのキャプチャグループを含めることができます。これは、パターンマッチ内の部分式を表します。 番号付きグループは構文 (*部分式*) で区切られ、正規表現の順序に基づいて番号が割り当てられます。 名前付きグループは、構文 (?`<`*name*`>`*部分式*) または (?) で区切られます。*名前*'*部分式*)。ここで、 *name*は部分式の識別に使用される名前です。 (詳細については、「[グループ化構成体](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)」を参照してください)。<xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A> メソッドは、正規表現内の序数位置によって名前付きグループと番号付きグループの両方を識別します。 序数位置0は、常に正規表現全体を表します。 正規表現パターンの実際の位置に関係なく、すべての番号付きグループは名前付きグループの前にカウントされます。  
  
 `i` が名前付きグループの数である場合、メソッドはグループの名前を返します。 名前のないグループの数が `i` の場合、メソッドは数値の文字列形式を返します。 たとえば、`i` が1の場合、メソッドは "1" を返します。 `i` がキャプチャグループの数ではない場合、メソッドは <xref:System.String.Empty?displayProperty=nameWithType>を返します。  
  
 パターン一致が見つかった場合は、このメソッドによって返される値を使用して、キャプチャされたグループを表す <xref:System.Text.RegularExpressions.Group> オブジェクトを <xref:System.Text.RegularExpressions.GroupCollection.Item%2A?displayProperty=nameWithType> プロパティから取得できます。 <xref:System.Text.RegularExpressions.GroupCollection> オブジェクトは、<xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> プロパティによって返されます。  
  
   
  
## Examples  
 次の例では、米国の市区町村名、州名、および郵便番号を含む住所行と一致する正規表現パターンを定義します。 この例では、<xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A> メソッドを使用して、キャプチャグループの名前を取得します。 次に、これらの名前を使用して、一致するために対応するキャプチャグループを取得します。  
 
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.groupnamefromnumber/cs/groupnamefromnumberex.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.groupnamefromnumber/vb/groupnamefromnumberex.vb" id="Snippet1"::: 
  
 正規表現パターンは、次の式によって定義されます。  
  
 `(?<city>[A-Za-z\s]+), (?<state>[A-Za-z]{2}) (?<zip>\d{5}(-\d{4})?)`  
  
 次の表に、正規表現パターンがどのように解釈されるかを示します。  
  
|Pattern|説明|  
|-------------|-----------------|  
|`(?<city>[A-Za-z\s]+)`|1つ以上の英字または空白文字と一致します。 このキャプチャされたグループに `city`名前を割り当てます。|  
|`,`|コンマ (,) の後に空白文字が続くパターンに一致します。|  
|`(?<state>[A-Za-z]{2})`|2つの英字に一致します。 このキャプチャされたグループに `state`名前を割り当てます。 このグループの後には、空白文字が必要です。|  
|`(?<zip>\d{5}(-\d{4})?)`|5桁の数字の後に、0回または1回のハイフンの後に4桁の数字が続くパターンに一致します。 このキャプチャされたグループに `zip`名前を割り当てます。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.RegularExpressions.GroupCollection" />
        <altmember cref="M:System.Text.RegularExpressions.Regex.GetGroupNumbers" />
        <related type="Article" href="~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md">正規表現でのコンストラクトのグループ化</related>
      </Docs>
    </Member>
    <Member MemberName="GroupNumberFromName">
      <MemberSignature Language="C#" Value="public int GroupNumberFromName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GroupNumberFromName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GroupNumberFromName (name As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GroupNumberFromName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.GroupNumberFromName : string -&gt; int" Usage="regex.GroupNumberFromName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">対応するグループ番号に変換するグループ名。</param>
        <summary>指定したグループ名に対応するグループ番号を返します。</summary>
        <returns>指定したグループ名に対応するグループ番号。<paramref name="name" /> が有効なグループ名でない場合は -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 正規表現パターンには、名前付きまたは番号付きのキャプチャグループを含めることができます。これは、パターンマッチ内の部分式を表します。 番号付きグループは構文 (*部分式*) で区切られ、正規表現の順序に基づいて番号が割り当てられます。 名前付きグループは、構文 (?`<`*name*`>`*部分式*) または (?) で区切られます。*名前*'*部分式*)。ここで、 *name*は部分式の識別に使用される名前です。 (詳細については、「[グループ化構成体](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)」を参照してください)。<xref:System.Text.RegularExpressions.Regex.GroupNumberFromName%2A> メソッドは、正規表現内の序数位置によって名前付きグループと番号付きグループの両方を識別します。 序数位置0は、常に正規表現全体を表します。 正規表現パターンの実際の位置に関係なく、すべての番号付きグループは名前付きグループの前にカウントされます。  
  
 `name` が正規表現パターンに含まれるグループ番号の文字列表現である場合、メソッドはその数値を返します。 `name` が正規表現パターンに存在する名前付きキャプチャグループに対応している場合、メソッドは対応する数値を返します。 グループ名と `name` の比較では、大文字と小文字が区別されます。 `name` がキャプチャグループの名前またはキャプチャグループの番号の文字列形式に対応していない場合、メソッドは-1 を返します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> が <see langword="null" /> です。</exception>
        <altmember cref="T:System.Text.RegularExpressions.GroupCollection" />
        <altmember cref="M:System.Text.RegularExpressions.Regex.GetGroupNames" />
        <related type="Article" href="~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md">正規表現でのコンストラクトのグループ化</related>
      </Docs>
    </Member>
    <Member MemberName="InfiniteMatchTimeout">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan InfiniteMatchTimeout;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan InfiniteMatchTimeout" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InfiniteMatchTimeout As TimeSpan " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly TimeSpan InfiniteMatchTimeout;" />
      <MemberSignature Language="F#" Value=" staticval mutable InfiniteMatchTimeout : TimeSpan" Usage="System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パターン一致の操作がタイムアウトしないことを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> クラスコンストラクターと多数の静的な一致メソッドは、<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout> 定数を使用して、パターンマッチの検索試行がタイムアウトしないことを示します。  
  
> [!WARNING]
>  正規表現エンジンのタイムアウト値を <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout> に設定すると、正規表現パターンにほぼ一致するテキストを処理するときに、過度なバックトラッキングに依存する正規表現が応答を停止する可能性があります。 タイムアウトを無効にした場合は、正規表現が過剰なバックトラッキングに依存していないこと、および正規表現パターンにほぼ一致するテキストを処理していることを確認する必要があります。  
>   
>  バックトラッキングの処理の詳細については、「[バックトラッキング](~/docs/standard/base-types/backtracking-in-regular-expressions.md)」を参照してください。  
  
 <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout> 定数は、次のメンバーの `matchTimeout` 引数の値として指定できます。  
  
-   <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
-   <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%2CSystem.TimeSpan%29?displayProperty=nameWithType>  
  
-   <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
-   <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
-   <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
-   <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
-   <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
-   <xref:System.Text.RegularExpressions.Regex.Split%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.RegularExpressions.Regex.MatchTimeout" />
      </Docs>
    </Member>
    <Member MemberName="InitializeReferences">
      <MemberSignature Language="C#" Value="protected void InitializeReferences ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InitializeReferences() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.InitializeReferences" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InitializeReferences ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InitializeReferences();" />
      <MemberSignature Language="F#" Value="member this.InitializeReferences : unit -&gt; unit" Usage="regex.InitializeReferences " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">参照は既に初期化されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="internalMatchTimeout">
      <MemberSignature Language="C#" Value="protected internal TimeSpan internalMatchTimeout;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly valuetype System.TimeSpan internalMatchTimeout" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.internalMatchTimeout" />
      <MemberSignature Language="VB.NET" Value="Protected Friend internalMatchTimeout As TimeSpan " />
      <MemberSignature Language="C++ CLI" Value="protected public: TimeSpan internalMatchTimeout;" />
      <MemberSignature Language="F#" Value="val mutable internalMatchTimeout : TimeSpan" Usage="System.Text.RegularExpressions.Regex.internalMatchTimeout" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.Serialization.OptionalField(VersionAdded=2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>操作がタイムアウトになる前に、パターン一致操作で経過できる最大時間。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsMatch">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>正規表現と一致する対象が入力文字列内で見つかったかどうかを示します。</summary>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsMatch">
      <MemberSignature Language="C#" Value="public bool IsMatch (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsMatch(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.IsMatch(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsMatch (input As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsMatch(System::String ^ input);" />
      <MemberSignature Language="F#" Value="member this.IsMatch : string -&gt; bool" Usage="regex.IsMatch input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <summary><see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターで指定された正規表現に一致する箇所が、指定した入力文字列内に見つかるかどうかを示します。</summary>
        <returns>正規表現と一致する箇所が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> メソッドは、通常、文字列を検証したり、文字列が後続の操作のためにその文字列を取得せずに特定のパターンに準拠していることを確認したりするために使用されます。 1つ以上の文字列が正規表現パターンに一致するかどうかを判断し、後続の操作のためにそれらを取得する必要がある場合は、<xref:System.Text.RegularExpressions.Regex.Match%2A> または <xref:System.Text.RegularExpressions.Regex.Matches%2A> メソッドを呼び出します。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外は、一致操作の実行時間が、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> コンストラクターによって指定されたタイムアウト期間を超えた場合にスローされます。 コンストラクターを呼び出すときにタイムアウト間隔を設定しなかった場合、この例外は、<xref:System.Text.RegularExpressions.Regex> オブジェクトが作成されたアプリケーションドメインに対して設定されたタイムアウト値を操作が超えた場合にスローされます。 <xref:System.Text.RegularExpressions.Regex> コンストラクター呼び出しまたはアプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>場合は、例外はスローされません。  
  
   
  
## Examples  
 次の例は、<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> メソッドを使用して、文字列が有効な部品番号であるかどうかを判断する方法を示しています。 正規表現では、パーツ番号は、ハイフンで区切られた3つの文字セットで構成される特定の形式を持つことを前提としています。 4つの文字を含む最初のセットは、英数字の後に英数字が続く2つの数字で構成されている必要があります。 2つの文字で構成される2番目のセットは数値である必要があります。 4つの文字で構成される3番目のセットには、3つの数字と英数字が続く必要があります。  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/cs/ismatch2.cs" interactive="try-dotnet" id="Snippet2":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/vb/ismatch2.vb" id="Snippet2":::
  
 正規表現パターンは次のとおりです。  
  
```  
^[a-zA-Z0-9]\d{2}[a-zA-Z0-9](-\d{3}){2}[A-Za-z0-9]$  
```  
  
 次の表に、正規表現パターンがどのように解釈されるかを示します。  
  
|Pattern|説明|  
|-------------|-----------------|  
|`^`|行の先頭から照合を開始します。|  
|`[a-zA-Z0-9]`|1つの英文字 (`a` `z` または `A` から `Z`) または数字文字に一致します。|  
|`\d{2}`|2つの数字と一致します。|  
|`[a-zA-Z0-9]`|1つの英文字 (`a` `z` または `A` から `Z`) または数字文字に一致します。|  
|`-`|ハイフンと一致します。|  
|`\d{3}`|3個の数字と正確に一致します。|  
|`(-\d{3}){2}`|ハイフンの後に3桁の数字を入力し、このパターンの2回の出現を一致させます。|  
|`[a-zA-Z0-9]`|1つの英文字 (`a` `z` または `A` から `Z`) または数字文字に一致します。|  
|`$`|行の末尾で照合を終了します。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <Member MemberName="IsMatch">
      <MemberSignature Language="C#" Value="public bool IsMatch (string input, int startat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsMatch(string input, int32 startat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsMatch (input As String, startat As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsMatch(System::String ^ input, int startat);" />
      <MemberSignature Language="F#" Value="member this.IsMatch : string * int -&gt; bool" Usage="regex.IsMatch (input, startat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="startat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="startat">検索を開始する文字の位置。</param>
        <summary>入力文字列内の指定した位置から検索を開始して、<see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターで指定された正規表現に一致する箇所が、指定した入力文字列内に見つかるかどうかを示します。</summary>
        <returns>正規表現と一致する箇所が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> メソッドは、通常、文字列を検証したり、文字列が後続の操作のためにその文字列を取得せずに特定のパターンに準拠していることを確認したりするために使用されます。 1つ以上の文字列が正規表現パターンに一致するかどうかを判断し、後続の操作のためにそれらを取得する必要がある場合は、<xref:System.Text.RegularExpressions.Regex.Match%2A> または <xref:System.Text.RegularExpressions.Regex.Matches%2A> メソッドを呼び出します。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外は、一致操作の実行時間が、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> コンストラクターによって指定されたタイムアウト期間を超えた場合にスローされます。 コンストラクターを呼び出すときにタイムアウト間隔を設定しなかった場合、この例外は、<xref:System.Text.RegularExpressions.Regex> オブジェクトが作成されたアプリケーションドメインに対して設定されたタイムアウト値を操作が超えた場合にスローされます。 <xref:System.Text.RegularExpressions.Regex> コンストラクター呼び出しまたはアプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>場合は、例外はスローされません。  
  
   
  
## Examples  
 次の例は、<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.Int32%29> メソッドを使用して、文字列が有効な部品番号であるかどうかを判断する方法を示しています。 コロンの後に続く部分番号を検索します (:)文字列内の文字。 <xref:System.String.IndexOf%28System.Char%29> メソッドは、<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.Int32%29> メソッドに渡されるコロン文字の位置を決定するために使用されます。 正規表現では、パーツ番号は、ハイフンで区切られた3つの文字セットで構成される特定の形式を持つことを前提としています。 4つの文字を含む最初のセットは、英数字の後に英数字が続く2つの数字で構成されている必要があります。 2つの文字で構成される2番目のセットは数値である必要があります。 4つの文字で構成される3番目のセットには、3つの数字と英数字が続く必要があります。  
 
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/cs/ismatch3.cs" interactive="try-dotnet" id="Snippet3":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/vb/ismatch3.vb" id="Snippet3":::
  
 正規表現パターンは次のとおりです。  
  
```  
[a-zA-Z0-9]\d{2}[a-zA-Z0-9](-\d{3}){2}[A-Za-z0-9]$  
```  
  
 次の表に、正規表現パターンがどのように解釈されるかを示します。  
  
|Pattern|説明|  
|-------------|-----------------|  
|`[a-zA-Z0-9]`|1つの英文字 (`a` `z` または `A` から `Z`) または数字文字に一致します。|  
|`\d{2}`|2つの数字と一致します。|  
|`[a-zA-Z0-9]`|1つの英文字 (`a` `z` または `A` から `Z`) または数字文字に一致します。|  
|`-`|ハイフンと一致します。|  
|`\d{3}`|3個の数字と正確に一致します。|  
|`(-\d{3}){2}`|ハイフンの後に3桁の数字を入力し、このパターンの2回の出現を一致させます。|  
|`[a-zA-Z0-9]`|1つの英文字 (`a` `z` または `A` から `Z`) または数字文字に一致します。|  
|`$`|行の末尾で照合を終了します。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startat" /> が 0 未満か、<paramref name="input" /> の長さを超えています。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <Member MemberName="IsMatch">
      <MemberSignature Language="C#" Value="public static bool IsMatch (string input, string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsMatch(string input, string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsMatch (input As String, pattern As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsMatch(System::String ^ input, System::String ^ pattern);" />
      <MemberSignature Language="F#" Value="static member IsMatch : string * string -&gt; bool" Usage="System.Text.RegularExpressions.Regex.IsMatch (input, pattern)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <summary>指定した正規表現に一致する箇所が、指定した入力文字列内に見つかるかどうかを示します。</summary>
        <returns>正規表現と一致する箇所が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> メソッドは、通常、文字列を検証したり、文字列が後続の操作のためにその文字列を取得せずに特定のパターンに準拠していることを確認したりするために使用されます。 1つ以上の文字列が正規表現パターンに一致するかどうかを判断し、後続の操作のためにそれらを取得する必要がある場合は、<xref:System.Text.RegularExpressions.Regex.Match%2A> または <xref:System.Text.RegularExpressions.Regex.Matches%2A> メソッドを呼び出します。  
  
 静的 <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29> メソッドは、`pattern` によって指定された正規表現パターンを使用して <xref:System.Text.RegularExpressions.Regex> オブジェクトを構築し、<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> インスタンスメソッドを呼び出すことと同じです。 この正規表現パターンは、正規表現エンジンによる迅速な取得のためにキャッシュされます。  
  
 `pattern` パラメーターは、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。 正規表現の詳細については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外は、一致操作の実行時間が、メソッドが呼び出されたアプリケーションドメインに指定されたタイムアウト期間を超えた場合にスローされます。 アプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>場合は、例外はスローされません。  
  
   
  
## Examples  
 次の例は、<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29> メソッドを使用して、文字列が有効な部品番号であるかどうかを判断する方法を示しています。 正規表現では、パーツ番号は、ハイフンで区切られた3つの文字セットで構成される特定の形式を持つことを前提としています。 4つの文字を含む最初のセットは、英数字の後に英数字が続く2つの数字で構成されている必要があります。 2つの文字で構成される2番目のセットは数値である必要があります。 4つの文字で構成される3番目のセットには、3つの数字と英数字が続く必要があります。  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/cs/ismatch1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/vb/ismatch1.vb" id="Snippet1":::
  
 正規表現パターンは次のとおりです。  
  
```  
^[a-zA-Z0-9]\d{2}[a-zA-Z0-9](-\d{3}){2}[A-Za-z0-9]$  
```  
  
 次の表に、正規表現パターンがどのように解釈されるかを示します。  
  
|Pattern|説明|  
|-------------|-----------------|  
|`^`|行の先頭から照合を開始します。|  
|`[a-zA-Z0-9]`|1つの英文字 (`a` `z` または `A` から `Z`) または数字文字に一致します。|  
|`\d{2}`|2つの数字と一致します。|  
|`[a-zA-Z0-9]`|1つの英文字 (`a` `z` または `A` から `Z`) または数字文字に一致します。|  
|`-`|ハイフンと一致します。|  
|`\d{3}`|3個の数字と正確に一致します。|  
|`(-\d{3}){2}`|ハイフンの後に3桁の数字を入力し、このパターンの2回の出現を一致させます。|  
|`[a-zA-Z0-9]`|1つの英文字 (`a` `z` または `A` から `Z`) または数字文字に一致します。|  
|`$`|行の末尾で照合を終了します。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage"><para>このメソッドは、メソッドが呼び出されたアプリケーションドメインの既定のタイムアウト値と同じ間隔の後にタイムアウトします。 タイムアウト値がアプリケーションドメインに対して定義されていない場合は、メソッドがタイムアウトしないように <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />値が使用されます。 パターン一致を確認するための推奨される静的メソッドは <see cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />であり、タイムアウト間隔を設定できます。</para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <Member MemberName="IsMatch">
      <MemberSignature Language="C#" Value="public static bool IsMatch (string input, string pattern, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsMatch(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsMatch (input As String, pattern As String, options As RegexOptions) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsMatch(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options);" />
      <MemberSignature Language="F#" Value="static member IsMatch : string * string * System.Text.RegularExpressions.RegexOptions -&gt; bool" Usage="System.Text.RegularExpressions.Regex.IsMatch (input, pattern, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
        <summary>指定した一致オプションを使用して、指定した正規表現に一致する箇所が、指定した入力文字列内に見つかるかどうかを示します。</summary>
        <returns>正規表現と一致する箇所が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> メソッドは、通常、文字列を検証したり、文字列が後続の操作のためにその文字列を取得せずに特定のパターンに準拠していることを確認したりするために使用されます。 1つ以上の文字列が正規表現パターンに一致するかどうかを判断し、後続の操作のためにそれらを取得する必要がある場合は、<xref:System.Text.RegularExpressions.Regex.Match%2A> または <xref:System.Text.RegularExpressions.Regex.Matches%2A> メソッドを呼び出します。  
  
 静的な <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> メソッドは、`pattern` で指定された正規表現パターンを使用して <xref:System.Text.RegularExpressions.Regex> オブジェクトを構築し、`options` で指定された正規表現のオプションと <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> インスタンスメソッドを呼び出すことと同じです。 この正規表現パターンは、正規表現エンジンによる迅速な取得のためにキャッシュされます。  
  
 `pattern` パラメーターは、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。 正規表現の詳細については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外は、一致操作の実行時間が、メソッドが呼び出されたアプリケーションドメインに指定されたタイムアウト期間を超えた場合にスローされます。 アプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>場合は、例外はスローされません。  
  
   
  
## Examples  
 次の例は、<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29> メソッドを使用して、文字列が有効な部品番号であるかどうかを判断する方法を示しています。 正規表現では、パーツ番号は、ハイフンで区切られた3つの文字セットで構成される特定の形式を持つことを前提としています。 4つの文字を含む最初のセットは、英数字の後に英数字が続く2つの数字で構成されている必要があります。 2つの文字で構成される2番目のセットは数値である必要があります。 4つの文字で構成される3番目のセットには、3つの数字と英数字が続く必要があります。  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/cs/ismatch4.cs" interactive="try-dotnet" id="Snippet4":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/vb/ismatch4.vb" id="Snippet4":::
  
 正規表現パターンは次のとおりです。  
  
```  
^[A-Z0-9]\d{2}[A-Z0-9](-\d{3}){2}[A-Z0-9]$  
```  
  
 次の表に、正規表現パターンがどのように解釈されるかを示します。  
  
|Pattern|説明|  
|-------------|-----------------|  
|`^`|文字列の先頭から照合を開始します。|  
|`[A-Z0-9]`|`A` の任意の1文字と `Z`、または任意の数字に一致します。|  
|`\d{2}`|2つの数字と一致します。|  
|`[A-Z0-9]`|`A` の任意の1文字と `Z`、または任意の数字に一致します。|  
|`-`|ハイフンと一致します。|  
|`\d{3}`|3個の数字と正確に一致します。|  
|`(-\d{3}){2}`|ハイフンの後に3桁の数字を入力し、このパターンの2回の出現を一致させます。「」を参照してください。|  
|`[A-Z0-9]`|`A` の任意の1文字と `Z`、または任意の数字に一致します。|  
|`$`|入力文字列の末尾で照合を終了します。|  
  
 `options` パラメーターを <xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType> に設定して <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> メソッドを呼び出すことは、次の正規表現を定義することと同じです。  
  
```  
[a-zA-Z0-9]\d{2}[a-zA-Z0-9](-\d{3}){2}[A-Za-z0-9]  
```  
  
 比較については、<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29> メソッドの例を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" /> が有効な <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値ではありません。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage"><para>このメソッドは、呼び出されたアプリケーションドメインの既定のタイムアウト値と同じ間隔の後にタイムアウトします。 タイムアウト値がアプリケーションドメインに対して定義されていない場合は、メソッドがタイムアウトしないように <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />値が使用されます。 パターン一致を確認するための推奨される静的メソッドは <see cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />であり、タイムアウト間隔を設定できます。</para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <Member MemberName="IsMatch">
      <MemberSignature Language="C#" Value="public static bool IsMatch (string input, string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsMatch(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsMatch (input As String, pattern As String, options As RegexOptions, matchTimeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsMatch(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="F#" Value="static member IsMatch : string * string * System.Text.RegularExpressions.RegexOptions * TimeSpan -&gt; bool" Usage="System.Text.RegularExpressions.Regex.IsMatch (input, pattern, options, matchTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="pattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
        <param name="matchTimeout">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
        <summary>指定した一致オプションとタイムアウト間隔を使用して、指定した正規表現に一致する箇所が、指定した入力文字列内に見つかるかどうかを示します。</summary>
        <returns>正規表現と一致する箇所が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> メソッドは、通常、文字列を検証したり、文字列が後続の操作のためにその文字列を取得せずに特定のパターンに準拠していることを確認したりするために使用されます。 1つ以上の文字列が正規表現パターンに一致するかどうかを判断し、後続の操作のためにそれらを取得する必要がある場合は、<xref:System.Text.RegularExpressions.Regex.Match%2A> または <xref:System.Text.RegularExpressions.Regex.Matches%2A> メソッドを呼び出します。  
  
 静的な <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> メソッドは、`pattern` で指定された正規表現パターンを使用して <xref:System.Text.RegularExpressions.Regex> オブジェクトを構築し、`options` で指定された正規表現のオプションと <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> インスタンスメソッドを呼び出すことと同じです。 この正規表現パターンは、正規表現エンジンによる迅速な取得のためにキャッシュされます。  
  
 `pattern` パラメーターは、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。 正規表現の詳細については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。  
  
 `matchTimeout` パラメーターは、パターン一致メソッドがタイムアウトする前に一致を検索する期間を指定します。タイムアウト間隔を設定すると、過度なバックトラッキングに依存している正規表現が、ほぼ一致する入力を処理するときに応答を停止することを防ぎます。 詳細については、「正規表現と[バックトラッキング](~/docs/standard/base-types/backtracking-in-regular-expressions.md)[のベストプラクティス](~/docs/standard/base-types/best-practices.md)」を参照してください。 この期間内に一致するものが見つからない場合、メソッドは <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外をスローします。 `matchTimeout` は、メソッドを実行するアプリケーションドメインに対して定義されている既定のタイムアウト値をオーバーライドします。  
  
   
  
## Examples  
 次の例は、<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> メソッドを使用して、文字列が有効な部品番号であるかどうかを判断する方法を示しています。 正規表現では、パーツ番号は、ハイフンで区切られた3つの文字セットで構成される特定の形式を持つことを前提としています。 4つの文字を含む最初のセットは、英数字の後に英数字が続く2つの数字で構成されている必要があります。 2つの文字で構成される2番目のセットは数値である必要があります。 4つの文字で構成される3番目のセットには、3つの数字と英数字が続く必要があります。 正規表現パターンに一致させるには、入力文字列の検索を最小限にする必要があるため、メソッドはタイムアウト間隔を500ミリ秒に設定します。  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/cs/ismatch5.cs" interactive="try-dotnet" id="Snippet5":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/vb/ismatch5.vb" id="Snippet5":::
  
 正規表現パターンは次のとおりです。  
  
```  
^[A-Z0-9]\d{2}[A-Z0-9](-\d{3}){2}[A-Z0-9]$  
```  
  
 次の表に、正規表現パターンがどのように解釈されるかを示します。  
  
|Pattern|説明|  
|-------------|-----------------|  
|`^`|文字列の先頭から照合を開始します。|  
|`[A-Z0-9]`|`A` の任意の1文字と `Z`、または任意の数字に一致します。|  
|`\d{2}`|2つの数字と一致します。|  
|`[A-Z0-9]`|`A` の任意の1文字と `Z`、または任意の数字に一致します。|  
|`-`|ハイフンと一致します。|  
|`\d{3}`|3個の数字と正確に一致します。|  
|`(-\d{3}){2}`|ハイフンの後に3桁の数字を入力し、このパターンの2回の出現を一致させます。|  
|`[A-Z0-9]`|`A` の任意の1文字と `Z`、または任意の数字に一致します。|  
|`$`|入力文字列の末尾で照合を終了します。|  
  
 `options` パラメーターを <xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType> に設定して <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> メソッドを呼び出すことは、次の正規表現を定義することと同じです。  
  
```  
[a-zA-Z0-9]\d{2}[a-zA-Z0-9](-\d{3}){2}[A-Za-z0-9]  
```  
  
 比較については、<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29> メソッドの例を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" /> が有効な <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値ではありません。  
  
または 
 <paramref name="matchTimeout" /> が負の値か、0 か、または約 24 日を超えています。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。</exception>
        <block subset="none" type="usage"><para><paramref name="matchTimeout" /> パラメーターには、2秒などの適切な値を設定することをお勧めします。 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />を指定してタイムアウトを無効にすると、正規表現エンジンのパフォーマンスが若干向上します。 ただし、次の条件下でのみタイムアウトを無効にする必要があります。 
-正規表現によって処理される入力が既知の信頼できるソースから派生した場合、または静的なテキストで構成されている場合。 これにより、ユーザーが動的に入力したテキストは除外されます。  
  
-正規表現パターンが完全にテストされ、一致、一致しない、および近い一致を効率的に処理できるようになった場合。  
  
-正規表現パターンに、ほぼ一致を処理するときに過度なバックトラッキングを発生させることがわかっている言語要素が含まれていない場合。</para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Match">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>正規表現パターンと一致する部分文字列の入力文字列を検索し、最初に一致したものを 1 つの <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトとして返します。</summary>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Match Match (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.Match Match(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Match(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Match (input As String) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::Match ^ Match(System::String ^ input);" />
      <MemberSignature Language="F#" Value="member this.Match : string -&gt; System.Text.RegularExpressions.Match" Usage="regex.Match input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <summary>指定した入力文字列内で、<see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターで指定された正規表現と最初に一致する対象を 1 つ検索します。</summary>
        <returns>一致に関する情報を格納しているオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> メソッドは、入力文字列の正規表現パターンに一致する最初の部分文字列を返します。 正規表現パターンの作成に使用される言語要素の詳細については、「[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。  
  
 返された <xref:System.Text.RegularExpressions.Match> オブジェクトの <xref:System.Text.RegularExpressions.Group.Success%2A> プロパティの値をチェックすることによって、入力文字列内で正規表現パターンが見つかったかどうかを確認できます。 一致が見つかった場合、返された <xref:System.Text.RegularExpressions.Match> オブジェクトの <xref:System.Text.RegularExpressions.Capture.Value%2A> プロパティには、正規表現パターンに一致する `input` の部分文字列が含まれます。 一致するものが見つからない場合、その値は <xref:System.String.Empty?displayProperty=nameWithType>になります。  
  
 このメソッドは、正規表現パターンに一致する `input` 内の最初の部分文字列を返します。 返された <xref:System.Text.RegularExpressions.Match> オブジェクトの <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> メソッドを繰り返し呼び出すことで、後続の一致文字列を取得できます。 また、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=nameWithType> メソッドを呼び出すことによって、1回のメソッド呼び出しですべての一致を取得することもできます。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外は、一致操作の実行時間が、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> コンストラクターによって指定されたタイムアウト期間を超えた場合にスローされます。 コンストラクターを呼び出すときにタイムアウト間隔を設定しなかった場合、この例外は、<xref:System.Text.RegularExpressions.Regex> オブジェクトが作成されたアプリケーションドメインに対して設定されたタイムアウト値を操作が超えた場合にスローされます。 <xref:System.Text.RegularExpressions.Regex> コンストラクター呼び出しまたはアプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>場合は、例外はスローされません。  
  
   
  
## Examples  
 次の例では、文字列内の正規表現パターン一致を検索し、一致したグループ、キャプチャ、およびキャプチャ位置を一覧表示します。  

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp" id="Snippet8":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs" interactive="try-dotnet" id="Snippet8":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb" id="Snippet8":::
  
 正規表現パターン `(\w+)\s+(car)` は、"car" という単語と、その前にある単語を照合します。 次の表に示すように解釈されます。  
  
|Pattern|説明|  
|-------------|-----------------|  
|`(\w+)`|1 つ以上の単語文字に一致します。 これが最初のキャプチャ グループです。|  
|`\s+`|1個以上の空白文字と一致します。|  
|社用|リテラル文字列 "car" と一致します。 これが 2 番目のキャプチャ グループです。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <altmember cref="M:System.Text.RegularExpressions.Match.NextMatch" />
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Match Match (string input, int startat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.Match Match(string input, int32 startat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Match (input As String, startat As Integer) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::Match ^ Match(System::String ^ input, int startat);" />
      <MemberSignature Language="F#" Value="member this.Match : string * int -&gt; System.Text.RegularExpressions.Match" Usage="regex.Match (input, startat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="startat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="startat">検索を開始する 0 から始まる文字位置。</param>
        <summary>入力文字列内の指定した開始位置から開始して、その入力文字列内で正規表現に最初に一致する箇所を検索します。</summary>
        <returns>一致に関する情報を格納しているオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29> メソッドは、入力文字列内で、正規表現パターンに一致する最初の部分文字列を返します。このパターンは、`startat` 文字位置の先頭または末尾から始まります。 正規表現パターンの作成に使用される言語要素の詳細については、「[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。  
  
 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29> メソッドが検索する正規表現パターンは、<xref:System.Text.RegularExpressions.Regex> クラスコンストラクターのいずれかを呼び出すことによって定義されます。 正規表現パターンを形成できる要素の詳細については、「[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。  
  
 必要に応じて、`startat` パラメーターを使用して、文字列内の開始位置を指定することもできます。 正規表現エンジンが左から右 (既定値) から解析する場合、`startat`で指定された文字を開始位置として、一致とスキャンの移動が右方向ます。 正規表現エンジンが右から左 (<xref:System.Text.RegularExpressions.RegexOptions.RightToLeft?displayProperty=nameWithType> オプションを使用して正規表現パターンを作成したとき) に解析を行うと、一致とスキャンが反対方向に移動し、`startat`-1 の文字で開始されます。 開始位置を指定しない場合は、既定の `startat` 位置から検索が開始されます。 正規表現が左から右に向かって検索する場合は、既定の `startat` 位置が `input`の左端になります。右から左に検索する場合は、既定の `startat` 位置が `input`の右端になります。  
  
 文字列内の特定の文字位置から開始されるように一致を制限し、正規表現エンジンが一致文字列の残りの部分をスキャンしないようにするには、正規表現を左から右へのパターンの場合は左に、右から左に記述するパターンの場合は右側の `\G` に固定します。 これにより、`startat`で正確に開始する必要があるため、一致が制限されます。  
  
 返された <xref:System.Text.RegularExpressions.Match> オブジェクトの <xref:System.Text.RegularExpressions.Group.Success%2A> プロパティの値をチェックすることによって、入力文字列内で正規表現パターンが見つかったかどうかを確認できます。 一致が見つかった場合、返された <xref:System.Text.RegularExpressions.Match> オブジェクトの <xref:System.Text.RegularExpressions.Capture.Value%2A> プロパティには、正規表現パターンに一致する `input` の部分文字列が含まれます。 一致するものが見つからない場合、その値は <xref:System.String.Empty?displayProperty=nameWithType>になります。  
  
 このメソッドは、正規表現パターンに一致する `input` 内の `startat` 文字位置にある最初の部分文字列を返します。 返された <xref:System.Text.RegularExpressions.Match> オブジェクトの <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> メソッドを繰り返し呼び出すことで、後続の一致文字列を取得できます。 また、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> メソッドを呼び出すことによって、1回のメソッド呼び出しですべての一致を取得することもできます。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外は、一致操作の実行時間が、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> コンストラクターによって指定されたタイムアウト期間を超えた場合にスローされます。 コンストラクターを呼び出すときにタイムアウト間隔を設定しなかった場合、この例外は、<xref:System.Text.RegularExpressions.Regex> オブジェクトが作成されたアプリケーションドメインに対して設定されたタイムアウト値を操作が超えた場合にスローされます。 <xref:System.Text.RegularExpressions.Regex> コンストラクター呼び出しまたはアプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>場合は、例外はスローされません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startat" /> が 0 未満か、<paramref name="input" /> の長さを超えています。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <altmember cref="M:System.Text.RegularExpressions.Match.NextMatch" />
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Match (string input, string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Match Match(string input, string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Match (input As String, pattern As String) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::Match ^ Match(System::String ^ input, System::String ^ pattern);" />
      <MemberSignature Language="F#" Value="static member Match : string * string -&gt; System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Regex.Match (input, pattern)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <summary>指定した入力文字列内で、指定した正規表現に最初に一致する箇所を検索します。</summary>
        <returns>一致に関する情報を格納しているオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> メソッドは、入力文字列の正規表現パターンに一致する最初の部分文字列を返します。 正規表現パターンの作成に使用される言語要素の詳細については、「[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。  
  
 静的な <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> メソッドは、指定された正規表現パターンで <xref:System.Text.RegularExpressions.Regex> オブジェクトを構築し、インスタンス <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> メソッドを呼び出すことと同じです。 この場合、正規表現エンジンは正規表現パターンをキャッシュします。  
  
 `pattern` パラメーターは、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。 正規表現の詳細については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。  
  
 返された <xref:System.Text.RegularExpressions.Match> オブジェクトの <xref:System.Text.RegularExpressions.Group.Success%2A> プロパティの値をチェックすることによって、入力文字列内で正規表現パターンが見つかったかどうかを確認できます。 一致が見つかった場合、返された <xref:System.Text.RegularExpressions.Match> オブジェクトの <xref:System.Text.RegularExpressions.Capture.Value%2A> プロパティには、正規表現パターンに一致する `input` の部分文字列が含まれます。 一致するものが見つからない場合、その値は <xref:System.String.Empty?displayProperty=nameWithType>になります。  
  
 このメソッドは、正規表現パターンに一致する `input` 内の最初の部分文字列を返します。 返された <xref:System.Text.RegularExpressions.Match> オブジェクトの <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> メソッドを繰り返し呼び出すことで、後続の一致文字列を取得できます。 また、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType> メソッドを呼び出すことによって、1回のメソッド呼び出しですべての一致を取得することもできます。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外は、一致操作の実行時間が、メソッドが呼び出されたアプリケーションドメインに指定されたタイムアウト期間を超えた場合にスローされます。 アプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>場合は、例外はスローされません。  
  
   
  
## Examples  
 次の例では、<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> メソッドを呼び出して、少なくとも1つの `z` 文字を含む最初の単語を検索し、<xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> メソッドを呼び出して、その他の一致を検索します。  
 
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.match/cs/match1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.match/vb/match1.vb" id="Snippet1":::  
  
 この正規表現パターン `\b\w*z+\w*\b` の解釈を次の表に示します。  
  
|Pattern|説明|  
|-------------|-----------------|  
|`\b`|ワード境界から照合を開始します。|  
|`\w*`|0個以上の単語文字と一致します。|  
|`z+`|`z` 文字の1回以上の出現と一致します。|  
|`\w*`|0個以上の単語文字と一致します。|  
|`\b`|ワード境界で照合を終了します。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage"><para>このメソッドは、呼び出されたアプリケーションドメインの既定のタイムアウト値と同じ間隔の後にタイムアウトします。 タイムアウト値がアプリケーションドメインに対して定義されていない場合は、メソッドがタイムアウトしないように <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />値が使用されます。 パターン一致を取得するために推奨される静的メソッドは <see cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)" />であり、タイムアウト間隔を設定できます。</para></block>
        <altmember cref="M:System.Text.RegularExpressions.Match.NextMatch" />
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Match Match (string input, int beginning, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.Match Match(string input, int32 beginning, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Match (input As String, beginning As Integer, length As Integer) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::Match ^ Match(System::String ^ input, int beginning, int length);" />
      <MemberSignature Language="F#" Value="member this.Match : string * int * int -&gt; System.Text.RegularExpressions.Match" Usage="regex.Match (input, beginning, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="beginning" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="beginning">検索対象の左端の位置を定義する、入力文字列内の 0 から始まる文字位置。</param>
        <param name="length">検索に含める部分文字列の文字数。</param>
        <summary>入力文字列内の指定した開始位置から開始し、指定した文字数だけを検索対象として、その入力文字列内で正規表現に最初に一致する箇所を検索します。</summary>
        <returns>一致に関する情報を格納しているオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29> メソッドは、入力文字列の一部の正規表現パターンに一致する最初の部分文字列を返します。 正規表現パターンの作成に使用される言語要素の詳細については、「[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。  
  
 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29> メソッドが検索する正規表現パターンは、<xref:System.Text.RegularExpressions.Regex> クラスコンストラクターのいずれかを呼び出すことによって定義されます。 正規表現パターンを形成できる要素の詳細については、「[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。  
  
 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29> メソッドは、正規表現パターンの `beginning` および `length` パラメーターで定義された `input` の部分を検索します。 `beginning` は、検索に含める左端の文字のインデックスを常に定義し、`length` は検索する最大文字数を定義します。 これらの組み合わせによって、検索の範囲が定義されます。 検索が左から右 (既定値) に進む場合、正規表現エンジンは、インデックス `beginning` の文字からインデックス `beginning` + `length`-1 の文字を検索します。 <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft?displayProperty=nameWithType> オプションを使用して正規表現エンジンがインスタンス化され、検索が右から左に進むようにすると、正規表現エンジンは、インデックス `beginning` + `length`-1 の文字をインデックス `beginning`の文字に検索します。 このメソッドは、この範囲内で最初に見つかった一致を返します。 返された <xref:System.Text.RegularExpressions.Match> オブジェクトの <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> メソッドを繰り返し呼び出すことで、後続の一致文字列を取得できます。  
  
 返された <xref:System.Text.RegularExpressions.Match> オブジェクトの <xref:System.Text.RegularExpressions.Group.Success%2A> プロパティの値をチェックすることによって、入力文字列内で正規表現パターンが見つかったかどうかを確認できます。 一致が見つかった場合、返された <xref:System.Text.RegularExpressions.Match> オブジェクトの <xref:System.Text.RegularExpressions.Capture.Value%2A> プロパティには、正規表現パターンに一致する `input` の部分文字列が含まれます。 一致するものが見つからない場合、その値は <xref:System.String.Empty?displayProperty=nameWithType>になります。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外は、一致操作の実行時間が、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> コンストラクターによって指定されたタイムアウト期間を超えた場合にスローされます。 コンストラクターを呼び出すときにタイムアウト値を設定しなかった場合、この例外は、<xref:System.Text.RegularExpressions.Regex> オブジェクトが作成されたアプリケーションドメインに対して設定されたタイムアウト値を操作が超えた場合にスローされます。 <xref:System.Text.RegularExpressions.Regex> コンストラクター呼び出しまたはアプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>場合は、例外はスローされません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="beginning" /> が 0 未満か、<paramref name="input" /> の長さを超えています。  
  
または 
 <paramref name="length" /> が 0 未満か、<paramref name="input" /> の長さを超えています。  
  
または 
 <paramref name="beginning" /><see langword="+" /><paramref name="length" /><see langword="-1" /> が <paramref name="input" /> の範囲外の位置を識別しています。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <altmember cref="M:System.Text.RegularExpressions.Match.NextMatch" />
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Match (string input, string pattern, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Match Match(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Match (input As String, pattern As String, options As RegexOptions) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::Match ^ Match(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options);" />
      <MemberSignature Language="F#" Value="static member Match : string * string * System.Text.RegularExpressions.RegexOptions -&gt; System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Regex.Match (input, pattern, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
        <summary>指定した一致オプションを使用して、入力文字列内で、指定した正規表現に最初に一致する箇所を検索します。</summary>
        <returns>一致に関する情報を格納しているオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> メソッドは、入力文字列の正規表現パターンに一致する最初の部分文字列を返します。 正規表現パターンの作成に使用される言語要素の詳細については、「[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。  
  
 静的 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> メソッドは、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29> コンストラクターを使用して <xref:System.Text.RegularExpressions.Regex> オブジェクトを構築し、インスタンス <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> メソッドを呼び出すことと同じです。  
  
 `pattern` パラメーターは、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。 正規表現の詳細については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。  
  
 返された <xref:System.Text.RegularExpressions.Match> オブジェクトの <xref:System.Text.RegularExpressions.Group.Success%2A> プロパティの値をチェックすることによって、入力文字列内で正規表現パターンが見つかったかどうかを確認できます。 一致が見つかった場合、返された <xref:System.Text.RegularExpressions.Match> オブジェクトの <xref:System.Text.RegularExpressions.Capture.Value%2A> プロパティには、正規表現パターンに一致する `input` の部分文字列が含まれます。 一致するものが見つからない場合、その値は <xref:System.String.Empty?displayProperty=nameWithType>になります。  
  
 このメソッドは、正規表現パターンに一致する `input` で見つかった最初の部分文字列を返します。 返された <xref:System.Text.RegularExpressions.Match> オブジェクトの <xref:System.Text.RegularExpressions.Match.NextMatch%2A> メソッドを繰り返し呼び出すことで、後続の一致文字列を取得できます。 また、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType> メソッドを呼び出すことによって、1回のメソッド呼び出しですべての一致を取得することもできます。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外は、一致操作の実行時間が、メソッドが呼び出されたアプリケーションドメインに指定されたタイムアウト期間を超えた場合にスローされます。 アプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>場合は、例外はスローされません。  
  
   
  
## Examples  
 次の例では、文字 "a" で始まる単語と一致する正規表現を定義しています。 この例では、<xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType> オプションを使用して、正規表現が大文字の "a" と小文字の "a" で始まる単語を検索するようにしています。  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.match/cs/match2.cs" interactive="try-dotnet" id="Snippet2":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.match/vb/match2.vb" id="Snippet2":::
  
 この正規表現パターン `\ba\w*\b` の解釈を次の表に示します。  
  
|Pattern|説明|  
|-------------|-----------------|  
|`\b`|ワード境界から照合を開始します。|  
|`a`|文字 "a" と一致します。|  
|`\w*`|0個以上の単語文字と一致します。|  
|`\b`|ワード境界で照合を終了します。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage"><para>このメソッドは、呼び出されたアプリケーションドメインの既定のタイムアウト値と同じ間隔の後にタイムアウトします。 タイムアウト値がアプリケーションドメインに対して定義されていない場合は、メソッドがタイムアウトしないように <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />値が使用されます。 パターン一致を取得するために推奨される静的メソッドは <see cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)" />であり、タイムアウト間隔を設定できます。</para></block>
        <altmember cref="M:System.Text.RegularExpressions.Match.NextMatch" />
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Match (string input, string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Match Match(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Match (input As String, pattern As String, options As RegexOptions, matchTimeout As TimeSpan) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::Match ^ Match(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="F#" Value="static member Match : string * string * System.Text.RegularExpressions.RegexOptions * TimeSpan -&gt; System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Regex.Match (input, pattern, options, matchTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="pattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
        <param name="matchTimeout">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
        <summary>指定した一致オプションとタイムアウト間隔を使用して、入力文字列内で、指定した正規表現に最初に一致する箇所を検索します。</summary>
        <returns>一致に関する情報を格納しているオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> メソッドは、入力文字列の正規表現パターンに一致する最初の部分文字列を返します。 正規表現パターンの作成に使用される言語要素の詳細については、「[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。  
  
 静的 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> メソッドは、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> コンストラクターを使用して <xref:System.Text.RegularExpressions.Regex> オブジェクトを構築し、インスタンス <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> メソッドを呼び出すことと同じです。  
  
 `pattern` パラメーターは、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。 正規表現の詳細については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。  
  
 返された <xref:System.Text.RegularExpressions.Match> オブジェクトの <xref:System.Text.RegularExpressions.Group.Success%2A> プロパティの値をチェックすることによって、入力文字列内で正規表現パターンが見つかったかどうかを確認できます。 一致が見つかった場合、返された <xref:System.Text.RegularExpressions.Match> オブジェクトの <xref:System.Text.RegularExpressions.Capture.Value%2A> プロパティには、正規表現パターンに一致する `input` の部分文字列が含まれます。 一致するものが見つからない場合、その値は <xref:System.String.Empty?displayProperty=nameWithType>になります。  
  
 このメソッドは、正規表現パターンに一致する `input` で見つかった最初の部分文字列を返します。 返された <xref:System.Text.RegularExpressions.Match> オブジェクトの <xref:System.Text.RegularExpressions.Match.NextMatch%2A> メソッドを繰り返し呼び出すことで、後続の一致文字列を取得できます。 また、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType> メソッドを呼び出すことによって、1回のメソッド呼び出しですべての一致を取得することもできます。  
  
 `matchTimeout` パラメーターは、パターン一致メソッドがタイムアウトする前に一致を検索する期間を指定します。タイムアウト間隔を設定すると、過度なバックトラッキングに依存している正規表現が、ほぼ一致する入力を処理するときに応答を停止することを防ぎます。 詳細については、「正規表現と[バックトラッキング](~/docs/standard/base-types/backtracking-in-regular-expressions.md)[のベストプラクティス](~/docs/standard/base-types/best-practices.md)」を参照してください。 この期間内に一致するものが見つからない場合、メソッドは <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外をスローします。 `matchTimeout` は、メソッドを実行するアプリケーションドメインに対して定義されている既定のタイムアウト値をオーバーライドします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。  
  
または 
 <paramref name="matchTimeout" /> が負の値か、0 か、または約 24 日を超えています。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage"><para><paramref name="matchTimeout" /> パラメーターには、2秒などの適切な値を設定することをお勧めします。 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />を指定してタイムアウトを無効にすると、正規表現エンジンのパフォーマンスが若干向上します。 ただし、次の条件下でのみタイムアウトを無効にする必要があります。 
-正規表現によって処理される入力が既知の信頼できるソースから派生した場合、または静的なテキストで構成されている場合。 これにより、ユーザーが動的に入力したテキストは除外されます。  
  
-正規表現パターンが完全にテストされ、一致、一致しない、および近い一致を効率的に処理できるようになった場合。  
  
-正規表現パターンに、ほぼ一致を処理するときに過度なバックトラッキングを発生させることがわかっている言語要素が含まれていない場合。</para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Matches">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>入力文字列内で正規表現と一致する対象をすべて検索し、見つかった対象をすべて返します。</summary>
        <block subset="none" type="usage"><para><see cref="Overload:System.Text.RegularExpressions.Regex.Matches" /> メソッドを呼び出すことによって一致試行が繰り返されると、正規表現エンジンによって空の文字列が特別に処理されます。 通常、正規表現エンジンは、前の一致箇所と同じ位置にある次の一致の検索を開始します。 ただし、空の一致の後、正規表現エンジンは次の一致を試行する前に1文字進めます。 この動作により、正規表現エンジンが文字列を処理することが保証されます。 それ以外の場合は、空の一致によって前方移動が行われないため、次の一致は前の一致とまったく同じ場所で開始され、同じ空の文字列と繰り返し一致します。  
  
次の例では、正規表現パターン<c>a *</c>は、文字列 "abaabb" 内の文字 "a" の0回以上の出現を検索します。 例の出力が示すように、結果として得られる <see cref="T:System.Text.RegularExpressions.MatchCollection" /> オブジェクトには、6つの <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトが含まれています。 最初の一致試行で最初の "a" が検索されます。 2番目の一致は、最初の一致が終了した場所から最初の2つ前まで、"a" の0回の出現を検出し、空の文字列を返します。 3番目の一致は、2番目の一致が終了した場所を正確に開始しません。これは、2番目の一致が空の文字列を返したためです。 代わりに、最初の "b" の後に1文字後に開始します。 3番目の一致では、"a" の2回の出現が検出され、"aa" が返されます。 4回目の一致試行は、3番目の一致が終了し、2番目の "b" の前に、空の文字列を返します。 5回目の一致では、1つの文字を再び進め、3番目の "b" の前に開始し、空の文字列を返します。 6番目の一致は、最後の "b" の後に始まり、空の文字列を返します。  
  
[! code-csharp[system.text.regularexpressions.regexoptions # 9] と](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/emptymatches1.cs#9)入力します。[! コード-vb[system.text.regularexpressions.regexoptions # 9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/emptymatches1.vb#9)] を検索します。</para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.MatchCollection Matches (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.MatchCollection Matches(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Matches(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Matches (input As String) As MatchCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::MatchCollection ^ Matches(System::String ^ input);" />
      <MemberSignature Language="F#" Value="member this.Matches : string -&gt; System.Text.RegularExpressions.MatchCollection" Usage="regex.Matches input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.MatchCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <summary>指定した入力文字列内で、正規表現と一致する対象をすべて検索します。</summary>
        <returns>検索によって見つかった <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトのコレクション。 一致が見つからない場合は、空のコレクション オブジェクトが返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> メソッドは、単一の一致ではなく、入力文字列内で見つかったすべての一致に関する情報を返す点を除いて、<xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> メソッドに似ています。 これは、次のコードと同じです。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#5)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#5)]  
  
 コレクションには、一致するもののみが含まれ、最初の一致しない位置で終了します。  
  
 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> メソッドが検索する正規表現パターンは、<xref:System.Text.RegularExpressions.Regex> クラスコンストラクターのいずれかを呼び出すことによって定義されます。 正規表現パターンを形成できる要素の詳細については、「[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。  
  
 <xref:System.Text.RegularExpressions.Regex.Matches%2A> メソッドは、レイジー評価を使用して、返された <xref:System.Text.RegularExpressions.MatchCollection> オブジェクトを設定します。 <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType> や <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType> など、このコレクションのメンバーにアクセスすると、コレクションに直ちに値が設定されます。 レイジー評価を利用するには、および `For Each`... のC# `foreach` などの構成体を使用してコレクションを反復処理する必要があり`Next` Visual Basic では、上記のようになります。  
  
 遅延評価のため、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> メソッドを呼び出すと、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外はスローされません。 ただし、この例外は、このメソッドによって返された <xref:System.Text.RegularExpressions.MatchCollection> オブジェクトに対して操作が実行された場合にスローされます。この場合、<xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A> プロパティが <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType> ではなく、一致操作がタイムアウト間隔を超えている場合に発生します。  
  
   
  
## Examples  
 次の例では、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> メソッドを使用して、"es" で終わる文内の単語を識別します。  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matches1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matches1.vb" id="Snippet1"::: 
  
 正規表現パターン `\b\w+es\b` は、次の表に示すように定義されています。  
  
|Pattern|説明|  
|-------------|-----------------|  
|`\b`|ワード境界から照合を開始します。|  
|`\w+`|1 つ以上の単語文字に一致します。|  
|`es`|リテラル文字列 "es" と一致します。|  
|`\b`|ワード境界で照合を終了します。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.MatchCollection Matches (string input, int startat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.MatchCollection Matches(string input, int32 startat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Matches (input As String, startat As Integer) As MatchCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::MatchCollection ^ Matches(System::String ^ input, int startat);" />
      <MemberSignature Language="F#" Value="member this.Matches : string * int -&gt; System.Text.RegularExpressions.MatchCollection" Usage="regex.Matches (input, startat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.MatchCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="startat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="startat">入力文字列内の検索を開始する文字位置。</param>
        <summary>入力文字列内の指定した開始位置から検索を開始した場合に、その指定入力文字列内で正規表現と一致する対象をすべて検索します。</summary>
        <returns>検索によって見つかった <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトのコレクション。 一致が見つからない場合は、空のコレクション オブジェクトが返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> メソッドは、単一の一致ではなく、入力文字列内で見つかったすべての一致に関する情報を返す点を除いて、<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29> メソッドに似ています。 これは、次のコードと同じです。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#6)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#6)]  
  
 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> メソッドが検索する正規表現パターンは、<xref:System.Text.RegularExpressions.Regex> クラスコンストラクターのいずれかを呼び出すことによって定義されます。 正規表現パターンを形成できる要素の詳細については、「[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。  
  
 <xref:System.Text.RegularExpressions.Regex.Matches%2A> メソッドは、レイジー評価を使用して、返された <xref:System.Text.RegularExpressions.MatchCollection> オブジェクトを設定します。 <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType> や <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType> など、このコレクションのメンバーにアクセスすると、コレクションに直ちに値が設定されます。 レイジー評価を利用するには、および `For Each`... のC# `foreach` などの構成体を使用してコレクションを反復処理する必要があり`Next` Visual Basic では、上記のようになります。  
  
 遅延評価のため、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> メソッドを呼び出すと、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外はスローされません。 ただし、この例外は、このメソッドによって返された <xref:System.Text.RegularExpressions.MatchCollection> オブジェクトに対して操作が実行された場合にスローされます。この場合、<xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A> プロパティが <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType> ではなく、一致操作がタイムアウト間隔を超えている場合に発生します。 
  
   
  
## Examples  
 次の例では、<xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> メソッドを使用して、"es" で終わる文の最初の単語を検索し、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> メソッドを呼び出して、"es" で終わる追加の単語を識別します。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matches3.cs" interactive="try-dotnet" id="Snippet3":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matches3.vb" id="Snippet3"::: 
  
 正規表現パターン `\b\w+es\b` は、次の表に示すように定義されています。  
  
|Pattern|説明|  
|-------------|-----------------|  
|`\b`|ワード境界から照合を開始します。|  
|`\w+`|1 つ以上の単語文字に一致します。|  
|`es`|リテラル文字列 "es" と一致します。|  
|`\b`|ワード境界で照合を終了します。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startat" /> が 0 未満か、<paramref name="input" /> の長さを超えています。</exception>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.MatchCollection Matches (string input, string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.MatchCollection Matches(string input, string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Matches (input As String, pattern As String) As MatchCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::MatchCollection ^ Matches(System::String ^ input, System::String ^ pattern);" />
      <MemberSignature Language="F#" Value="static member Matches : string * string -&gt; System.Text.RegularExpressions.MatchCollection" Usage="System.Text.RegularExpressions.Regex.Matches (input, pattern)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.MatchCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <summary>指定した入力文字列内で、指定した正規表現に一致する箇所をすべて検索します。</summary>
        <returns>検索によって見つかった <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトのコレクション。 一致が見つからない場合は、空のコレクション オブジェクトが返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> メソッドは、単一の一致ではなく、入力文字列内で見つかったすべての一致に関する情報を返す点を除いて、<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> メソッドに似ています。 これは、次のコードと同じです。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#7)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#7)]  
  
 静的 `Matches` メソッドは、指定された正規表現パターンで <xref:System.Text.RegularExpressions.Regex> オブジェクトを構築し、インスタンスメソッド `Matches`を呼び出すことと同じです。  
  
 `pattern` パラメーターは、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。 正規表現の詳細については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。  
  
 <xref:System.Text.RegularExpressions.Regex.Matches%2A> メソッドは、レイジー評価を使用して、返された <xref:System.Text.RegularExpressions.MatchCollection> オブジェクトを設定します。 <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType> や <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType> など、このコレクションのメンバーにアクセスすると、コレクションに直ちに値が設定されます。 レイジー評価を利用するには、および `For Each`... のC# `foreach` などの構成体を使用してコレクションを反復処理する必要があり`Next` Visual Basic では、上記のようになります。  
  
 遅延評価のため、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> メソッドを呼び出すと、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外はスローされません。 ただし、タイムアウト間隔が現在のアプリケーションドメインの "REGEX_DEFAULT_MATCH_TIMEOUT" プロパティによって定義され、一致操作がこのタイムアウト期間を超えた場合に、このメソッドによって返される <xref:System.Text.RegularExpressions.MatchCollection> オブジェクトに対して操作が実行されると、例外がスローされます。  
  
   
  
## Examples  
 次の例では、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> メソッドを使用して、"es" で終わる文内の単語を識別します。  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matches2.cs" interactive="try-dotnet" id="Snippet2":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matches2.vb" id="Snippet2"::: 
  
 正規表現パターン `\b\w+es\b` は、次の表に示すように定義されています。  
  
|Pattern|説明|  
|-------------|-----------------|  
|`\b`|ワード境界から照合を開始します。|  
|`\w+`|1 つ以上の単語文字に一致します。|  
|`es`|リテラル文字列 "es" と一致します。|  
|`\b`|ワード境界で照合を終了します。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <block subset="none" type="usage"><para>このメソッドは、呼び出されたアプリケーションドメインの既定のタイムアウト値と同じ間隔の後にタイムアウトします。 タイムアウト値がアプリケーションドメインに対して定義されていない場合は、メソッドがタイムアウトしないように <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />値が使用されます。 複数のパターン一致を取得するために推奨される静的メソッドは <see cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />であり、タイムアウト間隔を指定できます。</para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.MatchCollection Matches (string input, string pattern, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.MatchCollection Matches(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Matches (input As String, pattern As String, options As RegexOptions) As MatchCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::MatchCollection ^ Matches(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options);" />
      <MemberSignature Language="F#" Value="static member Matches : string * string * System.Text.RegularExpressions.RegexOptions -&gt; System.Text.RegularExpressions.MatchCollection" Usage="System.Text.RegularExpressions.Regex.Matches (input, pattern, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.MatchCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
        <summary>指定した一致オプションを使用して、指定した入力文字列内で、指定した正規表現に一致する箇所をすべて検索します。</summary>
        <returns>検索によって見つかった <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトのコレクション。 一致が見つからない場合は、空のコレクション オブジェクトが返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> メソッドは、単一の一致ではなく、入力文字列内で見つかったすべての一致に関する情報を返す点を除いて、<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> メソッドに似ています。 これは、次のコードと同じです。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#8)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#8)]  
  
 静的 `Matches` メソッドは、指定された正規表現パターンで <xref:System.Text.RegularExpressions.Regex> オブジェクトを構築し、インスタンスメソッド `Matches`を呼び出すことと同じです。  
  
 `pattern` パラメーターは、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。 正規表現の詳細については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。  
  
 <xref:System.Text.RegularExpressions.Regex.Matches%2A> メソッドは、レイジー評価を使用して、返された <xref:System.Text.RegularExpressions.MatchCollection> オブジェクトを設定します。 <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType> や <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType> など、このコレクションのメンバーにアクセスすると、コレクションに直ちに値が設定されます。 レイジー評価を利用するには、および `For Each`... のC# `foreach` などの構成体を使用してコレクションを反復処理する必要があり`Next` Visual Basic では、上記のようになります。  
  
 遅延評価のため、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> メソッドを呼び出すと、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外はスローされません。 ただし、タイムアウト間隔が現在のアプリケーションドメインの "REGEX_DEFAULT_MATCH_TIMEOUT" プロパティによって定義され、一致操作がこのタイムアウト期間を超えた場合に、このメソッドによって返される <xref:System.Text.RegularExpressions.MatchCollection> オブジェクトに対して操作が実行されると、例外がスローされます。  
  
   
  
## Examples  
 次の例では、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> メソッドを呼び出して、"es" で終わる文内の単語を特定し、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> メソッドを呼び出して、パターンと入力文字列の大文字と小文字を区別しない比較を実行します。 出力に示されているように、2つのメソッドは異なる結果を返します。  
 
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matches4.cs" interactive="try-dotnet" id="Snippet4":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matches4.vb" id="Snippet4":::
  
 正規表現パターン `\b\w+es\b` は、次の表に示すように定義されています。  
  
|Pattern|説明|  
|-------------|-----------------|  
|`\b`|ワード境界から照合を開始します。|  
|`\w+`|1 つ以上の単語文字に一致します。|  
|`es`|リテラル文字列 "es" と一致します。|  
|`\b`|ワード境界で照合を終了します。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</exception>
        <block subset="none" type="usage"><para>このメソッドは、呼び出されたアプリケーションドメインの既定のタイムアウト値と同じ間隔の後にタイムアウトします。 タイムアウト値がアプリケーションドメインに対して定義されていない場合は、メソッドがタイムアウトしないように <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />値が使用されます。 複数のパターン一致を取得するために推奨される静的メソッドは <see cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />であり、タイムアウト間隔を設定できます。</para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.MatchCollection Matches (string input, string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.MatchCollection Matches(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Matches (input As String, pattern As String, options As RegexOptions, matchTimeout As TimeSpan) As MatchCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::MatchCollection ^ Matches(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="F#" Value="static member Matches : string * string * System.Text.RegularExpressions.RegexOptions * TimeSpan -&gt; System.Text.RegularExpressions.MatchCollection" Usage="System.Text.RegularExpressions.Regex.Matches (input, pattern, options, matchTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.MatchCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="pattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
        <param name="matchTimeout">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
        <summary>指定した一致オプションとタイムアウト間隔を使用して、指定した入力文字列内で、指定した正規表現に一致するすべての箇所を検索します。</summary>
        <returns>検索によって見つかった <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトのコレクション。 一致が見つからない場合は、空のコレクション オブジェクトが返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> メソッドは、単一の一致ではなく、入力文字列内で見つかったすべての一致に関する情報を返す点を除いて、<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> メソッドに似ています。 これは、次のコードと同じです。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#10)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#10)]  
  
 静的 `Matches` メソッドは、指定された正規表現パターンで <xref:System.Text.RegularExpressions.Regex> オブジェクトを構築し、インスタンスメソッド `Matches`を呼び出すことと同じです。  
  
 `pattern` パラメーターは、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。 正規表現の詳細については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。  
  
 <xref:System.Text.RegularExpressions.Regex.Matches%2A> メソッドは、レイジー評価を使用して、返された <xref:System.Text.RegularExpressions.MatchCollection> オブジェクトを設定します。 <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType> や <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType> など、このコレクションのメンバーにアクセスすると、コレクションに直ちに値が設定されます。 レイジー評価を利用するには、および `For Each`... のC# `foreach` などの構成体を使用してコレクションを反復処理する必要があり`Next` Visual Basic では、上記のようになります。  
  
 遅延評価のため、<xref:System.Text.RegularExpressions.Regex.Matches%2A> メソッドを呼び出すと、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外はスローされません。 ただし、このメソッドによって返された <xref:System.Text.RegularExpressions.MatchCollection> オブジェクトに対して操作が実行された場合、一致する操作が`matchTimeout` パラメーターで指定されたこのタイムアウト時間を超えると、例外がスローされます。  
  
   
  
## Examples  
 次の例では、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> メソッドを呼び出して、"es" で終わる文の単語と一致する大文字と小文字を区別する比較を実行します。 次に、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> メソッドを呼び出して、入力文字列とパターンの大文字と小文字を区別しない比較を実行します。 どちらの場合も、タイムアウト間隔は1秒に設定されます。 出力に示されているように、2つのメソッドは異なる結果を返します。  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matches5.cs" interactive="try-dotnet" id="Snippet11":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matches5.vb" id="Snippet11":::
  
 正規表現パターン `\b\w+es\b` は、次の表に示すように定義されています。  
  
|Pattern|説明|  
|-------------|-----------------|  
|`\b`|ワード境界から照合を開始します。|  
|`\w+`|1 つ以上の単語文字に一致します。|  
|`es`|リテラル文字列 "es" と一致します。|  
|`\b`|ワード境界で照合を終了します。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。  
  
または 
 <paramref name="matchTimeout" /> が負の値か、0 か、または約 24 日を超えています。</exception>
        <block subset="none" type="usage"><para><paramref name="matchTimeout" /> パラメーターには、2秒などの適切な値を設定することをお勧めします。 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />を指定してタイムアウトを無効にすると、正規表現エンジンのパフォーマンスが若干向上します。 ただし、次の条件下でのみタイムアウトを無効にする必要があります。 
-正規表現によって処理される入力が既知の信頼できるソースから派生した場合、または静的なテキストで構成されている場合。 これにより、ユーザーが動的に入力したテキストは除外されます。  
  
-正規表現パターンが完全にテストされ、一致、一致しない、および近い一致を効率的に処理できるようになった場合。  
  
-正規表現パターンに、ほぼ一致を処理するときに過度なバックトラッキングを発生させることがわかっている言語要素が含まれていない場合。</para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <Member MemberName="MatchTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan MatchTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan MatchTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Regex.MatchTimeout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MatchTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan MatchTimeout { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.MatchTimeout : TimeSpan" Usage="System.Text.RegularExpressions.Regex.MatchTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のインスタンスのタイムアウト間隔を取得します。</summary>
        <value><see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> がスローされる前に、パターン一致操作で経過できる最大時間間隔。タイムアウトが無効な場合は <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A> プロパティは、操作がタイムアウトする前に単一の一致操作を実行する、<xref:System.Text.RegularExpressions.Regex> インスタンスのおおよその最大時間間隔を定義します。正規表現エンジンは、タイムアウト間隔が経過した後の次のタイミングチェック中に <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外をスローします。 これにより、正規表現エンジンは、過度なバックトラッキングを必要とする入力文字列を処理できなくなります。 詳細については、「[正規表現の](~/docs/standard/base-types/best-practices.md)[バックトラッキング](~/docs/standard/base-types/backtracking-in-regular-expressions.md)とベストプラクティス」を参照してください。  
  
 このプロパティは読み取り専用です。 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> コンストラクターを呼び出すことによって、個々の <xref:System.Text.RegularExpressions.Regex> オブジェクトの値を明示的に設定できます。また、次の例に示すように、<xref:System.AppDomain.SetData%2A?displayProperty=nameWithType> メソッドを呼び出し、"REGEX_DEFAULT_MATCH_TIMEOUT" プロパティに <xref:System.TimeSpan> 値を指定することによって、アプリケーションドメイン内のすべての <xref:System.Text.RegularExpressions.Regex> 一致操作の値を設定できます。  
 
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matchtimeout/cs/regexmatchtimeout1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matchtimeout/vb/regexmatchtimeout1.vb" id="Snippet1":::
  
 タイムアウト間隔を明示的に設定しない場合、既定値の <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType> が使用され、照合操作はタイムアウトしません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.RegexOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.RegularExpressions.RegexOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Regex.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As RegexOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::RegularExpressions::RegexOptions Options { System::Text::RegularExpressions::RegexOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Text.RegularExpressions.RegexOptions" Usage="System.Text.RegularExpressions.Regex.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.RegexOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターに渡されたオプションを取得します。</summary>
        <value><see cref="T:System.Text.RegularExpressions.RegexOptions" /> のコンストラクターに渡されたオプションを表す <see cref="T:System.Text.RegularExpressions.Regex" /> の列挙体の 1 つ以上のメンバー</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Options%2A> プロパティの値は、<xref:System.Text.RegularExpressions.RegexOptions> 列挙体の1つ以上のメンバーで構成されます。 <xref:System.Text.RegularExpressions.Regex> クラスコンストラクターでオプションが定義されていない場合、その値は <xref:System.Text.RegularExpressions.RegexOptions.None?displayProperty=nameWithType>になります。 使用可能なオプションの詳細については、「[正規表現のオプション](~/docs/standard/base-types/regular-expression-options.md)」を参照してください。  
  
 <xref:System.Text.RegularExpressions.Regex.Options%2A> プロパティは、正規表現パターン自体で定義されているインラインオプションを反映していないことに注意してください。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>
            <see cref="T:System.Text.RegularExpressions.Regex" /> は、<see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドによって作成された正規表現の基本クラスです。 これらのコンパイルされた正規表現では、<see cref="P:System.Text.RegularExpressions.Regex.Options" /> プロパティの基本クラスの実装を使用します。 派生クラスから呼び出された場合、<see cref="P:System.Text.RegularExpressions.Regex.Options" /> プロパティは、正規表現の定義に使用された <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> クラスコンストラクターの <paramref name="options" /> パラメーターに渡されたオプションを返します。</para></block>
        <altmember cref="T:System.Text.RegularExpressions.RegexOptions" />
        <related type="Article" href="~/docs/standard/base-types/regular-expression-options.md">正規表現のオプション</related>
      </Docs>
    </Member>
    <Member MemberName="pattern">
      <MemberSignature Language="C#" Value="protected internal string pattern;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly string pattern" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.pattern" />
      <MemberSignature Language="VB.NET" Value="Protected Friend pattern As String " />
      <MemberSignature Language="C++ CLI" Value="protected public: System::String ^ pattern;" />
      <MemberSignature Language="F#" Value="val mutable pattern : string" Usage="System.Text.RegularExpressions.Regex.pattern" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Replace">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した入力文字列内で正規表現パターンに一致する文字列を、指定した置換文字列に置き換えます。</summary>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
        <related type="Article" href="~/docs/standard/base-types/substitutions-in-regular-expressions.md">正規表現での置換</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string input, string replacement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string input, string replacement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (input As String, replacement As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ input, System::String ^ replacement);" />
      <MemberSignature Language="F#" Value="member this.Replace : string * string -&gt; string" Usage="regex.Replace (input, replacement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="replacement" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="replacement">置換する文字列。</param>
        <summary>指定した入力文字列内で正規表現パターンに一致するすべての文字列を、指定した置換文字列に置換します。</summary>
        <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 正規表現パターンが現在のインスタンスで一致しない場合、このメソッドは現在のインスタンスをそのまま返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一致の検索は、`input` 文字列の先頭から開始されます。 正規表現は、現在の <xref:System.Text.RegularExpressions.Regex> オブジェクトのコンストラクターによって定義されたパターンです。  
  
 `replacement` パラメーターは、`input`内の各一致文字列を置き換える文字列を指定します。 `replacement` は、リテラルテキストと[置換](~/docs/standard/base-types/substitutions-in-regular-expressions.md)の任意の組み合わせで構成できます。 たとえば、置換パターン `a*${test}b` は、文字列 "a *" に続けて、`test` のキャプチャグループ (存在する場合) と一致する部分文字列を挿入し、その後に文字列 "b" を続けます。 * 文字は、置換パターン内では、メタ文字として認識されません。  
  
> [!NOTE]
>  置換は、置換パターンで認識される唯一の正規表現言語要素です。 他のすべての正規表現言語要素 ([文字エスケープ](~/docs/standard/base-types/character-escapes-in-regular-expressions.md)を含む) は、正規表現パターンでのみ許可され、置換パターンでは認識されません。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外は、置換操作の実行時間が、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> コンストラクターによって指定されたタイムアウト時間を超えた場合にスローされます。 コンストラクターを呼び出すときにタイムアウト間隔を設定しなかった場合、この例外は、<xref:System.Text.RegularExpressions.Regex> オブジェクトが作成されたアプリケーションドメインに対して設定されたタイムアウト値を操作が超えた場合にスローされます。 <xref:System.Text.RegularExpressions.Regex> コンストラクター呼び出しまたはアプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>場合、例外はスローされません。  
  
 メソッドは、一致するものがない場合には変更せずに `input` 返すため、<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> メソッドを使用して、メソッドが入力文字列への置換を行ったかどうかを判断できます。  
  
   
  
## Examples  
 次の例では、1つ以上の空白文字に一致する正規表現 `\s+`を定義しています。 置換文字列 "" は、1つの空白文字で置き換えられます。  
 
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replaceexample5.cs" interactive="try-dotnet" id="Snippet5":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replaceexample5.vb" id="Snippet5":::
  
 次の例では、正規表現、`(\p{Sc}\s?)?(\d+\.?((?<=\.)\d+)?)(?(1)|\s?\p{Sc})?`、および置換パターン `$2`を定義しています。これにより、数値から先頭または末尾の通貨記号が削除されます。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replaceexample7.cs" interactive="try-dotnet" id="Snippet7":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replaceexample7.vb" id="Snippet7"::: 
  
 この正規表現の解釈を次の表に示します。  
  
|Pattern|説明|  
|-------------|-----------------|  
|`\p{Sc}`|通貨記号に一致します。 `{Sc}` は、Unicode 記号、通貨カテゴリのメンバーである任意の文字を示します。|  
|`\s?`|0 個または 1 個の空白文字と一致します。|  
|`(\p{Sc}\s?)?`|通貨記号の後に0個または1個の空白文字が続く組み合わせの0回または1回の繰り返しに一致します。 これが最初のキャプチャ グループです。|  
|`\d+`|1 個以上の 10 進数と一致します。|  
|`\.?`|ピリオドの0回または1回の繰り返しに一致します (小数点区切り文字として使用されます)。|  
|`((?<=\.)\d+)?`|ピリオドが前の文字の場合は、1桁以上の10進数と一致します。 このパターンは、0回または1回一致することができます。|  
|`(\d+\.?((?<=\.)\d+)?)`|1個以上の10進数の後に省略可能なピリオドと追加の10進数が続くパターンと一致します。 これが 2 番目のキャプチャ グループです。 <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%29> メソッドを呼び出すと、一致した文字列全体がこのキャプチャされたグループの値に置き換えられます。|  
|<code>(?(1)&#124;\s?\p{Sc})?</code>|最初のキャプチャグループが存在する場合は、空の文字列と一致します。 それ以外の場合は、0個または1個の空白文字の後に通貨記号が続くパターンに一致します。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="replacement" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
        <related type="Article" href="~/docs/standard/base-types/substitutions-in-regular-expressions.md">正規表現での置換</related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string input, System.Text.RegularExpressions.MatchEvaluator evaluator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string input, class System.Text.RegularExpressions.MatchEvaluator evaluator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (input As String, evaluator As MatchEvaluator) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ input, System::Text::RegularExpressions::MatchEvaluator ^ evaluator);" />
      <MemberSignature Language="F#" Value="member this.Replace : string * System.Text.RegularExpressions.MatchEvaluator -&gt; string" Usage="regex.Replace (input, evaluator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="evaluator" Type="System.Text.RegularExpressions.MatchEvaluator" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="evaluator">各一致文字列を調べ、元の一致文字列または置換文字列のどちらかを返すカスタム メソッド。</param>
        <summary>指定した入力文字列内で、指定した正規表現に一致するすべての文字列を <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートによって返される文字列に置き換えます。</summary>
        <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 正規表現パターンが現在のインスタンスで一致しない場合、このメソッドは現在のインスタンスをそのまま返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=nameWithType> メソッドは、次の条件のいずれかに該当する場合に正規表現の一致を置き換える場合に便利です。  
  
-   置換文字列は、正規表現の置換パターンで簡単に指定することはできません。  
  
-   置換文字列は、一致した文字列に対して何らかの処理が行われた結果になります。  
  
-   置換文字列は、条件付き処理の結果として返されます。  
  
 メソッドは、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=nameWithType> メソッドを呼び出し、返された <xref:System.Text.RegularExpressions.MatchCollection> コレクション内の各 <xref:System.Text.RegularExpressions.Match> オブジェクトを `evaluator` デリゲートに渡すことと同じです。  
  
 正規表現は、現在の <xref:System.Text.RegularExpressions.Regex> オブジェクトのコンストラクターによって定義されたパターンです。  
  
 `evaluator` パラメーターは、定義したカスタムメソッドのデリゲートであり、それぞれの一致を調べます。 カスタムメソッドは、<xref:System.Text.RegularExpressions.MatchEvaluator> デリゲートと一致させるために次のシグネチャを持っている必要があります。  
 
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  
   
 カスタムメソッドは、一致した入力を置き換える文字列を返します。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外は、置換操作の実行時間が、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> コンストラクターによって指定されたタイムアウト時間を超えた場合にスローされます。 コンストラクターを呼び出すときにタイムアウト間隔を設定しなかった場合、この例外は、<xref:System.Text.RegularExpressions.Regex> オブジェクトが作成されたアプリケーションドメインに対して設定されたタイムアウト値を操作が超えた場合にスローされます。 <xref:System.Text.RegularExpressions.Regex> コンストラクター呼び出しまたはアプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>場合、例外はスローされません。  
  
 メソッドは、一致するものがない場合には変更せずに `input` 返すため、<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> メソッドを使用して、メソッドが入力文字列への置換を行ったかどうかを判断できます。  
  
   
  
## Examples  
 次のコード例では、元の文字列を表示し、元の文字列の各単語と一致し、各一致の最初の文字を大文字に変換して、変換後の文字列を表示します。  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/Regex.Replace-Instance/cs/sample.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/Regex.Replace-Instance/vb/sample.vb" id="Snippet1":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="evaluator" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <altmember cref="T:System.Text.RegularExpressions.MatchEvaluator" />
        <related type="Article" href="~/docs/standard/base-types/substitutions-in-regular-expressions.md">正規表現での置換</related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string input, string replacement, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string input, string replacement, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (input As String, replacement As String, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ input, System::String ^ replacement, int count);" />
      <MemberSignature Language="F#" Value="member this.Replace : string * string * int -&gt; string" Usage="regex.Replace (input, replacement, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="replacement" Type="System.String" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="replacement">置換する文字列。</param>
        <param name="count">置換を行う最大回数。</param>
        <summary>指定した入力文字列内で正規表現パターンに一致する文字列を、指定した最大回数だけ、指定した置換文字列に置換します。</summary>
        <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 正規表現パターンが現在のインスタンスで一致しない場合、このメソッドは現在のインスタンスをそのまま返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一致の検索は、`input` 文字列の先頭から開始されます。 正規表現は、現在の <xref:System.Text.RegularExpressions.Regex> オブジェクトのコンストラクターによって定義されるパターンです。 `count` が負の場合は、文字列の末尾まで置換が続行されます。 `count` が一致の数を超えている場合は、すべての一致が置換されます。  
  
 `replacement` パラメーターは `input`内の最初の `count` 一致を置き換える文字列を指定します。 `replacement` は、リテラルテキストと[置換](~/docs/standard/base-types/substitutions-in-regular-expressions.md)の任意の組み合わせで構成できます。 たとえば、置換パターン `a*${test}b` は、文字列 "a *" に続けて、`test` のキャプチャグループ (存在する場合) と一致する部分文字列を挿入し、その後に文字列 "b" を続けます。 * 文字は、置換パターン内では、メタ文字として認識されません。  
  
> [!NOTE]
>  置換は、置換パターンで認識される唯一の正規表現言語要素です。 他のすべての正規表現言語要素 ([文字エスケープ](~/docs/standard/base-types/character-escapes-in-regular-expressions.md)を含む) は、正規表現パターンでのみ許可され、置換パターンでは認識されません。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外は、置換操作の実行時間が、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> コンストラクターによって指定されたタイムアウト時間を超えた場合にスローされます。 コンストラクターを呼び出すときにタイムアウト間隔を設定しなかった場合、この例外は、<xref:System.Text.RegularExpressions.Regex> オブジェクトが作成されたアプリケーションドメインに対して設定されたタイムアウト値を操作が超えた場合にスローされます。 <xref:System.Text.RegularExpressions.Regex> コンストラクター呼び出しまたはアプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>場合、例外はスローされません。  
  
 メソッドは、一致するものがない場合には変更せずに `input` 返すため、<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> メソッドを使用して、メソッドが入力文字列への置換を行ったかどうかを判断できます。  
  
   
  
## Examples  
 次の例では、最初の5回の重複する文字を1つの文字に置き換えます。 正規表現パターン `(\w)\1` は、1つの文字が連続して出現するパターンと一致し、最初の文字が最初のキャプチャグループに代入されます。 置換パターンは、一致した文字列全体を最初のキャプチャグループに置換 `$1` ます。  
 
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replaceexample8.cs" interactive="try-dotnet" id="Snippet8":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replaceexample8.vb" id="Snippet8":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="replacement" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
        <related type="Article" href="~/docs/standard/base-types/substitutions-in-regular-expressions.md">正規表現での置換</related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string input, string pattern, string replacement);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string input, string pattern, string replacement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Replace (input As String, pattern As String, replacement As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Replace(System::String ^ input, System::String ^ pattern, System::String ^ replacement);" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * string -&gt; string" Usage="System.Text.RegularExpressions.Regex.Replace (input, pattern, replacement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="replacement" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="replacement">置換する文字列。</param>
        <summary>指定した入力文字列内で指定した正規表現に一致するすべての文字列を、指定した置換文字列に置換します。</summary>
        <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 <paramref name="pattern" /> が現在のインスタンス内で一致しない場合、メソッドは現在のインスタンスを変更せずに返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 静的 `Replace` メソッドは、指定された正規表現パターンで <xref:System.Text.RegularExpressions.Regex> オブジェクトを構築し、インスタンスメソッド `Replace`を呼び出すことと同じです。  
  
 `pattern` パラメーターは、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。 正規表現の詳細については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。 一致の検索は、`input` 文字列の先頭から開始されます。  
  
 `replacement` パラメーターは、`input`内の各一致文字列を置き換える文字列を指定します。 `replacement` は、リテラルテキストと[置換](~/docs/standard/base-types/substitutions-in-regular-expressions.md)の任意の組み合わせで構成できます。 たとえば、置換パターン `a*${test}b` は、文字列 "a *" に続けて、`test` のキャプチャグループ (存在する場合) と一致する部分文字列を挿入し、その後に文字列 "b" を続けます。 * 文字は、置換パターン内では、メタ文字として認識されません。  
  
> [!NOTE]
>  置換は、置換パターンで認識される唯一の正規表現言語要素です。 他のすべての正規表現言語要素 ([文字エスケープ](~/docs/standard/base-types/character-escapes-in-regular-expressions.md)を含む) は、正規表現パターンでのみ許可され、置換パターンでは認識されません。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外は、置換操作の実行時間が、メソッドが呼び出されたアプリケーションドメインに指定されたタイムアウト期間を超えた場合にスローされます。 アプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>場合は、例外はスローされません。  
  
 メソッドは、一致するものがない場合には変更せずに `input` 返すため、<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> メソッドを使用して、メソッドが入力文字列への置換を行ったかどうかを判断できます。  
  
   
  
## Examples  
 次の例では、1つ以上の空白文字に一致する正規表現 `\s+`を定義しています。 置換文字列 "" は、1つの空白文字で置き換えられます。  
 
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replaceexample6.cs" interactive="try-dotnet" id="Snippet6":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replaceexample6.vb" id="Snippet6"::: 
  
 次の例では、<xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%29> メソッドを使用して、UNC パスのローカルコンピューターとドライブ名をローカルファイルパスに置き換えます。 この正規表現では、<xref:System.Environment.MachineName%2A?displayProperty=nameWithType> プロパティを使用してローカルコンピューターの名前を指定し、<xref:System.Environment.GetLogicalDrives%2A?displayProperty=nameWithType> メソッドを使用して論理ドライブの名前を含めます。 例を正しく実行するには、リテラル文字列 "MyMachine" をローカルコンピューター名に置き換える必要があります。  
 
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace3.cs" interactive="try-dotnet" id="Snippet3":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace3.vb" id="Snippet3":::
  
 正規表現パターンは、次の式によって定義されます。  
  
 `"\\\\(?i:" + Environment.MachineName + ")(?:\.\w+)*\\((?i:[" + driveNames + "]))\$"`  
  
 次の表に、正規表現パターンがどのように解釈されるかを示します。  
  
|Pattern|説明|  
|-------------|-----------------|  
|`\\\\`|2つの連続する円記号 (`\`) 文字と一致します。 バックスラッシュ文字はエスケープ文字として解釈されるため、各円記号は別の円記号でエスケープする必要があります。|  
|`(?i:" + Environment.MachineName + ")`|<xref:System.Environment.MachineName%2A?displayProperty=nameWithType> プロパティによって返される文字列の大文字と小文字を区別しない一致を実行します。|  
|`(?:\.\w+)*`|ピリオド (`.`) 文字の後に1個以上の単語文字が続くパターンと一致します。 この一致は、0回以上発生する可能性があります。 一致した部分式はキャプチャされません。|  
|`\\`|円記号 (`\`) 文字と一致します。|  
|`((?i:[" + driveNames + "]))`|個々のドライブ文字で構成される文字クラスの大文字と小文字を区別しない一致を実行します。 この一致は最初にキャプチャされた部分式です。|  
|`\$`|リテラルドル記号 (`$`) 文字と一致します。|  
  
 置換パターンは、一致した文字列全体を最初にキャプチャされた部分式と置き換え `$1` ます。 つまり、UNC コンピューターとドライブ名はドライブ文字で置き換えられます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" />、<paramref name="pattern" />、または <paramref name="replacement" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage"><para>このメソッドは、呼び出されたアプリケーションドメインの既定のタイムアウト値と同じ間隔の後にタイムアウトします。 タイムアウト値がアプリケーションドメインに対して定義されていない場合は、メソッドがタイムアウトしないように <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />値が使用されます。 パターンマッチを置き換えるために推奨される静的メソッドは <see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />です。これにより、タイムアウト間隔を設定できます。</para></block>
        <related type="Article" href="~/docs/standard/base-types/substitutions-in-regular-expressions.md">正規表現での置換</related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string input, string pattern, System.Text.RegularExpressions.MatchEvaluator evaluator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string input, string pattern, class System.Text.RegularExpressions.MatchEvaluator evaluator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Replace (input As String, pattern As String, evaluator As MatchEvaluator) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Replace(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::MatchEvaluator ^ evaluator);" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * System.Text.RegularExpressions.MatchEvaluator -&gt; string" Usage="System.Text.RegularExpressions.Regex.Replace (input, pattern, evaluator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="evaluator" Type="System.Text.RegularExpressions.MatchEvaluator" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="evaluator">各一致文字列を調べ、元の一致文字列または置換文字列のどちらかを返すカスタム メソッド。</param>
        <summary>指定した入力文字列内で、指定した正規表現に一致するすべての文字列を <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートによって返される文字列に置き換えます。</summary>
        <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 <paramref name="pattern" /> が現在のインスタンス内で一致しない場合、メソッドは現在のインスタンスを変更せずに返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=nameWithType> メソッドは、次の条件のいずれかに該当する場合に正規表現の一致を置き換える場合に便利です。  
  
-   置換文字列は、正規表現の置換パターンで簡単に指定することはできません。  
  
-   置換文字列は、一致した文字列に対して何らかの処理が行われた結果になります。  
  
-   置換文字列は、条件付き処理の結果として返されます。  
  
 メソッドは、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType> メソッドを呼び出し、返された <xref:System.Text.RegularExpressions.MatchCollection> コレクション内の各 <xref:System.Text.RegularExpressions.Match> オブジェクトを `evaluator` デリゲートに渡すことと同じです。  
  
 `pattern` パラメーターは、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。 正規表現の詳細については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。  
  
 `evaluator` パラメーターは、定義したカスタムメソッドのデリゲートであり、それぞれの一致を調べます。 カスタムメソッドは、<xref:System.Text.RegularExpressions.MatchEvaluator> デリゲートと一致させるために次のシグネチャを持っている必要があります。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  
  
 カスタムメソッドは、一致した入力を置き換える文字列を返します。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外は、置換操作の実行時間が、メソッドが呼び出されたアプリケーションドメインに指定されたタイムアウト期間を超えた場合にスローされます。 アプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>場合は、例外はスローされません。  
  
 メソッドは、一致するものがない場合には変更せずに `input` 返すため、<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> メソッドを使用して、メソッドが入力文字列への置換を行ったかどうかを判断できます。  
  
   
  
## Examples  
 次の例では、正規表現を使用して文字列から個々の単語を抽出し、<xref:System.Text.RegularExpressions.MatchEvaluator> デリゲートを使用して、単語内の個々の文字をスクランブルする `WordScramble` という名前のメソッドを呼び出します。 これを行うために、`WordScramble` メソッドは、一致する文字を含む配列を作成します。 また、ランダムな浮動小数点数を設定する並列配列も作成します。 配列は <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType> メソッドを呼び出すことによって並べ替えられ、並べ替えられた配列は <xref:System.String> クラスコンストラクターへの引数として提供されます。 この新しく作成された文字列は、`WordScramble` メソッドによって返されます。 正規表現パターン `\w+` は、1個以上の単語文字と一致します。正規表現エンジンは、空白文字など、単語以外の文字が見つかるまで、一致に文字を追加し続けます。  
 
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace5.cs" interactive="try-dotnet" id="Snippet2":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace5.vb" id="Snippet2":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" />、<paramref name="pattern" />、または <paramref name="evaluator" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage"><para>このメソッドは、呼び出されたアプリケーションドメインの既定のタイムアウト値と同じ間隔の後にタイムアウトします。 タイムアウト値がアプリケーションドメインに対して定義されていない場合は、メソッドがタイムアウトしないように <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />値が使用されます。 パターン一致を評価および置換するための推奨される静的メソッドは <see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />です。これにより、タイムアウト間隔を設定できます。</para></block>
        <altmember cref="T:System.Text.RegularExpressions.MatchEvaluator" />
        <related type="Article" href="~/docs/standard/base-types/substitutions-in-regular-expressions.md">正規表現での置換</related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string input, System.Text.RegularExpressions.MatchEvaluator evaluator, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string input, class System.Text.RegularExpressions.MatchEvaluator evaluator, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (input As String, evaluator As MatchEvaluator, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ input, System::Text::RegularExpressions::MatchEvaluator ^ evaluator, int count);" />
      <MemberSignature Language="F#" Value="member this.Replace : string * System.Text.RegularExpressions.MatchEvaluator * int -&gt; string" Usage="regex.Replace (input, evaluator, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="evaluator" Type="System.Text.RegularExpressions.MatchEvaluator" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="evaluator">各一致文字列を調べ、元の一致文字列または置換文字列のどちらかを返すカスタム メソッド。</param>
        <param name="count">置換を実行する最大回数。</param>
        <summary>指定した入力文字列内で正規表現パターンに一致する文字列を、指定した最大回数だけ、<see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートによって返される文字列に置き換えます。</summary>
        <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 正規表現パターンが現在のインスタンスで一致しない場合、このメソッドは現在のインスタンスをそのまま返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Int32%29?displayProperty=nameWithType> メソッドは、次の条件のいずれかに該当する場合に正規表現の一致を置き換える場合に便利です。  
  
-   置換文字列は、正規表現の置換パターンで簡単に指定することはできません。  
  
-   置換文字列は、一致した文字列に対して何らかの処理が行われた結果になります。  
  
-   置換文字列は、条件付き処理の結果として返されます。  
  
 メソッドは、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=nameWithType> メソッドを呼び出し、返された <xref:System.Text.RegularExpressions.MatchCollection> コレクション内の最初の `count`<xref:System.Text.RegularExpressions.Match> オブジェクトを `evaluator` デリゲートに渡すことと同じです。  
  
 正規表現は、現在の <xref:System.Text.RegularExpressions.Regex> オブジェクトのコンストラクターによって定義されたパターンです。  
  
 `evaluator` パラメーターは、定義したカスタムメソッドのデリゲートであり、それぞれの一致を調べます。 カスタムメソッドは、<xref:System.Text.RegularExpressions.MatchEvaluator> デリゲートと一致させるために次のシグネチャを持っている必要があります。  

 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  
    
 カスタムメソッドは、一致した入力を置き換える文字列を返します。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外は、置換操作の実行時間が、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> コンストラクターによって指定されたタイムアウト時間を超えた場合にスローされます。 コンストラクターを呼び出すときにタイムアウト間隔を設定しなかった場合、この例外は、<xref:System.Text.RegularExpressions.Regex> オブジェクトが作成されたアプリケーションドメインに対して設定されたタイムアウト値を操作が超えた場合にスローされます。 <xref:System.Text.RegularExpressions.Regex> コンストラクター呼び出しまたはアプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>場合、例外はスローされません。  
  
 メソッドは、一致するものがない場合には変更せずに `input` 返すため、<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> メソッドを使用して、メソッドが入力文字列への置換を行ったかどうかを判断できます。  
  
   
  
## Examples  
 次の例では、正規表現を使用して、リスト内の単語の半分を意図的に誤って間違えています。 この例では、正規表現 `\w*(ie|ei)\w*` を使用して、"ie" または "ei" という文字を含む単語を照合します。 一致する単語の最初の半分を `ReverseLetter` メソッドに渡します。さらに、<xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> メソッドを使用して、一致する文字列の "i" と "e" を逆にします。 残りの単語は変更されません。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace7.cs" interactive="try-dotnet" id="Snippet11":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace7.vb" id="Snippet11":::  
  
 正規表現 `\w*(ie|ei)\w*` は、次の表に示すように定義されています。  
  
|Pattern|説明|  
|-------------|-----------------|  
|`\w*`|0 個以上の単語に使用される文字に一致します。|  
|<code>(ie&#124;ei)</code>|"Ie" または "ei" に一致します。|  
|`\w*`|0 個以上の単語に使用される文字に一致します。|  
  
 `ReverseLetter` メソッド内の `([ie])([ie])` 正規表現パターンは、diphthong "ie" または "ei" の最初の "i" または "e" と一致し、最初のキャプチャグループに文字を割り当てます。 2番目の "i" または "e" と一致し、2番目のキャプチャグループに文字を割り当てます。 2つの文字は、置換パターン `$2$1`を使用して <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%29> メソッドを呼び出すことによって元に戻されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="evaluator" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <altmember cref="T:System.Text.RegularExpressions.MatchEvaluator" />
        <related type="Article" href="~/docs/standard/base-types/substitutions-in-regular-expressions.md">正規表現での置換</related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string input, string replacement, int count, int startat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string input, string replacement, int32 count, int32 startat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (input As String, replacement As String, count As Integer, startat As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ input, System::String ^ replacement, int count, int startat);" />
      <MemberSignature Language="F#" Value="member this.Replace : string * string * int * int -&gt; string" Usage="regex.Replace (input, replacement, count, startat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="replacement" Type="System.String" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="startat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="replacement">置換する文字列。</param>
        <param name="count">置換を実行する最大回数。</param>
        <param name="startat">入力文字列中で検索を開始する文字位置。</param>
        <summary>指定した入力部分文字列内で正規表現パターンに一致する文字列を、指定した最大回数だけ、指定した置換文字列に置換します。</summary>
        <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 正規表現パターンが現在のインスタンスで一致しない場合、このメソッドは現在のインスタンスをそのまま返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一致の検索は、`startat` パラメーターで指定された位置にある `input` 文字列から開始されます。 正規表現は、現在の <xref:System.Text.RegularExpressions.Regex> オブジェクトのコンストラクターによって定義されたパターンです。 `count` が負の場合は、文字列の末尾まで置換が続行されます。 `count` が一致の数を超えている場合は、すべての一致が置換されます。  
  
 `replacement` パラメーターは、`input`内の各一致文字列を置き換える文字列を指定します。 `replacement` は、リテラルテキストと[置換](~/docs/standard/base-types/substitutions-in-regular-expressions.md)の任意の組み合わせで構成できます。 たとえば、置換パターン `a*${test}b` は、文字列 "a *" に続けて、`test` のキャプチャグループ (存在する場合) と一致する部分文字列を挿入し、その後に文字列 "b" を続けます。 * 文字は、置換パターン内では、メタ文字として認識されません。  
  
> [!NOTE]
>  置換は、置換パターンで認識される唯一の正規表現言語要素です。 他のすべての正規表現言語要素 ([文字エスケープ](~/docs/standard/base-types/character-escapes-in-regular-expressions.md)を含む) は、正規表現パターンでのみ許可され、置換パターンでは認識されません。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外は、置換操作の実行時間が、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> コンストラクターによって指定されたタイムアウト時間を超えた場合にスローされます。 コンストラクターを呼び出すときにタイムアウト間隔を設定しなかった場合、この例外は、<xref:System.Text.RegularExpressions.Regex> オブジェクトが作成されたアプリケーションドメインに対して設定されたタイムアウト値を操作が超えた場合にスローされます。 <xref:System.Text.RegularExpressions.Regex> コンストラクター呼び出しまたはアプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>場合、例外はスローされません。  
  
 メソッドは、一致するものがない場合には変更せずに `input` 返すため、<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> メソッドを使用して、メソッドが入力文字列への置換を行ったかどうかを判断できます。  
  
   
  
## Examples  
 次の例では、文字列の最初の行を除いて、すべてをダブルスペースにします。 これは、テキスト行と一致する正規表現パターン `^.*$`を定義し、<xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> メソッドを呼び出して文字列の最初の行と一致し、`Match.Index` プロパティと `Match.Count` プロパティを使用して2行目の開始位置を決定します。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replaceexample9.cs" interactive="try-dotnet" id="Snippet9":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replaceexample9.vb" id="Snippet9"::: 
  
 正規表現パターン `^.*$` は、次の表に示すように定義されています。  
  
|Pattern|説明|  
|-------------|-----------------|  
|`^`|行の先頭に一致します。 (<xref:System.Text.RegularExpressions.Regex> オブジェクトは、<xref:System.Text.RegularExpressions.RegexOptions.Multiline?displayProperty=nameWithType> オプションを使用してインスタンス化されたことに注意してください。それ以外の場合、この文字クラスは入力文字列の先頭にのみ一致します)。|  
|`.*`|0 回以上の任意の文字に一致します。|  
|`$`|行の末尾と一致します。 (<xref:System.Text.RegularExpressions.Regex> オブジェクトは、<xref:System.Text.RegularExpressions.RegexOptions.Multiline?displayProperty=nameWithType> オプションを使用してインスタンス化されたことに注意してください。それ以外の場合、この文字クラスは入力文字列の先頭にのみ一致します)。|  
  
 置換文字列 (Visual Basic の`vbCrLf + "$&"`、`"\n$&"` C#) は、一致する文字列の前に新しい行を追加します。 このC#例の `\n` は、 C#コンパイラによって改行文字として解釈されることに注意してください。正規表現の文字エスケープを表していません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="replacement" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startat" /> が 0 未満か、<paramref name="input" /> の長さを超えています。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <related type="Article" href="~/docs/standard/base-types/substitutions-in-regular-expressions.md">正規表現での置換</related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string input, string pattern, string replacement, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string input, string pattern, string replacement, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Replace (input As String, pattern As String, replacement As String, options As RegexOptions) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Replace(System::String ^ input, System::String ^ pattern, System::String ^ replacement, System::Text::RegularExpressions::RegexOptions options);" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * string * System.Text.RegularExpressions.RegexOptions -&gt; string" Usage="System.Text.RegularExpressions.Regex.Replace (input, pattern, replacement, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="replacement" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="replacement">置換する文字列。</param>
        <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
        <summary>指定した入力文字列内で指定した正規表現に一致するすべての文字列を、指定した置換文字列に置換します。 指定したオプションで、一致操作を変更します。</summary>
        <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 <paramref name="pattern" /> が現在のインスタンス内で一致しない場合、メソッドは現在のインスタンスを変更せずに返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 静的 `Replace` メソッドは、指定された正規表現パターンで <xref:System.Text.RegularExpressions.Regex> オブジェクトを構築し、インスタンスメソッド `Replace`を呼び出すことと同じです。  
  
 `pattern` パラメーターは、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。 正規表現の詳細については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。 `options` パラメーターに <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> を指定した場合、一致の検索は入力文字列の末尾から開始され、左に移動します。それ以外の場合は、入力文字列の先頭から検索が開始され、右に移動します。  
  
 `replacement` パラメーターは、`input`内の各一致文字列を置き換える文字列を指定します。 `replacement` は、リテラルテキストと[置換](~/docs/standard/base-types/substitutions-in-regular-expressions.md)の任意の組み合わせで構成できます。 たとえば、置換パターン `a*${test}b` は、文字列 "a *" に続けて、`test` のキャプチャグループ (存在する場合) と一致する部分文字列を挿入し、その後に文字列 "b" を続けます。 * 文字は、置換パターン内では、メタ文字として認識されません。  
  
> [!NOTE]
>  置換は、置換パターンで認識される唯一の正規表現言語要素です。 他のすべての正規表現言語要素 ([文字エスケープ](~/docs/standard/base-types/character-escapes-in-regular-expressions.md)を含む) は、正規表現パターンでのみ許可され、置換パターンでは認識されません。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外は、置換操作の実行時間が、メソッドが呼び出されたアプリケーションドメインに指定されたタイムアウト期間を超えた場合にスローされます。 アプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>場合は、例外はスローされません。  
  
 メソッドは、一致するものがない場合には変更せずに `input` 返すため、<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> メソッドを使用して、メソッドが入力文字列への置換を行ったかどうかを判断できます。  
  
   
  
## Examples  
 次の例では、<xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> メソッドを使用して、UNC パスのローカルコンピューターとドライブ名をローカルファイルパスに置き換えます。 この正規表現では、<xref:System.Environment.MachineName%2A?displayProperty=nameWithType> プロパティを使用してローカルコンピューターの名前を指定し、<xref:System.Environment.GetLogicalDrives%2A?displayProperty=nameWithType> メソッドを使用して論理ドライブの名前を含めます。 すべての正規表現文字列比較では、大文字と小文字は区別されません。 例を正しく実行するには、リテラル文字列 "MyMachine" をローカルコンピューター名に置き換える必要があります。  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace4.cs" interactive="try-dotnet" id="Snippet4":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace4.vb" id="Snippet4":::
  
 正規表現パターンは、次の式によって定義されます。  
  
 `"\\\\" + Environment.MachineName + "(?:\.\w+)*\\([" + driveNames + "])\$"`  
  
 次の表に、正規表現パターンがどのように解釈されるかを示します。  
  
|Pattern|説明|  
|-------------|-----------------|  
|`\\\\`|2つの連続する円記号 (`\`) 文字と一致します。 バックスラッシュ文字はエスケープ文字として解釈されるため、各円記号は別の円記号でエスケープする必要があります。|  
|`+ Environment.MachineName +`|<xref:System.Environment.MachineName%2A?displayProperty=nameWithType> プロパティによって返された文字列と一致します。|  
|`(?:\.\w+)*`|ピリオド (`.`) 文字の後に1個以上の単語文字が続くパターンと一致します。 この一致は、0回以上発生する可能性があります。 一致した部分式はキャプチャされません。|  
|`\\`|円記号 (`\`) 文字と一致します。|  
|`([" + driveNames + "])`|個々のドライブ文字で構成される文字クラスと一致します。 この一致は最初にキャプチャされた部分式です。|  
|`\$`|リテラルドル記号 (`$`) 文字と一致します。|  
  
 置換パターンは、一致した文字列全体を最初にキャプチャされた部分式と置き換え `$1` ます。 つまり、UNC コンピューターとドライブ名はドライブ文字で置き換えられます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" />、<paramref name="pattern" />、または <paramref name="replacement" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage"><para>このメソッドは、呼び出されたアプリケーションドメインの既定のタイムアウト値と同じ間隔の後にタイムアウトします。 タイムアウト値がアプリケーションドメインに対して定義されていない場合は、メソッドがタイムアウトしないように <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />値が使用されます。 パターンマッチを置き換えるために推奨される静的メソッドは <see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />です。これにより、タイムアウト間隔を設定できます。</para></block>
        <altmember cref="T:System.Text.RegularExpressions.RegexOptions" />
        <related type="Article" href="~/docs/standard/base-types/substitutions-in-regular-expressions.md">正規表現での置換</related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string input, string pattern, System.Text.RegularExpressions.MatchEvaluator evaluator, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string input, string pattern, class System.Text.RegularExpressions.MatchEvaluator evaluator, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Replace (input As String, pattern As String, evaluator As MatchEvaluator, options As RegexOptions) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Replace(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::MatchEvaluator ^ evaluator, System::Text::RegularExpressions::RegexOptions options);" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * System.Text.RegularExpressions.MatchEvaluator * System.Text.RegularExpressions.RegexOptions -&gt; string" Usage="System.Text.RegularExpressions.Regex.Replace (input, pattern, evaluator, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="evaluator" Type="System.Text.RegularExpressions.MatchEvaluator" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="evaluator">各一致文字列を調べ、元の一致文字列または置換文字列のどちらかを返すカスタム メソッド。</param>
        <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
        <summary>指定した入力文字列内で、指定した正規表現に一致するすべての文字列を <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートによって返される文字列に置き換えます。 指定したオプションで、一致操作を変更します。</summary>
        <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 <paramref name="pattern" /> が現在のインスタンス内で一致しない場合、メソッドは現在のインスタンスを変更せずに返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType> メソッドは、次の条件のいずれかに該当する場合に、で正規表現の一致を置き換える場合に便利です。  
  
-   置換文字列は、正規表現の置換パターンで簡単に指定することはできません。  
  
-   置換文字列は、一致した文字列に対して何らかの処理が行われた結果になります。  
  
-   置換文字列は、条件付き処理の結果として返されます。  
  
 メソッドは、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType> メソッドを呼び出し、返された <xref:System.Text.RegularExpressions.MatchCollection> コレクション内の各 <xref:System.Text.RegularExpressions.Match> オブジェクトを `evaluator` デリゲートに渡すことと同じです。  
  
 `pattern` パラメーターは、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。 正規表現の詳細については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。  
  
 `evaluator` パラメーターは、定義したカスタムメソッドのデリゲートであり、それぞれの一致を調べます。 カスタムメソッドは、<xref:System.Text.RegularExpressions.MatchEvaluator> デリゲートと一致させるために次のシグネチャを持っている必要があります。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  
   
 カスタムメソッドは、一致した入力を置き換える文字列を返します。  
  
 `options` パラメーターに <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> を指定した場合、一致の検索は入力文字列の末尾から開始され、左に移動します。それ以外の場合は、入力文字列の先頭から検索が開始され、右に移動します。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外は、置換操作の実行時間が、メソッドが呼び出されたアプリケーションドメインに指定されたタイムアウト期間を超えた場合にスローされます。 アプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>場合は、例外はスローされません。  
  
 メソッドは、一致するものがない場合には変更せずに `input` 返すため、<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> メソッドを使用して、メソッドが入力文字列への置換を行ったかどうかを判断できます。  
  
   
  
## Examples  
 次の例では、正規表現を使用して文字列から個々の単語を抽出し、<xref:System.Text.RegularExpressions.MatchEvaluator> デリゲートを使用して、単語内の個々の文字をスクランブルする `WordScramble` という名前のメソッドを呼び出します。 これを行うために、`WordScramble` メソッドは、一致する文字を含む配列を作成します。 また、ランダムな浮動小数点数を設定する並列配列も作成します。 配列は <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType> メソッドを呼び出すことによって並べ替えられ、並べ替えられた配列は <xref:System.String> クラスコンストラクターへの引数として提供されます。 この新しく作成された文字列は、`WordScramble` メソッドによって返されます。 正規表現パターン `\w+` は、1個以上の単語文字と一致します。正規表現エンジンは、空白文字など、単語以外の文字が見つかるまで、一致に文字を追加し続けます。 <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29> メソッドの呼び出しには、正規表現エンジンによって正規表現パターン `\w+  # Matches all the characters in a word.` のコメントが無視されるように <xref:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace?displayProperty=nameWithType> オプションが含まれています。  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace6.cs" interactive="try-dotnet" id="Snippet10":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace6.vb" id="Snippet10"::: 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" />、<paramref name="pattern" />、または <paramref name="evaluator" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <altmember cref="T:System.Text.RegularExpressions.MatchEvaluator" />
        <altmember cref="T:System.Text.RegularExpressions.RegexOptions" />
        <related type="Article" href="~/docs/standard/base-types/substitutions-in-regular-expressions.md">正規表現での置換</related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string input, System.Text.RegularExpressions.MatchEvaluator evaluator, int count, int startat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string input, class System.Text.RegularExpressions.MatchEvaluator evaluator, int32 count, int32 startat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (input As String, evaluator As MatchEvaluator, count As Integer, startat As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ input, System::Text::RegularExpressions::MatchEvaluator ^ evaluator, int count, int startat);" />
      <MemberSignature Language="F#" Value="member this.Replace : string * System.Text.RegularExpressions.MatchEvaluator * int * int -&gt; string" Usage="regex.Replace (input, evaluator, count, startat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="evaluator" Type="System.Text.RegularExpressions.MatchEvaluator" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="startat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="evaluator">各一致文字列を調べ、元の一致文字列または置換文字列のどちらかを返すカスタム メソッド。</param>
        <param name="count">置換を実行する最大回数。</param>
        <param name="startat">入力文字列中で検索を開始する文字位置。</param>
        <summary>指定した入力部分文字列内で正規表現パターンに一致する文字列を、指定した最大回数だけ、<see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートによって返される文字列に置き換えます。</summary>
        <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 正規表現パターンが現在のインスタンスで一致しない場合、このメソッドは現在のインスタンスをそのまま返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> メソッドは、次の条件のいずれかに該当する場合に正規表現の一致を置き換える場合に便利です。  
  
-   置換文字列は、正規表現の置換パターンで簡単に指定することはできません。  
  
-   置換文字列は、一致した文字列に対して何らかの処理が行われた結果になります。  
  
-   置換文字列は、条件付き処理の結果として返されます。  
  
 メソッドは、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> メソッドを呼び出し、返された <xref:System.Text.RegularExpressions.MatchCollection> コレクション内の最初の `count`<xref:System.Text.RegularExpressions.Match> オブジェクトを `evaluator` デリゲートに渡すことと同じです。  
  
 正規表現は、現在の <xref:System.Text.RegularExpressions.Regex> オブジェクトのコンストラクターによって定義されたパターンです。  
  
 `evaluator` パラメーターは、定義したカスタムメソッドのデリゲートであり、それぞれの一致を調べます。 カスタムメソッドは、<xref:System.Text.RegularExpressions.MatchEvaluator> デリゲートと一致させるために次のシグネチャを持っている必要があります。  
 
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  
   
 カスタムメソッドは、一致した入力を置き換える文字列を返します。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外は、置換操作の実行時間が、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> コンストラクターによって指定されたタイムアウト時間を超えた場合にスローされます。 コンストラクターを呼び出すときにタイムアウト間隔を設定しなかった場合、この例外は、<xref:System.Text.RegularExpressions.Regex> オブジェクトが作成されたアプリケーションドメインに対して設定されたタイムアウト値を操作が超えた場合にスローされます。 <xref:System.Text.RegularExpressions.Regex> コンストラクター呼び出しまたはアプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>場合、例外はスローされません。  
  
 メソッドは、一致するものがない場合には変更せずに `input` 返すため、<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> メソッドを使用して、メソッドが入力文字列への置換を行ったかどうかを判断できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="evaluator" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startat" /> が 0 未満か、<paramref name="input" /> の長さを超えています。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <altmember cref="T:System.Text.RegularExpressions.MatchEvaluator" />
        <related type="Article" href="~/docs/standard/base-types/substitutions-in-regular-expressions.md">正規表現での置換</related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string input, string pattern, string replacement, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string input, string pattern, string replacement, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Replace (input As String, pattern As String, replacement As String, options As RegexOptions, matchTimeout As TimeSpan) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Replace(System::String ^ input, System::String ^ pattern, System::String ^ replacement, System::Text::RegularExpressions::RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * string * System.Text.RegularExpressions.RegexOptions * TimeSpan -&gt; string" Usage="System.Text.RegularExpressions.Regex.Replace (input, pattern, replacement, options, matchTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="pattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="replacement" Type="System.String" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" Index="4" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="replacement">置換する文字列。</param>
        <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
        <param name="matchTimeout">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
        <summary>指定した入力文字列内で指定した正規表現に一致するすべての文字列を、指定した置換文字列に置換します。 追加のパラメーターでは、一致が見つからない場合に一致操作とタイムアウト間隔を変更するオプションを指定します。</summary>
        <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 <paramref name="pattern" /> が現在のインスタンス内で一致しない場合、メソッドは現在のインスタンスを変更せずに返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 静的 `Replace` メソッドは、指定された正規表現パターンで <xref:System.Text.RegularExpressions.Regex> オブジェクトを構築し、インスタンスメソッド `Replace`を呼び出すことと同じです。  
  
 `pattern` パラメーターは、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。 正規表現の詳細については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。 `options` パラメーターに <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> を指定した場合、一致の検索は入力文字列の末尾から開始され、左に移動します。それ以外の場合は、入力文字列の先頭から検索が開始され、右に移動します。  
  
 `replacement` パラメーターは、`input`内の各一致文字列を置き換える文字列を指定します。 `replacement` は、リテラルテキストと[置換](~/docs/standard/base-types/substitutions-in-regular-expressions.md)の任意の組み合わせで構成できます。 たとえば、置換パターン `a*${test}b` は、文字列 "a *" に続けて、`test` のキャプチャグループ (存在する場合) と一致する部分文字列を挿入し、その後に文字列 "b" を続けます。 * 文字は、置換パターン内では、メタ文字として認識されません。  
  
> [!NOTE]
>  置換は、置換パターンで認識される唯一の正規表現言語要素です。 他のすべての正規表現言語要素 ([文字エスケープ](~/docs/standard/base-types/character-escapes-in-regular-expressions.md)を含む) は、正規表現パターンでのみ許可され、置換パターンでは認識されません。  
  
 `matchTimeout` パラメーターは、パターン一致メソッドがタイムアウトする前に一致を検索する期間を指定します。タイムアウト間隔を設定すると、過度なバックトラッキングに依存している正規表現が、ほぼ一致する入力を処理するときに応答を停止することを防ぎます。 詳細については、「正規表現と[バックトラッキング](~/docs/standard/base-types/backtracking-in-regular-expressions.md)[のベストプラクティス](~/docs/standard/base-types/best-practices.md)」を参照してください。 この期間内に一致するものが見つからない場合、メソッドは <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外をスローします。 `matchTimeout` は、メソッドを実行するアプリケーションドメインに対して定義されている既定のタイムアウト値をオーバーライドします。  
  
 メソッドは、一致するものがない場合には変更せずに `input` 返すため、<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> メソッドを使用して、メソッドが入力文字列への置換を行ったかどうかを判断できます。  
  
   
  
## Examples  
 次の例では、<xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> メソッドを使用して、UNC パスのローカルコンピューターとドライブ名をローカルファイルパスに置き換えます。 この正規表現では、<xref:System.Environment.MachineName%2A?displayProperty=nameWithType> プロパティを使用してローカルコンピューターの名前を含め、<xref:System.Environment.GetLogicalDrives%2A?displayProperty=nameWithType> メソッドを使用して論理ドライブの名前を含めます。 すべての正規表現文字列比較では大文字と小文字が区別されず、0.5 秒で一致するものが見つからない場合は、1回の置換操作がタイムアウトになります。 例を正しく実行するには、リテラル文字列 "MyMachine" をローカルコンピューター名に置き換える必要があります。  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace12.cs" interactive="try-dotnet" id="Snippet12":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace12.vb" id="Snippet12"::: 
  
 正規表現パターンは、次の式によって定義されます。  
  
 `"\\\\" + Environment.MachineName + "(?:\.\w+)*\\([" + driveNames + "])\$"`  
  
 次の表に、正規表現パターンがどのように解釈されるかを示します。  
  
|Pattern|説明|  
|-------------|-----------------|  
|`\\\\`|2つの連続する円記号 (`\`) 文字と一致します。 バックスラッシュ文字はエスケープ文字として解釈されるため、各円記号は別の円記号でエスケープする必要があります。|  
|`+ Environment.MachineName +`|<xref:System.Environment.MachineName%2A?displayProperty=nameWithType> プロパティによって返された文字列と一致します。|  
|`(?:\.\w+)*`|ピリオド (`.`) 文字の後に1個以上の単語文字が続くパターンと一致します。 この一致は、0回以上発生する可能性があります。 一致した部分式はキャプチャされません。|  
|`\\`|円記号 (`\`) 文字と一致します。|  
|`([" + driveNames + "])`|個々のドライブ文字で構成される文字クラスと一致します。 この一致は最初にキャプチャされた部分式です。|  
|`\$`|リテラルドル記号 (`$`) 文字と一致します。|  
  
 置換パターンは、一致した文字列全体を最初にキャプチャされた部分式と置き換え `$1` ます。 つまり、UNC コンピューターとドライブ名はドライブ文字で置き換えられます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" />、<paramref name="pattern" />、または <paramref name="replacement" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。  
  
または 
 <paramref name="matchTimeout" /> が負の値か、0 か、または約 24 日を超えています。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage"><para><paramref name="matchTimeout" /> パラメーターには、2秒などの適切な値を設定することをお勧めします。 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />を指定してタイムアウトを無効にすると、正規表現エンジンのパフォーマンスが若干向上します。 ただし、次の条件下でのみタイムアウトを無効にする必要があります。 
-正規表現によって処理される入力が既知の信頼できるソースから派生した場合、または静的なテキストで構成されている場合。 これにより、ユーザーが動的に入力したテキストは除外されます。  
  
-正規表現パターンが完全にテストされ、一致、一致しない、および近い一致を効率的に処理できるようになった場合。  
  
-正規表現パターンに、ほぼ一致を処理するときに過度なバックトラッキングを発生させることがわかっている言語要素が含まれていない場合。</para></block>
        <altmember cref="T:System.Text.RegularExpressions.RegexOptions" />
        <related type="Article" href="~/docs/standard/base-types/substitutions-in-regular-expressions.md">正規表現での置換</related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
        <related type="Article" href="~/docs/standard/base-types/backtracking-in-regular-expressions.md">正規表現におけるバックトラッキング</related>
        <related type="Article" href="~/docs/standard/base-types/best-practices.md">.NET の正規表現に関するベスト プラクティス</related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string input, string pattern, System.Text.RegularExpressions.MatchEvaluator evaluator, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string input, string pattern, class System.Text.RegularExpressions.MatchEvaluator evaluator, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Replace (input As String, pattern As String, evaluator As MatchEvaluator, options As RegexOptions, matchTimeout As TimeSpan) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Replace(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::MatchEvaluator ^ evaluator, System::Text::RegularExpressions::RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * System.Text.RegularExpressions.MatchEvaluator * System.Text.RegularExpressions.RegexOptions * TimeSpan -&gt; string" Usage="System.Text.RegularExpressions.Regex.Replace (input, pattern, evaluator, options, matchTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="pattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="evaluator" Type="System.Text.RegularExpressions.MatchEvaluator" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" Index="4" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="evaluator">各一致文字列を調べ、元の一致文字列または置換文字列のどちらかを返すカスタム メソッド。</param>
        <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
        <param name="matchTimeout">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
        <summary>指定した入力文字列内で、指定した正規表現に一致するすべての部分文字列を、<see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートによって返される文字列に置き換えます。 追加のパラメーターでは、一致が見つからない場合に一致操作とタイムアウト間隔を変更するオプションを指定します。</summary>
        <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 <paramref name="pattern" /> が現在のインスタンス内で一致しない場合、メソッドは現在のインスタンスを変更せずに返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType> メソッドは、次の条件のいずれかに該当する場合に正規表現の一致を置き換える場合に便利です。  
  
-   置換文字列を正規表現置換パターンで簡単に指定できない場合は。  
  
-   置換文字列が、一致した文字列に対して実行された処理の結果である場合は。  
  
-   置換文字列が条件付き処理によって生成される場合は。  
  
 メソッドは、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType> メソッドを呼び出し、返された <xref:System.Text.RegularExpressions.MatchCollection> コレクション内の各 <xref:System.Text.RegularExpressions.Match> オブジェクトを `evaluator` デリゲートに渡すことと同じです。  
  
 `pattern` パラメーターは、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。 正規表現の詳細については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。  
  
 `evaluator` パラメーターは、定義したカスタムメソッドのデリゲートであり、それぞれの一致を調べます。 カスタムメソッドは、<xref:System.Text.RegularExpressions.MatchEvaluator> デリゲートと一致させるために次のシグネチャを持っている必要があります。  
 
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  
   
 カスタムメソッドは、一致した入力を置き換える文字列を返します。  
  
 `options` パラメーターに <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> を指定した場合、一致の検索は入力文字列の末尾から開始され、左に移動します。それ以外の場合は、入力文字列の先頭から検索が開始され、右に移動します。  
  
 `matchTimeout` パラメーターは、パターン一致メソッドがタイムアウトする前に一致を検索する期間を指定します。タイムアウト間隔を設定すると、過度なバックトラッキングに依存している正規表現は、"近い一致を含む入力を処理するときに応答を停止します。" になります。 詳細については、「正規表現と[バックトラッキング](~/docs/standard/base-types/backtracking-in-regular-expressions.md)[のベストプラクティス](~/docs/standard/base-types/best-practices.md)」を参照してください。 この期間内に一致するものが見つからない場合、メソッドは <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外をスローします。 `matchTimeout` は、メソッドを実行するアプリケーションドメインに対して定義されている既定のタイムアウト値をオーバーライドします。  
  
 メソッドは、一致するものがない場合には変更せずに `input` 返すため、<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> メソッドを使用して、メソッドが入力文字列への置換を行ったかどうかを判断できます。  
  
   
  
## Examples  
 次の例では、正規表現を使用して文字列から個々の単語を抽出し、<xref:System.Text.RegularExpressions.MatchEvaluator> デリゲートを使用して、単語内の個々の文字をスクランブルする `WordScramble` という名前のメソッドを呼び出します。 これを行うために、`WordScramble` メソッドは、一致する文字を含む配列を作成します。 また、ランダムな浮動小数点数を設定する並列配列も作成します。 配列は <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType> メソッドを呼び出すことによって並べ替えられ、並べ替えられた配列は <xref:System.String> クラスコンストラクターへの引数として提供されます。 この新しく作成された文字列は、`WordScramble` メソッドによって返されます。 正規表現パターン `\w+` は、1個以上の単語文字と一致します。正規表現エンジンは、空白文字など、単語以外の文字が見つかるまで、一致に文字を追加し続けます。 <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29> メソッドの呼び出しには、正規表現エンジンによって正規表現パターン `\w+  # Matches all the characters in a word.` のコメントが無視されるように <xref:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace?displayProperty=nameWithType> オプションが含まれています。  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace13.cs" interactive="try-dotnet" id="Snippet13":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace13.vb" id="Snippet13"::: 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" />、<paramref name="pattern" />、または <paramref name="evaluator" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。  
  
または 
 <paramref name="matchTimeout" /> が負の値か、0 か、または約 24 日を超えています。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage"><para><paramref name="matchTimeout" /> パラメーターには、2秒などの適切な値を設定することをお勧めします。 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />を指定してタイムアウトを無効にすると、正規表現エンジンのパフォーマンスが若干向上します。 ただし、次の条件下でのみタイムアウトを無効にする必要があります。 
-正規表現によって処理される入力が既知の信頼できるソースから派生した場合、または静的なテキストで構成されている場合。 これにより、ユーザーが動的に入力したテキストは除外されます。  
  
-正規表現パターンが完全にテストされ、一致、一致しない、および近い一致を効率的に処理できるようになった場合。  
  
-正規表現パターンに、ほぼ一致を処理するときに過度なバックトラッキングを発生させることがわかっている言語要素が含まれていない場合。</para></block>
        <altmember cref="T:System.Text.RegularExpressions.RegexOptions" />
        <related type="Article" href="~/docs/standard/base-types/substitutions-in-regular-expressions.md">正規表現での置換</related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
        <related type="Article" href="~/docs/standard/base-types/backtracking-in-regular-expressions.md">正規表現におけるバックトラッキング</related>
        <related type="Article" href="~/docs/standard/base-types/best-practices.md">.NET の正規表現に関するベスト プラクティス</related>
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public bool RightToLeft { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Regex.RightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RightToLeft As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RightToLeft { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.RightToLeft : bool" Usage="System.Text.RegularExpressions.Regex.RightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>正規表現が右から左の方向に検索するかどうかを示す値を取得します。</summary>
        <value>正規表現が右から左の方向に検索する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex> インスタンスが <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> オプションを使用して作成された場合、<xref:System.Text.RegularExpressions.Regex.RightToLeft%2A> は `true` ます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="roptions">
      <MemberSignature Language="C#" Value="protected internal System.Text.RegularExpressions.RegexOptions roptions;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly valuetype System.Text.RegularExpressions.RegexOptions roptions" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.roptions" />
      <MemberSignature Language="VB.NET" Value="Protected Friend roptions As RegexOptions " />
      <MemberSignature Language="C++ CLI" Value="protected public: System::Text::RegularExpressions::RegexOptions roptions;" />
      <MemberSignature Language="F#" Value="val mutable roptions : System.Text.RegularExpressions.RegexOptions" Usage="System.Text.RegularExpressions.Regex.roptions" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.RegexOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Split">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>正規表現との一致によって定義された位置で、入力文字列をサブ文字列の配列に分割します。</summary>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Split(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (input As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(System::String ^ input);" />
      <MemberSignature Language="F#" Value="member this.Split : string -&gt; string[]" Usage="regex.Split input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">分割する文字列。</param>
        <summary><see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターで指定された正規表現パターンによって定義されている位置で入力文字列を分割し、部分文字列の配列に格納します。</summary>
        <returns>文字列の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> メソッドは、<xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType> メソッドに似ていますが、<xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> は、文字セットではなく正規表現によって決定された区切り記号で文字列を分割する点が異なります。 文字列は、できるだけ多くの回数だけ分割されます。 区切り記号が見つからない場合、戻り値には、元の入力文字列を値として持つ1つの要素が含まれます。  
  
 複数の一致が互いに隣接している場合は、空の文字列が配列に挿入されます。 たとえば、1つのハイフンに文字列を分割すると、次のコードに示すように、返された配列には隣接する2つのハイフンが見つかった位置に空の文字列が含まれます。  
 
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split1.vb" id="Snippet1"::: 
  
 入力文字列の先頭または末尾に一致が見つかった場合は、返された配列の先頭または末尾に空の文字列が含まれます。 次の例では、正規表現パターン `\d+` を使用して、入力文字列を数値文字で分割しています。 文字列の先頭と末尾が一致する数字で終わるため、返された配列の最初の要素と最後の要素の値は <xref:System.String.Empty?displayProperty=nameWithType>ます。  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split21.cs" interactive="try-dotnet" id="Snippet21":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split21.vb" id="Snippet21"::: 
  
 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> 式でのキャプチャのかっこが使用されている場合、キャプチャされたテキストは結果の文字列の配列に含まれます。 たとえば、キャプチャするかっこ内に配置されたハイフンで文字列 "plum" を分割した場合、返される配列にはハイフンを含む文字列要素が含まれます。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split2.cs" interactive="try-dotnet" id="Snippet2":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split2.vb" id="Snippet2":::
  
 ただし、正規表現パターンに複数のキャプチャかっこのセットが含まれている場合、このメソッドの動作は .NET Framework のバージョンによって異なります。 .NET Framework 1.0 および1.1 では、キャプチャのかっこの最初のセット内に一致が見つからない場合、キャプチャされた追加のかっこからキャプチャされたテキストは、返される配列には含まれません。 .NET Framework 2.0 以降では、キャプチャされたすべてのテキストも返された配列に追加されます。 たとえば、次のコードでは、2組のキャプチャかっこを使用して、日付の区切り文字を含む日付の要素を日付文字列から抽出しています。 キャプチャかっこの最初のセットはハイフンをキャプチャし、2番目のセットはスラッシュをキャプチャします。 コード例をコンパイルして .NET Framework 1.0 または1.1 の下で実行すると、スラッシュ文字は除外されます。コンパイルされ、.NET Framework 2.0 以降のバージョンで実行される場合は、それが含まれます。  
 
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split3.cs" interactive="try-dotnet" id="Snippet3":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split3.vb" id="Snippet3"::: 
  
 正規表現が空の文字列と一致する場合、<xref:System.Text.RegularExpressions.Regex.Split%28System.String%29> は文字列を1文字の文字列の配列に分割します。これは、すべての場所で空の文字列の区切り記号が見つかるためです。 次に例を示します。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split11.cs" interactive="try-dotnet" id="Snippet11":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split11.vb" id="Snippet11"::: 
  
 返された配列には、配列の先頭と末尾に空の文字列も含まれていることに注意してください。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外は、分割操作の実行時間が、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> コンストラクターによって指定されたタイムアウト期間を超えた場合にスローされます。 コンストラクターを呼び出すときにタイムアウト間隔を設定しなかった場合、この例外は、<xref:System.Text.RegularExpressions.Regex> オブジェクトが作成されたアプリケーションドメインに対して設定されたタイムアウト値を操作が超えた場合にスローされます。 <xref:System.Text.RegularExpressions.Regex> コンストラクター呼び出しまたはアプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>場合、例外はスローされません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string input, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string input, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (input As String, count As Integer) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(System::String ^ input, int count);" />
      <MemberSignature Language="F#" Value="member this.Split : string * int -&gt; string[]" Usage="regex.Split (input, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">分割対象の文字列。</param>
        <param name="count">分割を実行する最大回数。</param>
        <summary><see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターで指定された正規表現で定義されている位置で、入力文字列を指定されている最大回数だけ分割し、部分文字列の配列に格納します。</summary>
        <returns>文字列の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> メソッドは、<xref:System.String.Split%2A?displayProperty=nameWithType> メソッドに似ていますが、<xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> は、文字セットではなく正規表現によって決定された区切り記号で文字列を分割する点が異なります。 `count` パラメーターは、`input` 文字列を分割できる部分文字列の最大数を指定します。最後の文字列には、文字列の残りの解除が含まれます。 `count` 値が0の場合は、可能な限り数だけ分割する既定の動作が提供されます。  
  
 複数の一致が互いに隣接している場合、または `input`の先頭または末尾で一致が検出され、見つかった一致の数が少なくとも 2 `count`未満の場合は、空の文字列が配列に挿入されます。 つまり、入力文字列の先頭または末尾にある隣接する一致または一致からの結果として返される空の文字列は、一致した部分文字列の数が `count`と等しいかどうかを判断するためにカウントされます。 次の例では、正規表現 `/d+` を使用して、1個以上の10進数を含む入力文字列を最大3つの部分文字列に分割します。 入力文字列の先頭が正規表現パターンに一致するため、最初の配列要素には <xref:System.String.Empty?displayProperty=nameWithType>が含まれ、2番目の配列要素には入力文字列内のアルファベットの最初の文字セットが含まれ、3番目の要素には、3番目の一致後の文字列の残りの部分が含まれます。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split25.cs" interactive="try-dotnet" id="Snippet25":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split25.vb" id="Snippet25":::  
  
 正規表現でのキャプチャのかっこを使用する場合、キャプチャされたテキストは分割文字列の配列に含まれます。 ただし、キャプチャしたテキストを含む配列要素は、一致した数が `count`に達したかどうかを判断するためにカウントされません。 たとえば、文字列 "apricot-plum" を最大4つの部分文字列に分割すると、次のコードに示すように、7要素の配列が生成されます。  
 
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split4.cs" interactive="try-dotnet" id="Snippet4":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split4.vb" id="Snippet4":::
  
 ただし、正規表現パターンに複数のキャプチャかっこのセットが含まれている場合、このメソッドの動作は .NET Framework のバージョンによって異なります。 .NET Framework 1.0 および1.1 では、キャプチャされた最初のかっこのセットからキャプチャされたテキストだけが、返された配列に含まれます。 .NET Framework 2.0 以降では、キャプチャされたすべてのテキストが返された配列に追加されます。 ただし、キャプチャされたテキストを含む、返された配列内の要素は、一致した部分文字列の数が `count`と等しいかどうかを判断するためにカウントされません。 たとえば、次のコードでは、正規表現は2セットのキャプチャかっこを使用して、日付文字列から日付の要素を抽出します。 キャプチャかっこの最初のセットはハイフンをキャプチャし、2番目のセットはスラッシュをキャプチャします。 <xref:System.Text.RegularExpressions.Regex.Split%28System.String%2CSystem.Int32%29> メソッドを呼び出すと、返される配列に最大2つの要素が指定されます。 コード例がコンパイルされ、.NET Framework 1.0 または1.1 の下で実行される場合、メソッドは2要素の文字列配列を返します。 コンパイルされ、.NET Framework 2.0 以降のバージョンで実行される場合、メソッドは3要素の文字列配列を返します。  
 
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split5.cs" interactive="try-dotnet" id="Snippet5":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split5.vb" id="Snippet5":::
  
 正規表現が空の文字列と一致する場合、<xref:System.Text.RegularExpressions.Regex.Split%28System.String%2CSystem.Int32%29> は文字列を1文字の文字列の配列に分割します。これは、すべての場所で空の文字列の区切り記号が見つかるためです。 次の例では、入力文字列に含まれるのと同じ数の要素に文字列 "characters" を分割します。 Null 文字列は入力文字列の先頭に一致するので、返された配列の先頭に null 文字列が挿入されます。 これにより、10番目の要素は入力文字列の末尾にある2つの文字で構成されます。  
  
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split12.vb" id="Snippet12":::  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外は、分割操作の実行時間が、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> コンストラクターによって指定されたタイムアウト期間を超えた場合にスローされます。 コンストラクターを呼び出すときにタイムアウト間隔を設定しなかった場合、この例外は、<xref:System.Text.RegularExpressions.Regex> オブジェクトが作成されたアプリケーションドメインに対して設定されたタイムアウト値を操作が超えた場合にスローされます。 <xref:System.Text.RegularExpressions.Regex> コンストラクター呼び出しまたはアプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>場合、例外はスローされません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string input, string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] Split(string input, string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Split (input As String, pattern As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ Split(System::String ^ input, System::String ^ pattern);" />
      <MemberSignature Language="F#" Value="static member Split : string * string -&gt; string[]" Usage="System.Text.RegularExpressions.Regex.Split (input, pattern)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">分割する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <summary>正規表現パターンによって定義されている位置で、入力文字列を部分文字列の配列に分割します。</summary>
        <returns>文字列の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> メソッドは、<xref:System.String.Split%2A?displayProperty=nameWithType> メソッドに似ていますが、<xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> は、文字セットではなく正規表現によって決定された区切り記号で文字列を分割する点が異なります。 `input` 文字列は、できるだけ多くの回数だけ分割されます。 `pattern` が `input` 文字列に見つからない場合、戻り値には、元の `input` 文字列を値とする1つの要素が含まれます。  
  
 `pattern` パラメーターは、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。 正規表現の詳細については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。  
  
> [!IMPORTANT]
>  静的 <xref:System.Text.RegularExpressions.Regex.Split%2A> メソッドの呼び出しで使用されるコンパイル済みの正規表現は、自動的にキャッシュされます。 コンパイルされた正規表現の有効期間を自分で管理するには、インスタンス <xref:System.Text.RegularExpressions.Regex.Split%2A> メソッドを使用します。  
  
 複数の一致が互いに隣接している場合は、空の文字列が配列に挿入されます。 たとえば、1つのハイフンに文字列を分割すると、次のコードに示すように、返された配列には隣接する2つのハイフンが見つかった位置に空の文字列が含まれます。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split8.cs" interactive="try-dotnet" id="Snippet8":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split8.vb" id="Snippet8":::  
  
 入力文字列の先頭または末尾に一致が見つかった場合は、返された配列の先頭または末尾に空の文字列が含まれます。 次の例では、正規表現パターン `\d+` を使用して、入力文字列を数値文字で分割しています。 文字列の先頭と末尾が一致する数字で終わるため、返された配列の最初の要素と最後の要素の値は <xref:System.String.Empty?displayProperty=nameWithType>ます。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split22.cs" interactive="try-dotnet" id="Snippet22":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split22.vb" id="Snippet22"::: 
  
 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> 式でのキャプチャのかっこが使用されている場合、キャプチャされたテキストは結果の文字列の配列に含まれます。 たとえば、キャプチャするかっこ内に配置されたハイフンで文字列 "plum" を分割した場合、返される配列にはハイフンを含む文字列要素が含まれます。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split9.cs" interactive="try-dotnet" id="Snippet9":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split9.vb" id="Snippet9":::
  
 ただし、正規表現パターンに複数のキャプチャかっこのセットが含まれている場合、このメソッドの動作は .NET Framework のバージョンによって異なります。 .NET Framework 1.0 および1.1 では、キャプチャのかっこの最初のセット内に一致が見つからない場合、キャプチャされた追加のかっこからキャプチャされたテキストは、返される配列には含まれません。 .NET Framework 2.0 以降では、キャプチャされたすべてのテキストも返された配列に追加されます。 たとえば、次のコードでは、2組のキャプチャかっこを使用して、日付の区切り文字を含む日付の要素を日付文字列から抽出しています。 キャプチャかっこの最初のセットはハイフンをキャプチャし、2番目のセットはスラッシュをキャプチャします。 コード例をコンパイルして .NET Framework 1.0 または1.1 の下で実行すると、スラッシュ文字は除外されます。コンパイルされ、.NET Framework 2.0 以降のバージョンで実行される場合は、それが含まれます。  
 
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split10.cs" interactive="try-dotnet" id="Snippet10":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split10.vb" id="Snippet10":::
  
 正規表現が空の文字列と一致する場合、<xref:System.Text.RegularExpressions.Regex.Split%2A> は文字列を1文字の文字列の配列に分割します。これは、すべての場所で空の文字列の区切り記号が見つかるためです。 次に例を示します。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split13.cs" interactive="try-dotnet" id="Snippet13":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split13.vb" id="Snippet13":::
  
 返された配列には、配列の先頭と末尾に空の文字列も含まれていることに注意してください。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外は、分割操作の実行時間が、メソッドが呼び出されたアプリケーションドメインに指定されたタイムアウト期間を超えた場合にスローされます。 アプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>場合は、例外はスローされません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage"><para>このメソッドは、メソッドが呼び出されたアプリケーションドメインの既定のタイムアウト値と同じ間隔の後にタイムアウトします。 タイムアウト値がアプリケーションドメインに対して定義されていない場合は、メソッドがタイムアウトしないように <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />値が使用されます。 パターン一致でテキストを分割するために推奨される静的な方法は <see cref="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />です。これにより、タイムアウト間隔を設定できます。</para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string input, int count, int startat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string input, int32 count, int32 startat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (input As String, count As Integer, startat As Integer) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(System::String ^ input, int count, int startat);" />
      <MemberSignature Language="F#" Value="member this.Split : string * int * int -&gt; string[]" Usage="regex.Split (input, count, startat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="startat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">分割対象の文字列。</param>
        <param name="count">分割を実行する最大回数。</param>
        <param name="startat">入力文字列中で検索を開始する文字位置。</param>
        <summary><see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターで指定された正規表現で定義されている位置で、入力文字列を指定されている最大回数だけ分割し、部分文字列の配列に格納します。 正規表現パターンの検索は、入力文字列の指定した文字位置から開始します。</summary>
        <returns>文字列の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> メソッドは、<xref:System.String.Split%2A?displayProperty=nameWithType> メソッドに似ていますが、<xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> は、文字セットではなく正規表現によって決定された区切り記号で文字列を分割する点が異なります。 `count` パラメーターは、`input` 文字列が分割される部分文字列の最大数を指定します。最後の文字列には、文字列の残りの解除が含まれます。 `count` 値が0の場合は、可能な限り数だけ分割する既定の動作が提供されます。 `startat` パラメーターは、最初の区切り記号の検索を開始するポイントを定義します (これは先頭の空白をスキップするために使用できます)。  
  
 文字列内の `count`+ 1 の位置から一致するものが見つからない場合、メソッドは、`input` 文字列を含む1要素の配列を返します。 1つ以上の一致が見つかった場合、返された配列の最初の要素には、最初の文字から一致する前の1文字までの文字列の最初の部分が含まれます。  
  
 複数の一致が互いに隣接していて、見つかった一致の数が少なくとも 2 `count`未満の場合は、空の文字列が配列に挿入されます。 同様に、文字列の最初の文字である `startat`で一致が見つかった場合、返された配列の最初の要素は空の文字列になります。 つまり、隣接する一致の結果として返される空の文字列は、一致した部分文字列の数が `count`と等しいかどうかを判断するためにカウントされます。 次の例では、正規表現 `\d+` を使用して、文字列内の数字の最初の部分文字列の開始位置を検索し、その位置から最大3回文字列を分割しています。 正規表現パターンは入力文字列の先頭に一致するので、返される文字列配列は、空の文字列、5文字のアルファベットの文字列、および文字列の残りの部分で構成されます。  
 
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split26.cs" interactive="try-dotnet" id="Snippet26":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split26.vb" id="Snippet26":::  
  
 正規表現でのキャプチャのかっこを使用する場合、キャプチャされたテキストは分割文字列の配列に含まれます。 ただし、キャプチャしたテキストを含む配列要素は、一致した数が `count`に達したかどうかを判断するためにカウントされません。 たとえば、文字列 ' "apricot-plum-ザクロ-ピーチ" を文字列の15文字目から最大4つの部分文字列に分割すると、次のコードに示すように、7つの要素から成る配列が生成されます。  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split6.cs" interactive="try-dotnet" id="Snippet6"::: 
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split6.vb" id="Snippet6"::: 
  
 ただし、正規表現パターンに複数のキャプチャかっこのセットが含まれている場合、このメソッドの動作は .NET Framework のバージョンによって異なります。 .NET Framework 1.0 および1.1 では、キャプチャのかっこの最初のセット内に一致が見つからない場合、キャプチャされた追加のかっこからキャプチャされたテキストは、返される配列には含まれません。 .NET Framework 2.0 以降では、キャプチャされたすべてのテキストも返された配列に追加されます。 たとえば、次のコードでは、2組のキャプチャかっこを使用して、文字列内の個々の単語を抽出しています。 キャプチャかっこの最初のセットはハイフンをキャプチャし、2番目のセットは縦棒をキャプチャします。 コード例がコンパイルされ、.NET Framework 1.0 または1.1 の下で実行されている場合は、垂直バー文字が除外されます。コンパイルされ、.NET Framework 2.0 以降のバージョンで実行される場合は、それが含まれます。  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split7.cs" interactive="try-dotnet" id="Snippet7":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split7.vb" id="Snippet7"::: 
  
 正規表現が空の文字列と一致する場合、<xref:System.Text.RegularExpressions.Regex.Split%2A> は文字列を1文字の文字列の配列に分割します。これは、すべての場所で空の文字列の区切り記号が見つかるためです。 次の例では、文字列 "characters" を入力文字列に含まれる数の要素に分割し、文字 "a" から始めます。 Null 文字列は入力文字列の末尾に一致するので、返された配列の末尾に null 文字列が挿入されます。  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split14.cs" interactive="try-dotnet" id="Snippet14":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split14.vb" id="Snippet14"::: 
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外は、分割操作の実行時間が、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> コンストラクターによって指定されたタイムアウト期間を超えた場合にスローされます。 コンストラクターを呼び出すときにタイムアウト間隔を設定しなかった場合、この例外は、<xref:System.Text.RegularExpressions.Regex> オブジェクトが作成されたアプリケーションドメインに対して設定されたタイムアウト値を操作が超えた場合にスローされます。 <xref:System.Text.RegularExpressions.Regex> コンストラクター呼び出しまたはアプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>場合、例外はスローされません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startat" /> が 0 未満か、<paramref name="input" /> の長さを超えています。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string input, string pattern, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] Split(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Split (input As String, pattern As String, options As RegexOptions) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ Split(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options);" />
      <MemberSignature Language="F#" Value="static member Split : string * string * System.Text.RegularExpressions.RegexOptions -&gt; string[]" Usage="System.Text.RegularExpressions.Regex.Split (input, pattern, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="input">分割する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
        <summary>指定された正規表現パターンによって定義されている位置で、入力文字列を部分文字列の配列に分割します。 指定したオプションで、一致操作を変更します。</summary>
        <returns>文字列の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> メソッドは、<xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType> メソッドに似ていますが、<xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> は、文字セットではなく正規表現によって決定された区切り記号で文字列を分割する点が異なります。 文字列は、できるだけ多くの回数だけ分割されます。 区切り記号が見つからない場合、戻り値には、元の `input` 文字列を値として持つ1つの要素が含まれます。  
  
 `pattern` パラメーターは、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。 正規表現の詳細については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。  
  
> [!IMPORTANT]
>  静的 <xref:System.Text.RegularExpressions.Regex.Split%2A> メソッドの呼び出しで使用されるコンパイル済みの正規表現は、自動的にキャッシュされます。 コンパイルされた正規表現の有効期間を自分で管理するには、インスタンス <xref:System.Text.RegularExpressions.Regex.Split%2A> メソッドを使用します。  
  
 複数の一致が互いに隣接している場合は、空の文字列が配列に挿入されます。 たとえば、1つのハイフンに文字列を分割すると、返される配列には、隣接する2つのハイフンが見つかる位置に空の文字列が含まれます。  
  
 入力文字列の先頭または末尾に一致が見つかった場合は、返された配列の先頭または末尾に空の文字列が含まれます。 次の例では、正規表現パターン `[a-z]+` を使用して、大文字または小文字のアルファベット文字で入力文字列を分割します。 文字列の先頭と末尾が一致するアルファベット文字であるため、返された配列の最初の要素と最後の要素の値は <xref:System.String.Empty?displayProperty=nameWithType>ます。  
 
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split24.cs" interactive="try-dotnet" id="Snippet24":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split24.vb" id="Snippet24"::: 
  
 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> 式でのキャプチャのかっこが使用されている場合、キャプチャされたテキストは結果の文字列の配列に含まれます。 たとえば、キャプチャするかっこ内に配置されたハイフンで文字列 "plum" を分割した場合、返される配列にはハイフンを含む文字列要素が含まれます。  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split9.cs" interactive="try-dotnet" id="Snippet9":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split9.vb" id="Snippet9"::: 
  
 ただし、正規表現パターンに複数のキャプチャかっこのセットが含まれている場合、このメソッドの動作は .NET Framework のバージョンによって異なります。 .NET Framework 1.0 および1.1 では、キャプチャのかっこの最初のセット内に一致が見つからない場合、キャプチャされた追加のかっこからキャプチャされたテキストは、返される配列には含まれません。 .NET Framework 2.0 以降では、キャプチャされたすべてのテキストも返された配列に追加されます。 たとえば、次のコードでは、2組のキャプチャかっこを使用して、日付の区切り文字を含む日付の要素を日付文字列から抽出しています。 キャプチャかっこの最初のセットはハイフンをキャプチャし、2番目のセットはスラッシュをキャプチャします。 コード例をコンパイルして .NET Framework 1.0 または1.1 の下で実行すると、スラッシュ文字は除外されます。コンパイルされ、.NET Framework 2.0 以降のバージョンで実行される場合は、それが含まれます。  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split10.cs" interactive="try-dotnet" id="Snippet10":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split10.vb" id="Snippet10":::  
  
 正規表現が空の文字列と一致する場合、<xref:System.Text.RegularExpressions.Regex.Split%2A> は文字列を1文字の文字列の配列に分割します。これは、すべての場所で空の文字列の区切り記号が見つかるためです。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外は、分割操作の実行時間が、メソッドが呼び出されたアプリケーションドメインに指定されたタイムアウト期間を超えた場合にスローされます。 アプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>場合は、例外はスローされません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage"><para>このメソッドは、メソッドが呼び出されたアプリケーションドメインの既定のタイムアウト値と同じ間隔の後にタイムアウトします。 タイムアウト値がアプリケーションドメインに対して定義されていない場合は、メソッドがタイムアウトしないように <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />値が使用されます。 パターン一致でテキストを分割するために推奨される静的な方法は <see cref="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />です。これにより、タイムアウト間隔を設定できます。</para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string input, string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] Split(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Split (input As String, pattern As String, options As RegexOptions, matchTimeout As TimeSpan) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ Split(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="F#" Value="static member Split : string * string * System.Text.RegularExpressions.RegexOptions * TimeSpan -&gt; string[]" Usage="System.Text.RegularExpressions.Regex.Split (input, pattern, options, matchTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="pattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="input">分割する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
        <param name="matchTimeout">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
        <summary>指定された正規表現パターンによって定義されている位置で、入力文字列を部分文字列の配列に分割します。 追加のパラメーターでは、一致が見つからない場合に一致操作とタイムアウト間隔を変更するオプションを指定します。</summary>
        <returns>文字列配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> メソッドは、<xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType> メソッドに似ていますが、<xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> は、文字セットではなく正規表現によって決定された区切り記号で文字列を分割する点が異なります。 文字列は、できるだけ多くの回数だけ分割されます。 区切り記号が見つからない場合、戻り値には、元の `input` 文字列を値として持つ1つの要素が含まれます。  
  
 `pattern` パラメーターは、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。 正規表現の詳細については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。  
  
> [!IMPORTANT]
>  静的 <xref:System.Text.RegularExpressions.Regex.Split%2A> メソッドの呼び出しで使用されるコンパイル済みの正規表現は、自動的にキャッシュされます。 コンパイルされた正規表現の有効期間を自分で管理するには、インスタンス <xref:System.Text.RegularExpressions.Regex.Split%2A> メソッドを使用します。  
  
 複数の一致が互いに隣接している場合は、空の文字列が配列に挿入されます。 たとえば、1つのハイフンに文字列を分割すると、返される配列には、隣接する2つのハイフンが見つかる位置に空の文字列が含まれます。  
  
 入力文字列の先頭または末尾に一致が見つかった場合は、返された配列の先頭または末尾に空の文字列が含まれます。 次の例では、正規表現パターン `[a-z]+` を使用して、大文字または小文字のアルファベット文字で入力文字列を分割します。 文字列の先頭と末尾が一致するアルファベット文字であるため、返された配列の最初の要素と最後の要素の値は <xref:System.String.Empty?displayProperty=nameWithType>ます。  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split23.cs" interactive="try-dotnet" id="Snippet23":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split23.vb" id="Snippet23":::
  
 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> 式でのキャプチャのかっこが使用されている場合、キャプチャされたテキストは結果の文字列の配列に含まれます。 たとえば、キャプチャするかっこ内に配置されたハイフンで文字列 "plum" を分割した場合、返される配列にはハイフンを含む文字列要素が含まれます。  
 
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split9.cs" interactive="try-dotnet" id="Snippet9":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split9.vb" id="Snippet9":::  
  
 ただし、正規表現パターンに複数のキャプチャかっこのセットが含まれている場合、このメソッドの動作は .NET Framework のバージョンによって異なります。 .NET Framework 1.0 および1.1 では、キャプチャのかっこの最初のセット内に一致が見つからない場合、キャプチャされた追加のかっこからキャプチャされたテキストは、返される配列には含まれません。 .NET Framework 2.0 以降では、キャプチャされたすべてのテキストも返された配列に追加されます。 たとえば、次のコードでは、2組のキャプチャかっこを使用して、日付の区切り文字を含む日付の要素を日付文字列から抽出しています。 キャプチャかっこの最初のセットはハイフンをキャプチャし、2番目のセットはスラッシュをキャプチャします。 コード例をコンパイルして .NET Framework 1.0 または1.1 の下で実行すると、スラッシュ文字は除外されます。コンパイルされ、.NET Framework 2.0 以降のバージョンで実行される場合は、それが含まれます。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split10.cs" interactive="try-dotnet" id="Snippet10":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split10.vb" id="Snippet10"::: 
  
 正規表現が空の文字列と一致する場合、<xref:System.Text.RegularExpressions.Regex.Split%2A> は文字列を1文字の文字列の配列に分割します。これは、すべての場所で空の文字列の区切り記号が見つかるためです。  
  
 `matchTimeout` パラメーターは、パターン一致メソッドがタイムアウトする前に一致を検索する期間を指定します。タイムアウト間隔を設定すると、過度なバックトラッキングに依存している正規表現が、ほぼ一致する入力を処理するときに応答を停止することを防ぎます。 詳細については、「正規表現と[バックトラッキング](~/docs/standard/base-types/backtracking-in-regular-expressions.md)[のベストプラクティス](~/docs/standard/base-types/best-practices.md)」を参照してください。 この期間内に一致するものが見つからない場合、メソッドは <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外をスローします。 `matchTimeout` は、メソッドを実行するアプリケーションドメインに対して定義されている既定のタイムアウト値をオーバーライドします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。  
  
または 
 <paramref name="matchTimeout" /> が負の値か、0 か、または約 24 日を超えています。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage"><para><paramref name="matchTimeout" /> パラメーターには、2秒などの適切な値を設定することをお勧めします。 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />を指定してタイムアウトを無効にすると、正規表現エンジンのパフォーマンスが若干向上します。 ただし、次の条件下でのみタイムアウトを無効にする必要があります。 
-正規表現によって処理される入力が既知の信頼できるソースから派生した場合、または静的なテキストで構成されている場合。 これにより、ユーザーが動的に入力したテキストは除外されます。  
  
-正規表現パターンが完全にテストされ、一致、一致しない、および近い一致を効率的に処理できるようになった場合。  
  
-正規表現パターンに、ほぼ一致を処理するときに過度なバックトラッキングを発生させることがわかっている言語要素が含まれていない場合。</para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo si, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (si As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ si, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberSignature Language="F#" Value="abstract member System.Runtime.Serialization.ISerializable.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.System.Runtime.Serialization.ISerializable.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="regex.System.Runtime.Serialization.ISerializable.GetObjectData (si, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="si" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="si">シリアル化情報が設定されるオブジェクト。</param>
        <param name="context">シリアル化データを格納および取得する場所。 このパラメーターは将来使用するために予約されています。</param>
        <summary><see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトに、現在の <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトの逆シリアル化に必要なデータを入力します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<xref:System.Runtime.Serialization.SerializationInfo> に含まれるオブジェクトは、フォーマッタによって自動的に追跡およびシリアル化されます。   
 <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> を呼び出すコードには、シリアル化サービスを提供するための <xref:System.Security.Permissions.SecurityPermission> が必要です。 <xref:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter?displayProperty=nameWithType> (関連する列挙体)   
 > [!NOTE] 
 >  シリアル化時、このメソッドが呼び出される回数は、各オブジェクト インスタンスにつき 1 回だけであるとは限りません。 したがって、呼び出しの回数に関係なく同じ動作が保たれるようにメソッドを実装する必要があります。   
 
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="regex.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see langword="Regex" /> コンストラクターに渡された正規表現パターンを返します。</summary>
        <returns><see langword="Regex" /> コンストラクターに渡された <paramref name="pattern" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `pattern` パラメーターは、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。 正規表現の詳細については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>
            <see cref="T:System.Text.RegularExpressions.Regex" /> は、<see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドによって作成された正規表現の基本クラスです。 これらのコンパイルされた正規表現は、基本クラスの <see cref="M:System.Text.RegularExpressions.Regex.ToString" /> 実装を使用します。 派生クラスから呼び出された場合、<see cref="M:System.Text.RegularExpressions.Regex.ToString" /> メソッドは、正規表現の定義に使用された <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> クラスコンストラクターの <paramref name="pattern" /> パラメーターに渡された文字列を返します。</para></block>
      </Docs>
    </Member>
    <Member MemberName="Unescape">
      <MemberSignature Language="C#" Value="public static string Unescape (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Unescape(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Unescape(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Unescape (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Unescape(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member Unescape : string -&gt; string" Usage="System.Text.RegularExpressions.Regex.Unescape str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">変換対象のテキストを含んでいる入力文字列。</param>
        <summary>入力文字列内に含まれるエスケープされた文字を変換します。</summary>
        <returns>エスケープされた文字を含む文字列を、エスケープされていない形式に変換したもの。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Unescape%2A> メソッドは、次の2つの変換のいずれかを実行します。  
  
-   メソッドによってエスケープされた各文字からエスケープ文字 ("\\") を削除することによって、<xref:System.Text.RegularExpressions.Regex.Escape%2A> メソッドによって実行される変換を反転します。 これには、\\、*、+、?、 &#124; 、{、[、(、)、^、$、.、#、および空白文字が含まれます。 さらに、<xref:System.Text.RegularExpressions.Regex.Unescape%2A> メソッドは、右角かっこ (]) と右中かっこ (}) の文字を unescapes します。  
  
> [!NOTE]
>  エスケープされた文字を正確に推測できないため、エスケープされた文字列を完全に反転することは <xref:System.Text.RegularExpressions.Regex.Unescape%2A> ません。  
  
-   逐語的文字列リテラルの16進数値を実際の印刷可能な文字に置き換えます。 たとえば、@"\x07" を "\a" に置き換えるか、"\n" に @"\x0A" します。 これは、\a、\b、\e、\n、\r、\f、\t、\ v、英数字など、サポートされているエスケープ文字に変換されます。
  
 <xref:System.Text.RegularExpressions.Regex.Unescape%2A> メソッドで、変換できない他のエスケープシーケンス (\w や \s など) が検出されると、<xref:System.ArgumentException>がスローされます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="str" /> には、認識されないエスケープ シーケンスが含まれています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="str" /> が <see langword="null" /> です。</exception>
        <altmember cref="M:System.Text.RegularExpressions.Regex.Escape(System.String)" />
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
      </Docs>
    </Member>
    <Member MemberName="UseOptionC">
      <MemberSignature Language="C#" Value="protected bool UseOptionC ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool UseOptionC() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.UseOptionC" />
      <MemberSignature Language="VB.NET" Value="Protected Function UseOptionC () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool UseOptionC();" />
      <MemberSignature Language="F#" Value="member this.UseOptionC : unit -&gt; bool" Usage="regex.UseOptionC " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
        <returns><see cref="P:System.Text.RegularExpressions.Regex.Options" /> プロパティに <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> オプションが含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseOptionR">
      <MemberSignature Language="C#" Value="protected internal bool UseOptionR ();" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance bool UseOptionR() cil managed" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.UseOptionR" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function UseOptionR () As Boolean" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; bool UseOptionR();" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="F#" Value="member this.UseOptionR : unit -&gt; bool" Usage="regex.UseOptionR " />
      <MemberSignature Language="C#" Value="protected bool UseOptionR ();" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool UseOptionR() cil managed" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Protected Function UseOptionR () As Boolean" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool UseOptionR();" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
        <returns><see cref="P:System.Text.RegularExpressions.Regex.Options" /> プロパティに <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" /> オプションが含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateMatchTimeout">
      <MemberSignature Language="C#" Value="protected internal static void ValidateMatchTimeout (TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblystatic hidebysig void ValidateMatchTimeout(valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.ValidateMatchTimeout(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared Sub ValidateMatchTimeout (matchTimeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; static void ValidateMatchTimeout(TimeSpan matchTimeout);" />
      <MemberSignature Language="F#" Value="static member ValidateMatchTimeout : TimeSpan -&gt; unit" Usage="System.Text.RegularExpressions.Regex.ValidateMatchTimeout matchTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matchTimeout" Type="System.TimeSpan" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="matchTimeout">チェックするタイムアウト間隔。</param>
        <summary>タイムアウト間隔が許容範囲内にあるかどうかを確認します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定のタイムアウトが有効範囲内にありません。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
