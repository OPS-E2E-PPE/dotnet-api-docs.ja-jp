<Type Name="MemoryFailPoint" FullName="System.Runtime.MemoryFailPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c1d1da247ada4b7f811a61b4e195c5d5ddf46ace" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83936069" /></Metadata><TypeSignature Language="C#" Value="public sealed class MemoryFailPoint : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MemoryFailPoint extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.IDisposable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.MemoryFailPoint" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MemoryFailPoint&#xA;Inherits CriticalFinalizerObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemoryFailPoint sealed : System::Runtime::ConstrainedExecution::CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="F#" Value="type MemoryFailPoint = class&#xA;    inherit CriticalFinalizerObject&#xA;    interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed MemoryFailPoint extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.IDisposable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="4b0ee-101">操作の実行前に十分なメモリ リソースがあることを確認します。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-101">Checks for sufficient memory resources before executing an operation.</span></span> <span data-ttu-id="4b0ee-102">このクラスは継承できません。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="4b0ee-103">このクラスは、高度な開発で使用することを目的としています。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-103">This class is intended for use in advanced development.</span></span>  
  
 <span data-ttu-id="4b0ee-104"><xref:System.Runtime.MemoryFailPoint> クラスのインスタンスを作成すると、メモリゲートが作成されます。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-104">Creating an instance of the <xref:System.Runtime.MemoryFailPoint> class creates a memory gate.</span></span> <span data-ttu-id="4b0ee-105">メモリゲートは、大量のメモリを必要とするアクティビティを開始する前に、十分なリソースがあるかどうかをチェックします。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-105">A memory gate checks for sufficient resources before initiating an activity that requires a large amount of memory.</span></span> <span data-ttu-id="4b0ee-106">チェックに失敗すると、<xref:System.InsufficientMemoryException> 例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-106">Failing the check results in an <xref:System.InsufficientMemoryException> exception being thrown.</span></span> <span data-ttu-id="4b0ee-107">この例外により、操作の開始が妨げられ、リソース不足による障害の可能性が減少します。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-107">This exception prevents an operation from being started and reduces the possibility of failure due to lack of resources.</span></span> <span data-ttu-id="4b0ee-108">これにより、<xref:System.OutOfMemoryException> の例外や、コード内の任意の場所での例外の不適切な処理によって発生する可能性のある状態の破損を回避するために、パフォーマンスを低下させることができます。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-108">This enables you decrease performance to avoid an <xref:System.OutOfMemoryException> exception and any state corruption that may result from improper handling of the exception in arbitrary locations in your code.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4b0ee-109">この型は <xref:System.IDisposable> インターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-109">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="4b0ee-110">型の使用が完了したら、直接的または間接的に型を破棄する必要があります。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-110">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="4b0ee-111">直接的に型を破棄するには、`try` / `catch` ブロック内で <xref:System.IDisposable.Dispose%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-111">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="4b0ee-112">間接的に型を破棄するには、`using` (C# の場合) または `Using` (Visual Basic 言語) などの言語構成要素を使用します。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-112">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="4b0ee-113">詳細については、<xref:System.IDisposable> インターフェイスに関するトピック内の「IDisposable を実装するオブジェクトの使用」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-113">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="4b0ee-114"><xref:System.InsufficientMemoryException> 例外をスローすることにより、アプリケーションは、操作を完了できないという見積もりと、アプリケーションの状態を破損している可能性のある部分的に完了した操作を区別できます。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-114">By throwing an <xref:System.InsufficientMemoryException> exception, an application can distinguish between an estimate that an operation will not be able to complete and  a partially completed operation that may have corrupted the application state.</span></span> <span data-ttu-id="4b0ee-115">これにより、アプリケーションでペシミスティックエスカレーションポリシーの頻度を下げることができます。そのためには、現在の <xref:System.AppDomain> のアンロードまたはプロセスのリサイクルが必要になることがあります。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-115">This allows an application to reduce the frequency of a pessimistic escalation policy, which may require unloading the current <xref:System.AppDomain> or recycling the process.</span></span>  
  
 <span data-ttu-id="4b0ee-116"><xref:System.Runtime.MemoryFailPoint> は、すべてのガベージコレクションヒープに十分なメモリと連続した仮想アドレス空間があるかどうかを確認します。これにより、スワップファイルのサイズが増加する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-116"><xref:System.Runtime.MemoryFailPoint> checks to see whether sufficient memory and consecutive virtual address space are available in all garbage collection heaps, and may increase the size of the swap file.</span></span>  <span data-ttu-id="4b0ee-117"><xref:System.Runtime.MemoryFailPoint> は、ゲートの有効期間中にメモリの長期的な可用性について保証しませんが、<xref:System.Runtime.MemoryFailPoint> に関連付けられているリソースが確実に解放されるように、呼び出し元は常に <xref:System.Runtime.MemoryFailPoint.Dispose%2A> メソッドを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-117"><xref:System.Runtime.MemoryFailPoint> makes no guarantees regarding the long-term availability of the memory during the lifetime of the gate, but callers should always use the <xref:System.Runtime.MemoryFailPoint.Dispose%2A> method to ensure that resources associated with <xref:System.Runtime.MemoryFailPoint> are released.</span></span>  
  
 <span data-ttu-id="4b0ee-118">メモリゲートを使用するには、<xref:System.Runtime.MemoryFailPoint> オブジェクトを作成し、次の操作が使用すると予想されるメモリのメガバイト (MB) の数を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-118">To use a memory gate, you must create a <xref:System.Runtime.MemoryFailPoint> object and specify the number of megabytes (MB) of memory that the next operation is expected to use.</span></span> <span data-ttu-id="4b0ee-119">十分なメモリが使用できない場合は、<xref:System.InsufficientMemoryException> 例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-119">If enough memory is not available, an <xref:System.InsufficientMemoryException> exception is thrown.</span></span>  
  
 <span data-ttu-id="4b0ee-120">コンストラクターのパラメーターは、正の整数である必要があります。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-120">The parameter of the constructor must be a positive integer.</span></span> <span data-ttu-id="4b0ee-121">負の値を指定すると、<xref:System.ArgumentOutOfRangeException> 例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-121">A negative value raises an <xref:System.ArgumentOutOfRangeException> exception.</span></span>  
  
 <span data-ttu-id="4b0ee-122"><xref:System.Runtime.MemoryFailPoint> は 16 MB の粒度で動作します。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-122"><xref:System.Runtime.MemoryFailPoint> operates at a granularity of 16 MB.</span></span> <span data-ttu-id="4b0ee-123">16 MB より小さい値は 16 MB として処理され、その他の値は 16 MB の次の最大倍数として扱われます。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-123">Any values smaller than 16 MB are treated as 16 MB, and other values are treated as the next largest multiple of 16 MB.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b0ee-124"><xref:System.Runtime.MemoryFailPoint> を使用すると、破損した状態でメモリ不足が発生するのを防ぐために、アプリケーションの処理速度が低下する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-124"><xref:System.Runtime.MemoryFailPoint> enables an application to slow itself to avoid running out of memory in a corrupting manner.</span></span>  <span data-ttu-id="4b0ee-125">構文のスコープ内で使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-125">It should be used within a lexical scope.</span></span>  <span data-ttu-id="4b0ee-126">次の例では、スレッドを起動して、作業キュー内の項目を処理します。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-126">The following example launches threads to process items in a work queue.</span></span>  <span data-ttu-id="4b0ee-127">各スレッドを起動する前に、<xref:System.Runtime.MemoryFailPoint>を使用して、使用可能なメモリリソースを確認します。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-127">Before each thread is launched, the available memory resources are checked using <xref:System.Runtime.MemoryFailPoint>.</span></span>  <span data-ttu-id="4b0ee-128">例外がスローされた場合、main メソッドは、次のスレッドを起動する前にメモリが使用可能になるまで待機します。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-128">If an exception is thrown, the main method waits until memory is available before launching the next thread.</span></span>  
  
 [!code-csharp[MemoryFailPoint#1](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MemoryFailPoint (int sizeInMegabytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 sizeInMegabytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sizeInMegabytes As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MemoryFailPoint(int sizeInMegabytes);" />
      <MemberSignature Language="F#" Value="new System.Runtime.MemoryFailPoint : int -&gt; System.Runtime.MemoryFailPoint" Usage="new System.Runtime.MemoryFailPoint sizeInMegabytes" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="sizeInMegabytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sizeInMegabytes"><span data-ttu-id="4b0ee-129">必要なメモリ サイズ (単位は MB)。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-129">The required memory size, in megabytes.</span></span> <span data-ttu-id="4b0ee-130">必ず正の値を指定します。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-130">This must be a positive value.</span></span></param>
        <summary><span data-ttu-id="4b0ee-131">正常に実行するために必要なメモリの量を指定して、<see cref="T:System.Runtime.MemoryFailPoint" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-131">Initializes a new instance of the <see cref="T:System.Runtime.MemoryFailPoint" /> class, specifying the amount of memory required for successful execution.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b0ee-132">作業項目を処理するためにアプリケーションによって使用されるメモリの量は、経験的によって決まります。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-132">The amount of memory used by your application to process a work item can be determined empirically.</span></span>  <span data-ttu-id="4b0ee-133">アプリケーションが要求を処理するために必要なメモリの量を見積もるには、<xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType> メソッドを使用して、作業項目を処理するメソッドを呼び出す前後に使用できるメモリの量を確認することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-133">To estimate the amount of memory your application needs to process a request, consider using the <xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType> method to determine the amount of memory available before and after calling the method that processes the work item.</span></span> <span data-ttu-id="4b0ee-134">`sizeInMegabytes` パラメーターの値を動的に決定するコード例については、<xref:System.Runtime.MemoryFailPoint> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-134">See the <xref:System.Runtime.MemoryFailPoint> class for a code example that dynamically determines the value for the `sizeInMegabytes` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b0ee-135">次の例は、実行時にメソッドが必要とするメモリの量を確認する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-135">The following example demonstrates how to determine the amount of memory a method requires when executing.</span></span> <span data-ttu-id="4b0ee-136">このコード例は、<xref:System.Runtime.MemoryFailPoint> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-136">This code example is part of a larger example provided for the <xref:System.Runtime.MemoryFailPoint> class.</span></span>  
  
 [!code-csharp[MemoryFailPoint#2](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="4b0ee-137">指定したメモリ サイズが負の値です。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-137">The specified memory size is negative.</span></span></exception>
        <exception cref="T:System.InsufficientMemoryException"><span data-ttu-id="4b0ee-138">ゲートによって保護されているコードの実行を開始するためのメモリが不足しています。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-138">There is insufficient memory to begin execution of the code protected by the gate.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="memoryFailPoint.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4b0ee-139"><see cref="T:System.Runtime.MemoryFailPoint" /> で使用されるすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-139">Releases all resources used by the <see cref="T:System.Runtime.MemoryFailPoint" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b0ee-140"><xref:System.Runtime.MemoryFailPoint> を使い終わったら、<xref:System.Runtime.MemoryFailPoint.Dispose%2A>を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-140">Call <xref:System.Runtime.MemoryFailPoint.Dispose%2A> when you are finished using the <xref:System.Runtime.MemoryFailPoint>.</span></span> <span data-ttu-id="4b0ee-141"><xref:System.Runtime.MemoryFailPoint.Dispose%2A>メソッドによって、<xref:System.Runtime.MemoryFailPoint> は使用不可の状態になります。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-141">The <xref:System.Runtime.MemoryFailPoint.Dispose%2A> method leaves the <xref:System.Runtime.MemoryFailPoint> in an unusable state.</span></span> <span data-ttu-id="4b0ee-142"><xref:System.Runtime.MemoryFailPoint>呼び出し後は、<xref:System.Runtime.MemoryFailPoint>によって占有されていたメモリをガベージ コレクターがクリアできるよう、<xref:System.Runtime.MemoryFailPoint> へのすべての参照を解放する必要があります。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-142">After calling <xref:System.Runtime.MemoryFailPoint>, you must release all references to the <xref:System.Runtime.MemoryFailPoint> so the garbage collector can reclaim the memory that the <xref:System.Runtime.MemoryFailPoint> was occupying.</span></span> <span data-ttu-id="4b0ee-143">詳細については、[アンマネージ リソースのクリーンアップ](/dotnet/standard/garbage-collection/unmanaged)および[Dispose メソッドの実装](/dotnet/standard/garbage-collection/implementing-dispose)を参照してください。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-143">For more information, see [Cleaning Up Unmanaged Resources](/dotnet/standard/garbage-collection/unmanaged) and [Implementing a Dispose Method](/dotnet/standard/garbage-collection/implementing-dispose).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4b0ee-144"><xref:System.Runtime.MemoryFailPoint.Dispose%2A> への最後の参照を解放する前に、必ず <xref:System.Runtime.MemoryFailPoint> を呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-144">Always call <xref:System.Runtime.MemoryFailPoint.Dispose%2A> before you release your last reference to the <xref:System.Runtime.MemoryFailPoint>.</span></span> <span data-ttu-id="4b0ee-145">そうしないと、ガベージ コレクターが <xref:System.Runtime.MemoryFailPoint> オブジェクトの `Finalize` メソッドを呼び出すまで、使用されているリソースは解放されません。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-145">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Runtime.MemoryFailPoint> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MemoryFailPoint ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MemoryFailPoint ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="memoryFailPoint.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4b0ee-146">ガベージ コレクターが <see cref="T:System.Runtime.MemoryFailPoint" /> を再利用しているときに、リソースが解放され、他のクリーンアップ操作が確実に実行されるようにします。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-146">Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see cref="T:System.Runtime.MemoryFailPoint" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b0ee-147">現在のオブジェクトを完了する準備が整うと、ガベージコレクターは <xref:System.Runtime.MemoryFailPoint.Finalize%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="4b0ee-147">The garbage collector calls the <xref:System.Runtime.MemoryFailPoint.Finalize%2A> method when the current object is ready to be finalized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
  </Members>
</Type>
