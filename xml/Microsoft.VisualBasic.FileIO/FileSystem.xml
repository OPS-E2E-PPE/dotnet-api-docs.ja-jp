<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileIO.FileSystem">
  <Metadata><Meta Name="ms.openlocfilehash" Value="718645f16f550f93c34bb96c4261b931017619dc" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75154488" /></Metadata><TypeSignature Language="C#" Value="public class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FileSystem extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileIO.FileSystem" />
  <TypeSignature Language="VB.NET" Value="Public Class FileSystem" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystem" />
  <TypeSignature Language="F#" Value="type FileSystem = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
    <AssemblyVersion>10.0.5.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>ドライブ、ファイル、ディレクトリを操作するためのプロパティとメソッドを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の表に、`My.Computer.FileSystem` オブジェクトに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|テキスト ファイルからの読み取り|[方法: テキスト ファイルからデータを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files.md)|  
|区切られたテキストファイルからの読み取り|[方法: コンマ区切りのテキスト ファイルを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|固定幅のテキストファイルからの読み取り|[方法: 固定幅のテキスト ファイルを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|複数の形式を持つテキストファイルからの読み取り|[方法: 複数の書式を持つテキスト ファイルを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
|バイナリ ファイルからの読み取り|[方法: バイナリ ファイルを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-binary-files.md)|  
|<xref:System.IO.StreamReader> のあるテキストファイルからの読み取り|[方法: StreamReader を使用してファイルからテキストを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md)|  
|テキスト ファイルへの書き込み|[方法: ファイルにテキストを書き込む](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md)|  
|テキストファイルに追加する|[方法: テキスト ファイルに追記する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-append-to-text-files.md)|  
|バイナリ ファイルへの書き込み|[方法: バイナリ ファイルに書き込む](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-to-binary-files.md)|  
|**マイドキュメント**ディレクトリ内のテキストファイルへの書き込み|[方法: My Documents ディレクトリのファイルにテキストを書き込む](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-in-the-my-documents-directory.md)|  
|`StreamWriter` を使用してテキストファイルに書き込む|[方法: StreamWriter を使用してファイルにテキストを書き込む](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md)|  
|特定のパターンを持つファイルをコピーする|[方法: 特定のパターンを持つファイルをディレクトリにコピーする](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-files-with-a-specific-pattern-to-a-directory.md)|  
|同じディレクトリにファイルをコピーする|[方法: ファイルのコピーを同じディレクトリに作成する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md)|  
|ファイルを別のディレクトリにコピーする|[方法: ファイルのコピーを別のディレクトリに作成する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md)|  
|ファイルの作成|[方法: ファイルを作成する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-file.md)|  
|ファイルの削除|[方法: ファイルを削除する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md)|  
|特定のパターンを持つファイルを検索する|[方法: 特定のパターンに一致するファイルを検索する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-files-with-a-specific-pattern.md)|  
|ファイルの移動|[方法: ファイルを移動する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-move-a-file.md)|  
|ファイルの名前を変更する|[方法: ファイルの名前を変更する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md)|  
|ディレクトリを別のディレクトリにコピーする|[方法: ディレクトリを別のディレクトリにコピーする](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md)|  
|ディレクトリの作成|[方法: ディレクトリを作成する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-directory.md)|  
|特定のパターンでサブディレクトリを検索する|[方法: 特定のパターンに一致するサブディレクトリを検索する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-subdirectories-with-a-specific-pattern.md)|  
|ディレクトリ内のファイルのコレクションを取得します。|[方法: ディレクトリにあるファイルのコレクションを取得する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md)|  
|**マイドキュメント**ディレクトリからの読み取り|[方法: My Documents ディレクトリの内容を取得する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-retrieve-the-contents-of-the-my-documents-directory.md)|  
|ファイルパスを解析する|[方法: ファイル パスを解析する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md)|  
  
   
  
## Examples  
 この例では、フォルダー `C:\backup\logs` 存在するかどうかを確認し、そのプロパティを確認します。  
  
 [!code-vb[VbVbcnMyFileSystem#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#23)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.VisualBasic.FileIO.SpecialDirectories" />
    <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">オブジェクト (Visual Basic)</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileSystem ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileSystem();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [オブジェクト (Visual Basic)](~/docs/visual-basic/language-reference/objects/index.md)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CombinePath">
      <MemberSignature Language="C#" Value="public static string CombinePath (string baseDirectory, string relativePath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string CombinePath(string baseDirectory, string relativePath) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.CombinePath(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CombinePath (baseDirectory As String, relativePath As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CombinePath(System::String ^ baseDirectory, System::String ^ relativePath);" />
      <MemberSignature Language="F#" Value="static member CombinePath : string * string -&gt; string" Usage="Microsoft.VisualBasic.FileIO.FileSystem.CombinePath (baseDirectory, relativePath)" />
      <MemberSignature Language="ILAsm" Value=".method public static string CombinePath(string baseDirectory, string relativePath) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseDirectory" Type="System.String" />
        <Parameter Name="relativePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="baseDirectory"><see langword="String" /> で初期化します。 結合する 1 つ目のパス。</param>
        <param name="relativePath"><see langword="String" /> で初期化します。 結合する 2 つ目のパス。</param>
        <summary>2 つのパスを結合し、適切な形式のパスを返します。</summary>
        <returns>指定されたパスの組み合わせ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、余分なスラッシュ記号をトリムして、適切に書式設定されたパスを作成します。  
  
 次の表に、`My.Computer.FileSystem.CombinePath` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|ディレクトリパスとファイル名を結合する|[方法: Visual Basic でファイルパスを解析する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md)|  
  
   
  
## Examples  
 この例では、ディレクトリパスとファイル名を組み合わせて、適切に書式設定されたパスを作成します。  
  
 [!code-vb[VbRefFile#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#3)]  
  
 この例では、2つのパスを結合して、適切に書式設定されたパスを作成します。  
  
 [!code-vb[VbRefFile#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#4)]  
  
 この例では `C:\Dir1\Dir2\Dir4\Dir5\File.txt`が返されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="baseDirectory" /> または <paramref name="relativePath" /> のパスの形式が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetParentPath(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyDirectory">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ディレクトリの内容を別のディレクトリにコピーします。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyDirectory">
      <MemberSignature Language="C#" Value="public static void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CopyDirectory (sourceDirectoryName As String, destinationDirectoryName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName);" />
      <MemberSignature Language="F#" Value="static member CopyDirectory : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory (sourceDirectoryName, destinationDirectoryName)" />
      <MemberSignature Language="ILAsm" Value=".method public static void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">コピーするディレクトリ。</param>
        <param name="destinationDirectoryName">ディレクトリの内容のコピー先の場所。</param>
        <summary>ディレクトリの内容を別のディレクトリにコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、ソースディレクトリの内容をターゲットディレクトリにコピーします。 ターゲットディレクトリが存在しない場合は、作成されます。 同じ名前のディレクトリがターゲットの場所に存在する場合、2つのディレクトリの内容がマージされます。 操作中に、ディレクトリに新しい名前を指定できます。  
  
 ディレクトリ内のファイルをコピーするときに、特定のファイルが原因で例外がスローされる場合があります。 このような例外がスローされると、`Data` プロパティが、ファイルまたはディレクトリのパスがキーで、特定の例外メッセージが対応する値に含まれている <xref:System.Collections.IDictionary> 形式のエントリを保持する1つの例外に統合されます。 `For…Each` を使用して、エントリを列挙します。  
  
 次の表に、`My.Computer.FileSystem.CopyDirectory` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|ディレクトリのコピー|[方法: Visual Basic 内の別のディレクトリにディレクトリをコピーする](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md)|  
  
   
  
## Examples  
 次の例では、ディレクトリ `TestDirectory1` の内容を `TestDirectory2`にコピーします。  
  
 [!code-vb[VbVbcnMyFileSystem#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#94)]  
  
 `C:\TestDirectory1` と `C:\TestDirectory2` を、コピーするディレクトリのパスと名前、およびコピー先の場所に置き換えます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\\\.\\ で始まっている) ことが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationDirectoryName" /> または <paramref name="sourceDirectoryName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">コピー元のディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">コピー元とコピー先のパスが同じです。</exception>
        <exception cref="T:System.InvalidOperationException">操作が巡回しています。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のフォルダー名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">コピー先のファイルは存在しますが、アクセスできません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="CopyDirectory">
      <MemberSignature Language="C#" Value="public static void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CopyDirectory (sourceDirectoryName As String, destinationDirectoryName As String, showUI As UIOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, Microsoft::VisualBasic::FileIO::UIOption showUI);" />
      <MemberSignature Language="F#" Value="static member CopyDirectory : string * string * Microsoft.VisualBasic.FileIO.UIOption -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory (sourceDirectoryName, destinationDirectoryName, showUI)" />
      <MemberSignature Language="ILAsm" Value=".method public static void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">コピーするディレクトリ。</param>
        <param name="destinationDirectoryName">ディレクトリの内容のコピー先の場所。</param>
        <param name="showUI">操作の進行状況を視覚的に追跡するかどうか。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
        <summary>ディレクトリの内容を別のディレクトリにコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、ソースディレクトリの内容をターゲットディレクトリにコピーします。 ターゲットディレクトリが存在しない場合は、作成されます。 同じ名前のディレクトリがターゲットの場所に存在する場合、2つのディレクトリの内容がマージされます。 操作中に、ディレクトリに新しい名前を指定できます。  
  
 ディレクトリ内のファイルをコピーするときに、特定のファイルが原因で例外がスローされる場合があります。 このような例外がスローされると、`Data` プロパティが、ファイルまたはディレクトリのパスがキーで、特定の例外メッセージが対応する値に含まれている <xref:System.Collections.IDictionary> 形式のエントリを保持する1つの例外に統合されます。 `For…Each` を使用して、エントリを列挙します。  
  
 次の表に、`My.Computer.FileSystem.CopyDirectory` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|ディレクトリのコピー|[方法: Visual Basic 内の別のディレクトリにディレクトリをコピーする](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md)|  
  
   
  
## Examples  
 次の例では、ディレクトリ `TestDirectory1` の内容を `TestDirectory2`にコピーして、進行状況のダイアログとエラーダイアログを表示します。  
  
 [!code-vb[VbVbcnMyFileSystem#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#92)]  
  
 `C:\TestDirectory1` と `C:\TestDirectory2` を、コピーするディレクトリのパスと名前、およびコピー先の場所に置き換えます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\\\.\\ で始まっている) ことが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationDirectoryName" /> または <paramref name="sourceDirectoryName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">コピー元のディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">コピー元とコピー先のパスが同じです。</exception>
        <exception cref="T:System.InvalidOperationException">操作が巡回しています。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のフォルダー名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">コピー先のファイルは存在しますが、アクセスできません。</exception>
        <exception cref="T:System.OperationCanceledException"><paramref name="ShowUI" /> が <see langword="UIOption.AllDialogs" /> に設定されている場合にユーザーが操作を取り消したか、ディレクトリ内の 1 つ以上のファイルをコピーできません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">ユーザーインターフェイスとクリップボードに関連するアクセス許可を制御します。 <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="CopyDirectory">
      <MemberSignature Language="C#" Value="public static void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, bool overwrite) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CopyDirectory (sourceDirectoryName As String, destinationDirectoryName As String, overwrite As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, bool overwrite);" />
      <MemberSignature Language="F#" Value="static member CopyDirectory : string * string * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory (sourceDirectoryName, destinationDirectoryName, overwrite)" />
      <MemberSignature Language="ILAsm" Value=".method public static void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, bool overwrite) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">コピーするディレクトリ。</param>
        <param name="destinationDirectoryName">ディレクトリの内容のコピー先の場所。</param>
        <param name="overwrite">既存のファイルを上書きする場合は <see langword="True" />。それ以外の場合は <see langword="False" />。 既定値は <see langword="False" /> です。</param>
        <summary>ディレクトリの内容を別のディレクトリにコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、ソースディレクトリの内容をターゲットディレクトリにコピーします。 ターゲットディレクトリが存在しない場合は、作成されます。 同じ名前のディレクトリがターゲットの場所に存在する場合、2つのディレクトリの内容がマージされます。 操作中に、ディレクトリに新しい名前を指定できます。  
  
 ディレクトリ内のファイルをコピーする場合、`overwrite` が `False`に設定されている間に、マージ中に存在するファイルなど、特定のファイルが原因で例外がスローされることがあります。 このような例外がスローされると、`Data` プロパティが、ファイルまたはディレクトリのパスがキーで、特定の例外メッセージが対応する値に含まれている <xref:System.Collections.IDictionary> 形式のエントリを保持する1つの例外に統合されます。 `For…Each` を使用して、エントリを列挙します。  
  
 次の表に、`My.Computer.FileSystem.CopyDirectory` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|ディレクトリのコピー|[方法: Visual Basic 内の別のディレクトリにディレクトリをコピーする](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md)|  
  
   
  
## Examples  
 次の例では、ディレクトリ `TestDirectory1` の内容を `TestDirectory2`にコピーし、既存のファイルを上書きします。  
  
 [!code-vb[VbVbcnMyFileSystem#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#49)]  
  
 `C:\TestDirectory1` と `C:\TestDirectory2` を、コピーするディレクトリのパスと名前、およびコピー先の場所に置き換えます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\\\.\\ で始まっている) ことが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationDirectoryName" /> または <paramref name="sourceDirectoryName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">コピー元のディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">コピー元とコピー先のパスが同じです。</exception>
        <exception cref="T:System.InvalidOperationException">操作が巡回しています。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のフォルダー名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">コピー先のファイルは存在しますが、アクセスできません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="CopyDirectory">
      <MemberSignature Language="C#" Value="public static void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CopyDirectory (sourceDirectoryName As String, destinationDirectoryName As String, showUI As UIOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="static member CopyDirectory : string * string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory (sourceDirectoryName, destinationDirectoryName, showUI, onUserCancel)" />
      <MemberSignature Language="ILAsm" Value=".method public static void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">コピーするディレクトリ。</param>
        <param name="destinationDirectoryName">ディレクトリの内容のコピー先の場所。</param>
        <param name="showUI">操作の進行状況を視覚的に追跡するかどうか。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
        <param name="onUserCancel">操作中にユーザーが **[キャンセル]** をクリックした場合の処理を指定します。 既定値は <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" /> です。</param>
        <summary>ディレクトリの内容を別のディレクトリにコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、ソースディレクトリの内容をターゲットディレクトリにコピーします。 ターゲットディレクトリが存在しない場合は、作成されます。 同じ名前のディレクトリがターゲットの場所に存在する場合、2つのディレクトリの内容がマージされます。 操作中に、ディレクトリに新しい名前を指定できます。  
  
 ディレクトリ内のファイルをコピーするときに、特定のファイルが原因で例外がスローされる場合があります。 このような例外がスローされると、`Data` プロパティが、ファイルまたはディレクトリのパスがキーで、特定の例外メッセージが対応する値に含まれている <xref:System.Collections.IDictionary> 形式のエントリを保持する1つの例外に統合されます。 `For…Each` を使用して、エントリを列挙します。  
  
 次の表に、`My.Computer.FileSystem.CopyDirectory` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|ディレクトリのコピー|[方法: Visual Basic 内の別のディレクトリにディレクトリをコピーする](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md)|  
  
   
  
## Examples  
 次の例では、ディレクトリ `TestDirectory1` の内容を `TestDirectory2`にコピーします。進行状況ダイアログとエラーダイアログが表示されます。操作中にユーザーが **[キャンセル]** をクリックしても、何も行われません。  
  
 [!code-vb[VbVbcnMyFileSystem#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#93)]  
  
 `C:\TestDirectory1` と `C:\TestDirectory2` を、コピーするディレクトリのパスと名前、およびコピー先の場所に置き換えます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\\\.\\ で始まっている) ことが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationDirectoryName" /> または <paramref name="sourceDirectoryName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">コピー元のディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">コピー元とコピー先のパスが同じです。</exception>
        <exception cref="T:System.InvalidOperationException">操作が巡回しています。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のフォルダー名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">コピー先のファイルは存在しますが、アクセスできません。</exception>
        <exception cref="T:System.OperationCanceledException"><paramref name="ShowUI" /> が <see langword="UIOption.AllDialogs" /> に設定されている場合にユーザーが操作を取り消したか、ディレクトリ内の 1 つ以上のファイルをコピーできません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">ユーザーインターフェイスとクリップボードに関連するアクセス許可を制御します。 <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyFile">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ファイルを新しい場所にコピーします。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyFile">
      <MemberSignature Language="C#" Value="public static void CopyFile (string sourceFileName, string destinationFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyFile(string sourceFileName, string destinationFileName) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CopyFile (sourceFileName As String, destinationFileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyFile(System::String ^ sourceFileName, System::String ^ destinationFileName);" />
      <MemberSignature Language="F#" Value="static member CopyFile : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.CopyFile (sourceFileName, destinationFileName)" />
      <MemberSignature Language="ILAsm" Value=".method public static void CopyFile(string sourceFileName, string destinationFileName) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">コピーするファイル。</param>
        <param name="destinationFileName">ファイルのコピー先となる場所。</param>
        <summary>ファイルを新しい場所にコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CopyFile` は、Ace (Access Control エントリ) を保持しません。 新しく作成されたファイルは、作成されたディレクトリから既定の Ace を継承します。  
  
 次の表に、`My.Computer.FileSystem.CopyFile` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|同じディレクトリにファイルをコピーします。|[方法: Visual Basic の同じディレクトリにファイルのコピーを作成する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md)|  
|ファイルを別のディレクトリにコピーします。|[方法: Visual Basic の別のディレクトリにファイルのコピーを作成する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md)|  
  
   
  
## Examples  
 この例では、既存のファイルを上書きせずに、ファイル `Test.txt` をディレクトリ `TestFiles2` にコピーします。  
  
 [!code-vb[VbRefFile#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#15)]  
  
 ファイルパスをコードで使用するパスに置き換えます。  
  
 この例では、ファイル `Test.txt` をディレクトリ `TestFiles2` にコピーし、`NewFile.txt`名前を変更します。  
  
 [!code-vb[VbRefFile#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#16)]  
  
 ファイルパスをコードで使用するパスに置き換えます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="destinationFileName" /> にパス情報が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationFileName" /> または <paramref name="sourceFileName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ソース ファイルが有効でないか、存在しません。</exception>
        <exception cref="T:System.IO.IOException">コピー先のディレクトリにある同じ名前のファイルが使用中です。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">すべての環境変数にアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">レジストリ変数へのアクセスを制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="CopyFile">
      <MemberSignature Language="C#" Value="public static void CopyFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CopyFile (sourceFileName As String, destinationFileName As String, showUI As UIOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyFile(System::String ^ sourceFileName, System::String ^ destinationFileName, Microsoft::VisualBasic::FileIO::UIOption showUI);" />
      <MemberSignature Language="F#" Value="static member CopyFile : string * string * Microsoft.VisualBasic.FileIO.UIOption -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.CopyFile (sourceFileName, destinationFileName, showUI)" />
      <MemberSignature Language="ILAsm" Value=".method public static void CopyFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">コピーするファイル。</param>
        <param name="destinationFileName">ファイルのコピー先となる場所。</param>
        <param name="showUI">操作の進行状況を視覚的に追跡するかどうか。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
        <summary>ファイルを新しい場所にコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CopyFile` は、Ace (Access Control エントリ) を保持しません。 新しく作成されたファイルは、作成されたディレクトリから既定の Ace を継承します。  
  
 次の表に、`My.Computer.FileSystem.CopyFile` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|同じディレクトリにファイルをコピーします。|[方法: Visual Basic の同じディレクトリにファイルのコピーを作成する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md)|  
|ファイルを別のディレクトリにコピーします。|[方法: Visual Basic の別のディレクトリにファイルのコピーを作成する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md)|  
  
   
  
## Examples  
 この例では、既存のファイルを上書きせずに、ファイル `Test.txt` をディレクトリ `TestFiles2` にコピーします。  
  
 [!code-vb[VbRefFile#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#15)]  
  
 ファイルパスをコードで使用するパスに置き換えます。  
  
 この例では、ファイル `Test.txt` をディレクトリ `TestFiles2` にコピーし、`NewFile.txt`名前を変更します。  
  
 [!code-vb[VbRefFile#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#16)]  
  
 ファイルパスをコードで使用するパスに置き換えます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="destinationFileName" /> にパス情報が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationFileName" /> または <paramref name="sourceFileName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ソース ファイルが有効でないか、存在しません。</exception>
        <exception cref="T:System.IO.IOException">移動先にファイルが既に存在し、<paramref name="overwrite" /> が <see langword="False" /> に設定されています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">すべての環境変数にアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">レジストリ変数へのアクセスを制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">ユーザーインターフェイスとクリップボードに関連するアクセス許可を制御します。 <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="CopyFile">
      <MemberSignature Language="C#" Value="public static void CopyFile (string sourceFileName, string destinationFileName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyFile(string sourceFileName, string destinationFileName, bool overwrite) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CopyFile (sourceFileName As String, destinationFileName As String, overwrite As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyFile(System::String ^ sourceFileName, System::String ^ destinationFileName, bool overwrite);" />
      <MemberSignature Language="F#" Value="static member CopyFile : string * string * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.CopyFile (sourceFileName, destinationFileName, overwrite)" />
      <MemberSignature Language="ILAsm" Value=".method public static void CopyFile(string sourceFileName, string destinationFileName, bool overwrite) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">コピーするファイル。</param>
        <param name="destinationFileName">ファイルのコピー先となる場所。</param>
        <param name="overwrite">既存のファイルを上書きする場合は <see langword="True" />。それ以外の場合は <see langword="False" />。 既定値は <see langword="False" /> です。</param>
        <summary>ファイルを新しい場所にコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CopyFile` は、Ace (Access Control エントリ) を保持しません。 新しく作成されたファイルは、作成されたディレクトリから既定の Ace を継承します。  
  
 次の表に、`My.Computer.FileSystem.CopyFile` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|同じディレクトリにファイルをコピーします。|[方法: Visual Basic の同じディレクトリにファイルのコピーを作成する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md)|  
|ファイルを別のディレクトリにコピーします。|[方法: Visual Basic の別のディレクトリにファイルのコピーを作成する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md)|  
  
   
  
## Examples  
 この例では、既存のファイルを上書きせずに、ファイル `Test.txt` をディレクトリ `TestFiles2` にコピーします。  
  
 [!code-vb[VbRefFile#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#15)]  
  
 ファイルパスをコードで使用するパスに置き換えます。  
  
 この例では、ファイル `Test.txt` をディレクトリ `TestFiles2` にコピーし、`NewFile.txt`名前を変更します。  
  
 [!code-vb[VbRefFile#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#16)]  
  
 ファイルパスをコードで使用するパスに置き換えます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="destinationFileName" /> にパス情報が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationFileName" /> または <paramref name="sourceFileName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ソース ファイルが有効でないか、存在しません。</exception>
        <exception cref="T:System.IO.IOException">移動先にファイルが既に存在し、<paramref name="overwrite" /> が <see langword="False" /> に設定されています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">すべての環境変数にアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">レジストリ変数へのアクセスを制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="CopyFile">
      <MemberSignature Language="C#" Value="public static void CopyFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CopyFile (sourceFileName As String, destinationFileName As String, showUI As UIOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyFile(System::String ^ sourceFileName, System::String ^ destinationFileName, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="static member CopyFile : string * string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.CopyFile (sourceFileName, destinationFileName, showUI, onUserCancel)" />
      <MemberSignature Language="ILAsm" Value=".method public static void CopyFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">コピーするファイル。</param>
        <param name="destinationFileName">ファイルのコピー先となる場所。</param>
        <param name="showUI">操作の進行状況を視覚的に追跡するかどうか。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
        <param name="onUserCancel">操作中にユーザーが **[キャンセル]** をクリックした場合の処理を指定します。 既定値は <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" /> です。</param>
        <summary>ファイルを新しい場所にコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CopyFile` は、Ace (Access Control エントリ) を保持しません。 新しく作成されたファイルは、作成されたディレクトリから既定の Ace を継承します。  
  
 次の表に、`My.Computer.FileSystem.CopyFile` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|同じディレクトリにファイルをコピーします。|[方法: Visual Basic の同じディレクトリにファイルのコピーを作成する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md)|  
|ファイルを別のディレクトリにコピーします。|[方法: Visual Basic の別のディレクトリにファイルのコピーを作成する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md)|  
  
   
  
## Examples  
 この例では、既存のファイルを上書きせずに、ファイル `Test.txt` をディレクトリ `TestFiles2` にコピーします。  
  
 [!code-vb[VbRefFile#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#15)]  
  
 ファイルパスをコードで使用するパスに置き換えます。  
  
 この例では、ファイル `Test.txt` をディレクトリ `TestFiles2` にコピーし、`NewFile.txt`名前を変更します。  
  
 [!code-vb[VbRefFile#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#16)]  
  
 ファイルパスをコードで使用するパスに置き換えます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="destinationFileName" /> にパス情報が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationFileName" /> または <paramref name="sourceFileName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ソース ファイルが有効でないか、存在しません。</exception>
        <exception cref="T:System.IO.IOException">移動先にファイルが既に存在し、<paramref name="overwrite" /> が <see langword="False" /> に設定されています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.OperationCanceledException"><paramref name="UICancelOption" /> が <see langword="ThrowException" /> に設定されている場合にユーザーが操作を取り消したか、不特定の I/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">すべての環境変数にアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">レジストリ変数へのアクセスを制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">ユーザーインターフェイスとクリップボードに関連するアクセス許可を制御します。 <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="CreateDirectory">
      <MemberSignature Language="C#" Value="public static void CreateDirectory (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateDirectory(string directory) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CreateDirectory (directory As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateDirectory(System::String ^ directory);" />
      <MemberSignature Language="F#" Value="static member CreateDirectory : string -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory directory" />
      <MemberSignature Language="ILAsm" Value=".method public static void CreateDirectory(string directory) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">ディレクトリの名前および場所。</param>
        <summary>ディレクトリを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ディレクトリが既にある場合、例外はスローされません。  
  
 次の表に、`My.Computer.FileSystem.CreateDirectory` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|ディレクトリの作成|[方法: Visual Basic でディレクトリを作成する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-directory.md)|  
  
   
  
## Examples  
 この例では、`C:\Documents and Settings\All Users\Documents`にディレクトリ `NewDirectory`を作成します。  
  
 [!code-vb[VbVbcnMyFileSystem#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">ディレクトリ名が不正な場合。 たとえば、無効な文字が含まれているか、空白のみであることが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.PathTooLongException">ディレクトリ名が長すぎます。</exception>
        <exception cref="T:System.NotSupportedException">ディレクトリ名にコロン (":") だけが指定されている場合</exception>
        <exception cref="T:System.IO.IOException">作成するディレクトリの親ディレクトリが読み取り専用です。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーがディレクトリを作成するためのアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="M:System.IO.Directory.CreateDirectory(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CurrentDirectory">
      <MemberSignature Language="C#" Value="public static string CurrentDirectory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string CurrentDirectory" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ CurrentDirectory { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDirectory : string with get, set" Usage="Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のディレクトリを取得または設定します。</summary>
        <value>ファイル I/O 操作の現在のディレクトリ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CurrentDirectory` は、システム全体の環境変数です。  
  
   
  
## Examples  
 この例では、現在のディレクトリが返され、メッセージボックスに表示されます。  
  
 [!code-vb[VbVbcnMyFileSystem#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#18)]  
  
 この例では、現在のディレクトリを `C:\TestDirectory`に設定します。  
  
 [!code-vb[VbVbcnMyFileSystem#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.DirectoryNotFoundException">パスが無効です。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteDirectory">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ディレクトリを削除します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteDirectory">
      <MemberSignature Language="C#" Value="public static void DeleteDirectory (string directory, Microsoft.VisualBasic.FileIO.DeleteDirectoryOption onDirectoryNotEmpty);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteDirectory(string directory, valuetype Microsoft.VisualBasic.FileIO.DeleteDirectoryOption onDirectoryNotEmpty) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.DeleteDirectoryOption)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DeleteDirectory (directory As String, onDirectoryNotEmpty As DeleteDirectoryOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DeleteDirectory(System::String ^ directory, Microsoft::VisualBasic::FileIO::DeleteDirectoryOption onDirectoryNotEmpty);" />
      <MemberSignature Language="F#" Value="static member DeleteDirectory : string * Microsoft.VisualBasic.FileIO.DeleteDirectoryOption -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory (directory, onDirectoryNotEmpty)" />
      <MemberSignature Language="ILAsm" Value=".method public static void DeleteDirectory(string directory, valuetype Microsoft.VisualBasic.FileIO.DeleteDirectoryOption onDirectoryNotEmpty) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="onDirectoryNotEmpty" Type="Microsoft.VisualBasic.FileIO.DeleteDirectoryOption" />
      </Parameters>
      <Docs>
        <param name="directory">削除するディレクトリ。</param>
        <param name="onDirectoryNotEmpty">削除対象のディレクトリ内にファイルまたはディレクトリが存在する場合の処理を指定します。 既定値は <see langword="DeleteDirectoryOption.DeleteAllContents" /> です。</param>
        <summary>ディレクトリを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 この例では、ディレクトリが空の場合にのみ、`OldDirectory` ディレクトリを削除します。  
  
 [!code-vb[VbVbcnMyFileSystem#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#56)]  
  
 この例では、ディレクトリ `OldDirectory` とそのすべての内容を削除します。  
  
 [!code-vb[VbVbcnMyFileSystem#57](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#57)]  
  
 この例では、ディレクトリ `OldDirectory` とそのすべての内容を削除し、ユーザーに削除の確認を求めますが、コンテンツは**ごみ箱**に送信しません。  
  
 [!code-vb[VbVbcnMyFileSystem#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#58)]  
  
 この例では、ディレクトリ `OldDirectory` とそのすべての内容を削除して**ごみ箱**に送信しますが、操作の進行状況は表示されません。  
  
 [!code-vb[VbVbcnMyFileSystem#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが長さ 0 の文字列であるか、形式に誤りがあるか、空白だけが含まれているか、または無効な文字 (ワイルドカード文字を含む) が含まれています。 パスがデバイス パスです (\\\\.\\ で始まる)。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">ディレクトリが存在しないか、ファイルが指定されています。</exception>
        <exception cref="T:System.IO.IOException">ディレクトリまたはサブディレクトリ内のファイルが使用中です。</exception>
        <exception cref="T:System.NotSupportedException">ディレクトリ名にコロン (:) が含まれています。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーに必要なアクセス許可がありません。</exception>
        <exception cref="T:System.OperationCanceledException">ユーザーが操作を取り消したか、ディレクトリを削除できませんでした。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.DeleteDirectoryOption" />
      </Docs>
    </Member>
    <Member MemberName="DeleteDirectory">
      <MemberSignature Language="C#" Value="public static void DeleteDirectory (string directory, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteDirectory(string directory, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DeleteDirectory (directory As String, showUI As UIOption, recycle As RecycleOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DeleteDirectory(System::String ^ directory, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::RecycleOption recycle);" />
      <MemberSignature Language="F#" Value="static member DeleteDirectory : string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.RecycleOption -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory (directory, showUI, recycle)" />
      <MemberSignature Language="ILAsm" Value=".method public static void DeleteDirectory(string directory, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="recycle" Type="Microsoft.VisualBasic.FileIO.RecycleOption" />
      </Parameters>
      <Docs>
        <param name="directory">削除するディレクトリ。</param>
        <param name="showUI">操作の進行状況を視覚的に追跡するかどうかを指定します。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
        <param name="recycle">削除したファイルを **[ごみ箱]** に送るかどうかを指定します。 既定値は <see langword="RecycleOption.DeletePermanently" /> です。</param>
        <summary>ディレクトリを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `showUI` パラメーターと `recycle` パラメーターは、Windows サービスなど、ユーザーが対話型でないアプリケーションではサポートされていません。  
  
   
  
## Examples  
 この例では、ディレクトリが空の場合にのみ、`OldDirectory` ディレクトリを削除します。  
  
 [!code-vb[VbVbcnMyFileSystem#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#56)]  
  
 この例では、ディレクトリ `OldDirectory` とそのすべての内容を削除します。  
  
 [!code-vb[VbVbcnMyFileSystem#57](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#57)]  
  
 この例では、ディレクトリ `OldDirectory` とそのすべての内容を削除し、ユーザーに削除の確認を求めますが、コンテンツは**ごみ箱**に送信しません。  
  
 [!code-vb[VbVbcnMyFileSystem#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#58)]  
  
 この例では、ディレクトリ `OldDirectory` とそのすべての内容を削除して**ごみ箱**に送信しますが、操作の進行状況は表示されません。  
  
 [!code-vb[VbVbcnMyFileSystem#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが長さ 0 の文字列であるか、形式に誤りがあるか、空白だけが含まれているか、または無効な文字 (ワイルドカード文字を含む) が含まれています。 パスがデバイス パスです (\\\\.\\ で始まる)。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">ディレクトリが存在しないか、ファイルが指定されています。</exception>
        <exception cref="T:System.IO.IOException">ディレクトリまたはサブディレクトリ内のファイルが使用中です。</exception>
        <exception cref="T:System.NotSupportedException">ディレクトリ名にコロン (:) が含まれています。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーに必要なアクセス許可がありません。</exception>
        <exception cref="T:System.OperationCanceledException">ユーザーが操作を取り消したか、ディレクトリを削除できませんでした。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">ユーザーインターフェイスとクリップボードに関連するアクセス許可を制御します。 <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.RecycleOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
      </Docs>
    </Member>
    <Member MemberName="DeleteDirectory">
      <MemberSignature Language="C#" Value="public static void DeleteDirectory (string directory, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteDirectory(string directory, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DeleteDirectory (directory As String, showUI As UIOption, recycle As RecycleOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DeleteDirectory(System::String ^ directory, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::RecycleOption recycle, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="static member DeleteDirectory : string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.RecycleOption * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory (directory, showUI, recycle, onUserCancel)" />
      <MemberSignature Language="ILAsm" Value=".method public static void DeleteDirectory(string directory, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="recycle" Type="Microsoft.VisualBasic.FileIO.RecycleOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="directory">削除するディレクトリ。</param>
        <param name="showUI">操作の進行状況を視覚的に追跡するかどうかを指定します。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
        <param name="recycle">削除したファイルを **[ごみ箱]** に送るかどうかを指定します。 既定値は <see langword="RecycleOption.DeletePermanently" /> です。</param>
        <param name="onUserCancel">ユーザーが **[キャンセル]** をクリックした場合に例外をスローするかどうかを指定します。</param>
        <summary>ディレクトリを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `showUI`、`recycle`、および `onUserCancel` の各パラメーターは、Windows サービスなど、ユーザーが対話型でないアプリケーションではサポートされていません。  
  
   
  
## Examples  
 この例では、ディレクトリが空の場合にのみ、`OldDirectory` ディレクトリを削除します。  
  
 [!code-vb[VbVbcnMyFileSystem#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#56)]  
  
 この例では、ディレクトリ `OldDirectory` とそのすべての内容を削除します。  
  
 [!code-vb[VbVbcnMyFileSystem#57](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#57)]  
  
 この例では、ディレクトリ `OldDirectory` とそのすべての内容を削除し、ユーザーに削除の確認を求めますが、コンテンツは**ごみ箱**に送信しません。  
  
 [!code-vb[VbVbcnMyFileSystem#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#58)]  
  
 この例では、ディレクトリ `OldDirectory` とそのすべての内容を削除して**ごみ箱**に送信しますが、操作の進行状況は表示されません。  
  
 [!code-vb[VbVbcnMyFileSystem#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが長さ 0 の文字列であるか、形式に誤りがあるか、空白だけが含まれているか、または無効な文字 (ワイルドカード文字を含む) が含まれています。 パスがデバイス パスです (\\\\.\\ で始まる)。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">ディレクトリが存在しないか、ファイルが指定されています。</exception>
        <exception cref="T:System.IO.IOException">ディレクトリまたはサブディレクトリ内のファイルが使用中です。</exception>
        <exception cref="T:System.NotSupportedException">ディレクトリ名にコロン (:) が含まれています。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーに必要なアクセス許可がありません。</exception>
        <exception cref="T:System.OperationCanceledException">ユーザーが操作を取り消したか、ディレクトリを削除できませんでした。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">ユーザーインターフェイスとクリップボードに関連するアクセス許可を制御します。 <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.RecycleOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteFile">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ファイルを削除します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteFile">
      <MemberSignature Language="C#" Value="public static void DeleteFile (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteFile(string file) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DeleteFile (file As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DeleteFile(System::String ^ file);" />
      <MemberSignature Language="F#" Value="static member DeleteFile : string -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile file" />
      <MemberSignature Language="ILAsm" Value=".method public static void DeleteFile(string file) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">削除対象のファイルの名前とパス。</param>
        <summary>ファイルを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の表に、`My.Computer.FileSystem.DeleteFile` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|ファイルを削除するには|[方法: Visual Basic でファイルを削除する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md)|  
  
   
  
## Examples  
 この例では、`Test.txt`ファイルを削除します。  
  
 [!code-vb[VbVbcnMyFileSystem#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#3)]  
  
 この例では、ファイル `Test.txt` を削除し、ファイルを削除するかどうかをユーザーが確認できるようにします。  
  
 [!code-vb[VbVbcnMyFileSystem#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#4)]  
  
 この例では、`Test.txt` ファイルを削除し、**ごみ箱**に送信します。  
  
 [!code-vb[VbVbcnMyFileSystem#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さ 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、ファイルを指定する必要がある場所の末尾にスラッシュが付いているか、またはパスがデバイス パスである (\\\\.\\ で始まっている) ことが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.IO.IOException">ファイルが使用中です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーがファイルの削除に必要なアクセス許可を保持していないか、ファイルが読み取り専用です。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName="DeleteFile">
      <MemberSignature Language="C#" Value="public static void DeleteFile (string file, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteFile(string file, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DeleteFile (file As String, showUI As UIOption, recycle As RecycleOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DeleteFile(System::String ^ file, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::RecycleOption recycle);" />
      <MemberSignature Language="F#" Value="static member DeleteFile : string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.RecycleOption -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile (file, showUI, recycle)" />
      <MemberSignature Language="ILAsm" Value=".method public static void DeleteFile(string file, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="recycle" Type="Microsoft.VisualBasic.FileIO.RecycleOption" />
      </Parameters>
      <Docs>
        <param name="file">削除対象のファイルの名前とパス。</param>
        <param name="showUI">操作の進行状況を視覚的に追跡するかどうか。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
        <param name="recycle">削除したファイルを **[ごみ箱]** に送るかどうかを指定します。 既定値は <see langword="RecycleOption.DeletePermanently" /> です。</param>
        <summary>ファイルを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `showUI` パラメーターと `recycle` パラメーターは、Windows サービスなど、ユーザーが対話型でないアプリケーションではサポートされていません。  
  
 次の表に、`My.Computer.FileSystem.DeleteFile` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|ファイルを削除するには|[方法: Visual Basic でファイルを削除する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md)|  
  
   
  
## Examples  
 この例では、`Test.txt`ファイルを削除します。  
  
 [!code-vb[VbVbcnMyFileSystem#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#3)]  
  
 この例では、ファイル `Test.txt` を削除し、ファイルを削除するかどうかをユーザーが確認できるようにします。  
  
 [!code-vb[VbVbcnMyFileSystem#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#4)]  
  
 この例では、`Test.txt` ファイルを削除し、**ごみ箱**に送信します。  
  
 [!code-vb[VbVbcnMyFileSystem#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さ 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、ファイルを指定する必要がある場所の末尾にスラッシュが付いているか、またはパスがデバイス パスである (\\\\.\\ で始まっている) ことが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.IO.IOException">ファイルが使用中です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーがファイルの削除に必要なアクセス許可を保持していないか、ファイルが読み取り専用です。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">ユーザーインターフェイスとクリップボードに関連するアクセス許可を制御します。 <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.RecycleOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
      </Docs>
    </Member>
    <Member MemberName="DeleteFile">
      <MemberSignature Language="C#" Value="public static void DeleteFile (string file, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteFile(string file, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DeleteFile (file As String, showUI As UIOption, recycle As RecycleOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DeleteFile(System::String ^ file, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::RecycleOption recycle, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="static member DeleteFile : string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.RecycleOption * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile (file, showUI, recycle, onUserCancel)" />
      <MemberSignature Language="ILAsm" Value=".method public static void DeleteFile(string file, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="recycle" Type="Microsoft.VisualBasic.FileIO.RecycleOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="file">削除対象のファイルの名前とパス。</param>
        <param name="showUI">操作の進行状況を視覚的に追跡するかどうか。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
        <param name="recycle">削除したファイルを **[ごみ箱]** に送るかどうかを指定します。 既定値は <see langword="RecycleOption.DeletePermanently" /> です。</param>
        <param name="onUserCancel">ユーザーによって操作が取り消された場合に、例外をスローするかどうかを指定します。 既定値は <see langword="UICancelOption.ThrowException" /> です。</param>
        <summary>ファイルを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `showUI`、`recycle`、および `onUserCancel` の各パラメーターは、Windows サービスなど、ユーザーが対話型でないアプリケーションではサポートされていません。  
  
 次の表に、`My.Computer.FileSystem.DeleteFile` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|ファイルを削除するには|[方法: Visual Basic でファイルを削除する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md)|  
  
   
  
## Examples  
 この例では、`Test.txt`ファイルを削除します。  
  
 [!code-vb[VbVbcnMyFileSystem#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#3)]  
  
 この例では、ファイル `Test.txt` を削除し、ファイルを削除するかどうかをユーザーが確認できるようにします。  
  
 [!code-vb[VbVbcnMyFileSystem#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#4)]  
  
 この例では、`Test.txt` ファイルを削除し、**ごみ箱**に送信します。  
  
 [!code-vb[VbVbcnMyFileSystem#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さ 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、ファイルを指定する必要がある場所の末尾にスラッシュが付いているか、またはパスがデバイス パスである (\\\\.\\ で始まっている) ことが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.IO.IOException">ファイルが使用中です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーがファイルの削除に必要なアクセス許可を保持していないか、ファイルが読み取り専用です。</exception>
        <exception cref="T:System.OperationCanceledException">ユーザーが操作を取り消し、かつ <paramref name="onUserCancel" /> が <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" /> に設定されています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">ユーザーインターフェイスとクリップボードに関連するアクセス許可を制御します。 <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.RecycleOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
      </Docs>
    </Member>
    <Member MemberName="DirectoryExists">
      <MemberSignature Language="C#" Value="public static bool DirectoryExists (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool DirectoryExists(string directory) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.DirectoryExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DirectoryExists (directory As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool DirectoryExists(System::String ^ directory);" />
      <MemberSignature Language="F#" Value="static member DirectoryExists : string -&gt; bool" Usage="Microsoft.VisualBasic.FileIO.FileSystem.DirectoryExists directory" />
      <MemberSignature Language="ILAsm" Value=".method public static bool DirectoryExists(string directory) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">ディレクトリのパス。</param>
        <summary>指定されたディレクトリが存在する場合、<see langword="True" /> を返します。</summary>
        <returns>ディレクトリが存在する場合は <see langword="True" />。それ以外の場合は <see langword="False" />。 パラメーターがディレクトリではなく名前とファイルのパスを表していた場合は、このメソッドも <see langword="False" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 この例では、ディレクトリ `C:\backup\logs` 存在するかどうかを判断し、そのプロパティを確認します。  
  
 [!code-vb[VbRefFile#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName="Drives">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IO.DriveInfo&gt; Drives { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.IO.DriveInfo&gt; Drives" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.FileSystem.Drives" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Drives As ReadOnlyCollection(Of DriveInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IO::DriveInfo ^&gt; ^ Drives { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IO::DriveInfo ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Drives : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IO.DriveInfo&gt;" Usage="Microsoft.VisualBasic.FileIO.FileSystem.Drives" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IO.DriveInfo&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>利用可能なすべてのドライブ名の読み取り専用コレクションを返します。</summary>
        <value><see cref="T:System.IO.DriveInfo" /> オブジェクトとして使用できるすべてのドライブの読み取り専用コレクション。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、すべての論理ドライブを返します。  
  
   
  
## Examples  
 この例では、使用可能なドライブ名をメッセージボックスに表示します。  
  
 [!code-vb[VbRefFile#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
        <altmember cref="T:System.IO.DriveInfo" />
      </Docs>
    </Member>
    <Member MemberName="FileExists">
      <MemberSignature Language="C#" Value="public static bool FileExists (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool FileExists(string file) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.FileExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FileExists (file As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool FileExists(System::String ^ file);" />
      <MemberSignature Language="F#" Value="static member FileExists : string -&gt; bool" Usage="Microsoft.VisualBasic.FileIO.FileSystem.FileExists file" />
      <MemberSignature Language="ILAsm" Value=".method public static bool FileExists(string file) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">ファイルの名前とパス。</param>
        <summary>指定されたファイルが存在する場合、<see langword="True" /> を返します。</summary>
        <returns>ファイルが存在する場合は <see langword="True" /> を返します。それ以外の場合は <see langword="False" /> を返します。 パラメーターがファイルではなくディレクトリのパスを表していた場合は、このメソッドも <see langword="False" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションに、指定されたファイルを読み取るための十分なアクセス許可がない場合、`FileExists` メソッドは、パスが存在するかどうかに関係なく `False`を返します。メソッドは例外をスローしません。  
  
   
  
## Examples  
 この例では、ファイル `Check.txt` が存在するかどうかを確認し、メッセージボックスに情報を提供します。  
  
 [!code-vb[VbRefFile#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">ファイル名がバックスラッシュ (\\) で終わっています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="FindInFiles">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定されたテキストが格納されたファイル名を表す文字列の読み取り専用コレクションを返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindInFiles">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; FindInFiles (string directory, string containsText, bool ignoreCase, Microsoft.VisualBasic.FileIO.SearchOption searchType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; FindInFiles(string directory, string containsText, bool ignoreCase, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindInFiles (directory As String, containsText As String, ignoreCase As Boolean, searchType As SearchOption) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ FindInFiles(System::String ^ directory, System::String ^ containsText, bool ignoreCase, Microsoft::VisualBasic::FileIO::SearchOption searchType);" />
      <MemberSignature Language="F#" Value="static member FindInFiles : string * string * bool * Microsoft.VisualBasic.FileIO.SearchOption -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="Microsoft.VisualBasic.FileIO.FileSystem.FindInFiles (directory, containsText, ignoreCase, searchType)" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; FindInFiles(string directory, string containsText, bool ignoreCase, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="containsText" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="searchType" Type="Microsoft.VisualBasic.FileIO.SearchOption" />
      </Parameters>
      <Docs>
        <param name="directory">検索するディレクトリ。</param>
        <param name="containsText">検索文字列。</param>
        <param name="ignoreCase">検索時に大文字と小文字を区別する場合は <see langword="True" />。それ以外の場合は <see langword="False" />。 既定値は <see langword="True" /> です。</param>
        <param name="searchType">サブフォルダーを含めるかどうか。 既定値は <see langword="SearchOption.SearchTopLevelOnly" /> です。</param>
        <summary>指定されたテキストが格納されたファイル名を表す文字列の読み取り専用コレクションを返します。</summary>
        <returns>指定されたテキストを含んでいるファイルの名前の読み取り専用コレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定したパターンに一致するファイルがない場合は、空のコレクションが返されます。  
  
 次の表に、`My.Computer.FileSystem.FindInFiles` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|特定の文字列を含むファイルをディレクトリで検索する|[チュートリアル: Visual Basic によるファイルとディレクトリの操作](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md)|  
  
   
  
## Examples  
 この例では、ディレクトリ `C:\TestDir` で文字列 `"sample string"` を含むすべてのファイルを検索し、`ListBox1`に結果を表示します。  
  
 [!code-vb[VbRefFile#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#12)]  
  
 作業するには、プロジェクトに `ListBox1`という名前の `ListBox` が含まれている必要があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが有効ではありません。原因として、長さが 0 の文字列であるか、空白のみが含まれているか、無効な文字が含まれているか、デバイス パスである (先頭が <c>\\.\</c> である) ことが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">指定されたディレクトリが既存のファイルを指しています。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">指定されたディレクトリ パスにコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
      </Docs>
    </Member>
    <Member MemberName="FindInFiles">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; FindInFiles (string directory, string containsText, bool ignoreCase, Microsoft.VisualBasic.FileIO.SearchOption searchType, params string[] fileWildcards);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; FindInFiles(string directory, string containsText, bool ignoreCase, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] fileWildcards) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindInFiles (directory As String, containsText As String, ignoreCase As Boolean, searchType As SearchOption, ParamArray fileWildcards As String()) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ FindInFiles(System::String ^ directory, System::String ^ containsText, bool ignoreCase, Microsoft::VisualBasic::FileIO::SearchOption searchType, ... cli::array &lt;System::String ^&gt; ^ fileWildcards);" />
      <MemberSignature Language="F#" Value="static member FindInFiles : string * string * bool * Microsoft.VisualBasic.FileIO.SearchOption * string[] -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="Microsoft.VisualBasic.FileIO.FileSystem.FindInFiles (directory, containsText, ignoreCase, searchType, fileWildcards)" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; FindInFiles(string directory, string containsText, bool ignoreCase, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] fileWildcards) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="containsText" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="searchType" Type="Microsoft.VisualBasic.FileIO.SearchOption" />
        <Parameter Name="fileWildcards" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="directory">検索するディレクトリ。</param>
        <param name="containsText">検索文字列。</param>
        <param name="ignoreCase">検索時に大文字と小文字を区別する場合は <see langword="True" />。それ以外の場合は <see langword="False" />。 既定値は <see langword="True" /> です。</param>
        <param name="searchType">サブフォルダーを含めるかどうか。 既定値は <see langword="SearchOption.SearchTopLevelOnly" /> です。</param>
        <param name="fileWildcards">検索に使用するパターン。</param>
        <summary>指定されたテキストが格納されたファイル名を表す文字列の読み取り専用コレクションを返します。</summary>
        <returns>指定されたテキストを含んでいるファイルの名前の読み取り専用コレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定したパターンに一致するファイルがない場合は、空のコレクションが返されます。  
  
 次の表に、`My.Computer.FileSystem.FindInFiles` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|特定の文字列を含むファイルをディレクトリで検索する|[チュートリアル: Visual Basic によるファイルとディレクトリの操作](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md)|  
  
   
  
## Examples  
 この例では、ディレクトリ `C:\TestDir` で文字列 `"sample string"` を含むすべてのファイルを検索し、`ListBox1`に結果を表示します。  
  
 [!code-vb[VbRefFile#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#12)]  
  
 作業するには、プロジェクトに `ListBox1`という名前の `ListBox` が含まれている必要があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが有効ではありません。原因として、長さが 0 の文字列であるか、空白のみが含まれているか、無効な文字が含まれているか、デバイス パスである (先頭が <c>\\.\</c> である) ことが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">指定されたディレクトリが既存のファイルを指しています。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">指定されたディレクトリ パスにコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDirectories">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ディレクトリに含まれるサブディレクトリのパス名を表す文字列のコレクションを返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDirectories">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; GetDirectories (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetDirectories(string directory) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectories(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDirectories (directory As String) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ GetDirectories(System::String ^ directory);" />
      <MemberSignature Language="F#" Value="static member GetDirectories : string -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="Microsoft.VisualBasic.FileIO.FileSystem.GetDirectories directory" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetDirectories(string directory) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">ディレクトリの名前とパス。</param>
        <summary>ディレクトリに含まれるサブディレクトリのパス名を表す文字列のコレクションを返します。</summary>
        <returns>指定されたディレクトリに存在するサブディレクトリのパス名の読み取り専用コレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の表に、`My.Computer.FileSystem.GetDirectories` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|特定のパターンでサブディレクトリを一覧表示する|[方法: Visual Basic で特定のパターンを持つサブディレクトリを検索する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-subdirectories-with-a-specific-pattern.md)|  
  
   
  
## Examples  
 次の例では、名前に `Logs` という単語が含まれているディレクトリ構造内のすべてのディレクトリを返し、`ListBox1`に追加します。  
  
 [!code-vb[VbRefFile#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#10)]  
  
 この例では、フォームに `ListBox1` という名前の `ListBox` が必要です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\\\.\\ で始まっている) ことが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">指定されたディレクトリが既存のファイルを指しています。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
      </Docs>
    </Member>
    <Member MemberName="GetDirectories">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; GetDirectories (string directory, Microsoft.VisualBasic.FileIO.SearchOption searchType, params string[] wildcards);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetDirectories(string directory, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] wildcards) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectories(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDirectories (directory As String, searchType As SearchOption, ParamArray wildcards As String()) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ GetDirectories(System::String ^ directory, Microsoft::VisualBasic::FileIO::SearchOption searchType, ... cli::array &lt;System::String ^&gt; ^ wildcards);" />
      <MemberSignature Language="F#" Value="static member GetDirectories : string * Microsoft.VisualBasic.FileIO.SearchOption * string[] -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="Microsoft.VisualBasic.FileIO.FileSystem.GetDirectories (directory, searchType, wildcards)" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetDirectories(string directory, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] wildcards) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="searchType" Type="Microsoft.VisualBasic.FileIO.SearchOption" />
        <Parameter Name="wildcards" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="directory">ディレクトリの名前とパス。</param>
        <param name="searchType">サブフォルダーを含めるかどうか。 既定値は <see langword="SearchOption.SearchTopLevelOnly" /> です。</param>
        <param name="wildcards">名前の検索に使用するパターン。</param>
        <summary>ディレクトリに含まれるサブディレクトリのパス名を表す文字列のコレクションを返します。</summary>
        <returns>指定されたディレクトリに存在するサブディレクトリのパス名の読み取り専用コレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `wildcards` パラメーターを使用して、特定のパターンを指定できます。 サブディレクトリの内容を検索対象に含めるには、`searchType` パラメーターを `SearchAllSubDirectories` に設定します。  
  
 指定したパターンに一致するディレクトリが見つからなかった場合は、空のコレクションが返されます。  
  
 次の表に、`My.Computer.FileSystem.GetDirectories` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|特定のパターンでサブディレクトリを一覧表示する|[方法: Visual Basic で特定のパターンを持つサブディレクトリを検索する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-subdirectories-with-a-specific-pattern.md)|  
  
   
  
## Examples  
 次の例では、名前に `Logs` という単語が含まれているディレクトリ構造内のすべてのディレクトリを返し、`ListBox1`に追加します。  
  
 [!code-vb[VbRefFile#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#10)]  
  
 この例では、フォームに `ListBox1` という名前の `ListBox` が必要です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\\\.\\ で始まっている) ことが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException">指定したワイルドカード文字の中に、<see langword="Nothing" />、空の文字列、または空白のみが含まれています。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">指定されたディレクトリが既存のファイルを指しています。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
      </Docs>
    </Member>
    <Member MemberName="GetDirectoryInfo">
      <MemberSignature Language="C#" Value="public static System.IO.DirectoryInfo GetDirectoryInfo (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.DirectoryInfo GetDirectoryInfo(string directory) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDirectoryInfo (directory As String) As DirectoryInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::DirectoryInfo ^ GetDirectoryInfo(System::String ^ directory);" />
      <MemberSignature Language="F#" Value="static member GetDirectoryInfo : string -&gt; System.IO.DirectoryInfo" Usage="Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo directory" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.IO.DirectoryInfo GetDirectoryInfo(string directory) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.DirectoryInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory"><see langword="String" /> で初期化します。 ディレクトリのパス。</param>
        <summary>指定したパスの <see cref="T:System.IO.DirectoryInfo" /> オブジェクトを返します。</summary>
        <returns>指定されたパスの <see cref="T:System.IO.DirectoryInfo" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ディレクトリが存在しない場合、<xref:System.IO.DirectoryInfo> オブジェクトのプロパティが初めてアクセスされるまで、例外はスローされません。  
  
   
  
## Examples  
 この例では、ディレクトリ `C:\Documents and Settings` の <xref:System.IO.DirectoryInfo> オブジェクトを取得し、ディレクトリの作成時刻、最終アクセス時刻、最終書き込み時刻を表示します。  
  
 [!code-vb[VbRefFile#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\\\.\\ で始まっている) ことが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">ディレクトリ パスにコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:System.IO.DirectoryInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetDriveInfo">
      <MemberSignature Language="C#" Value="public static System.IO.DriveInfo GetDriveInfo (string drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.DriveInfo GetDriveInfo(string drive) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDriveInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDriveInfo (drive As String) As DriveInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::DriveInfo ^ GetDriveInfo(System::String ^ drive);" />
      <MemberSignature Language="F#" Value="static member GetDriveInfo : string -&gt; System.IO.DriveInfo" Usage="Microsoft.VisualBasic.FileIO.FileSystem.GetDriveInfo drive" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.IO.DriveInfo GetDriveInfo(string drive) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.DriveInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="drive">確認するドライブ。</param>
        <summary>指定したドライブの <see cref="T:System.IO.DriveInfo" /> オブジェクトを返します。</summary>
        <returns>指定されたドライブの <see cref="T:System.IO.DriveInfo" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.DriveInfo> クラスはドライブをモデル化し、ドライブ情報を照会するためのメソッドとプロパティを提供します。 <xref:System.IO.DriveInfo> を使用して、使用可能なドライブとそのドライブの種類を決定します。 また、プロパティを照会して、ドライブの容量と使用可能な空き領域を確認することもできます。  
  
   
  
## Examples  
 この例では、C ドライブの <xref:System.IO.DriveInfo> オブジェクトを取得し、それを使用してドライブに関する情報を表示します。  
  
 [!code-vb[VbRefFile#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#11)]  
  
 さまざまなドライブの種類の詳細については、「<xref:System.IO.DriveType>」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\\\.\\ で始まっている) ことが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="drive" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:System.IO.DriveInfo" />
        <altmember cref="T:System.IO.DriveType" />
      </Docs>
    </Member>
    <Member MemberName="GetFileInfo">
      <MemberSignature Language="C#" Value="public static System.IO.FileInfo GetFileInfo (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.FileInfo GetFileInfo(string file) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFileInfo (file As String) As FileInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::FileInfo ^ GetFileInfo(System::String ^ file);" />
      <MemberSignature Language="F#" Value="static member GetFileInfo : string -&gt; System.IO.FileInfo" Usage="Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo file" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.IO.FileInfo GetFileInfo(string file) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">ファイルの名前とパス。</param>
        <summary>指定したファイルの <see cref="T:System.IO.FileInfo" /> オブジェクトを返します。</summary>
        <returns>指定されたファイルの <see cref="T:System.IO.FileInfo" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ファイルが存在しない場合、例外はスローされません。代わりに、オブジェクトのプロパティに初めてアクセスしたときにスローされます。  
  
 次の表に、`My.Computer.FileSystem.GetFileInfo` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|ファイルの名前とパスを確認する|[方法: Visual Basic でファイルパスを解析する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md)|  
  
   
  
## Examples  
 この例では、ファイル `MyLogFile.log` の <xref:System.IO.FileInfo?displayProperty=nameWithType> オブジェクトを取得し、それを使用してファイルの完全名、最終アクセス時刻、および長さを報告します。  
  
 [!code-vb[VbRefFile#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パス名が不適切である場合。 たとえば、無効な文字が含まれている場合や、空白のみの場合などがあります。 ファイル名の末尾にスラッシュ記号が付いています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.NotSupportedException">パス文字列の途中にコロンが含まれています。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスが長すぎます。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーに必要なアクセス許可がありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">当該ファイルに対して、ユーザーがアクセス制御リスト (ACL: access control list) のアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:System.IO.FileInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFiles">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ディレクトリ内のファイル名を表す文字列の読み取り専用コレクションを返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; GetFiles (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetFiles(string directory) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFiles (directory As String) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ GetFiles(System::String ^ directory);" />
      <MemberSignature Language="F#" Value="static member GetFiles : string -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="Microsoft.VisualBasic.FileIO.FileSystem.GetFiles directory" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetFiles(string directory) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">検索するディレクトリ。</param>
        <summary>ディレクトリ内のファイル名を表す文字列の読み取り専用コレクションを返します。</summary>
        <returns>指定されたディレクトリから取得されたファイル名の読み取り専用コレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定したパターンに一致するファイルがない場合は、空のコレクションが返されます。  
  
 次の表に、`My.Computer.FileSystem.GetFiles` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|ディレクトリ内のファイルのコレクションを取得します。|[方法: Visual Basic のディレクトリにあるファイルのコレクションを取得する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md)|  
|ディレクトリ内の特定のパターンを持つファイルを検索する|[方法: Visual Basic 内の特定のパターンを持つファイルを検索する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-files-with-a-specific-pattern.md)|  
  
   
  
## Examples  
 次の例では、ディレクトリ内のすべてのファイルが返され、`ListBox1` に追加されます。  
  
 [!code-vb[VbRefFile#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#5)]  
  
 この例では、フォームに `ListBox1` という名前の `ListBox` が必要です。  
  
 この例では、ディレクトリ内の拡張子 `.txt` を持つすべてのファイルを返し、`ListBox1`に追加します。  
  
 [!code-vb[VbRefFile#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#6)]  
  
 この例では、フォームに `ListBox1` という名前の `ListBox` が必要です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\\\.\\ で始まっている) ことが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" /> は <see langword="Nothing" /> です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">検索対象のディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="directory" /> が既存のファイルを指しています。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
      </Docs>
    </Member>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; GetFiles (string directory, Microsoft.VisualBasic.FileIO.SearchOption searchType, params string[] wildcards);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetFiles(string directory, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] wildcards) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFiles (directory As String, searchType As SearchOption, ParamArray wildcards As String()) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ GetFiles(System::String ^ directory, Microsoft::VisualBasic::FileIO::SearchOption searchType, ... cli::array &lt;System::String ^&gt; ^ wildcards);" />
      <MemberSignature Language="F#" Value="static member GetFiles : string * Microsoft.VisualBasic.FileIO.SearchOption * string[] -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="Microsoft.VisualBasic.FileIO.FileSystem.GetFiles (directory, searchType, wildcards)" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetFiles(string directory, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] wildcards) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="searchType" Type="Microsoft.VisualBasic.FileIO.SearchOption" />
        <Parameter Name="wildcards" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="directory">検索するディレクトリ。</param>
        <param name="searchType">サブフォルダーを含めるかどうか。 既定値は <see langword="SearchOption.SearchTopLevelOnly" /> です。</param>
        <param name="wildcards">検索に使用するパターン。</param>
        <summary>ディレクトリ内のファイル名を表す文字列の読み取り専用コレクションを返します。</summary>
        <returns>指定されたディレクトリから取得されたファイル名の読み取り専用コレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定したパターンに一致するファイルがない場合は、空のコレクションが返されます。  
  
 次の表に、`My.Computer.FileSystem.GetFiles` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|ディレクトリ内のファイルのコレクションを取得します。|[方法: Visual Basic のディレクトリにあるファイルのコレクションを取得する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md)|  
|ディレクトリ内の特定のパターンを持つファイルを検索する|[方法: Visual Basic 内の特定のパターンを持つファイルを検索する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-files-with-a-specific-pattern.md)|  
  
   
  
## Examples  
 次の例では、ディレクトリ内のすべてのファイルが返され、`ListBox1` に追加されます。  
  
 [!code-vb[VbRefFile#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#5)]  
  
 この例では、フォームに `ListBox1` という名前の `ListBox` が必要です。  
  
 この例では、ディレクトリ内の拡張子 `.txt` を持つすべてのファイルを返し、`ListBox1`に追加します。  
  
 [!code-vb[VbRefFile#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#6)]  
  
 この例では、フォームに `ListBox1` という名前の `ListBox` が必要です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\\\.\\ で始まっている) ことが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" /> は <see langword="Nothing" /> です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">検索対象のディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="directory" /> が既存のファイルを指しています。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public static string GetName (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetName(string path) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.GetName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetName (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetName(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetName : string -&gt; string" Usage="Microsoft.VisualBasic.FileIO.FileSystem.GetName path" />
      <MemberSignature Language="ILAsm" Value=".method public static string GetName(string path) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">必須。 解析対象のパス。 <see langword="String" /> で初期化します。</param>
        <summary>指定されたパスからファイル名を解析し、取り出します。</summary>
        <returns>指定されたパスのファイル名部分。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 これは文字列操作です。`FileSystem` は検証されません。  
  
 `GetName` メソッドは、パスの末尾で発生するスラッシュ記号を無視します。  
  
 次の表に、`My.Computer.FileSystem.GetFileName` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|ファイルパスを解析する|[方法: Visual Basic でファイルパスを解析する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md)|  
  
   
  
## Examples  
 次の例では、ファイルパスを解析し、ファイルの名前を返します。  
  
 [!code-vb[VbVbcnMyFileSystem#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#21)]  
  
 パス `C:\Testdirectory\Testfile` を解析するパスに置き換えます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParentPath">
      <MemberSignature Language="C#" Value="public static string GetParentPath (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetParentPath(string path) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.GetParentPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetParentPath (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetParentPath(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetParentPath : string -&gt; string" Usage="Microsoft.VisualBasic.FileIO.FileSystem.GetParentPath path" />
      <MemberSignature Language="ILAsm" Value=".method public static string GetParentPath(string path) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">確認するパス。</param>
        <summary>指定されたパスの親パスを返します。</summary>
        <returns>指定されたパスの親パス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 これは文字列操作です。ファイルシステムが検査されません。  
  
   
  
## Examples  
 この例では、`C:\Backups\Tmp\Test`の親パスを取得します。  
  
 [!code-vb[VbRefFile#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスがルート パスであるため、親パスが存在しません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> は <see langword="Nothing" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetTempFileName">
      <MemberSignature Language="C#" Value="public static string GetTempFileName ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetTempFileName() cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.GetTempFileName" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTempFileName () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetTempFileName();" />
      <MemberSignature Language="F#" Value="static member GetTempFileName : unit -&gt; string" Usage="Microsoft.VisualBasic.FileIO.FileSystem.GetTempFileName " />
      <MemberSignature Language="ILAsm" Value=".method public static string GetTempFileName() cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>一意な名前を持つ 0 バイトの一時ファイルをディスク上に作成し、そのファイルへの完全パスを返します。</summary>
        <returns>一時ファイルの完全パスを保持する <see langword="String" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用して、一時ファイルを作成できます。  
  
   
  
## Examples  
 この例では、一時ファイルを作成し、そのパスを返します。  
  
 [!code-vb[VbVbcnMyFileSystem#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveDirectory">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ディレクトリの場所を移動します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveDirectory">
      <MemberSignature Language="C#" Value="public static void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MoveDirectory (sourceDirectoryName As String, destinationDirectoryName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MoveDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName);" />
      <MemberSignature Language="F#" Value="static member MoveDirectory : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory (sourceDirectoryName, destinationDirectoryName)" />
      <MemberSignature Language="ILAsm" Value=".method public static void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">移動するディレクトリのパス。</param>
        <param name="destinationDirectoryName">ソース ディレクトリの移動先となるディレクトリのパス。</param>
        <summary>ディレクトリの場所を移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 存在しないディレクトリ内のディレクトリを移動しようとすると、ターゲットの構造が作成されます。  
  
   
  
## Examples  
 この例では、`Directory2`内で `Directory1` を移動します。  
  
 [!code-vb[VbVbcnMyFileSystem#81](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#81)]  
  
 この例では `Directory1` を `Directory2`内で移動し、ディレクトリが既に存在する場合は上書きします。  
  
 [!code-vb[VbVbcnMyFileSystem#82](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\\\.\\ で始まっている) ことが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceDirectoryName" /> または <paramref name="destinationDirectoryName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">ディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">移動先がルート ディレクトリであるか、移動元と移動先のパスが同じです。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.InvalidOperationException">操作が巡回しています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory" />
      </Docs>
    </Member>
    <Member MemberName="MoveDirectory">
      <MemberSignature Language="C#" Value="public static void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MoveDirectory (sourceDirectoryName As String, destinationDirectoryName As String, showUI As UIOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MoveDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, Microsoft::VisualBasic::FileIO::UIOption showUI);" />
      <MemberSignature Language="F#" Value="static member MoveDirectory : string * string * Microsoft.VisualBasic.FileIO.UIOption -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory (sourceDirectoryName, destinationDirectoryName, showUI)" />
      <MemberSignature Language="ILAsm" Value=".method public static void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">移動するディレクトリのパス。</param>
        <param name="destinationDirectoryName">ソース ディレクトリの移動先となるディレクトリのパス。</param>
        <param name="showUI">操作の進行状況を視覚的に追跡するかどうかを指定します。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
        <summary>ディレクトリの場所を移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 存在しないディレクトリ内のディレクトリを移動しようとすると、ターゲットの構造が作成されます。  
  
   
  
## Examples  
 この例では、`Directory2`内で `Directory1` を移動します。  
  
 [!code-vb[VbVbcnMyFileSystem#81](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#81)]  
  
 この例では `Directory1` を `Directory2`内で移動し、ディレクトリが既に存在する場合は上書きします。  
  
 [!code-vb[VbVbcnMyFileSystem#82](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\\\.\\ で始まっている) ことが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceDirectoryName" /> または <paramref name="destinationDirectoryName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">ディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">ターゲット ディレクトリが既に存在し、<paramref name="overwrite" /> が <see langword="False" /> に設定されています。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.InvalidOperationException">操作が巡回しています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">ユーザーインターフェイスとクリップボードに関連するアクセス許可を制御します。 <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /> (関連する列挙体)</permission>
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
      </Docs>
    </Member>
    <Member MemberName="MoveDirectory">
      <MemberSignature Language="C#" Value="public static void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, bool overwrite) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MoveDirectory (sourceDirectoryName As String, destinationDirectoryName As String, overwrite As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MoveDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, bool overwrite);" />
      <MemberSignature Language="F#" Value="static member MoveDirectory : string * string * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory (sourceDirectoryName, destinationDirectoryName, overwrite)" />
      <MemberSignature Language="ILAsm" Value=".method public static void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, bool overwrite) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">移動するディレクトリのパス。</param>
        <param name="destinationDirectoryName">ソース ディレクトリの移動先となるディレクトリのパス。</param>
        <param name="overwrite">既存のディレクトリを上書きする場合は <see langword="True" />。それ以外の場合は <see langword="False" />。 既定値は <see langword="False" /> です。</param>
        <summary>ディレクトリの場所を移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 存在しないディレクトリ内のディレクトリを移動しようとすると、ターゲットの構造が作成されます。  
  
   
  
## Examples  
 この例では、`Directory2`内で `Directory1` を移動します。  
  
 [!code-vb[VbVbcnMyFileSystem#81](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#81)]  
  
 この例では `Directory1` を `Directory2`内で移動し、ディレクトリが既に存在する場合は上書きします。  
  
 [!code-vb[VbVbcnMyFileSystem#82](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\\\.\\ で始まっている) ことが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceDirectoryName" /> または <paramref name="destinationDirectoryName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">ディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">ターゲット ディレクトリが既に存在し、<paramref name="overwrite" /> が <see langword="False" /> に設定されています。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.InvalidOperationException">操作が巡回しています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory" />
      </Docs>
    </Member>
    <Member MemberName="MoveDirectory">
      <MemberSignature Language="C#" Value="public static void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MoveDirectory (sourceDirectoryName As String, destinationDirectoryName As String, showUI As UIOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MoveDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="static member MoveDirectory : string * string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory (sourceDirectoryName, destinationDirectoryName, showUI, onUserCancel)" />
      <MemberSignature Language="ILAsm" Value=".method public static void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">移動するディレクトリのパス。</param>
        <param name="destinationDirectoryName">ソース ディレクトリの移動先となるディレクトリのパス。</param>
        <param name="showUI">操作の進行状況を視覚的に追跡するかどうかを指定します。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
        <param name="onUserCancel">ユーザーによって操作が取り消された場合に、例外をスローするかどうかを指定します。 既定値は <see langword="UICancelOption.ThrowException" /> です。</param>
        <summary>ディレクトリの場所を移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 存在しないディレクトリ内のディレクトリを移動しようとすると、ターゲットの構造が作成されます。  
  
   
  
## Examples  
 この例では、`Directory2`内で `Directory1` を移動します。  
  
 [!code-vb[VbVbcnMyFileSystem#81](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#81)]  
  
 この例では `Directory1` を `Directory2`内で移動し、ディレクトリが既に存在する場合は上書きします。  
  
 [!code-vb[VbVbcnMyFileSystem#82](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\\\.\\ で始まっている) ことが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceDirectoryName" /> または <paramref name="destinationDirectoryName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">ディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="onUserCancel" /> が <see langword="ThrowException" /> に設定されており、ファイルのサブディレクトリをコピーできません。</exception>
        <exception cref="T:System.OperationCanceledException"><paramref name="onUserCancel" /> が <see langword="ThrowException" /> に設定されている場合にユーザーが操作を取り消したか、操作を完了できませんでした。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.InvalidOperationException">操作が巡回しています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">ユーザーインターフェイスとクリップボードに関連するアクセス許可を制御します。 <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /> (関連する列挙体)</permission>
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveFile">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ファイルを新しい場所に移動します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveFile">
      <MemberSignature Language="C#" Value="public static void MoveFile (string sourceFileName, string destinationFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MoveFile(string sourceFileName, string destinationFileName) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MoveFile (sourceFileName As String, destinationFileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MoveFile(System::String ^ sourceFileName, System::String ^ destinationFileName);" />
      <MemberSignature Language="F#" Value="static member MoveFile : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.MoveFile (sourceFileName, destinationFileName)" />
      <MemberSignature Language="ILAsm" Value=".method public static void MoveFile(string sourceFileName, string destinationFileName) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">移動するファイルのパス。</param>
        <param name="destinationFileName">ファイルの移動先となるディレクトリのパス。</param>
        <summary>ファイルを新しい場所に移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ターゲットの構造が存在しない場合は、作成されます。  
  
 `MoveFile` メソッドは、同じボリューム内でファイルを移動するときにのみ、Ace (Access Control エントリ) を保持します。 これには、移動時に直接の Ace になる継承された Ace が含まれます (直接の Ace は、継承された Ace より優先されます)。 ボリューム間でファイルを移動すると、Ace はコピーされません。  
  
 次の表に、`My.Computer.FileSystem.MoveFile` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|ファイルの移動|[方法: Visual Basic でファイルを移動する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-move-a-file.md)|  
  
   
  
## Examples  
 この例では、ファイル `Test.txt` を `TestDir1` から `TestDir2`に移動します。  
  
 [!code-vb[VbVbcnMyFileSystem#86](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#86)]  
  
 この例では、ファイル `Test.txt` を `TestDir1` から `TestDir2` に移動し、その名前を `Test2.txt`に変更します。  
  
 [!code-vb[VbVbcnMyFileSystem#87](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\\\.\\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationFileName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ソース ファイルが有効でないか、存在しません。</exception>
        <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">すべての環境変数にアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">レジストリ変数へのアクセスを制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName="MoveFile">
      <MemberSignature Language="C#" Value="public static void MoveFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MoveFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MoveFile (sourceFileName As String, destinationFileName As String, showUI As UIOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MoveFile(System::String ^ sourceFileName, System::String ^ destinationFileName, Microsoft::VisualBasic::FileIO::UIOption showUI);" />
      <MemberSignature Language="F#" Value="static member MoveFile : string * string * Microsoft.VisualBasic.FileIO.UIOption -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.MoveFile (sourceFileName, destinationFileName, showUI)" />
      <MemberSignature Language="ILAsm" Value=".method public static void MoveFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">移動するファイルのパス。</param>
        <param name="destinationFileName">ファイルの移動先となるディレクトリのパス。</param>
        <param name="showUI">操作の進行状況を視覚的に追跡するかどうかを指定します。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
        <summary>ファイルを新しい場所に移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ターゲットの構造が存在しない場合は、作成されます。  
  
 `MoveFile` メソッドは、同じボリューム内でファイルを移動するときにのみ、Ace (Access Control エントリ) を保持します。 これには、移動時に直接の Ace になる継承された Ace が含まれます (直接の Ace は、継承された Ace より優先されます)。 ボリューム間でファイルを移動すると、Ace はコピーされません。  
  
 次の表に、`My.Computer.FileSystem.MoveFile` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|ファイルの移動|[方法: Visual Basic でファイルを移動する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-move-a-file.md)|  
  
   
  
## Examples  
 この例では、ファイル `Test.txt` を `TestDir1` から `TestDir2`に移動します。  
  
 [!code-vb[VbVbcnMyFileSystem#86](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#86)]  
  
 この例では、ファイル `Test.txt` を `TestDir1` から `TestDir2` に移動し、その名前を `Test2.txt`に変更します。  
  
 [!code-vb[VbVbcnMyFileSystem#87](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\\\.\\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationFileName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ソース ファイルが有効でないか、存在しません。</exception>
        <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">すべての環境変数にアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">レジストリ変数へのアクセスを制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">ユーザーインターフェイスとクリップボードに関連するアクセス許可を制御します。 <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
      </Docs>
    </Member>
    <Member MemberName="MoveFile">
      <MemberSignature Language="C#" Value="public static void MoveFile (string sourceFileName, string destinationFileName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MoveFile(string sourceFileName, string destinationFileName, bool overwrite) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MoveFile (sourceFileName As String, destinationFileName As String, overwrite As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MoveFile(System::String ^ sourceFileName, System::String ^ destinationFileName, bool overwrite);" />
      <MemberSignature Language="F#" Value="static member MoveFile : string * string * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.MoveFile (sourceFileName, destinationFileName, overwrite)" />
      <MemberSignature Language="ILAsm" Value=".method public static void MoveFile(string sourceFileName, string destinationFileName, bool overwrite) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">移動するファイルのパス。</param>
        <param name="destinationFileName">ファイルの移動先となるディレクトリのパス。</param>
        <param name="overwrite">既存のファイルを上書きする場合は <see langword="True" />。それ以外の場合は <see langword="False" />。 既定値は <see langword="False" /> です。</param>
        <summary>ファイルを新しい場所に移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ターゲットの構造が存在しない場合は、作成されます。  
  
 `MoveFile` メソッドは、同じボリューム内でファイルを移動するときにのみ、Ace (Access Control エントリ) を保持します。 これには、移動時に直接の Ace になる継承された Ace が含まれます (直接の Ace は、継承された Ace より優先されます)。 ボリューム間でファイルを移動すると、Ace はコピーされません。  
  
 次の表に、`My.Computer.FileSystem.MoveFile` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|ファイルの移動|[方法: Visual Basic でファイルを移動する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-move-a-file.md)|  
  
   
  
## Examples  
 この例では、ファイル `Test.txt` を `TestDir1` から `TestDir2`に移動します。  
  
 [!code-vb[VbVbcnMyFileSystem#86](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#86)]  
  
 この例では、ファイル `Test.txt` を `TestDir1` から `TestDir2` に移動し、その名前を `Test2.txt`に変更します。  
  
 [!code-vb[VbVbcnMyFileSystem#87](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\\\.\\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationFileName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ソース ファイルが有効でないか、存在しません。</exception>
        <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">すべての環境変数にアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">レジストリ変数へのアクセスを制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName="MoveFile">
      <MemberSignature Language="C#" Value="public static void MoveFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MoveFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MoveFile (sourceFileName As String, destinationFileName As String, showUI As UIOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MoveFile(System::String ^ sourceFileName, System::String ^ destinationFileName, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="static member MoveFile : string * string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.MoveFile (sourceFileName, destinationFileName, showUI, onUserCancel)" />
      <MemberSignature Language="ILAsm" Value=".method public static void MoveFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">移動するファイルのパス。</param>
        <param name="destinationFileName">ファイルの移動先となるディレクトリのパス。</param>
        <param name="showUI">操作の進行状況を視覚的に追跡するかどうかを指定します。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
        <param name="onUserCancel">ユーザーによって操作が取り消された場合に、例外をスローするかどうかを指定します。 既定値は <see langword="UICancelOption.ThrowException" /> です。</param>
        <summary>ファイルを新しい場所に移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ターゲットの構造が存在しない場合は、作成されます。  
  
 `MoveFile` メソッドは、同じボリューム内でファイルを移動するときにのみ、Ace (Access Control エントリ) を保持します。 これには、移動時に直接の Ace になる継承された Ace が含まれます (直接の Ace は、継承された Ace より優先されます)。 ボリューム間でファイルを移動すると、Ace はコピーされません。  
  
 次の表に、`My.Computer.FileSystem.MoveFile` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|ファイルの移動|[方法: Visual Basic でファイルを移動する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-move-a-file.md)|  
  
   
  
## Examples  
 この例では、ファイル `Test.txt` を `TestDir1` から `TestDir2`に移動します。  
  
 [!code-vb[VbVbcnMyFileSystem#86](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#86)]  
  
 この例では、ファイル `Test.txt` を `TestDir1` から `TestDir2` に移動し、その名前を `Test2.txt`に変更します。  
  
 [!code-vb[VbVbcnMyFileSystem#87](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\\\.\\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationFileName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ソース ファイルが有効でないか、存在しません。</exception>
        <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
        <exception cref="T:System.OperationCanceledException"><paramref name="onUserCancel" /> が <see langword="ThrowException" /> に設定されている場合に、ユーザーが操作を取り消したか、不特定の I/O エラーが発生しました。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">すべての環境変数にアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">レジストリ変数へのアクセスを制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">ユーザーインターフェイスとクリップボードに関連するアクセス許可を制御します。 <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenTextFieldParser">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see langword="OpenTextFieldParser" /> メソッドを使用すると、<see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> オブジェクトを作成できます。このオブジェクトは、ログなどの構造化されたテキスト ファイルを容易かつ効率的に解析できるようにします。 <see langword="TextFieldParser" /> オブジェクトは、区切り形式および固定幅の、どちらのファイルの読み込みにも使用できます。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenTextFieldParser">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser(string file) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenTextFieldParser (file As String) As TextFieldParser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileIO::TextFieldParser ^ OpenTextFieldParser(System::String ^ file);" />
      <MemberSignature Language="F#" Value="static member OpenTextFieldParser : string -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser file" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser(string file) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.TextFieldParser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file"><see langword="TextFieldParser" /> で開くファイル。</param>
        <summary><see langword="OpenTextFieldParser" /> メソッドを使用すると、<see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> オブジェクトを作成できます。このオブジェクトは、ログなどの構造化されたテキスト ファイルを容易かつ効率的に解析できるようにします。 <see langword="TextFieldParser" /> オブジェクトは、区切り形式および固定幅の、どちらのファイルの読み込みにも使用できます。</summary>
        <returns>指定されたファイルを読み取るための <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の表に、`My.Computer.FileSystem.OpenTextFieldParser` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|区切られたテキストファイルからの読み取り|[方法: Visual Basic でコンマ区切りのテキストファイルを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|固定幅のテキストファイルからの読み取り|[方法: Visual Basic で固定幅のテキストファイルを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|複数の形式を持つテキストファイルからの読み取り|[方法: Visual Basic で複数の形式を持つテキストファイルを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 この例では、`TextFieldParser.reader` を開き、それを使用して `C:\TestFolder1\Test1.txt`から読み取ります。  
  
 [!code-vb[VbRefFile#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\\\.\\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" /> は <see langword="Nothing" /> です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
        <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">指定の書式を使用して行を解析できません。 例外の原因となった行が例外メッセージで報告され、その行に含まれているテキストには <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" /> プロパティが代入されます。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">コードに適用されるセキュリティのアクセス許可のセットについて説明します。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
      </Docs>
    </Member>
    <Member MemberName="OpenTextFieldParser">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser (string file, params int[] fieldWidths);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser(string file, int32[] fieldWidths) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String,System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenTextFieldParser (file As String, ParamArray fieldWidths As Integer()) As TextFieldParser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileIO::TextFieldParser ^ OpenTextFieldParser(System::String ^ file, ... cli::array &lt;int&gt; ^ fieldWidths);" />
      <MemberSignature Language="F#" Value="static member OpenTextFieldParser : string * int[] -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser (file, fieldWidths)" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser(string file, int32[] fieldWidths) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.TextFieldParser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="fieldWidths" Type="System.Int32[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="file"><see langword="TextFieldParser" /> で開くファイル。</param>
        <param name="fieldWidths">フィールドの幅。</param>
        <summary><see langword="OpenTextFieldParser" /> メソッドを使用すると、<see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> オブジェクトを作成できます。このオブジェクトは、ログなどの構造化されたテキスト ファイルを容易かつ効率的に解析できるようにします。 <see langword="TextFieldParser" /> オブジェクトは、区切り形式および固定幅の、どちらのファイルの読み込みにも使用できます。</summary>
        <returns>指定されたファイルを読み取るための <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の表に、`My.Computer.FileSystem.OpenTextFieldParser` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|区切られたテキストファイルからの読み取り|[方法: Visual Basic でコンマ区切りのテキストファイルを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|固定幅のテキストファイルからの読み取り|[方法: Visual Basic で固定幅のテキストファイルを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|複数の形式を持つテキストファイルからの読み取り|[方法: Visual Basic で複数の形式を持つテキストファイルを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 この例では、`TextFieldParser.reader` を開き、それを使用して `C:\TestFolder1\Test1.txt`から読み取ります。  
  
 [!code-vb[VbRefFile#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\\\.\\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" /> は <see langword="Nothing" /> です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
        <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">指定の書式を使用して行を解析できません。 例外の原因となった行が例外メッセージで報告され、その行に含まれているテキストには <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" /> プロパティが代入されます。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">コードに適用されるセキュリティのアクセス許可のセットについて説明します。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
      </Docs>
    </Member>
    <Member MemberName="OpenTextFieldParser">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser (string file, params string[] delimiters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser(string file, string[] delimiters) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenTextFieldParser (file As String, ParamArray delimiters As String()) As TextFieldParser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileIO::TextFieldParser ^ OpenTextFieldParser(System::String ^ file, ... cli::array &lt;System::String ^&gt; ^ delimiters);" />
      <MemberSignature Language="F#" Value="static member OpenTextFieldParser : string * string[] -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser (file, delimiters)" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser(string file, string[] delimiters) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.TextFieldParser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="delimiters" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="file"><see langword="TextFieldParser" /> で開くファイル。</param>
        <param name="delimiters">フィールドの区切り記号。</param>
        <summary><see langword="OpenTextFieldParser" /> メソッドを使用すると、<see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> オブジェクトを作成できます。このオブジェクトは、ログなどの構造化されたテキスト ファイルを容易かつ効率的に解析できるようにします。 <see langword="TextFieldParser" /> オブジェクトは、区切り形式および固定幅の、どちらのファイルの読み込みにも使用できます。</summary>
        <returns>指定されたファイルを読み取るための <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の表に、`My.Computer.FileSystem.OpenTextFieldParser` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|区切られたテキストファイルからの読み取り|[方法: Visual Basic でコンマ区切りのテキストファイルを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|固定幅のテキストファイルからの読み取り|[方法: Visual Basic で固定幅のテキストファイルを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|複数の形式を持つテキストファイルからの読み取り|[方法: Visual Basic で複数の形式を持つテキストファイルを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 この例では、`TextFieldParser.reader` を開き、それを使用して `C:\TestFolder1\Test1.txt`から読み取ります。  
  
 [!code-vb[VbRefFile#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\\\.\\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" /> は <see langword="Nothing" /> です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
        <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">指定の書式を使用して行を解析できません。 例外の原因となった行が例外メッセージで報告され、その行に含まれているテキストには <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" /> プロパティが代入されます。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">コードに適用されるセキュリティのアクセス許可のセットについて説明します。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenTextFileReader">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.IO.StreamReader" /> オブジェクトを開いてファイルから読み取ります。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenTextFileReader">
      <MemberSignature Language="C#" Value="public static System.IO.StreamReader OpenTextFileReader (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.StreamReader OpenTextFileReader(string file) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileReader(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenTextFileReader (file As String) As StreamReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::StreamReader ^ OpenTextFileReader(System::String ^ file);" />
      <MemberSignature Language="F#" Value="static member OpenTextFileReader : string -&gt; System.IO.StreamReader" Usage="Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileReader file" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.IO.StreamReader OpenTextFileReader(string file) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">読み取るファイル。</param>
        <summary><see cref="T:System.IO.StreamReader" /> オブジェクトを開いてファイルから読み取ります。</summary>
        <returns>ファイルから読み取る <see cref="T:System.IO.StreamReader" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.StreamReader>では、テキストファイルのみを読み取ることができます。  
  
 次の表に、`My.Computer.FileSystem.OpenTextFileReader` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|<xref:System.IO.StreamReader> を使用してファイルを開きます。|[方法: StreamReader を使用してファイルからテキストを読み取る (Visual Basic)](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md)|  
  
   
  
## Examples  
 この例では、ファイル `Testfile.txt`を開き、そこから行を読み取り、`MessageBox`でその行を表示します。  
  
 [!code-vb[VbRefFile#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">ファイル名がバックスラッシュ (\\) で終わっています。</exception>
        <exception cref="T:System.IO.FileNotFoundException">指定されたファイルが見つかりません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがファイルの読み取りに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.IO.StreamReader" />
      </Docs>
    </Member>
    <Member MemberName="OpenTextFileReader">
      <MemberSignature Language="C#" Value="public static System.IO.StreamReader OpenTextFileReader (string file, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.StreamReader OpenTextFileReader(string file, class System.Text.Encoding encoding) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileReader(System.String,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::StreamReader ^ OpenTextFileReader(System::String ^ file, System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="static member OpenTextFileReader : string * System.Text.Encoding -&gt; System.IO.StreamReader" Usage="Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileReader (file, encoding)" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.IO.StreamReader OpenTextFileReader(string file, class System.Text.Encoding encoding) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="file">読み取るファイル。</param>
        <param name="encoding">ファイルの内容に使用されるエンコーディング。 既定値は ASCII です。</param>
        <summary><see cref="T:System.IO.StreamReader" /> オブジェクトを開いてファイルから読み取ります。</summary>
        <returns>ファイルから読み取る <see cref="T:System.IO.StreamReader" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.StreamReader>では、テキストファイルのみを読み取ることができます。  
  
 次の表に、`My.Computer.FileSystem.OpenTextFileReader` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|<xref:System.IO.StreamReader> を使用してファイルを開きます。|[方法: StreamReader を使用してファイルからテキストを読み取る (Visual Basic)](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md)|  
  
   
  
## Examples  
 この例では、ファイル `Testfile.txt`を開き、そこから行を読み取り、`MessageBox`でその行を表示します。  
  
 [!code-vb[VbRefFile#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">ファイル名がバックスラッシュ (\\) で終わっています。</exception>
        <exception cref="T:System.IO.FileNotFoundException">指定されたファイルが見つかりません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがファイルの読み取りに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.IO.StreamReader" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenTextFileWriter">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.IO.StreamWriter" /> オブジェクトを開いて指定されたファイルに書き込みます。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenTextFileWriter">
      <MemberSignature Language="C#" Value="public static System.IO.StreamWriter OpenTextFileWriter (string file, bool append);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.StreamWriter OpenTextFileWriter(string file, bool append) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenTextFileWriter (file As String, append As Boolean) As StreamWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::StreamWriter ^ OpenTextFileWriter(System::String ^ file, bool append);" />
      <MemberSignature Language="F#" Value="static member OpenTextFileWriter : string * bool -&gt; System.IO.StreamWriter" Usage="Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter (file, append)" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.IO.StreamWriter OpenTextFileWriter(string file, bool append) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="file">書き込み先のファイル。</param>
        <param name="append">ファイルの内容を追記する場合は <see langword="True" />。ファイルの内容を上書きする場合は <see langword="False" />。 既定値は <see langword="False" /> です。</param>
        <summary><see cref="T:System.IO.StreamWriter" /> オブジェクトを開いて指定されたファイルに書き込みます。</summary>
        <returns>指定したファイルに書き込む <see cref="T:System.IO.StreamWriter" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `OpenTextFileWriter` メソッドは、ファイルのストリームを開いて初期化し、そのストリームの <xref:System.IO.StreamWriter> オブジェクトを返します。 必要に応じて何回でもストリームに書き込むことができます。終了したら、それを閉じます。  
  
> [!NOTE]
>  すべてのデータが基になるストリームに正しく書き込まれるようにするには、<xref:System.IO.StreamWriter> オブジェクトの <xref:System.IO.StreamWriter.Close%2A> メソッドを呼び出す必要があります。  
  
 少数の文字列のみをファイルに書き込む場合は、<xref:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText%2A> メソッドを使用する方が簡単な場合があります。  
  
 次の表に、`My.Computer.FileSystem.OpenTextFileWriter` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|`StreamWriter` を使用してファイルにテキストを書き込む|[方法: StreamWriter を使用してファイルにテキストを書き込む Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md)|  
  
   
  
## Examples  
 この例では、`My.Computer.FileSystem.OpenTextFileWriter` メソッドを使用して <xref:System.IO.StreamWriter> を開き、それを使用して `StreamWriter` クラスの `WriteLine` メソッドを使用してテキストファイルに文字列を書き込みます。  
  
 [!code-vb[VbRefFile#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.ArgumentException">ファイル名の末尾にスラッシュが付いています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.IO.StreamWriter" />
      </Docs>
    </Member>
    <Member MemberName="OpenTextFileWriter">
      <MemberSignature Language="C#" Value="public static System.IO.StreamWriter OpenTextFileWriter (string file, bool append, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.StreamWriter OpenTextFileWriter(string file, bool append, class System.Text.Encoding encoding) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter(System.String,System.Boolean,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::StreamWriter ^ OpenTextFileWriter(System::String ^ file, bool append, System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="static member OpenTextFileWriter : string * bool * System.Text.Encoding -&gt; System.IO.StreamWriter" Usage="Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter (file, append, encoding)" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.IO.StreamWriter OpenTextFileWriter(string file, bool append, class System.Text.Encoding encoding) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="file">書き込み先のファイル。</param>
        <param name="append">ファイルの内容を追記する場合は <see langword="True" />。ファイルの内容を上書きする場合は <see langword="False" />。 既定値は <see langword="False" /> です。</param>
        <param name="encoding">ファイルへの書き込み時に使用するエンコーディング。 既定値は ASCII です。</param>
        <summary><see cref="T:System.IO.StreamWriter" /> を開いて指定されたファイルに書き込みます。</summary>
        <returns>指定したファイルに書き込む <see cref="T:System.IO.StreamWriter" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `OpenTextFileWriter` メソッドは、ファイルのストリームを開いて初期化し、そのストリームの <xref:System.IO.StreamWriter> オブジェクトを返します。 必要に応じて何回でもストリームに書き込むことができます。終了したら、それを閉じます。  
  
> [!NOTE]
>  すべてのデータが基になるストリームに正しく書き込まれるようにするには、<xref:System.IO.StreamWriter> オブジェクトの <xref:System.IO.StreamWriter.Close%2A> メソッドを呼び出す必要があります。  
  
 少数の文字列のみをファイルに書き込む場合は、<xref:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText%2A> メソッドを使用する方が簡単な場合があります。  
  
 次の表に、`My.Computer.FileSystem.OpenTextFileWriter` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|`StreamWriter` を使用してファイルにテキストを書き込む|[方法: StreamWriter を使用してファイルにテキストを書き込む Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md)|  
  
   
  
## Examples  
 この例では、`Unicode` エンコーディングを使用して `My.Computer.FileSystem.OpenTextFileWriter` メソッドを使用して <xref:System.IO.StreamWriter> を開き、それを使用して、`StreamWriter` クラスの `WriteLine` メソッドを使用してテキストファイルに文字列を書き込みます。  
  
 [!code-vb[VbRefFile#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.ArgumentException">ファイル名の末尾にスラッシュが付いています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.IO.StreamWriter" />
      </Docs>
    </Member>
    <Member MemberName="ReadAllBytes">
      <MemberSignature Language="C#" Value="public static byte[] ReadAllBytes (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] ReadAllBytes(string file) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.ReadAllBytes(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadAllBytes (file As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ ReadAllBytes(System::String ^ file);" />
      <MemberSignature Language="F#" Value="static member ReadAllBytes : string -&gt; byte[]" Usage="Microsoft.VisualBasic.FileIO.FileSystem.ReadAllBytes file" />
      <MemberSignature Language="ILAsm" Value=".method public static unsigned int8[] ReadAllBytes(string file) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">読み取るファイル。</param>
        <summary>テキスト ファイルの内容をバイト配列として返します。</summary>
        <returns>ファイルの内容を保持する <see langword="Byte" /> 配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Computer.FileSystem` オブジェクトの `ReadAllBytes` メソッドを使用すると、バイナリファイルから読み取ることができます。 ファイルの内容は、バイト配列として返されます。  
  
 ファイル名からファイルの内容を判断しないでください。 たとえば、Form1.vb というファイルは Visual Basic のソース ファイルではない可能性もあります。 アプリケーションでデータを使用する前に、入力をすべて検証してください。  
  
 次の表に、`My.Computer.FileSystem.ReadAllBytes` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|バイナリ ファイルからの読み取り|[方法: Visual Basic でバイナリファイルを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-binary-files.md)|  
  
   
  
## Examples  
 この例では、ファイルから読み取り `C:/Documents and Settings/selfportrait.jpg.`  
  
 [!code-vb[VbVbcnMyFileSystem#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\\\.\\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" /> は <see langword="Nothing" /> です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
        <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.OutOfMemoryException">文字列をバッファーに書き込むための十分なメモリがありません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadAllText">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>テキスト ファイルの内容を <see langword="String" /> として返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadAllText">
      <MemberSignature Language="C#" Value="public static string ReadAllText (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ReadAllText(string file) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadAllText (file As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ReadAllText(System::String ^ file);" />
      <MemberSignature Language="F#" Value="static member ReadAllText : string -&gt; string" Usage="Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText file" />
      <MemberSignature Language="ILAsm" Value=".method public static string ReadAllText(string file) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">読み取るファイルの名前とパス。</param>
        <summary>テキスト ファイルの内容を <see langword="String" /> として返します。</summary>
        <returns>ファイルの内容を保持する <see langword="String" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ReadAllText` オブジェクトの `My.Computer.FileSystem` メソッドを使用すると、テキスト ファイルを読み取ることができます。 ファイルの内容は文字列として返されます。  
  
 ファイルの内容が ASCII や UTF-8 などのエンコーディングに含まれる場合は、ファイルのエンコーディングを指定できます。 拡張文字を含むファイルから読み取る場合は、<xref:Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText%2A> メソッドの別のオーバーロードを使用して、ファイルのエンコードを指定する必要があります。  
  
 ファイル名からファイルの内容を判断しないでください。 たとえば、Form1.vb というファイルは Visual Basic のソース ファイルではない可能性もあります。 アプリケーションでデータを使用する前に、入力をすべて検証してください。  
  
 次の表に、`My.Computer.FileSystem.ReadAllText` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|テキスト ファイルからの読み取り|[方法: Visual Basic でテキストファイルを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files.md)|  
  
   
  
## Examples  
 この例では、`Test.txt` の内容を文字列に読み取り、メッセージボックスに表示します。  
  
 [!code-vb[VbRefFile#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#8)]  
  
 この例では、ASCII ファイル `Test.txt` の内容を文字列に読み取り、メッセージボックスに表示します。  
  
 [!code-vb[VbRefFile#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\\\.\\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" /> は <see langword="Nothing" /> です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
        <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.OutOfMemoryException">文字列をバッファーに書き込むための十分なメモリがありません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText" />
        <altmember cref="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)" />
      </Docs>
    </Member>
    <Member MemberName="ReadAllText">
      <MemberSignature Language="C#" Value="public static string ReadAllText (string file, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ReadAllText(string file, class System.Text.Encoding encoding) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText(System.String,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ReadAllText(System::String ^ file, System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="static member ReadAllText : string * System.Text.Encoding -&gt; string" Usage="Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText (file, encoding)" />
      <MemberSignature Language="ILAsm" Value=".method public static string ReadAllText(string file, class System.Text.Encoding encoding) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="file">読み取るファイルの名前とパス。</param>
        <param name="encoding">ファイルの読み取り時に使用する文字エンコーディング。 既定値は、UTF-8 です。</param>
        <summary>テキスト ファイルの内容を <see langword="String" /> として返します。</summary>
        <returns>ファイルの内容を保持する <see langword="String" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ReadAllText` オブジェクトの `My.Computer.FileSystem` メソッドを使用すると、テキスト ファイルを読み取ることができます。 ファイルの内容は文字列として返されます。  
  
 ファイルの内容が ASCII や UTF-8 などのエンコーディングに含まれる場合は、ファイルのエンコーディングを指定できます。 拡張文字を使用してファイルを読み取る場合は、ファイルのエンコードを指定する必要があります。  
  
 ファイル名からファイルの内容を判断しないでください。 たとえば、Form1.vb というファイルは Visual Basic のソース ファイルではない可能性もあります。 アプリケーションでデータを使用する前に、入力をすべて検証してください。  
  
 次の表に、`My.Computer.FileSystem.ReadAllText` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|テキスト ファイルからの読み取り|[方法: Visual Basic でテキストファイルを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files.md)|  
  
   
  
## Examples  
 この例では、`Test.txt` の内容を文字列に読み取り、メッセージボックスに表示します。  
  
 [!code-vb[VbRefFile#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#8)]  
  
 この例では、ASCII ファイル `Test.txt` の内容を文字列に読み取り、メッセージボックスに表示します。  
  
 [!code-vb[VbRefFile#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\\\.\\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" /> は <see langword="Nothing" /> です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
        <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.OutOfMemoryException">文字列をバッファーに書き込むための十分なメモリがありません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)" />
      </Docs>
    </Member>
    <Member MemberName="RenameDirectory">
      <MemberSignature Language="C#" Value="public static void RenameDirectory (string directory, string newName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RenameDirectory(string directory, string newName) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.RenameDirectory(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RenameDirectory (directory As String, newName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RenameDirectory(System::String ^ directory, System::String ^ newName);" />
      <MemberSignature Language="F#" Value="static member RenameDirectory : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.RenameDirectory (directory, newName)" />
      <MemberSignature Language="ILAsm" Value=".method public static void RenameDirectory(string directory, string newName) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="newName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">名前を変更するディレクトリのパスおよび名前。</param>
        <param name="newName">ディレクトリの新しい名前。</param>
        <summary>ディレクトリ名を変更します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用してディレクトリを移動することはできません。`MoveDirectory` メソッドを使用して、ディレクトリの移動と名前変更を行います。  
  
   
  
## Examples  
 この例では、`Test` ディレクトリの名前を `SecondTest`に変更します。  
  
 [!code-vb[VbVbcnMyFileSystem#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="newName" /> にパス情報が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" /> は <see langword="Nothing" /> です。  
  
または 
 <paramref name="newName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">ディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="newName" /> で指定したのと同じ名前のファイルまたはディレクトリが既に存在します。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory" />
      </Docs>
    </Member>
    <Member MemberName="RenameFile">
      <MemberSignature Language="C#" Value="public static void RenameFile (string file, string newName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RenameFile(string file, string newName) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.RenameFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RenameFile (file As String, newName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RenameFile(System::String ^ file, System::String ^ newName);" />
      <MemberSignature Language="F#" Value="static member RenameFile : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.RenameFile (file, newName)" />
      <MemberSignature Language="ILAsm" Value=".method public static void RenameFile(string file, string newName) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="newName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">名前を変更するファイル。</param>
        <param name="newName">新しいファイル名。</param>
        <summary>ファイル名を変更します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、ファイルを移動する目的には使用できません。ファイルを移動して名前を変更するには、<xref:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile%2A> メソッドを使用してください。  
  
 次の表に、`My.Computer.FileSystem.RenameFile` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|ファイルの名前を変更する|[方法: Visual Basic 内のファイルの名前を変更する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md)|  
  
   
  
## Examples  
 この例では、`Test.txt` ファイルの名前を `SecondTest.txt`に変更します。  
  
 [!code-vb[VbVbcnMyFileSystem#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#1)]  
  
 名前を変更するファイルのパスとファイル名に "`C:\Test.txt`" を変更します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="newName" /> にパス情報が含まれているか、末尾にバックスラッシュ (\\) が付いています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" /> は <see langword="Nothing" /> です。  
  
または 
 <paramref name="newName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="newName" /> で指定したのと同じ名前のファイルまたはディレクトリが既に存在します。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName="WriteAllBytes">
      <MemberSignature Language="C#" Value="public static void WriteAllBytes (string file, byte[] data, bool append);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteAllBytes(string file, unsigned int8[] data, bool append) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllBytes(System.String,System.Byte[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteAllBytes (file As String, data As Byte(), append As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteAllBytes(System::String ^ file, cli::array &lt;System::Byte&gt; ^ data, bool append);" />
      <MemberSignature Language="F#" Value="static member WriteAllBytes : string * byte[] * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.WriteAllBytes (file, data, append)" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteAllBytes(string file, unsigned int8[] data, bool append) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="append" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="file">書き込み先のファイルのパスと名前。</param>
        <param name="data">ファイルに書き込むデータ。</param>
        <param name="append">ファイルの内容を追記する場合は <see langword="True" />。ファイルの内容を上書きする場合は <see langword="False" />。 既定値は <see langword="False" /> です。</param>
        <summary>バイナリ ファイルにデータを書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定されたパス (ファイル名を除く) が有効でない場合は、<xref:System.IO.DirectoryNotFoundException> 例外がスローされます。 パスが有効であってもファイルが存在しない場合は、ファイルが作成されます。  
  
> [!NOTE]
>  `WriteAllBytes` メソッドは、ファイルを開き、書き込んでから閉じます。 `WriteAllBytes` メソッドを使用するコードは、<xref:System.IO.BinaryWriter> オブジェクトを使用するコードよりも簡単です。 ただし、ループを使用してデータをファイルに追加する場合は、ファイルを一度だけ開いて閉じなければならないため、<xref:System.IO.BinaryWriter> オブジェクトの方がパフォーマンスが向上する可能性があります。  
  
 次の表に、`My.Computer.FileSystem.WriteAllBytes` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|バイナリ ファイルへの書き込み|[方法: Visual Basic でバイナリファイルに書き込む](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-to-binary-files.md)|  
  
   
  
## Examples  
 この例では、データ配列 `CustomerData` をファイル `CollectedData`に追加します。  
  
 [!code-vb[VbVbcnMyFileSystem#50](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\\\.\\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" /> は <see langword="Nothing" /> です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
        <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.OutOfMemoryException">文字列をバッファーに書き込むための十分なメモリがありません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteAllText">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ファイルにテキストを書き込みます。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteAllText">
      <MemberSignature Language="C#" Value="public static void WriteAllText (string file, string text, bool append);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteAllText(string file, string text, bool append) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteAllText (file As String, text As String, append As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteAllText(System::String ^ file, System::String ^ text, bool append);" />
      <MemberSignature Language="F#" Value="static member WriteAllText : string * string * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText (file, text, append)" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteAllText(string file, string text, bool append) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="file">書き込み先のファイル。</param>
        <param name="text">ファイルに書き込まれるテキスト。</param>
        <param name="append">ファイルの内容を追記する場合は <see langword="True" />。ファイルの内容を上書きする場合は <see langword="False" />。</param>
        <summary>ファイルにテキストを書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 UTF-8 エンコーディングは、ファイルへの書き込みに使用されます。 別のエンコードを指定するには、<xref:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText%2A> メソッドの別のオーバーロードを使用します。  
  
 指定したファイルが存在しない場合は、作成されます。  
  
 指定したエンコーディングがファイルの既存のエンコーディングと一致しない場合、指定されたコードは無視されます。  
  
> [!NOTE]
>  `WriteAllText` メソッドは、ファイルを開き、書き込んでから閉じます。 `WriteAllText` メソッドを使用するコードは、<xref:System.IO.StreamWriter> オブジェクトを使用するコードよりも簡単です。 ただし、ループを使用してファイルに文字列を追加する場合は、ファイルを1回だけ開いて閉じる必要があるため、<xref:System.IO.StreamWriter> オブジェクトを使用するとパフォーマンスが向上します。 詳細については、<xref:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter%2A> メソッドを参照してください。  
  
 次の表に、`My.Computer.FileSystem.WriteAllText` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|テキストのファイルへの書き込み|[方法: Visual Basic 内のファイルにテキストを書き込む](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md)|  
|ファイルへのテキストの追加|[方法: Visual Basic でテキストファイルに追加する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-append-to-text-files.md)|  
  
   
  
## Examples  
 この例では、`"This is new text to be added."` 行をファイル `Test.txt`に書き込み、ファイル内の既存のテキストを上書きします。  
  
 [!code-vb[VbRefFile#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#21)]  
  
 この例では、`Documents and Settings` フォルダー内のファイルの名前を `FileList.txt`に書き込み、それぞれの間にキャリッジリターンを挿入して読みやすくします。  
  
 [!code-vb[VbRefFile#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\\\.\\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" /> は <see langword="Nothing" /> です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
        <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.OutOfMemoryException">文字列をバッファーに書き込むための十分なメモリがありません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText" />
      </Docs>
    </Member>
    <Member MemberName="WriteAllText">
      <MemberSignature Language="C#" Value="public static void WriteAllText (string file, string text, bool append, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteAllText(string file, string text, bool append, class System.Text.Encoding encoding) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText(System.String,System.String,System.Boolean,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteAllText(System::String ^ file, System::String ^ text, bool append, System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="static member WriteAllText : string * string * bool * System.Text.Encoding -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText (file, text, append, encoding)" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteAllText(string file, string text, bool append, class System.Text.Encoding encoding) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="file">書き込み先のファイル。</param>
        <param name="text">ファイルに書き込まれるテキスト。</param>
        <param name="append">ファイルの内容を追記する場合は <see langword="True" />。ファイルの内容を上書きする場合は <see langword="False" />。</param>
        <param name="encoding">ファイルへの書き込み時に使用するエンコーディングを指定します。</param>
        <summary>ファイルにテキストを書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定したファイルが存在しない場合は、作成されます。  
  
 指定したエンコーディングがファイルの既存のエンコーディングと一致しない場合、指定されたコードは無視されます。  
  
> [!NOTE]
>  `WriteAllText` メソッドは、ファイルを開き、書き込んでから閉じます。 `WriteAllText` メソッドを使用するコードは、<xref:System.IO.StreamWriter> オブジェクトを使用するコードよりも簡単です。 ただし、ループを使用してファイルに文字列を追加する場合は、ファイルを1回だけ開いて閉じる必要があるため、<xref:System.IO.StreamWriter> オブジェクトを使用するとパフォーマンスが向上します。 詳細については、<xref:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter%2A> メソッドを参照してください。  
  
 次の表に、`My.Computer.FileSystem.WriteAllText` メソッドに関連するタスクの例を示します。  
  
|目的|参照トピック|  
|-|-|  
|テキストのファイルへの書き込み|[方法: Visual Basic 内のファイルにテキストを書き込む](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md)|  
|ファイルへのテキストの追加|[方法: Visual Basic でテキストファイルに追加する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-append-to-text-files.md)|  
  
   
  
## Examples  
 この例では、`"This is new text to be added."` 行をファイル `Test.txt`に書き込み、ファイル内の既存のテキストを上書きします。  
  
 [!code-vb[VbRefFile#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#21)]  
  
 この例では、`Documents and Settings` フォルダー内のファイルの名前を `FileList.txt`に書き込み、それぞれの間にキャリッジリターンを挿入して読みやすくします。  
  
 [!code-vb[VbRefFile#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\\\.\\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" /> は <see langword="Nothing" /> です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
        <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.OutOfMemoryException">文字列をバッファーに書き込むための十分なメモリがありません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
  </Members>
</Type>
