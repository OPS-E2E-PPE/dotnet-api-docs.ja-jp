<Type Name="Timer" FullName="System.Timers.Timer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="df3f299ae8f19cc6399ce7c60a24fc1264c5af28" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83978897" /></Metadata><TypeSignature Language="C#" Value="public class Timer : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Timer extends System.ComponentModel.Component implements class System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="DocId" Value="T:System.Timers.Timer" />
  <TypeSignature Language="VB.NET" Value="Public Class Timer&#xA;Inherits Component&#xA;Implements ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer : System::ComponentModel::Component, System::ComponentModel::ISupportInitialize" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit Component&#xA;    interface ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.ComponentModel.TypeConverter" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
      <AttributeName>System.ComponentModel.DefaultEvent("Elapsed")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
      <AttributeName>System.ComponentModel.DefaultProperty("Interval")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="f4a96-101">一定の間隔の経過後にイベントを生成します。オプションとして、反復イベントを生成することもできます。</span><span class="sxs-lookup"><span data-stu-id="f4a96-101">Generates an event after a set interval, with an option to generate recurring events.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f4a96-102"><xref:System.Timers.Timer> コンポーネントは、<xref:System.Timers.Timer.Interval%2A> プロパティのミリ秒数が経過した後にアプリケーションで <xref:System.Timers.Timer.Elapsed> イベントを発生させるサーバーベースのタイマーです。</span><span class="sxs-lookup"><span data-stu-id="f4a96-102">The <xref:System.Timers.Timer> component is a server-based timer that raises an <xref:System.Timers.Timer.Elapsed> event in your application after the number of milliseconds in the <xref:System.Timers.Timer.Interval%2A> property has elapsed.</span></span> <span data-ttu-id="f4a96-103"><xref:System.Timers.Timer> オブジェクトを構成して、イベントを1回だけ発生させるか、<xref:System.Timers.Timer.AutoReset%2A> プロパティを使用して繰り返し発生させることができます。</span><span class="sxs-lookup"><span data-stu-id="f4a96-103">You can configure the <xref:System.Timers.Timer> object to raise the event just once or repeatedly using the <xref:System.Timers.Timer.AutoReset%2A> property.</span></span> <span data-ttu-id="f4a96-104">通常、<xref:System.Timers.Timer> オブジェクトはクラスレベルで宣言されるので、必要な限りスコープ内にとどまります。</span><span class="sxs-lookup"><span data-stu-id="f4a96-104">Typically, a <xref:System.Timers.Timer> object is declared at the class level so that it stays in scope as long as it is needed.</span></span> <span data-ttu-id="f4a96-105">その後、その <xref:System.Timers.Timer.Elapsed> イベントを処理して、通常の処理を提供できます。</span><span class="sxs-lookup"><span data-stu-id="f4a96-105">You can then handle its <xref:System.Timers.Timer.Elapsed> event to provide regular processing.</span></span> <span data-ttu-id="f4a96-106">たとえば、1日24時間、週7日、稼働状態を維持する必要がある重要なサーバーがあるとします。</span><span class="sxs-lookup"><span data-stu-id="f4a96-106">For example, suppose you have a critical server that must be kept running 24 hours a day, 7 days a week.</span></span> <span data-ttu-id="f4a96-107"><xref:System.Timers.Timer> オブジェクトを使用してサーバーを定期的にチェックし、システムが稼働していることを確認するサービスを作成できます。</span><span class="sxs-lookup"><span data-stu-id="f4a96-107">You could create a service that uses a <xref:System.Timers.Timer> object to periodically check the server and ensure that the system is up and running.</span></span> <span data-ttu-id="f4a96-108">システムが応答していない場合、サービスはサーバーの再起動または管理者への通知を試みることができます。</span><span class="sxs-lookup"><span data-stu-id="f4a96-108">If the system is not responding, the service could attempt to restart the server or notify an administrator.</span></span>  
  
> [!IMPORTANT]
> <span data-ttu-id="f4a96-109"><xref:System.Timers.Timer> クラスは、.NET Standard 1.6 などのすべての .NET 実装とバージョンで使用できるわけではありません。</span><span class="sxs-lookup"><span data-stu-id="f4a96-109">The <xref:System.Timers.Timer> class is not available for all .NET implementations and versions, such as .NET Standard 1.6 and lower versions.</span></span>
> <span data-ttu-id="f4a96-110">このような場合は、代わりに <xref:System.Threading.Timer?displayProperty=nameWithType> クラスを使用できます。</span><span class="sxs-lookup"><span data-stu-id="f4a96-110">In these cases, you can use the <xref:System.Threading.Timer?displayProperty=nameWithType> class instead.</span></span>
  
 <span data-ttu-id="f4a96-111">この型は <xref:System.IDisposable> インターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-111">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="f4a96-112">型の使用が完了したら、直接的または間接的に型を破棄する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f4a96-112">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="f4a96-113">直接的に型を破棄するには、`try` / `catch` ブロック内で <xref:System.IDisposable.Dispose%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-113">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="f4a96-114">間接的に型を破棄するには、`using` (C# の場合) または `Using` (Visual Basic 言語) などの言語構成要素を使用します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-114">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="f4a96-115">詳細については、<xref:System.IDisposable> インターフェイスに関するトピック内の「IDisposable を実装するオブジェクトの使用」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="f4a96-115">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="f4a96-116">サーバーベースの <xref:System.Timers.Timer?displayProperty=nameWithType> クラスは、マルチスレッド環境のワーカースレッドで使用するように設計されています。</span><span class="sxs-lookup"><span data-stu-id="f4a96-116">The server-based <xref:System.Timers.Timer?displayProperty=nameWithType> class is designed for use with worker threads in a multithreaded environment.</span></span> <span data-ttu-id="f4a96-117">サーバータイマーは、発生した <xref:System.Timers.Timer.Elapsed> イベントを処理するためにスレッド間を移動できます。その結果、イベントを発生させるときの Windows タイマーよりも精度が向上します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-117">Server timers can move among threads to handle the raised <xref:System.Timers.Timer.Elapsed> event, resulting in more accuracy than Windows timers in raising the event on time.</span></span>  
  
 <span data-ttu-id="f4a96-118"><xref:System.Timers.Timer?displayProperty=nameWithType> コンポーネントは、<xref:System.Timers.Timer.Interval%2A> プロパティの値 (ミリ秒単位) に基づいて、<xref:System.Timers.Timer.Elapsed> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="f4a96-118">The <xref:System.Timers.Timer?displayProperty=nameWithType> component raises the <xref:System.Timers.Timer.Elapsed> event, based on the value (in milliseconds) of the <xref:System.Timers.Timer.Interval%2A> property.</span></span> <span data-ttu-id="f4a96-119">このイベントを処理して、必要な処理を実行できます。</span><span class="sxs-lookup"><span data-stu-id="f4a96-119">You can handle this event to perform the processing you need.</span></span> <span data-ttu-id="f4a96-120">たとえば、販売注文をデータベースに継続的にポストするオンライン販売アプリケーションがあるとします。</span><span class="sxs-lookup"><span data-stu-id="f4a96-120">For example, suppose that you have an online sales application that continuously posts sales orders to a database.</span></span> <span data-ttu-id="f4a96-121">出荷の指示をコンパイルするサービスは、各注文を個別に処理するのではなく、注文のバッチで動作します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-121">The service that compiles the instructions for shipping operates on a batch of orders rather than processing each order individually.</span></span> <span data-ttu-id="f4a96-122"><xref:System.Timers.Timer> を使用して、30分ごとにバッチ処理を開始することができます。</span><span class="sxs-lookup"><span data-stu-id="f4a96-122">You could use a <xref:System.Timers.Timer> to start the batch processing every 30 minutes.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f4a96-123">System.string クラスには、システムクロックと同じ解決策があります。</span><span class="sxs-lookup"><span data-stu-id="f4a96-123">The System.Timers.Timer class has the same resolution as the system clock.</span></span> <span data-ttu-id="f4a96-124">これは、<xref:System.Timers.Timer.Interval%2A> プロパティがシステムクロックの解像度よりも小さい場合に、システムクロックの解決によって定義された間隔で <xref:System.Timers.Timer.Elapsed> イベントが発生することを意味します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-124">This means that the <xref:System.Timers.Timer.Elapsed> event will fire at an interval defined by the resolution of the system clock if the <xref:System.Timers.Timer.Interval%2A> property is less than the resolution of the system clock.</span></span> <span data-ttu-id="f4a96-125">詳細については、<xref:System.Timers.Timer.Interval%2A> プロパティを参照してください。</span><span class="sxs-lookup"><span data-stu-id="f4a96-125">For more information, see the <xref:System.Timers.Timer.Interval%2A> property.</span></span>  
  
 <span data-ttu-id="f4a96-126"><xref:System.Timers.Timer.AutoReset%2A> が `false`に設定されている場合、最初の <xref:System.Timers.Timer.Interval%2A> が経過した後に、<xref:System.Timers.Timer?displayProperty=nameWithType> オブジェクトによって <xref:System.Timers.Timer.Elapsed> イベントが1回だけ発生します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-126">When <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, a <xref:System.Timers.Timer?displayProperty=nameWithType> object raises the <xref:System.Timers.Timer.Elapsed> event only once, after the first <xref:System.Timers.Timer.Interval%2A> has elapsed.</span></span> <span data-ttu-id="f4a96-127"><xref:System.Timers.Timer.Interval%2A>によって定義された間隔で <xref:System.Timers.Timer.Elapsed> イベントが定期的に発生するようにするには、<xref:System.Timers.Timer.AutoReset%2A> を `true`に設定します。これは既定値です。</span><span class="sxs-lookup"><span data-stu-id="f4a96-127">To keep raising the <xref:System.Timers.Timer.Elapsed> event regularly at the interval defined by the <xref:System.Timers.Timer.Interval%2A>, set <xref:System.Timers.Timer.AutoReset%2A> to `true`, which is the default value.</span></span>  
  
 <span data-ttu-id="f4a96-128"><xref:System.Timers.Timer> コンポーネントは、<xref:System.Timers.Timer.Elapsed> イベントのイベントハンドラーによってスローされたすべての例外をキャッチし、抑制します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-128">The <xref:System.Timers.Timer> component catches and suppresses all exceptions thrown by event handlers for the <xref:System.Timers.Timer.Elapsed> event.</span></span> <span data-ttu-id="f4a96-129">この動作は、.NET Framework の今後のリリースで変更される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f4a96-129">This behavior is subject to change in future releases of the .NET Framework.</span></span> <span data-ttu-id="f4a96-130">ただし、これは非同期に実行されるイベントハンドラーには当てはまりません。また、`await` 演算子C#(では) または `Await` 演算子 (Visual Basic) が含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="f4a96-130">Note, however, that this is not true of event handlers that execute asynchronously and include the `await` operator (in C#)  or the `Await` operator (in Visual Basic).</span></span> <span data-ttu-id="f4a96-131">これらのイベントハンドラーでスローされる例外は、次の例に示すように、呼び出し元のスレッドに反映されます。</span><span class="sxs-lookup"><span data-stu-id="f4a96-131">Exceptions thrown in these event handlers are propagated back to the calling thread, as the following example illustrates.</span></span> <span data-ttu-id="f4a96-132">非同期メソッドでスローされる例外の詳細については、「[例外処理](/dotnet/standard/parallel-programming/exception-handling-task-parallel-library)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f4a96-132">For more information on exceptions thrown in asynchronous methods, see   [Exception Handling](/dotnet/standard/parallel-programming/exception-handling-task-parallel-library).</span></span>  
  
 [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]
 [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  
  
 <span data-ttu-id="f4a96-133"><xref:System.Timers.Timer.SynchronizingObject%2A> プロパティが `null`場合、<xref:System.Threading.ThreadPool> スレッドで <xref:System.Timers.Timer.Elapsed> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-133">If the <xref:System.Timers.Timer.SynchronizingObject%2A> property is `null`, the <xref:System.Timers.Timer.Elapsed> event is raised on a <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="f4a96-134"><xref:System.Timers.Timer.Elapsed> イベントの処理時間が <xref:System.Timers.Timer.Interval%2A>よりも長い場合は、別の <xref:System.Threading.ThreadPool> スレッドでイベントが再度発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f4a96-134">If processing of the <xref:System.Timers.Timer.Elapsed> event lasts longer than <xref:System.Timers.Timer.Interval%2A>, the event might be raised again on another <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="f4a96-135">この場合、イベントハンドラーは再入可能である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f4a96-135">In this situation, the event handler should be reentrant.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f4a96-136">イベント処理メソッドは、別のスレッドが <xref:System.Timers.Timer.Stop%2A> メソッドを呼び出したとき、または <xref:System.Timers.Timer.Enabled%2A> プロパティを `false`に設定したときに、1つのスレッドで実行されることがあります。</span><span class="sxs-lookup"><span data-stu-id="f4a96-136">The event-handling method might run on one thread at the same time that another thread calls the <xref:System.Timers.Timer.Stop%2A> method or sets the <xref:System.Timers.Timer.Enabled%2A> property to `false`.</span></span> <span data-ttu-id="f4a96-137">これにより、タイマーが停止した後に <xref:System.Timers.Timer.Elapsed> イベントが発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f4a96-137">This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the timer is stopped.</span></span> <span data-ttu-id="f4a96-138">コードの使用例、<xref:System.Timers.Timer.Stop%2A>メソッドは、この競合状態を回避するために 1 つのメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="f4a96-138">The example code for the <xref:System.Timers.Timer.Stop%2A> method shows one way to avoid this race condition.</span></span>  
  
 <span data-ttu-id="f4a96-139"><xref:System.Timers.Timer.SynchronizingObject%2A> が `null`されていない場合でも、<xref:System.Timers.Timer.Dispose%2A> または <xref:System.Timers.Timer.Stop%2A> メソッドが呼び出された後、または <xref:System.Timers.Timer.Enabled%2A> プロパティが `false`に設定された後に、<xref:System.Timers.Timer.Elapsed> イベントが発生する可能性があります。これは、<xref:System.Timers.Timer.Elapsed> イベントを発生させるシグナルが、スレッドプールのスレッドで実行するために常にキューに入れられるためです。</span><span class="sxs-lookup"><span data-stu-id="f4a96-139">Even if <xref:System.Timers.Timer.SynchronizingObject%2A> is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread.</span></span> <span data-ttu-id="f4a96-140">この競合状態がのイベント ハンドラーを示すフラグを設定するには解決するのには 1 つのメソッド、<xref:System.Timers.Timer.Elapsed>後続のイベントを無視するイベントです。</span><span class="sxs-lookup"><span data-stu-id="f4a96-140">One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.</span></span>  
  
 <span data-ttu-id="f4a96-141">ユーザーインターフェイス要素にタイマーを配置せずに、フォームやコントロールなどのユーザーインターフェイス要素で <xref:System.Timers.Timer?displayProperty=nameWithType> クラスを使用する場合は、<xref:System.Timers.Timer> を含むフォームまたはコントロールを <xref:System.Timers.Timer.SynchronizingObject%2A> プロパティに割り当てて、イベントがユーザーインターフェイススレッドにマーシャリングされるようにします。</span><span class="sxs-lookup"><span data-stu-id="f4a96-141">If you use the <xref:System.Timers.Timer?displayProperty=nameWithType> class with a user interface element, such as a form or control, without placing the timer on that user interface element, assign the form or control that contains the <xref:System.Timers.Timer> to the <xref:System.Timers.Timer.SynchronizingObject%2A> property, so that the event is marshaled to the user interface thread.</span></span>  
  
 <span data-ttu-id="f4a96-142"><xref:System.Timers.Timer>のインスタンスの既定のプロパティ値の一覧については、<xref:System.Timers.Timer.%23ctor%2A> コンストラクターを参照してください。</span><span class="sxs-lookup"><span data-stu-id="f4a96-142">For a list of default property values for an instance of <xref:System.Timers.Timer>, see the <xref:System.Timers.Timer.%23ctor%2A> constructor.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="f4a96-143">.NET には `Timer`という4つのクラスが含まれており、それぞれに異なる機能が用意されています。</span><span class="sxs-lookup"><span data-stu-id="f4a96-143">Be aware that .NET includes four classes named `Timer`, each of which offers different functionality:</span></span>  
>   
> - <span data-ttu-id="f4a96-144"><xref:System.Timers.Timer?displayProperty=nameWithType> (このトピック): 一定の間隔でイベントを発生します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-144"><xref:System.Timers.Timer?displayProperty=nameWithType> (this topic): fires an event at regular intervals.</span></span> <span data-ttu-id="f4a96-145">クラスは、マルチスレッド環境でサーバーベースまたはサービスコンポーネントとして使用することを目的としています。ユーザーインターフェイスはなく、実行時には表示されません。</span><span class="sxs-lookup"><span data-stu-id="f4a96-145">The class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</span></span>  
> - <span data-ttu-id="f4a96-146"><xref:System.Threading.Timer?displayProperty=nameWithType>: スレッドプールのスレッドで定期的に1つのコールバックメソッドを実行します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-146"><xref:System.Threading.Timer?displayProperty=nameWithType>: executes a single callback method on a thread pool thread at regular intervals.</span></span> <span data-ttu-id="f4a96-147">コールバックメソッドは、タイマーがインスタンス化され、変更できないときに定義されます。</span><span class="sxs-lookup"><span data-stu-id="f4a96-147">The callback method is defined when the timer is instantiated and cannot be changed.</span></span> <span data-ttu-id="f4a96-148">このクラスは <xref:System.Timers.Timer?displayProperty=nameWithType> クラスと同様に、マルチスレッド環境でサーバーベースまたはサービスコンポーネントとして使用することを意図しています。ユーザーインターフェイスはなく、実行時には表示されません。</span><span class="sxs-lookup"><span data-stu-id="f4a96-148">Like the <xref:System.Timers.Timer?displayProperty=nameWithType> class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</span></span>  
> - <span data-ttu-id="f4a96-149"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (.NET Framework のみ): 一定の間隔でイベントを発生させる Windows フォームコンポーネント。</span><span class="sxs-lookup"><span data-stu-id="f4a96-149"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (.NET Framework only): a Windows Forms component that fires an event at regular intervals.</span></span> <span data-ttu-id="f4a96-150">このコンポーネントにはユーザー インターフェイスがなく、シングルスレッド環境で使用するように設計されています。</span><span class="sxs-lookup"><span data-stu-id="f4a96-150">The component has no user interface and is designed for use in a single-threaded environment.</span></span>  
> - <span data-ttu-id="f4a96-151"><xref:System.Web.UI.Timer?displayProperty=nameWithType> (.NET Framework のみ): 非同期または同期 web ページのポストバックを一定の間隔で実行する ASP.NET コンポーネント。</span><span class="sxs-lookup"><span data-stu-id="f4a96-151"><xref:System.Web.UI.Timer?displayProperty=nameWithType> (.NET Framework only): an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval.</span></span>  

## Examples  
 <span data-ttu-id="f4a96-152">次の例では、2秒 (2000 ミリ秒) ごとに <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> イベントを発生させる `System.Timers.Timer` オブジェクトをインスタンス化し、イベントのイベントハンドラーを設定して、タイマーを開始します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-152">The following example instantiates a `System.Timers.Timer` object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2,000 milliseconds), sets up an event handler for the  event, and starts the timer.</span></span> <span data-ttu-id="f4a96-153">イベントハンドラーは、発生するたびに <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> プロパティの値を表示します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-153">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-csharp[System.Timers.Timer#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]
 [!code-vb[System.Timers.Timer#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="f4a96-154">この型のパブリック <see langword="static" /> メンバーはすべて、スレッドセーフです。</span><span class="sxs-lookup"><span data-stu-id="f4a96-154">Any public <see langword="static" /> members of this type are thread safe.</span></span> <span data-ttu-id="f4a96-155">インスタンス メンバーの場合は、スレッド セーフであるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="f4a96-155">Any instance members are not guaranteed to be thread safe.</span></span></threadsafe>
    <altmember cref="P:System.Timers.Timer.AutoReset" />
    <altmember cref="P:System.Timers.Timer.Interval" />
    <altmember cref="E:System.Timers.Timer.Elapsed" />
    <altmember cref="M:System.Timers.Timer.#ctor" />
    <altmember cref="T:System.Threading.Timer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f4a96-156"><see cref="T:System.Timers.Timer" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-156">Initializes a new instance of the <see cref="T:System.Timers.Timer" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f4a96-157"><see cref="T:System.Timers.Timer" /> クラスの新しいインスタンスを初期化し、すべてのプロパティを初期値に設定します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-157">Initializes a new instance of the <see cref="T:System.Timers.Timer" /> class, and sets all the properties to their initial values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f4a96-158">次の表に、<xref:System.Timers.Timer>のインスタンスのプロパティの初期値を示します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-158">The following table shows initial property values for an instance of <xref:System.Timers.Timer>.</span></span>  
  
|<span data-ttu-id="f4a96-159">プロパティ</span><span class="sxs-lookup"><span data-stu-id="f4a96-159">Property</span></span>|<span data-ttu-id="f4a96-160">初期値</span><span class="sxs-lookup"><span data-stu-id="f4a96-160">Initial value</span></span>|  
|--------------|-------------------|  
|<xref:System.Timers.Timer.AutoReset%2A>|`true`|  
|<xref:System.Timers.Timer.Enabled%2A>|`false`|  
|<xref:System.Timers.Timer.Interval%2A>|<span data-ttu-id="f4a96-161">100 ミリ秒</span><span class="sxs-lookup"><span data-stu-id="f4a96-161">100 milliseconds</span></span>|  
|<xref:System.Timers.Timer.SynchronizingObject%2A>|<span data-ttu-id="f4a96-162">null 参照 (Visual Basic の場合は `Nothing`)。</span><span class="sxs-lookup"><span data-stu-id="f4a96-162">A null reference (`Nothing` in Visual Basic).</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="f4a96-163">次の例では、2秒 (2000 ミリ秒) ごとに <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> イベントを発生させる <xref:System.Timers.Timer> オブジェクトをインスタンス化し、イベントのイベントハンドラーを設定して、タイマーを開始します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-163">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</span></span> <span data-ttu-id="f4a96-164">イベントハンドラーは、発生するたびに <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> プロパティの値を表示します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-164">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.SynchronizingObject" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (double interval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 interval) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.#ctor(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (interval As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(double interval);" />
      <MemberSignature Language="F#" Value="new System.Timers.Timer : double -&gt; System.Timers.Timer" Usage="new System.Timers.Timer interval" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="interval" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="interval"><span data-ttu-id="f4a96-165">ミリ秒単位でのイベントの発生間隔。</span><span class="sxs-lookup"><span data-stu-id="f4a96-165">The time, in milliseconds, between events.</span></span> <span data-ttu-id="f4a96-166">この値はゼロより大きく、<see cref="F:System.Int32.MaxValue" /> 以下である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f4a96-166">The value must be greater than zero and less than or equal to <see cref="F:System.Int32.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="f4a96-167"><see cref="T:System.Timers.Timer" /> クラスの新しいインスタンスを初期化し、<see cref="P:System.Timers.Timer.Interval" /> プロパティを指定したミリ秒数に設定します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-167">Initializes a new instance of the <see cref="T:System.Timers.Timer" /> class, and sets the <see cref="P:System.Timers.Timer.Interval" /> property to the specified number of milliseconds.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f4a96-168">このコンストラクターは、新しいタイマーインスタンスの <xref:System.Timers.Timer.Interval%2A> プロパティを設定しますが、タイマーを有効にしません。</span><span class="sxs-lookup"><span data-stu-id="f4a96-168">This constructor sets the <xref:System.Timers.Timer.Interval%2A> property of the new timer instance, but does not enable the timer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f4a96-169">次の例では、2秒 (2000 ミリ秒) ごとに <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> イベントを発生させる <xref:System.Timers.Timer> オブジェクトをインスタンス化し、イベントのイベントハンドラーを設定して、タイマーを開始します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-169">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</span></span> <span data-ttu-id="f4a96-170">イベントハンドラーは、発生するたびに <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> プロパティの値を表示します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-170">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]
 [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a96-171"><paramref name="interval" /> パラメーターの値は 0 以下か、または <see cref="F:System.Int32.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="f4a96-171">The value of the <paramref name="interval" /> parameter is less than or equal to zero, or greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="AutoReset">
      <MemberSignature Language="C#" Value="public bool AutoReset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoReset" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.AutoReset" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoReset As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoReset { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoReset : bool with get, set" Usage="System.Timers.Timer.AutoReset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1;net-5.0">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("Indicates whether the timer will be restarted when it is enabled.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Timers.TimersDescription("TimerAutoReset")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f4a96-172"><see cref="T:System.Timers.Timer" /> が <see cref="E:System.Timers.Timer.Elapsed" /> イベントを一度のみ発生させる (<see langword="false" />) か、または繰り返し発生させる (<see langword="true" />) かを示すブール値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-172">Gets or sets a Boolean indicating whether the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event only once (<see langword="false" />) or repeatedly (<see langword="true" />).</span></span></summary>
        <value><span data-ttu-id="f4a96-173">指定した間隔が経過するたびに <see cref="T:System.Timers.Timer" /> で <see cref="E:System.Timers.Timer.Elapsed" /> イベントを発生させる場合は <see langword="true" />。最初の間隔が経過した後に 1 回だけ <see langword="false" /> イベントを発生させる場合は <see cref="E:System.Timers.Timer.Elapsed" />。</span><span class="sxs-lookup"><span data-stu-id="f4a96-173"><see langword="true" /> if the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event each time the interval elapses; <see langword="false" /> if it should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event only once, after the first time the interval elapses.</span></span> <span data-ttu-id="f4a96-174">既定では、 <see langword="true" />です。</span><span class="sxs-lookup"><span data-stu-id="f4a96-174">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f4a96-175"><xref:System.Timers.Timer.Start%2A> メソッドが呼び出されたときに <xref:System.Timers.Timer> が既に有効になっている場合、間隔はリセットされます。</span><span class="sxs-lookup"><span data-stu-id="f4a96-175">If the <xref:System.Timers.Timer> is already enabled when the <xref:System.Timers.Timer.Start%2A> method is called, the interval is reset.</span></span> <span data-ttu-id="f4a96-176"><xref:System.Timers.Timer.AutoReset%2A> が `false`場合は、カウントを再び開始するために、<xref:System.Timers.Timer.Start%2A> メソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="f4a96-176">If <xref:System.Timers.Timer.AutoReset%2A> is `false`, the <xref:System.Timers.Timer.Start%2A> method must be called in order to start the count again.</span></span>  
  
 <span data-ttu-id="f4a96-177">間隔をリセットすると、<xref:System.Timers.Timer.Elapsed> イベントが発生したときに影響を及ぼします。</span><span class="sxs-lookup"><span data-stu-id="f4a96-177">Resetting the interval affects when the <xref:System.Timers.Timer.Elapsed> event is raised.</span></span> <span data-ttu-id="f4a96-178">たとえば、間隔を5秒に設定し、<xref:System.Timers.Timer.Enabled%2A> プロパティを `true`に設定すると、<xref:System.Timers.Timer.Enabled%2A> が設定された時点でカウントが開始されます。</span><span class="sxs-lookup"><span data-stu-id="f4a96-178">For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set.</span></span> <span data-ttu-id="f4a96-179">カウントを3秒に設定した場合、間隔を10秒にリセットすると、<xref:System.Timers.Timer.Enabled%2A> プロパティが `true`に設定された後、最初に13秒間 <xref:System.Timers.Timer.Elapsed> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-179">If you reset the interval to 10 seconds when the count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after the <xref:System.Timers.Timer.Enabled%2A> property was set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f4a96-180">次の例では、<xref:System.Timers.Timer.Elapsed> イベントが1.5 秒後に発生する <xref:System.Timers.Timer> を作成します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-180">The following example creates a <xref:System.Timers.Timer> whose <xref:System.Timers.Timer.Elapsed> event fires after 1.5 seconds.</span></span> <span data-ttu-id="f4a96-181">そのイベントハンドラーに "Hello World!" と表示されます。</span><span class="sxs-lookup"><span data-stu-id="f4a96-181">Its event handler then displays "Hello World!"</span></span> <span data-ttu-id="f4a96-182">コンソールで。</span><span class="sxs-lookup"><span data-stu-id="f4a96-182">on the console.</span></span>  
  
 [!code-cpp[Classic Timer.Timer1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer.Timer1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CS/source.cs#1)]
 [!code-vb[Classic Timer.Timer1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="timer.BeginInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f4a96-183">フォームまたは別のコンポーネントで使用する <see cref="T:System.Timers.Timer" /> の実行時の初期化を開始します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-183">Begins the run-time initialization of a <see cref="T:System.Timers.Timer" /> that is used on a form or by another component.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f4a96-184">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] デザイン環境では、このメソッドを使用して、フォームまたは別のコンポーネントで使用されるコンポーネントの初期化を開始します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-184">The [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] design environment uses this method to start the initialization of a component that is used on a form or by another component.</span></span> <span data-ttu-id="f4a96-185"><xref:System.Timers.Timer.EndInit%2A> メソッドは、初期化を終了します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-185">The <xref:System.Timers.Timer.EndInit%2A> method ends the initialization.</span></span> <span data-ttu-id="f4a96-186"><xref:System.Timers.Timer.BeginInit%2A> メソッドと <xref:System.Timers.Timer.EndInit%2A> メソッドを使用すると、完全に初期化される前にコントロールが使用されなくなります。</span><span class="sxs-lookup"><span data-stu-id="f4a96-186">Using the <xref:System.Timers.Timer.BeginInit%2A> and <xref:System.Timers.Timer.EndInit%2A> methods prevents the control from being used before it is fully initialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.EndInit" />
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="timer.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f4a96-187"><see cref="T:System.Timers.Timer" /> で使用されたリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-187">Releases the resources used by the <see cref="T:System.Timers.Timer" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f4a96-188"><xref:System.Timers.Timer.Close%2A> メソッドは、`Dispose` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-188">The <xref:System.Timers.Timer.Close%2A> method in turn calls the `Dispose` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="timer.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="f4a96-189">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f4a96-189"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="f4a96-190">現在の <see cref="T:System.Timers.Timer" /> によって使用されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-190">Releases all resources used by the current <see cref="T:System.Timers.Timer" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Elapsed">
      <MemberSignature Language="C#" Value="public event System.Timers.ElapsedEventHandler Elapsed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Timers.ElapsedEventHandler Elapsed" />
      <MemberSignature Language="DocId" Value="E:System.Timers.Timer.Elapsed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Elapsed As ElapsedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Timers::ElapsedEventHandler ^ Elapsed;" />
      <MemberSignature Language="F#" Value="member this.Elapsed : System.Timers.ElapsedEventHandler " Usage="member this.Elapsed : System.Timers.ElapsedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("Occurs when the Interval has elapsed.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Timers.TimersDescription("TimerIntervalElapsed")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Timers.ElapsedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f4a96-191">間隔が経過すると発生します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-191">Occurs when the interval elapses.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f4a96-192"><xref:System.Timers.Timer.Enabled%2A> プロパティが `true`、<xref:System.Timers.Timer.Interval%2A> プロパティで定義されている時間間隔 (ミリ秒単位) が経過すると、<xref:System.Timers.Timer.Elapsed> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-192">The <xref:System.Timers.Timer.Elapsed> event is raised if the <xref:System.Timers.Timer.Enabled%2A> property is `true` and the time interval (in milliseconds) defined by the <xref:System.Timers.Timer.Interval%2A> property elapses.</span></span> <span data-ttu-id="f4a96-193"><xref:System.Timers.Timer.AutoReset%2A> プロパティが `true`場合、イベントは <xref:System.Timers.Timer.Interval%2A> プロパティによって定義された間隔で繰り返し発生します。それ以外の場合、イベントは、<xref:System.Timers.Timer.Interval%2A> 値が初めて経過したときに1回だけ発生します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-193">If the <xref:System.Timers.Timer.AutoReset%2A> property is `true`, the event is raised repeatedly at an interval defined by the <xref:System.Timers.Timer.Interval%2A> property; otherwise, the event is raised only once, the first time the <xref:System.Timers.Timer.Interval%2A> value elapses.</span></span>  
  
 <span data-ttu-id="f4a96-194"><xref:System.Timers.Timer> の開始後に <xref:System.Timers.Timer.Interval%2A> が設定されている場合、カウントはリセットされます。</span><span class="sxs-lookup"><span data-stu-id="f4a96-194">If <xref:System.Timers.Timer.Interval%2A> is set after the <xref:System.Timers.Timer> has started, the count is reset.</span></span> <span data-ttu-id="f4a96-195">たとえば、間隔を5秒に設定し、<xref:System.Timers.Timer.Enabled%2A> を `true`に設定した場合、<xref:System.Timers.Timer.Enabled%2A> の設定時にカウントが開始されます。</span><span class="sxs-lookup"><span data-stu-id="f4a96-195">For example, if you set the interval to 5 seconds and then set <xref:System.Timers.Timer.Enabled%2A> to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set.</span></span> <span data-ttu-id="f4a96-196">[カウント] を3秒に設定した場合、間隔を10秒にリセットすると、<xref:System.Timers.Timer.Enabled%2A> が `true`に設定された後、最初に13秒後に <xref:System.Timers.Timer.Elapsed> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-196">If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`.</span></span>  
  
 <span data-ttu-id="f4a96-197"><xref:System.Timers.Timer.SynchronizingObject%2A> プロパティが `null`場合、<xref:System.Threading.ThreadPool> スレッドで <xref:System.Timers.Timer.Elapsed> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-197">If the <xref:System.Timers.Timer.SynchronizingObject%2A> property is `null`,the <xref:System.Timers.Timer.Elapsed> event is raised on a <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="f4a96-198"><xref:System.Timers.Timer.Elapsed> イベントの処理時間が <xref:System.Timers.Timer.Interval%2A>よりも長い場合は、別の <xref:System.Threading.ThreadPool> スレッドでイベントが再度発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f4a96-198">If the processing of the <xref:System.Timers.Timer.Elapsed> event lasts longer than <xref:System.Timers.Timer.Interval%2A>, the event might be raised again on another <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="f4a96-199">この場合、イベントハンドラーは再入可能である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f4a96-199">In this situation, the event handler should be reentrant.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f4a96-200">イベント処理メソッドは、別のスレッドが <xref:System.Timers.Timer.Stop%2A> メソッドを呼び出したとき、または <xref:System.Timers.Timer.Enabled%2A> プロパティを `false`に設定したときに、1つのスレッドで実行されることがあります。</span><span class="sxs-lookup"><span data-stu-id="f4a96-200">The event-handling method might run on one thread at the same time that another thread calls the <xref:System.Timers.Timer.Stop%2A> method or sets the <xref:System.Timers.Timer.Enabled%2A> property to `false`.</span></span> <span data-ttu-id="f4a96-201">これにより、タイマーが停止した後に <xref:System.Timers.Timer.Elapsed> イベントが発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f4a96-201">This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the timer is stopped.</span></span> <span data-ttu-id="f4a96-202">コードの使用例、<xref:System.Timers.Timer.Stop%2A>メソッドは、この競合状態を回避するために 1 つのメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="f4a96-202">The example code for the <xref:System.Timers.Timer.Stop%2A> method shows one way to avoid this race condition.</span></span>  
  
 <span data-ttu-id="f4a96-203"><xref:System.Timers.Timer.SynchronizingObject%2A> が `null`されていない場合でも、<xref:System.Timers.Timer.Dispose%2A> または <xref:System.Timers.Timer.Stop%2A> メソッドが呼び出された後、または <xref:System.Timers.Timer.Enabled%2A> プロパティが `false`に設定された後に、<xref:System.Timers.Timer.Elapsed> イベントが発生する可能性があります。これは、<xref:System.Timers.Timer.Elapsed> イベントを発生させるシグナルが、スレッドプールのスレッドで実行するために常にキューに入れられるためです。</span><span class="sxs-lookup"><span data-stu-id="f4a96-203">Even if <xref:System.Timers.Timer.SynchronizingObject%2A> is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread.</span></span> <span data-ttu-id="f4a96-204">この競合状態がのイベント ハンドラーを示すフラグを設定するには解決するのには 1 つのメソッド、<xref:System.Timers.Timer.Elapsed>後続のイベントを無視するイベントです。</span><span class="sxs-lookup"><span data-stu-id="f4a96-204">One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.</span></span>  
  
 <span data-ttu-id="f4a96-205"><xref:System.Timers.Timer> コンポーネントは、<xref:System.Timers.Timer.Elapsed> イベントのイベントハンドラーによってスローされたすべての例外をキャッチし、抑制します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-205">The <xref:System.Timers.Timer> component catches and suppresses all exceptions thrown by event handlers for the <xref:System.Timers.Timer.Elapsed> event.</span></span> <span data-ttu-id="f4a96-206">この動作は、.NET Framework の今後のリリースで変更される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f4a96-206">This behavior is subject to change in future releases of the .NET Framework.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f4a96-207">次の例では、2秒 (2000 ミリ秒) ごとに <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> イベントを発生させる <xref:System.Timers.Timer> オブジェクトをインスタンス化し、イベントのイベントハンドラーを設定して、タイマーを開始します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-207">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</span></span> <span data-ttu-id="f4a96-208">イベントハンドラーは、発生するたびに <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> プロパティの値を表示します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-208">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
        <altmember cref="T:System.Timers.ElapsedEventArgs" />
        <altmember cref="T:System.Timers.ElapsedEventHandler" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Timers.Timer.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1;net-5.0">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("Indicates whether the timer is enabled to fire events at a defined interval.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Timers.TimersDescription("TimerEnabled")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f4a96-209"><see cref="T:System.Timers.Timer" /> で <see cref="E:System.Timers.Timer.Elapsed" /> イベントを発生させる必要があるかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-209">Gets or sets a value indicating whether the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event.</span></span></summary>
        <value><span data-ttu-id="f4a96-210"><see cref="T:System.Timers.Timer" /> で <see cref="E:System.Timers.Timer.Elapsed" /> イベントを発生させる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f4a96-210"><see langword="true" /> if the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="f4a96-211">既定では、 <see langword="false" />です。</span><span class="sxs-lookup"><span data-stu-id="f4a96-211">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f4a96-212">`true` への <xref:System.Timers.Timer.Enabled%2A> の設定は <xref:System.Timers.Timer.Start%2A>の呼び出しと同じですが、`false` への <xref:System.Timers.Timer.Enabled%2A> の設定は <xref:System.Timers.Timer.Stop%2A>の呼び出しと同じです。</span><span class="sxs-lookup"><span data-stu-id="f4a96-212">Setting <xref:System.Timers.Timer.Enabled%2A> to `true` is the same as calling <xref:System.Timers.Timer.Start%2A>, while setting <xref:System.Timers.Timer.Enabled%2A> to `false` is the same as calling <xref:System.Timers.Timer.Stop%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f4a96-213"><xref:System.Timers.Timer.Elapsed> イベントを発生させるシグナルは、常に <xref:System.Threading.ThreadPool> スレッドで実行するためにキューに入れられます。</span><span class="sxs-lookup"><span data-stu-id="f4a96-213">The signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="f4a96-214">これにより、<xref:System.Timers.Timer.Enabled%2A> プロパティが `false`に設定された後に、<xref:System.Timers.Timer.Elapsed> イベントが発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f4a96-214">This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the <xref:System.Timers.Timer.Enabled%2A> property is set to `false`.</span></span> <span data-ttu-id="f4a96-215">コード例を<xref:System.Timers.Timer.Stop%2A>メソッドは、この競合状態を回避する 1 つのメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="f4a96-215">The code example for the <xref:System.Timers.Timer.Stop%2A> method shows one way to work around this race condition.</span></span>  
  
 <span data-ttu-id="f4a96-216"><xref:System.Timers.Timer.Enabled%2A> が `true` に設定され、<xref:System.Timers.Timer.AutoReset%2A> が `false`に設定されている場合、<xref:System.Timers.Timer> は、最初の間隔が経過したときに、<xref:System.Timers.Timer.Elapsed> イベントを1回だけ発生させます。</span><span class="sxs-lookup"><span data-stu-id="f4a96-216">If <xref:System.Timers.Timer.Enabled%2A> is set to `true` and <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event only once, the first time the interval elapses.</span></span>  
  
 <span data-ttu-id="f4a96-217"><xref:System.Timers.Timer> の開始後に間隔が設定されている場合、カウントはリセットされます。</span><span class="sxs-lookup"><span data-stu-id="f4a96-217">If the interval is set after the <xref:System.Timers.Timer> has started, the count is reset.</span></span> <span data-ttu-id="f4a96-218">たとえば、間隔を5秒に設定し、<xref:System.Timers.Timer.Enabled%2A> プロパティを `true`に設定すると、<xref:System.Timers.Timer.Enabled%2A> が設定された時点でカウントが開始されます。</span><span class="sxs-lookup"><span data-stu-id="f4a96-218">For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set.</span></span> <span data-ttu-id="f4a96-219">[カウント] を3秒に設定した場合、間隔を10秒にリセットすると、<xref:System.Timers.Timer.Enabled%2A> が `true`に設定された後、最初に13秒後に <xref:System.Timers.Timer.Elapsed> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-219">If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f4a96-220">Microsoft Visual Studio のようなビジュアルデザイナーの中には、新しい <xref:System.Timers.Timer>を挿入するときに <xref:System.Timers.Timer.Enabled%2A> プロパティを `true` に設定するものがあります。</span><span class="sxs-lookup"><span data-stu-id="f4a96-220">Some visual designers, such as those in Microsoft Visual Studio, set the <xref:System.Timers.Timer.Enabled%2A> property to `true` when inserting a new <xref:System.Timers.Timer>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f4a96-221">次の例では、2秒 (2000 ミリ秒) ごとに <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> イベントを発生させる <xref:System.Timers.Timer> オブジェクトをインスタンス化し、イベントのイベントハンドラーを設定して、タイマーを開始します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-221">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the  event, and starts the timer.</span></span> <span data-ttu-id="f4a96-222">イベントハンドラーは、発生するたびに <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> プロパティの値を表示します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-222">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="f4a96-223">タイマーが破棄されたため、このプロパティは設定できません。</span><span class="sxs-lookup"><span data-stu-id="f4a96-223">This property cannot be set because the timer has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a96-224"><see cref="P:System.Timers.Timer.Interval" /> プロパティは、タイマーが有効になる前に <see cref="F:System.Int32.MaxValue" /> より大きい値に設定されました。</span><span class="sxs-lookup"><span data-stu-id="f4a96-224">The <see cref="P:System.Timers.Timer.Interval" /> property was set to a value greater than <see cref="F:System.Int32.MaxValue" /> before the timer was enabled.</span></span></exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="M:System.Timers.Timer.Stop" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="timer.EndInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f4a96-225">フォームまたは別のコンポーネントで使用する <see cref="T:System.Timers.Timer" /> の実行時の初期化を終了します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-225">Ends the run-time initialization of a <see cref="T:System.Timers.Timer" /> that is used on a form or by another component.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f4a96-226">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] デザイン環境では、このメソッドを使用して、フォームまたは別のコンポーネントによって使用されるコンポーネントの初期化を終了します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-226">The [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] design environment uses this method to end the initialization of a component that is used on a form or by another component.</span></span> <span data-ttu-id="f4a96-227"><xref:System.Timers.Timer.BeginInit%2A> メソッドは、初期化を開始します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-227">The <xref:System.Timers.Timer.BeginInit%2A> method starts the initialization.</span></span> <span data-ttu-id="f4a96-228"><xref:System.Timers.Timer.BeginInit%2A> メソッドと <xref:System.Timers.Timer.EndInit%2A> メソッドを使用すると、完全に初期化される前にコントロールが使用されなくなります。</span><span class="sxs-lookup"><span data-stu-id="f4a96-228">Using the <xref:System.Timers.Timer.BeginInit%2A> and <xref:System.Timers.Timer.EndInit%2A> methods prevents the control from being used before it is fully initialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Timers.Timer.BeginInit" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public double Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Interval" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Interval { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Interval : double with get, set" Usage="System.Timers.Timer.Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1;net-5.0">
          <AttributeName>System.ComponentModel.DefaultValue(100)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("The number of milliseconds between timer events.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Timers.TimersDescription("TimerInterval")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f4a96-229"><see cref="E:System.Timers.Timer.Elapsed" /> イベントの発生間隔を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-229">Gets or sets the interval, expressed in milliseconds, at which to raise the <see cref="E:System.Timers.Timer.Elapsed" /> event.</span></span></summary>
        <value><span data-ttu-id="f4a96-230">ミリ秒単位での <see cref="E:System.Timers.Timer.Elapsed" /> イベントの発生間隔。</span><span class="sxs-lookup"><span data-stu-id="f4a96-230">The time, in milliseconds, between <see cref="E:System.Timers.Timer.Elapsed" /> events.</span></span> <span data-ttu-id="f4a96-231">この値はゼロより大きく、<see cref="F:System.Int32.MaxValue" /> 以下である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f4a96-231">The value must be greater than zero, and less than or equal to <see cref="F:System.Int32.MaxValue" />.</span></span> <span data-ttu-id="f4a96-232">既定値は 100 ミリ秒です。</span><span class="sxs-lookup"><span data-stu-id="f4a96-232">The default is 100 milliseconds.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f4a96-233"><xref:System.Timers.Timer.Elapsed> イベントが発生する頻度を決定するには、<xref:System.Timers.Timer.Interval%2A> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-233">You use the <xref:System.Timers.Timer.Interval%2A> property to determine the frequency at which the <xref:System.Timers.Timer.Elapsed> event is fired.</span></span> <span data-ttu-id="f4a96-234"><xref:System.Timers.Timer> クラスはシステムクロックに依存するので、システムクロックと同じ解像度になります。</span><span class="sxs-lookup"><span data-stu-id="f4a96-234">Because the <xref:System.Timers.Timer> class depends on the system clock, it has the same resolution as the system clock.</span></span> <span data-ttu-id="f4a96-235">これは、<xref:System.Timers.Timer.Interval%2A> プロパティがシステムクロックの解像度よりも小さい場合に、システムクロックの解決によって定義された間隔で <xref:System.Timers.Timer.Elapsed> イベントが発生することを意味します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-235">This means that the <xref:System.Timers.Timer.Elapsed> event will fire at an interval defined by the resolution of the system clock if the <xref:System.Timers.Timer.Interval%2A> property is less than the resolution of the system clock.</span></span> <span data-ttu-id="f4a96-236">次の例では、<xref:System.Timers.Timer.Interval%2A> プロパティを5ミリ秒に設定します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-236">The following example sets the <xref:System.Timers.Timer.Interval%2A> property to 5 milliseconds.</span></span> <span data-ttu-id="f4a96-237">システムクロックの解像度が約15ミリ秒である [!INCLUDE[win7](~/includes/win7-md.md)] システムで実行すると、イベントは5ミリ秒ごとではなく約15ミリ秒ごとに発生します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-237">When run on a [!INCLUDE[win7](~/includes/win7-md.md)] system whose system clock has a resolution of approximately 15 milliseconds, the event fires approximately every 15 milliseconds rather than every 5 milliseconds.</span></span>  
  
 [!code-csharp[System.Timers.Timer.Interval#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/interval2.cs#1)]
 [!code-vb[System.Timers.Timer.Interval#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/interval2.vb#1)]  
  
 <span data-ttu-id="f4a96-238">次のコードを使用して、現在のシステムのシステムクロックの解決方法を決定できます。</span><span class="sxs-lookup"><span data-stu-id="f4a96-238">You can use the following code to determine the resolution of the system clock on the current system:</span></span>  
  
 [!code-csharp[System.Timers.Timer.Interval#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/resolution1.cs#2)]
 [!code-vb[System.Timers.Timer.Interval#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/resolution1.vb#2)]  
  
 <span data-ttu-id="f4a96-239">かどうか、アプリが必要以上の解像度によって提供されるよりも、<xref:System.Timers.Timer>クラスまたはシステム クロック、高解像度のマルチ メディア タイマーを使用して、参照してください。[メソッド: 高分解能タイマを使用する](https://msdn.microsoft.com/library/aa964692.aspx)します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-239">If your app requires greater resolution than that offered by the <xref:System.Timers.Timer> class or the system clock, use the high-resolution multimedia timers; see [How to: Use the High-Resolution Timer](https://msdn.microsoft.com/library/aa964692.aspx).</span></span>  
  
 <span data-ttu-id="f4a96-240"><xref:System.Timers.Timer> の開始後に間隔が設定されている場合、カウントはリセットされます。</span><span class="sxs-lookup"><span data-stu-id="f4a96-240">If the interval is set after the <xref:System.Timers.Timer> has started, the count is reset.</span></span> <span data-ttu-id="f4a96-241">たとえば、間隔を5秒に設定し、<xref:System.Timers.Timer.Enabled%2A> プロパティを `true`に設定すると、<xref:System.Timers.Timer.Enabled%2A> が設定された時点でカウントが開始されます。</span><span class="sxs-lookup"><span data-stu-id="f4a96-241">For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set.</span></span> <span data-ttu-id="f4a96-242">[カウント] を3秒に設定した場合、間隔を10秒にリセットすると、<xref:System.Timers.Timer.Enabled%2A> が `true`に設定された後、最初に13秒後に <xref:System.Timers.Timer.Elapsed> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-242">If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`.</span></span>  
  
 <span data-ttu-id="f4a96-243"><xref:System.Timers.Timer.Enabled%2A> が `true` に設定され、<xref:System.Timers.Timer.AutoReset%2A> が `false`に設定されている場合、<xref:System.Timers.Timer> は、最初の間隔が経過したときに、<xref:System.Timers.Timer.Elapsed> イベントを1回だけ発生させます。</span><span class="sxs-lookup"><span data-stu-id="f4a96-243">If <xref:System.Timers.Timer.Enabled%2A> is set to `true` and <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event only once, the first time the interval elapses.</span></span> <span data-ttu-id="f4a96-244"><xref:System.Timers.Timer.Enabled%2A> は `false`に設定されます。</span><span class="sxs-lookup"><span data-stu-id="f4a96-244"><xref:System.Timers.Timer.Enabled%2A> is then set to `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f4a96-245"><xref:System.Timers.Timer.Enabled%2A> と <xref:System.Timers.Timer.AutoReset%2A> が両方とも `false`に設定されていて、タイマーが既に有効になっている場合、<xref:System.Timers.Timer.Elapsed> プロパティが <xref:System.Timers.Timer.Enabled%2A> に設定されているかのように、<xref:System.Timers.Timer.Interval%2A> プロパティを設定すると、`true`イベントが1回発生します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-245">If <xref:System.Timers.Timer.Enabled%2A> and <xref:System.Timers.Timer.AutoReset%2A> are both set to `false`, and the timer has previously been enabled, setting the <xref:System.Timers.Timer.Interval%2A> property causes the <xref:System.Timers.Timer.Elapsed> event to be raised once, as if the <xref:System.Timers.Timer.Enabled%2A> property had been set to `true`.</span></span> <span data-ttu-id="f4a96-246">イベントを発生させずに間隔を設定するには、一時的に [<xref:System.Timers.Timer.Enabled%2A>] プロパティを `true`に設定し、[<xref:System.Timers.Timer.Interval%2A>] プロパティを目的の時間間隔に設定します。次に、<xref:System.Timers.Timer.Enabled%2A> プロパティを直ちに `false`に戻します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-246">To set the interval without raising the event, you can temporarily set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, set the <xref:System.Timers.Timer.Interval%2A> property to the desired time interval, and then immediately set the <xref:System.Timers.Timer.Enabled%2A> property back to `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f4a96-247">次の例では、2秒 (2000 ミリ秒) ごとに <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> イベントを発生させる <xref:System.Timers.Timer> オブジェクトをインスタンス化し、イベントのイベントハンドラーを設定して、タイマーを開始します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-247">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</span></span> <span data-ttu-id="f4a96-248">イベントハンドラーは、発生するたびに <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> プロパティの値を表示します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-248">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f4a96-249">間隔が 0 以下です。</span><span class="sxs-lookup"><span data-stu-id="f4a96-249">The interval is less than or equal to zero.</span></span>  
  
<span data-ttu-id="f4a96-250">または</span><span class="sxs-lookup"><span data-stu-id="f4a96-250">-or-</span></span> 
<span data-ttu-id="f4a96-251">間隔が <see cref="F:System.Int32.MaxValue" /> よりも大きく、タイマーが現在有効になっています。</span><span class="sxs-lookup"><span data-stu-id="f4a96-251">The interval is greater than <see cref="F:System.Int32.MaxValue" />, and the timer is currently enabled.</span></span> <span data-ttu-id="f4a96-252">(タイマーが現在有効になっていない場合は、有効になるまで例外はスローされません。)</span><span class="sxs-lookup"><span data-stu-id="f4a96-252">(If the timer is not currently enabled, no exception is thrown until it becomes enabled.)</span></span></exception>
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Site" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Site As ISite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::ISite ^ Site { System::ComponentModel::ISite ^ get(); void set(System::ComponentModel::ISite ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Site : System.ComponentModel.ISite with get, set" Usage="System.Timers.Timer.Site" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f4a96-253">デザイン モードで <see cref="T:System.Timers.Timer" /> をコンテナーにバインドするサイトを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-253">Gets or sets the site that binds the <see cref="T:System.Timers.Timer" /> to its container in design mode.</span></span></summary>
        <value><span data-ttu-id="f4a96-254"><see cref="T:System.Timers.Timer" /> オブジェクトをコンテナーにバインドするサイトを表す <see cref="T:System.ComponentModel.ISite" /> インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="f4a96-254">An <see cref="T:System.ComponentModel.ISite" /> interface representing the site that binds the <see cref="T:System.Timers.Timer" /> object to its container.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f4a96-255">サイトは、<xref:System.ComponentModel.Component> を <xref:System.ComponentModel.Container> にバインドし、それらの間の通信を可能にします。さらに、コンテナーがそのコンポーネントを管理する方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-255">Sites bind a <xref:System.ComponentModel.Component> to a <xref:System.ComponentModel.Container> and enable communication between them, as well as providing a way for the container to manage its components.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="timer.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f4a96-256"><see cref="E:System.Timers.Timer.Elapsed" /> を <see cref="P:System.Timers.Timer.Enabled" /> に設定して、 <see langword="true" />イベントの発生を開始します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-256">Starts raising the <see cref="E:System.Timers.Timer.Elapsed" /> event by setting <see cref="P:System.Timers.Timer.Enabled" /> to <see langword="true" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f4a96-257"><xref:System.Timers.Timer.Start%2A> が呼び出され、<xref:System.Timers.Timer.AutoReset%2A> が `false`に設定されている場合、<xref:System.Timers.Timer> では、最初の間隔が経過したときに、<xref:System.Timers.Timer.Elapsed> イベントが1回だけ発生します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-257">If <xref:System.Timers.Timer.Start%2A> is called and <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event only once, the first time the interval elapses.</span></span> <span data-ttu-id="f4a96-258"><xref:System.Timers.Timer.Start%2A> が呼び出され、<xref:System.Timers.Timer.AutoReset%2A> が `true`場合、<xref:System.Timers.Timer> は最初に間隔が経過したときにイベントを <xref:System.Timers.Timer.Elapsed> 発生させ、指定した間隔でイベントを発生させ続けます。</span><span class="sxs-lookup"><span data-stu-id="f4a96-258">If <xref:System.Timers.Timer.Start%2A> is called and <xref:System.Timers.Timer.AutoReset%2A> is `true`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event the first time the interval elapses and continues to raise the event on the specified interval.</span></span>  
  
 <span data-ttu-id="f4a96-259"><xref:System.Timers.Timer.Enabled%2A> を `true`に設定して、タイミングを開始することもできます。</span><span class="sxs-lookup"><span data-stu-id="f4a96-259">You can also start timing by setting <xref:System.Timers.Timer.Enabled%2A> to `true`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f4a96-260"><xref:System.Timers.Timer.AutoReset%2A> が `false`場合は、カウントを再び開始するために、<xref:System.Timers.Timer.Start%2A> メソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="f4a96-260">If <xref:System.Timers.Timer.AutoReset%2A> is `false`, the <xref:System.Timers.Timer.Start%2A> method must be called in order to start the count again.</span></span>  
  
 <span data-ttu-id="f4a96-261">タイマーが有効になっている場合に <xref:System.Timers.Timer.Start%2A> メソッドを呼び出すと、効果はありません。</span><span class="sxs-lookup"><span data-stu-id="f4a96-261">A call to the <xref:System.Timers.Timer.Start%2A> method when the timer is enabled has no effect.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f4a96-262"><see cref="T:System.Timers.Timer" /> の作成時に設定された間隔が <see cref="F:System.Int32.MaxValue" /> + 1 以上か、0 未満に設定されています。</span><span class="sxs-lookup"><span data-stu-id="f4a96-262">The <see cref="T:System.Timers.Timer" /> is created with an interval equal to or greater than <see cref="F:System.Int32.MaxValue" /> + 1, or set to an interval less than zero.</span></span></exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Stop" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="timer.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f4a96-263"><see cref="P:System.Timers.Timer.Enabled" /> を <see langword="false" /> に設定して、<see cref="E:System.Timers.Timer.Elapsed" /> イベントの発生を停止します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-263">Stops raising the <see cref="E:System.Timers.Timer.Elapsed" /> event by setting <see cref="P:System.Timers.Timer.Enabled" /> to <see langword="false" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f4a96-264"><xref:System.Timers.Timer.Enabled%2A> を `false`に設定して、タイミングを停止することもできます。</span><span class="sxs-lookup"><span data-stu-id="f4a96-264">You can also stop timing by setting <xref:System.Timers.Timer.Enabled%2A> to `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f4a96-265"><xref:System.Timers.Timer.Elapsed> イベントを発生させるシグナルは、常に <xref:System.Threading.ThreadPool> スレッドで実行されるようにキューに置かれるため、<xref:System.Timers.Timer.Stop%2A> メソッドの呼び出しが別のスレッドで実行されるときに、イベント処理メソッドが1つのスレッドで実行される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f4a96-265">The signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a <xref:System.Threading.ThreadPool> thread, so the event-handling method might run on one thread at the same time that a call to the <xref:System.Timers.Timer.Stop%2A> method runs on another thread.</span></span> <span data-ttu-id="f4a96-266">これにより、<xref:System.Timers.Timer.Stop%2A> メソッドが呼び出された後に、<xref:System.Timers.Timer.Elapsed> イベントが発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f4a96-266">This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the <xref:System.Timers.Timer.Stop%2A> method is called.</span></span> <span data-ttu-id="f4a96-267">「[例](#examples)」セクションの2番目のコード例は、この競合状態を回避する方法の1つを示しています。</span><span class="sxs-lookup"><span data-stu-id="f4a96-267">The second code example in the [Examples](#examples) section shows one way to work around this race condition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f4a96-268">次の例では、2秒 (2000 ミリ秒) ごとに <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> イベントを発生させる `System.Timers.Timer` オブジェクトをインスタンス化し、イベントのイベントハンドラーを設定して、タイマーを開始します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-268">The following example instantiates a `System.Timers.Timer` object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2,000 milliseconds), sets up an event handler for the  event, and starts the timer.</span></span> <span data-ttu-id="f4a96-269">イベントハンドラーは、発生するたびに <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> プロパティの値を表示します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-269">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span> <span data-ttu-id="f4a96-270">ユーザーが Enter キーを押すと、アプリケーションはアプリケーションを終了する前に <xref:System.Timers.Timer.Stop%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-270">When the user presses the Enter key, the application calls the  <xref:System.Timers.Timer.Stop%2A> method before terminating the application.</span></span>  
  
 [!code-csharp[System.Timers.Timer#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]
 [!code-vb[System.Timers.Timer#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  
  
 <span data-ttu-id="f4a96-271">次のコード例を呼び出すスレッドを防ぐために 1 つのメソッドを示しています、<xref:System.Timers.Timer.Stop%2A>メソッドまで、現在の実行を続行できなく<xref:System.Timers.Timer.Elapsed>イベント終了すると、2 つの操作を防止するためにも<xref:System.Timers.Timer.Elapsed>を同じイベント ハンドラーの実行からのイベント時間 (再入とも呼ばれます)。</span><span class="sxs-lookup"><span data-stu-id="f4a96-271">The following code example shows one way to prevent the thread that calls the <xref:System.Timers.Timer.Stop%2A> method from continuing until a currently executing <xref:System.Timers.Timer.Elapsed> event ends, and also to prevent two <xref:System.Timers.Timer.Elapsed> events from executing the event handler at the same time (often referred to as reentrancy).</span></span>  
  
 <span data-ttu-id="f4a96-272">この例では、100テストの実行を実行します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-272">The example executes 100 test runs.</span></span> <span data-ttu-id="f4a96-273">テストが実行されるたびに、タイマーは150ミリ秒の間隔で開始されます。</span><span class="sxs-lookup"><span data-stu-id="f4a96-273">Each time the test is run, the timer is started with an interval of 150 milliseconds.</span></span> <span data-ttu-id="f4a96-274">イベントハンドラーは、<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> メソッドを使用して、50 ~ 200 ミリ秒の長さでランダムに変化するタスクをシミュレートします。</span><span class="sxs-lookup"><span data-stu-id="f4a96-274">The event handler uses the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to simulate a task that randomly varies in length from 50 to 200 milliseconds.</span></span> <span data-ttu-id="f4a96-275">また、テストメソッドは、1秒間待機してからタイマーを停止する制御スレッドを開始します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-275">The test method also starts a control thread that waits for a second and then stops the timer.</span></span> <span data-ttu-id="f4a96-276">コントロールスレッドがタイマーを停止したときにイベントが処理されている場合、制御スレッドはイベントが完了するまで待機してから続行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f4a96-276">If an event is being handled when the control thread stops the timer, the control thread must wait until the event is finished before proceeding.</span></span>  
  
 <span data-ttu-id="f4a96-277"><xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> メソッドのオーバーロードは、再入を回避し、実行中のイベントが終了するまで制御スレッドが続行されないようにするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="f4a96-277">The <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method overload is used to avoid reentrancy and to prevent the control thread from continuing until an executing event ends.</span></span> <span data-ttu-id="f4a96-278">イベントハンドラーは、<xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> メソッドを使用して、コントロール変数を1に設定します。ただし、値が現在0の場合に限ります。</span><span class="sxs-lookup"><span data-stu-id="f4a96-278">The event handler uses the <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> method to set a control variable to 1, but only if the value is currently zero.</span></span> <span data-ttu-id="f4a96-279">これはアトミック操作です。</span><span class="sxs-lookup"><span data-stu-id="f4a96-279">This is an atomic operation.</span></span> <span data-ttu-id="f4a96-280">戻り値が0の場合、コントロール変数が1に設定され、イベントハンドラーが処理を続行します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-280">If the return value is zero, the control variable has been set to 1 and the event handler proceeds.</span></span> <span data-ttu-id="f4a96-281">戻り値が0以外の場合は、再入を避けるために、イベントは単に破棄されます。</span><span class="sxs-lookup"><span data-stu-id="f4a96-281">If the return value is non-zero, the event is simply discarded to avoid reentrancy.</span></span> <span data-ttu-id="f4a96-282">(すべてのイベントを実行するために必要な場合、<xref:System.Threading.Monitor>クラスは、イベントを同期するメソッドの向上になります)。イベント ハンドラーの終了時に、設定コントロール変数戻るを 0 にします。</span><span class="sxs-lookup"><span data-stu-id="f4a96-282">(If it were necessary to execute every event, the <xref:System.Threading.Monitor> class would be a better way to synchronize the events.) When the event handler ends, it sets the control variable back to zero.</span></span> <span data-ttu-id="f4a96-283">この例では、再入によって破棄され、<xref:System.Timers.Timer.Stop%2A> メソッドが呼び出された後に発生した、実行されたイベントの合計数を記録します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-283">The example records the total number of events that executed, that were discarded because of reentrancy, and that occurred after the <xref:System.Timers.Timer.Stop%2A> method was called.</span></span>  
  
 <span data-ttu-id="f4a96-284">コントロールスレッドは、<xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> メソッドを使用して、コントロール変数を-1 (-1) に設定します。ただし、値が現在0の場合に限ります。</span><span class="sxs-lookup"><span data-stu-id="f4a96-284">The control thread uses the <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> method to set the control variable to -1 (minus one), but only if the value is currently zero.</span></span> <span data-ttu-id="f4a96-285">アトミック操作が0以外の値を返す場合、イベントは現在実行中です。</span><span class="sxs-lookup"><span data-stu-id="f4a96-285">If the atomic operation returns non-zero, an event is currently executing.</span></span> <span data-ttu-id="f4a96-286">制御スレッドが待機して、もう一度試行します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-286">The control thread waits and tries again.</span></span> <span data-ttu-id="f4a96-287">この例では、コントロールスレッドがイベントの終了を待機する必要があった回数を記録します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-287">The example records the number of times the control thread had to wait for an event to finish.</span></span>  
  
 [!code-csharp[Timer.Stop#1](~/samples/snippets/csharp/VS_Snippets_CLR/Timer.Stop/CS/source.cs#1)]
 [!code-vb[Timer.Stop#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Timer.Stop/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizingObject">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISynchronizeInvoke SynchronizingObject" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.SynchronizingObject" />
      <MemberSignature Language="VB.NET" Value="Public Property SynchronizingObject As ISynchronizeInvoke" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::ISynchronizeInvoke ^ SynchronizingObject { System::ComponentModel::ISynchronizeInvoke ^ get(); void set(System::ComponentModel::ISynchronizeInvoke ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizingObject : System.ComponentModel.ISynchronizeInvoke with get, set" Usage="System.Timers.Timer.SynchronizingObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1;net-5.0">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("The object used to marshal the event handler calls issued when an interval has elapsed.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Timers.TimersDescription("TimerSynchronizingObject")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISynchronizeInvoke</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f4a96-288">指定した間隔が経過したときに発行されるイベント ハンドラー呼び出しをマーシャリングするために使用するオブジェクトを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-288">Gets or sets the object used to marshal event-handler calls that are issued when an interval has elapsed.</span></span></summary>
        <value><span data-ttu-id="f4a96-289">指定した間隔が経過したときに発行されるイベント ハンドラー呼び出しをマーシャリングするために使用するオブジェクトを表す <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> 。</span><span class="sxs-lookup"><span data-stu-id="f4a96-289">The <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> representing the object used to marshal the event-handler calls that are issued when an interval has elapsed.</span></span> <span data-ttu-id="f4a96-290">既定では、 <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="f4a96-290">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f4a96-291"><xref:System.Timers.Timer.SynchronizingObject%2A> が `null`場合、<xref:System.Timers.Timer.Elapsed> イベントを処理するメソッドは、システムスレッドプールからのスレッドで呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="f4a96-291">When <xref:System.Timers.Timer.SynchronizingObject%2A> is `null`, the method that handles the <xref:System.Timers.Timer.Elapsed> event is called on a thread from the system-thread pool.</span></span> <span data-ttu-id="f4a96-292">システムスレッドプールの詳細については、「<xref:System.Threading.ThreadPool>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f4a96-292">For more information on system-thread pools, see <xref:System.Threading.ThreadPool>.</span></span>  
  
 <span data-ttu-id="f4a96-293"><xref:System.Timers.Timer.Elapsed> イベントがボタンなどのビジュアル Windows フォームコンポーネントによって処理される場合、システムスレッドプールを介してコンポーネントにアクセスすると、例外が発生するか、それとも動作しない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f4a96-293">When the <xref:System.Timers.Timer.Elapsed> event is handled by a visual Windows Forms component, such as a button, accessing the component through the system-thread pool might result in an exception or just might not work.</span></span> <span data-ttu-id="f4a96-294"><xref:System.Timers.Timer.SynchronizingObject%2A> を Windows フォームコンポーネントに設定することによって、この効果を回避します。これにより、<xref:System.Timers.Timer.Elapsed> イベントを処理するメソッドが、コンポーネントが作成されたのと同じスレッドで呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="f4a96-294">Avoid this effect by setting <xref:System.Timers.Timer.SynchronizingObject%2A> to a Windows Forms component, which causes the method that handles the <xref:System.Timers.Timer.Elapsed> event to be called on the same thread that the component was created on.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f4a96-295"><xref:System.Timers.Timer.SynchronizingObject%2A> プロパティが `null`ない場合でも、<xref:System.Timers.Timer.Dispose%2A> または <xref:System.Timers.Timer.Stop%2A> メソッドが呼び出された後、または <xref:System.Timers.Timer.Enabled%2A> プロパティが `false`に設定された後に、<xref:System.Timers.Timer.Elapsed> イベントが発生する可能性があります。これは、<xref:System.Timers.Timer.Elapsed> イベントを発生させるシグナルが、スレッドプールのスレッドで実行するために常にキューに置かれるためです。</span><span class="sxs-lookup"><span data-stu-id="f4a96-295">Even if the <xref:System.Timers.Timer.SynchronizingObject%2A> property is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread.</span></span> <span data-ttu-id="f4a96-296">この競合状態がのイベント ハンドラーを示すフラグを設定するには解決するのには 1 つのメソッド、<xref:System.Timers.Timer.Elapsed>後続のイベントを無視するイベントです。</span><span class="sxs-lookup"><span data-stu-id="f4a96-296">One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.</span></span>  
  
 <span data-ttu-id="f4a96-297"><xref:System.Timers.Timer> が Visual Studio 内で Windows フォームデザイナーで使用されている場合、<xref:System.Timers.Timer.SynchronizingObject%2A> は、<xref:System.Timers.Timer>を含むコントロールに自動的に設定されます。</span><span class="sxs-lookup"><span data-stu-id="f4a96-297">If the <xref:System.Timers.Timer> is used inside Visual Studio in a Windows Forms designer, <xref:System.Timers.Timer.SynchronizingObject%2A> is automatically set to the control that contains the <xref:System.Timers.Timer>.</span></span> <span data-ttu-id="f4a96-298">たとえば、`Form1` (<xref:System.Windows.Forms.Form>から継承) のデザイナーに <xref:System.Timers.Timer> を配置すると、<xref:System.Timers.Timer> の <xref:System.Timers.Timer.SynchronizingObject%2A> プロパティが `Form1`のインスタンスに設定されます。</span><span class="sxs-lookup"><span data-stu-id="f4a96-298">For example, if you place a <xref:System.Timers.Timer> on a designer for `Form1` (which inherits from <xref:System.Windows.Forms.Form>), the <xref:System.Timers.Timer.SynchronizingObject%2A> property of <xref:System.Timers.Timer> is set to the instance of `Form1`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f4a96-299">次の例は、非常に単純なテキストファイルエディターとして機能する Windows フォームアプリです。</span><span class="sxs-lookup"><span data-stu-id="f4a96-299">The following example is a Windows Forms app that serves as a very simple text file editor.</span></span> <span data-ttu-id="f4a96-300">テキストボックス内のテキストが保存されていない場合、アプリケーションは、テキストボックスの内容を保存するかどうかを1分間隔でユーザーに要求します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-300">When the text in the text box has not been saved, the app asks the user at one-minute intervals whether he or she wants to save the contents of the text box.</span></span>  <span data-ttu-id="f4a96-301">これを行うには、<xref:System.Timers.Timer.Interval%2A> プロパティを1分 (6万ミリ秒) に設定し、<xref:System.Timers.Timer.SynchronizingObject%2A> プロパティを <xref:System.Windows.Forms.Form> オブジェクトに設定します。</span><span class="sxs-lookup"><span data-stu-id="f4a96-301">To do this, the <xref:System.Timers.Timer.Interval%2A> property is set to one minute (60,000 milliseconds), and the <xref:System.Timers.Timer.SynchronizingObject%2A> property is set to the <xref:System.Windows.Forms.Form> object.</span></span>  
  
 [!code-csharp[System.Timers.Timer.SynchronizingObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/cs/Form1.cs#1)]
 [!code-vb[System.Timers.Timer.SynchronizingObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/vb/Form1.vb#1)]  
  
 <span data-ttu-id="f4a96-302">この例では、次のコントロールをフォームに追加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f4a96-302">The example requires that you add the following controls to the form:</span></span>  
  
-   <span data-ttu-id="f4a96-303">`TextBox1` という名前の <xref:System.Windows.Forms.TextBox> コントロール (既定の名前)。</span><span class="sxs-lookup"><span data-stu-id="f4a96-303">A <xref:System.Windows.Forms.TextBox> control named `TextBox1` (its default name).</span></span>  
  
-   <span data-ttu-id="f4a96-304">`Button1` という名前の <xref:System.Windows.Forms.Button> コントロール (既定の名前)。</span><span class="sxs-lookup"><span data-stu-id="f4a96-304">A <xref:System.Windows.Forms.Button> control named `Button1` (its default name).</span></span>  
  
-   <span data-ttu-id="f4a96-305">`SaveSaveFileDialog1` という名前の <xref:System.Windows.Forms.SaveFileDialog> コントロール (既定の名前)。</span><span class="sxs-lookup"><span data-stu-id="f4a96-305">A <xref:System.Windows.Forms.SaveFileDialog> control named `SaveSaveFileDialog1` (its default name) .</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
        <altmember cref="T:System.ComponentModel.ISynchronizeInvoke" />
        <altmember cref="T:System.Threading.ThreadPool" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
  </Members>
</Type>
