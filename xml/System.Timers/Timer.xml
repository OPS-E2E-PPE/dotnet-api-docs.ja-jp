<Type Name="Timer" FullName="System.Timers.Timer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="339da9490f311e021ba10371fd767c39db45c794" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83544308" /></Metadata><TypeSignature Language="C#" Value="public class Timer : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Timer extends System.ComponentModel.Component implements class System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="DocId" Value="T:System.Timers.Timer" />
  <TypeSignature Language="VB.NET" Value="Public Class Timer&#xA;Inherits Component&#xA;Implements ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer : System::ComponentModel::Component, System::ComponentModel::ISupportInitialize" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit Component&#xA;    interface ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.ComponentModel.TypeConverter" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
      <AttributeName>System.ComponentModel.DefaultEvent("Elapsed")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
      <AttributeName>System.ComponentModel.DefaultProperty("Interval")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>一定の間隔の経過後にイベントを生成します。オプションとして、反復イベントを生成することもできます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Timers.Timer> コンポーネントは、<xref:System.Timers.Timer.Interval%2A> プロパティのミリ秒数が経過した後にアプリケーションで <xref:System.Timers.Timer.Elapsed> イベントを発生させるサーバーベースのタイマーです。 <xref:System.Timers.Timer> オブジェクトを構成して、イベントを1回だけ発生させるか、<xref:System.Timers.Timer.AutoReset%2A> プロパティを使用して繰り返し発生させることができます。 通常、<xref:System.Timers.Timer> オブジェクトはクラスレベルで宣言されるので、必要な限りスコープ内にとどまります。 その後、その <xref:System.Timers.Timer.Elapsed> イベントを処理して、通常の処理を提供できます。 たとえば、1日24時間、週7日、稼働状態を維持する必要がある重要なサーバーがあるとします。 <xref:System.Timers.Timer> オブジェクトを使用してサーバーを定期的にチェックし、システムが稼働していることを確認するサービスを作成できます。 システムが応答していない場合、サービスはサーバーの再起動または管理者への通知を試みることができます。  
  
> [!IMPORTANT]
> <xref:System.Timers.Timer> クラスは、.NET Standard 1.6 などのすべての .NET 実装とバージョンで使用できるわけではありません。
> このような場合は、代わりに <xref:System.Threading.Timer?displayProperty=nameWithType> クラスを使用できます。
  
 この型は <xref:System.IDisposable> インターフェイスを実装します。 型の使用が完了したら、直接的または間接的に型を破棄する必要があります。 直接的に型を破棄するには、`try`/`catch` ブロック内で <xref:System.IDisposable.Dispose%2A> メソッドを呼び出します。 間接的に型を破棄するには、`using` (C# の場合) または `Using` (Visual Basic 言語) などの言語構成要素を使用します。 詳細については、<xref:System.IDisposable> インターフェイスに関するトピック内の「IDisposable を実装するオブジェクトの使用」セクションを参照してください。  
  
 サーバーベースの <xref:System.Timers.Timer?displayProperty=nameWithType> クラスは、マルチスレッド環境のワーカースレッドで使用するように設計されています。 サーバータイマーは、発生した <xref:System.Timers.Timer.Elapsed> イベントを処理するためにスレッド間を移動できます。その結果、イベントを発生させるときの Windows タイマーよりも精度が向上します。  
  
 <xref:System.Timers.Timer?displayProperty=nameWithType> コンポーネントは、<xref:System.Timers.Timer.Interval%2A> プロパティの値 (ミリ秒単位) に基づいて、<xref:System.Timers.Timer.Elapsed> イベントを発生させます。 このイベントを処理して、必要な処理を実行できます。 たとえば、販売注文をデータベースに継続的にポストするオンライン販売アプリケーションがあるとします。 出荷の指示をコンパイルするサービスは、各注文を個別に処理するのではなく、注文のバッチで動作します。 <xref:System.Timers.Timer> を使用して、30分ごとにバッチ処理を開始することができます。  
  
> [!IMPORTANT]
>  System.string クラスには、システムクロックと同じ解決策があります。 これは、<xref:System.Timers.Timer.Interval%2A> プロパティがシステムクロックの解像度よりも小さい場合に、システムクロックの解決によって定義された間隔で <xref:System.Timers.Timer.Elapsed> イベントが発生することを意味します。 詳細については、<xref:System.Timers.Timer.Interval%2A> プロパティを参照してください。  
  
 <xref:System.Timers.Timer.AutoReset%2A> が `false`に設定されている場合、最初の <xref:System.Timers.Timer.Interval%2A> が経過した後に、<xref:System.Timers.Timer?displayProperty=nameWithType> オブジェクトによって <xref:System.Timers.Timer.Elapsed> イベントが1回だけ発生します。 <xref:System.Timers.Timer.Interval%2A>によって定義された間隔で <xref:System.Timers.Timer.Elapsed> イベントが定期的に発生するようにするには、<xref:System.Timers.Timer.AutoReset%2A> を `true`に設定します。これは既定値です。  
  
 <xref:System.Timers.Timer> コンポーネントは、<xref:System.Timers.Timer.Elapsed> イベントのイベントハンドラーによってスローされたすべての例外をキャッチし、抑制します。 この動作は、.NET Framework の今後のリリースで変更される可能性があります。 ただし、これは非同期に実行されるイベントハンドラーには当てはまりません。また、`await` 演算子C#(では) または `Await` 演算子 (Visual Basic) が含まれていることに注意してください。 これらのイベントハンドラーでスローされる例外は、次の例に示すように、呼び出し元のスレッドに反映されます。 非同期メソッドでスローされる例外の詳細については、「[例外処理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)」を参照してください。  
  
 [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]
 [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  
  
 <xref:System.Timers.Timer.SynchronizingObject%2A> プロパティが `null`場合、<xref:System.Threading.ThreadPool> スレッドで <xref:System.Timers.Timer.Elapsed> イベントが発生します。 <xref:System.Timers.Timer.Elapsed> イベントの処理時間が <xref:System.Timers.Timer.Interval%2A>よりも長い場合は、別の <xref:System.Threading.ThreadPool> スレッドでイベントが再度発生する可能性があります。 この場合、イベントハンドラーは再入可能である必要があります。  
  
> [!NOTE]
>  イベント処理メソッドは、別のスレッドが <xref:System.Timers.Timer.Stop%2A> メソッドを呼び出したとき、または <xref:System.Timers.Timer.Enabled%2A> プロパティを `false`に設定したときに、1つのスレッドで実行されることがあります。 これにより、タイマーが停止した後に <xref:System.Timers.Timer.Elapsed> イベントが発生する可能性があります。 コードの使用例、<xref:System.Timers.Timer.Stop%2A>メソッドは、この競合状態を回避するために 1 つのメソッドを示しています。  
  
 <xref:System.Timers.Timer.SynchronizingObject%2A> が `null`されていない場合でも、<xref:System.Timers.Timer.Dispose%2A> または <xref:System.Timers.Timer.Stop%2A> メソッドが呼び出された後、または <xref:System.Timers.Timer.Enabled%2A> プロパティが `false`に設定された後に、<xref:System.Timers.Timer.Elapsed> イベントが発生する可能性があります。これは、<xref:System.Timers.Timer.Elapsed> イベントを発生させるシグナルが、スレッドプールのスレッドで実行するために常にキューに入れられるためです。 この競合状態がのイベント ハンドラーを示すフラグを設定するには解決するのには 1 つのメソッド、<xref:System.Timers.Timer.Elapsed>後続のイベントを無視するイベントです。  
  
 ユーザーインターフェイス要素にタイマーを配置せずに、フォームやコントロールなどのユーザーインターフェイス要素で <xref:System.Timers.Timer?displayProperty=nameWithType> クラスを使用する場合は、<xref:System.Timers.Timer> を含むフォームまたはコントロールを <xref:System.Timers.Timer.SynchronizingObject%2A> プロパティに割り当てて、イベントがユーザーインターフェイススレッドにマーシャリングされるようにします。  
  
 <xref:System.Timers.Timer>のインスタンスの既定のプロパティ値の一覧については、<xref:System.Timers.Timer.%23ctor%2A> コンストラクターを参照してください。  
  
> [!TIP]
>  .NET には `Timer`という4つのクラスが含まれており、それぞれに異なる機能が用意されています。  
>   
> - <xref:System.Timers.Timer?displayProperty=nameWithType> (このトピック): 一定の間隔でイベントを発生します。 クラスは、マルチスレッド環境でサーバーベースまたはサービスコンポーネントとして使用することを目的としています。ユーザーインターフェイスはなく、実行時には表示されません。  
> - <xref:System.Threading.Timer?displayProperty=nameWithType>: スレッドプールのスレッドで定期的に1つのコールバックメソッドを実行します。 コールバックメソッドは、タイマーがインスタンス化され、変更できないときに定義されます。 このクラスは <xref:System.Timers.Timer?displayProperty=nameWithType> クラスと同様に、マルチスレッド環境でサーバーベースまたはサービスコンポーネントとして使用することを意図しています。ユーザーインターフェイスはなく、実行時には表示されません。  
> - <xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (.NET Framework のみ): 一定の間隔でイベントを発生させる Windows フォームコンポーネント。 このコンポーネントにはユーザー インターフェイスがなく、シングルスレッド環境で使用するように設計されています。  
> - <xref:System.Web.UI.Timer?displayProperty=nameWithType> (.NET Framework のみ): 非同期または同期 web ページのポストバックを一定の間隔で実行する ASP.NET コンポーネント。  

## Examples  
 次の例では、2秒 (2000 ミリ秒) ごとに <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> イベントを発生させる `System.Timers.Timer` オブジェクトをインスタンス化し、イベントのイベントハンドラーを設定して、タイマーを開始します。 イベントハンドラーは、発生するたびに <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> プロパティの値を表示します。  
  
 [!code-csharp[System.Timers.Timer#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]
 [!code-vb[System.Timers.Timer#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe>この型のパブリック <see langword="static" /> メンバーはすべて、スレッドセーフです。 インスタンス メンバーについては、スレッド セーフであることの保証はありません。</threadsafe>
    <altmember cref="P:System.Timers.Timer.AutoReset" />
    <altmember cref="P:System.Timers.Timer.Interval" />
    <altmember cref="E:System.Timers.Timer.Elapsed" />
    <altmember cref="M:System.Timers.Timer.#ctor" />
    <altmember cref="T:System.Threading.Timer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Timers.Timer" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Timers.Timer" /> クラスの新しいインスタンスを初期化し、すべてのプロパティを初期値に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の表に、<xref:System.Timers.Timer>のインスタンスのプロパティの初期値を示します。  
  
|プロパティ|初期値|  
|--------------|-------------------|  
|<xref:System.Timers.Timer.AutoReset%2A>|`true`|  
|<xref:System.Timers.Timer.Enabled%2A>|`false`|  
|<xref:System.Timers.Timer.Interval%2A>|100 ミリ秒|  
|<xref:System.Timers.Timer.SynchronizingObject%2A>|null 参照 (Visual Basic の場合は `Nothing`)。|  
  
   
  
## Examples  
 次の例では、2秒 (2000 ミリ秒) ごとに <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> イベントを発生させる <xref:System.Timers.Timer> オブジェクトをインスタンス化し、イベントのイベントハンドラーを設定して、タイマーを開始します。 イベントハンドラーは、発生するたびに <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> プロパティの値を表示します。  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.SynchronizingObject" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (double interval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 interval) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.#ctor(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (interval As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(double interval);" />
      <MemberSignature Language="F#" Value="new System.Timers.Timer : double -&gt; System.Timers.Timer" Usage="new System.Timers.Timer interval" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="interval" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="interval">ミリ秒単位でのイベントの発生間隔。 この値はゼロより大きく、<see cref="F:System.Int32.MaxValue" /> 以下である必要があります。</param>
        <summary><see cref="T:System.Timers.Timer" /> クラスの新しいインスタンスを初期化し、<see cref="P:System.Timers.Timer.Interval" /> プロパティを指定したミリ秒数に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、新しいタイマーインスタンスの <xref:System.Timers.Timer.Interval%2A> プロパティを設定しますが、タイマーを有効にしません。  
  
   
  
## Examples  
 次の例では、2秒 (2000 ミリ秒) ごとに <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> イベントを発生させる <xref:System.Timers.Timer> オブジェクトをインスタンス化し、イベントのイベントハンドラーを設定して、タイマーを開始します。 イベントハンドラーは、発生するたびに <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> プロパティの値を表示します。  
  
 [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]
 [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="interval" /> パラメーターの値は 0 以下か、または <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="AutoReset">
      <MemberSignature Language="C#" Value="public bool AutoReset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoReset" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.AutoReset" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoReset As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoReset { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoReset : bool with get, set" Usage="System.Timers.Timer.AutoReset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1;net-5.0">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("Indicates whether the timer will be restarted when it is enabled.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Timers.TimersDescription("TimerAutoReset")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Timers.Timer" /> が <see cref="E:System.Timers.Timer.Elapsed" /> イベントを一度のみ発生させる (<see langword="false" />) か、または繰り返し発生させる (<see langword="true" />) かを示すブール値を取得または設定します。</summary>
        <value>指定した間隔が経過するたびに <see cref="T:System.Timers.Timer" /> で <see cref="E:System.Timers.Timer.Elapsed" /> イベントを発生させる場合は <see langword="true" />。最初の間隔が経過した後に 1 回だけ <see langword="false" /> イベントを発生させる場合は <see cref="E:System.Timers.Timer.Elapsed" />。 既定では、 <see langword="true" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Timers.Timer.Start%2A> メソッドが呼び出されたときに <xref:System.Timers.Timer> が既に有効になっている場合、間隔はリセットされます。 <xref:System.Timers.Timer.AutoReset%2A> が `false`場合は、カウントを再び開始するために、<xref:System.Timers.Timer.Start%2A> メソッドを呼び出す必要があります。  
  
 間隔をリセットすると、<xref:System.Timers.Timer.Elapsed> イベントが発生したときに影響を及ぼします。 たとえば、間隔を5秒に設定し、<xref:System.Timers.Timer.Enabled%2A> プロパティを `true`に設定すると、<xref:System.Timers.Timer.Enabled%2A> が設定された時点でカウントが開始されます。 カウントを3秒に設定した場合、間隔を10秒にリセットすると、<xref:System.Timers.Timer.Enabled%2A> プロパティが `true`に設定された後、最初に13秒間 <xref:System.Timers.Timer.Elapsed> イベントが発生します。  
  
   
  
## Examples  
 次の例では、<xref:System.Timers.Timer.Elapsed> イベントが1.5 秒後に発生する <xref:System.Timers.Timer> を作成します。 そのイベントハンドラーに "Hello World!" と表示されます。 コンソールで。  
  
 [!code-cpp[Classic Timer.Timer1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer.Timer1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CS/source.cs#1)]
 [!code-vb[Classic Timer.Timer1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="timer.BeginInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>フォームまたは別のコンポーネントで使用する <see cref="T:System.Timers.Timer" /> の実行時の初期化を開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] デザイン環境では、このメソッドを使用して、フォームまたは別のコンポーネントで使用されるコンポーネントの初期化を開始します。 <xref:System.Timers.Timer.EndInit%2A> メソッドは、初期化を終了します。 <xref:System.Timers.Timer.BeginInit%2A> メソッドと <xref:System.Timers.Timer.EndInit%2A> メソッドを使用すると、完全に初期化される前にコントロールが使用されなくなります。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.EndInit" />
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="timer.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Timers.Timer" /> で使用されたリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Timers.Timer.Close%2A> メソッドは、`Dispose` メソッドを呼び出します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="timer.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>現在の <see cref="T:System.Timers.Timer" /> によって使用されているすべてのリソースを解放します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Elapsed">
      <MemberSignature Language="C#" Value="public event System.Timers.ElapsedEventHandler Elapsed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Timers.ElapsedEventHandler Elapsed" />
      <MemberSignature Language="DocId" Value="E:System.Timers.Timer.Elapsed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Elapsed As ElapsedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Timers::ElapsedEventHandler ^ Elapsed;" />
      <MemberSignature Language="F#" Value="member this.Elapsed : System.Timers.ElapsedEventHandler " Usage="member this.Elapsed : System.Timers.ElapsedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("Occurs when the Interval has elapsed.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Timers.TimersDescription("TimerIntervalElapsed")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Timers.ElapsedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>間隔が経過すると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Timers.Timer.Enabled%2A> プロパティが `true`、<xref:System.Timers.Timer.Interval%2A> プロパティで定義されている時間間隔 (ミリ秒単位) が経過すると、<xref:System.Timers.Timer.Elapsed> イベントが発生します。 <xref:System.Timers.Timer.AutoReset%2A> プロパティが `true`場合、イベントは <xref:System.Timers.Timer.Interval%2A> プロパティによって定義された間隔で繰り返し発生します。それ以外の場合、イベントは、<xref:System.Timers.Timer.Interval%2A> 値が初めて経過したときに1回だけ発生します。  
  
 <xref:System.Timers.Timer> の開始後に <xref:System.Timers.Timer.Interval%2A> が設定されている場合、カウントはリセットされます。 たとえば、間隔を5秒に設定し、<xref:System.Timers.Timer.Enabled%2A> を `true`に設定した場合、<xref:System.Timers.Timer.Enabled%2A> の設定時にカウントが開始されます。 [カウント] を3秒に設定した場合、間隔を10秒にリセットすると、<xref:System.Timers.Timer.Enabled%2A> が `true`に設定された後、最初に13秒後に <xref:System.Timers.Timer.Elapsed> イベントが発生します。  
  
 <xref:System.Timers.Timer.SynchronizingObject%2A> プロパティが `null`場合、<xref:System.Threading.ThreadPool> スレッドで <xref:System.Timers.Timer.Elapsed> イベントが発生します。 <xref:System.Timers.Timer.Elapsed> イベントの処理時間が <xref:System.Timers.Timer.Interval%2A>よりも長い場合は、別の <xref:System.Threading.ThreadPool> スレッドでイベントが再度発生する可能性があります。 この場合、イベントハンドラーは再入可能である必要があります。  
  
> [!NOTE]
>  イベント処理メソッドは、別のスレッドが <xref:System.Timers.Timer.Stop%2A> メソッドを呼び出したとき、または <xref:System.Timers.Timer.Enabled%2A> プロパティを `false`に設定したときに、1つのスレッドで実行されることがあります。 これにより、タイマーが停止した後に <xref:System.Timers.Timer.Elapsed> イベントが発生する可能性があります。 コードの使用例、<xref:System.Timers.Timer.Stop%2A>メソッドは、この競合状態を回避するために 1 つのメソッドを示しています。  
  
 <xref:System.Timers.Timer.SynchronizingObject%2A> が `null`されていない場合でも、<xref:System.Timers.Timer.Dispose%2A> または <xref:System.Timers.Timer.Stop%2A> メソッドが呼び出された後、または <xref:System.Timers.Timer.Enabled%2A> プロパティが `false`に設定された後に、<xref:System.Timers.Timer.Elapsed> イベントが発生する可能性があります。これは、<xref:System.Timers.Timer.Elapsed> イベントを発生させるシグナルが、スレッドプールのスレッドで実行するために常にキューに入れられるためです。 この競合状態がのイベント ハンドラーを示すフラグを設定するには解決するのには 1 つのメソッド、<xref:System.Timers.Timer.Elapsed>後続のイベントを無視するイベントです。  
  
 <xref:System.Timers.Timer> コンポーネントは、<xref:System.Timers.Timer.Elapsed> イベントのイベントハンドラーによってスローされたすべての例外をキャッチし、抑制します。 この動作は、.NET Framework の今後のリリースで変更される可能性があります。  
  
   
  
## Examples  
 次の例では、2秒 (2000 ミリ秒) ごとに <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> イベントを発生させる <xref:System.Timers.Timer> オブジェクトをインスタンス化し、イベントのイベントハンドラーを設定して、タイマーを開始します。 イベントハンドラーは、発生するたびに <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> プロパティの値を表示します。  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
        <altmember cref="T:System.Timers.ElapsedEventArgs" />
        <altmember cref="T:System.Timers.ElapsedEventHandler" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Timers.Timer.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1;net-5.0">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("Indicates whether the timer is enabled to fire events at a defined interval.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Timers.TimersDescription("TimerEnabled")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Timers.Timer" /> で <see cref="E:System.Timers.Timer.Elapsed" /> イベントを発生させる必要があるかどうかを示す値を取得または設定します。</summary>
        <value><see cref="T:System.Timers.Timer" /> で <see cref="E:System.Timers.Timer.Elapsed" /> イベントを発生させる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定では、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `true` への <xref:System.Timers.Timer.Enabled%2A> の設定は <xref:System.Timers.Timer.Start%2A>の呼び出しと同じですが、`false` への <xref:System.Timers.Timer.Enabled%2A> の設定は <xref:System.Timers.Timer.Stop%2A>の呼び出しと同じです。  
  
> [!NOTE]
>  <xref:System.Timers.Timer.Elapsed> イベントを発生させるシグナルは、常に <xref:System.Threading.ThreadPool> スレッドで実行するためにキューに入れられます。 これにより、<xref:System.Timers.Timer.Enabled%2A> プロパティが `false`に設定された後に、<xref:System.Timers.Timer.Elapsed> イベントが発生する可能性があります。 コード例を<xref:System.Timers.Timer.Stop%2A>メソッドは、この競合状態を回避する 1 つのメソッドを示しています。  
  
 <xref:System.Timers.Timer.Enabled%2A> が `true` に設定され、<xref:System.Timers.Timer.AutoReset%2A> が `false`に設定されている場合、<xref:System.Timers.Timer> は、最初の間隔が経過したときに、<xref:System.Timers.Timer.Elapsed> イベントを1回だけ発生させます。  
  
 <xref:System.Timers.Timer> の開始後に間隔が設定されている場合、カウントはリセットされます。 たとえば、間隔を5秒に設定し、<xref:System.Timers.Timer.Enabled%2A> プロパティを `true`に設定すると、<xref:System.Timers.Timer.Enabled%2A> が設定された時点でカウントが開始されます。 [カウント] を3秒に設定した場合、間隔を10秒にリセットすると、<xref:System.Timers.Timer.Enabled%2A> が `true`に設定された後、最初に13秒後に <xref:System.Timers.Timer.Elapsed> イベントが発生します。  
  
> [!NOTE]
>  Microsoft Visual Studio のようなビジュアルデザイナーの中には、新しい <xref:System.Timers.Timer>を挿入するときに <xref:System.Timers.Timer.Enabled%2A> プロパティを `true` に設定するものがあります。  
  
   
  
## Examples  
 次の例では、2秒 (2000 ミリ秒) ごとに <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> イベントを発生させる <xref:System.Timers.Timer> オブジェクトをインスタンス化し、イベントのイベントハンドラーを設定して、タイマーを開始します。 イベントハンドラーは、発生するたびに <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> プロパティの値を表示します。  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">タイマーが破棄されたため、このプロパティは設定できません。</exception>
        <exception cref="T:System.ArgumentException"><see cref="P:System.Timers.Timer.Interval" /> プロパティは、タイマーが有効になる前に <see cref="F:System.Int32.MaxValue" /> より大きい値に設定されました。</exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="M:System.Timers.Timer.Stop" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="timer.EndInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>フォームまたは別のコンポーネントで使用する <see cref="T:System.Timers.Timer" /> の実行時の初期化を終了します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] デザイン環境では、このメソッドを使用して、フォームまたは別のコンポーネントによって使用されるコンポーネントの初期化を終了します。 <xref:System.Timers.Timer.BeginInit%2A> メソッドは、初期化を開始します。 <xref:System.Timers.Timer.BeginInit%2A> メソッドと <xref:System.Timers.Timer.EndInit%2A> メソッドを使用すると、完全に初期化される前にコントロールが使用されなくなります。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Timers.Timer.BeginInit" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public double Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Interval" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Interval { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Interval : double with get, set" Usage="System.Timers.Timer.Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1;net-5.0">
          <AttributeName>System.ComponentModel.DefaultValue(100)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("The number of milliseconds between timer events.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Timers.TimersDescription("TimerInterval")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="E:System.Timers.Timer.Elapsed" /> イベントの発生間隔を取得または設定します。</summary>
        <value>ミリ秒単位での <see cref="E:System.Timers.Timer.Elapsed" /> イベントの発生間隔。 この値はゼロより大きく、<see cref="F:System.Int32.MaxValue" /> 以下である必要があります。 既定値は 100 ミリ秒です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Timers.Timer.Elapsed> イベントが発生する頻度を決定するには、<xref:System.Timers.Timer.Interval%2A> プロパティを使用します。 <xref:System.Timers.Timer> クラスはシステムクロックに依存するので、システムクロックと同じ解像度になります。 これは、<xref:System.Timers.Timer.Interval%2A> プロパティがシステムクロックの解像度よりも小さい場合に、システムクロックの解決によって定義された間隔で <xref:System.Timers.Timer.Elapsed> イベントが発生することを意味します。 次の例では、<xref:System.Timers.Timer.Interval%2A> プロパティを5ミリ秒に設定します。 システムクロックの解像度が約15ミリ秒である [!INCLUDE[win7](~/includes/win7-md.md)] システムで実行すると、イベントは5ミリ秒ごとではなく約15ミリ秒ごとに発生します。  
  
 [!code-csharp[System.Timers.Timer.Interval#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/interval2.cs#1)]
 [!code-vb[System.Timers.Timer.Interval#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/interval2.vb#1)]  
  
 次のコードを使用して、現在のシステムのシステムクロックの解決方法を決定できます。  
  
 [!code-csharp[System.Timers.Timer.Interval#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/resolution1.cs#2)]
 [!code-vb[System.Timers.Timer.Interval#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/resolution1.vb#2)]  
  
 かどうか、アプリが必要以上の解像度によって提供されるよりも、<xref:System.Timers.Timer>クラスまたはシステム クロック、高解像度のマルチ メディア タイマーを使用して、参照してください。[メソッド: 高分解能タイマを使用する](https://msdn.microsoft.com/library/aa964692.aspx)します。  
  
 <xref:System.Timers.Timer> の開始後に間隔が設定されている場合、カウントはリセットされます。 たとえば、間隔を5秒に設定し、<xref:System.Timers.Timer.Enabled%2A> プロパティを `true`に設定すると、<xref:System.Timers.Timer.Enabled%2A> が設定された時点でカウントが開始されます。 [カウント] を3秒に設定した場合、間隔を10秒にリセットすると、<xref:System.Timers.Timer.Enabled%2A> が `true`に設定された後、最初に13秒後に <xref:System.Timers.Timer.Elapsed> イベントが発生します。  
  
 <xref:System.Timers.Timer.Enabled%2A> が `true` に設定され、<xref:System.Timers.Timer.AutoReset%2A> が `false`に設定されている場合、<xref:System.Timers.Timer> は、最初の間隔が経過したときに、<xref:System.Timers.Timer.Elapsed> イベントを1回だけ発生させます。 <xref:System.Timers.Timer.Enabled%2A> は `false`に設定されます。  
  
> [!NOTE]
>  <xref:System.Timers.Timer.Enabled%2A> と <xref:System.Timers.Timer.AutoReset%2A> が両方とも `false`に設定されていて、タイマーが既に有効になっている場合、<xref:System.Timers.Timer.Elapsed> プロパティが <xref:System.Timers.Timer.Enabled%2A> に設定されているかのように、<xref:System.Timers.Timer.Interval%2A> プロパティを設定すると、`true`イベントが1回発生します。 イベントを発生させずに間隔を設定するには、一時的に [<xref:System.Timers.Timer.Enabled%2A>] プロパティを `true`に設定し、[<xref:System.Timers.Timer.Interval%2A>] プロパティを目的の時間間隔に設定します。次に、<xref:System.Timers.Timer.Enabled%2A> プロパティを直ちに `false`に戻します。  
  
   
  
## Examples  
 次の例では、2秒 (2000 ミリ秒) ごとに <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> イベントを発生させる <xref:System.Timers.Timer> オブジェクトをインスタンス化し、イベントのイベントハンドラーを設定して、タイマーを開始します。 イベントハンドラーは、発生するたびに <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> プロパティの値を表示します。  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">間隔が 0 以下です。  
  
または 
間隔が <see cref="F:System.Int32.MaxValue" /> よりも大きく、タイマーが現在有効になっています。 (タイマーが現在有効になっていない場合は、有効になるまで例外はスローされません。)</exception>
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Site" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Site As ISite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::ISite ^ Site { System::ComponentModel::ISite ^ get(); void set(System::ComponentModel::ISite ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Site : System.ComponentModel.ISite with get, set" Usage="System.Timers.Timer.Site" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>デザイン モードで <see cref="T:System.Timers.Timer" /> をコンテナーにバインドするサイトを取得または設定します。</summary>
        <value><see cref="T:System.Timers.Timer" /> オブジェクトをコンテナーにバインドするサイトを表す <see cref="T:System.ComponentModel.ISite" /> インターフェイス。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 サイトは、<xref:System.ComponentModel.Component> を <xref:System.ComponentModel.Container> にバインドし、それらの間の通信を可能にします。さらに、コンテナーがそのコンポーネントを管理する方法を提供します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="timer.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="P:System.Timers.Timer.Enabled" /> を <see langword="true" /> に設定して、<see cref="E:System.Timers.Timer.Elapsed" /> イベントの発生を開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Timers.Timer.Start%2A> が呼び出され、<xref:System.Timers.Timer.AutoReset%2A> が `false`に設定されている場合、<xref:System.Timers.Timer> では、最初の間隔が経過したときに、<xref:System.Timers.Timer.Elapsed> イベントが1回だけ発生します。 <xref:System.Timers.Timer.Start%2A> が呼び出され、<xref:System.Timers.Timer.AutoReset%2A> が `true`場合、<xref:System.Timers.Timer> は最初に間隔が経過したときにイベントを <xref:System.Timers.Timer.Elapsed> 発生させ、指定した間隔でイベントを発生させ続けます。  
  
 <xref:System.Timers.Timer.Enabled%2A> を `true`に設定して、タイミングを開始することもできます。  
  
> [!NOTE]
>  <xref:System.Timers.Timer.AutoReset%2A> が `false`場合は、カウントを再び開始するために、<xref:System.Timers.Timer.Start%2A> メソッドを呼び出す必要があります。  
  
 タイマーが有効になっている場合に <xref:System.Timers.Timer.Start%2A> メソッドを呼び出すと、効果はありません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><see cref="T:System.Timers.Timer" /> の作成時に設定された間隔が <see cref="F:System.Int32.MaxValue" /> + 1 以上か、0 未満に設定されています。</exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Stop" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="timer.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="P:System.Timers.Timer.Enabled" /> を <see langword="false" /> に設定して、<see cref="E:System.Timers.Timer.Elapsed" /> イベントの発生を停止します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Timers.Timer.Enabled%2A> を `false`に設定して、タイミングを停止することもできます。  
  
> [!NOTE]
>  <xref:System.Timers.Timer.Elapsed> イベントを発生させるシグナルは、常に <xref:System.Threading.ThreadPool> スレッドで実行されるようにキューに置かれるため、<xref:System.Timers.Timer.Stop%2A> メソッドの呼び出しが別のスレッドで実行されるときに、イベント処理メソッドが1つのスレッドで実行される可能性があります。 これにより、<xref:System.Timers.Timer.Stop%2A> メソッドが呼び出された後に、<xref:System.Timers.Timer.Elapsed> イベントが発生する可能性があります。 「[例](#examples)」セクションの2番目のコード例は、この競合状態を回避する方法の1つを示しています。  
  
   
  
## Examples  
 次の例では、2秒 (2000 ミリ秒) ごとに <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> イベントを発生させる `System.Timers.Timer` オブジェクトをインスタンス化し、イベントのイベントハンドラーを設定して、タイマーを開始します。 イベントハンドラーは、発生するたびに <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> プロパティの値を表示します。 ユーザーが Enter キーを押すと、アプリケーションはアプリケーションを終了する前に <xref:System.Timers.Timer.Stop%2A> メソッドを呼び出します。  
  
 [!code-csharp[System.Timers.Timer#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]
 [!code-vb[System.Timers.Timer#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  
  
 次のコード例を呼び出すスレッドを防ぐために 1 つのメソッドを示しています、<xref:System.Timers.Timer.Stop%2A>メソッドまで、現在の実行を続行できなく<xref:System.Timers.Timer.Elapsed>イベント終了すると、2 つの操作を防止するためにも<xref:System.Timers.Timer.Elapsed>を同じイベント ハンドラーの実行からのイベント時間 (再入とも呼ばれます)。  
  
 この例では、100テストの実行を実行します。 テストが実行されるたびに、タイマーは150ミリ秒の間隔で開始されます。 イベントハンドラーは、<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> メソッドを使用して、50 ~ 200 ミリ秒の長さでランダムに変化するタスクをシミュレートします。 また、テストメソッドは、1秒間待機してからタイマーを停止する制御スレッドを開始します。 コントロールスレッドがタイマーを停止したときにイベントが処理されている場合、制御スレッドはイベントが完了するまで待機してから続行する必要があります。  
  
 <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> メソッドのオーバーロードは、再入を回避し、実行中のイベントが終了するまで制御スレッドが続行されないようにするために使用されます。 イベントハンドラーは、<xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> メソッドを使用して、コントロール変数を1に設定します。ただし、値が現在0の場合に限ります。 これはアトミック操作です。 戻り値が0の場合、コントロール変数が1に設定され、イベントハンドラーが処理を続行します。 戻り値が0以外の場合は、再入を避けるために、イベントは単に破棄されます。 (すべてのイベントを実行するために必要な場合、<xref:System.Threading.Monitor>クラスは、イベントを同期するメソッドの向上になります)。イベント ハンドラーの終了時に、設定コントロール変数戻るを 0 にします。 この例では、再入によって破棄され、<xref:System.Timers.Timer.Stop%2A> メソッドが呼び出された後に発生した、実行されたイベントの合計数を記録します。  
  
 コントロールスレッドは、<xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> メソッドを使用して、コントロール変数を-1 (-1) に設定します。ただし、値が現在0の場合に限ります。 アトミック操作が0以外の値を返す場合、イベントは現在実行中です。 制御スレッドが待機して、もう一度試行します。 この例では、コントロールスレッドがイベントの終了を待機する必要があった回数を記録します。  
  
 [!code-csharp[Timer.Stop#1](~/samples/snippets/csharp/VS_Snippets_CLR/Timer.Stop/CS/source.cs#1)]
 [!code-vb[Timer.Stop#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Timer.Stop/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizingObject">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISynchronizeInvoke SynchronizingObject" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.SynchronizingObject" />
      <MemberSignature Language="VB.NET" Value="Public Property SynchronizingObject As ISynchronizeInvoke" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::ISynchronizeInvoke ^ SynchronizingObject { System::ComponentModel::ISynchronizeInvoke ^ get(); void set(System::ComponentModel::ISynchronizeInvoke ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizingObject : System.ComponentModel.ISynchronizeInvoke with get, set" Usage="System.Timers.Timer.SynchronizingObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1;net-5.0">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("The object used to marshal the event handler calls issued when an interval has elapsed.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Timers.TimersDescription("TimerSynchronizingObject")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISynchronizeInvoke</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定した間隔が経過したときに発行されるイベント ハンドラー呼び出しをマーシャリングするために使用するオブジェクトを取得または設定します。</summary>
        <value>指定した間隔が経過したときに発行されるイベント ハンドラー呼び出しをマーシャリングするために使用するオブジェクトを表す <see cref="T:System.ComponentModel.ISynchronizeInvoke" />。 既定では、 <see langword="null" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Timers.Timer.SynchronizingObject%2A> が `null`場合、<xref:System.Timers.Timer.Elapsed> イベントを処理するメソッドは、システムスレッドプールからのスレッドで呼び出されます。 システムスレッドプールの詳細については、「<xref:System.Threading.ThreadPool>」を参照してください。  
  
 <xref:System.Timers.Timer.Elapsed> イベントがボタンなどのビジュアル Windows フォームコンポーネントによって処理される場合、システムスレッドプールを介してコンポーネントにアクセスすると、例外が発生するか、それとも動作しない可能性があります。 <xref:System.Timers.Timer.SynchronizingObject%2A> を Windows フォームコンポーネントに設定することによって、この効果を回避します。これにより、<xref:System.Timers.Timer.Elapsed> イベントを処理するメソッドが、コンポーネントが作成されたのと同じスレッドで呼び出されます。  
  
> [!NOTE]
>  <xref:System.Timers.Timer.SynchronizingObject%2A> プロパティが `null`ない場合でも、<xref:System.Timers.Timer.Dispose%2A> または <xref:System.Timers.Timer.Stop%2A> メソッドが呼び出された後、または <xref:System.Timers.Timer.Enabled%2A> プロパティが `false`に設定された後に、<xref:System.Timers.Timer.Elapsed> イベントが発生する可能性があります。これは、<xref:System.Timers.Timer.Elapsed> イベントを発生させるシグナルが、スレッドプールのスレッドで実行するために常にキューに置かれるためです。 この競合状態がのイベント ハンドラーを示すフラグを設定するには解決するのには 1 つのメソッド、<xref:System.Timers.Timer.Elapsed>後続のイベントを無視するイベントです。  
  
 <xref:System.Timers.Timer> が Visual Studio 内で Windows フォームデザイナーで使用されている場合、<xref:System.Timers.Timer.SynchronizingObject%2A> は、<xref:System.Timers.Timer>を含むコントロールに自動的に設定されます。 たとえば、`Form1` (<xref:System.Windows.Forms.Form>から継承) のデザイナーに <xref:System.Timers.Timer> を配置すると、<xref:System.Timers.Timer> の <xref:System.Timers.Timer.SynchronizingObject%2A> プロパティが `Form1`のインスタンスに設定されます。  
  
   
  
## Examples  
 次の例は、非常に単純なテキストファイルエディターとして機能する Windows フォームアプリです。 テキストボックス内のテキストが保存されていない場合、アプリケーションは、テキストボックスの内容を保存するかどうかを1分間隔でユーザーに要求します。  これを行うには、<xref:System.Timers.Timer.Interval%2A> プロパティを1分 (6万ミリ秒) に設定し、<xref:System.Timers.Timer.SynchronizingObject%2A> プロパティを <xref:System.Windows.Forms.Form> オブジェクトに設定します。  
  
 [!code-csharp[System.Timers.Timer.SynchronizingObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/cs/Form1.cs#1)]
 [!code-vb[System.Timers.Timer.SynchronizingObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/vb/Form1.vb#1)]  
  
 この例では、次のコントロールをフォームに追加する必要があります。  
  
-   `TextBox1` という名前の <xref:System.Windows.Forms.TextBox> コントロール (既定の名前)。  
  
-   `Button1` という名前の <xref:System.Windows.Forms.Button> コントロール (既定の名前)。  
  
-   `SaveSaveFileDialog1` という名前の <xref:System.Windows.Forms.SaveFileDialog> コントロール (既定の名前)。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
        <altmember cref="T:System.ComponentModel.ISynchronizeInvoke" />
        <altmember cref="T:System.Threading.ThreadPool" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
  </Members>
</Type>
