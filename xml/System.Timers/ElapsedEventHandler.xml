<Type Name="ElapsedEventHandler" FullName="System.Timers.ElapsedEventHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="15fac1980d66d5e02aad64c7c3f11a5afd554d4f" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75114682" /></Metadata><TypeSignature Language="C#" Value="public delegate void ElapsedEventHandler(object sender, ElapsedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ElapsedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Timers.ElapsedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ElapsedEventHandler(sender As Object, e As ElapsedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ElapsedEventHandler(System::Object ^ sender, ElapsedEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type ElapsedEventHandler = delegate of obj * ElapsedEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Timers.ElapsedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender"><span data-ttu-id="d7c32-101">イベントのソース。</span><span class="sxs-lookup"><span data-stu-id="d7c32-101">The source of the event.</span></span></param>
    <param name="e"><span data-ttu-id="d7c32-102">イベント データを格納している <see cref="T:System.Timers.ElapsedEventArgs" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7c32-102">An <see cref="T:System.Timers.ElapsedEventArgs" /> object that contains the event data.</span></span></param>
    <summary><span data-ttu-id="d7c32-103"><see cref="E:System.Timers.Timer.Elapsed" /> の <see cref="T:System.Timers.Timer" /> イベントを処理するメソッドを表します。</span><span class="sxs-lookup"><span data-stu-id="d7c32-103">Represents the method that will handle the <see cref="E:System.Timers.Timer.Elapsed" /> event of a <see cref="T:System.Timers.Timer" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7c32-104"><xref:System.Timers.ElapsedEventHandler> デリゲートを作成する場合は、<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> イベントを処理するメソッドを指定します。</span><span class="sxs-lookup"><span data-stu-id="d7c32-104">When you create an <xref:System.Timers.ElapsedEventHandler> delegate, you identify the method that will handle the <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="d7c32-105">イベントをイベント ハンドラーに関連付けるには、デリゲートのインスタンスをイベントに追加します。</span><span class="sxs-lookup"><span data-stu-id="d7c32-105">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="d7c32-106">デリゲートを削除しない限り、そのイベントが発生すると常にイベント ハンドラーが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d7c32-106">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="d7c32-107">イベントハンドラーデリゲートの詳細については、「[イベントの処理と発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d7c32-107">For more information about event handler delegates, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7c32-108">次のコード例では、<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> イベントのイベントハンドラーを設定し、タイマーを作成して、タイマーを開始します。</span><span class="sxs-lookup"><span data-stu-id="d7c32-108">The following code example sets up an event handler for the <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event, creates a timer, and starts the timer.</span></span> <span data-ttu-id="d7c32-109">イベントハンドラーには、<xref:System.Timers.ElapsedEventHandler> デリゲートと同じシグネチャがあります。</span><span class="sxs-lookup"><span data-stu-id="d7c32-109">The event handler has the same signature as the <xref:System.Timers.ElapsedEventHandler> delegate.</span></span> <span data-ttu-id="d7c32-110">イベントハンドラーは、発生するたびに <xref:System.Timers.ElapsedEventArgs.SignalTime%2A> プロパティを表示します。</span><span class="sxs-lookup"><span data-stu-id="d7c32-110">The event handler displays the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A> property each time it is raised.</span></span>  
  
 [!code-cpp[Classic Timer Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Timer Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Timer Example/CS/source.cs#1)]
 [!code-vb[Classic Timer Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Timer Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="E:System.Timers.Timer.Elapsed" />
    <altmember cref="T:System.Timers.ElapsedEventArgs" />
  </Docs>
</Type>
