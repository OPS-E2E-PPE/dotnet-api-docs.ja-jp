<Type Name="RegistrySecurity" FullName="System.Security.AccessControl.RegistrySecurity">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c1c9872e61be6271f6daee77cde7efec05f2f19c" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82304869" /></Metadata><TypeSignature Language="C#" Value="public sealed class RegistrySecurity : System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegistrySecurity extends System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.RegistrySecurity" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RegistrySecurity&#xA;Inherits NativeObjectSecurity" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegistrySecurity sealed : System::Security::AccessControl::NativeObjectSecurity" />
  <TypeSignature Language="F#" Value="type RegistrySecurity = class&#xA;    inherit NativeObjectSecurity" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>4.1.3.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="Microsoft.Win32.Registry.AccessControl" FromVersion="4.0.3.0" To="Microsoft.Win32.Registry" ToVersion="4.1.1.0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
    <TypeForwarding From="Microsoft.Win32.Registry.AccessControl" FromVersion="4.0.4.0" To="Microsoft.Win32.Registry" ToVersion="4.1.2.0" FrameworkAlternate="dotnet-plat-ext-3.0;net-5.0;netcore-3.0" />
    <TypeForwarding From="Microsoft.Win32.Registry.AccessControl" FromVersion="4.0.5.0" To="Microsoft.Win32.Registry" ToVersion="4.1.3.0" FrameworkAlternate="dotnet-plat-ext-3.1;netcore-3.1" />
    <TypeForwarding From="Microsoft.Win32.Registry.AccessControl" FromVersion="5.0.0.0" To="Microsoft.Win32.Registry" ToVersion="5.0.0.0" FrameworkAlternate="dotnet-plat-ext-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Security.AccessControl.NativeObjectSecurity</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="2c277-101">レジストリ キーの Windows アクセス制御セキュリティを表します。</span><span class="sxs-lookup"><span data-stu-id="2c277-101">Represents the Windows access control security for a registry key.</span></span> <span data-ttu-id="2c277-102">このクラスは継承できません。</span><span class="sxs-lookup"><span data-stu-id="2c277-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c277-103"><xref:System.Security.AccessControl.RegistrySecurity> オブジェクトは、レジストリキーのアクセス権を指定します。また、アクセス試行の監査方法も指定します。</span><span class="sxs-lookup"><span data-stu-id="2c277-103">A <xref:System.Security.AccessControl.RegistrySecurity> object specifies access rights for a registry key, and also specifies how access attempts are audited.</span></span> <span data-ttu-id="2c277-104">レジストリキーへのアクセス権は、<xref:System.Security.AccessControl.RegistryAccessRule> オブジェクトによって表される各アクセスルールと共に、ルールとして表現されます。</span><span class="sxs-lookup"><span data-stu-id="2c277-104">Access rights to the registry key are expressed as rules, with each access rule represented by a <xref:System.Security.AccessControl.RegistryAccessRule> object.</span></span> <span data-ttu-id="2c277-105">各監査規則は、<xref:System.Security.AccessControl.RegistryAuditRule> オブジェクトによって表されます。</span><span class="sxs-lookup"><span data-stu-id="2c277-105">Each auditing rule is represented by a <xref:System.Security.AccessControl.RegistryAuditRule> object.</span></span>  
  
 <span data-ttu-id="2c277-106">これにより、基になる Windows セキュリティシステムがミラー化されます。セキュリティ保護可能な各オブジェクトには、セキュリティで保護されたオブジェクトへのアクセスを制御する随意アクセス制御リスト (DACL) が1つだけあり、監査対象のアクセス試行を指定するシステムアクセス制御リスト (SACL) は最大1つです。</span><span class="sxs-lookup"><span data-stu-id="2c277-106">This mirrors the underlying Windows security system, in which each securable object has at most one discretionary access control list (DACL) that controls access to the secured object, and at most one system access control list (SACL) that specifies which access attempts are audited.</span></span> <span data-ttu-id="2c277-107">DACL と SACL は、ユーザーおよびグループのアクセスと監査を指定するアクセス制御エントリ (ACE) の順序付きリストです。</span><span class="sxs-lookup"><span data-stu-id="2c277-107">The DACL and SACL are ordered lists of access control entries (ACE) that specify access and auditing for users and groups.</span></span> <span data-ttu-id="2c277-108"><xref:System.Security.AccessControl.RegistryAccessRule> または <xref:System.Security.AccessControl.RegistryAuditRule> オブジェクトは、複数の ACE を表す場合があります。</span><span class="sxs-lookup"><span data-stu-id="2c277-108">A <xref:System.Security.AccessControl.RegistryAccessRule> or <xref:System.Security.AccessControl.RegistryAuditRule> object might represent more than one ACE.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c277-109">Windows アクセス制御セキュリティは、レジストリキーにのみ適用できます。</span><span class="sxs-lookup"><span data-stu-id="2c277-109">Windows access control security can only be applied to registry keys.</span></span> <span data-ttu-id="2c277-110">キーに格納されている個々のキーと値のペアには適用できません。</span><span class="sxs-lookup"><span data-stu-id="2c277-110">It cannot be applied to individual key/value pairs stored in a key.</span></span>  
  
 <span data-ttu-id="2c277-111"><xref:System.Security.AccessControl.RegistrySecurity>、<xref:System.Security.AccessControl.RegistryAccessRule>、および <xref:System.Security.AccessControl.RegistryAuditRule> クラスは、Acl と Ace の実装の詳細を非表示にします。</span><span class="sxs-lookup"><span data-stu-id="2c277-111">The <xref:System.Security.AccessControl.RegistrySecurity>, <xref:System.Security.AccessControl.RegistryAccessRule>, and <xref:System.Security.AccessControl.RegistryAuditRule> classes hide the implementation details of ACLs and ACEs.</span></span> <span data-ttu-id="2c277-112">17個の ACE の種類と、アクセス権の継承と反映を適切に維持する複雑さを無視することができます。</span><span class="sxs-lookup"><span data-stu-id="2c277-112">They allow you to ignore the seventeen different ACE types and the complexity of correctly maintaining inheritance and propagation of access rights.</span></span> <span data-ttu-id="2c277-113">これらのオブジェクトは、次の一般的なアクセス制御エラーを防ぐためにも設計されています。</span><span class="sxs-lookup"><span data-stu-id="2c277-113">These objects are also designed to prevent the following common access control errors:</span></span>  
  
-   <span data-ttu-id="2c277-114">Null の DACL を持つセキュリティ記述子を作成します。</span><span class="sxs-lookup"><span data-stu-id="2c277-114">Creating a security descriptor with a null DACL.</span></span> <span data-ttu-id="2c277-115">DACL への null 参照を使用すると、任意のユーザーがオブジェクトにアクセス規則を追加でき、サービス拒否攻撃を行う可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2c277-115">A null reference to a DACL allows any user to add access rules to an object, potentially creating a denial-of-service attack.</span></span> <span data-ttu-id="2c277-116">新しい <xref:System.Security.AccessControl.RegistrySecurity> オブジェクトは、常に空の DACL で開始されます。これにより、すべてのユーザーのすべてのアクセスが拒否されます。</span><span class="sxs-lookup"><span data-stu-id="2c277-116">A new <xref:System.Security.AccessControl.RegistrySecurity> object always starts with an empty DACL, which denies all access for all users.</span></span>  
  
-   <span data-ttu-id="2c277-117">Ace の正規の順序に違反しています。</span><span class="sxs-lookup"><span data-stu-id="2c277-117">Violating the canonical ordering of ACEs.</span></span> <span data-ttu-id="2c277-118">DACL の ACE リストが正規の順序で保持されていない場合、セキュリティで保護されたオブジェクトへのアクセス権がユーザーに与えられる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2c277-118">If the ACE list in the DACL is not kept in the canonical order, users might inadvertently be given access to the secured object.</span></span> <span data-ttu-id="2c277-119">たとえば、拒否されたアクセス権は、許可されたアクセス権の前に常に表示される必要があります。</span><span class="sxs-lookup"><span data-stu-id="2c277-119">For example, denied access rights must always appear before allowed access rights.</span></span> <span data-ttu-id="2c277-120"><xref:System.Security.AccessControl.RegistrySecurity> オブジェクトは、内部で正しい順序を維持します。</span><span class="sxs-lookup"><span data-stu-id="2c277-120"><xref:System.Security.AccessControl.RegistrySecurity> objects maintain the correct order internally.</span></span>  
  
-   <span data-ttu-id="2c277-121">セキュリティ記述子のフラグを操作します。このフラグは、resource manager コントロールのみに存在する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2c277-121">Manipulating security descriptor flags, which should be under resource manager control only.</span></span>  
  
-   <span data-ttu-id="2c277-122">ACE フラグの無効な組み合わせを作成しています。</span><span class="sxs-lookup"><span data-stu-id="2c277-122">Creating invalid combinations of ACE flags.</span></span>  
  
-   <span data-ttu-id="2c277-123">継承された Ace を操作します。</span><span class="sxs-lookup"><span data-stu-id="2c277-123">Manipulating inherited ACEs.</span></span> <span data-ttu-id="2c277-124">継承と反映は、アクセスおよび監査規則に対する変更に応じて、リソースマネージャーによって処理されます。</span><span class="sxs-lookup"><span data-stu-id="2c277-124">Inheritance and propagation are handled by the resource manager, in response to changes you make to access and audit rules.</span></span>  
  
-   <span data-ttu-id="2c277-125">Acl に意味のない Ace を挿入します。</span><span class="sxs-lookup"><span data-stu-id="2c277-125">Inserting meaningless ACEs into ACLs.</span></span>  
  
 <span data-ttu-id="2c277-126">.NET セキュリティオブジェクトでサポートされていない機能は、次のように、ほとんどのアプリケーション開発者が回避する必要がある危険なアクティビティだけです。</span><span class="sxs-lookup"><span data-stu-id="2c277-126">The only capabilities not supported by the .NET security objects are dangerous activities that should be avoided by the majority of application developers, such as the following:</span></span>  
  
-   <span data-ttu-id="2c277-127">通常はリソースマネージャーによって実行される低レベルのタスク。</span><span class="sxs-lookup"><span data-stu-id="2c277-127">Low-level tasks that are normally performed by the resource manager.</span></span>  
  
-   <span data-ttu-id="2c277-128">アクセス制御エントリを追加または削除すると、標準の順序が維持されません。</span><span class="sxs-lookup"><span data-stu-id="2c277-128">Adding or removing access control entries in ways that do not maintain the canonical ordering.</span></span>  
  
 <span data-ttu-id="2c277-129">レジストリキーの Windows アクセス制御セキュリティを変更するには、<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> メソッドを使用して <xref:System.Security.AccessControl.RegistrySecurity> オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="2c277-129">To modify Windows access control security for a registry key, use the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> method to get the <xref:System.Security.AccessControl.RegistrySecurity> object.</span></span> <span data-ttu-id="2c277-130">規則を追加および削除してセキュリティオブジェクトを変更し、<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> メソッドを使用して再アタッチします。</span><span class="sxs-lookup"><span data-stu-id="2c277-130">Modify the security object by adding and removing rules, and then use the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> method to reattach it.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="2c277-131"><xref:System.Security.AccessControl.RegistrySecurity> オブジェクトに加えた変更は、<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> メソッドを呼び出して変更されたセキュリティオブジェクトをレジストリキーに割り当てるまで、レジストリキーのアクセスレベルには影響しません。</span><span class="sxs-lookup"><span data-stu-id="2c277-131">Changes you make to a <xref:System.Security.AccessControl.RegistrySecurity> object do not affect the access levels of the registry key until you call the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> method to assign the altered security object to the registry key.</span></span>  
  
 <span data-ttu-id="2c277-132">あるレジストリキーから別のレジストリキーにアクセス制御セキュリティをコピーするには、<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> メソッドを使用して、最初のレジストリキーのアクセス規則と監査規則を表す <xref:System.Security.AccessControl.RegistrySecurity> オブジェクトを取得し、<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> メソッドを使用してそれらの規則を2番目のレジストリキーに割り当てます。</span><span class="sxs-lookup"><span data-stu-id="2c277-132">To copy access control security from one registry key to another, use the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> method to get a <xref:System.Security.AccessControl.RegistrySecurity> object representing the access and audit rules for the first registry key, and then use the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> method to assign those rules to the second registry key.</span></span> <span data-ttu-id="2c277-133">また、<xref:System.Security.AccessControl.RegistrySecurity> オブジェクトパラメーターを受け取る <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A?displayProperty=nameWithType> または <xref:Microsoft.Win32.RegistryKey.CreateSubKey%2A?displayProperty=nameWithType> メソッドを使用して、2番目のレジストリキーに規則を割り当てることもできます。</span><span class="sxs-lookup"><span data-stu-id="2c277-133">You can also assign the rules to a second registry key with an <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A?displayProperty=nameWithType> or <xref:Microsoft.Win32.RegistryKey.CreateSubKey%2A?displayProperty=nameWithType> method that takes a <xref:System.Security.AccessControl.RegistrySecurity> object parameter.</span></span>  
  
 <span data-ttu-id="2c277-134">セキュリティ記述子定義言語 (SDDL) に投資しているユーザーは、<xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> メソッドを使用してレジストリキーのアクセス規則を設定できます。また、<xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> メソッドを使用すると、アクセス規則を SDDL 形式で表す文字列を取得できます。</span><span class="sxs-lookup"><span data-stu-id="2c277-134">Users with an investment in the security descriptor definition language (SDDL) can use the <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> method to set access rules for a registry key, and the <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> method to obtain a string that represents the access rules in SDDL format.</span></span> <span data-ttu-id="2c277-135">これは、新しい開発では推奨されません。</span><span class="sxs-lookup"><span data-stu-id="2c277-135">This is not recommended for new development.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c277-136">このセクションには、2 つのコード例が含まれています。</span><span class="sxs-lookup"><span data-stu-id="2c277-136">This section contains two code examples.</span></span> <span data-ttu-id="2c277-137">最初の例では、互換性のあるルールが追加および削除されたときのマージ方法を示し、2番目の例では、継承フラグと反映フラグがルールの追加と削除にどのように影響するかを示します。</span><span class="sxs-lookup"><span data-stu-id="2c277-137">The first example shows how compatible rules merge when added and removed, and the second shows how inheritance and propagation flags affect the addition and deletion of rules.</span></span>  
  
 <span data-ttu-id="2c277-138">例 1</span><span class="sxs-lookup"><span data-stu-id="2c277-138">Example 1</span></span>  
  
 <span data-ttu-id="2c277-139">次のコード例では、<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> メソッドが互換性のある規則から権限を削除する方法と、<xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> メソッドによって権限が互換性のあるルールとマージされる方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2c277-139">The following code example shows how the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> method removes rights from a compatible rule, and how the <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> method merges rights with compatible rules.</span></span>  
  
 <span data-ttu-id="2c277-140">この例では、<xref:System.Security.AccessControl.RegistrySecurity> オブジェクトを作成し、現在のユーザー <xref:System.Security.AccessControl.RegistryRights.ReadKey?displayProperty=nameWithType> 権限を許可するルールを追加します。</span><span class="sxs-lookup"><span data-stu-id="2c277-140">The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object and adds a rule that allows the current user <xref:System.Security.AccessControl.RegistryRights.ReadKey?displayProperty=nameWithType> rights.</span></span> <span data-ttu-id="2c277-141">この例では、最初の規則と同じ継承と反映の権限を持つユーザー <xref:System.Security.AccessControl.RegistryRights.SetValue?displayProperty=nameWithType>を付与し、<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> メソッドを使用して、この新しい規則を <xref:System.Security.AccessControl.RegistrySecurity> オブジェクトから削除する規則を作成します。</span><span class="sxs-lookup"><span data-stu-id="2c277-141">The example then creates a rule that grants the user <xref:System.Security.AccessControl.RegistryRights.SetValue?displayProperty=nameWithType>, with the same inheritance and propagation rights as the first rule, and uses the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> method to remove this new rule from the <xref:System.Security.AccessControl.RegistrySecurity> object.</span></span> <span data-ttu-id="2c277-142"><xref:System.Security.AccessControl.RegistryRights.SetValue> は <xref:System.Security.AccessControl.RegistryRights.ReadKey>の構成要素であるため、互換性のある規則から削除されます。</span><span class="sxs-lookup"><span data-stu-id="2c277-142"><xref:System.Security.AccessControl.RegistryRights.SetValue> is a constituent of <xref:System.Security.AccessControl.RegistryRights.ReadKey>, so it is removed from the compatible rule.</span></span> <span data-ttu-id="2c277-143"><xref:System.Security.AccessControl.RegistrySecurity> オブジェクトのルールが表示され、<xref:System.Security.AccessControl.RegistryRights.ReadKey>の残りの構成要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="2c277-143">The rules in the <xref:System.Security.AccessControl.RegistrySecurity> object are displayed, showing the remaining constituents of <xref:System.Security.AccessControl.RegistryRights.ReadKey>.</span></span>  
  
 <span data-ttu-id="2c277-144">次に、コード例では、<xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> メソッドを呼び出して、<xref:System.Security.AccessControl.RegistryRights.SetValue> を <xref:System.Security.AccessControl.RegistrySecurity> オブジェクトのルールに結合し直します。</span><span class="sxs-lookup"><span data-stu-id="2c277-144">The example code then calls the <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> method to merge the <xref:System.Security.AccessControl.RegistryRights.SetValue> right back into the rule in the <xref:System.Security.AccessControl.RegistrySecurity> object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c277-145">この例では、<xref:Microsoft.Win32.RegistryKey> オブジェクトにセキュリティオブジェクトをアタッチしません。</span><span class="sxs-lookup"><span data-stu-id="2c277-145">This example does not attach the security object to a <xref:Microsoft.Win32.RegistryKey> object.</span></span> <span data-ttu-id="2c277-146">このセクションの2番目の例では、セキュリティオブジェクトをアタッチします。そのため、<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> と <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>の例を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2c277-146">The second example in this section attaches a security object, and so do the examples in <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> and <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRule/VB/source.vb#1)]  
  
 <span data-ttu-id="2c277-147">例 2</span><span class="sxs-lookup"><span data-stu-id="2c277-147">Example 2</span></span>  
  
 <span data-ttu-id="2c277-148">次のコード例は、継承と反映を含むアクセス規則を示しています。</span><span class="sxs-lookup"><span data-stu-id="2c277-148">The following code example demonstrates access rules with inheritance and propagation.</span></span> <span data-ttu-id="2c277-149">この例では、<xref:System.Security.AccessControl.RegistrySecurity> オブジェクトを作成し、<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> フラグを持つ2つのルールを作成して追加します。</span><span class="sxs-lookup"><span data-stu-id="2c277-149">The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object, then creates and adds two rules that have the <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> flag.</span></span> <span data-ttu-id="2c277-150">最初のルールには伝達フラグがありませんが、2番目のルールには <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit> と <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>があります。</span><span class="sxs-lookup"><span data-stu-id="2c277-150">The first rule has no propagation flags, while the second has <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit> and <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>.</span></span>  
  
 <span data-ttu-id="2c277-151">このプログラムは、<xref:System.Security.AccessControl.RegistrySecurity> オブジェクトに規則を表示し、<xref:System.Security.AccessControl.RegistrySecurity> オブジェクトを使用してサブキーを作成します。</span><span class="sxs-lookup"><span data-stu-id="2c277-151">The program displays the rules in the <xref:System.Security.AccessControl.RegistrySecurity> object, and then uses the <xref:System.Security.AccessControl.RegistrySecurity> object to create a subkey.</span></span> <span data-ttu-id="2c277-152">プログラムは、子サブキーと孫サブキーを作成し、各サブキーのセキュリティを表示します。</span><span class="sxs-lookup"><span data-stu-id="2c277-152">The program creates a child subkey and a grandchild subkey, then displays the security for each subkey.</span></span> <span data-ttu-id="2c277-153">最後に、プログラムはテストキーを削除します。</span><span class="sxs-lookup"><span data-stu-id="2c277-153">Finally, the program deletes the test keys.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistrySecurity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistrySecurity();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2c277-154">既定値を使用して <see cref="T:System.Security.AccessControl.RegistrySecurity" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2c277-154">Initializes a new instance of the <see cref="T:System.Security.AccessControl.RegistrySecurity" /> class with default values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c277-155">新しい <xref:System.Security.AccessControl.RegistrySecurity> オブジェクトは、常に空の随意アクセスリスト (DACL) で開始され、すべてのユーザーのすべてのアクセスを拒否します。</span><span class="sxs-lookup"><span data-stu-id="2c277-155">A new <xref:System.Security.AccessControl.RegistrySecurity> object always starts with an empty discretionary access list (DACL), which denies all access for all users.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessRightType">
      <MemberSignature Language="C#" Value="public override Type AccessRightType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AccessRightType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistrySecurity.AccessRightType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AccessRightType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AccessRightType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AccessRightType : Type" Usage="System.Security.AccessControl.RegistrySecurity.AccessRightType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2c277-156"><see cref="T:System.Security.AccessControl.RegistrySecurity" /> クラスでアクセス権を表すために使用する列挙型を取得します。</span><span class="sxs-lookup"><span data-stu-id="2c277-156">Gets the enumeration type that the <see cref="T:System.Security.AccessControl.RegistrySecurity" /> class uses to represent access rights.</span></span></summary>
        <value><span data-ttu-id="2c277-157"><see cref="T:System.Type" /> 列挙体を表す <see cref="T:System.Security.AccessControl.RegistryRights" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2c277-157">A <see cref="T:System.Type" /> object representing the <see cref="T:System.Security.AccessControl.RegistryRights" /> enumeration.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c277-158"><xref:System.Security.AccessControl.ObjectSecurity> クラスから派生するクラスは、<xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A> プロパティをオーバーライドし、アクセス権を表すために使用する型を返します。</span><span class="sxs-lookup"><span data-stu-id="2c277-158">Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A> property and return the type they use to represent access rights.</span></span> <span data-ttu-id="2c277-159">複数の種類のセキュリティオブジェクトを含む配列またはコレクションを使用する場合は、このプロパティを使用して、各セキュリティオブジェクトで使用する適切な列挙型を決定します。</span><span class="sxs-lookup"><span data-stu-id="2c277-159">When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct enumeration type to use with each security object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessRuleFactory">
      <MemberSignature Language="C#" Value="public override System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.AccessControl.AccessRule AccessRuleFactory(class System.Security.Principal.IdentityReference identityReference, int32 accessMask, bool isInherited, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function AccessRuleFactory (identityReference As IdentityReference, accessMask As Integer, isInherited As Boolean, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags, type As AccessControlType) As AccessRule" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::AccessControl::AccessRule ^ AccessRuleFactory(System::Security::Principal::IdentityReference ^ identityReference, int accessMask, bool isInherited, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="override this.AccessRuleFactory : System.Security.Principal.IdentityReference * int * bool * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.AccessRule" Usage="registrySecurity.AccessRuleFactory (identityReference, accessMask, isInherited, inheritanceFlags, propagationFlags, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AccessRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityReference" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="isInherited" Type="System.Boolean" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identityReference"><span data-ttu-id="2c277-160">規則の適用対象となるユーザーまたはグループを識別する <see cref="T:System.Security.Principal.IdentityReference" />。</span><span class="sxs-lookup"><span data-stu-id="2c277-160">An <see cref="T:System.Security.Principal.IdentityReference" /> that identifies the user or group the rule applies to.</span></span></param>
        <param name="accessMask"><span data-ttu-id="2c277-161">許可または拒否するアクセス権を指定し、整数にキャストされる <see cref="T:System.Security.AccessControl.RegistryRights" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="2c277-161">A bitwise combination of <see cref="T:System.Security.AccessControl.RegistryRights" /> values specifying the access rights to allow or deny, cast to an integer.</span></span></param>
        <param name="isInherited"><span data-ttu-id="2c277-162">規則が継承されるかどうかを示すブール値。</span><span class="sxs-lookup"><span data-stu-id="2c277-162">A Boolean value specifying whether the rule is inherited.</span></span></param>
        <param name="inheritanceFlags"><span data-ttu-id="2c277-163">サブキーによって規則を継承する方法を示す <see cref="T:System.Security.AccessControl.InheritanceFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="2c277-163">A bitwise combination of <see cref="T:System.Security.AccessControl.InheritanceFlags" /> values specifying how the rule is inherited by subkeys.</span></span></param>
        <param name="propagationFlags"><span data-ttu-id="2c277-164">サブキーによって規則を継承する方法を変更する <see cref="T:System.Security.AccessControl.PropagationFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="2c277-164">A bitwise combination of <see cref="T:System.Security.AccessControl.PropagationFlags" /> values that modify the way the rule is inherited by subkeys.</span></span> <span data-ttu-id="2c277-165"><paramref name="inheritanceFlags" /> の値が <see cref="F:System.Security.AccessControl.InheritanceFlags.None" /> の場合、無効です。</span><span class="sxs-lookup"><span data-stu-id="2c277-165">Meaningless if the value of <paramref name="inheritanceFlags" /> is <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />.</span></span></param>
        <param name="type"><span data-ttu-id="2c277-166">アクセス権が許可されているかどうかを指定する <see cref="T:System.Security.AccessControl.AccessControlType" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="2c277-166">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> values specifying whether the rights are allowed or denied.</span></span></param>
        <summary><span data-ttu-id="2c277-167">アクセス権、アクセス制御、およびフラグを指定して、指定したユーザーに対して新しいアクセス制御規則を作成します。</span><span class="sxs-lookup"><span data-stu-id="2c277-167">Creates a new access control rule for the specified user, with the specified access rights, access control, and flags.</span></span></summary>
        <returns><span data-ttu-id="2c277-168">指定したユーザーの指定した権限を表す <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2c277-168">A <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> object representing the specified rights for the specified user.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c277-169">アクセス制御規則を作成するには、<xref:System.Security.AccessControl.RegistryAccessRule> クラスのコンストラクターを使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2c277-169">The recommended way to create access control rules is to use the constructors of the <xref:System.Security.AccessControl.RegistryAccessRule> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c277-170"><xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> フラグを指定することもできますが、そのような点はありません。</span><span class="sxs-lookup"><span data-stu-id="2c277-170">Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> flag, there is no point in doing so.</span></span> <span data-ttu-id="2c277-171">アクセス制御のために、サブキーの名前と値のペアは個別のオブジェクトではありません。</span><span class="sxs-lookup"><span data-stu-id="2c277-171">For the purposes of access control, the name/value pairs in a subkey are not separate objects.</span></span> <span data-ttu-id="2c277-172">名前と値のペアへのアクセス権は、サブキーの権限によって制御されます。</span><span class="sxs-lookup"><span data-stu-id="2c277-172">The access rights to name/value pairs are controlled by the rights of the subkey.</span></span> <span data-ttu-id="2c277-173">さらに、すべてのサブキーはコンテナーであるため (つまり、他のサブキーを含めることができます)、<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> フラグの影響を受けません。</span><span class="sxs-lookup"><span data-stu-id="2c277-173">Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag.</span></span> <span data-ttu-id="2c277-174">最後に、<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> フラグを指定すると、互換性のある規則の通常の組み合わせに干渉するため、規則のメンテナンスが不必要に複雑になります。</span><span class="sxs-lookup"><span data-stu-id="2c277-174">Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2c277-175"><paramref name="accessMask" />、<paramref name="inheritanceFlags" />、<paramref name="propagationFlags" />、または <paramref name="type" /> に無効な値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="2c277-175"><paramref name="accessMask" />, <paramref name="inheritanceFlags" />, <paramref name="propagationFlags" />, or <paramref name="type" /> specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2c277-176"><paramref name="identityReference" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2c277-176"><paramref name="identityReference" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2c277-177">または</span><span class="sxs-lookup"><span data-stu-id="2c277-177">-or-</span></span> 
 <span data-ttu-id="2c277-178"><paramref name="accessMask" /> が 0 です。</span><span class="sxs-lookup"><span data-stu-id="2c277-178"><paramref name="accessMask" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2c277-179"><paramref name="identityReference" /> が <see cref="T:System.Security.Principal.SecurityIdentifier" /> 型ではなく、<see cref="T:System.Security.Principal.NTAccount" /> 型に変換できる <see cref="T:System.Security.Principal.SecurityIdentifier" /> などの型でもありません。</span><span class="sxs-lookup"><span data-stu-id="2c277-179"><paramref name="identityReference" /> is neither of type <see cref="T:System.Security.Principal.SecurityIdentifier" />, nor of a type such as <see cref="T:System.Security.Principal.NTAccount" /> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AccessRuleType">
      <MemberSignature Language="C#" Value="public override Type AccessRuleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AccessRuleType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistrySecurity.AccessRuleType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AccessRuleType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AccessRuleType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AccessRuleType : Type" Usage="System.Security.AccessControl.RegistrySecurity.AccessRuleType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2c277-180"><see cref="T:System.Security.AccessControl.RegistrySecurity" /> クラスでアクセス規則を表すために使用する型を取得します。</span><span class="sxs-lookup"><span data-stu-id="2c277-180">Gets the type that the <see cref="T:System.Security.AccessControl.RegistrySecurity" /> class uses to represent access rules.</span></span></summary>
        <value><span data-ttu-id="2c277-181"><see cref="T:System.Type" /> クラスを表す <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2c277-181">A <see cref="T:System.Type" /> object representing the <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> class.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c277-182"><xref:System.Security.AccessControl.ObjectSecurity> クラスから派生するクラスは、<xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A> プロパティをオーバーライドし、アクセス規則を表すために使用する型を返します。</span><span class="sxs-lookup"><span data-stu-id="2c277-182">Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A> property and return the type they use to represent access rules.</span></span> <span data-ttu-id="2c277-183">複数の種類のセキュリティオブジェクトを含む配列またはコレクションを操作する場合は、このプロパティを使用して、各セキュリティオブジェクトで使用する適切なアクセス規則の種類を決定します。</span><span class="sxs-lookup"><span data-stu-id="2c277-183">When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct access rule type to use with each security object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAccessRule">
      <MemberSignature Language="C#" Value="public void AddAccessRule (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAccessRule(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAccessRule (rule As RegistryAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAccessRule(System::Security::AccessControl::RegistryAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.AddAccessRule : System.Security.AccessControl.RegistryAccessRule -&gt; unit" Usage="registrySecurity.AddAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule"><span data-ttu-id="2c277-184">追加するアクセス制御規則。</span><span class="sxs-lookup"><span data-stu-id="2c277-184">The access control rule to add.</span></span></param>
        <summary><span data-ttu-id="2c277-185">新しい規則をマージできる、一致するアクセス制御を検索します。</span><span class="sxs-lookup"><span data-stu-id="2c277-185">Searches for a matching access control with which the new rule can be merged.</span></span> <span data-ttu-id="2c277-186">見つからない場合は、新しい規則を追加します。</span><span class="sxs-lookup"><span data-stu-id="2c277-186">If none are found, adds the new rule.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c277-187"><xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> メソッドは、同じユーザーまたはグループを持つ規則、および `rule`と同じ <xref:System.Security.AccessControl.AccessControlType> を検索します。</span><span class="sxs-lookup"><span data-stu-id="2c277-187">The <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> method searches for rules with the same user or group and the same <xref:System.Security.AccessControl.AccessControlType> as `rule`.</span></span> <span data-ttu-id="2c277-188">何も見つからない場合は、`rule` が追加されます。</span><span class="sxs-lookup"><span data-stu-id="2c277-188">If none are found, `rule` is added.</span></span> <span data-ttu-id="2c277-189">照合ルールが見つかった場合は、`rule` の権限が既存のルールとマージされます。</span><span class="sxs-lookup"><span data-stu-id="2c277-189">If a matching rule is found, the rights in `rule` are merged with the existing rule.</span></span>  
  
 <span data-ttu-id="2c277-190">継承フラグが異なる場合は、ルールをマージできません。</span><span class="sxs-lookup"><span data-stu-id="2c277-190">Rules cannot be merged if they have different inheritance flags.</span></span> <span data-ttu-id="2c277-191">たとえば、ユーザーが継承フラグを指定せずに読み取りアクセスを許可され、<xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> を使用して、サブキー (<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType>) の継承によるユーザー書き込みアクセスを付与する規則を追加する場合、2つの規則をマージすることはできません。</span><span class="sxs-lookup"><span data-stu-id="2c277-191">For example, if a user is allowed read access with no inheritance flags, and <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> is used to add a rule giving the user write access with inheritance for subkeys (<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType>), the two rules cannot be merged.</span></span>  
  
 <span data-ttu-id="2c277-192"><xref:System.Security.AccessControl.AccessControlType> 値が異なる規則はマージされません。</span><span class="sxs-lookup"><span data-stu-id="2c277-192">Rules with different <xref:System.Security.AccessControl.AccessControlType> values are never merged.</span></span>  
  
 <span data-ttu-id="2c277-193">ルールは、最も経済的な方法で付与されます。</span><span class="sxs-lookup"><span data-stu-id="2c277-193">Rules express rights in the most economical way.</span></span> <span data-ttu-id="2c277-194">たとえば、ユーザーが <xref:System.Security.AccessControl.RegistryRights.QueryValues>、<xref:System.Security.AccessControl.RegistryRights.Notify>、および <xref:System.Security.AccessControl.RegistryRights.ReadPermissions> 権限を持っていて、<xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys> 権限を許可するルールを追加した場合、ユーザーには <xref:System.Security.AccessControl.RegistryRights.ReadKey> 権限のすべての構成部分が含まれます。</span><span class="sxs-lookup"><span data-stu-id="2c277-194">For example, if a user has <xref:System.Security.AccessControl.RegistryRights.QueryValues>, <xref:System.Security.AccessControl.RegistryRights.Notify> and <xref:System.Security.AccessControl.RegistryRights.ReadPermissions> rights, and you add a rule allowing <xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys> rights, the user has all the constituent parts of <xref:System.Security.AccessControl.RegistryRights.ReadKey> rights.</span></span> <span data-ttu-id="2c277-195">ユーザーの権限に対してクエリを実行すると、<xref:System.Security.AccessControl.RegistryRights.ReadKey> 権限を含むルールが表示されます。</span><span class="sxs-lookup"><span data-stu-id="2c277-195">If you query the user's rights, you will see a rule containing <xref:System.Security.AccessControl.RegistryRights.ReadKey> rights.</span></span> <span data-ttu-id="2c277-196">同様に、<xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys> 権限を削除すると、他の構成要素の <xref:System.Security.AccessControl.RegistryRights.ReadKey> 権限も再表示されます。</span><span class="sxs-lookup"><span data-stu-id="2c277-196">Similarly, if you remove <xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys> rights, the other constituents of <xref:System.Security.AccessControl.RegistryRights.ReadKey> rights will reappear.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c277-197">次のコード例では、レジストリアクセス規則を作成し、<xref:System.Security.AccessControl.RegistrySecurity> オブジェクトに追加します。これにより、同じ種類の互換性のある規則が結合されたまま、アクセス許可と拒否の規則がどのように分離されているかが示されます。</span><span class="sxs-lookup"><span data-stu-id="2c277-197">The following code example creates registry access rules and adds them to a <xref:System.Security.AccessControl.RegistrySecurity> object, showing how rules that allow and deny rights remain separate, while compatible rules of the same kind are merged.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c277-198">この例では、<xref:Microsoft.Win32.RegistryKey> オブジェクトにセキュリティオブジェクトをアタッチしません。</span><span class="sxs-lookup"><span data-stu-id="2c277-198">This example does not attach the security object to a <xref:Microsoft.Win32.RegistryKey> object.</span></span> <span data-ttu-id="2c277-199">セキュリティオブジェクトをアタッチする例については、<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> と <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2c277-199">Examples that attach security objects can be found in <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> and <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="2c277-200">継承フラグと反映フラグを示すコード例については、<xref:System.Security.AccessControl.RegistryAccessRule> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="2c277-200">A code example that demonstrates inheritance and propagation flags can be found in the <xref:System.Security.AccessControl.RegistryAccessRule> class.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2c277-201"><paramref name="rule" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2c277-201"><paramref name="rule" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AddAuditRule">
      <MemberSignature Language="C#" Value="public void AddAuditRule (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAuditRule(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAuditRule (rule As RegistryAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAuditRule(System::Security::AccessControl::RegistryAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.AddAuditRule : System.Security.AccessControl.RegistryAuditRule -&gt; unit" Usage="registrySecurity.AddAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule"><span data-ttu-id="2c277-202">追加する監査規則。</span><span class="sxs-lookup"><span data-stu-id="2c277-202">The audit rule to add.</span></span> <span data-ttu-id="2c277-203">この規則に指定されているユーザーに基づいて検索されます。</span><span class="sxs-lookup"><span data-stu-id="2c277-203">The user specified by this rule determines the search.</span></span></param>
        <summary><span data-ttu-id="2c277-204">新しい規則をマージできる監査規則を検索します。</span><span class="sxs-lookup"><span data-stu-id="2c277-204">Searches for an audit rule with which the new rule can be merged.</span></span> <span data-ttu-id="2c277-205">見つからない場合は、新しい規則を追加します。</span><span class="sxs-lookup"><span data-stu-id="2c277-205">If none are found, adds the new rule.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c277-206"><xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A> メソッドは、`rule`と同じユーザーまたはグループを持つルールを検索します。</span><span class="sxs-lookup"><span data-stu-id="2c277-206">The <xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A> method searches for rules with the same user or group as `rule`.</span></span> <span data-ttu-id="2c277-207">何も見つからない場合は、`rule` が追加されます。</span><span class="sxs-lookup"><span data-stu-id="2c277-207">If none are found, `rule` is added.</span></span> <span data-ttu-id="2c277-208">照合ルールが見つかった場合、`rule` 内のフラグが既存のルールにマージされます。</span><span class="sxs-lookup"><span data-stu-id="2c277-208">If a matching rule is found, the flags in `rule` are merged into the existing rule.</span></span>  
  
 <span data-ttu-id="2c277-209">継承フラグが異なる場合は、ルールをマージできません。</span><span class="sxs-lookup"><span data-stu-id="2c277-209">Rules cannot be merged if they have different inheritance flags.</span></span> <span data-ttu-id="2c277-210">たとえば、失敗したキーへの書き込みの試行が、継承フラグを使用せずに特定のユーザーに対して監査され、<xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A> を使用して、同じユーザーのアクセス許可を変更するための失敗した試行を監査し、サブキーの継承 (<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType>) を使用して、2つの規則を結合することはできません。</span><span class="sxs-lookup"><span data-stu-id="2c277-210">For example, if failed attempts to write to a key are audited for a particular user, with no inheritance flags, and <xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A> is used to add a rule specifying that failed attempts to change permissions are to be audited for the same user, but with inheritance for subkeys (<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType>), the two rules cannot be merged.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AuditRuleFactory">
      <MemberSignature Language="C#" Value="public override System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.AccessControl.AuditRule AuditRuleFactory(class System.Security.Principal.IdentityReference identityReference, int32 accessMask, bool isInherited, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AuditFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function AuditRuleFactory (identityReference As IdentityReference, accessMask As Integer, isInherited As Boolean, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags, flags As AuditFlags) As AuditRule" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::AccessControl::AuditRule ^ AuditRuleFactory(System::Security::Principal::IdentityReference ^ identityReference, int accessMask, bool isInherited, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AuditFlags flags);" />
      <MemberSignature Language="F#" Value="override this.AuditRuleFactory : System.Security.Principal.IdentityReference * int * bool * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AuditFlags -&gt; System.Security.AccessControl.AuditRule" Usage="registrySecurity.AuditRuleFactory (identityReference, accessMask, isInherited, inheritanceFlags, propagationFlags, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AuditRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityReference" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="isInherited" Type="System.Boolean" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="flags" Type="System.Security.AccessControl.AuditFlags" />
      </Parameters>
      <Docs>
        <param name="identityReference"><span data-ttu-id="2c277-211">規則の適用対象となるユーザーまたはグループを識別する <see cref="T:System.Security.Principal.IdentityReference" />。</span><span class="sxs-lookup"><span data-stu-id="2c277-211">An <see cref="T:System.Security.Principal.IdentityReference" /> that identifies the user or group the rule applies to.</span></span></param>
        <param name="accessMask"><span data-ttu-id="2c277-212">監査するアクセス権を指定し、整数にキャストされる <see cref="T:System.Security.AccessControl.RegistryRights" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="2c277-212">A bitwise combination of <see cref="T:System.Security.AccessControl.RegistryRights" /> values specifying the access rights to audit, cast to an integer.</span></span></param>
        <param name="isInherited"><span data-ttu-id="2c277-213">規則が継承されるかどうかを示すブール値。</span><span class="sxs-lookup"><span data-stu-id="2c277-213">A Boolean value specifying whether the rule is inherited.</span></span></param>
        <param name="inheritanceFlags"><span data-ttu-id="2c277-214">サブキーによって規則を継承する方法を示す <see cref="T:System.Security.AccessControl.InheritanceFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="2c277-214">A bitwise combination of <see cref="T:System.Security.AccessControl.InheritanceFlags" /> values specifying how the rule is inherited by subkeys.</span></span></param>
        <param name="propagationFlags"><span data-ttu-id="2c277-215">サブキーによって規則を継承する方法を変更する <see cref="T:System.Security.AccessControl.PropagationFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="2c277-215">A bitwise combination of <see cref="T:System.Security.AccessControl.PropagationFlags" /> values that modify the way the rule is inherited by subkeys.</span></span> <span data-ttu-id="2c277-216"><paramref name="inheritanceFlags" /> の値が <see cref="F:System.Security.AccessControl.InheritanceFlags.None" /> の場合、無効です。</span><span class="sxs-lookup"><span data-stu-id="2c277-216">Meaningless if the value of <paramref name="inheritanceFlags" /> is <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />.</span></span></param>
        <param name="flags"><span data-ttu-id="2c277-217">成功したアクセス、失敗したアクセス、またはその両方のいずれを監査するかを示す <see cref="T:System.Security.AccessControl.AuditFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="2c277-217">A bitwise combination of <see cref="T:System.Security.AccessControl.AuditFlags" /> values specifying whether to audit successful access, failed access, or both.</span></span></param>
        <summary><span data-ttu-id="2c277-218">規則の適用対象となるユーザー、監査するアクセス権、規則の継承と反映、および規則を発生させる結果を指定して、新しい監査規則を作成します。</span><span class="sxs-lookup"><span data-stu-id="2c277-218">Creates a new audit rule, specifying the user the rule applies to, the access rights to audit, the inheritance and propagation of the rule, and the outcome that triggers the rule.</span></span></summary>
        <returns><span data-ttu-id="2c277-219">指定したユーザーに対する、指定した監査規則と指定したフラグを表す <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2c277-219">A <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> object representing the specified audit rule for the specified user, with the specified flags.</span></span> <span data-ttu-id="2c277-220">メソッドの戻り値は基本クラス <see cref="T:System.Security.AccessControl.AuditRule" /> です。ただし、この戻り値を派生クラスに安全にキャストできます。</span><span class="sxs-lookup"><span data-stu-id="2c277-220">The return type of the method is the base class, <see cref="T:System.Security.AccessControl.AuditRule" />, but the return value can be cast safely to the derived class.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c277-221">監査規則を作成するには、<xref:System.Security.AccessControl.RegistryAuditRule> クラスのコンストラクターを使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2c277-221">The recommended way to create audit rules is to use the constructors of the <xref:System.Security.AccessControl.RegistryAuditRule> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c277-222"><xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> フラグを指定することもできますが、そのような点はありません。</span><span class="sxs-lookup"><span data-stu-id="2c277-222">Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> flag, there is no point in doing so.</span></span> <span data-ttu-id="2c277-223">監査制御の目的では、サブキーの名前と値のペアは個別のオブジェクトではありません。</span><span class="sxs-lookup"><span data-stu-id="2c277-223">For the purposes of audit control, the name/value pairs in a subkey are not separate objects.</span></span> <span data-ttu-id="2c277-224">名前と値のペアに対する監査権限は、サブキーの権限によって制御されます。</span><span class="sxs-lookup"><span data-stu-id="2c277-224">The audit rights to name/value pairs are controlled by the rights of the subkey.</span></span> <span data-ttu-id="2c277-225">さらに、すべてのサブキーはコンテナーであるため (つまり、他のサブキーを含めることができます)、<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> フラグの影響を受けません。</span><span class="sxs-lookup"><span data-stu-id="2c277-225">Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag.</span></span> <span data-ttu-id="2c277-226">最後に、<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> フラグを指定すると、互換性のある規則の通常の組み合わせに干渉するため、規則のメンテナンスが不必要に複雑になります。</span><span class="sxs-lookup"><span data-stu-id="2c277-226">Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2c277-227"><paramref name="accessMask" />、<paramref name="inheritanceFlags" />、<paramref name="propagationFlags" />、または <paramref name="flags" /> に無効な値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="2c277-227"><paramref name="accessMask" />, <paramref name="inheritanceFlags" />, <paramref name="propagationFlags" />, or <paramref name="flags" /> specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2c277-228"><paramref name="identityReference" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2c277-228"><paramref name="identityReference" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2c277-229">または</span><span class="sxs-lookup"><span data-stu-id="2c277-229">-or-</span></span> 
 <span data-ttu-id="2c277-230"><paramref name="accessMask" /> が 0 です。</span><span class="sxs-lookup"><span data-stu-id="2c277-230"><paramref name="accessMask" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2c277-231"><paramref name="identityReference" /> が <see cref="T:System.Security.Principal.SecurityIdentifier" /> 型ではなく、<see cref="T:System.Security.Principal.NTAccount" /> 型に変換できる <see cref="T:System.Security.Principal.SecurityIdentifier" /> などの型でもありません。</span><span class="sxs-lookup"><span data-stu-id="2c277-231"><paramref name="identityReference" /> is neither of type <see cref="T:System.Security.Principal.SecurityIdentifier" />, nor of a type such as <see cref="T:System.Security.Principal.NTAccount" /> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AuditRuleType">
      <MemberSignature Language="C#" Value="public override Type AuditRuleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AuditRuleType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistrySecurity.AuditRuleType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AuditRuleType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AuditRuleType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AuditRuleType : Type" Usage="System.Security.AccessControl.RegistrySecurity.AuditRuleType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2c277-232"><see cref="T:System.Security.AccessControl.RegistrySecurity" /> クラスで監査規則を表すために使用する型を取得します。</span><span class="sxs-lookup"><span data-stu-id="2c277-232">Gets the type that the <see cref="T:System.Security.AccessControl.RegistrySecurity" /> class uses to represent audit rules.</span></span></summary>
        <value><span data-ttu-id="2c277-233"><see cref="T:System.Type" /> クラスを表す <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2c277-233">A <see cref="T:System.Type" /> object representing the <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> class.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c277-234"><xref:System.Security.AccessControl.ObjectSecurity> クラスから派生するクラスは、<xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A> プロパティをオーバーライドし、監査権限を表すために使用する型を返します。</span><span class="sxs-lookup"><span data-stu-id="2c277-234">Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A> property and return the type they use to represent audit rights.</span></span> <span data-ttu-id="2c277-235">複数の種類のセキュリティオブジェクトを含む配列またはコレクションを操作する場合は、このプロパティを使用して、各セキュリティオブジェクトで使用する適切な監査規則の種類を決定します。</span><span class="sxs-lookup"><span data-stu-id="2c277-235">When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct audit rule type to use with each security object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRule">
      <MemberSignature Language="C#" Value="public bool RemoveAccessRule (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAccessRule(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAccessRule (rule As RegistryAccessRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveAccessRule(System::Security::AccessControl::RegistryAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAccessRule : System.Security.AccessControl.RegistryAccessRule -&gt; bool" Usage="registrySecurity.RemoveAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule"><span data-ttu-id="2c277-236">検索対象のユーザーと <see cref="T:System.Security.AccessControl.RegistryAccessRule" />、および一致する規則が見つかった場合にその規則と互換性のある継承フラグと反映フラグのセットを指定する <see cref="T:System.Security.AccessControl.AccessControlType" />。</span><span class="sxs-lookup"><span data-stu-id="2c277-236">A <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> that specifies the user and <see cref="T:System.Security.AccessControl.AccessControlType" /> to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with.</span></span> <span data-ttu-id="2c277-237">互換性のある規則が見つかった場合にその規則から削除する権限を指定します。</span><span class="sxs-lookup"><span data-stu-id="2c277-237">Specifies the rights to remove from the compatible rule, if found.</span></span></param>
        <summary><span data-ttu-id="2c277-238">指定したアクセス規則と同じユーザーと <see cref="T:System.Security.AccessControl.AccessControlType" /> (許可または拒否)、および互換性がある継承フラグと反映フラグが指定されたアクセス制御規則が検索されます。このような規則が見つかると、指定したアクセス規則に含まれる権限がその規則から削除されます。</span><span class="sxs-lookup"><span data-stu-id="2c277-238">Searches for an access control rule with the same user and <see cref="T:System.Security.AccessControl.AccessControlType" /> (allow or deny) as the specified access rule, and with compatible inheritance and propagation flags; if such a rule is found, the rights contained in the specified access rule are removed from it.</span></span></summary>
        <returns><span data-ttu-id="2c277-239">互換性のある規則が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2c277-239"><see langword="true" /> if a compatible rule is found; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c277-240">現在の <xref:System.Security.AccessControl.RegistrySecurity> は、同じユーザーと `rule`と同じ <xref:System.Security.AccessControl.AccessControlType> 値を持つルールを検索します。</span><span class="sxs-lookup"><span data-stu-id="2c277-240">The current <xref:System.Security.AccessControl.RegistrySecurity> is searched for a rule that has the same user and the same <xref:System.Security.AccessControl.AccessControlType> value as `rule`.</span></span> <span data-ttu-id="2c277-241">このようなルールが見つからない場合、アクションは実行されず、メソッドは `false`を返します。</span><span class="sxs-lookup"><span data-stu-id="2c277-241">If no such rule is found, no action is taken, and the method returns `false`.</span></span> <span data-ttu-id="2c277-242">一致規則が見つかった場合は、その継承と互換性フラグが `rule`で指定されたフラグとの互換性をチェックされます。</span><span class="sxs-lookup"><span data-stu-id="2c277-242">If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in `rule`.</span></span> <span data-ttu-id="2c277-243">互換性のある規則が見つからない場合、アクションは実行されず、メソッドは `false`を返します。</span><span class="sxs-lookup"><span data-stu-id="2c277-243">If no compatible rule is found, no action is taken, and the method returns `false`.</span></span> <span data-ttu-id="2c277-244">互換性のあるフラグを持つ規則が見つかった場合は、`rule` で指定された権限が互換性のあるルールから削除され、メソッドが `true`を返します。</span><span class="sxs-lookup"><span data-stu-id="2c277-244">If a rule with compatible flags is found, the rights specified in `rule` are removed from the compatible rule, and the method returns `true`.</span></span> <span data-ttu-id="2c277-245">互換性のある規則に含まれていない権限が `rule` 指定されている場合は、それらの権限に関して何も行われません。</span><span class="sxs-lookup"><span data-stu-id="2c277-245">If `rule` specifies rights not contained in the compatible rule, no action is taken with respect to those rights.</span></span> <span data-ttu-id="2c277-246">すべての権限が互換性のあるルールから削除されると、ルール全体が現在の <xref:System.Security.AccessControl.RegistrySecurity> オブジェクトから削除されます。</span><span class="sxs-lookup"><span data-stu-id="2c277-246">If all rights are removed from the compatible rule, the entire rule is removed from the current <xref:System.Security.AccessControl.RegistrySecurity> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c277-247">次のコード例では、<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> メソッドが互換性のある規則から権限を削除する方法と、<xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> メソッドによって権限が互換性のあるルールとマージされる方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2c277-247">The following code example shows how the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> method removes rights from a compatible rule, and how the <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> method merges rights with compatible rules.</span></span>  
  
 <span data-ttu-id="2c277-248">この例では、<xref:System.Security.AccessControl.RegistrySecurity> オブジェクトを作成し、現在のユーザー <xref:System.Security.AccessControl.RegistryRights.ReadKey?displayProperty=nameWithType> 権限を許可するルールを追加します。</span><span class="sxs-lookup"><span data-stu-id="2c277-248">The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object and adds a rule that allows the current user <xref:System.Security.AccessControl.RegistryRights.ReadKey?displayProperty=nameWithType> rights.</span></span> <span data-ttu-id="2c277-249">この例では、最初の規則と同じ継承と反映の権限を持つユーザー <xref:System.Security.AccessControl.RegistryRights.SetValue?displayProperty=nameWithType>を付与し、<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> メソッドを使用して、この新しい規則を <xref:System.Security.AccessControl.RegistrySecurity> オブジェクトから削除する規則を作成します。</span><span class="sxs-lookup"><span data-stu-id="2c277-249">The example then creates a rule that grants the user <xref:System.Security.AccessControl.RegistryRights.SetValue?displayProperty=nameWithType>, with the same inheritance and propagation rights as the first rule, and uses the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> method to remove this new rule from the <xref:System.Security.AccessControl.RegistrySecurity> object.</span></span> <span data-ttu-id="2c277-250"><xref:System.Security.AccessControl.RegistryRights.SetValue> は <xref:System.Security.AccessControl.RegistryRights.ReadKey>の構成要素であるため、互換性のある規則から削除されます。</span><span class="sxs-lookup"><span data-stu-id="2c277-250"><xref:System.Security.AccessControl.RegistryRights.SetValue> is a constituent of <xref:System.Security.AccessControl.RegistryRights.ReadKey>, so it is removed from the compatible rule.</span></span> <span data-ttu-id="2c277-251"><xref:System.Security.AccessControl.RegistrySecurity> オブジェクトのルールが表示され、<xref:System.Security.AccessControl.RegistryRights.ReadKey>の残りの構成要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="2c277-251">The rules in the <xref:System.Security.AccessControl.RegistrySecurity> object are displayed, showing the remaining constituents of <xref:System.Security.AccessControl.RegistryRights.ReadKey>.</span></span>  
  
 <span data-ttu-id="2c277-252">次に、コード例では、<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> メソッドを呼び出して、<xref:System.Security.AccessControl.RegistryRights.SetValue> を <xref:System.Security.AccessControl.RegistrySecurity> オブジェクトのルールに結合し直します。</span><span class="sxs-lookup"><span data-stu-id="2c277-252">The example code then calls the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> method to merge the <xref:System.Security.AccessControl.RegistryRights.SetValue> right back into the rule in the <xref:System.Security.AccessControl.RegistrySecurity> object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c277-253">この例では、<xref:Microsoft.Win32.RegistryKey> オブジェクトにセキュリティオブジェクトをアタッチしません。</span><span class="sxs-lookup"><span data-stu-id="2c277-253">This example does not attach the security object to a <xref:Microsoft.Win32.RegistryKey> object.</span></span> <span data-ttu-id="2c277-254">このセクションの2番目の例では、セキュリティオブジェクトをアタッチします。そのため、<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType>の <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>の例を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2c277-254">The second example in this section attaches a security object, and so do the examples in <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType><xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2c277-255"><paramref name="rule" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2c277-255"><paramref name="rule" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRuleAll">
      <MemberSignature Language="C#" Value="public void RemoveAccessRuleAll (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAccessRuleAll(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAccessRuleAll (rule As RegistryAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAccessRuleAll(System::Security::AccessControl::RegistryAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAccessRuleAll : System.Security.AccessControl.RegistryAccessRule -&gt; unit" Usage="registrySecurity.RemoveAccessRuleAll rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule"><span data-ttu-id="2c277-256">検索対象のユーザーと <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> を指定する <see cref="T:System.Security.AccessControl.AccessControlType" />。</span><span class="sxs-lookup"><span data-stu-id="2c277-256">A <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> that specifies the user and <see cref="T:System.Security.AccessControl.AccessControlType" /> to search for.</span></span> <span data-ttu-id="2c277-257">この規則で指定する権限、継承フラグ、または反映フラグは、無視されます。</span><span class="sxs-lookup"><span data-stu-id="2c277-257">Any rights, inheritance flags, or propagation flags specified by this rule are ignored.</span></span></param>
        <summary><span data-ttu-id="2c277-258">指定した規則と同じユーザーおよび同じ <see cref="T:System.Security.AccessControl.AccessControlType" /> (許可または拒否) が指定されたアクセス制御規則をすべて検索し、一致する規則が見つかった場合は、その規則を削除します。</span><span class="sxs-lookup"><span data-stu-id="2c277-258">Searches for all access control rules with the same user and <see cref="T:System.Security.AccessControl.AccessControlType" /> (allow or deny) as the specified rule and, if found, removes them.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c277-259">現在の <xref:System.Security.AccessControl.RegistrySecurity> は、同じユーザーと `rule`と同じ <xref:System.Security.AccessControl.AccessControlType> 値を持つルールを検索します。</span><span class="sxs-lookup"><span data-stu-id="2c277-259">The current <xref:System.Security.AccessControl.RegistrySecurity> is searched for rules that have the same user and the same <xref:System.Security.AccessControl.AccessControlType> value as `rule`.</span></span> <span data-ttu-id="2c277-260">`rule` によって指定された権限、継承フラグ、または伝達フラグは、この検索を実行するときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="2c277-260">Any rights, inheritance flags, or propagation flags specified by `rule` are ignored when performing this search.</span></span> <span data-ttu-id="2c277-261">一致するルールが見つからない場合は、何も実行されません。</span><span class="sxs-lookup"><span data-stu-id="2c277-261">If no matching rules are found, no action is taken.</span></span>  
  
 <span data-ttu-id="2c277-262">たとえば、継承フラグと反映フラグが異なるさまざまな権限を許可する複数のルールを持つユーザーの場合、任意の権限とフラグを使用してユーザーと <xref:System.Security.AccessControl.AccessControlType.Allow?displayProperty=nameWithType>を指定する <xref:System.Security.AccessControl.RegistryAccessRule> オブジェクトを作成し、そのルールを <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A> メソッドに渡すことによって、すべてのルールを削除できます。</span><span class="sxs-lookup"><span data-stu-id="2c277-262">For example, if a user has multiple rules that allow various rights with different inheritance and propagation flags, you can remove all those rules by creating a <xref:System.Security.AccessControl.RegistryAccessRule> object that specifies the user and <xref:System.Security.AccessControl.AccessControlType.Allow?displayProperty=nameWithType>, with any arbitrary rights and flags, and passing that rule to the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c277-263">次のコード例では、<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A> メソッドによって、ユーザーと <xref:System.Security.AccessControl.AccessControlType>に一致するすべての規則が削除され、権限とフラグは無視されます。</span><span class="sxs-lookup"><span data-stu-id="2c277-263">The following code example shows that the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A> method removes all rules that match user and <xref:System.Security.AccessControl.AccessControlType>, ignoring rights and flags.</span></span>  
  
 <span data-ttu-id="2c277-264">この例では、<xref:System.Security.AccessControl.RegistrySecurity> オブジェクトを作成し、継承フラグと反映フラグが異なる、現在のユーザーのさまざまな権限を許可および拒否する規則を追加します。</span><span class="sxs-lookup"><span data-stu-id="2c277-264">The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object and adds rules that allow and deny various rights for the current user, with different inheritance and propagation flags.</span></span> <span data-ttu-id="2c277-265">この例では、現在のユーザーに所有権の取得を許可する新しい規則を作成し、その規則を <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A> メソッドに渡して、アクセスを許可する2つの規則を削除します。</span><span class="sxs-lookup"><span data-stu-id="2c277-265">The example then creates a new rule that allows the current user to take ownership, and passes that rule to the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A> method to remove the two rules that allow access.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c277-266">この例では、<xref:Microsoft.Win32.RegistryKey> オブジェクトにセキュリティオブジェクトをアタッチしません。</span><span class="sxs-lookup"><span data-stu-id="2c277-266">This example does not attach the security object to a <xref:Microsoft.Win32.RegistryKey> object.</span></span> <span data-ttu-id="2c277-267"><xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> メソッドと <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> メソッドを参照してください。</span><span class="sxs-lookup"><span data-stu-id="2c277-267">See the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> method and the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2c277-268"><paramref name="rule" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2c277-268"><paramref name="rule" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRuleSpecific">
      <MemberSignature Language="C#" Value="public void RemoveAccessRuleSpecific (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAccessRuleSpecific(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAccessRuleSpecific (rule As RegistryAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAccessRuleSpecific(System::Security::AccessControl::RegistryAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAccessRuleSpecific : System.Security.AccessControl.RegistryAccessRule -&gt; unit" Usage="registrySecurity.RemoveAccessRuleSpecific rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule"><span data-ttu-id="2c277-269">削除する <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> です。</span><span class="sxs-lookup"><span data-stu-id="2c277-269">The <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> to remove.</span></span></param>
        <summary><span data-ttu-id="2c277-270">指定した規則に正確に一致するアクセス制御規則を検索し、見つかった場合は、その規則を削除します。</span><span class="sxs-lookup"><span data-stu-id="2c277-270">Searches for an access control rule that exactly matches the specified rule and, if found, removes it.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c277-271">ルールが削除されるのは、フラグを含むすべての詳細の `rule` に完全に一致する場合のみです。</span><span class="sxs-lookup"><span data-stu-id="2c277-271">The rule is removed only if it exactly matches `rule` in all details, including flags.</span></span> <span data-ttu-id="2c277-272">同じユーザーおよび <xref:System.Security.AccessControl.AccessControlType> を持つその他の規則は影響を受けません。</span><span class="sxs-lookup"><span data-stu-id="2c277-272">Other rules with the same user and <xref:System.Security.AccessControl.AccessControlType> are not affected.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="2c277-273">規則は1つ以上の基になるアクセス制御エントリ (ACE) を表します。これらのエントリは、ユーザーのアクセスセキュリティ規則を変更するときに、必要に応じて分割または結合されます。</span><span class="sxs-lookup"><span data-stu-id="2c277-273">A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the access security rules for a user.</span></span> <span data-ttu-id="2c277-274">そのため、ルールは、追加されたときの特定の形式には存在しなくなった可能性があります。その場合、<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> メソッドで削除することはできません。</span><span class="sxs-lookup"><span data-stu-id="2c277-274">Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> method cannot remove it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c277-275">次のコード例では、<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> メソッドが、完全に一致した場合にのみ規則を削除することを示しています。</span><span class="sxs-lookup"><span data-stu-id="2c277-275">The following code example shows that the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> method removes a rule only if it matches exactly.</span></span>  
  
 <span data-ttu-id="2c277-276">この例では、異なる権限を許可する2つのルールを作成します。</span><span class="sxs-lookup"><span data-stu-id="2c277-276">The example creates two rules that allow different rights.</span></span> <span data-ttu-id="2c277-277">規則には互換性のある継承フラグと反映フラグがあります。そのため、2番目のルールを追加すると、最初のルールとマージされます。</span><span class="sxs-lookup"><span data-stu-id="2c277-277">The rules have compatible inheritance and propagation flags, so when the second rule is added it merges with the first.</span></span> <span data-ttu-id="2c277-278">この例では、最初のルールを指定して <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> メソッドを呼び出しますが、ルールがマージされるので、一致するルールはありません。</span><span class="sxs-lookup"><span data-stu-id="2c277-278">The example calls the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> method, specifying the first rule, but because the rules are merged there is no rule that matches.</span></span> <span data-ttu-id="2c277-279">次に、<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> メソッドを呼び出して、マージされた規則から2番目の規則を削除し、最後に <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> メソッドを呼び出して最初の規則を削除します。</span><span class="sxs-lookup"><span data-stu-id="2c277-279">The example then calls the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> method to the remove the second rule from the merged rule, and finally calls the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> method to remove the first rule.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c277-280">この例では、<xref:Microsoft.Win32.RegistryKey> オブジェクトにセキュリティオブジェクトをアタッチしません。</span><span class="sxs-lookup"><span data-stu-id="2c277-280">This example does not attach the security object to a <xref:Microsoft.Win32.RegistryKey> object.</span></span> <span data-ttu-id="2c277-281"><xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> メソッドと <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> メソッドを参照してください。</span><span class="sxs-lookup"><span data-stu-id="2c277-281">See the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> method and the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2c277-282"><paramref name="rule" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2c277-282"><paramref name="rule" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRule">
      <MemberSignature Language="C#" Value="public bool RemoveAuditRule (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAuditRule(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAuditRule (rule As RegistryAuditRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveAuditRule(System::Security::AccessControl::RegistryAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAuditRule : System.Security.AccessControl.RegistryAuditRule -&gt; bool" Usage="registrySecurity.RemoveAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule"><span data-ttu-id="2c277-283">検索対象のユーザー、および一致する規則がある場合にその規則と互換性のある継承フラグと反映フラグのセットを指定する <see cref="T:System.Security.AccessControl.RegistryAuditRule" />。</span><span class="sxs-lookup"><span data-stu-id="2c277-283">A <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> that specifies the user to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with.</span></span> <span data-ttu-id="2c277-284">互換性のある規則が見つかった場合にその規則から削除する権限を指定します。</span><span class="sxs-lookup"><span data-stu-id="2c277-284">Specifies the rights to remove from the compatible rule, if found.</span></span></param>
        <summary><span data-ttu-id="2c277-285">指定した規則と同じユーザー、および互換性のある継承フラグと反映フラグが指定された監査制御規則が検索されます。互換性のある規則が見つかると、指定した規則に含まれる権限がその規則から削除されます。</span><span class="sxs-lookup"><span data-stu-id="2c277-285">Searches for an audit control rule with the same user as the specified rule, and with compatible inheritance and propagation flags; if a compatible rule is found, the rights contained in the specified rule are removed from it.</span></span></summary>
        <returns><span data-ttu-id="2c277-286">互換性のある規則が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2c277-286"><see langword="true" /> if a compatible rule is found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c277-287">現在の <xref:System.Security.AccessControl.RegistrySecurity> は、`rule`と同じユーザーを持つ監査規則を検索します。</span><span class="sxs-lookup"><span data-stu-id="2c277-287">The current <xref:System.Security.AccessControl.RegistrySecurity> is searched for an audit rule that has the same user as `rule`.</span></span> <span data-ttu-id="2c277-288">このようなルールが見つからない場合、アクションは実行されず、メソッドは `false`を返します。</span><span class="sxs-lookup"><span data-stu-id="2c277-288">If no such rule is found, no action is taken, and the method returns `false`.</span></span> <span data-ttu-id="2c277-289">一致規則が見つかった場合は、その継承と互換性フラグが `rule`で指定されたフラグとの互換性をチェックされます。</span><span class="sxs-lookup"><span data-stu-id="2c277-289">If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in `rule`.</span></span> <span data-ttu-id="2c277-290">互換性のある規則が見つからない場合、アクションは実行されず、メソッドは `false`を返します。</span><span class="sxs-lookup"><span data-stu-id="2c277-290">If no compatible rule is found, no action is taken, and the method returns `false`.</span></span> <span data-ttu-id="2c277-291">互換性のあるフラグを持つ規則が見つかった場合は、`rule` で指定された権限が互換性のあるルールから削除され、メソッドが `true`を返します。</span><span class="sxs-lookup"><span data-stu-id="2c277-291">If a rule with compatible flags is found, the rights specified in `rule` are removed from the compatible rule, and the method returns `true`.</span></span> <span data-ttu-id="2c277-292">互換性のある規則に含まれていない権限が `rule` 指定されている場合は、それらの権限に関して何も行われません。</span><span class="sxs-lookup"><span data-stu-id="2c277-292">If `rule` specifies rights not contained in the compatible rule, no action is taken with respect to those rights.</span></span> <span data-ttu-id="2c277-293">すべての権限が互換性のあるルールから削除されると、ルール全体が現在の <xref:System.Security.AccessControl.RegistrySecurity> オブジェクトから削除されます。</span><span class="sxs-lookup"><span data-stu-id="2c277-293">If all rights are removed from the compatible rule, the entire rule is removed from the current <xref:System.Security.AccessControl.RegistrySecurity> object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2c277-294"><paramref name="rule" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2c277-294"><paramref name="rule" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRuleAll">
      <MemberSignature Language="C#" Value="public void RemoveAuditRuleAll (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAuditRuleAll(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAuditRuleAll (rule As RegistryAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAuditRuleAll(System::Security::AccessControl::RegistryAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAuditRuleAll : System.Security.AccessControl.RegistryAuditRule -&gt; unit" Usage="registrySecurity.RemoveAuditRuleAll rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule"><span data-ttu-id="2c277-295">検索対象のユーザーを指定する <see cref="T:System.Security.AccessControl.RegistryAuditRule" />。</span><span class="sxs-lookup"><span data-stu-id="2c277-295">A <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> that specifies the user to search for.</span></span> <span data-ttu-id="2c277-296">この規則で指定する権限、継承フラグ、または反映フラグは、無視されます。</span><span class="sxs-lookup"><span data-stu-id="2c277-296">Any rights, inheritance flags, or propagation flags specified by this rule are ignored.</span></span></param>
        <summary><span data-ttu-id="2c277-297">指定した規則と同じユーザーが設定されているすべての監査規則を検索し、見つかった場合はそれらの規則を削除します。</span><span class="sxs-lookup"><span data-stu-id="2c277-297">Searches for all audit rules with the same user as the specified rule and, if found, removes them.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c277-298">現在の <xref:System.Security.AccessControl.RegistrySecurity> は、`rule`と同じユーザーを持つ監査規則を検索します。</span><span class="sxs-lookup"><span data-stu-id="2c277-298">The current <xref:System.Security.AccessControl.RegistrySecurity> is searched for audit rules that have the same user as `rule`.</span></span> <span data-ttu-id="2c277-299">`rule` によって指定された権限、継承フラグ、または伝達フラグは、この検索を実行するときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="2c277-299">Any rights, inheritance flags, or propagation flags specified by `rule` are ignored when performing this search.</span></span> <span data-ttu-id="2c277-300">一致するルールが見つからない場合は、何も実行されません。</span><span class="sxs-lookup"><span data-stu-id="2c277-300">If no matching rules are found, no action is taken.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2c277-301"><paramref name="rule" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2c277-301"><paramref name="rule" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRuleSpecific">
      <MemberSignature Language="C#" Value="public void RemoveAuditRuleSpecific (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAuditRuleSpecific(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAuditRuleSpecific (rule As RegistryAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAuditRuleSpecific(System::Security::AccessControl::RegistryAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAuditRuleSpecific : System.Security.AccessControl.RegistryAuditRule -&gt; unit" Usage="registrySecurity.RemoveAuditRuleSpecific rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule"><span data-ttu-id="2c277-302">削除する <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> です。</span><span class="sxs-lookup"><span data-stu-id="2c277-302">The <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> to be removed.</span></span></param>
        <summary><span data-ttu-id="2c277-303">指定した規則に正確に一致する監査規則を検索し、見つかった場合は、その規則を削除します。</span><span class="sxs-lookup"><span data-stu-id="2c277-303">Searches for an audit rule that exactly matches the specified rule and, if found, removes it.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c277-304">ルールが削除されるのは、フラグを含むすべての詳細の `rule` に完全に一致する場合のみです。</span><span class="sxs-lookup"><span data-stu-id="2c277-304">The rule is removed only if it exactly matches `rule` in all details, including flags.</span></span> <span data-ttu-id="2c277-305">同じユーザーのその他の監査規則は影響を受けません。</span><span class="sxs-lookup"><span data-stu-id="2c277-305">Other audit rules for the same user are not affected.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="2c277-306">規則は1つ以上の基になるアクセス制御エントリ (ACE) を表します。これらのエントリは、ユーザーの監査セキュリティ規則を変更するときに、必要に応じて分割または結合されます。</span><span class="sxs-lookup"><span data-stu-id="2c277-306">A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the audit security rules for a user.</span></span> <span data-ttu-id="2c277-307">そのため、ルールは、追加されたときの特定の形式には存在しなくなった可能性があります。その場合、<xref:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific%2A> メソッドで削除することはできません。</span><span class="sxs-lookup"><span data-stu-id="2c277-307">Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific%2A> method cannot remove it.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2c277-308"><paramref name="rule" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2c277-308"><paramref name="rule" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ResetAccessRule">
      <MemberSignature Language="C#" Value="public void ResetAccessRule (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetAccessRule(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetAccessRule (rule As RegistryAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetAccessRule(System::Security::AccessControl::RegistryAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.ResetAccessRule : System.Security.AccessControl.RegistryAccessRule -&gt; unit" Usage="registrySecurity.ResetAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule"><span data-ttu-id="2c277-309">追加する <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> です。</span><span class="sxs-lookup"><span data-stu-id="2c277-309">The <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> to add.</span></span> <span data-ttu-id="2c277-310">この規則で指定されたユーザーによって、この規則を追加する前に削除する規則が判断されます。</span><span class="sxs-lookup"><span data-stu-id="2c277-310">The user specified by this rule determines the rules to remove before this rule is added.</span></span></param>
        <summary><span data-ttu-id="2c277-311"><see cref="T:System.Security.AccessControl.AccessControlType" /> に関係なく、指定した規則と同じユーザーが指定されたすべてのアクセス制御規則を削除し、指定した規則を追加します。</span><span class="sxs-lookup"><span data-stu-id="2c277-311">Removes all access control rules with the same user as the specified rule, regardless of <see cref="T:System.Security.AccessControl.AccessControlType" />, and then adds the specified rule.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c277-312">ユーザーが指定した規則に一致するアクセス規則がない場合は、`rule` が追加されます。</span><span class="sxs-lookup"><span data-stu-id="2c277-312">If there are no access rules whose user matches the specified rule, `rule` is added.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c277-313">次のコード例では、<xref:System.Security.AccessControl.RegistrySecurity.ResetAccessRule%2A> メソッドによって、一致するユーザーのすべての規則が一致に対して指定された規則と置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="2c277-313">The following code example shows how the <xref:System.Security.AccessControl.RegistrySecurity.ResetAccessRule%2A> method replaces all rules for the matching user with the rule specified for the match.</span></span>  
  
 <span data-ttu-id="2c277-314">この例では、<xref:System.Security.AccessControl.RegistrySecurity> オブジェクトを作成し、継承フラグと反映フラグが異なる、現在のユーザーのさまざまな権限を許可および拒否する規則を追加します。</span><span class="sxs-lookup"><span data-stu-id="2c277-314">The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object and adds rules that allow and deny various rights for the current user, with different inheritance and propagation flags.</span></span> <span data-ttu-id="2c277-315">次に、現在のユーザーにのみキーの読み取りを許可する新しい規則を作成し、<xref:System.Security.AccessControl.RegistrySecurity.ResetAccessRule%2A> メソッドを使用して、ユーザーのすべての規則を削除し、新しい規則に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="2c277-315">The example then creates a new rule that allows the current user only to read the key, and uses the <xref:System.Security.AccessControl.RegistrySecurity.ResetAccessRule%2A> method to remove the all rules for the user and replace them with the new rule.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c277-316">この例では、<xref:Microsoft.Win32.RegistryKey> オブジェクトにセキュリティオブジェクトをアタッチしません。</span><span class="sxs-lookup"><span data-stu-id="2c277-316">This example does not attach the security object to a <xref:Microsoft.Win32.RegistryKey> object.</span></span> <span data-ttu-id="2c277-317"><xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> メソッドと <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> メソッドを参照してください。</span><span class="sxs-lookup"><span data-stu-id="2c277-317">See the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> method and the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.ResetAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.ResetAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.ResetAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.ResetAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAccessRule">
      <MemberSignature Language="C#" Value="public void SetAccessRule (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessRule(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAccessRule (rule As RegistryAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAccessRule(System::Security::AccessControl::RegistryAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.SetAccessRule : System.Security.AccessControl.RegistryAccessRule -&gt; unit" Usage="registrySecurity.SetAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule"><span data-ttu-id="2c277-318">追加する <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> です。</span><span class="sxs-lookup"><span data-stu-id="2c277-318">The <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> to add.</span></span> <span data-ttu-id="2c277-319">この規則のユーザーと <see cref="T:System.Security.AccessControl.AccessControlType" /> によって、この規則を追加する前に削除する規則が判断されます。</span><span class="sxs-lookup"><span data-stu-id="2c277-319">The user and <see cref="T:System.Security.AccessControl.AccessControlType" /> of this rule determine the rules to remove before this rule is added.</span></span></param>
        <summary><span data-ttu-id="2c277-320">指定した規則と同じユーザーおよび同じ <see cref="T:System.Security.AccessControl.AccessControlType" /> (許可または拒否) が指定されたすべてのアクセス制御規則を削除し、指定した規則を追加します。</span><span class="sxs-lookup"><span data-stu-id="2c277-320">Removes all access control rules with the same user and <see cref="T:System.Security.AccessControl.AccessControlType" /> (allow or deny) as the specified rule, and then adds the specified rule.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c277-321">指定した規則に <xref:System.Security.AccessControl.AccessControlType.Allow>がある場合、このメソッドの効果は、指定されたユーザーのすべての <xref:System.Security.AccessControl.AccessControlType.Allow> 規則を削除し、指定した規則に置き換えることになります。</span><span class="sxs-lookup"><span data-stu-id="2c277-321">If the specified rule has <xref:System.Security.AccessControl.AccessControlType.Allow>, the effect of this method is to remove all <xref:System.Security.AccessControl.AccessControlType.Allow> rules for the specified user, replacing them with the specified rule.</span></span> <span data-ttu-id="2c277-322">指定した規則に <xref:System.Security.AccessControl.AccessControlType.Deny>がある場合は、指定したユーザーのすべての <xref:System.Security.AccessControl.AccessControlType.Deny> 規則が指定した規則に置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="2c277-322">If the specified rule has <xref:System.Security.AccessControl.AccessControlType.Deny>, all <xref:System.Security.AccessControl.AccessControlType.Deny> rules for the specified user are replaced with the specified rule.</span></span>  
  
 <span data-ttu-id="2c277-323">指定した規則にユーザーと <xref:System.Security.AccessControl.AccessControlType> が一致する規則がない場合は、`rule` が追加されます。</span><span class="sxs-lookup"><span data-stu-id="2c277-323">If there are no rules whose user and <xref:System.Security.AccessControl.AccessControlType> match the specified rule, `rule` is added.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c277-324">次のコード例では、<xref:System.Security.AccessControl.RegistrySecurity.SetAccessRule%2A> メソッドによって、`rule`のユーザーと <xref:System.Security.AccessControl.AccessControlType> の両方に一致するすべての規則が削除され、権限とフラグが無視され、`rule`で置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="2c277-324">The following code example shows that the <xref:System.Security.AccessControl.RegistrySecurity.SetAccessRule%2A> method removes all rules that match both the user and the <xref:System.Security.AccessControl.AccessControlType> of `rule`, ignoring rights and flags, and replaces them with `rule`.</span></span>  
  
 <span data-ttu-id="2c277-325">この例では、<xref:System.Security.AccessControl.RegistrySecurity> オブジェクトを作成し、継承フラグと反映フラグが異なる、現在のユーザーのさまざまな権限を許可および拒否する規則を追加します。</span><span class="sxs-lookup"><span data-stu-id="2c277-325">The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object and adds rules that allow and deny various rights for the current user, with different inheritance and propagation flags.</span></span> <span data-ttu-id="2c277-326">次に、現在のユーザーのみにキーの読み取りを許可する新しい規則を作成し、<xref:System.Security.AccessControl.RegistrySecurity.SetAccessRule%2A> メソッドを使用して、アクセスを許可する2つの規則を削除し、それらを新しい規則に置き換える方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2c277-326">The example then creates a new rule that allows the current user only to read the key, and uses the <xref:System.Security.AccessControl.RegistrySecurity.SetAccessRule%2A> method to remove the two rules that allow access and to replace them with the new rule.</span></span> <span data-ttu-id="2c277-327">アクセスを拒否する規則は影響を受けません。</span><span class="sxs-lookup"><span data-stu-id="2c277-327">The rule that denies access is not affected.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c277-328">この例では、<xref:Microsoft.Win32.RegistryKey> オブジェクトにセキュリティオブジェクトをアタッチしません。</span><span class="sxs-lookup"><span data-stu-id="2c277-328">This example does not attach the security object to a <xref:Microsoft.Win32.RegistryKey> object.</span></span> <span data-ttu-id="2c277-329"><xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> メソッドと <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> メソッドを参照してください。</span><span class="sxs-lookup"><span data-stu-id="2c277-329">See the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> method and the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.SetAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.SetAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.SetAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.SetAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2c277-330"><paramref name="rule" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2c277-330"><paramref name="rule" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetAuditRule">
      <MemberSignature Language="C#" Value="public void SetAuditRule (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAuditRule(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.SetAuditRule(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAuditRule (rule As RegistryAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAuditRule(System::Security::AccessControl::RegistryAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.SetAuditRule : System.Security.AccessControl.RegistryAuditRule -&gt; unit" Usage="registrySecurity.SetAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule"><span data-ttu-id="2c277-331">追加する <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> です。</span><span class="sxs-lookup"><span data-stu-id="2c277-331">The <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> to add.</span></span> <span data-ttu-id="2c277-332">この規則で指定されたユーザーによって、この規則を追加する前に削除する規則が判断されます。</span><span class="sxs-lookup"><span data-stu-id="2c277-332">The user specified by this rule determines the rules to remove before this rule is added.</span></span></param>
        <summary><span data-ttu-id="2c277-333"><see cref="T:System.Security.AccessControl.AuditFlags" /> 値に関係なく、指定した規則と同じユーザーが指定されたすべての監査規則を削除し、指定した規則を追加します。</span><span class="sxs-lookup"><span data-stu-id="2c277-333">Removes all audit rules with the same user as the specified rule, regardless of the <see cref="T:System.Security.AccessControl.AuditFlags" /> value, and then adds the specified rule.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c277-334">ユーザーが指定した規則に一致する監査規則がない場合は、`rule` が追加されます。</span><span class="sxs-lookup"><span data-stu-id="2c277-334">If there are no audit rules whose user matches the specified rule, `rule` is added.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2c277-335"><paramref name="rule" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2c277-335"><paramref name="rule" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
