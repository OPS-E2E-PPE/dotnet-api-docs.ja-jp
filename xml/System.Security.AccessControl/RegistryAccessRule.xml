<Type Name="RegistryAccessRule" FullName="System.Security.AccessControl.RegistryAccessRule">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b8b42ef44e3a0700d0f3fabe2974262b88c9a46e" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75081116" /></Metadata><TypeSignature Language="C#" Value="public sealed class RegistryAccessRule : System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegistryAccessRule extends System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.RegistryAccessRule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RegistryAccessRule&#xA;Inherits AccessRule" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegistryAccessRule sealed : System::Security::AccessControl::AccessRule" />
  <TypeSignature Language="F#" Value="type RegistryAccessRule = class&#xA;    inherit AccessRule" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>4.1.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.AccessRule</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="abfe5-101">ユーザーまたはグループに許可されたアクセス権セットまたは拒否されたアクセス権セットを表します。</span><span class="sxs-lookup"><span data-stu-id="abfe5-101">Represents a set of access rights allowed or denied for a user or group.</span></span> <span data-ttu-id="abfe5-102">このクラスは継承できません。</span><span class="sxs-lookup"><span data-stu-id="abfe5-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="abfe5-103"><xref:System.Security.AccessControl.RegistryAccessRule> クラスは、レジストリキーの Windows アクセス制御セキュリティを管理するために .NET Framework が提供するクラスのセットの1つです。</span><span class="sxs-lookup"><span data-stu-id="abfe5-103">The <xref:System.Security.AccessControl.RegistryAccessRule> class is one of a set of classes that the .NET Framework provides for managing Windows access control security on registry keys.</span></span> <span data-ttu-id="abfe5-104">これらのクラスの概要と、基になる Windows アクセス制御構造との関係については、「<xref:System.Security.AccessControl.RegistrySecurity>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="abfe5-104">For an overview of these classes, and their relationship to the underlying Windows access control structures, see <xref:System.Security.AccessControl.RegistrySecurity>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="abfe5-105">Windows アクセス制御セキュリティは、レジストリキーにのみ適用できます。</span><span class="sxs-lookup"><span data-stu-id="abfe5-105">Windows access control security can only be applied to registry keys.</span></span> <span data-ttu-id="abfe5-106">キーに格納されている個々のキーと値のペアには適用できません。</span><span class="sxs-lookup"><span data-stu-id="abfe5-106">It cannot be applied to individual key/value pairs stored in a key.</span></span>  
  
 <span data-ttu-id="abfe5-107">レジストリキーに現在適用されている規則の一覧を取得するには、<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> メソッドを使用して <xref:System.Security.AccessControl.RegistrySecurity> オブジェクトを取得し、その <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> メソッドを使用して <xref:System.Security.AccessControl.RegistryAccessRule> オブジェクトのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="abfe5-107">To get a list of the rules currently applied to a registry key, use the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> method to get a <xref:System.Security.AccessControl.RegistrySecurity> object, and then use its <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> method to obtain a collection of <xref:System.Security.AccessControl.RegistryAccessRule> objects.</span></span>  
  
 <span data-ttu-id="abfe5-108"><xref:System.Security.AccessControl.RegistryAccessRule> オブジェクトは、基になる随意コントロールアクセスリスト (DACL) のアクセス制御エントリと一対一でマップされません。</span><span class="sxs-lookup"><span data-stu-id="abfe5-108"><xref:System.Security.AccessControl.RegistryAccessRule> objects do not map one-to-one with access control entries in the underlying discretionary control access list (DACL).</span></span> <span data-ttu-id="abfe5-109">レジストリキーのすべてのアクセス規則のセットを取得すると、そのセットには、すべてのアクセス制御エントリを表すために現在必要な規則の最小数が含まれます。</span><span class="sxs-lookup"><span data-stu-id="abfe5-109">When you get the set of all access rules for a registry key, the set contains the minimum number of rules currently required to express all the access control entries.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="abfe5-110">ルールを適用および削除すると、基になるアクセス制御エントリが変わります。</span><span class="sxs-lookup"><span data-stu-id="abfe5-110">The underlying access control entries change as you apply and remove rules.</span></span> <span data-ttu-id="abfe5-111">可能であれば、ルール内の情報を結合して、アクセス制御エントリの最小数を維持します。</span><span class="sxs-lookup"><span data-stu-id="abfe5-111">The information in rules is merged if possible, to maintain the smallest number of access control entries.</span></span> <span data-ttu-id="abfe5-112">したがって、現在のルールの一覧を読むと、追加したすべてのルールの一覧とまったく同じように表示されない場合があります。</span><span class="sxs-lookup"><span data-stu-id="abfe5-112">Thus, when you read the current list of rules, it might not look exactly like the list of all the rules you have added.</span></span>  
  
 <span data-ttu-id="abfe5-113"><xref:System.Security.AccessControl.RegistryAccessRule> オブジェクトを使用して、ユーザーまたはグループに対して許可または拒否するアクセス権を指定します。</span><span class="sxs-lookup"><span data-stu-id="abfe5-113">Use <xref:System.Security.AccessControl.RegistryAccessRule> objects to specify access rights to allow or deny to a user or group.</span></span> <span data-ttu-id="abfe5-114"><xref:System.Security.AccessControl.RegistryAccessRule> オブジェクトは、常に許可されたアクセス権または拒否されたアクセスのいずれかを表します。</span><span class="sxs-lookup"><span data-stu-id="abfe5-114">A <xref:System.Security.AccessControl.RegistryAccessRule> object always represents either allowed access or denied access, never both.</span></span>  
  
 <span data-ttu-id="abfe5-115">レジストリキーに規則を適用するには、<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> メソッドを使用して、<xref:System.Security.AccessControl.RegistrySecurity> オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="abfe5-115">To apply a rule to a registry key, use the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> method to get the <xref:System.Security.AccessControl.RegistrySecurity> object.</span></span> <span data-ttu-id="abfe5-116">規則を追加するメソッドを使用して <xref:System.Security.AccessControl.RegistrySecurity> オブジェクトを変更した後、<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> メソッドを使用してセキュリティオブジェクトを再アタッチします。</span><span class="sxs-lookup"><span data-stu-id="abfe5-116">Modify the <xref:System.Security.AccessControl.RegistrySecurity> object by using its methods to add the rule, and then use the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> method to reattach the security object.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="abfe5-117"><xref:System.Security.AccessControl.RegistrySecurity> オブジェクトに加えた変更は、<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> メソッドを呼び出して変更されたセキュリティオブジェクトをレジストリキーに割り当てるまで、レジストリキーのアクセスレベルには影響しません。</span><span class="sxs-lookup"><span data-stu-id="abfe5-117">Changes you make to a <xref:System.Security.AccessControl.RegistrySecurity> object do not affect the access levels of the registry key until you call the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> method to assign the altered security object to the registry key.</span></span>  
  
 <span data-ttu-id="abfe5-118"><xref:System.Security.AccessControl.RegistryAccessRule> オブジェクトは変更できません。</span><span class="sxs-lookup"><span data-stu-id="abfe5-118"><xref:System.Security.AccessControl.RegistryAccessRule> objects are immutable.</span></span> <span data-ttu-id="abfe5-119">レジストリキーのセキュリティは、<xref:System.Security.AccessControl.RegistrySecurity> クラスのメソッドを使用して、ルールを追加または削除することによって変更されます。これを行うと、基になるアクセス制御エントリが変更されます。</span><span class="sxs-lookup"><span data-stu-id="abfe5-119">Security for a registry key is modified using the methods of the <xref:System.Security.AccessControl.RegistrySecurity> class to add or remove rules; as you do this, the underlying access control entries are modified.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="abfe5-120">次のコード例は、継承と反映を含むアクセス規則を示しています。</span><span class="sxs-lookup"><span data-stu-id="abfe5-120">The following code example demonstrates access rules with inheritance and propagation.</span></span> <span data-ttu-id="abfe5-121">この例では、<xref:System.Security.AccessControl.RegistrySecurity> オブジェクトを作成し、<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> フラグを持つ2つのルールを作成して追加します。</span><span class="sxs-lookup"><span data-stu-id="abfe5-121">The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object, then creates and adds two rules that have the <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> flag.</span></span> <span data-ttu-id="abfe5-122">最初のルールには伝達フラグがありませんが、2番目のルールには <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit> と <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>があります。</span><span class="sxs-lookup"><span data-stu-id="abfe5-122">The first rule has no propagation flags, while the second has <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit> and <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>.</span></span>  
  
 <span data-ttu-id="abfe5-123">このプログラムは <xref:System.Security.AccessControl.RegistrySecurity> オブジェクトのルールを表示し、オブジェクトを使用してサブキーを作成します。</span><span class="sxs-lookup"><span data-stu-id="abfe5-123">The program displays the rules in the <xref:System.Security.AccessControl.RegistrySecurity> object, and then uses the object to create a subkey.</span></span> <span data-ttu-id="abfe5-124">プログラムは、子サブキーと孫サブキーを作成し、各サブキーのセキュリティを表示します。</span><span class="sxs-lookup"><span data-stu-id="abfe5-124">The program creates a child subkey and a grandchild subkey, and then displays the security for each subkey.</span></span> <span data-ttu-id="abfe5-125">最後に、プログラムはテストキーを削除します。</span><span class="sxs-lookup"><span data-stu-id="abfe5-125">Finally, the program deletes the test keys.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="abfe5-126"><see cref="T:System.Security.AccessControl.RegistryAccessRule" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="abfe5-126">Initializes a new instance of the <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : System.Security.Principal.IdentityReference * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity"><span data-ttu-id="abfe5-127">規則の適用対象となるユーザーまたはグループ。</span><span class="sxs-lookup"><span data-stu-id="abfe5-127">The user or group the rule applies to.</span></span> <span data-ttu-id="abfe5-128"><see cref="T:System.Security.Principal.SecurityIdentifier" /> 型にするか、または <see cref="T:System.Security.Principal.NTAccount" /> 型に変換できる <see cref="T:System.Security.Principal.SecurityIdentifier" /> などの型にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="abfe5-128">Must be of type <see cref="T:System.Security.Principal.SecurityIdentifier" /> or a type such as <see cref="T:System.Security.Principal.NTAccount" /> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</span></span></param>
        <param name="registryRights"><span data-ttu-id="abfe5-129">許可されたアクセス権または拒否されたアクセス権を表す <see cref="T:System.Security.AccessControl.RegistryRights" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="abfe5-129">A bitwise combination of <see cref="T:System.Security.AccessControl.RegistryRights" /> values indicating the rights allowed or denied.</span></span></param>
        <param name="type"><span data-ttu-id="abfe5-130">アクセス権が許可されているかどうかを表す <see cref="T:System.Security.AccessControl.AccessControlType" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="abfe5-130">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> values indicating whether the rights are allowed or denied.</span></span></param>
        <summary><span data-ttu-id="abfe5-131">規則を適用するユーザーまたはグループ、アクセス権、および指定したアクセス権を許可するかどうかを指定して、<see cref="T:System.Security.AccessControl.RegistryAccessRule" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="abfe5-131">Initializes a new instance of the <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> class, specifying the user or group the rule applies to, the access rights, and whether the specified access rights are allowed or denied.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="abfe5-132">このコンストラクターは、既定の伝達と継承を指定します。</span><span class="sxs-lookup"><span data-stu-id="abfe5-132">This constructor specifies default propagation and inheritance.</span></span> <span data-ttu-id="abfe5-133">つまり、<xref:System.Security.AccessControl.InheritanceFlags.None?displayProperty=nameWithType> と <xref:System.Security.AccessControl.PropagationFlags.None?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="abfe5-133">That is, <xref:System.Security.AccessControl.InheritanceFlags.None?displayProperty=nameWithType> and <xref:System.Security.AccessControl.PropagationFlags.None?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="abfe5-134"><paramref name="registryRights" /> に無効な値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="abfe5-134"><paramref name="registryRights" /> specifies an invalid value.</span></span>  
  
<span data-ttu-id="abfe5-135">または</span><span class="sxs-lookup"><span data-stu-id="abfe5-135">-or-</span></span> 
 <span data-ttu-id="abfe5-136"><paramref name="type" /> に無効な値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="abfe5-136"><paramref name="type" /> specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="abfe5-137"><paramref name="identity" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="abfe5-137"><paramref name="identity" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="abfe5-138">または</span><span class="sxs-lookup"><span data-stu-id="abfe5-138">-or-</span></span> 
 <span data-ttu-id="abfe5-139"><paramref name="eventRights" /> が 0 です。</span><span class="sxs-lookup"><span data-stu-id="abfe5-139"><paramref name="eventRights" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="abfe5-140"><paramref name="identity" /> が <see cref="T:System.Security.Principal.SecurityIdentifier" /> 型ではなく、<see cref="T:System.Security.Principal.NTAccount" /> 型に変換できる <see cref="T:System.Security.Principal.SecurityIdentifier" /> などの型でもありません。</span><span class="sxs-lookup"><span data-stu-id="abfe5-140"><paramref name="identity" /> is neither of type <see cref="T:System.Security.Principal.SecurityIdentifier" /> nor of a type such as <see cref="T:System.Security.Principal.NTAccount" /> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::String ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : string * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity"><span data-ttu-id="abfe5-141">規則の適用対象となるユーザー名またはグループ名。</span><span class="sxs-lookup"><span data-stu-id="abfe5-141">The name of the user or group the rule applies to.</span></span></param>
        <param name="registryRights"><span data-ttu-id="abfe5-142">許可されたアクセス権または拒否されたアクセス権を表す <see cref="T:System.Security.AccessControl.RegistryRights" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="abfe5-142">A bitwise combination of <see cref="T:System.Security.AccessControl.RegistryRights" /> values indicating the rights allowed or denied.</span></span></param>
        <param name="type"><span data-ttu-id="abfe5-143">アクセス権が許可されているかどうかを表す <see cref="T:System.Security.AccessControl.AccessControlType" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="abfe5-143">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> values indicating whether the rights are allowed or denied.</span></span></param>
        <summary><span data-ttu-id="abfe5-144">規則を適用するユーザーまたはグループの名前、アクセス権、および指定したアクセス権を許可するかどうかを指定して、<see cref="T:System.Security.AccessControl.RegistryAccessRule" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="abfe5-144">Initializes a new instance of the <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> class, specifying the name of the user or group the rule applies to, the access rights, and whether the specified access rights are allowed or denied.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="abfe5-145">このコンストラクターは、既定の伝達と継承を指定します。</span><span class="sxs-lookup"><span data-stu-id="abfe5-145">This constructor specifies default propagation and inheritance.</span></span> <span data-ttu-id="abfe5-146">つまり、<xref:System.Security.AccessControl.InheritanceFlags.None?displayProperty=nameWithType> と <xref:System.Security.AccessControl.PropagationFlags.None?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="abfe5-146">That is, <xref:System.Security.AccessControl.InheritanceFlags.None?displayProperty=nameWithType> and <xref:System.Security.AccessControl.PropagationFlags.None?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="abfe5-147">このコンストラクターは、`identity` を <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> コンストラクターに渡し、新しく作成された <xref:System.Security.Principal.NTAccount> オブジェクトを <xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.AccessControlType%29> コンストラクターに渡すことによって <xref:System.Security.Principal.NTAccount> オブジェクトを作成することと同じです。</span><span class="sxs-lookup"><span data-stu-id="abfe5-147">This constructor is equivalent to creating an <xref:System.Security.Principal.NTAccount> object, by passing `identity` to the <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> constructor, and passing the newly created <xref:System.Security.Principal.NTAccount> object to the <xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.AccessControlType%29> constructor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="abfe5-148">次のコード例では、レジストリアクセス規則を作成し、<xref:System.Security.AccessControl.RegistrySecurity> オブジェクトに追加します。これにより、同じ種類の互換性のある規則が結合されたまま、アクセス許可と拒否の規則がどのように分離されているかが示されます。</span><span class="sxs-lookup"><span data-stu-id="abfe5-148">The following code example creates registry access rules and adds them to a <xref:System.Security.AccessControl.RegistrySecurity> object, showing how rules that allow and deny rights remain separate, while compatible rules of the same kind are merged.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="abfe5-149"><paramref name="registryRights" /> に無効な値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="abfe5-149"><paramref name="registryRights" /> specifies an invalid value.</span></span>  
  
<span data-ttu-id="abfe5-150">または</span><span class="sxs-lookup"><span data-stu-id="abfe5-150">-or-</span></span> 
 <span data-ttu-id="abfe5-151"><paramref name="type" /> に無効な値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="abfe5-151"><paramref name="type" /> specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="abfe5-152"><paramref name="registryRights" /> が 0 です。</span><span class="sxs-lookup"><span data-stu-id="abfe5-152"><paramref name="registryRights" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="abfe5-153"><paramref name="identity" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="abfe5-153"><paramref name="identity" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="abfe5-154">または</span><span class="sxs-lookup"><span data-stu-id="abfe5-154">-or-</span></span> 
 <span data-ttu-id="abfe5-155"><paramref name="identity" /> は長さゼロの文字列です。</span><span class="sxs-lookup"><span data-stu-id="abfe5-155"><paramref name="identity" /> is a zero-length string.</span></span>  
  
<span data-ttu-id="abfe5-156">または</span><span class="sxs-lookup"><span data-stu-id="abfe5-156">-or-</span></span> 
 <span data-ttu-id="abfe5-157"><paramref name="identity" /> が 512 文字を超えています。</span><span class="sxs-lookup"><span data-stu-id="abfe5-157"><paramref name="identity" /> is longer than 512 characters.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : System.Security.Principal.IdentityReference * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, inheritanceFlags, propagationFlags, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity"><span data-ttu-id="abfe5-158">規則の適用対象となるユーザーまたはグループ。</span><span class="sxs-lookup"><span data-stu-id="abfe5-158">The user or group the rule applies to.</span></span> <span data-ttu-id="abfe5-159"><see cref="T:System.Security.Principal.SecurityIdentifier" /> 型にするか、または <see cref="T:System.Security.Principal.NTAccount" /> 型に変換できる <see cref="T:System.Security.Principal.SecurityIdentifier" /> などの型にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="abfe5-159">Must be of type <see cref="T:System.Security.Principal.SecurityIdentifier" /> or a type such as <see cref="T:System.Security.Principal.NTAccount" /> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</span></span></param>
        <param name="registryRights"><span data-ttu-id="abfe5-160">許可されたアクセス権または拒否されたアクセス権を指定する <see cref="T:System.Security.AccessControl.RegistryRights" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="abfe5-160">A bitwise combination of <see cref="T:System.Security.AccessControl.RegistryRights" /> values specifying the rights allowed or denied.</span></span></param>
        <param name="inheritanceFlags"><span data-ttu-id="abfe5-161">他のオブジェクトからアクセス権を継承する方法を指定する <see cref="T:System.Security.AccessControl.InheritanceFlags" /> フラグのビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="abfe5-161">A bitwise combination of <see cref="T:System.Security.AccessControl.InheritanceFlags" /> flags specifying how access rights are inherited from other objects.</span></span></param>
        <param name="propagationFlags"><span data-ttu-id="abfe5-162">他のオブジェクトにアクセス権を反映させる方法を指定する <see cref="T:System.Security.AccessControl.PropagationFlags" /> フラグのビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="abfe5-162">A bitwise combination of <see cref="T:System.Security.AccessControl.PropagationFlags" /> flags specifying how access rights are propagated to other objects.</span></span></param>
        <param name="type"><span data-ttu-id="abfe5-163">アクセス権が許可されているかどうかを指定する <see cref="T:System.Security.AccessControl.AccessControlType" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="abfe5-163">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> values specifying whether the rights are allowed or denied.</span></span></param>
        <summary><span data-ttu-id="abfe5-164">規則を適用するユーザーまたはグループ、アクセス権、継承フラグ、反映フラグ、および指定したアクセス権を許可するかどうかを指定して、<see cref="T:System.Security.AccessControl.RegistryAccessRule" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="abfe5-164">Initializes a new instance of the <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> class, specifying the user or group the rule applies to, the access rights, the inheritance flags, the propagation flags, and whether the specified access rights are allowed or denied.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="abfe5-165">すべてのレジストリキーはコンテナーであるため、レジストリキーにとって意味のある唯一の継承フラグは <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType> フラグです。</span><span class="sxs-lookup"><span data-stu-id="abfe5-165">All registry keys are containers, so the only inheritance flag that is meaningful for registry keys is the <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="abfe5-166">このフラグが指定されていない場合、伝達フラグは無視され、直接のキーのみが影響を受けます。</span><span class="sxs-lookup"><span data-stu-id="abfe5-166">If this flag is not specified, the propagation flags are ignored, and only the immediate key is affected.</span></span> <span data-ttu-id="abfe5-167">フラグが指定されている場合、ルールは次の表に示すように反映されます。</span><span class="sxs-lookup"><span data-stu-id="abfe5-167">If the flag is present, the rule is propagated as shown in the following table.</span></span> <span data-ttu-id="abfe5-168">この表では、子サブキー CS と孫サブキー GS を持つサブキーがあることを前提としています。</span><span class="sxs-lookup"><span data-stu-id="abfe5-168">The table assumes there is a subkey S with child subkey CS and grandchild subkey GS.</span></span> <span data-ttu-id="abfe5-169">つまり、孫サブキーへのパスは、</span><span class="sxs-lookup"><span data-stu-id="abfe5-169">That is, the path for the grandchild subkey is S\CS\GS.</span></span>  
  
|<span data-ttu-id="abfe5-170">伝達フラグ</span><span class="sxs-lookup"><span data-stu-id="abfe5-170">Propagation flags</span></span>|<span data-ttu-id="abfe5-171">S</span><span class="sxs-lookup"><span data-stu-id="abfe5-171">S</span></span>|<span data-ttu-id="abfe5-172">CS</span><span class="sxs-lookup"><span data-stu-id="abfe5-172">CS</span></span>|<span data-ttu-id="abfe5-173">GS</span><span class="sxs-lookup"><span data-stu-id="abfe5-173">GS</span></span>|  
|-----------------------|-------|--------|--------|  
|<xref:System.Security.AccessControl.PropagationFlags.None>|<span data-ttu-id="abfe5-174">X</span><span class="sxs-lookup"><span data-stu-id="abfe5-174">X</span></span>|<span data-ttu-id="abfe5-175">X</span><span class="sxs-lookup"><span data-stu-id="abfe5-175">X</span></span>|<span data-ttu-id="abfe5-176">X</span><span class="sxs-lookup"><span data-stu-id="abfe5-176">X</span></span>|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>|<span data-ttu-id="abfe5-177">X</span><span class="sxs-lookup"><span data-stu-id="abfe5-177">X</span></span>|<span data-ttu-id="abfe5-178">X</span><span class="sxs-lookup"><span data-stu-id="abfe5-178">X</span></span>||  
|<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||<span data-ttu-id="abfe5-179">X</span><span class="sxs-lookup"><span data-stu-id="abfe5-179">X</span></span>|<span data-ttu-id="abfe5-180">X</span><span class="sxs-lookup"><span data-stu-id="abfe5-180">X</span></span>|  
|<span data-ttu-id="abfe5-181"><xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>、 <xref:System.Security.AccessControl.PropagationFlags.InheritOnly></span><span class="sxs-lookup"><span data-stu-id="abfe5-181"><xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>, <xref:System.Security.AccessControl.PropagationFlags.InheritOnly></span></span>||<span data-ttu-id="abfe5-182">X</span><span class="sxs-lookup"><span data-stu-id="abfe5-182">X</span></span>||  
  
 <span data-ttu-id="abfe5-183">孫サブキーのパターンは、孫サブキーに含まれるすべてのサブキーを制御します。</span><span class="sxs-lookup"><span data-stu-id="abfe5-183">The pattern for the grandchild subkey governs all subkeys contained by the grandchild subkey.</span></span>  
  
 <span data-ttu-id="abfe5-184">たとえば、`inheritanceFlags` に対して <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> フラグが指定されていて、`propagationFlags`に <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> 伝達フラグが指定されている場合、この規則は直接のサブキーには適用されませんが、すべての直接の子サブキーと、そこに含まれるすべてのサブキーに適用されます。</span><span class="sxs-lookup"><span data-stu-id="abfe5-184">For example, if the <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> flag is specified for `inheritanceFlags` and the <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> propagation flag is specified for `propagationFlags`, this rule does not apply to the immediate subkey, but does apply to all its immediate child subkeys and to all subkeys they contain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="abfe5-185">`inheritanceFlags`に <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> フラグを指定することもできますが、そのような点はありません。</span><span class="sxs-lookup"><span data-stu-id="abfe5-185">Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> flag for `inheritanceFlags`, there is no point in doing so.</span></span> <span data-ttu-id="abfe5-186">アクセス制御のために、サブキーの名前と値のペアは個別のオブジェクトではありません。</span><span class="sxs-lookup"><span data-stu-id="abfe5-186">For the purposes of access control, the name/value pairs in a subkey are not separate objects.</span></span> <span data-ttu-id="abfe5-187">名前と値のペアへのアクセス権は、サブキーの権限によって制御されます。</span><span class="sxs-lookup"><span data-stu-id="abfe5-187">The access rights to name/value pairs are controlled by the rights of the subkey.</span></span> <span data-ttu-id="abfe5-188">さらに、すべてのサブキーはコンテナーであるため (つまり、他のサブキーを含めることができます)、<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> フラグの影響を受けません。</span><span class="sxs-lookup"><span data-stu-id="abfe5-188">Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag.</span></span> <span data-ttu-id="abfe5-189">最後に、<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> フラグを指定すると、規則のメンテナンスが不必要に複雑になります。これは、互換性のある規則の組み合わせに干渉するためです。</span><span class="sxs-lookup"><span data-stu-id="abfe5-189">Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag needlessly complicates the maintenance of rules, because it interferes with the combination of otherwise compatible rules.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="abfe5-190"><paramref name="registryRights" /> に無効な値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="abfe5-190"><paramref name="registryRights" /> specifies an invalid value.</span></span>  
  
<span data-ttu-id="abfe5-191">または</span><span class="sxs-lookup"><span data-stu-id="abfe5-191">-or-</span></span> 
 <span data-ttu-id="abfe5-192"><paramref name="type" /> に無効な値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="abfe5-192"><paramref name="type" /> specifies an invalid value.</span></span>  
  
<span data-ttu-id="abfe5-193">または</span><span class="sxs-lookup"><span data-stu-id="abfe5-193">-or-</span></span> 
 <span data-ttu-id="abfe5-194"><paramref name="inheritanceFlags" /> に無効な値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="abfe5-194"><paramref name="inheritanceFlags" /> specifies an invalid value.</span></span>  
  
<span data-ttu-id="abfe5-195">または</span><span class="sxs-lookup"><span data-stu-id="abfe5-195">-or-</span></span> 
 <span data-ttu-id="abfe5-196"><paramref name="propagationFlags" /> に無効な値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="abfe5-196"><paramref name="propagationFlags" /> specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="abfe5-197"><paramref name="identity" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="abfe5-197"><paramref name="identity" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="abfe5-198">または</span><span class="sxs-lookup"><span data-stu-id="abfe5-198">-or-</span></span> 
 <span data-ttu-id="abfe5-199"><paramref name="registryRights" /> が 0 です。</span><span class="sxs-lookup"><span data-stu-id="abfe5-199"><paramref name="registryRights" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="abfe5-200"><paramref name="identity" /> が <see cref="T:System.Security.Principal.SecurityIdentifier" /> 型ではなく、<see cref="T:System.Security.Principal.NTAccount" /> 型に変換できる <see cref="T:System.Security.Principal.SecurityIdentifier" /> などの型でもありません。</span><span class="sxs-lookup"><span data-stu-id="abfe5-200"><paramref name="identity" /> is neither of type <see cref="T:System.Security.Principal.SecurityIdentifier" />, nor of a type such as <see cref="T:System.Security.Principal.NTAccount" /> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::String ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : string * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, inheritanceFlags, propagationFlags, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity"><span data-ttu-id="abfe5-201">規則の適用対象となるユーザー名またはグループ名。</span><span class="sxs-lookup"><span data-stu-id="abfe5-201">The name of the user or group the rule applies to.</span></span></param>
        <param name="registryRights"><span data-ttu-id="abfe5-202">許可されたアクセス権または拒否されたアクセス権を表す <see cref="T:System.Security.AccessControl.RegistryRights" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="abfe5-202">A bitwise combination of <see cref="T:System.Security.AccessControl.RegistryRights" /> values indicating the rights allowed or denied.</span></span></param>
        <param name="inheritanceFlags"><span data-ttu-id="abfe5-203">他のオブジェクトからアクセス権を継承する方法を指定する <see cref="T:System.Security.AccessControl.InheritanceFlags" /> フラグのビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="abfe5-203">A bitwise combination of <see cref="T:System.Security.AccessControl.InheritanceFlags" /> flags specifying how access rights are inherited from other objects.</span></span></param>
        <param name="propagationFlags"><span data-ttu-id="abfe5-204">他のオブジェクトにアクセス権を反映させる方法を指定する <see cref="T:System.Security.AccessControl.PropagationFlags" /> フラグのビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="abfe5-204">A bitwise combination of <see cref="T:System.Security.AccessControl.PropagationFlags" /> flags specifying how access rights are propagated to other objects.</span></span></param>
        <param name="type"><span data-ttu-id="abfe5-205">アクセス権が許可されているかどうかを指定する <see cref="T:System.Security.AccessControl.AccessControlType" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="abfe5-205">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> values specifying whether the rights are allowed or denied.</span></span></param>
        <summary><span data-ttu-id="abfe5-206">規則を適用するユーザーまたはグループの名前、アクセス権、継承フラグ、反映フラグ、および指定したアクセス権を許可するかどうかを指定して、<see cref="T:System.Security.AccessControl.RegistryAccessRule" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="abfe5-206">Initializes a new instance of the <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> class, specifying the name of the user or group the rule applies to, the access rights, the inheritance flags, the propagation flags, and whether the specified access rights are allowed or denied.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="abfe5-207">すべてのレジストリキーはコンテナーであるため、レジストリキーにとって意味のある唯一の継承フラグは <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType> フラグです。</span><span class="sxs-lookup"><span data-stu-id="abfe5-207">All registry keys are containers, so the only inheritance flag that is meaningful for registry keys is the <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="abfe5-208">このフラグが指定されていない場合、伝達フラグは無視され、直接のキーのみが影響を受けます。</span><span class="sxs-lookup"><span data-stu-id="abfe5-208">If this flag is not specified, the propagation flags are ignored, and only the immediate key is affected.</span></span> <span data-ttu-id="abfe5-209">フラグが指定されている場合、ルールは次の表に示すように反映されます。</span><span class="sxs-lookup"><span data-stu-id="abfe5-209">If the flag is present, the rule is propagated as shown in the following table.</span></span> <span data-ttu-id="abfe5-210">この表では、子サブキー CS と孫サブキー GS を持つサブキーがあることを前提としています。</span><span class="sxs-lookup"><span data-stu-id="abfe5-210">The table assumes there is a subkey S with child subkey CS and grandchild subkey GS.</span></span> <span data-ttu-id="abfe5-211">つまり、孫サブキーへのパスは、</span><span class="sxs-lookup"><span data-stu-id="abfe5-211">That is, the path for the grandchild subkey is S\CS\GS.</span></span>  
  
|<span data-ttu-id="abfe5-212">伝達フラグ</span><span class="sxs-lookup"><span data-stu-id="abfe5-212">Propagation flags</span></span>|<span data-ttu-id="abfe5-213">S</span><span class="sxs-lookup"><span data-stu-id="abfe5-213">S</span></span>|<span data-ttu-id="abfe5-214">CS</span><span class="sxs-lookup"><span data-stu-id="abfe5-214">CS</span></span>|<span data-ttu-id="abfe5-215">GS</span><span class="sxs-lookup"><span data-stu-id="abfe5-215">GS</span></span>|  
|-----------------------|-------|--------|--------|  
|<xref:System.Security.AccessControl.PropagationFlags.None>|<span data-ttu-id="abfe5-216">X</span><span class="sxs-lookup"><span data-stu-id="abfe5-216">X</span></span>|<span data-ttu-id="abfe5-217">X</span><span class="sxs-lookup"><span data-stu-id="abfe5-217">X</span></span>|<span data-ttu-id="abfe5-218">X</span><span class="sxs-lookup"><span data-stu-id="abfe5-218">X</span></span>|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>|<span data-ttu-id="abfe5-219">X</span><span class="sxs-lookup"><span data-stu-id="abfe5-219">X</span></span>|<span data-ttu-id="abfe5-220">X</span><span class="sxs-lookup"><span data-stu-id="abfe5-220">X</span></span>||  
|<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||<span data-ttu-id="abfe5-221">X</span><span class="sxs-lookup"><span data-stu-id="abfe5-221">X</span></span>|<span data-ttu-id="abfe5-222">X</span><span class="sxs-lookup"><span data-stu-id="abfe5-222">X</span></span>|  
|<span data-ttu-id="abfe5-223"><xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>、 <xref:System.Security.AccessControl.PropagationFlags.InheritOnly></span><span class="sxs-lookup"><span data-stu-id="abfe5-223"><xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>, <xref:System.Security.AccessControl.PropagationFlags.InheritOnly></span></span>||<span data-ttu-id="abfe5-224">X</span><span class="sxs-lookup"><span data-stu-id="abfe5-224">X</span></span>||  
  
 <span data-ttu-id="abfe5-225">孫サブキーのパターンは、孫サブキーに含まれるすべてのサブキーを制御します。</span><span class="sxs-lookup"><span data-stu-id="abfe5-225">The pattern for the grandchild subkey governs all subkeys contained by the grandchild subkey.</span></span>  
  
 <span data-ttu-id="abfe5-226">たとえば、`inheritanceFlags` に対して <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> フラグが指定されていて、`propagationFlags`に <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> 伝達フラグが指定されている場合、この規則は直接のサブキーには適用されませんが、すべての直接の子サブキーと、そこに含まれるすべてのサブキーに適用されます。</span><span class="sxs-lookup"><span data-stu-id="abfe5-226">For example, if the <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> flag is specified for `inheritanceFlags` and the <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> propagation flag is specified for `propagationFlags`, this rule does not apply to the immediate subkey, but does apply to all its immediate child subkeys and to all subkeys they contain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="abfe5-227">`inheritanceFlags`に <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> フラグを指定することもできますが、そのような点はありません。</span><span class="sxs-lookup"><span data-stu-id="abfe5-227">Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> flag for `inheritanceFlags`, there is no point in doing so.</span></span> <span data-ttu-id="abfe5-228">アクセス制御のために、サブキーの名前と値のペアは個別のオブジェクトではありません。</span><span class="sxs-lookup"><span data-stu-id="abfe5-228">For the purposes of access control, the name/value pairs in a subkey are not separate objects.</span></span> <span data-ttu-id="abfe5-229">名前と値のペアへのアクセス権は、サブキーの権限によって制御されます。</span><span class="sxs-lookup"><span data-stu-id="abfe5-229">The access rights to name/value pairs are controlled by the rights of the subkey.</span></span> <span data-ttu-id="abfe5-230">さらに、すべてのサブキーはコンテナーであるため (つまり、他のサブキーを含めることができます)、<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> フラグの影響を受けません。</span><span class="sxs-lookup"><span data-stu-id="abfe5-230">Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag.</span></span> <span data-ttu-id="abfe5-231">最後に、<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> フラグを指定すると、規則のメンテナンスが不必要に複雑になります。これは、互換性のある規則の組み合わせに干渉するためです。</span><span class="sxs-lookup"><span data-stu-id="abfe5-231">Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag needlessly complicates the maintenance of rules, because it interferes with the combination of otherwise compatible rules.</span></span>  
  
 <span data-ttu-id="abfe5-232">このコンストラクターは、`identity` を <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> コンストラクターに渡し、新しく作成された <xref:System.Security.Principal.NTAccount> オブジェクトを <xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.InheritanceFlags%2CSystem.Security.AccessControl.PropagationFlags%2CSystem.Security.AccessControl.AccessControlType%29> コンストラクターに渡すことによって <xref:System.Security.Principal.NTAccount> オブジェクトを作成することと同じです。</span><span class="sxs-lookup"><span data-stu-id="abfe5-232">This constructor is equivalent to creating an <xref:System.Security.Principal.NTAccount> object, by passing `identity` to the <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> constructor, and passing the newly created <xref:System.Security.Principal.NTAccount> object to the <xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.InheritanceFlags%2CSystem.Security.AccessControl.PropagationFlags%2CSystem.Security.AccessControl.AccessControlType%29> constructor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="abfe5-233">次のコード例は、継承と反映を含むアクセス規則を示しています。</span><span class="sxs-lookup"><span data-stu-id="abfe5-233">The following code example demonstrates access rules with inheritance and propagation.</span></span> <span data-ttu-id="abfe5-234">この例では、<xref:System.Security.AccessControl.RegistrySecurity> オブジェクトを作成し、<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> フラグを持つ2つのルールを作成して追加します。</span><span class="sxs-lookup"><span data-stu-id="abfe5-234">The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object, and then creates and adds two rules that have the <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> flag.</span></span> <span data-ttu-id="abfe5-235">最初のルールには伝達フラグがありませんが、2番目のルールには <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit> と <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>があります。</span><span class="sxs-lookup"><span data-stu-id="abfe5-235">The first rule has no propagation flags, while the second has <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit> and <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>.</span></span>  
  
 <span data-ttu-id="abfe5-236">このプログラムは、<xref:System.Security.AccessControl.RegistrySecurity> オブジェクトに規則を表示し、<xref:System.Security.AccessControl.RegistrySecurity> オブジェクトを使用してサブキーを作成します。</span><span class="sxs-lookup"><span data-stu-id="abfe5-236">The program displays the rules in the <xref:System.Security.AccessControl.RegistrySecurity> object, and then uses the <xref:System.Security.AccessControl.RegistrySecurity> object to create a subkey.</span></span> <span data-ttu-id="abfe5-237">プログラムは、子サブキーと孫サブキーを作成し、各サブキーの規則を表示します。</span><span class="sxs-lookup"><span data-stu-id="abfe5-237">The program creates a child subkey and a grandchild subkey, and then displays the rules for each subkey.</span></span> <span data-ttu-id="abfe5-238">最後に、プログラムはテストキーを削除します。</span><span class="sxs-lookup"><span data-stu-id="abfe5-238">Finally, the program deletes the test keys.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="abfe5-239"><paramref name="registryRights" /> に無効な値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="abfe5-239"><paramref name="registryRights" /> specifies an invalid value.</span></span>  
  
<span data-ttu-id="abfe5-240">または</span><span class="sxs-lookup"><span data-stu-id="abfe5-240">-or-</span></span> 
 <span data-ttu-id="abfe5-241"><paramref name="type" /> に無効な値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="abfe5-241"><paramref name="type" /> specifies an invalid value.</span></span>  
  
<span data-ttu-id="abfe5-242">または</span><span class="sxs-lookup"><span data-stu-id="abfe5-242">-or-</span></span> 
 <span data-ttu-id="abfe5-243"><paramref name="inheritanceFlags" /> に無効な値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="abfe5-243"><paramref name="inheritanceFlags" /> specifies an invalid value.</span></span>  
  
<span data-ttu-id="abfe5-244">または</span><span class="sxs-lookup"><span data-stu-id="abfe5-244">-or-</span></span> 
 <span data-ttu-id="abfe5-245"><paramref name="propagationFlags" /> に無効な値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="abfe5-245"><paramref name="propagationFlags" /> specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="abfe5-246"><paramref name="eventRights" /> が 0 です。</span><span class="sxs-lookup"><span data-stu-id="abfe5-246"><paramref name="eventRights" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="abfe5-247"><paramref name="identity" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="abfe5-247"><paramref name="identity" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="abfe5-248">または</span><span class="sxs-lookup"><span data-stu-id="abfe5-248">-or-</span></span> 
 <span data-ttu-id="abfe5-249"><paramref name="identity" /> は長さゼロの文字列です。</span><span class="sxs-lookup"><span data-stu-id="abfe5-249"><paramref name="identity" /> is a zero-length string.</span></span>  
  
<span data-ttu-id="abfe5-250">または</span><span class="sxs-lookup"><span data-stu-id="abfe5-250">-or-</span></span> 
 <span data-ttu-id="abfe5-251"><paramref name="identity" /> が 512 文字を超えています。</span><span class="sxs-lookup"><span data-stu-id="abfe5-251"><paramref name="identity" /> is longer than 512 characters.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RegistryRights">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.RegistryRights RegistryRights { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.RegistryRights RegistryRights" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistryAccessRule.RegistryRights" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RegistryRights As RegistryRights" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::AccessControl::RegistryRights RegistryRights { System::Security::AccessControl::RegistryRights get(); };" />
      <MemberSignature Language="F#" Value="member this.RegistryRights : System.Security.AccessControl.RegistryRights" Usage="System.Security.AccessControl.RegistryAccessRule.RegistryRights" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.RegistryRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="abfe5-252">アクセス規則で許可されたアクセス権または拒否されたアクセス権を取得します。</span><span class="sxs-lookup"><span data-stu-id="abfe5-252">Gets the rights allowed or denied by the access rule.</span></span></summary>
        <value><span data-ttu-id="abfe5-253">アクセス規則で許可されたアクセス権または拒否されたアクセス権を表す <see cref="T:System.Security.AccessControl.RegistryRights" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="abfe5-253">A bitwise combination of <see cref="T:System.Security.AccessControl.RegistryRights" /> values indicating the rights allowed or denied by the access rule.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="abfe5-254"><xref:System.Security.AccessControl.RegistryAccessRule> オブジェクトは変更できません。</span><span class="sxs-lookup"><span data-stu-id="abfe5-254"><xref:System.Security.AccessControl.RegistryAccessRule> objects are immutable.</span></span> <span data-ttu-id="abfe5-255">別のユーザー、別の権限、または別の <xref:System.Security.AccessControl.AccessControlType>を表す新しいアクセスルールを作成することはできますが、既存のアクセスルールを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="abfe5-255">You can create a new access rule representing a different user, different rights, or a different <xref:System.Security.AccessControl.AccessControlType>, but you cannot modify an existing access rule.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
