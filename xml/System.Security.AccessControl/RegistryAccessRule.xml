<Type Name="RegistryAccessRule" FullName="System.Security.AccessControl.RegistryAccessRule">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b8b42ef44e3a0700d0f3fabe2974262b88c9a46e" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75081116" /></Metadata><TypeSignature Language="C#" Value="public sealed class RegistryAccessRule : System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegistryAccessRule extends System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.RegistryAccessRule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RegistryAccessRule&#xA;Inherits AccessRule" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegistryAccessRule sealed : System::Security::AccessControl::AccessRule" />
  <TypeSignature Language="F#" Value="type RegistryAccessRule = class&#xA;    inherit AccessRule" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>4.1.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.AccessRule</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>ユーザーまたはグループに許可されたアクセス権セットまたは拒否されたアクセス権セットを表します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.RegistryAccessRule> クラスは、レジストリキーの Windows アクセス制御セキュリティを管理するために .NET Framework が提供するクラスのセットの1つです。 これらのクラスの概要と、基になる Windows アクセス制御構造との関係については、「<xref:System.Security.AccessControl.RegistrySecurity>」を参照してください。  
  
> [!NOTE]
>  Windows アクセス制御セキュリティは、レジストリキーにのみ適用できます。 キーに格納されている個々のキーと値のペアには適用できません。  
  
 レジストリキーに現在適用されている規則の一覧を取得するには、<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> メソッドを使用して <xref:System.Security.AccessControl.RegistrySecurity> オブジェクトを取得し、その <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> メソッドを使用して <xref:System.Security.AccessControl.RegistryAccessRule> オブジェクトのコレクションを取得します。  
  
 <xref:System.Security.AccessControl.RegistryAccessRule> オブジェクトは、基になる随意コントロールアクセスリスト (DACL) のアクセス制御エントリと一対一でマップされません。 レジストリキーのすべてのアクセス規則のセットを取得すると、そのセットには、すべてのアクセス制御エントリを表すために現在必要な規則の最小数が含まれます。  
  
> [!NOTE]
>  ルールを適用および削除すると、基になるアクセス制御エントリが変わります。 可能であれば、ルール内の情報を結合して、アクセス制御エントリの最小数を維持します。 したがって、現在のルールの一覧を読むと、追加したすべてのルールの一覧とまったく同じように表示されない場合があります。  
  
 <xref:System.Security.AccessControl.RegistryAccessRule> オブジェクトを使用して、ユーザーまたはグループに対して許可または拒否するアクセス権を指定します。 <xref:System.Security.AccessControl.RegistryAccessRule> オブジェクトは、常に許可されたアクセス権または拒否されたアクセスのいずれかを表します。  
  
 レジストリキーに規則を適用するには、<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> メソッドを使用して、<xref:System.Security.AccessControl.RegistrySecurity> オブジェクトを取得します。 規則を追加するメソッドを使用して <xref:System.Security.AccessControl.RegistrySecurity> オブジェクトを変更した後、<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> メソッドを使用してセキュリティオブジェクトを再アタッチします。  
  
> [!IMPORTANT]
>  <xref:System.Security.AccessControl.RegistrySecurity> オブジェクトに加えた変更は、<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> メソッドを呼び出して変更されたセキュリティオブジェクトをレジストリキーに割り当てるまで、レジストリキーのアクセスレベルには影響しません。  
  
 <xref:System.Security.AccessControl.RegistryAccessRule> オブジェクトは変更できません。 レジストリキーのセキュリティは、<xref:System.Security.AccessControl.RegistrySecurity> クラスのメソッドを使用して、ルールを追加または削除することによって変更されます。これを行うと、基になるアクセス制御エントリが変更されます。  
  
   
  
## Examples  
 次のコード例は、継承と反映を含むアクセス規則を示しています。 この例では、<xref:System.Security.AccessControl.RegistrySecurity> オブジェクトを作成し、<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> フラグを持つ2つのルールを作成して追加します。 最初のルールには伝達フラグがありませんが、2番目のルールには <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit> と <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>があります。  
  
 このプログラムは <xref:System.Security.AccessControl.RegistrySecurity> オブジェクトのルールを表示し、オブジェクトを使用してサブキーを作成します。 プログラムは、子サブキーと孫サブキーを作成し、各サブキーのセキュリティを表示します。 最後に、プログラムはテストキーを削除します。  
  
 [!code-csharp[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Security.AccessControl.RegistryAccessRule" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : System.Security.Principal.IdentityReference * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">規則の適用対象となるユーザーまたはグループ。 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 型にするか、または <see cref="T:System.Security.Principal.NTAccount" /> 型に変換できる <see cref="T:System.Security.Principal.SecurityIdentifier" /> などの型にする必要があります。</param>
        <param name="registryRights">許可されたアクセス権または拒否されたアクセス権を表す <see cref="T:System.Security.AccessControl.RegistryRights" /> 値のビットごとの組み合わせ。</param>
        <param name="type">アクセス権が許可されているかどうかを表す <see cref="T:System.Security.AccessControl.AccessControlType" /> 値の 1 つ。</param>
        <summary>規則を適用するユーザーまたはグループ、アクセス権、および指定したアクセス権を許可するかどうかを指定して、<see cref="T:System.Security.AccessControl.RegistryAccessRule" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、既定の伝達と継承を指定します。 つまり、<xref:System.Security.AccessControl.InheritanceFlags.None?displayProperty=nameWithType> と <xref:System.Security.AccessControl.PropagationFlags.None?displayProperty=nameWithType>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="registryRights" /> に無効な値が指定されています。  
  
または 
 <paramref name="type" /> に無効な値が指定されています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="identity" /> は <see langword="null" /> です。  
  
または 
 <paramref name="eventRights" /> が 0 です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identity" /> が <see cref="T:System.Security.Principal.SecurityIdentifier" /> 型ではなく、<see cref="T:System.Security.Principal.NTAccount" /> 型に変換できる <see cref="T:System.Security.Principal.SecurityIdentifier" /> などの型でもありません。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::String ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : string * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">規則の適用対象となるユーザー名またはグループ名。</param>
        <param name="registryRights">許可されたアクセス権または拒否されたアクセス権を表す <see cref="T:System.Security.AccessControl.RegistryRights" /> 値のビットごとの組み合わせ。</param>
        <param name="type">アクセス権が許可されているかどうかを表す <see cref="T:System.Security.AccessControl.AccessControlType" /> 値の 1 つ。</param>
        <summary>規則を適用するユーザーまたはグループの名前、アクセス権、および指定したアクセス権を許可するかどうかを指定して、<see cref="T:System.Security.AccessControl.RegistryAccessRule" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、既定の伝達と継承を指定します。 つまり、<xref:System.Security.AccessControl.InheritanceFlags.None?displayProperty=nameWithType> と <xref:System.Security.AccessControl.PropagationFlags.None?displayProperty=nameWithType>です。  
  
 このコンストラクターは、`identity` を <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> コンストラクターに渡し、新しく作成された <xref:System.Security.Principal.NTAccount> オブジェクトを <xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.AccessControlType%29> コンストラクターに渡すことによって <xref:System.Security.Principal.NTAccount> オブジェクトを作成することと同じです。  
  
   
  
## Examples  
 次のコード例では、レジストリアクセス規則を作成し、<xref:System.Security.AccessControl.RegistrySecurity> オブジェクトに追加します。これにより、同じ種類の互換性のある規則が結合されたまま、アクセス許可と拒否の規則がどのように分離されているかが示されます。  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="registryRights" /> に無効な値が指定されています。  
  
または 
 <paramref name="type" /> に無効な値が指定されています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="registryRights" /> が 0 です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identity" /> は <see langword="null" /> です。  
  
または 
 <paramref name="identity" /> は長さゼロの文字列です。  
  
または 
 <paramref name="identity" /> が 512 文字を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : System.Security.Principal.IdentityReference * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, inheritanceFlags, propagationFlags, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">規則の適用対象となるユーザーまたはグループ。 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 型にするか、または <see cref="T:System.Security.Principal.NTAccount" /> 型に変換できる <see cref="T:System.Security.Principal.SecurityIdentifier" /> などの型にする必要があります。</param>
        <param name="registryRights">許可されたアクセス権または拒否されたアクセス権を指定する <see cref="T:System.Security.AccessControl.RegistryRights" /> 値のビットごとの組み合わせ。</param>
        <param name="inheritanceFlags">他のオブジェクトからアクセス権を継承する方法を指定する <see cref="T:System.Security.AccessControl.InheritanceFlags" /> フラグのビットごとの組み合わせ。</param>
        <param name="propagationFlags">他のオブジェクトにアクセス権を反映させる方法を指定する <see cref="T:System.Security.AccessControl.PropagationFlags" /> フラグのビットごとの組み合わせ。</param>
        <param name="type">アクセス権が許可されているかどうかを指定する <see cref="T:System.Security.AccessControl.AccessControlType" /> 値の 1 つ。</param>
        <summary>規則を適用するユーザーまたはグループ、アクセス権、継承フラグ、反映フラグ、および指定したアクセス権を許可するかどうかを指定して、<see cref="T:System.Security.AccessControl.RegistryAccessRule" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 すべてのレジストリキーはコンテナーであるため、レジストリキーにとって意味のある唯一の継承フラグは <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType> フラグです。 このフラグが指定されていない場合、伝達フラグは無視され、直接のキーのみが影響を受けます。 フラグが指定されている場合、ルールは次の表に示すように反映されます。 この表では、子サブキー CS と孫サブキー GS を持つサブキーがあることを前提としています。 つまり、孫サブキーへのパスは、  
  
|伝達フラグ|S|CS|GS|  
|-----------------------|-------|--------|--------|  
|<xref:System.Security.AccessControl.PropagationFlags.None>|X|X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>|X|X||  
|<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>、 <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X||  
  
 孫サブキーのパターンは、孫サブキーに含まれるすべてのサブキーを制御します。  
  
 たとえば、`inheritanceFlags` に対して <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> フラグが指定されていて、`propagationFlags`に <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> 伝達フラグが指定されている場合、この規則は直接のサブキーには適用されませんが、すべての直接の子サブキーと、そこに含まれるすべてのサブキーに適用されます。  
  
> [!NOTE]
>  `inheritanceFlags`に <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> フラグを指定することもできますが、そのような点はありません。 アクセス制御のために、サブキーの名前と値のペアは個別のオブジェクトではありません。 名前と値のペアへのアクセス権は、サブキーの権限によって制御されます。 さらに、すべてのサブキーはコンテナーであるため (つまり、他のサブキーを含めることができます)、<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> フラグの影響を受けません。 最後に、<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> フラグを指定すると、規則のメンテナンスが不必要に複雑になります。これは、互換性のある規則の組み合わせに干渉するためです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="registryRights" /> に無効な値が指定されています。  
  
または 
 <paramref name="type" /> に無効な値が指定されています。  
  
または 
 <paramref name="inheritanceFlags" /> に無効な値が指定されています。  
  
または 
 <paramref name="propagationFlags" /> に無効な値が指定されています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="identity" /> は <see langword="null" /> です。  
  
または 
 <paramref name="registryRights" /> が 0 です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identity" /> が <see cref="T:System.Security.Principal.SecurityIdentifier" /> 型ではなく、<see cref="T:System.Security.Principal.NTAccount" /> 型に変換できる <see cref="T:System.Security.Principal.SecurityIdentifier" /> などの型でもありません。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::String ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : string * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, inheritanceFlags, propagationFlags, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">規則の適用対象となるユーザー名またはグループ名。</param>
        <param name="registryRights">許可されたアクセス権または拒否されたアクセス権を表す <see cref="T:System.Security.AccessControl.RegistryRights" /> 値のビットごとの組み合わせ。</param>
        <param name="inheritanceFlags">他のオブジェクトからアクセス権を継承する方法を指定する <see cref="T:System.Security.AccessControl.InheritanceFlags" /> フラグのビットごとの組み合わせ。</param>
        <param name="propagationFlags">他のオブジェクトにアクセス権を反映させる方法を指定する <see cref="T:System.Security.AccessControl.PropagationFlags" /> フラグのビットごとの組み合わせ。</param>
        <param name="type">アクセス権が許可されているかどうかを指定する <see cref="T:System.Security.AccessControl.AccessControlType" /> 値の 1 つ。</param>
        <summary>規則を適用するユーザーまたはグループの名前、アクセス権、継承フラグ、反映フラグ、および指定したアクセス権を許可するかどうかを指定して、<see cref="T:System.Security.AccessControl.RegistryAccessRule" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 すべてのレジストリキーはコンテナーであるため、レジストリキーにとって意味のある唯一の継承フラグは <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType> フラグです。 このフラグが指定されていない場合、伝達フラグは無視され、直接のキーのみが影響を受けます。 フラグが指定されている場合、ルールは次の表に示すように反映されます。 この表では、子サブキー CS と孫サブキー GS を持つサブキーがあることを前提としています。 つまり、孫サブキーへのパスは、  
  
|伝達フラグ|S|CS|GS|  
|-----------------------|-------|--------|--------|  
|<xref:System.Security.AccessControl.PropagationFlags.None>|X|X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>|X|X||  
|<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>、 <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X||  
  
 孫サブキーのパターンは、孫サブキーに含まれるすべてのサブキーを制御します。  
  
 たとえば、`inheritanceFlags` に対して <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> フラグが指定されていて、`propagationFlags`に <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> 伝達フラグが指定されている場合、この規則は直接のサブキーには適用されませんが、すべての直接の子サブキーと、そこに含まれるすべてのサブキーに適用されます。  
  
> [!NOTE]
>  `inheritanceFlags`に <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> フラグを指定することもできますが、そのような点はありません。 アクセス制御のために、サブキーの名前と値のペアは個別のオブジェクトではありません。 名前と値のペアへのアクセス権は、サブキーの権限によって制御されます。 さらに、すべてのサブキーはコンテナーであるため (つまり、他のサブキーを含めることができます)、<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> フラグの影響を受けません。 最後に、<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> フラグを指定すると、規則のメンテナンスが不必要に複雑になります。これは、互換性のある規則の組み合わせに干渉するためです。  
  
 このコンストラクターは、`identity` を <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> コンストラクターに渡し、新しく作成された <xref:System.Security.Principal.NTAccount> オブジェクトを <xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.InheritanceFlags%2CSystem.Security.AccessControl.PropagationFlags%2CSystem.Security.AccessControl.AccessControlType%29> コンストラクターに渡すことによって <xref:System.Security.Principal.NTAccount> オブジェクトを作成することと同じです。  
  
   
  
## Examples  
 次のコード例は、継承と反映を含むアクセス規則を示しています。 この例では、<xref:System.Security.AccessControl.RegistrySecurity> オブジェクトを作成し、<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> フラグを持つ2つのルールを作成して追加します。 最初のルールには伝達フラグがありませんが、2番目のルールには <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit> と <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>があります。  
  
 このプログラムは、<xref:System.Security.AccessControl.RegistrySecurity> オブジェクトに規則を表示し、<xref:System.Security.AccessControl.RegistrySecurity> オブジェクトを使用してサブキーを作成します。 プログラムは、子サブキーと孫サブキーを作成し、各サブキーの規則を表示します。 最後に、プログラムはテストキーを削除します。  
  
 [!code-csharp[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="registryRights" /> に無効な値が指定されています。  
  
または 
 <paramref name="type" /> に無効な値が指定されています。  
  
または 
 <paramref name="inheritanceFlags" /> に無効な値が指定されています。  
  
または 
 <paramref name="propagationFlags" /> に無効な値が指定されています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="eventRights" /> が 0 です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identity" /> は <see langword="null" /> です。  
  
または 
 <paramref name="identity" /> は長さゼロの文字列です。  
  
または 
 <paramref name="identity" /> が 512 文字を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="RegistryRights">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.RegistryRights RegistryRights { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.RegistryRights RegistryRights" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistryAccessRule.RegistryRights" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RegistryRights As RegistryRights" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::AccessControl::RegistryRights RegistryRights { System::Security::AccessControl::RegistryRights get(); };" />
      <MemberSignature Language="F#" Value="member this.RegistryRights : System.Security.AccessControl.RegistryRights" Usage="System.Security.AccessControl.RegistryAccessRule.RegistryRights" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.RegistryRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アクセス規則で許可されたアクセス権または拒否されたアクセス権を取得します。</summary>
        <value>アクセス規則で許可されたアクセス権または拒否されたアクセス権を表す <see cref="T:System.Security.AccessControl.RegistryRights" /> 値のビットごとの組み合わせ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.RegistryAccessRule> オブジェクトは変更できません。 別のユーザー、別の権限、または別の <xref:System.Security.AccessControl.AccessControlType>を表す新しいアクセスルールを作成することはできますが、既存のアクセスルールを変更することはできません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
