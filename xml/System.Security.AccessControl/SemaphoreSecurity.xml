<Type Name="SemaphoreSecurity" FullName="System.Security.AccessControl.SemaphoreSecurity">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3fd2bdd2deb0baf59785fc60f3f007967f296699" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75164082" /></Metadata><TypeSignature Language="C#" Value="public sealed class SemaphoreSecurity : System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SemaphoreSecurity extends System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.SemaphoreSecurity" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SemaphoreSecurity&#xA;Inherits NativeObjectSecurity" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemaphoreSecurity sealed : System::Security::AccessControl::NativeObjectSecurity" />
  <TypeSignature Language="F#" Value="type SemaphoreSecurity = class&#xA;    inherit NativeObjectSecurity" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
    <AssemblyVersion>4.0.5.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.NativeObjectSecurity</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>名前付きセマフォの Windows アクセス制御セキュリティを表します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトは、名前付きシステムセマフォのアクセス権を指定します。また、アクセス試行の監査方法も指定します。 セマフォへのアクセス権は、<xref:System.Security.AccessControl.SemaphoreAccessRule> オブジェクトによって表される各アクセスルールと共に、ルールとして表現されます。 各監査規則は、<xref:System.Security.AccessControl.SemaphoreAuditRule> オブジェクトによって表されます。  
  
 これにより、基になる Windows セキュリティシステムがミラー化されます。セキュリティ保護可能な各オブジェクトには、セキュリティで保護されたオブジェクトへのアクセスを制御する随意アクセス制御リスト (DACL) が1つだけあります。また、アクセスを指定するシステムアクセス制御リスト (SACL) は最大1つです。試行は監査されます。 DACL と SACL は、ユーザーおよびグループのアクセスと監査を指定するアクセス制御エントリ (ACE) の順序付きリストです。 <xref:System.Security.AccessControl.SemaphoreAccessRule> または <xref:System.Security.AccessControl.SemaphoreAuditRule> オブジェクトは、複数の ACE を表す場合があります。  
  
> [!NOTE]
>  <xref:System.Threading.Semaphore> オブジェクトは、ローカルセマフォまたは名前付きシステムセマフォを表すことができます。 Windows アクセス制御セキュリティは、名前付きシステムセマフォに対してのみ意味があります。  
  
 <xref:System.Security.AccessControl.SemaphoreSecurity>、<xref:System.Security.AccessControl.SemaphoreAccessRule>、および <xref:System.Security.AccessControl.SemaphoreAuditRule> クラスは、Acl と Ace の実装の詳細を非表示にします。 17個の ACE の種類と、アクセス権の継承と反映を適切に維持する複雑さを無視することができます。 これらのオブジェクトは、次の一般的なアクセス制御エラーを防ぐためにも設計されています。  
  
-   Null の DACL を持つセキュリティ記述子を作成します。 DACL への null 参照を使用すると、任意のユーザーがオブジェクトにアクセス規則を追加でき、サービス拒否攻撃を行う可能性があります。 新しい <xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトは、常に空の DACL で開始されます。これにより、すべてのユーザーのすべてのアクセスが拒否されます。  
  
-   Ace の正規の順序に違反しています。 DACL の ACE リストが正規の順序で保持されていない場合、セキュリティで保護されたオブジェクトへのアクセス権がユーザーに与えられる可能性があります。 たとえば、拒否されたアクセス権は、許可されたアクセス権の前に常に表示される必要があります。 <xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトは、内部で正しい順序を維持します。  
  
-   セキュリティ記述子のフラグを操作します。このフラグは、resource manager コントロールのみに存在する必要があります。  
  
-   ACE フラグの無効な組み合わせを作成しています。  
  
-   継承された Ace を操作します。 継承と反映は、アクセスおよび監査規則に対する変更に応じて、リソースマネージャーによって処理されます。  
  
-   Acl に意味のない Ace を挿入します。  
  
 .NET セキュリティオブジェクトでサポートされていない機能は、次のように、ほとんどのアプリケーション開発者が回避する必要がある危険なアクティビティだけです。  
  
-   通常はリソースマネージャーによって実行される低レベルのタスク。  
  
-   アクセス制御エントリを追加または削除すると、標準の順序が維持されません。  
  
 名前付きセマフォの Windows アクセス制御セキュリティを変更するには、<xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> メソッドを使用して、<xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトを取得します。 規則を追加および削除してセキュリティオブジェクトを変更し、<xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType> メソッドを使用して再アタッチします。  
  
> [!IMPORTANT]
>  <xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトに加えた変更は、<xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType> メソッドを呼び出して、変更されたセキュリティオブジェクトを名前付きセマフォに割り当てるまで、名前付きセマフォのアクセスレベルには影響しません。  
  
 あるセマフォから別のセマフォにアクセス制御セキュリティをコピーするには、<xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> メソッドを使用して、最初のセマフォのアクセス規則と監査規則を表す <xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトを取得します。次に、<xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType> メソッド、または <xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトを受け入れるコンストラクターを使用して、2つ目のセマフォにそれらの規則を割り当てます。  
  
 セキュリティ記述子定義言語 (SDDL) に投資しているユーザーは、<xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> メソッドを使用して名前付きセマフォのアクセス規則を設定できます。また、<xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> メソッドを使用すると、アクセス規則を SDDL 形式で表す文字列を取得できます。 これは、新しい開発では推奨されません。  
  
> [!NOTE]
>  同期オブジェクトのセキュリティは、Windows 98 または Windows Millennium Edition ではサポートされていません。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Security.AccessControl.AccessControlType.Allow> ルールと <xref:System.Security.AccessControl.AccessControlType.Deny> ルールの分離を示し、互換性のあるルールでの権限の組み合わせを示しています。 この例では、<xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトを作成し、現在のユーザーに対してさまざまな権限を許可および拒否する規則を追加し、結果として得られる規則のペアを表示します。 この例では、現在のユーザーに対して新しい権限を許可し、その結果を表示して、新しい権限が既存の <xref:System.Security.AccessControl.AccessControlType.Allow> ルールとマージされていることを示します。  
  
> [!NOTE]
>  この例では、<xref:System.Threading.Semaphore> オブジェクトにセキュリティオブジェクトをアタッチしません。 セキュリティオブジェクトをアタッチする例については、<xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> と <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>を参照してください。  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Security.AccessControl.SemaphoreAccessRule" />
    <altmember cref="T:System.Security.AccessControl.SemaphoreAuditRule" />
    <altmember cref="T:System.Security.AccessControl.SemaphoreRights" />
    <altmember cref="M:System.Threading.Semaphore.GetAccessControl" />
    <altmember cref="M:System.Threading.Semaphore.SetAccessControl(System.Security.AccessControl.SemaphoreSecurity)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemaphoreSecurity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemaphoreSecurity();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>既定値を使用して <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新しい <xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトは、常に空の随意アクセスリスト (DACL) で開始され、すべてのユーザーのすべてのアクセスを拒否します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">このクラスは、Windows 98 および Windows Millennium Edition ではサポートされていません。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemaphoreSecurity (string name, System.Security.AccessControl.AccessControlSections includeSections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Security.AccessControl.AccessControlSections includeSections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, includeSections As AccessControlSections)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemaphoreSecurity(System::String ^ name, System::Security::AccessControl::AccessControlSections includeSections);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.SemaphoreSecurity : string * System.Security.AccessControl.AccessControlSections -&gt; System.Security.AccessControl.SemaphoreSecurity" Usage="new System.Security.AccessControl.SemaphoreSecurity (name, includeSections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="includeSections" Type="System.Security.AccessControl.AccessControlSections" />
      </Parameters>
      <Docs>
        <param name="name">アクセス制御セキュリティ規則の取得元となるシステム セマフォの名前。</param>
        <param name="includeSections">取得するセクションを指定する <see cref="T:System.Security.AccessControl.AccessControlSections" /> フラグの組み合わせ。</param>
        <summary>指定した名前を持つシステム セマフォのアクセス制御セキュリティ規則のセクションを指定して、<see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターを使用すると、最初に <xref:System.Threading.Semaphore> オブジェクトを作成せずに、名前付きシステムセマフォのアクセス制御セキュリティを取得できます。  
  
 名前付きシステムオブジェクトを使用する場合は、注意が必要です。 セマフォではない `name` という名前のシステムオブジェクトがある場合は、制御アクセスセキュリティを取得することができます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">このクラスは、Windows 98 および Windows Millennium Edition ではサポートされていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="AccessRightType">
      <MemberSignature Language="C#" Value="public override Type AccessRightType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AccessRightType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.SemaphoreSecurity.AccessRightType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AccessRightType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AccessRightType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AccessRightType : Type" Usage="System.Security.AccessControl.SemaphoreSecurity.AccessRightType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> クラスでアクセス権を表すために使用する列挙体を取得します。</summary>
        <value><see cref="T:System.Type" /> 列挙体を表す <see cref="T:System.Security.AccessControl.SemaphoreRights" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.ObjectSecurity> クラスから派生するクラスは、<xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A> プロパティをオーバーライドし、アクセス権を表すために使用する型を返します。 複数の種類のセキュリティオブジェクトを含む配列またはコレクションを使用する場合は、このプロパティを使用して、各セキュリティオブジェクトで使用する適切な列挙型を決定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessRuleFactory">
      <MemberSignature Language="C#" Value="public override System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.AccessControl.AccessRule AccessRuleFactory(class System.Security.Principal.IdentityReference identityReference, int32 accessMask, bool isInherited, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::AccessControl::AccessRule ^ AccessRuleFactory(System::Security::Principal::IdentityReference ^ identityReference, int accessMask, bool isInherited, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="override this.AccessRuleFactory : System.Security.Principal.IdentityReference * int * bool * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.AccessRule" Usage="semaphoreSecurity.AccessRuleFactory (identityReference, accessMask, isInherited, inheritanceFlags, propagationFlags, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AccessRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityReference" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="isInherited" Type="System.Boolean" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identityReference">規則の適用対象となるユーザーまたはグループを識別する <see cref="T:System.Security.Principal.IdentityReference" />。</param>
        <param name="accessMask">許可または拒否するアクセス権を指定し、整数にキャストされる <see cref="T:System.Security.AccessControl.SemaphoreRights" /> 値のビットごとの組み合わせ。</param>
        <param name="isInherited">名前付きセマフォには階層構造がないため何の効果もありません。</param>
        <param name="inheritanceFlags">名前付きセマフォには階層構造がないため何の効果もありません。</param>
        <param name="propagationFlags">名前付きセマフォには階層構造がないため何の効果もありません。</param>
        <param name="type">アクセス権が許可されているかどうかを指定する <see cref="T:System.Security.AccessControl.AccessControlType" /> 値の 1 つ。</param>
        <summary>アクセス権、アクセス制御、およびフラグを指定して、指定したユーザーに対して新しいアクセス制御規則を作成します。</summary>
        <returns>指定したユーザーの指定した権限を表す <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アクセス制御規則を作成するには、<xref:System.Security.AccessControl.SemaphoreAccessRule> クラスのコンストラクターを使用することをお勧めします。  
  
> [!NOTE]
>  継承と反映フラグは名前付きセマフォには意味がありませんが、規則の組み合わせに干渉するなどして、ルールのメンテナンスが不必要に複雑になるため、これを指定することはできません。それ以外の場合は互換性があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="accessMask" />、<paramref name="inheritanceFlags" />、<paramref name="propagationFlags" />、または <paramref name="type" /> に無効な値が指定されています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="identityReference" /> は <see langword="null" /> です。  
  
または 
 <paramref name="accessMask" /> が 0 です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identityReference" /> が <see cref="T:System.Security.Principal.SecurityIdentifier" /> 型ではなく、<see cref="T:System.Security.Principal.NTAccount" /> 型に変換できる <see cref="T:System.Security.Principal.SecurityIdentifier" /> などの型でもありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="AccessRuleType">
      <MemberSignature Language="C#" Value="public override Type AccessRuleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AccessRuleType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.SemaphoreSecurity.AccessRuleType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AccessRuleType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AccessRuleType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AccessRuleType : Type" Usage="System.Security.AccessControl.SemaphoreSecurity.AccessRuleType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> クラスでアクセス規則を表すために使用する型を取得します。</summary>
        <value><see cref="T:System.Type" /> クラスを表す <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.ObjectSecurity> クラスから派生するクラスは、<xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A> プロパティをオーバーライドし、アクセス規則を表すために使用する型を返します。 複数の種類のセキュリティオブジェクトを含む配列またはコレクションを操作する場合は、このプロパティを使用して、各セキュリティオブジェクトで使用する適切なアクセス規則の種類を決定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAccessRule">
      <MemberSignature Language="C#" Value="public void AddAccessRule (System.Security.AccessControl.SemaphoreAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAccessRule(class System.Security.AccessControl.SemaphoreAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.AddAccessRule(System.Security.AccessControl.SemaphoreAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAccessRule (rule As SemaphoreAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAccessRule(System::Security::AccessControl::SemaphoreAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.AddAccessRule : System.Security.AccessControl.SemaphoreAccessRule -&gt; unit" Usage="semaphoreSecurity.AddAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">追加するアクセス制御規則。</param>
        <summary>新しい規則をマージできる、一致する規則を検索します。 見つからない場合は、新しい規則を追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.SemaphoreSecurity.AddAccessRule%2A> メソッドは、同じユーザーまたはグループを持つ規則、および `rule`と同じ <xref:System.Security.AccessControl.AccessControlType> を検索します。 何も見つからない場合は、`rule` が追加されます。 照合ルールが見つかった場合は、`rule` の権限が既存のルールとマージされます。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Security.AccessControl.AccessControlType.Allow> ルールと <xref:System.Security.AccessControl.AccessControlType.Deny> ルールの分離を示し、互換性のあるルールでの権限の組み合わせを示しています。 この例では、<xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトを作成し、現在のユーザーに対してさまざまな権限を許可および拒否する規則を追加し、結果として得られる規則のペアを表示します。 この例では、現在のユーザーに対して新しい権限を許可し、その結果を表示して、新しい権限が既存の <xref:System.Security.AccessControl.AccessControlType.Allow> ルールとマージされていることを示します。  
  
> [!NOTE]
>  この例では、<xref:System.Threading.Semaphore> オブジェクトにセキュリティオブジェクトをアタッチしません。 セキュリティオブジェクトをアタッチする例については、<xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> と <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>を参照してください。  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddAuditRule">
      <MemberSignature Language="C#" Value="public void AddAuditRule (System.Security.AccessControl.SemaphoreAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAuditRule(class System.Security.AccessControl.SemaphoreAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.AddAuditRule(System.Security.AccessControl.SemaphoreAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAuditRule (rule As SemaphoreAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAuditRule(System::Security::AccessControl::SemaphoreAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.AddAuditRule : System.Security.AccessControl.SemaphoreAuditRule -&gt; unit" Usage="semaphoreSecurity.AddAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">追加する監査規則。 この規則に指定されているユーザーに基づいて検索されます。</param>
        <summary>新しい規則をマージできる監査規則を検索します。 見つからない場合は、新しい規則を追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.SemaphoreSecurity.AddAuditRule%2A> メソッドは、`rule`と同じユーザーまたはグループを持つルールを検索します。 何も見つからない場合は、`rule` が追加されます。 照合ルールが見つかった場合、`rule` 内のフラグが既存のルールにマージされます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AuditRuleFactory">
      <MemberSignature Language="C#" Value="public override System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.AccessControl.AuditRule AuditRuleFactory(class System.Security.Principal.IdentityReference identityReference, int32 accessMask, bool isInherited, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AuditFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::AccessControl::AuditRule ^ AuditRuleFactory(System::Security::Principal::IdentityReference ^ identityReference, int accessMask, bool isInherited, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AuditFlags flags);" />
      <MemberSignature Language="F#" Value="override this.AuditRuleFactory : System.Security.Principal.IdentityReference * int * bool * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AuditFlags -&gt; System.Security.AccessControl.AuditRule" Usage="semaphoreSecurity.AuditRuleFactory (identityReference, accessMask, isInherited, inheritanceFlags, propagationFlags, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AuditRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityReference" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="isInherited" Type="System.Boolean" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="flags" Type="System.Security.AccessControl.AuditFlags" />
      </Parameters>
      <Docs>
        <param name="identityReference">規則の適用対象となるユーザーまたはグループを識別する <see cref="T:System.Security.Principal.IdentityReference" />。</param>
        <param name="accessMask">監査するアクセス権を指定し、整数にキャストされる <see cref="T:System.Security.AccessControl.SemaphoreRights" /> 値のビットごとの組み合わせ。</param>
        <param name="isInherited">名前付き待機ハンドルには階層構造がないため何の効果もありません。</param>
        <param name="inheritanceFlags">名前付き待機ハンドルには階層構造がないため何の効果もありません。</param>
        <param name="propagationFlags">名前付き待機ハンドルには階層構造がないため何の効果もありません。</param>
        <param name="flags">成功したアクセス、失敗したアクセス、またはその両方のいずれを監査するかを示す <see cref="T:System.Security.AccessControl.AuditFlags" /> 値のビットごとの組み合わせ。</param>
        <summary>規則の適用対象となるユーザー、監査するアクセス権、および監査規則を発生させる結果を指定して、新しい監査規則を作成します。</summary>
        <returns>指定したユーザーの指定した監査規則を表す <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" /> オブジェクト。 メソッドの戻り値は基本クラス <see cref="T:System.Security.AccessControl.AuditRule" /> です。ただし、この戻り値を派生クラスに安全にキャストできます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 監査規則を作成するには、<xref:System.Security.AccessControl.SemaphoreAuditRule> クラスのコンストラクターを使用することをお勧めします。  
  
> [!NOTE]
>  継承と反映フラグは名前付きセマフォでは無意味ですが、指定することもできます。 これは推奨されません。これは、ルールのメンテナンスを不必要に複雑にするためです。これは、それ以外の場合は互換性があるルールの組み合わせに干渉するからです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="accessMask" />、<paramref name="inheritanceFlags" />、<paramref name="propagationFlags" />、または <paramref name="flags" /> に無効な値が指定されています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="identityReference" /> は <see langword="null" /> です。  
  
または 
 <paramref name="accessMask" /> が 0 です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identityReference" /> が <see cref="T:System.Security.Principal.SecurityIdentifier" /> 型ではなく、<see cref="T:System.Security.Principal.NTAccount" /> 型に変換できる <see cref="T:System.Security.Principal.SecurityIdentifier" /> などの型でもありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="AuditRuleType">
      <MemberSignature Language="C#" Value="public override Type AuditRuleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AuditRuleType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.SemaphoreSecurity.AuditRuleType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AuditRuleType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AuditRuleType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AuditRuleType : Type" Usage="System.Security.AccessControl.SemaphoreSecurity.AuditRuleType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> クラスで監査規則を表すために使用する型を取得します。</summary>
        <value><see cref="T:System.Type" /> クラスを表す <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.ObjectSecurity> クラスから派生するクラスは、<xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A> プロパティをオーバーライドし、監査権限を表すために使用する型を返します。 複数の種類のセキュリティオブジェクトを含む配列またはコレクションを操作する場合は、このプロパティを使用して、各セキュリティオブジェクトで使用する適切な監査規則の種類を決定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRule">
      <MemberSignature Language="C#" Value="public bool RemoveAccessRule (System.Security.AccessControl.SemaphoreAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAccessRule(class System.Security.AccessControl.SemaphoreAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule(System.Security.AccessControl.SemaphoreAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAccessRule (rule As SemaphoreAccessRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveAccessRule(System::Security::AccessControl::SemaphoreAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAccessRule : System.Security.AccessControl.SemaphoreAccessRule -&gt; bool" Usage="semaphoreSecurity.RemoveAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">検索対象のユーザーと <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" />、および一致する規則が見つかった場合にその規則と互換性のある継承フラグと反映フラグのセットを指定する <see cref="T:System.Security.AccessControl.AccessControlType" />。 互換性のある規則が見つかった場合にその規則から削除する権限を指定します。</param>
        <summary>指定した規則と同じユーザーと <see cref="T:System.Security.AccessControl.AccessControlType" /> (許可または拒否)、および互換性のある継承フラグと反映フラグが指定されたアクセス制御規則が検索されます。このような規則が見つかると、指定したアクセス規則に含まれる権限がその規則から削除されます。</summary>
        <returns>互換性のある規則が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在の <xref:System.Security.AccessControl.SemaphoreSecurity> は、同じユーザーと `rule`と同じ <xref:System.Security.AccessControl.AccessControlType> 値を持つルールを検索します。 このようなルールが見つからない場合、アクションは実行されず、メソッドは `false`を返します。 一致規則が見つかった場合は、その継承と互換性フラグが `rule`で指定されたフラグとの互換性をチェックされます。 互換性のある規則が見つからない場合、アクションは実行されず、メソッドは `false`を返します。 互換性のあるフラグを持つ規則が見つかった場合は、`rule` で指定された権限が互換性のあるルールから削除され、メソッドが `true`を返します。 互換性のある規則に含まれていない権限が `rule` 指定されている場合は、それらの権限に関して何も行われません。 すべての権限が互換性のあるルールから削除されると、ルール全体が現在の <xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトから削除されます。  
  
> [!IMPORTANT]
>  セマフォアクセス規則の継承フラグと反映フラグは、<xref:System.Security.AccessControl.SemaphoreSecurity.AccessRuleFactory%2A> メソッドを使用して作成することによって指定できますが、この方法はお勧めしません。 継承と伝達は名前付きセマフォには意味がなく、アクセス規則の保守がより複雑になります。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule%2A> メソッドを使用して、<xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトの <xref:System.Security.AccessControl.AccessControlType.Allow> ルールから権限を削除する方法を示します。 また、`rule` の他の権限が無視されることも示しています。  
  
 この例では、<xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトを作成し、現在のユーザーに対してさまざまな権限を許可および拒否するルールを追加します。 許可される権限には、<xref:System.Security.AccessControl.SemaphoreRights.Modify>、<xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions>、および <xref:System.Security.AccessControl.SemaphoreRights.Synchronize>があります。 次に、<xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions> および <xref:System.Security.AccessControl.SemaphoreRights.TakeOwnership> 権限を含む現在のユーザーに対する新しいルールを作成し、そのルールを <xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule%2A> メソッドと共に使用して、<xref:System.Security.AccessControl.AccessControlType.Allow> オブジェクトの <xref:System.Security.AccessControl.SemaphoreSecurity> ルールから <xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions> を削除します。 `rule` 内の余分な <xref:System.Security.AccessControl.SemaphoreRights.TakeOwnership> 権限は無視されます。  
  
> [!NOTE]
>  この例では、<xref:System.Threading.Semaphore> オブジェクトにセキュリティオブジェクトをアタッチしません。 セキュリティオブジェクトをアタッチする例については、<xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> と <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>を参照してください。  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRuleAll">
      <MemberSignature Language="C#" Value="public void RemoveAccessRuleAll (System.Security.AccessControl.SemaphoreAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAccessRuleAll(class System.Security.AccessControl.SemaphoreAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll(System.Security.AccessControl.SemaphoreAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAccessRuleAll (rule As SemaphoreAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAccessRuleAll(System::Security::AccessControl::SemaphoreAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAccessRuleAll : System.Security.AccessControl.SemaphoreAccessRule -&gt; unit" Usage="semaphoreSecurity.RemoveAccessRuleAll rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">検索対象のユーザーと <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> を指定する <see cref="T:System.Security.AccessControl.AccessControlType" />。 この規則によって指定された権限はすべて無視されます。</param>
        <summary>指定した規則と同じユーザーおよび同じ <see cref="T:System.Security.AccessControl.AccessControlType" /> (許可または拒否) が指定されたアクセス制御規則をすべて検索し、一致する規則が見つかった場合は、その規則を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在の <xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトは、同じユーザーと `rule`と同じ <xref:System.Security.AccessControl.AccessControlType> 値を持つルールを検索します。 `rule` によって指定された権限は、この検索を実行するときに無視されます。 一致するルールが見つからない場合は、何も実行されません。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll%2A> メソッドによって、ユーザーと <xref:System.Security.AccessControl.AccessControlType>に一致するすべての規則が削除され、権限が無視されることを示しています。  
  
 この例では、<xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトを作成し、現在のユーザーに対してさまざまな権限を許可および拒否するルールを追加した後、追加の権限を <xref:System.Security.AccessControl.AccessControlType.Allow> ルールにマージします。 この例では、現在のユーザーが所有権を取得できるようにする新しい規則を作成し、その規則を使用して、<xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトから <xref:System.Security.AccessControl.AccessControlType.Allow> の規則を削除します。  
  
> [!NOTE]
>  この例では、<xref:System.Threading.Semaphore> オブジェクトにセキュリティオブジェクトをアタッチしません。 セキュリティオブジェクトをアタッチする例については、<xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> と <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>を参照してください。  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRuleSpecific">
      <MemberSignature Language="C#" Value="public void RemoveAccessRuleSpecific (System.Security.AccessControl.SemaphoreAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAccessRuleSpecific(class System.Security.AccessControl.SemaphoreAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.SemaphoreAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAccessRuleSpecific (rule As SemaphoreAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAccessRuleSpecific(System::Security::AccessControl::SemaphoreAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAccessRuleSpecific : System.Security.AccessControl.SemaphoreAccessRule -&gt; unit" Usage="semaphoreSecurity.RemoveAccessRuleSpecific rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">削除する <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" />。</param>
        <summary>指定した規則に正確に一致するアクセス制御規則を検索し、見つかった場合は、その規則を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ルールが削除されるのは、フラグを含むすべての詳細の `rule` に完全に一致する場合のみです。 同じユーザーおよび <xref:System.Security.AccessControl.AccessControlType> を持つその他の規則は影響を受けません。  
  
> [!IMPORTANT]
>  規則は1つ以上の基になるアクセス制御エントリ (ACE) を表します。これらのエントリは、ユーザーのアクセスセキュリティ規則を変更するときに、必要に応じて分割または結合されます。 そのため、ルールは、追加されたときの特定の形式には存在しなくなった可能性があります。その場合、<xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific%2A> メソッドで削除することはできません。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific%2A> メソッドが規則を削除するために完全に一致する必要があり、権限と拒否の権限が互いに独立していることを示しています。  
  
 この例では、<xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトを作成し、現在のユーザーに対してさまざまな権限を許可および拒否する規則を追加して、<xref:System.Security.AccessControl.AccessControlType.Allow> アクセス規則に追加の権限をマージします。 次に、元の <xref:System.Security.AccessControl.AccessControlType.Allow> 規則を <xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific%2A> メソッドに渡し、結果を表示して、何も削除されていないことを示します。 次に、<xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトの <xref:System.Security.AccessControl.AccessControlType.Allow> 規則に一致する規則を作成し、<xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific%2A> メソッドを使用して規則を削除します。  
  
> [!NOTE]
>  この例では、<xref:System.Threading.Semaphore> オブジェクトにセキュリティオブジェクトをアタッチしません。 セキュリティオブジェクトをアタッチする例については、<xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> と <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>を参照してください。  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRule">
      <MemberSignature Language="C#" Value="public bool RemoveAuditRule (System.Security.AccessControl.SemaphoreAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAuditRule(class System.Security.AccessControl.SemaphoreAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRule(System.Security.AccessControl.SemaphoreAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAuditRule (rule As SemaphoreAuditRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveAuditRule(System::Security::AccessControl::SemaphoreAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAuditRule : System.Security.AccessControl.SemaphoreAuditRule -&gt; bool" Usage="semaphoreSecurity.RemoveAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">検索対象のユーザー、および一致する規則がある場合にその規則と互換性のある継承フラグと反映フラグのセットを指定する <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" />。 互換性のある規則が見つかった場合にその規則から削除する権限を指定します。</param>
        <summary>指定した規則と同じユーザー、および互換性のある継承フラグと反映フラグが指定された監査制御規則が検索されます。互換性のある規則が見つかると、指定した規則に含まれる権限がその規則から削除されます。</summary>
        <returns>互換性のある規則が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在の <xref:System.Security.AccessControl.SemaphoreSecurity> は、`rule`と同じユーザーを持つ監査規則を検索します。 このようなルールが見つからない場合、アクションは実行されず、メソッドは `false`を返します。 一致規則が見つかった場合は、その継承と互換性フラグが `rule`で指定されたフラグとの互換性をチェックされます。 互換性のある規則が見つからない場合、アクションは実行されず、メソッドは `false`を返します。 互換性のあるフラグを持つ規則が見つかった場合は、`rule` で指定された権限が互換性のあるルールから削除され、メソッドが `true`を返します。 互換性のある規則に含まれていない権限が `rule` 指定されている場合は、それらの権限に関して何も行われません。 すべての権限が互換性のあるルールから削除されると、ルール全体が現在の <xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトから削除されます。  
  
> [!IMPORTANT]
>  セマフォ監査規則の継承フラグと反映フラグは、<xref:System.Security.AccessControl.SemaphoreSecurity.AuditRuleFactory%2A> メソッドを使用して作成することによって指定できますが、この方法はお勧めしません。 継承と伝達は名前付きセマフォには意味がないため、監査規則のメンテナンスがより複雑になります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRuleAll">
      <MemberSignature Language="C#" Value="public void RemoveAuditRuleAll (System.Security.AccessControl.SemaphoreAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAuditRuleAll(class System.Security.AccessControl.SemaphoreAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleAll(System.Security.AccessControl.SemaphoreAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAuditRuleAll (rule As SemaphoreAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAuditRuleAll(System::Security::AccessControl::SemaphoreAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAuditRuleAll : System.Security.AccessControl.SemaphoreAuditRule -&gt; unit" Usage="semaphoreSecurity.RemoveAuditRuleAll rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">検索対象のユーザーを指定する <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" />。 この規則によって指定された権限はすべて無視されます。</param>
        <summary>指定した規則と同じユーザーが設定されているすべての監査規則を検索し、見つかった場合はそれらの規則を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在の <xref:System.Security.AccessControl.SemaphoreSecurity> は、`rule`と同じユーザーを持つ監査規則を検索します。 `rule` によって指定された権限は、この検索を実行するときに無視されます。 すべての照合ルールが削除されます。 一致するルールが見つからない場合は、何も実行されません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRuleSpecific">
      <MemberSignature Language="C#" Value="public void RemoveAuditRuleSpecific (System.Security.AccessControl.SemaphoreAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAuditRuleSpecific(class System.Security.AccessControl.SemaphoreAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.SemaphoreAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAuditRuleSpecific (rule As SemaphoreAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAuditRuleSpecific(System::Security::AccessControl::SemaphoreAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAuditRuleSpecific : System.Security.AccessControl.SemaphoreAuditRule -&gt; unit" Usage="semaphoreSecurity.RemoveAuditRuleSpecific rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">削除する <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" />。</param>
        <summary>指定した規則に正確に一致する監査規則を検索し、見つかった場合は、その規則を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ルールが削除されるのは、フラグを含むすべての詳細の `rule` に完全に一致する場合のみです。 同じユーザーのその他の監査規則は影響を受けません。  
  
> [!IMPORTANT]
>  規則は1つ以上の基になるアクセス制御エントリ (ACE) を表します。これらのエントリは、ユーザーの監査セキュリティ規則を変更するときに、必要に応じて分割または結合されます。 そのため、ルールは、追加されたときの特定の形式には存在しなくなった可能性があります。その場合、<xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleSpecific%2A> メソッドで削除することはできません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ResetAccessRule">
      <MemberSignature Language="C#" Value="public void ResetAccessRule (System.Security.AccessControl.SemaphoreAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetAccessRule(class System.Security.AccessControl.SemaphoreAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule(System.Security.AccessControl.SemaphoreAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetAccessRule (rule As SemaphoreAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetAccessRule(System::Security::AccessControl::SemaphoreAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.ResetAccessRule : System.Security.AccessControl.SemaphoreAccessRule -&gt; unit" Usage="semaphoreSecurity.ResetAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">追加する <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" />。 この規則で指定されたユーザーによって、この規則を追加する前に削除する規則が判断されます。</param>
        <summary><see cref="T:System.Security.AccessControl.AccessControlType" /> に関係なく、指定した規則と同じユーザーが指定されたすべてのアクセス制御規則を削除し、指定した規則を追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザーが指定した規則に一致するアクセス規則がない場合は、`rule` が追加されます。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule%2A> メソッドによって、一致するユーザーのすべての規則が一致に対して指定された規則と置き換えられます。  
  
 この例では、<xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトを作成し、現在のユーザーに対してさまざまな権限を許可および拒否するルールを追加します。 この例では、現在のユーザーにフルコントロールを許可する新しいルールを作成し、<xref:System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule%2A> メソッドを使用して、既存のルールを両方とも新しいルールに置き換えます。  
  
> [!NOTE]
>  この例では、<xref:System.Threading.Semaphore> オブジェクトにセキュリティオブジェクトをアタッチしません。 セキュリティオブジェクトをアタッチする例については、<xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> と <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>を参照してください。  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.ResetAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.ResetAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAccessRule">
      <MemberSignature Language="C#" Value="public void SetAccessRule (System.Security.AccessControl.SemaphoreAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessRule(class System.Security.AccessControl.SemaphoreAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.SetAccessRule(System.Security.AccessControl.SemaphoreAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAccessRule (rule As SemaphoreAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAccessRule(System::Security::AccessControl::SemaphoreAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.SetAccessRule : System.Security.AccessControl.SemaphoreAccessRule -&gt; unit" Usage="semaphoreSecurity.SetAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">追加する <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" />。 この規則のユーザーと <see cref="T:System.Security.AccessControl.AccessControlType" /> によって、この規則を追加する前に削除する規則が判断されます。</param>
        <summary>指定した規則と同じユーザーおよび同じ <see cref="T:System.Security.AccessControl.AccessControlType" /> (許可または拒否) が指定されたすべてのアクセス制御規則を削除し、指定した規則を追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定した規則に <xref:System.Security.AccessControl.AccessControlType.Allow>がある場合、このメソッドの効果は、指定されたユーザーのすべての <xref:System.Security.AccessControl.AccessControlType.Allow> 規則を削除し、指定した規則に置き換えることになります。 指定した規則に <xref:System.Security.AccessControl.AccessControlType.Deny>がある場合は、指定したユーザーのすべての <xref:System.Security.AccessControl.AccessControlType.Deny> 規則が指定した規則に置き換えられます。  
  
 指定した規則にユーザーと <xref:System.Security.AccessControl.AccessControlType> が一致する規則がない場合は、`rule` が追加されます。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Security.AccessControl.SemaphoreSecurity.SetAccessRule%2A> メソッドによって、`rule`のユーザーと <xref:System.Security.AccessControl.AccessControlType> の両方に一致するすべての規則が削除され、`rule`で置き換えられます。  
  
 この例では、<xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトを作成し、現在のユーザーに対してさまざまな権限を許可および拒否するルールを追加します。 この例では、現在のユーザーにフルコントロールを許可する新しい規則を作成し、<xref:System.Security.AccessControl.SemaphoreSecurity.SetAccessRule%2A> メソッドを使用して既存の許可規則を新しい規則に置き換えます。 アクセスを拒否する規則は影響を受けません。  
  
> [!NOTE]
>  この例では、<xref:System.Threading.Semaphore> オブジェクトにセキュリティオブジェクトをアタッチしません。 セキュリティオブジェクトをアタッチする例については、<xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> と <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>を参照してください。  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.SetAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.SetAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.SetAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.SetAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAuditRule">
      <MemberSignature Language="C#" Value="public void SetAuditRule (System.Security.AccessControl.SemaphoreAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAuditRule(class System.Security.AccessControl.SemaphoreAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.SetAuditRule(System.Security.AccessControl.SemaphoreAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAuditRule (rule As SemaphoreAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAuditRule(System::Security::AccessControl::SemaphoreAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.SetAuditRule : System.Security.AccessControl.SemaphoreAuditRule -&gt; unit" Usage="semaphoreSecurity.SetAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">追加する <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" />。 この規則で指定されたユーザーによって、この規則を追加する前に削除する規則が判断されます。</param>
        <summary><see cref="T:System.Security.AccessControl.AuditFlags" /> 値に関係なく、指定した規則と同じユーザーが指定されたすべての監査規則を削除し、指定した規則を追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザーが指定した規則に一致する監査規則がない場合は、`rule` が追加されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
