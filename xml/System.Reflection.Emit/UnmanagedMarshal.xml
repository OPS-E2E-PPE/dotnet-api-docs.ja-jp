<Type Name="UnmanagedMarshal" FullName="System.Reflection.Emit.UnmanagedMarshal">
  <Metadata><Meta Name="ms.openlocfilehash" Value="48ecae6a28699fd3799fcbab3732633fd2317a51" /><Meta Name="ms.sourcegitcommit" Value="367e1eae0725e6da7136cd073aaa856ded5d5c29" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/13/2019" /><Meta Name="ms.locfileid" Value="75026275" /></Metadata><TypeSignature Language="C#" Value="public sealed class UnmanagedMarshal" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit UnmanagedMarshal extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.UnmanagedMarshal" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class UnmanagedMarshal" />
  <TypeSignature Language="C++ CLI" Value="public ref class UnmanagedMarshal sealed" />
  <TypeSignature Language="F#" Value="type UnmanagedMarshal = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinmac-3.0">
      <AttributeName>System.Obsolete("An alternate API is available: Emit the MarshalAs custom attribute instead.")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Obsolete("An alternate API is available: Emit the MarshalAs custom attribute instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="10d18-101">マネージド コードからアンマネージド コードにフィールドをマーシャリングする方法を記述するクラスを表します。</span><span class="sxs-lookup"><span data-stu-id="10d18-101">Represents the class that describes how to marshal a field from managed to unmanaged code.</span></span> <span data-ttu-id="10d18-102">このクラスは継承できません。</span><span class="sxs-lookup"><span data-stu-id="10d18-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d18-103">このコード例は、この旧式の型の回避策を示しています。</span><span class="sxs-lookup"><span data-stu-id="10d18-103">The code example shows the workaround for this obsolete type.</span></span>  
  
 <span data-ttu-id="10d18-104">マーシャリングは、リモートプロシージャコールが発生するようにパラメーターをパッケージ化して unpackaging するプロセスです。</span><span class="sxs-lookup"><span data-stu-id="10d18-104">Marshaling is the process of packaging and unpackaging parameters so remote procedure calls can occur.</span></span> <span data-ttu-id="10d18-105">マーシャリング中、マネージ型の形式が対応するアンマネージ型の形式と異なる場合、フィールドの形式が変換されることがあります。</span><span class="sxs-lookup"><span data-stu-id="10d18-105">During marshaling, a field might undergo a format conversion when the format of the managed type is different from the format of the corresponding unmanaged type.</span></span> <span data-ttu-id="10d18-106">たとえば、`String` 型をアンマネージ BSTR としてマーシャリングすることができます。</span><span class="sxs-lookup"><span data-stu-id="10d18-106">For example, you might want to marshal a `String` type as an unmanaged BSTR.</span></span> <span data-ttu-id="10d18-107">一部の形式変換は、ランタイムによって自動的に処理されます。</span><span class="sxs-lookup"><span data-stu-id="10d18-107">Some format conversions are handled automatically by the runtime.</span></span> <span data-ttu-id="10d18-108">既定の動作をオーバーライドするには、`UnmanagedMarshal` クラスを使用して、形式変換を定義する必要があります。</span><span class="sxs-lookup"><span data-stu-id="10d18-108">To override the default behavior, you must use the `UnmanagedMarshal` class to define the format conversion.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d18-109">次のコード例は、廃止された <xref:System.Reflection.Emit.UnmanagedMarshal> 型の置換コードを示しています。</span><span class="sxs-lookup"><span data-stu-id="10d18-109">The following code example shows replacement code for the obsolete <xref:System.Reflection.Emit.UnmanagedMarshal> type.</span></span> <span data-ttu-id="10d18-110">この例では、`Sample`という名前の型を含む、`EmitMarshalAs.dll`という名前の単一モジュールアセンブリを出力します。</span><span class="sxs-lookup"><span data-stu-id="10d18-110">The example emits a single-module assembly named `EmitMarshalAs.dll`, containing a type named `Sample`.</span></span> <span data-ttu-id="10d18-111">型には `Test`という名前のメソッドがあり、<xref:System.String>型のパラメーターが1つあります。</span><span class="sxs-lookup"><span data-stu-id="10d18-111">The type has a method named `Test`, with one parameter of type <xref:System.String>.</span></span> <span data-ttu-id="10d18-112">このコード例では、<xref:System.Runtime.InteropServices.UnmanagedType.BStr?displayProperty=nameWithType> を持つ <xref:System.Runtime.InteropServices.MarshalAsAttribute> をパラメーターに適用します。</span><span class="sxs-lookup"><span data-stu-id="10d18-112">The code example applies the <xref:System.Runtime.InteropServices.MarshalAsAttribute> with <xref:System.Runtime.InteropServices.UnmanagedType.BStr?displayProperty=nameWithType> to the parameter.</span></span>  
  
 <span data-ttu-id="10d18-113">[Ildasm.exe (IL 逆アセンブラー)](~/docs/framework/tools/ildasm-exe-il-disassembler.md)を使用して、出力されたアセンブリを調べ、パラメーターが `marshal(bstr)`としてマークされていることを確認できます。</span><span class="sxs-lookup"><span data-stu-id="10d18-113">You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the emitted assembly and observe that the parameter is marked `marshal(bstr)`.</span></span>  
  
 [!code-cpp[UnmanagedMarshalObsolete#1](~/samples/snippets/cpp/VS_Snippets_CLR/UnmanagedMarshalObsolete/cpp/source.cpp#1)]
 [!code-csharp[UnmanagedMarshalObsolete#1](~/samples/snippets/csharp/VS_Snippets_CLR/UnmanagedMarshalObsolete/cs/source.cs#1)]
 [!code-vb[UnmanagedMarshalObsolete#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/UnmanagedMarshalObsolete/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Type" />
    <altmember cref="T:System.Runtime.InteropServices.UnmanagedType" />
    <altmember cref="T:System.Guid" />
  </Docs>
  <Members>
    <Member MemberName="BaseType">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.UnmanagedType BaseType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Runtime.InteropServices.UnmanagedType BaseType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.UnmanagedMarshal.BaseType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseType As UnmanagedType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::InteropServices::UnmanagedType BaseType { System::Runtime::InteropServices::UnmanagedType get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseType : System.Runtime.InteropServices.UnmanagedType" Usage="System.Reflection.Emit.UnmanagedMarshal.BaseType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.UnmanagedType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="10d18-114">アンマネージ基本型を取得します。</span><span class="sxs-lookup"><span data-stu-id="10d18-114">Gets an unmanaged base type.</span></span> <span data-ttu-id="10d18-115">このプロパティは読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="10d18-115">This property is read-only.</span></span></summary>
        <value><span data-ttu-id="10d18-116"><see langword="UnmanagedType" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="10d18-116">An <see langword="UnmanagedType" /> object.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d18-117">アンマネージ型が <see langword="LPArray" /> または <see langword="SafeArray" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="10d18-117">The unmanaged type is not an <see langword="LPArray" /> or a <see langword="SafeArray" />.</span></span></exception>
        <altmember cref="T:System.Runtime.InteropServices.UnmanagedType" />
      </Docs>
    </Member>
    <Member MemberName="DefineByValArray">
      <MemberSignature Language="C#" Value="public static System.Reflection.Emit.UnmanagedMarshal DefineByValArray (int elemCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Emit.UnmanagedMarshal DefineByValArray(int32 elemCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DefineByValArray (elemCount As Integer) As UnmanagedMarshal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Emit::UnmanagedMarshal ^ DefineByValArray(int elemCount);" />
      <MemberSignature Language="F#" Value="static member DefineByValArray : int -&gt; System.Reflection.Emit.UnmanagedMarshal" Usage="System.Reflection.Emit.UnmanagedMarshal.DefineByValArray elemCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.UnmanagedMarshal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elemCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="elemCount"><span data-ttu-id="10d18-118">固定長の配列の要素数。</span><span class="sxs-lookup"><span data-stu-id="10d18-118">The number of elements in the fixed-length array.</span></span></param>
        <summary><span data-ttu-id="10d18-119">アンマネージ コードにマーシャリングする固定長の配列 (ByValArray) を指定します。</span><span class="sxs-lookup"><span data-stu-id="10d18-119">Specifies a fixed-length array (ByValArray) to marshal to unmanaged code.</span></span></summary>
        <returns><span data-ttu-id="10d18-120"><see cref="T:System.Reflection.Emit.UnmanagedMarshal" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="10d18-120">An <see cref="T:System.Reflection.Emit.UnmanagedMarshal" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d18-121">`DefineByValArray` メソッドは、単純なネイティブマーシャリングではありません。</span><span class="sxs-lookup"><span data-stu-id="10d18-121">The `DefineByValArray` method is not a simple native marshal.</span></span>  
  
 <span data-ttu-id="10d18-122">これらの静的コンストラクターを使用して作成できるのはアンマネージマーシャリングコンストラクトだけです。</span><span class="sxs-lookup"><span data-stu-id="10d18-122">Only unmanaged marshal constructs can be made using these static constructors.</span></span>  
  
 <span data-ttu-id="10d18-123">配列のマーシャリングは、整数のパラメーターをマーシャリングするよりも複雑なプロセスです。</span><span class="sxs-lookup"><span data-stu-id="10d18-123">Marshaling an array is a more complex process than marshaling an integer parameter.</span></span> <span data-ttu-id="10d18-124">配列のメンバーは特定の順序でコピーされるため、もう一方の側が配列を正確に再構築できます。</span><span class="sxs-lookup"><span data-stu-id="10d18-124">Array members are copied in a specific order so that the other side can reconstruct the array exactly.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d18-125">引数が単純なネイティブ型ではありません。</span><span class="sxs-lookup"><span data-stu-id="10d18-125">The argument is not a simple native type.</span></span></exception>
        <altmember cref="T:System.Runtime.InteropServices.UnmanagedType" />
      </Docs>
    </Member>
    <Member MemberName="DefineByValTStr">
      <MemberSignature Language="C#" Value="public static System.Reflection.Emit.UnmanagedMarshal DefineByValTStr (int elemCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Emit.UnmanagedMarshal DefineByValTStr(int32 elemCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DefineByValTStr (elemCount As Integer) As UnmanagedMarshal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Emit::UnmanagedMarshal ^ DefineByValTStr(int elemCount);" />
      <MemberSignature Language="F#" Value="static member DefineByValTStr : int -&gt; System.Reflection.Emit.UnmanagedMarshal" Usage="System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr elemCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.UnmanagedMarshal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elemCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="elemCount"><span data-ttu-id="10d18-126">固定長の配列バッファーの要素数。</span><span class="sxs-lookup"><span data-stu-id="10d18-126">The number of elements in the fixed array buffer.</span></span></param>
        <summary><span data-ttu-id="10d18-127">アンマネージ コードにマーシャリングする固定長の配列バッファー (ByValTStr) の文字列を指定します。</span><span class="sxs-lookup"><span data-stu-id="10d18-127">Specifies a string in a fixed array buffer (ByValTStr) to marshal to unmanaged code.</span></span></summary>
        <returns><span data-ttu-id="10d18-128"><see cref="T:System.Reflection.Emit.UnmanagedMarshal" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="10d18-128">An <see cref="T:System.Reflection.Emit.UnmanagedMarshal" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d18-129">`DefineByValStr` メソッドは、単純なネイティブマーシャリングではありません。</span><span class="sxs-lookup"><span data-stu-id="10d18-129">The `DefineByValStr` method is not a simple native marshal.</span></span>  
  
 <span data-ttu-id="10d18-130">これらの静的コンストラクターを使用して作成できるのはアンマネージマーシャリングコンストラクトだけです。</span><span class="sxs-lookup"><span data-stu-id="10d18-130">Only unmanaged marshal constructs can be made using these static constructors.</span></span>  
  
 <span data-ttu-id="10d18-131">配列のマーシャリングは、整数のパラメーターをマーシャリングするよりも複雑なプロセスです。</span><span class="sxs-lookup"><span data-stu-id="10d18-131">Marshaling an array is a more complex process than marshaling an integer parameter.</span></span> <span data-ttu-id="10d18-132">配列のメンバーは特定の順序でコピーされるため、もう一方の側が配列を正確に再構築できます。</span><span class="sxs-lookup"><span data-stu-id="10d18-132">Array members are copied in a specific order so that the other side can reconstruct the array exactly.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d18-133">引数が単純なネイティブ型ではありません。</span><span class="sxs-lookup"><span data-stu-id="10d18-133">The argument is not a simple native type.</span></span></exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Array" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Runtime.InteropServices.UnmanagedType" />
      </Docs>
    </Member>
    <Member MemberName="DefineLPArray">
      <MemberSignature Language="C#" Value="public static System.Reflection.Emit.UnmanagedMarshal DefineLPArray (System.Runtime.InteropServices.UnmanagedType elemType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Emit.UnmanagedMarshal DefineLPArray(valuetype System.Runtime.InteropServices.UnmanagedType elemType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DefineLPArray (elemType As UnmanagedType) As UnmanagedMarshal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Emit::UnmanagedMarshal ^ DefineLPArray(System::Runtime::InteropServices::UnmanagedType elemType);" />
      <MemberSignature Language="F#" Value="static member DefineLPArray : System.Runtime.InteropServices.UnmanagedType -&gt; System.Reflection.Emit.UnmanagedMarshal" Usage="System.Reflection.Emit.UnmanagedMarshal.DefineLPArray elemType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.UnmanagedMarshal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elemType" Type="System.Runtime.InteropServices.UnmanagedType" />
      </Parameters>
      <Docs>
        <param name="elemType"><span data-ttu-id="10d18-134">配列をマーシャリングする先のアンマネージ型。</span><span class="sxs-lookup"><span data-stu-id="10d18-134">The unmanaged type to which to marshal the array.</span></span></param>
        <summary><span data-ttu-id="10d18-135">アンマネージ コードにマーシャリングする <see langword="LPArray" /> を指定します。</span><span class="sxs-lookup"><span data-stu-id="10d18-135">Specifies an <see langword="LPArray" /> to marshal to unmanaged code.</span></span> <span data-ttu-id="10d18-136"><see langword="LPArray" /> の長さは、実際にマーシャリングされた配列のサイズによって実行時に決定されます。</span><span class="sxs-lookup"><span data-stu-id="10d18-136">The length of an <see langword="LPArray" /> is determined at runtime by the size of the actual marshaled array.</span></span></summary>
        <returns><span data-ttu-id="10d18-137"><see cref="T:System.Reflection.Emit.UnmanagedMarshal" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="10d18-137">An <see cref="T:System.Reflection.Emit.UnmanagedMarshal" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d18-138">`DefineLPArray` メソッドは、単純なネイティブマーシャリングではありません。</span><span class="sxs-lookup"><span data-stu-id="10d18-138">The `DefineLPArray` method is not a simple native marshal.</span></span>  
  
 <span data-ttu-id="10d18-139">これらの静的コンストラクターを使用して作成できるのはアンマネージマーシャリングコンストラクトだけです。</span><span class="sxs-lookup"><span data-stu-id="10d18-139">Only unmanaged marshal constructs can be made using these static constructors.</span></span>  
  
 <span data-ttu-id="10d18-140">配列のマーシャリングは、整数のパラメーターをマーシャリングするよりも複雑なプロセスです。</span><span class="sxs-lookup"><span data-stu-id="10d18-140">Marshaling an array is a more complex process than marshaling an integer parameter.</span></span> <span data-ttu-id="10d18-141">配列のメンバーは特定の順序でコピーされるため、もう一方の側が配列を正確に再構築できます。</span><span class="sxs-lookup"><span data-stu-id="10d18-141">Array members are copied in a specific order so that the other side can reconstruct the array exactly.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d18-142">引数が単純なネイティブ型ではありません。</span><span class="sxs-lookup"><span data-stu-id="10d18-142">The argument is not a simple native type.</span></span></exception>
        <altmember cref="T:System.Runtime.InteropServices.UnmanagedType" />
      </Docs>
    </Member>
    <Member MemberName="DefineSafeArray">
      <MemberSignature Language="C#" Value="public static System.Reflection.Emit.UnmanagedMarshal DefineSafeArray (System.Runtime.InteropServices.UnmanagedType elemType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Emit.UnmanagedMarshal DefineSafeArray(valuetype System.Runtime.InteropServices.UnmanagedType elemType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DefineSafeArray (elemType As UnmanagedType) As UnmanagedMarshal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Emit::UnmanagedMarshal ^ DefineSafeArray(System::Runtime::InteropServices::UnmanagedType elemType);" />
      <MemberSignature Language="F#" Value="static member DefineSafeArray : System.Runtime.InteropServices.UnmanagedType -&gt; System.Reflection.Emit.UnmanagedMarshal" Usage="System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray elemType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.UnmanagedMarshal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elemType" Type="System.Runtime.InteropServices.UnmanagedType" />
      </Parameters>
      <Docs>
        <param name="elemType"><span data-ttu-id="10d18-143">配列の各要素の基本型または <see langword="UnmanagedType" />。</span><span class="sxs-lookup"><span data-stu-id="10d18-143">The base type or the <see langword="UnmanagedType" /> of each element of the array.</span></span></param>
        <summary><span data-ttu-id="10d18-144">アンマネージ コードにマーシャリングする <see langword="SafeArray" /> を指定します。</span><span class="sxs-lookup"><span data-stu-id="10d18-144">Specifies a <see langword="SafeArray" /> to marshal to unmanaged code.</span></span></summary>
        <returns><span data-ttu-id="10d18-145"><see cref="T:System.Reflection.Emit.UnmanagedMarshal" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="10d18-145">An <see cref="T:System.Reflection.Emit.UnmanagedMarshal" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d18-146">`DefineSafeArray` メソッドは、単純なネイティブマーシャリングではありません。</span><span class="sxs-lookup"><span data-stu-id="10d18-146">The `DefineSafeArray` method is not a simple native marshal.</span></span>  
  
 <span data-ttu-id="10d18-147">これらの静的コンストラクターを使用して作成できるのはアンマネージマーシャリングコンストラクトだけです。</span><span class="sxs-lookup"><span data-stu-id="10d18-147">Only unmanaged marshal constructs can be made using these static constructors.</span></span>  
  
 <span data-ttu-id="10d18-148">配列のマーシャリングは、整数のパラメーターをマーシャリングするよりも複雑なプロセスです。</span><span class="sxs-lookup"><span data-stu-id="10d18-148">Marshaling an array is a more complex process than marshaling an integer parameter.</span></span> <span data-ttu-id="10d18-149">配列のメンバーは特定の順序でコピーされるため、もう一方の側が配列を正確に再構築できます。</span><span class="sxs-lookup"><span data-stu-id="10d18-149">Array members are copied in a specific order so that the other side can reconstruct the array exactly.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d18-150">引数が単純なネイティブ型ではありません。</span><span class="sxs-lookup"><span data-stu-id="10d18-150">The argument is not a simple native type.</span></span></exception>
        <altmember cref="T:System.Runtime.InteropServices.UnmanagedType" />
      </Docs>
    </Member>
    <Member MemberName="DefineUnmanagedMarshal">
      <MemberSignature Language="C#" Value="public static System.Reflection.Emit.UnmanagedMarshal DefineUnmanagedMarshal (System.Runtime.InteropServices.UnmanagedType unmanagedType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Emit.UnmanagedMarshal DefineUnmanagedMarshal(valuetype System.Runtime.InteropServices.UnmanagedType unmanagedType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Emit::UnmanagedMarshal ^ DefineUnmanagedMarshal(System::Runtime::InteropServices::UnmanagedType unmanagedType);" />
      <MemberSignature Language="F#" Value="static member DefineUnmanagedMarshal : System.Runtime.InteropServices.UnmanagedType -&gt; System.Reflection.Emit.UnmanagedMarshal" Usage="System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal unmanagedType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.UnmanagedMarshal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unmanagedType" Type="System.Runtime.InteropServices.UnmanagedType" />
      </Parameters>
      <Docs>
        <param name="unmanagedType"><span data-ttu-id="10d18-151">型をマーシャリングする先のアンマネージ型。</span><span class="sxs-lookup"><span data-stu-id="10d18-151">The unmanaged type to which the type is to be marshaled.</span></span></param>
        <summary><span data-ttu-id="10d18-152">アンマネージ コードにマーシャリングする型を指定します。</span><span class="sxs-lookup"><span data-stu-id="10d18-152">Specifies a given type that is to be marshaled to unmanaged code.</span></span></summary>
        <returns><span data-ttu-id="10d18-153"><see cref="T:System.Reflection.Emit.UnmanagedMarshal" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="10d18-153">An <see cref="T:System.Reflection.Emit.UnmanagedMarshal" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d18-154">このメソッドに渡される <xref:System.Runtime.InteropServices.UnmanagedType> は、単純なネイティブ型である必要があります。</span><span class="sxs-lookup"><span data-stu-id="10d18-154">The <xref:System.Runtime.InteropServices.UnmanagedType> passed to this method must be a simple native type.</span></span> <span data-ttu-id="10d18-155"><xref:System.Runtime.InteropServices.UnmanagedType.ByValTStr?displayProperty=nameWithType>、<xref:System.Runtime.InteropServices.UnmanagedType.SafeArray?displayProperty=nameWithType>、<xref:System.Runtime.InteropServices.UnmanagedType.ByValArray?displayProperty=nameWithType>、<xref:System.Runtime.InteropServices.UnmanagedType.LPArray?displayProperty=nameWithType>、または <xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType>のいずれの値も使用できません。</span><span class="sxs-lookup"><span data-stu-id="10d18-155">None of the following values may be used: <xref:System.Runtime.InteropServices.UnmanagedType.ByValTStr?displayProperty=nameWithType>, <xref:System.Runtime.InteropServices.UnmanagedType.SafeArray?displayProperty=nameWithType>, <xref:System.Runtime.InteropServices.UnmanagedType.ByValArray?displayProperty=nameWithType>, <xref:System.Runtime.InteropServices.UnmanagedType.LPArray?displayProperty=nameWithType>, or <xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="10d18-156">このメソッドを使用して作成できるのはアンマネージマーシャリングコンストラクトだけです。</span><span class="sxs-lookup"><span data-stu-id="10d18-156">Only unmanaged marshal constructs can be made using this method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d18-157">引数が単純なネイティブ型ではありません。</span><span class="sxs-lookup"><span data-stu-id="10d18-157">The argument is not a simple native type.</span></span></exception>
        <altmember cref="T:System.Runtime.InteropServices.UnmanagedType" />
      </Docs>
    </Member>
    <Member MemberName="ElementCount">
      <MemberSignature Language="C#" Value="public int ElementCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ElementCount" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.UnmanagedMarshal.ElementCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ElementCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ElementCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ElementCount : int" Usage="System.Reflection.Emit.UnmanagedMarshal.ElementCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="10d18-158">要素の数を取得します。</span><span class="sxs-lookup"><span data-stu-id="10d18-158">Gets a number element.</span></span> <span data-ttu-id="10d18-159">このプロパティは読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="10d18-159">This property is read-only.</span></span></summary>
        <value><span data-ttu-id="10d18-160">要素数を示す整数。</span><span class="sxs-lookup"><span data-stu-id="10d18-160">An integer indicating the element count.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d18-161">`NativeTypeFixedArray`がある場合にのみ、`ElementCount` が存在します。</span><span class="sxs-lookup"><span data-stu-id="10d18-161">There is an `ElementCount` only if there is a `NativeTypeFixedArray`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d18-162">引数がアンマネージ要素数ではありません。</span><span class="sxs-lookup"><span data-stu-id="10d18-162">The argument is not an unmanaged element count.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetUnmanagedType">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.UnmanagedType GetUnmanagedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Runtime.InteropServices.UnmanagedType GetUnmanagedType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GetUnmanagedType As UnmanagedType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::InteropServices::UnmanagedType GetUnmanagedType { System::Runtime::InteropServices::UnmanagedType get(); };" />
      <MemberSignature Language="F#" Value="member this.GetUnmanagedType : System.Runtime.InteropServices.UnmanagedType" Usage="System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.UnmanagedType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="10d18-163">アンマネージ型を示します。</span><span class="sxs-lookup"><span data-stu-id="10d18-163">Indicates an unmanaged type.</span></span> <span data-ttu-id="10d18-164">このプロパティは読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="10d18-164">This property is read-only.</span></span></summary>
        <value><span data-ttu-id="10d18-165"><see cref="T:System.Runtime.InteropServices.UnmanagedType" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="10d18-165">An <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d18-166">`GetUnmanagedType` プロパティは、ネイティブ型のアクセサー関数です。</span><span class="sxs-lookup"><span data-stu-id="10d18-166">The `GetUnmanagedType` property is an accessor function for the native type.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.UnmanagedType" />
      </Docs>
    </Member>
    <Member MemberName="IIDGuid">
      <MemberSignature Language="C#" Value="public Guid IIDGuid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid IIDGuid" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.UnmanagedMarshal.IIDGuid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IIDGuid As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Guid IIDGuid { Guid get(); };" />
      <MemberSignature Language="F#" Value="member this.IIDGuid : Guid" Usage="System.Reflection.Emit.UnmanagedMarshal.IIDGuid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="10d18-167">グローバル一意識別子 (GUID: Globally Unique Indentifier) を取得します。</span><span class="sxs-lookup"><span data-stu-id="10d18-167">Gets a GUID.</span></span> <span data-ttu-id="10d18-168">このプロパティは読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="10d18-168">This property is read-only.</span></span></summary>
        <value><span data-ttu-id="10d18-169"><see cref="T:System.Guid" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="10d18-169">A <see cref="T:System.Guid" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d18-170">このプロパティは常に Guid.empty を返します。</span><span class="sxs-lookup"><span data-stu-id="10d18-170">This property always returns Guid.Empty.</span></span> <span data-ttu-id="10d18-171">このプロパティは、今後のリリースで削除される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="10d18-171">This property might be removed in a future release.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d18-172">引数がカスタム マーシャラーではありません。</span><span class="sxs-lookup"><span data-stu-id="10d18-172">The argument is not a custom marshaler.</span></span></exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Guid" />
      </Docs>
    </Member>
  </Members>
</Type>
