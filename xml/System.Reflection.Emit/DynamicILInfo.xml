<Type Name="DynamicILInfo" FullName="System.Reflection.Emit.DynamicILInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b36d4b9386065b26cddffc141e3657286fbaf2d1" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78693479" /></Metadata><TypeSignature Language="C#" Value="public sealed class DynamicILInfo" FrameworkAlternate="netcore-3.0;netcore-3.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DynamicILInfo extends System.Object" FrameworkAlternate="netcore-3.0;netcore-3.1" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.DynamicILInfo" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DynamicILInfo" FrameworkAlternate="netcore-3.0;netcore-3.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicILInfo sealed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
  <TypeSignature Language="F#" Value="type DynamicILInfo = class" />
  <TypeSignature Language="C#" Value="public class DynamicILInfo" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DynamicILInfo extends System.Object" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinmac-3.0" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicILInfo" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicILInfo" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="5f1ad-101">トークンを作成するメソッドや、コード、例外処理、およびローカル変数のシグネチャの BLOB を挿入するメソッドなど、動的メソッドの MSIL (Microsoft Intermediate Language) とメタデータを生成する代替の方法をサポートします。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-101">Provides support for alternative ways to generate the Microsoft intermediate language (MSIL) and metadata for a dynamic method, including methods for creating tokens and for inserting the code, exception handling, and local variable signature blobs.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f1ad-102"><xref:System.Reflection.Emit.DynamicILInfo> クラスを使用すると、開発者は、<xref:System.Reflection.Emit.ILGenerator>を使用する代わりに独自の MSIL ジェネレーターを記述できます。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-102">The <xref:System.Reflection.Emit.DynamicILInfo> class allows developers to write their own MSIL generators instead of using <xref:System.Reflection.Emit.ILGenerator>.</span></span>  
  
 <span data-ttu-id="5f1ad-103">他の型のインスタンスを作成するには、メソッドを呼び出します。したがって、生成する MSIL には、これらのエンティティのトークンを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-103">To create instances of other types, call methods, and so on, the MSIL you generate must include tokens for those entities.</span></span> <span data-ttu-id="5f1ad-104"><xref:System.Reflection.Emit.DynamicILInfo> クラスは、<xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> メソッドのいくつかのオーバーロードを提供します。このメソッドは、現在の <xref:System.Reflection.Emit.DynamicILInfo>のスコープで有効なトークンを返します。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-104">The <xref:System.Reflection.Emit.DynamicILInfo> class provides several overloads of the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> method, which return tokens valid in the scope of the current <xref:System.Reflection.Emit.DynamicILInfo>.</span></span> <span data-ttu-id="5f1ad-105">たとえば、<xref:System.Console.WriteLine%2A?displayProperty=nameWithType> メソッドのオーバーロードを呼び出す必要がある場合は、そのオーバーロードの <xref:System.RuntimeMethodHandle> を取得し、それを <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> メソッドに渡して、MSIL に埋め込むトークンを取得できます。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-105">For example, if you need to call an overload of the <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> method, you can obtain a <xref:System.RuntimeMethodHandle> for that overload and pass it to the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> method to obtain a token to embed in your MSIL.</span></span>  
  
 <span data-ttu-id="5f1ad-106">ローカル変数のシグネチャ、例外、およびコード本体用に <xref:System.Byte> 配列を作成したら、<xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A>、<xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A>、および <xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A> の各メソッドを使用して、<xref:System.Reflection.Emit.DynamicMethod> オブジェクトに関連付けられている <xref:System.Reflection.Emit.DynamicILInfo> に挿入できます。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-106">Once you have created <xref:System.Byte> arrays for your local variable signature, exceptions, and code body, you can use the <xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A>, <xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A>, and <xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A> methods to insert them into the <xref:System.Reflection.Emit.DynamicMethod> associated with your <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span>  
  
 <span data-ttu-id="5f1ad-107">独自のメタデータと MSIL を生成するには、共通言語基盤 (CLI) のドキュメント (特に "パーティション II: メタデータの定義とセマンティクス" および "パーティション III: CIL 命令セット") について理解している必要があります。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-107">Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="5f1ad-108">ドキュメントはオンラインで入手できます。MSDN の「[ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212)」 (ECMA の C# および共通言語基盤の標準規格) と、ECMA のインターナショナル Web サイトにある「[Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-108">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5f1ad-109">デリゲートコンストラクターを直接呼び出すことによって、別の動的メソッドにデリゲートを作成するコードを生成するために <xref:System.Reflection.Emit.DynamicILInfo> を使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-109">Do not use <xref:System.Reflection.Emit.DynamicILInfo> to generate code that creates a delegate to another dynamic method by calling the delegate constructor directly.</span></span> <span data-ttu-id="5f1ad-110">代わりに、<xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> メソッドを使用してデリゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-110">Instead, use the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method to create the delegate.</span></span> <span data-ttu-id="5f1ad-111">Delegate コンストラクターを使用して作成されたデリゲートには、ターゲットの動的メソッドへの参照がありません。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-111">A delegate that is created with the delegate constructor does not have a reference to the target dynamic method.</span></span> <span data-ttu-id="5f1ad-112">デリゲートがまだ使用されている間は、動的メソッドがガベージコレクションによって回収される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-112">The dynamic method might be reclaimed by garbage collection while the delegate is still in use.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="DynamicMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.DynamicMethod DynamicMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Emit.DynamicMethod DynamicMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicILInfo.DynamicMethod" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DynamicMethod As DynamicMethod" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Emit::DynamicMethod ^ DynamicMethod { System::Reflection::Emit::DynamicMethod ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DynamicMethod : System.Reflection.Emit.DynamicMethod" Usage="System.Reflection.Emit.DynamicILInfo.DynamicMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.DynamicMethod</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5f1ad-113">本体が現在のインスタンスによって生成される動的メソッドを取得します。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-113">Gets the dynamic method whose body is generated by the current instance.</span></span></summary>
        <value><span data-ttu-id="5f1ad-114">現在の <see cref="T:System.Reflection.Emit.DynamicMethod" /> オブジェクトによってコードが生成される動的メソッドを表す <see cref="T:System.Reflection.Emit.DynamicILInfo" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-114">A <see cref="T:System.Reflection.Emit.DynamicMethod" /> object representing the dynamic method for which the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object is generating code.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f1ad-115"><xref:System.Reflection.Emit.DynamicILInfo> オブジェクトは、常に動的メソッドに関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-115">A <xref:System.Reflection.Emit.DynamicILInfo> object is always associated with a dynamic method.</span></span> <span data-ttu-id="5f1ad-116"><xref:System.Reflection.Emit.DynamicILInfo> クラスの目的は、MSIL ストリーム、例外処理、およびローカル変数シグネチャを動的メソッドに挿入する別の方法を提供することです。これは、<xref:System.Reflection.Emit.ILGenerator> クラスを使用せずに MSIL を生成する開発者を対象としています。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-116">The purpose of the <xref:System.Reflection.Emit.DynamicILInfo> class is to provide another way of inserting the MSIL stream, exception handling, and local variable signature into a dynamic method, for developers who want to generate MSIL without using the <xref:System.Reflection.Emit.ILGenerator> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTokenFor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5f1ad-117">関連付けられた動的メソッドの MSIL ストリーム内の文字列、フィールド、メソッド、型、またはシグネチャを表す、現在の <see cref="T:System.Reflection.Emit.DynamicILInfo" /> のスコープで有効なトークンを取得します。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-117">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a string, field, method, type, or signature in the MSIL stream for the associated dynamic method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (byte[] signature);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(unsigned int8[] signature) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (signature As Byte()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(cli::array &lt;System::Byte&gt; ^ signature);" />
      <MemberSignature Language="F#" Value="member this.GetTokenFor : byte[] -&gt; int" Usage="dynamicILInfo.GetTokenFor signature" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signature" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="signature"><span data-ttu-id="5f1ad-118">シグネチャを格納している配列。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-118">An array that contains the signature.</span></span></param>
        <summary><span data-ttu-id="5f1ad-119">関連付けられた動的メソッドのシグネチャを表す、現在の <see cref="T:System.Reflection.Emit.DynamicILInfo" /> のスコープで有効なトークンを取得します。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-119">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing the signature for the associated dynamic method.</span></span></summary>
        <returns><span data-ttu-id="5f1ad-120">関連付けられた動的メソッドのメタデータおよび MSIL ストリームに埋め込むことができるトークン。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-120">A token that can be embedded in the metadata and the MSIL stream for the associated dynamic method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f1ad-121">署名 blob の詳細については、共通言語基盤 (CLI) のドキュメント (特に「パーティション II: メタデータの定義とセマンティクス」) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-121">For information on signature blobs, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="5f1ad-122">ドキュメントはオンラインで入手できます。MSDN の「[ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212)」 (ECMA の C# および共通言語基盤の標準規格) と、ECMA のインターナショナル Web サイトにある「[Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-122">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (System.Reflection.Emit.DynamicMethod method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(class System.Reflection.Emit.DynamicMethod method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (method As DynamicMethod) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(System::Reflection::Emit::DynamicMethod ^ method);" />
      <MemberSignature Language="F#" Value="member this.GetTokenFor : System.Reflection.Emit.DynamicMethod -&gt; int" Usage="dynamicILInfo.GetTokenFor method" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.Emit.DynamicMethod" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="5f1ad-123">呼び出す動的メソッド。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-123">The dynamic method to call.</span></span></param>
        <summary><span data-ttu-id="5f1ad-124">関連付けられたメソッドから呼び出される動的メソッドを表す、現在の <see cref="T:System.Reflection.Emit.DynamicILInfo" /> のスコープで有効なトークンを取得します。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-124">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a dynamic method to be called from the associated method.</span></span></summary>
        <returns><span data-ttu-id="5f1ad-125">関連付けられた動的メソッドの MSIL ストリーム内に MSIL 命令のターゲットとして埋め込むことができるトークン。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-125">A token that can be embedded in the MSIL stream for the associated dynamic method, as the target of an MSIL instruction.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f1ad-126">このメソッドオーバーロードによって返されるトークンを使用すると、現在の <xref:System.Reflection.Emit.DynamicILInfo> オブジェクトに関連付けられた動的メソッドから動的メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-126">The token returned by this method overload allows you to call a dynamic method from the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="5f1ad-127">関連付けられた動的メソッドを再帰的に呼び出すには、<xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A> プロパティの値を渡します。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-127">To call the associated dynamic method recursively, pass the value of the <xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (RuntimeFieldHandle field);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(valuetype System.RuntimeFieldHandle field) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (field As RuntimeFieldHandle) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(RuntimeFieldHandle field);" />
      <MemberSignature Language="F#" Value="member this.GetTokenFor : RuntimeFieldHandle -&gt; int" Usage="dynamicILInfo.GetTokenFor field" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="field" Type="System.RuntimeFieldHandle" />
      </Parameters>
      <Docs>
        <param name="field"><span data-ttu-id="5f1ad-128">アクセスされるフィールド。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-128">The field to be accessed.</span></span></param>
        <summary><span data-ttu-id="5f1ad-129">関連付けられた動的メソッドからアクセスされるフィールドを表す、現在の <see cref="T:System.Reflection.Emit.DynamicILInfo" /> のスコープで有効なトークンを取得します。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-129">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a field to be accessed from the associated dynamic method.</span></span></summary>
        <returns><span data-ttu-id="5f1ad-130">現在の <see cref="T:System.Reflection.Emit.DynamicILInfo" /> オブジェクトのスコープで、フィールドにアクセスする MSIL 命令のオペランドとして使用できるトークン。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-130">A token that can be used as the operand of an MSIL instruction that accesses fields, in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f1ad-131">現在の <xref:System.Reflection.Emit.DynamicILInfo> オブジェクトに関連付けられている動的メソッドによってアクセスされる任意のフィールドのトークンを取得する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-131">You must obtain a token for any field that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="5f1ad-132"><xref:System.Type.GetField%2A?displayProperty=nameWithType> メソッドを使用して、アクセスするフィールドの <xref:System.Reflection.FieldInfo> を取得し、<xref:System.Reflection.FieldInfo.FieldHandle%2A> プロパティを使用して <xref:System.RuntimeFieldHandle>を取得します。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-132">Use the <xref:System.Type.GetField%2A?displayProperty=nameWithType> method to get a <xref:System.Reflection.FieldInfo> for the field you want to access, then use the <xref:System.Reflection.FieldInfo.FieldHandle%2A> property to get the <xref:System.RuntimeFieldHandle>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (RuntimeMethodHandle method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(valuetype System.RuntimeMethodHandle method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (method As RuntimeMethodHandle) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(RuntimeMethodHandle method);" />
      <MemberSignature Language="F#" Value="member this.GetTokenFor : RuntimeMethodHandle -&gt; int" Usage="dynamicILInfo.GetTokenFor method" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.RuntimeMethodHandle" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="5f1ad-133">アクセスされるメソッド。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-133">The method to be accessed.</span></span></param>
        <summary><span data-ttu-id="5f1ad-134">関連付けられた動的メソッドからアクセスされるメソッドを表す、現在の <see cref="T:System.Reflection.Emit.DynamicILInfo" /> のスコープで有効なトークンを取得します。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-134">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a method to be accessed from the associated dynamic method.</span></span></summary>
        <returns><span data-ttu-id="5f1ad-135">現在の <see cref="F:System.Reflection.Emit.OpCodes.Call" /> オブジェクトのスコープで、<see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" /> や <see cref="T:System.Reflection.Emit.DynamicILInfo" /> などのメソッドにアクセスする MSIL 命令のオペランドとして使用できるトークン。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-135">A token that can be used as the operand of an MSIL instruction that accesses methods, such as <see cref="F:System.Reflection.Emit.OpCodes.Call" /> or <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" />, in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f1ad-136">現在の <xref:System.Reflection.Emit.DynamicILInfo> オブジェクトに関連付けられている動的メソッドによってアクセスされるメソッドのトークンを取得する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-136">You must obtain a token for any method that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="5f1ad-137"><xref:System.Type.GetMethod%2A?displayProperty=nameWithType> メソッドを使用してアクセスするメソッドの <xref:System.Reflection.MethodInfo> を取得し、<xref:System.Reflection.MethodBase.MethodHandle%2A> プロパティを使用して <xref:System.RuntimeMethodHandle>を取得します。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-137">Use the <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method to get a <xref:System.Reflection.MethodInfo> for the method you want to access, and then use the <xref:System.Reflection.MethodBase.MethodHandle%2A> property to get the <xref:System.RuntimeMethodHandle>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5f1ad-138">ジェネリック型に属するメソッドの場合は、<xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29> メソッドオーバーロードを使用し、ジェネリック型の <xref:System.RuntimeTypeHandle> を指定します。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-138">For a method that belongs to a generic type, use the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29> method overload and specify a <xref:System.RuntimeTypeHandle> for the generic type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (RuntimeTypeHandle type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(valuetype System.RuntimeTypeHandle type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (type As RuntimeTypeHandle) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(RuntimeTypeHandle type);" />
      <MemberSignature Language="F#" Value="member this.GetTokenFor : RuntimeTypeHandle -&gt; int" Usage="dynamicILInfo.GetTokenFor type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.RuntimeTypeHandle" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="5f1ad-139">使用される型。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-139">The type to be used.</span></span></param>
        <summary><span data-ttu-id="5f1ad-140">関連付けられた動的メソッドで使用される型を表す、現在の <see cref="T:System.Reflection.Emit.DynamicILInfo" /> のスコープで有効なトークンを取得します。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-140">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a type to be used in the associated dynamic method.</span></span></summary>
        <returns><span data-ttu-id="5f1ad-141">現在の <see cref="T:System.Reflection.Emit.DynamicILInfo" /> オブジェクトのスコープで、型を必要とする MSIL 命令のオペランドとして使用できるトークン。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-141">A token that can be used as the operand of an MSIL instruction that requires a type, in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f1ad-142">このメソッドオーバーロードによって返されるトークンを使用すると、ローカル変数の型を定義し、現在の <xref:System.Reflection.Emit.DynamicILInfo> オブジェクトに関連付けられている動的メソッドに型のインスタンスを作成するための MSIL を生成できます。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-142">The token returned by this method overload allows you to define a local variable type, and emit MSIL to create an instance of a type in the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span>  
  
 <span data-ttu-id="5f1ad-143">型を表す <xref:System.RuntimeTypeHandle> を取得するには、<xref:System.Type.TypeHandle%2A?displayProperty=nameWithType> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-143">To get a <xref:System.RuntimeTypeHandle> representing a type, use the <xref:System.Type.TypeHandle%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (string literal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(string literal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (literal As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(System::String ^ literal);" />
      <MemberSignature Language="F#" Value="member this.GetTokenFor : string -&gt; int" Usage="dynamicILInfo.GetTokenFor literal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="literal" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="literal"><span data-ttu-id="5f1ad-144">使用される文字列。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-144">The string to be used.</span></span></param>
        <summary><span data-ttu-id="5f1ad-145">関連付けられた動的メソッドで使用されるリテラル文字列を表す、現在の <see cref="T:System.Reflection.Emit.DynamicILInfo" /> のスコープで有効なトークンを取得します。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-145">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a string literal to be used in the associated dynamic method.</span></span></summary>
        <returns><span data-ttu-id="5f1ad-146">現在の <see cref="T:System.Reflection.Emit.DynamicILInfo" /> オブジェクトのスコープで、文字列を必要とする MSIL 命令のオペランドとして使用できるトークン。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-146">A token that can be used as the operand of an MSIL instruction that requires a string, in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (RuntimeFieldHandle field, RuntimeTypeHandle contextType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(valuetype System.RuntimeFieldHandle field, valuetype System.RuntimeTypeHandle contextType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (field As RuntimeFieldHandle, contextType As RuntimeTypeHandle) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(RuntimeFieldHandle field, RuntimeTypeHandle contextType);" />
      <MemberSignature Language="F#" Value="member this.GetTokenFor : RuntimeFieldHandle * RuntimeTypeHandle -&gt; int" Usage="dynamicILInfo.GetTokenFor (field, contextType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="field" Type="System.RuntimeFieldHandle" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="contextType" Type="System.RuntimeTypeHandle" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="field"><span data-ttu-id="5f1ad-147">アクセスされるフィールド。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-147">The field to be accessed.</span></span></param>
        <param name="contextType"><span data-ttu-id="5f1ad-148">フィールドが属するジェネリック型。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-148">The generic type the field belongs to.</span></span></param>
        <summary><span data-ttu-id="5f1ad-149">関連付けられた動的メソッドからアクセスされるフィールドのうち、指定されたジェネリック型に存在するフィールドを表す、現在の <see cref="T:System.Reflection.Emit.DynamicILInfo" /> のスコープで有効なトークンを取得します。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-149">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a field to be accessed from the associated dynamic method; the field is on the specified generic type.</span></span></summary>
        <returns><span data-ttu-id="5f1ad-150">現在の <see cref="T:System.Reflection.Emit.DynamicILInfo" /> オブジェクトのスコープで、フィールドにアクセスする MSIL 命令のオペランドとして使用できるトークン。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-150">A token that can be used as the operand of an MSIL instruction that accesses fields in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f1ad-151">現在の <xref:System.Reflection.Emit.DynamicILInfo> オブジェクトに関連付けられている動的メソッドによってアクセスされる任意のフィールドのトークンを取得する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-151">You must obtain a token for any field that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="5f1ad-152"><xref:System.Type.GetField%2A?displayProperty=nameWithType> メソッドを使用して、アクセスするフィールドの <xref:System.Reflection.FieldInfo> を取得し、<xref:System.Reflection.FieldInfo.FieldHandle%2A> プロパティを使用して <xref:System.RuntimeFieldHandle>を取得します。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-152">Use the <xref:System.Type.GetField%2A?displayProperty=nameWithType> method to get a <xref:System.Reflection.FieldInfo> for the field you want to access, and then use the <xref:System.Reflection.FieldInfo.FieldHandle%2A> property to get the <xref:System.RuntimeFieldHandle>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (RuntimeMethodHandle method, RuntimeTypeHandle contextType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(valuetype System.RuntimeMethodHandle method, valuetype System.RuntimeTypeHandle contextType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (method As RuntimeMethodHandle, contextType As RuntimeTypeHandle) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(RuntimeMethodHandle method, RuntimeTypeHandle contextType);" />
      <MemberSignature Language="F#" Value="member this.GetTokenFor : RuntimeMethodHandle * RuntimeTypeHandle -&gt; int" Usage="dynamicILInfo.GetTokenFor (method, contextType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.RuntimeMethodHandle" />
        <Parameter Name="contextType" Type="System.RuntimeTypeHandle" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="5f1ad-153">メソッド。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-153">The method.</span></span></param>
        <param name="contextType"><span data-ttu-id="5f1ad-154">メソッドが属するジェネリック型。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-154">The generic type the method belongs to.</span></span></param>
        <summary><span data-ttu-id="5f1ad-155">ジェネリック型のメソッドを表す、現在の <see cref="T:System.Reflection.Emit.DynamicILInfo" /> のスコープで有効なトークンを取得します。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-155">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a method on a generic type.</span></span></summary>
        <returns><span data-ttu-id="5f1ad-156">現在の <see cref="F:System.Reflection.Emit.OpCodes.Call" /> オブジェクトのスコープで、<see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" /> や <see cref="T:System.Reflection.Emit.DynamicILInfo" /> などのメソッドにアクセスする MSIL 命令のオペランドとして使用できるトークン。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-156">A token that can be used as the operand of an MSIL instruction that accesses methods, such as <see cref="F:System.Reflection.Emit.OpCodes.Call" /> or <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" />, in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f1ad-157">現在の <xref:System.Reflection.Emit.DynamicILInfo> オブジェクトに関連付けられている動的メソッドによって呼び出されるすべてのメソッドのトークンを取得する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-157">You must obtain a token for any method that will be called by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="5f1ad-158"><xref:System.Type.GetMethod%2A?displayProperty=nameWithType> メソッドを使用して、呼び出すメソッドの <xref:System.Reflection.MethodInfo> を取得し、<xref:System.Reflection.MethodBase.MethodHandle%2A> プロパティを使用して <xref:System.RuntimeMethodHandle>を取得します。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-158">Use the <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method to get a <xref:System.Reflection.MethodInfo> for the method you want to call, and then use the <xref:System.Reflection.MethodBase.MethodHandle%2A> property to get the <xref:System.RuntimeMethodHandle>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetCode">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5f1ad-159">関連付けられた動的メソッドのコード本体を設定します。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-159">Sets the code body of the associated dynamic method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetCode">
      <MemberSignature Language="C#" Value="public void SetCode (byte[] code, int maxStackSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCode(unsigned int8[] code, int32 maxStackSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCode (code As Byte(), maxStackSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCode(cli::array &lt;System::Byte&gt; ^ code, int maxStackSize);" />
      <MemberSignature Language="F#" Value="member this.SetCode : byte[] * int -&gt; unit" Usage="dynamicILInfo.SetCode (code, maxStackSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="System.Byte[]" />
        <Parameter Name="maxStackSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="code"><span data-ttu-id="5f1ad-160">MSIL ストリームを格納している配列。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-160">An array that contains the MSIL stream.</span></span></param>
        <param name="maxStackSize"><span data-ttu-id="5f1ad-161">メソッド実行時のオペランド スタックのアイテムの最大数。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-161">The maximum number of items on the operand stack when the method is executing.</span></span></param>
        <summary><span data-ttu-id="5f1ad-162">関連付けられた動的メソッドのコード本体を設定します。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-162">Sets the code body of the associated dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f1ad-163">MSIL ストリームに対して有効性チェックは実行されません。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-163">No validity checks are performed on the MSIL stream.</span></span>  
  
 <span data-ttu-id="5f1ad-164">このメソッドを2回呼び出すと、最初の MSIL ストリームが2番目のストリームに置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-164">Calling this method a second time replaces the first MSIL stream with the second.</span></span>  
  
 <span data-ttu-id="5f1ad-165">独自のメタデータと MSIL を生成するには、共通言語基盤 (CLI) のドキュメント (特に "パーティション II: メタデータの定義とセマンティクス" および "パーティション III: CIL 命令セット") について理解している必要があります。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-165">Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="5f1ad-166">ドキュメントはオンラインで入手できます。MSDN の「[ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212)」 (ECMA の C# および共通言語基盤の標準規格) と、ECMA のインターナショナル Web サイトにある「[Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-166">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCode">
      <MemberSignature Language="C#" Value="public void SetCode (byte* code, int codeSize, int maxStackSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCode(unsigned int8* code, int32 codeSize, int32 maxStackSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCode(System::Byte* code, int codeSize, int maxStackSize);" />
      <MemberSignature Language="F#" Value="member this.SetCode : nativeptr&lt;byte&gt; * int * int -&gt; unit" Usage="dynamicILInfo.SetCode (code, codeSize, maxStackSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="System.Byte*" />
        <Parameter Name="codeSize" Type="System.Int32" />
        <Parameter Name="maxStackSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="code"><span data-ttu-id="5f1ad-167">MSIL ストリームを格納するバイト配列へのポインター。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-167">A pointer to a byte array containing the MSIL stream.</span></span></param>
        <param name="codeSize"><span data-ttu-id="5f1ad-168">MSIL ストリームのバイト数。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-168">The number of bytes in the MSIL stream.</span></span></param>
        <param name="maxStackSize"><span data-ttu-id="5f1ad-169">メソッド実行時のオペランド スタックのアイテムの最大数。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-169">The maximum number of items on the operand stack when the method is executing.</span></span></param>
        <summary><span data-ttu-id="5f1ad-170">関連付けられた動的メソッドのコード本体を設定します。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-170">Sets the code body of the associated dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f1ad-171">MSIL ストリームに対して有効性チェックは実行されません。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-171">No validity checks are performed on the MSIL stream.</span></span>  
  
 <span data-ttu-id="5f1ad-172">このメソッドを2回呼び出すと、最初の MSIL ストリームが2番目のストリームに置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-172">Calling this method a second time replaces the first MSIL stream with the second.</span></span>  
  
 <span data-ttu-id="5f1ad-173">独自のメタデータと MSIL を生成するには、共通言語基盤 (CLI) のドキュメント (特に "パーティション II: メタデータの定義とセマンティクス" および "パーティション III: CIL 命令セット") について理解している必要があります。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-173">Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set."</span></span> <span data-ttu-id="5f1ad-174">ドキュメントはオンラインで入手できます。MSDN の「[ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212)」 (ECMA の C# および共通言語基盤の標準規格) と、ECMA のインターナショナル Web サイトにある「[Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-174">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5f1ad-175"><paramref name="code" /> が <see langword="null" /> で、<paramref name="codeSize" /> が 0 より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-175"><paramref name="code" /> is <see langword="null" /> and <paramref name="codeSize" /> is greater than 0.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5f1ad-176"><paramref name="codeSize" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-176"><paramref name="codeSize" /> is less than 0.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetExceptions">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5f1ad-177">関連付けられた動的メソッドの例外のメタデータを設定します。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-177">Sets the exception metadata for the associated dynamic method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetExceptions">
      <MemberSignature Language="C#" Value="public void SetExceptions (byte[] exceptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetExceptions(unsigned int8[] exceptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetExceptions (exceptions As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetExceptions(cli::array &lt;System::Byte&gt; ^ exceptions);" />
      <MemberSignature Language="F#" Value="member this.SetExceptions : byte[] -&gt; unit" Usage="dynamicILInfo.SetExceptions exceptions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exceptions" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="exceptions"><span data-ttu-id="5f1ad-178">例外のメタデータを格納している配列。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-178">An array that contains the exception metadata.</span></span></param>
        <summary><span data-ttu-id="5f1ad-179">関連付けられた動的メソッドの例外のメタデータを設定します。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-179">Sets the exception metadata for the associated dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f1ad-180">メソッドの例外メタデータは、すべての `try`、`catch`、`finally`、フィルター、およびエラーブロックの位置とサイズを定義します。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-180">The exception metadata for a method defines the location and size of all `try`, `catch`, `finally`, filter, and fault blocks.</span></span> <span data-ttu-id="5f1ad-181">このメタデータのレイアウトについては、共通言語基盤 (CLI) のドキュメント (特に「パーティション II: メタデータの定義とセマンティクス」) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-181">For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="5f1ad-182">ドキュメントはオンラインで入手できます。MSDN の「[ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212)」 (ECMA の C# および共通言語基盤の標準規格) と、ECMA のインターナショナル Web サイトにある「[Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-182">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetExceptions">
      <MemberSignature Language="C#" Value="public void SetExceptions (byte* exceptions, int exceptionsSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetExceptions(unsigned int8* exceptions, int32 exceptionsSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetExceptions(System::Byte* exceptions, int exceptionsSize);" />
      <MemberSignature Language="F#" Value="member this.SetExceptions : nativeptr&lt;byte&gt; * int -&gt; unit" Usage="dynamicILInfo.SetExceptions (exceptions, exceptionsSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exceptions" Type="System.Byte*" />
        <Parameter Name="exceptionsSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="exceptions"><span data-ttu-id="5f1ad-183">例外のメタデータを格納するバイト配列へのポインター。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-183">A pointer to a byte array containing the exception metadata.</span></span></param>
        <param name="exceptionsSize"><span data-ttu-id="5f1ad-184">例外のメタデータのバイト数。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-184">The number of bytes of exception metadata.</span></span></param>
        <summary><span data-ttu-id="5f1ad-185">関連付けられた動的メソッドの例外のメタデータを設定します。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-185">Sets the exception metadata for the associated dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f1ad-186">メソッドの例外メタデータは、すべての `try`、`catch`、`finally`、フィルター、およびエラーブロックの位置とサイズを定義します。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-186">The exception metadata for a method defines the location and size of all `try`, `catch`, `finally`, filter, and fault blocks.</span></span> <span data-ttu-id="5f1ad-187">このメタデータのレイアウトについては、共通言語基盤 (CLI) のドキュメント、特に「パーティション II: メタデータの定義とセマンティクス」と「パーティション III: CIL 命令セット」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-187">For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="5f1ad-188">ドキュメントはオンラインで入手できます。MSDN の「[ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212)」 (ECMA の C# および共通言語基盤の標準規格) と、ECMA のインターナショナル Web サイトにある「[Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-188">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5f1ad-189"><paramref name="exceptions" /> が <see langword="null" /> で、<paramref name="exceptionSize" /> が 0 より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-189"><paramref name="exceptions" /> is <see langword="null" /> and <paramref name="exceptionSize" /> is greater than 0.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5f1ad-190"><paramref name="exceptionSize" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-190"><paramref name="exceptionSize" /> is less than 0.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetLocalSignature">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5f1ad-191">関連付けられた動的メソッドのローカル変数のレイアウトを記述する、ローカル変数のシグネチャを設定します。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-191">Sets the local variable signature that describes the layout of local variables for the associated dynamic method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetLocalSignature">
      <MemberSignature Language="C#" Value="public void SetLocalSignature (byte[] localSignature);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetLocalSignature(unsigned int8[] localSignature) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetLocalSignature (localSignature As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetLocalSignature(cli::array &lt;System::Byte&gt; ^ localSignature);" />
      <MemberSignature Language="F#" Value="member this.SetLocalSignature : byte[] -&gt; unit" Usage="dynamicILInfo.SetLocalSignature localSignature" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localSignature" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="localSignature"><span data-ttu-id="5f1ad-192">関連付けられた <see cref="T:System.Reflection.Emit.DynamicMethod" /> のローカル変数のレイアウトを格納している配列。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-192">An array that contains the layout of local variables for the associated <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span></span></param>
        <summary><span data-ttu-id="5f1ad-193">関連付けられた動的メソッドのローカル変数のレイアウトを記述する、ローカル変数のシグネチャを設定します。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-193">Sets the local variable signature that describes the layout of local variables for the associated dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f1ad-194">ローカル変数シグネチャは、メソッドのローカル変数のレイアウトを記述します。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-194">The local variable signature describes the layout of a method's local variables.</span></span> <span data-ttu-id="5f1ad-195">ローカル変数シグネチャの構築を簡略化するには、`static` (Visual Basic で`Shared`) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=nameWithType> メソッドを使用して、ローカルシグネチャの <xref:System.Reflection.Emit.SignatureHelper> を取得します。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-195">To simplify construction of the local variable signature, use the `static` (`Shared` in Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=nameWithType> method to get a <xref:System.Reflection.Emit.SignatureHelper> for the local signature.</span></span>  
  
 <span data-ttu-id="5f1ad-196">ローカル変数シグネチャの詳細については、共通言語基盤 (CLI) のドキュメント (特に「パーティション II: メタデータの定義とセマンティクス」) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-196">For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="5f1ad-197">ドキュメントはオンラインで入手できます。MSDN の「[ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212)」 (ECMA の C# および共通言語基盤の標準規格) と、ECMA のインターナショナル Web サイトにある「[Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-197">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLocalSignature">
      <MemberSignature Language="C#" Value="public void SetLocalSignature (byte* localSignature, int signatureSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetLocalSignature(unsigned int8* localSignature, int32 signatureSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetLocalSignature(System::Byte* localSignature, int signatureSize);" />
      <MemberSignature Language="F#" Value="member this.SetLocalSignature : nativeptr&lt;byte&gt; * int -&gt; unit" Usage="dynamicILInfo.SetLocalSignature (localSignature, signatureSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localSignature" Type="System.Byte*" />
        <Parameter Name="signatureSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="localSignature"><span data-ttu-id="5f1ad-198">関連付けられた <see cref="T:System.Reflection.Emit.DynamicMethod" /> のローカル変数のレイアウトを格納している配列。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-198">An array that contains the layout of local variables for the associated <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span></span></param>
        <param name="signatureSize"><span data-ttu-id="5f1ad-199">シグネチャのバイト数。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-199">The number of bytes in the signature.</span></span></param>
        <summary><span data-ttu-id="5f1ad-200">関連付けられた動的メソッドのローカル変数のレイアウトを記述する、ローカル変数のシグネチャを設定します。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-200">Sets the local variable signature that describes the layout of local variables for the associated dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f1ad-201">ローカル変数シグネチャは、メソッドのローカル変数のレイアウトを記述します。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-201">The local variable signature describes the layout of a method's local variables.</span></span> <span data-ttu-id="5f1ad-202">ローカル変数シグネチャの構築を簡略化するには、`static` (Visual Basic で`Shared`) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=nameWithType> メソッドを使用して、ローカルシグネチャの <xref:System.Reflection.Emit.SignatureHelper> を取得します。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-202">To simplify construction of the local variable signature, use the `static` (`Shared` in Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=nameWithType> method to get a <xref:System.Reflection.Emit.SignatureHelper> for the local signature.</span></span>  
  
 <span data-ttu-id="5f1ad-203">ローカル変数シグネチャの詳細については、共通言語基盤 (CLI) のドキュメント (特に「パーティション II: メタデータの定義とセマンティクス」) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-203">For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="5f1ad-204">ドキュメントはオンラインで入手できます。MSDN の「[ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212)」 (ECMA の C# および共通言語基盤の標準規格) と、ECMA のインターナショナル Web サイトにある「[Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-204">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5f1ad-205"><paramref name="localSignature" /> が <see langword="null" /> で、<paramref name="signatureSize" /> が 0 より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-205"><paramref name="localSignature" /> is <see langword="null" /> and <paramref name="signatureSize" /> is greater than 0.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5f1ad-206"><paramref name="signatureSize" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="5f1ad-206"><paramref name="signatureSize" /> is less than 0.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
