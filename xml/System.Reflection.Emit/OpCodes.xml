<Type Name="OpCodes" FullName="System.Reflection.Emit.OpCodes">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c78faa6e7d4027f971f339a7f6b4626379d8e28e" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82493824" /></Metadata><TypeSignature Language="C#" Value="public class OpCodes" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit OpCodes extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.OpCodes" />
  <TypeSignature Language="VB.NET" Value="Public Class OpCodes" />
  <TypeSignature Language="C++ CLI" Value="public ref class OpCodes" />
  <TypeSignature Language="F#" Value="type OpCodes = class" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Reflection.Primitives" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="e5fd8-101"><see cref="T:System.Reflection.Emit.ILGenerator" /> クラス メンバー (<see cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)" /> など) による出力に対する MSIL (Microsoft Intermediate Language) 命令のフィールド表現を提供します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-101">Provides field representations of the Microsoft Intermediate Language (MSIL) instructions for emission by the <see cref="T:System.Reflection.Emit.ILGenerator" /> class members (such as <see cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)" />).</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-102">メンバーオペコードの詳細については、共通言語基盤 (CLI) のドキュメント、特に「パーティション III: CIL 命令セット」と「パーティション II: メタデータの定義とセマンティクス」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-102">For a detailed description of the member opcodes, see the Common Language Infrastructure (CLI) documentation, especially "Partition III: CIL Instruction Set" and "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="e5fd8-103">ドキュメントはオンラインで入手できます。MSDN の「[ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212)」 (ECMA の C# および共通言語基盤の標準規格) と、ECMA のインターナショナル Web サイトにある「[Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-103">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5fd8-104">次の例は、<xref:System.Reflection.Emit.ILGenerator> を使用して `OpCodes` を <xref:System.Reflection.Emit.MethodBuilder>に出力する動的メソッドを構築する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-104">The following example demonstrates the construction of a dynamic method using <xref:System.Reflection.Emit.ILGenerator> to emit `OpCodes` into a <xref:System.Reflection.Emit.MethodBuilder>.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Add;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Add" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Add" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Add As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Add;" />
      <MemberSignature Language="F#" Value=" staticval mutable Add : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Add" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-105">2 つの値を加算し、結果を評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-105">Adds two values and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-106">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-106">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-107">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-107">Format</span></span>|<span data-ttu-id="e5fd8-108">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-108">Assembly Format</span></span>|<span data-ttu-id="e5fd8-109">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-109">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-110">58</span><span class="sxs-lookup"><span data-stu-id="e5fd8-110">58</span></span>|<span data-ttu-id="e5fd8-111">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-111">add</span></span>|<span data-ttu-id="e5fd8-112">2つの数値を加算して、新しい数値を返します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-112">Adds two numeric values, returning a new numeric value.</span></span>|  
  
 <span data-ttu-id="e5fd8-113">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-113">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-114">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-114">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-115">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-115">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-116">`value2` と `value1` がスタックからポップされます。`value1` が `value2`に追加されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-116">`value2` and `value1` are popped from the stack; `value1` is added to `value2`.</span></span>  
  
4.  <span data-ttu-id="e5fd8-117">結果がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-117">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-118">整数演算のオーバーフローが検出されません (適切なオーバーフロー処理の場合は、<xref:System.Reflection.Emit.OpCodes.Add_Ovf>を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-118">Overflow is not detected for integer operations (for proper overflow handling, see <xref:System.Reflection.Emit.OpCodes.Add_Ovf>).</span></span>  
  
 <span data-ttu-id="e5fd8-119">整数の加算は、飽和度ではなく、ラップします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-119">Integer addition wraps, rather than saturates.</span></span> <span data-ttu-id="e5fd8-120">たとえば、`value1` が255に設定され、`value2` が1に設定されている8ビット整数と想定した場合、ラップされた結果は256ではなく0になります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-120">For example, assuming 8-bit integers where `value1` is set to 255 and `value2` is set to 1, the wrapped result is 0 rather than 256.</span></span>  
  
 <span data-ttu-id="e5fd8-121">浮動小数点オーバーフローでは、`+inf` (`PositiveInfinity`) または `-inf` (`NegativeInfinity`) が返されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-121">Floating-point overflow returns `+inf` (`PositiveInfinity`) or `-inf` (`NegativeInfinity`).</span></span>  
  
 <span data-ttu-id="e5fd8-122">許容されるオペランドの型とそれに対応する結果のデータ型を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-122">The acceptable operand types and their corresponding result data type are listed in the table below.</span></span> <span data-ttu-id="e5fd8-123">特定の型の組み合わせ (たとえば、`int32` と `float`、`int32` および `int64`) のエントリがない場合、これは無効な Microsoft 中間言語 (MSIL) であり、エラーが生成されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-123">If there is no entry for a particular type combination (for example, `int32` and `float`; `int32` and `int64`), it is an invalid Microsoft Intermediate Language (MSIL) and generates an error.</span></span>  
  
|<span data-ttu-id="e5fd8-124">operand</span><span class="sxs-lookup"><span data-stu-id="e5fd8-124">operand</span></span>|<span data-ttu-id="e5fd8-125">value1 型</span><span class="sxs-lookup"><span data-stu-id="e5fd8-125">value1 type</span></span>|<span data-ttu-id="e5fd8-126">value2 型</span><span class="sxs-lookup"><span data-stu-id="e5fd8-126">value2 type</span></span>|<span data-ttu-id="e5fd8-127">結果の種類</span><span class="sxs-lookup"><span data-stu-id="e5fd8-127">result type</span></span>|  
|-------------|-----------------|-----------------|-----------------|  
|<span data-ttu-id="e5fd8-128">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-128">add</span></span>|`int32`|`int32`|`int32`|  
|<span data-ttu-id="e5fd8-129">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-129">add</span></span>|`int32`|`native int`|`native int`|  
|<span data-ttu-id="e5fd8-130">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-130">add</span></span>|`int32`|`&`|`&`|  
|<span data-ttu-id="e5fd8-131">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-131">add</span></span>|`int32`|`*`|`*`|  
|<span data-ttu-id="e5fd8-132">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-132">add</span></span>|`int64`|`int64`|`int64`|  
|<span data-ttu-id="e5fd8-133">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-133">add</span></span>|`native int`|`int32`|`native int`|  
|<span data-ttu-id="e5fd8-134">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-134">add</span></span>|`native int`|`native int`|`native int`|  
|<span data-ttu-id="e5fd8-135">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-135">add</span></span>|`native int`|`&`|`&`|  
|<span data-ttu-id="e5fd8-136">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-136">add</span></span>|`native int`|`*`|`*`|  
|<span data-ttu-id="e5fd8-137">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-137">add</span></span>|`F`|`F`|`F`|  
|<span data-ttu-id="e5fd8-138">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-138">add</span></span>|`&`|`int32`|`&`|  
|<span data-ttu-id="e5fd8-139">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-139">add</span></span>|`&`|`native int`|`&`|  
|<span data-ttu-id="e5fd8-140">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-140">add</span></span>|`*`|`int32`|`*`|  
|<span data-ttu-id="e5fd8-141">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-141">add</span></span>|`*`|`native int`|`*`|  
  
 <span data-ttu-id="e5fd8-142">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`add` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-142">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `add` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add_Ovf">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Add_Ovf;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Add_Ovf" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Add_Ovf" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Add_Ovf As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Add_Ovf;" />
      <MemberSignature Language="F#" Value=" staticval mutable Add_Ovf : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Add_Ovf" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-143">2 つの整数値を加算し、オーバーフロー チェックを実行し、結果を評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-143">Adds two integers, performs an overflow check, and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-144">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-144">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-145">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-145">Format</span></span>|<span data-ttu-id="e5fd8-146">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-146">Assembly Format</span></span>|<span data-ttu-id="e5fd8-147">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-147">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-148">D6</span><span class="sxs-lookup"><span data-stu-id="e5fd8-148">D6</span></span>|<span data-ttu-id="e5fd8-149">ovf を追加します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-149">add.ovf</span></span>|<span data-ttu-id="e5fd8-150">オーバーフローチェック付きの2つの符号付き整数値を追加します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-150">Adds two signed integer values with an overflow check.</span></span>|  
  
 <span data-ttu-id="e5fd8-151">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-151">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-152">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-152">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-153">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-153">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-154">`value2` と `value1` がスタックからポップされます。`value1` は、オーバーフローのチェック付きで `value2` に追加されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-154">`value2` and `value1` are popped from the stack; `value1` is added to `value2` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="e5fd8-155">結果がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-155">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-156">結果が結果の型に表示されない場合、<xref:System.OverflowException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-156"><xref:System.OverflowException> is thrown if the result is not represented in the result type.</span></span>  
  
 <span data-ttu-id="e5fd8-157">この操作は、符号付き整数に対して実行できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-157">You can perform this operation on signed integers.</span></span> <span data-ttu-id="e5fd8-158">浮動小数点値の場合は、<xref:System.Reflection.Emit.OpCodes.Add>を使用します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-158">For floating-point values, use <xref:System.Reflection.Emit.OpCodes.Add>.</span></span>  
  
 <span data-ttu-id="e5fd8-159">許容されるオペランドの型とそれに対応する結果のデータ型を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-159">The acceptable operand types and their corresponding result data type are listed in the table below.</span></span> <span data-ttu-id="e5fd8-160">特定の型の組み合わせ (たとえば、`int32` と `float`、`int32` および `int64`) のエントリがない場合、これは無効な MSIL (Microsoft 中間言語) 命令であり、エラーが生成されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-160">If there is no entry for a particular type combination (for example, `int32` and `float`; `int32` and `int64`), it is an invalid Microsoft Intermediate Language (MSIL) instruction and generates an error.</span></span>  
  
|<span data-ttu-id="e5fd8-161">operand</span><span class="sxs-lookup"><span data-stu-id="e5fd8-161">operand</span></span>|<span data-ttu-id="e5fd8-162">value1 型</span><span class="sxs-lookup"><span data-stu-id="e5fd8-162">value1 type</span></span>|<span data-ttu-id="e5fd8-163">value2 型</span><span class="sxs-lookup"><span data-stu-id="e5fd8-163">value2 type</span></span>|<span data-ttu-id="e5fd8-164">結果の種類</span><span class="sxs-lookup"><span data-stu-id="e5fd8-164">result type</span></span>|  
|-------------|-----------------|-----------------|-----------------|  
|<span data-ttu-id="e5fd8-165">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-165">add</span></span>|`int32`|`int32`|`int32`|  
|<span data-ttu-id="e5fd8-166">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-166">add</span></span>|`int32`|`native int`|`native int`|  
|<span data-ttu-id="e5fd8-167">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-167">add</span></span>|`int32`|`&`|`&`|  
|<span data-ttu-id="e5fd8-168">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-168">add</span></span>|`int32`|`*`|`*`|  
|<span data-ttu-id="e5fd8-169">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-169">add</span></span>|`int64`|`int64`|`int64`|  
|<span data-ttu-id="e5fd8-170">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-170">add</span></span>|`native int`|`int32`|`native int`|  
|<span data-ttu-id="e5fd8-171">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-171">add</span></span>|`native int`|`native int`|`native int`|  
|<span data-ttu-id="e5fd8-172">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-172">add</span></span>|`native int`|`&`|`&`|  
|<span data-ttu-id="e5fd8-173">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-173">add</span></span>|`native int`|`*`|`*`|  
|<span data-ttu-id="e5fd8-174">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-174">add</span></span>|`F`|`F`|`F`|  
|<span data-ttu-id="e5fd8-175">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-175">add</span></span>|`&`|`int32`|`&`|  
|<span data-ttu-id="e5fd8-176">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-176">add</span></span>|`&`|`native int`|`&`|  
|<span data-ttu-id="e5fd8-177">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-177">add</span></span>|`*`|`int32`|`*`|  
|<span data-ttu-id="e5fd8-178">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-178">add</span></span>|`*`|`native int`|`*`|  
  
 <span data-ttu-id="e5fd8-179">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`add.ovf` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-179">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `add.ovf` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add_Ovf_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Add_Ovf_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Add_Ovf_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Add_Ovf_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Add_Ovf_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Add_Ovf_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Add_Ovf_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Add_Ovf_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-180">2 つの符号なし整数値を加算し、オーバーフロー チェックを実行し、結果を評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-180">Adds two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-181">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-181">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-182">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-182">Format</span></span>|<span data-ttu-id="e5fd8-183">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-183">Assembly Format</span></span>|<span data-ttu-id="e5fd8-184">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-184">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-185">D7</span><span class="sxs-lookup"><span data-stu-id="e5fd8-185">D7</span></span>|<span data-ttu-id="e5fd8-186">add.ovf.un</span><span class="sxs-lookup"><span data-stu-id="e5fd8-186">add.ovf.un</span></span>|<span data-ttu-id="e5fd8-187">オーバーフローチェック付きの2つの符号なし整数値を追加します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-187">Adds two unsigned integer values with an overflow check.</span></span>|  
  
 <span data-ttu-id="e5fd8-188">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-188">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-189">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-189">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-190">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-190">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-191">`value2` と `value1` がスタックからポップされます。`value1` は、オーバーフローのチェック付きで `value2` に追加されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-191">`value2` and `value1` are popped from the stack; `value1` is added to `value2` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="e5fd8-192">結果がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-192">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-193">結果が結果の型に表示されない場合、<xref:System.OverflowException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-193"><xref:System.OverflowException> is thrown if the result is not represented in the result type.</span></span>  
  
 <span data-ttu-id="e5fd8-194">この操作は、符号付き整数に対して実行できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-194">You can perform this operation on signed integers.</span></span> <span data-ttu-id="e5fd8-195">浮動小数点値の場合は、<xref:System.Reflection.Emit.OpCodes.Add>を使用します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-195">For floating-point values, use <xref:System.Reflection.Emit.OpCodes.Add>.</span></span>  
  
 <span data-ttu-id="e5fd8-196">許容されるオペランドの型とそれに対応する結果のデータ型を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-196">The acceptable operand types and their corresponding result data type are listed in the table below.</span></span> <span data-ttu-id="e5fd8-197">特定の型の組み合わせ (たとえば、`int32` と `float`、`int32` および `int64`) のエントリがない場合、これは無効な MSIL (Microsoft 中間言語) 命令であり、エラーが生成されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-197">If there is no entry for a particular type combination (for example, `int32` and `float`; `int32` and `int64`), it is an invalid Microsoft Intermediate Language (MSIL) instruction and generates an error.</span></span>  
  
|<span data-ttu-id="e5fd8-198">operand</span><span class="sxs-lookup"><span data-stu-id="e5fd8-198">operand</span></span>|<span data-ttu-id="e5fd8-199">value1 型</span><span class="sxs-lookup"><span data-stu-id="e5fd8-199">value1 type</span></span>|<span data-ttu-id="e5fd8-200">value2 型</span><span class="sxs-lookup"><span data-stu-id="e5fd8-200">value2 type</span></span>|<span data-ttu-id="e5fd8-201">結果の種類</span><span class="sxs-lookup"><span data-stu-id="e5fd8-201">result type</span></span>|  
|-------------|-----------------|-----------------|-----------------|  
|<span data-ttu-id="e5fd8-202">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-202">add</span></span>|`int32`|`int32`|`int32`|  
|<span data-ttu-id="e5fd8-203">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-203">add</span></span>|`int32`|`native int`|`native int`|  
|<span data-ttu-id="e5fd8-204">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-204">add</span></span>|`int32`|`&`|`&`|  
|<span data-ttu-id="e5fd8-205">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-205">add</span></span>|`int32`|`*`|`*`|  
|<span data-ttu-id="e5fd8-206">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-206">add</span></span>|`int64`|`int64`|`int64`|  
|<span data-ttu-id="e5fd8-207">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-207">add</span></span>|`native int`|`int32`|`native int`|  
|<span data-ttu-id="e5fd8-208">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-208">add</span></span>|`native int`|`native int`|`native int`|  
|<span data-ttu-id="e5fd8-209">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-209">add</span></span>|`native int`|`&`|`&`|  
|<span data-ttu-id="e5fd8-210">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-210">add</span></span>|`native int`|`*`|`*`|  
|<span data-ttu-id="e5fd8-211">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-211">add</span></span>|`F`|`F`|`F`|  
|<span data-ttu-id="e5fd8-212">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-212">add</span></span>|`&`|`int32`|`&`|  
|<span data-ttu-id="e5fd8-213">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-213">add</span></span>|`&`|`native int`|`&`|  
|<span data-ttu-id="e5fd8-214">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-214">add</span></span>|`*`|`int32`|`*`|  
|<span data-ttu-id="e5fd8-215">add</span><span class="sxs-lookup"><span data-stu-id="e5fd8-215">add</span></span>|`*`|`native int`|`*`|  
  
 <span data-ttu-id="e5fd8-216">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`add.ovf.un` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-216">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `add.ovf.un` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode And;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode And" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.And" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly And As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode And;" />
      <MemberSignature Language="F#" Value=" staticval mutable And : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.And" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-217">2 つの値のビットごとの AND を計算し、結果を評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-217">Computes the bitwise AND of two values and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-218">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-218">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-219">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-219">Format</span></span>|<span data-ttu-id="e5fd8-220">命令</span><span class="sxs-lookup"><span data-stu-id="e5fd8-220">Instruction</span></span>|<span data-ttu-id="e5fd8-221">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-221">Description</span></span>|  
|------------|-----------------|-----------------|  
|<span data-ttu-id="e5fd8-222">5F (</span><span class="sxs-lookup"><span data-stu-id="e5fd8-222">5F</span></span>|<span data-ttu-id="e5fd8-223">and</span><span class="sxs-lookup"><span data-stu-id="e5fd8-223">and</span></span>|<span data-ttu-id="e5fd8-224">2つの整数値のビットごとの AND を決定します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-224">Determines the bitwise AND of two integer values.</span></span>|  
  
 <span data-ttu-id="e5fd8-225">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-225">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-226">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-226">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-227">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-227">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-228">`value1` と `value2` がスタックからポップされます。2つの値のビットごとの AND が計算されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-228">`value1` and `value2` are popped from the stack; the bitwise AND of the two values is computed.</span></span>  
  
4.  <span data-ttu-id="e5fd8-229">結果がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-229">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-230">`and` 命令は、スタックの上位2つの値のビットごとの AND を計算し、結果をスタックに残します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-230">The `and` instruction computes the bitwise AND of the top two values on the stack and leaves the result on the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-231">`And` は、整数固有の演算です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-231">`And` is an integer-specific operation.</span></span>  
  
 <span data-ttu-id="e5fd8-232">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`and` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-232">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `and` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Arglist">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Arglist;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Arglist" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Arglist" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Arglist As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Arglist;" />
      <MemberSignature Language="F#" Value=" staticval mutable Arglist : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Arglist" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-233">現在のメソッドの引数リストへのアンマネージ ポインターを返します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-233">Returns an unmanaged pointer to the argument list of the current method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-234">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-234">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-235">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-235">Format</span></span>|<span data-ttu-id="e5fd8-236">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-236">Assembly Format</span></span>|<span data-ttu-id="e5fd8-237">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-237">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-238">FE 00</span><span class="sxs-lookup"><span data-stu-id="e5fd8-238">FE 00</span></span>|<span data-ttu-id="e5fd8-239">arglist</span><span class="sxs-lookup"><span data-stu-id="e5fd8-239">arglist</span></span>|<span data-ttu-id="e5fd8-240">現在のメソッドの引数リストハンドルを返します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-240">Returns an argument list handle for the current method.</span></span>|  
  
 <span data-ttu-id="e5fd8-241">この操作では、評価スタックの動作は実行されません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-241">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="e5fd8-242">`arglist` 命令は、現在のメソッドの引数リストを表す不透明なハンドル (型 `native int`のアンマネージポインター) を返します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-242">The `arglist` instruction returns an opaque handle (an unmanaged pointer, of type `native int`) that represents the argument list of the current method.</span></span> <span data-ttu-id="e5fd8-243">このハンドルは、現在のメソッドの有効期間中にのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-243">This handle is valid only during the lifetime of the current method.</span></span> <span data-ttu-id="e5fd8-244">ただし、現在のメソッドがコントロールのスレッド上にある限り、ハンドルを他のメソッドに渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-244">You can, however, pass the handle to other methods as long as the current method is on the thread of control.</span></span> <span data-ttu-id="e5fd8-245">`arglist` 命令は、可変個の引数を受け取るメソッド内でのみ実行できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-245">You can only execute the `arglist` instruction within a method that takes a variable number of arguments.</span></span>  
  
 <span data-ttu-id="e5fd8-246">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`arglist` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-246">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `arglist` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Beq">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Beq;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Beq" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Beq" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Beq As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Beq;" />
      <MemberSignature Language="F#" Value=" staticval mutable Beq : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Beq" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-247">2 つの値が等しい場合は、ターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-247">Transfers control to a target instruction if two values are equal.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-248">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-248">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-249">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-249">Format</span></span>|<span data-ttu-id="e5fd8-250">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-250">Assembly Format</span></span>|<span data-ttu-id="e5fd8-251">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-251">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-252">3B < `int32` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-252">3B < `int32` ></span></span>|<span data-ttu-id="e5fd8-253">beq `target`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-253">beq `target`</span></span>|<span data-ttu-id="e5fd8-254">2つの値が等しい場合は、オフセット `target` でターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-254">Branch to the target instruction at offset `target` if the two values are equal.</span></span>|  
  
 <span data-ttu-id="e5fd8-255">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-255">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-256">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-256">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-257">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-257">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-258">`value2` と `value1` がスタックからポップされます。`value1` が `value2`に等しい場合は、分岐操作が実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-258">`value2` and `value1` are popped from the stack; if `value1` is equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="e5fd8-259">`beq` 命令は、`value1` が `value2`と等しい場合に、指定されたターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-259">The `beq` instruction transfers control to the specified target instruction if `value1` is equal to `value2`.</span></span> <span data-ttu-id="e5fd8-260">効果は、`ceq` 命令の後に特定のターゲット命令への `brtrue` 分岐が実行されることと同じです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-260">The effect is the same as performing a `ceq` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="e5fd8-261">ターゲット命令は、現在の命令に続く命令の先頭からの4バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-261">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-262">許容されるオペランドの型は、次のようにカプセル化されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-262">The acceptable operand types are encapsulated below:</span></span>  
  
 <span data-ttu-id="e5fd8-263">ターゲット命令に1つ以上のプレフィックスコードがある場合、control はこれらのプレフィックスの最初の部分にのみ転送できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-263">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="e5fd8-264">`try`、`catch`、`filter`、および `finally` ブロックとの間での転送は、この命令では実行できません (このような転送は厳しく制限されており、代わりに <xref:System.Reflection.Emit.OpCodes.Leave> 命令を使用する必要があります)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-264">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction (such transfers are severely restricted and must use the <xref:System.Reflection.Emit.OpCodes.Leave> instruction instead).</span></span>  
  
 <span data-ttu-id="e5fd8-265">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`beq` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-265">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `beq` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.Label%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Beq_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Beq_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Beq_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Beq_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Beq_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Beq_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Beq_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Beq_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-266">2 つの値が等しい場合は、ターゲット命令 (短い形式) に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-266">Transfers control to a target instruction (short form) if two values are equal.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-267">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-267">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-268">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-268">Format</span></span>|<span data-ttu-id="e5fd8-269">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-269">Assembly Format</span></span>|<span data-ttu-id="e5fd8-270">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-270">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-271">2E < `int8` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-271">2E < `int8` ></span></span>|<span data-ttu-id="e5fd8-272">beq. s `target`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-272">beq.s `target`</span></span>|<span data-ttu-id="e5fd8-273">オフセットでターゲット命令に分岐します (`target` 等しい場合)。短い形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-273">Branch to the target instruction at offset `target` if equal, short form</span></span>|  
  
 <span data-ttu-id="e5fd8-274">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-274">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-275">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-275">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-276">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-276">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-277">`value2` と `value1` がスタックからポップされます。`value1` が `value2`に等しい場合は、分岐操作が実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-277">`value2` and `value1` are popped from the stack; if `value1` is equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="e5fd8-278">`beq.s` 命令は、`value1` が `value2`と等しい場合に、指定されたターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-278">The `beq.s` instruction transfers control to the specified target instruction if `value1` is equal to `value2`.</span></span> <span data-ttu-id="e5fd8-279">効果は、`ceq` 命令の後に特定のターゲット命令への `brtrue` 分岐が実行されることと同じです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-279">The effect is the same as performing a `ceq` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="e5fd8-280">ターゲット命令は、現在の命令に続く命令の先頭からの1バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-280">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-281">許容されるオペランドの型は、次のようにカプセル化されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-281">The acceptable operand types are encapsulated below:</span></span>  
  
 <span data-ttu-id="e5fd8-282">ターゲット命令に1つ以上のプレフィックスコードがある場合、control はこれらのプレフィックスの最初の部分にのみ転送できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-282">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="e5fd8-283">`try`、`catch`、`filter`、および `finally` ブロックとの間での転送は、この命令では実行できません (このような転送は厳しく制限されており、代わりに <xref:System.Reflection.Emit.OpCodes.Leave> 命令を使用する必要があります)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-283">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction (such transfers are severely restricted and must use the <xref:System.Reflection.Emit.OpCodes.Leave> instruction instead).</span></span>  
  
 <span data-ttu-id="e5fd8-284">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`beq.s` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-284">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `beq.s` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.Label%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bge : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bge" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-285">最初の値が 2 番目の値以上の場合は、ターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-285">Transfers control to a target instruction if the first value is greater than or equal to the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-286">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-286">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-287">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-287">Format</span></span>|<span data-ttu-id="e5fd8-288">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-288">Assembly Format</span></span>|<span data-ttu-id="e5fd8-289">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-289">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-290">3C `<int32>`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-290">3C `<int32>`</span></span>|<span data-ttu-id="e5fd8-291">bge `target`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-291">bge `target`</span></span>|<span data-ttu-id="e5fd8-292">最初の値が2番目の値以上の場合は、指定されたオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-292">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value.</span></span>|  
  
 <span data-ttu-id="e5fd8-293">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-293">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-294">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-294">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-295">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-295">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-296">`value2` と `value1` がスタックからポップされます。`value1` が `value2`以上の場合は、分岐操作が実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-296">`value2` and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="e5fd8-297">`bge` 命令は、`value1` が `value2`以上の場合に、指定されたターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-297">The `bge` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`.</span></span> <span data-ttu-id="e5fd8-298">効果は、`clt` 命令 (float の`clt.un`) の後に特定のターゲット命令への `brfalse` 分岐が実行されることと同じです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-298">The effect is identical to performing a `clt` instruction (`clt.un` for floats) followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="e5fd8-299">ターゲット命令は、現在の命令に続く命令の先頭からの4バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-299">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-300">ターゲット命令に1つ以上のプレフィックスコードがある場合、control はこれらのプレフィックスの最初の部分にのみ転送できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-300">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="e5fd8-301">`try`、`catch`、`filter`、および `finally` ブロックとの間での転送の制御は、この命令では実行できません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-301">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-302">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`bge` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-302">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.Label%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bge_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bge_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-303">最初の値が 2 番目の値以上の場合は、ターゲット命令 (短い形式) に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-303">Transfers control to a target instruction (short form) if the first value is greater than or equal to the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-304">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-304">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-305">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-305">Format</span></span>|<span data-ttu-id="e5fd8-306">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-306">Assembly Format</span></span>|<span data-ttu-id="e5fd8-307">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-307">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-308">2F `<int8>`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-308">2F `<int8>`</span></span>|<span data-ttu-id="e5fd8-309">bge `target`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-309">bge.s `target`</span></span>|<span data-ttu-id="e5fd8-310">最初の値が2番目の値 (短い形式) 以上の場合、指定したオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-310">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value, short form.</span></span>|  
  
 <span data-ttu-id="e5fd8-311">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-311">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-312">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-312">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-313">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-313">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-314">`value2` と `value1` がスタックからポップされます。`value1` が `value2`以上の場合は、分岐操作が実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-314">`value2` and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="e5fd8-315">`bge.s` 命令は、`value1` が `value2`以上の場合に、指定されたターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-315">The `bge.s` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`.</span></span> <span data-ttu-id="e5fd8-316">効果は、`clt` 命令 (float の`clt.un`) の後に特定のターゲット命令への `brfalse` 分岐が実行されることと同じです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-316">The effect is identical to performing a `clt` instruction (`clt.un` for floats) followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="e5fd8-317">ターゲット命令は、現在の命令に続く命令の先頭からの1バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-317">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-318">ターゲット命令に1つ以上のプレフィックスコードがある場合、control はこれらのプレフィックスの最初の部分にのみ転送できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-318">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="e5fd8-319">`try`、`catch`、`filter`、および `finally` ブロックとの間での転送の制御は、この命令では実行できません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-319">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-320">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`bge.s` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-320">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge.s` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.Label%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bge_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bge_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-321">符号なし整数値または順序なし float 値を比較したとき、最初の値が 2 番目の値を超える場合は、ターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-321">Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-322">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-322">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-323">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-323">Format</span></span>|<span data-ttu-id="e5fd8-324">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-324">Assembly Format</span></span>|<span data-ttu-id="e5fd8-325">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-325">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-326">41 `<int32>`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-326">41 `<int32>`</span></span>|<span data-ttu-id="e5fd8-327">bge `target`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-327">bge.un `target`</span></span>|<span data-ttu-id="e5fd8-328">最初の値が2番目の値 (符号なしの値) 以上の場合は、指定されたオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-328">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="e5fd8-329">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-329">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-330">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-330">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-331">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-331">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-332">`value2` と `value1` がスタックからポップされます。`value1` が `value2`以上の場合は、分岐操作が実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-332">`value2` and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="e5fd8-333">`bge.un` 命令は、符号なし整数または順序なし float 値を使用して比較した場合に、`value1` が `value2`以上の場合に、指定されたターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-333">The `bge.un` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="e5fd8-334">効果は、`clt.un` 命令 (float の`clt`) の後に特定のターゲット命令への `brfalse` 分岐が実行されることと同じです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-334">The effect is identical to performing a `clt.un` instruction (`clt` for floats) followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="e5fd8-335">ターゲット命令は、現在の命令に続く命令の先頭からの4バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-335">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-336">ターゲット命令に1つ以上のプレフィックスコードがある場合、control はこれらのプレフィックスの最初の部分にのみ転送できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-336">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="e5fd8-337">`try`、`catch`、`filter`、および `finally` ブロックとの間での転送の制御は、この命令では実行できません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-337">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-338">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`bge.un` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-338">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge.un` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.Label%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bge_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bge_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-339">符号なし整数値または順序なし float 値を比較したとき、最初の値が 2 番目の値を超える場合は、ターゲット命令 (短い形式) に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-339">Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-340">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-340">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-341">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-341">Format</span></span>|<span data-ttu-id="e5fd8-342">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-342">Assembly Format</span></span>|<span data-ttu-id="e5fd8-343">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-343">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-344">34 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-344">34 < `int8` ></span></span>|<span data-ttu-id="e5fd8-345">bge `target`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-345">bge.un.s `target`</span></span>|<span data-ttu-id="e5fd8-346">最初の値が2番目の値 (符号なしの値)、短い形式の場合、指定したオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-346">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="e5fd8-347">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-347">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-348">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-348">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-349">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-349">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-350">`value2` と `value1` がスタックからポップされます。`value1` が `value2`以上の場合は、分岐操作が実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-350">`value2` and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="e5fd8-351">`bge.un.s` 命令は、符号なし整数または順序なし float 値を使用して比較した場合に、`value1` が `value2`以上の場合に、指定されたターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-351">The `bge.un.s` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="e5fd8-352">効果は、`clt.un` 命令 (float の`clt`) の後に特定のターゲット命令への `brfalse` 分岐が実行されることと同じです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-352">The effect is identical to performing a `clt.un` instruction (`clt` for floats) followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="e5fd8-353">ターゲット命令は、現在の命令に続く命令の先頭からの1バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-353">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-354">ターゲット命令に1つ以上のプレフィックスコードがある場合、control はこれらのプレフィックスの最初の部分にのみ転送できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-354">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="e5fd8-355">`try`、`catch`、`filter`、および `finally` ブロックとの間での転送の制御は、この命令では実行できません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-355">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-356">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`bge.un.s` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-356">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge.un.s` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.Label%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bgt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bgt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-357">最初の値が 2 番目の値を超える場合は、ターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-357">Transfers control to a target instruction if the first value is greater than the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-358">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-358">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-359">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-359">Format</span></span>|<span data-ttu-id="e5fd8-360">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-360">Assembly Format</span></span>|<span data-ttu-id="e5fd8-361">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-361">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-362">3D < `int32` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-362">3D < `int32` ></span></span>|<span data-ttu-id="e5fd8-363">bgt `target`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-363">bgt `target`</span></span>|<span data-ttu-id="e5fd8-364">最初の値が2番目の値よりも大きい場合は、指定されたオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-364">Branch to the target instruction at the specified offset if the first value is greater than the second value.</span></span>|  
  
 <span data-ttu-id="e5fd8-365">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-365">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-366">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-366">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-367">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-367">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-368">`value2` と `value1` がスタックからポップされます。`value1` が `value2`より大きい場合は、分岐操作が実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-368">`value2` and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="e5fd8-369">`bgt` 命令は、`value1` が `value2`より大きい場合に、指定されたターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-369">The `bgt` instruction transfers control to the specified target instruction if `value1` is greater than `value2`.</span></span> <span data-ttu-id="e5fd8-370">効果は、`cgt` 命令の後に特定のターゲット命令への `brtrue` 分岐が実行されることと同じです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-370">The effect is identical to performing a `cgt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="e5fd8-371">ターゲット命令は、現在の命令に続く命令の先頭からの4バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-371">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-372">ターゲット命令に1つ以上のプレフィックスコードがある場合、control はこれらのプレフィックスの最初の部分にのみ転送できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-372">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="e5fd8-373">`try`、`catch`、`filter`、および `finally` ブロックとの間での転送の制御は、この命令では実行できません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-373">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-374">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`bgt` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-374">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.Label%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bgt_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bgt_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-375">最初の値が 2 番目の値を超える場合は、ターゲット命令 (短い形式) に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-375">Transfers control to a target instruction (short form) if the first value is greater than the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-376">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-376">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-377">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-377">Format</span></span>|<span data-ttu-id="e5fd8-378">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-378">Assembly Format</span></span>|<span data-ttu-id="e5fd8-379">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-379">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-380">30 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-380">30 < `int8` ></span></span>|<span data-ttu-id="e5fd8-381">bgt `target`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-381">bgt.s `target`</span></span>|<span data-ttu-id="e5fd8-382">最初の値が2番目の値 (短い形式) よりも大きい場合は、指定されたオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-382">Branch to the target instruction at the specified offset if the first value is greater than the second value, short form.</span></span>|  
  
 <span data-ttu-id="e5fd8-383">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-383">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-384">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-384">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-385">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-385">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-386">`value2` と `value1` がスタックからポップされます。`value1` が `value2`より大きい場合は、分岐操作が実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-386">`value2` and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="e5fd8-387">`bgt.s` 命令は、`value1` が `value2`より大きい場合に、指定されたターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-387">The `bgt.s` instruction transfers control to the specified target instruction if `value1` is greater than `value2`.</span></span> <span data-ttu-id="e5fd8-388">効果は、`cgt` 命令の後に特定のターゲット命令への `brtrue` 分岐が実行されることと同じです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-388">The effect is identical to performing a `cgt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="e5fd8-389">ターゲット命令は、現在の命令に続く命令の先頭からの1バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-389">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-390">ターゲット命令に1つ以上のプレフィックスコードがある場合、control はこれらのプレフィックスの最初の部分にのみ転送できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-390">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="e5fd8-391">`try`、`catch`、`filter`、および `finally` ブロックとの間での転送の制御は、この命令では実行できません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-391">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-392">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`bgt.s` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-392">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt.s` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.Label%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bgt_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bgt_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-393">符号なし整数値または順序なし float 値を比較したとき、最初の値が 2 番目の値を超える場合は、ターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-393">Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-394">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-394">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-395">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-395">Format</span></span>|<span data-ttu-id="e5fd8-396">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-396">Assembly Format</span></span>|<span data-ttu-id="e5fd8-397">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-397">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-398">42 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-398">42 < `int32` ></span></span>|<span data-ttu-id="e5fd8-399">bgt `target`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-399">bgt.un `target`</span></span>|<span data-ttu-id="e5fd8-400">最初の値が2番目の値 (符号なしの値) よりも大きい場合は、指定されたオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-400">Branch to the target instruction at the specified offset if the first value is greater than the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="e5fd8-401">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-401">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-402">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-402">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-403">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-403">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-404">`value2` と `value1` がスタックからポップされます。`value1` が `value2`より大きい場合は、分岐操作が実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-404">`value2` and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="e5fd8-405">`bgt.un` 命令は、符号なし整数または順序なし float 値を使用して比較した場合に、`value1` が `value2`より大きい場合は、指定されたターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-405">The `bgt.un` instruction transfers control to the specified target instruction if `value1` is greater than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="e5fd8-406">効果は、`cgt.un` 命令の後に特定のターゲット命令への `brtrue` 分岐が実行されることと同じです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-406">The effect is identical to performing a `cgt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="e5fd8-407">ターゲット命令は、現在の命令に続く命令の先頭からの4バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-407">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-408">ターゲット命令に1つ以上のプレフィックスコードがある場合、control はこれらのプレフィックスの最初の部分にのみ転送できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-408">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="e5fd8-409">`try`、`catch`、`filter`、および `finally` ブロックとの間での転送の制御は、この命令では実行できません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-409">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-410">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`bgt.un` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-410">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt.un` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.Label%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bgt_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bgt_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-411">符号なし整数値または順序なし float 値を比較したとき、最初の値が 2 番目の値を超える場合は、ターゲット命令 (短い形式) に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-411">Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-412">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-412">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-413">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-413">Format</span></span>|<span data-ttu-id="e5fd8-414">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-414">Assembly Format</span></span>|<span data-ttu-id="e5fd8-415">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-415">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-416">35 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-416">35 < `int8` ></span></span>|<span data-ttu-id="e5fd8-417">bgt `target`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-417">bgt.un.s `target`</span></span>|<span data-ttu-id="e5fd8-418">最初の値が2番目の値 (符号なしの値) (短い形式) よりも大きい場合は、指定されたオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-418">Branch to the target instruction at the specified offset if the first value is greater than the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="e5fd8-419">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-419">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-420">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-420">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-421">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-421">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-422">`value2` と `value1` がスタックからポップされます。`value1` が `value2`より大きい場合は、分岐操作が実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-422">`value2` and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="e5fd8-423">`bgt.un.s` 命令は、符号なし整数または順序なし float 値を使用して比較した場合に、`value1` が `value2`より大きい場合は、指定されたターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-423">The `bgt.un.s` instruction transfers control to the specified target instruction if `value1` is greater than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="e5fd8-424">効果は、`cgt.un` 命令の後に特定のターゲット命令への `brtrue` 分岐が実行されることと同じです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-424">The effect is identical to performing a `cgt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="e5fd8-425">ターゲット命令は、現在の命令に続く命令の先頭からの1バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-425">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-426">ターゲット命令に1つ以上のプレフィックスコードがある場合、control はこれらのプレフィックスの最初の部分にのみ転送できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-426">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="e5fd8-427">`try`、`catch`、`filter`、および `finally` ブロックとの間での転送の制御は、この命令では実行できません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-427">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-428">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`bgt.un.s` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-428">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt.un.s` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.Label%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ble : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ble" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-429">最初の値が 2 番目の値以下の場合は、ターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-429">Transfers control to a target instruction if the first value is less than or equal to the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-430">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-430">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-431">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-431">Format</span></span>|<span data-ttu-id="e5fd8-432">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-432">Assembly Format</span></span>|<span data-ttu-id="e5fd8-433">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-433">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-434">3E `<int32>`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-434">3E `<int32>`</span></span>|<span data-ttu-id="e5fd8-435">`target`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-435">ble `target`</span></span>|<span data-ttu-id="e5fd8-436">最初の値が2番目の値以下の場合は、指定されたオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-436">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value.</span></span>|  
  
 <span data-ttu-id="e5fd8-437">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-437">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-438">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-438">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-439">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-439">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-440">`value2` と `value1` がスタックからポップされます。`value1` が `value2`以下の場合は、分岐操作が実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-440">`value2` and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="e5fd8-441">`ble` 命令は、`value1` が `value2`以下の場合に、指定されたターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-441">The `ble` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`.</span></span> <span data-ttu-id="e5fd8-442">効果は、`cgt` 命令 (float の`cgt.un`) の後に特定のターゲット命令への `brfalse` 分岐が実行されることと同じです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-442">The effect is identical to performing a `cgt` instruction (`cgt.un` for floats) followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="e5fd8-443">ターゲット命令は、現在の命令に続く命令の先頭からの4バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-443">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-444">ターゲット命令に1つ以上のプレフィックスコードがある場合、control はこれらのプレフィックスの最初の部分にのみ転送できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-444">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="e5fd8-445">`try`、`catch`、`filter`、および `finally` ブロックとの間での転送の制御は、この命令では実行できません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-445">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-446">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ble` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-446">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.Label%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ble_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ble_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-447">最初の値が 2 番目の値以下の場合は、ターゲット命令 (短い形式) に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-447">Transfers control to a target instruction (short form) if the first value is less than or equal to the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-448">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-448">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-449">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-449">Format</span></span>|<span data-ttu-id="e5fd8-450">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-450">Assembly Format</span></span>|<span data-ttu-id="e5fd8-451">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-451">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-452">31 `<int8>`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-452">31 `<int8>`</span></span>|<span data-ttu-id="e5fd8-453">`target`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-453">ble.s `target`</span></span>|<span data-ttu-id="e5fd8-454">最初の値が2番目の値 (短い形式) 以下の場合は、指定したオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-454">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value, short form.</span></span>|  
  
 <span data-ttu-id="e5fd8-455">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-455">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-456">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-456">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-457">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-457">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-458">`value2` と `value1` がスタックからポップされます。`value1` が `value2`以下の場合は、分岐操作が実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-458">`value2` and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="e5fd8-459">`ble.s` 命令は、`value1` が `value2`以下の場合に、指定されたターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-459">The `ble.s` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`.</span></span> <span data-ttu-id="e5fd8-460">効果は、`cgt` 命令 (float の場合は`cgt.un`) 命令の後に特定のターゲット命令への`brfalse` 分岐が実行されることと同じです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-460">The effect is identical to performing a `cgt` instruction (`cgt.un` for floats) instruction followed by a`brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="e5fd8-461">ターゲット命令は、現在の命令に続く命令の先頭からの1バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-461">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-462">ターゲット命令に1つ以上のプレフィックスコードがある場合、control はこれらのプレフィックスの最初の部分にのみ転送できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-462">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="e5fd8-463">`try`、`catch`、`filter`、および `finally` ブロックとの間での転送の制御は、この命令では実行できません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-463">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-464">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ble.s` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-464">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble.s` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.Label%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ble_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ble_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-465">符号なし整数値または順序なし float 値を比較したとき、最初の値が 2 番目の値以下の場合は、ターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-465">Transfers control to a target instruction if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-466">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-466">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-467">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-467">Format</span></span>|<span data-ttu-id="e5fd8-468">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-468">Assembly Format</span></span>|<span data-ttu-id="e5fd8-469">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-469">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-470">43 `<int32>`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-470">43 `<int32>`</span></span>|<span data-ttu-id="e5fd8-471">`target` を解除します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-471">ble.un `target`</span></span>|<span data-ttu-id="e5fd8-472">最初の値が2番目の値 (符号なしの値) 以下の場合は、指定されたオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-472">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="e5fd8-473">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-473">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-474">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-474">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-475">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-475">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-476">`value2` と `value1` がスタックからポップされます。`value1` が `value2`以下の場合は、分岐操作が実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-476">`value2` and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="e5fd8-477">`ble.un` 命令は、符号なし整数または順序なし float 値を使用して比較した場合に、`value1` が `value2`以下である場合に、指定されたターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-477">The `ble.un` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="e5fd8-478">効果は、`cgt.un` 命令 (float の`cgt`) の後に特定のターゲット命令への `brfalse` 分岐が実行されることと同じです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-478">The effect is identical to performing a `cgt.un` instruction (`cgt` for floats) followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="e5fd8-479">ターゲット命令は、現在の命令に続く命令の先頭からの4バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-479">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-480">ターゲット命令に1つ以上のプレフィックスコードがある場合、control はこれらのプレフィックスの最初の部分にのみ転送できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-480">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="e5fd8-481">`try`、`catch`、`filter`、および `finally` ブロックとの間での転送の制御は、この命令では実行できません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-481">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-482">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ble.un` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-482">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble.un` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.Label%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ble_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ble_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-483">符号なし整数値または順序なし float 値を比較したとき、最初の値が 2 番目の値以下の場合は、ターゲット命令 (短い形式) に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-483">Transfers control to a target instruction (short form) if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-484">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-484">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-485">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-485">Format</span></span>|<span data-ttu-id="e5fd8-486">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-486">Assembly Format</span></span>|<span data-ttu-id="e5fd8-487">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-487">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-488">36 `<int8>`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-488">36 `<int8>`</span></span>|<span data-ttu-id="e5fd8-489">`target` を解除します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-489">ble.un.s `target`</span></span>|<span data-ttu-id="e5fd8-490">最初の値が2番目の値 (符号なしの値)、短い形式の場合、指定したオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-490">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="e5fd8-491">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-491">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-492">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-492">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-493">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-493">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-494">`value2` と `value1` がスタックからポップされます。`value1` が `value2`以下の場合は、分岐操作が実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-494">`value2` and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="e5fd8-495">`ble.un.s` 命令は、符号なし整数または順序なし float 値を使用して比較した場合に、`value1` が `value2`以下である場合に、指定されたターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-495">The `ble.un.s` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="e5fd8-496">効果は、`cgt.un` 命令 (float の`cgt`) の後に特定のターゲット命令への `brfalse` 分岐が実行されることと同じです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-496">The effect is identical to performing a `cgt.un` instruction (`cgt` for floats) followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="e5fd8-497">ターゲット命令は、現在の命令に続く命令の先頭からの1バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-497">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-498">ターゲット命令に1つ以上のプレフィックスコードがある場合、control はこれらのプレフィックスの最初の部分にのみ転送できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-498">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="e5fd8-499">`try`、`catch`、`filter`、および `finally` ブロックとの間での転送の制御は、この命令では実行できません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-499">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-500">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ble.un.s` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-500">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble.un.s` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.Label%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Blt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Blt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-501">最初の値が 2 番目の値より小さい場合は、ターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-501">Transfers control to a target instruction if the first value is less than the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-502">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-502">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-503">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-503">Format</span></span>|<span data-ttu-id="e5fd8-504">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-504">Assembly Format</span></span>|<span data-ttu-id="e5fd8-505">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-505">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-506">3F < `int32` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-506">3F < `int32` ></span></span>|<span data-ttu-id="e5fd8-507">blt `target`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-507">blt `target`</span></span>|<span data-ttu-id="e5fd8-508">最初の値が2番目の値より小さい場合は、指定されたオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-508">Branch to the target instruction at the specified offset if the first value is less than the second value.</span></span>|  
  
 <span data-ttu-id="e5fd8-509">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-509">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-510">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-510">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-511">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-511">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-512">`value2` と `value1` がスタックからポップされます。`value1` が `value2`未満の場合は、分岐操作が実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-512">`value2` and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="e5fd8-513">`blt` 命令は、`value1` が `value2`以下の場合に、指定されたターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-513">The `blt` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`.</span></span> <span data-ttu-id="e5fd8-514">効果は、`clt` 命令の後に特定のターゲット命令への `brtrue` 分岐が実行されることと同じです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-514">The effect is identical to performing a `clt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="e5fd8-515">ターゲット命令は、現在の命令に続く命令の先頭からの4バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-515">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-516">ターゲット命令に1つ以上のプレフィックスコードがある場合、control はこれらのプレフィックスの最初の部分にのみ転送できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-516">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="e5fd8-517">`try`、`catch`、`filter`、および `finally` ブロックとの間での転送の制御は、この命令では実行できません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-517">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-518">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`blt` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-518">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.Label%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Blt_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Blt_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-519">最初の値が 2 番目の値より小さい場合は、ターゲット命令 (短い形式) に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-519">Transfers control to a target instruction (short form) if the first value is less than the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-520">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-520">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-521">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-521">Format</span></span>|<span data-ttu-id="e5fd8-522">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-522">Assembly Format</span></span>|<span data-ttu-id="e5fd8-523">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-523">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-524">32 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-524">32 < `int8` ></span></span>|<span data-ttu-id="e5fd8-525">blt `target`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-525">blt.s `target`</span></span>|<span data-ttu-id="e5fd8-526">最初の値が2番目の値 (短い形式) より小さい場合は、指定されたオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-526">Branch to the target instruction at the specified offset if the first value is less than the second value, short form.</span></span>|  
  
 <span data-ttu-id="e5fd8-527">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-527">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-528">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-528">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-529">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-529">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-530">`value2` と `value1` がスタックからポップされます。`value1` が `value2`未満の場合は、分岐操作が実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-530">`value2` and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="e5fd8-531">`blt.s` 命令は、`value1` が `value2`より小さい場合に、指定されたターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-531">The `blt.s` instruction transfers control to the specified target instruction if `value1` is less than `value2`.</span></span> <span data-ttu-id="e5fd8-532">効果は、`clt` 命令の後に特定のターゲット命令への `brtrue` 分岐が実行されることと同じです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-532">The effect is identical to performing a `clt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="e5fd8-533">ターゲット命令は、現在の命令に続く命令の先頭からの1バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-533">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-534">ターゲット命令に1つ以上のプレフィックスコードがある場合、control はこれらのプレフィックスの最初の部分にのみ転送できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-534">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="e5fd8-535">`try`、`catch`、`filter`、および `finally` ブロックとの間での転送の制御は、この命令では実行できません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-535">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-536">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`blt.s` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-536">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt.s` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.Label%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Blt_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Blt_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-537">符号なし整数値または順序なし float 値を比較したとき、最初の値が 2 番目の値より小さい場合は、ターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-537">Transfers control to a target instruction if the first value is less than the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-538">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-538">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-539">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-539">Format</span></span>|<span data-ttu-id="e5fd8-540">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-540">Assembly Format</span></span>|<span data-ttu-id="e5fd8-541">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-541">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-542">44 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-542">44 < `int32` ></span></span>|<span data-ttu-id="e5fd8-543">blt `target`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-543">blt.un `target`</span></span>|<span data-ttu-id="e5fd8-544">最初の値が2番目の値 (符号なしの値) より小さい場合は、指定されたオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-544">Branch to the target instruction at the specified offset if the first value is less than the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="e5fd8-545">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-545">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-546">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-546">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-547">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-547">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-548">`value2` と `value1` がスタックからポップされます。`value1` が `value2`未満の場合は、分岐操作が実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-548">`value2` and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="e5fd8-549">`blt.un` 命令は、符号なし整数または順序なし float 値を使用して比較した場合に、`value1` が `value2`未満の場合に、指定されたターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-549">The `blt.un` instruction transfers control to the specified target instruction if `value1` is less than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="e5fd8-550">効果は、`clt.un` 命令の後に特定のターゲット命令への `brtrue` 分岐が実行されることと同じです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-550">The effect is identical to performing a `clt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="e5fd8-551">ターゲット命令は、現在の命令に続く命令の先頭からの4バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-551">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-552">ターゲット命令に1つ以上のプレフィックスコードがある場合、control はこれらのプレフィックスの最初の部分にのみ転送できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-552">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="e5fd8-553">`try`、`catch`、`filter`、および `finally` ブロックとの間での転送の制御は、この命令では実行できません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-553">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-554">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`blt.un` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-554">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt.un` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.Label%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Blt_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Blt_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-555">符号なし整数値または順序なし float 値を比較したとき、最初の値が 2 番目の値より小さい場合は、ターゲット命令 (短い形式) に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-555">Transfers control to a target instruction (short form) if the first value is less than the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-556">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-556">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-557">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-557">Format</span></span>|<span data-ttu-id="e5fd8-558">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-558">Assembly Format</span></span>|<span data-ttu-id="e5fd8-559">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-559">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-560">37 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-560">37 < `int8` ></span></span>|<span data-ttu-id="e5fd8-561">blt. s `target`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-561">blt.un.s `target`</span></span>|<span data-ttu-id="e5fd8-562">最初の値が2番目の値 (符号なしの値) (短い形式) よりも小さい場合は、指定したオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-562">Branch to the target instruction at the specified offset if the first value is less than the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="e5fd8-563">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-563">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-564">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-564">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-565">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-565">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-566">`value2` と `value1` がスタックからポップされます。`value1` が `value2`未満の場合は、分岐操作が実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-566">`value2` and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="e5fd8-567">`blt.un` 命令は、符号なし整数または順序なし float 値を使用して比較した場合に、`value1` が `value2`未満の場合に、指定されたターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-567">The `blt.un` instruction transfers control to the specified target instruction if `value1` is less than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="e5fd8-568">効果は、`clt.un` 命令の後に特定のターゲット命令への `brtrue` 分岐が実行されることと同じです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-568">The effect is identical to performing a `clt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="e5fd8-569">ターゲット命令は、現在の命令に続く命令の先頭からの4バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-569">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-570">ターゲット命令に1つ以上のプレフィックスコードがある場合、control はこれらのプレフィックスの最初の部分にのみ転送できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-570">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="e5fd8-571">`try`、`catch`、`filter`、および `finally` ブロックとの間での転送の制御は、この命令では実行できません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-571">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-572">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`blt.un.s` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-572">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt.un.s` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.Label%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bne_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bne_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bne_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bne_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bne_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bne_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bne_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bne_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-573">2 つの符号なし整数値または順序なし float 値が等しくない場合は、ターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-573">Transfers control to a target instruction when two unsigned integer values or unordered float values are not equal.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-574">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-574">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-575">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-575">Format</span></span>|<span data-ttu-id="e5fd8-576">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-576">Assembly Format</span></span>|<span data-ttu-id="e5fd8-577">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-577">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-578">40 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-578">40 < `int32` ></span></span>|<span data-ttu-id="e5fd8-579">bne `target`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-579">bne.un `target`</span></span>|<span data-ttu-id="e5fd8-580">2つの符号なし整数値が等しくない場合 (符号なしの値)、指定されたオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-580">Branch to the target instruction at the specified offset if two unsigned integer values are not equal (unsigned values).</span></span>|  
  
 <span data-ttu-id="e5fd8-581">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-581">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-582">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-582">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-583">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-583">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-584">`value2` と `value1` がスタックからポップされます。`value1` が `value2`と等しくない場合は、分岐操作が実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-584">`value2` and `value1` are popped from the stack; if `value1` is not equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="e5fd8-585">`bne.un` 命令は、符号なし整数または順序なし float 値を使用して比較した場合に、`value1` が `value2`と等しくない場合に、指定されたターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-585">The `bne.un` instruction transfers control to the specified target instruction if `value1` is not equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="e5fd8-586">効果は、`ceq` 命令の後に特定のターゲット命令への `brfalse` 分岐が実行されることと同じです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-586">The effect is identical to performing a `ceq` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="e5fd8-587">ターゲット命令は、現在の命令に続く命令の先頭からの4バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-587">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-588">ターゲット命令に1つ以上のプレフィックスコードがある場合、control はこれらのプレフィックスの最初の部分にのみ転送できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-588">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="e5fd8-589">`try`、`catch`、`filter`、および `finally` ブロックとの間での転送の制御は、この命令では実行できません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-589">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-590">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`bne.un` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-590">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bne.un` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.Label%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bne_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bne_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bne_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bne_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bne_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bne_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bne_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bne_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-591">2 つの符号なし整数値または順序なし float 値が等しくない場合は、ターゲット命令 (短い形式) に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-591">Transfers control to a target instruction (short form) when two unsigned integer values or unordered float values are not equal.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-592">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-592">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-593">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-593">Format</span></span>|<span data-ttu-id="e5fd8-594">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-594">Assembly Format</span></span>|<span data-ttu-id="e5fd8-595">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-595">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-596">33 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-596">33 < `int8` ></span></span>|<span data-ttu-id="e5fd8-597">bne `target`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-597">bne.un.s `target`</span></span>|<span data-ttu-id="e5fd8-598">2つの符号なし整数値が等しくない場合 (符号なしの値)、短い形式の場合、指定したオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-598">Branch to the target instruction at the specified offset if two unsigned integer values are not equal (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="e5fd8-599">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-599">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-600">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-600">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-601">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-601">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-602">`value2` と `value1` がスタックからポップされます。`value1` が `value2`と等しくない場合は、分岐操作が実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-602">`value2` and `value1` are popped from the stack; if `value1` is not equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="e5fd8-603">`bne.un` 命令は、符号なし整数または順序なし float 値を使用して比較した場合に、`value1` が `value2`と等しくない場合に、指定されたターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-603">The `bne.un` instruction transfers control to the specified target instruction if `value1` is not equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="e5fd8-604">効果は、`ceq` 命令の後に特定のターゲット命令への `brfalse` 分岐が実行されることと同じです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-604">The effect is identical to performing a `ceq` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="e5fd8-605">ターゲット命令は、現在の命令に続く命令の先頭からの4バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-605">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-606">ターゲット命令に1つ以上のプレフィックスコードがある場合、control はこれらのプレフィックスの最初の部分にのみ転送できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-606">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="e5fd8-607">`try`、`catch`、`filter`、および `finally` ブロックとの間での転送の制御は、この命令では実行できません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-607">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-608">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`bne.un.s` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-608">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bne.un.s` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.Label%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Box">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Box;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Box" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Box" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Box As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Box;" />
      <MemberSignature Language="F#" Value=" staticval mutable Box : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Box" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-609">値型をオブジェクト参照 (<see langword="O" /> 型) に変換します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-609">Converts a value type to an object reference (type <see langword="O" />).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-610">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-610">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-611">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-611">Format</span></span>|<span data-ttu-id="e5fd8-612">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-612">Assembly Format</span></span>|<span data-ttu-id="e5fd8-613">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-613">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-614">8C < `T` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-614">8C < `T` ></span></span>|<span data-ttu-id="e5fd8-615">box `valTypeToken`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-615">box `valTypeToken`</span></span>|<span data-ttu-id="e5fd8-616">値の型 (`valTypeToken`で指定された型) を true オブジェクト参照に変換します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-616">Convert a value type (of the type specified in `valTypeToken`) to a true object reference.</span></span>|  
  
 <span data-ttu-id="e5fd8-617">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-617">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-618">値型がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-618">A value type is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-619">値の型がスタックからポップされます。`box` 操作が実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-619">The value type is popped from the stack; the `box` operation is performed.</span></span>  
  
3.  <span data-ttu-id="e5fd8-620">結果の "ボックス化された" 値型へのオブジェクト参照がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-620">An object reference to the resulting "boxed" value type is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-621">値型には、共通言語基盤 (CLI) 内の2つの異なる表現があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-621">A value type has two separate representations within the Common Language Infrastructure (CLI):</span></span>  
  
-   <span data-ttu-id="e5fd8-622">値型が別のオブジェクトまたはスタックに埋め込まれている場合に使用される ' 未加工 ' フォーム。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-622">A 'raw' form used when a value type is embedded within another object or on the stack.</span></span>  
  
-   <span data-ttu-id="e5fd8-623">' ボックス化された ' フォーム。値型のデータは、独立したエンティティとして存在できるように、オブジェクトにラップ (ボックス化) されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-623">A 'boxed' form, where the data in the value type is wrapped (boxed) into an object so it can exist as an independent entity.</span></span>  
  
 <span data-ttu-id="e5fd8-624">`box` 命令は、' raw ' (ボックス化が解除された) 値型をオブジェクト参照 (型 `O`) に変換します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-624">The `box` instruction converts the 'raw' (unboxed) value type into an object reference (type `O`).</span></span> <span data-ttu-id="e5fd8-625">これは、新しいオブジェクトを作成し、値型から新しく割り当てられたオブジェクトにデータをコピーすることで実現されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-625">This is accomplished by creating a new object and copying the data from the value type into the newly allocated object.</span></span> <span data-ttu-id="e5fd8-626">`valTypeToken` は、スタック上の値型の型を示すメタデータトークンです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-626">`valTypeToken` is a metadata token indicating the type of the value type on the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-627"><xref:System.OutOfMemoryException> は、要求を満たすのに十分なメモリがない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-627"><xref:System.OutOfMemoryException> is thrown if there is insufficient memory to satisfy the request.</span></span>  
  
 <span data-ttu-id="e5fd8-628">クラスが見つからない場合、<xref:System.TypeLoadException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-628"><xref:System.TypeLoadException> is thrown if the class cannot be found.</span></span> <span data-ttu-id="e5fd8-629">これは通常、Microsoft 中間言語 (MSIL) が実行時ではなくネイティブコードに変換された場合に検出されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-629">This is typically detected when Microsoft Intermediate Language (MSIL) is converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="e5fd8-630">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`box` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-630">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `box` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Type%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Br">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Br;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Br" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Br" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Br As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Br;" />
      <MemberSignature Language="F#" Value=" staticval mutable Br : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Br" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-631">無条件でターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-631">Unconditionally transfers control to a target instruction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-632">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-632">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-633">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-633">Format</span></span>|<span data-ttu-id="e5fd8-634">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-634">Assembly Format</span></span>|<span data-ttu-id="e5fd8-635">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-635">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-636">38 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-636">38 < `int32` ></span></span>|<span data-ttu-id="e5fd8-637">br `target`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-637">br `target`</span></span>|<span data-ttu-id="e5fd8-638">指定されたオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-638">Branches to a target instruction at the specified offset.</span></span>|  
  
 <span data-ttu-id="e5fd8-639">この操作では、評価スタックの動作は実行されません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-639">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="e5fd8-640">`br` 命令は、無条件でターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-640">The `br` instruction unconditionally transfers control to a target instruction.</span></span> <span data-ttu-id="e5fd8-641">ターゲット命令は、現在の命令に続く命令の先頭からの4バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-641">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-642">ターゲット命令に1つ以上のプレフィックスコードがある場合、control はこれらのプレフィックスの最初の部分にのみ転送できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-642">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="e5fd8-643">`try`、`catch`、`filter`、および `finally` ブロックとの間での転送の制御は、この命令では実行できません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-643">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-644">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`br` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-644">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `br` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.Label%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Br_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Br_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Br_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Br_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Br_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Br_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Br_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Br_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-645">無条件でターゲット命令に制御を転送します (短い形式)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-645">Unconditionally transfers control to a target instruction (short form).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-646">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-646">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-647">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-647">Format</span></span>|<span data-ttu-id="e5fd8-648">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-648">Assembly Format</span></span>|<span data-ttu-id="e5fd8-649">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-649">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-650">2B < `int8` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-650">2B < `int8` ></span></span>|<span data-ttu-id="e5fd8-651">br. s `target`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-651">br.s `target`</span></span>|<span data-ttu-id="e5fd8-652">指定されたオフセット (短い形式) でターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-652">Branches to a target instruction at the specified offset, short form.</span></span>|  
  
 <span data-ttu-id="e5fd8-653">この操作では、評価スタックの動作は実行されません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-653">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="e5fd8-654">`br.s` 命令は、無条件でターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-654">The `br.s` instruction unconditionally transfers control to a target instruction.</span></span> <span data-ttu-id="e5fd8-655">ターゲット命令は、現在の命令に続く命令の先頭からの1バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-655">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-656">ターゲット命令に1つ以上のプレフィックスコードがある場合、control はこれらのプレフィックスの最初の部分にのみ転送できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-656">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="e5fd8-657">`try`、`catch`、`filter`、および `finally` ブロックとの間での転送の制御は、この命令では実行できません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-657">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-658">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`br.s` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-658">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `br.s` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.Label%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Break;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Break" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Break" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Break As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Break;" />
      <MemberSignature Language="F#" Value=" staticval mutable Break : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Break" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-659">ブレークポイントがトリップしたことをデバッガーに通知するように、共通言語基盤 (CLI) に通知します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-659">Signals the Common Language Infrastructure (CLI) to inform the debugger that a break point has been tripped.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-660">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-660">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-661">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-661">Format</span></span>|<span data-ttu-id="e5fd8-662">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-662">Assembly Format</span></span>|<span data-ttu-id="e5fd8-663">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-663">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-664">01</span><span class="sxs-lookup"><span data-stu-id="e5fd8-664">01</span></span>|<span data-ttu-id="e5fd8-665">break</span><span class="sxs-lookup"><span data-stu-id="e5fd8-665">break</span></span>|<span data-ttu-id="e5fd8-666">ブレークポイントに達したことをデバッガーに通知します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-666">inform a debugger that a breakpoint has been reached.</span></span>|  
  
 <span data-ttu-id="e5fd8-667">この操作では、評価スタックの動作は実行されません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-667">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="e5fd8-668">`break` 命令は、デバッグをサポートするためのものです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-668">The `break` instruction is for debugging support.</span></span> <span data-ttu-id="e5fd8-669">これは、ブレークポイントがトリップしたことをデバッガーに通知するよう CLI に通知します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-669">It signals the CLI to inform the debugger that a break point has been tripped.</span></span> <span data-ttu-id="e5fd8-670">インタープリターの状態に他の影響はありません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-670">It has no other effect on the interpreter state.</span></span>  
  
 <span data-ttu-id="e5fd8-671">`break` 命令には、ブレークポイントを使用してコードを修正し、周囲のコードへの影響を最小限に抑えることができる最小の命令サイズがあります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-671">The `break` instruction has the smallest possible instruction size enabling code patching with a break point and generating minimal disturbance to the surrounding code.</span></span>  
  
 <span data-ttu-id="e5fd8-672">`break` 命令は、デバッガーへのトラップ、何も行わない、またはセキュリティ例外を発生させることができます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-672">The `break` instruction can trap to a debugger, do nothing, or raise a security exception.</span></span> <span data-ttu-id="e5fd8-673">実際の動作は実装定義です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-673">The exact behavior is implementation-defined.</span></span>  
  
 <span data-ttu-id="e5fd8-674">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`break` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-674">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `break` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brfalse">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brfalse;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brfalse" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brfalse" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brfalse As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brfalse;" />
      <MemberSignature Language="F#" Value=" staticval mutable Brfalse : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Brfalse" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-675"><paramref name="value" /> が <see langword="false" />、null 参照 (Visual Basic の場合は <see langword="Nothing" />)、または 0 の場合は、ターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-675">Transfers control to a target instruction if <paramref name="value" /> is <see langword="false" />, a null reference (<see langword="Nothing" /> in Visual Basic), or zero.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-676">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-676">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-677">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-677">Format</span></span>|<span data-ttu-id="e5fd8-678">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-678">Assembly Format</span></span>|<span data-ttu-id="e5fd8-679">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-679">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-680">39 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-680">39 < `int32` ></span></span>|<span data-ttu-id="e5fd8-681">brfalse `target`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-681">brfalse `target`</span></span><br /><br /> <span data-ttu-id="e5fd8-682">brnull `target`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-682">brnull `target`</span></span><br /><br /> <span data-ttu-id="e5fd8-683">brzero `target`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-683">brzero `target`</span></span>|<span data-ttu-id="e5fd8-684">`false`場合は、指定されたオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-684">Branches to a target instruction at the specified offset if `false`.</span></span>|  
  
 <span data-ttu-id="e5fd8-685">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-685">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-686">`value` は、前の操作によってスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-686">`value` is pushed onto the stack by a previous operation.</span></span>  
  
2.  <span data-ttu-id="e5fd8-687">`value` がスタックからポップされます。`value` が `false`場合は `target`に分岐します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-687">`value` is popped from the stack; if `value` is `false`, branch to `target`.</span></span>  
  
 <span data-ttu-id="e5fd8-688">`value` (型 `int32`、`int64`、オブジェクト参照 `O`、マネージポインター `&`、transient ポインター `*`、`native int`) が 0 (`false`) の場合、`brfalse` 命令 (およびそのエイリアス `brnull` と `brzero`) は、指定されたターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-688">The `brfalse` instruction (and its aliases `brnull` and `brzero`) transfers control to the specified target instruction if `value` (of type `int32`, `int64`, object reference `O`, managed pointer `&`, transient pointer `*`, `native int`) is zero (`false`).</span></span> <span data-ttu-id="e5fd8-689">`value` が0以外 (`true`) の場合、次の命令で実行が続行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-689">If `value` is non-zero (`true`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-690">ターゲット命令は、現在の命令に続く命令の先頭からの4バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-690">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-691">ターゲット命令に1つ以上のプレフィックスコードがある場合、control はこれらのプレフィックスの最初の部分にのみ転送できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-691">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="e5fd8-692">`try`、`catch`、`filter`、および `finally` ブロックとの間での転送の制御は、この命令では実行できません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-692">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-693">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`brfalse` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-693">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brfalse` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.Label%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brfalse_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brfalse_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brfalse_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brfalse_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brfalse_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brfalse_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Brfalse_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Brfalse_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-694"><paramref name="value" /> が <see langword="false" />、null 参照または 0 の場合は、ターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-694">Transfers control to a target instruction if <paramref name="value" /> is <see langword="false" />, a null reference, or zero.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-695">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-695">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-696">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-696">Format</span></span>|<span data-ttu-id="e5fd8-697">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-697">Assembly Format</span></span>|<span data-ttu-id="e5fd8-698">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-698">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-699">2C <`int8` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-699">2C <`int8` ></span></span>|<span data-ttu-id="e5fd8-700">brfalse `target`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-700">brfalse.s `target`</span></span><br /><br /> <span data-ttu-id="e5fd8-701">brnull. s `target`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-701">brnull.s `target`</span></span><br /><br /> <span data-ttu-id="e5fd8-702">brzero s `target`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-702">brzero.s `target`</span></span>|<span data-ttu-id="e5fd8-703">`false`、短い形式の場合は、指定されたオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-703">Branches to a target instruction at the specified offset if `false`, short form.</span></span>|  
  
 <span data-ttu-id="e5fd8-704">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-704">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-705">`value` は、前の操作によってスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-705">`value` is pushed onto the stack by a previous operation.</span></span>  
  
2.  <span data-ttu-id="e5fd8-706">`value` がスタックからポップされます。`value` が `false`場合は `target`に分岐します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-706">`value` is popped from the stack; if `value` is `false`, branch to `target`.</span></span>  
  
 <span data-ttu-id="e5fd8-707">`value` (型 `int32`、`int64`、オブジェクト参照 `O`、マネージポインター `&`、transient ポインター `*`、`native int`) が 0 (`false`) の場合、`brfalse.s` 命令 (およびそのエイリアス `brnull` と `brzero`) は、指定されたターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-707">The `brfalse.s` instruction (and its aliases `brnull` and `brzero`) transfers control to the specified target instruction if `value` (of type `int32`, `int64`, object reference `O`, managed pointer `&`, transient pointer `*`, `native int`) is zero (`false`).</span></span> <span data-ttu-id="e5fd8-708">`value` が0以外 (`true`) の場合、次の命令で実行が続行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-708">If `value` is non-zero (`true`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-709">ターゲット命令は、現在の命令に続く命令の先頭からの1バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-709">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-710">ターゲット命令に1つ以上のプレフィックスコードがある場合、control はこれらのプレフィックスの最初の部分にのみ転送できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-710">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="e5fd8-711">`try`、`catch`、`filter`、および `finally` ブロックとの間での転送の制御は、この命令では実行できません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-711">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-712">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`brfalse.s` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-712">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brfalse.s` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.Label%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brtrue">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brtrue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brtrue" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brtrue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brtrue As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brtrue;" />
      <MemberSignature Language="F#" Value=" staticval mutable Brtrue : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Brtrue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-713"><paramref name="value" /> が <see langword="true" />、null 以外、または 0 以外の場合は、ターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-713">Transfers control to a target instruction if <paramref name="value" /> is <see langword="true" />, not null, or non-zero.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-714">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-714">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-715">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-715">Format</span></span>|<span data-ttu-id="e5fd8-716">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-716">Assembly Format</span></span>|<span data-ttu-id="e5fd8-717">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-717">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-718">3A < `int32` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-718">3A < `int32` ></span></span>|<span data-ttu-id="e5fd8-719">brtrue `target`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-719">brtrue `target`</span></span><br /><br /> <span data-ttu-id="e5fd8-720">brinst `target`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-720">brinst `target`</span></span>|<span data-ttu-id="e5fd8-721">0以外 (`true`) の場合は、指定されたオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-721">Branch to a target instruction at the specified offset if non-zero (`true`).</span></span>|  
  
 <span data-ttu-id="e5fd8-722">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-722">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-723">`value` は、前の操作によってスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-723">`value` is pushed onto the stack by a previous operation.</span></span>  
  
2.  <span data-ttu-id="e5fd8-724">`value` がスタックからポップされます。`value` が `true`場合は `target`に分岐します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-724">`value` is popped from the stack; if `value` is `true`, branch to `target`.</span></span>  
  
 <span data-ttu-id="e5fd8-725">`brtrue` 命令は、`value` (型 `native int`) が0以外 (`true`) の場合に、指定されたターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-725">The `brtrue` instruction transfers control to the specified target instruction if `value` (type `native int`) is nonzero (`true`).</span></span> <span data-ttu-id="e5fd8-726">`value` がゼロ (`false`) の場合は、次の手順で実行が続行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-726">If `value` is zero (`false`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-727">`value` がオブジェクト参照 (型 `O`) の場合、`brinst` (`brtrue`の別名) は、オブジェクトのインスタンスを表す場合 (たとえば、null オブジェクト参照ではない場合) に制御を転送します。 <xref:System.Reflection.Emit.OpCodes.Ldnull>を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-727">If `value` is an object reference (type `O`) then `brinst` (an alias for `brtrue`) transfers control if it represents an instance of an object (for example, if it is not the null object reference; see <xref:System.Reflection.Emit.OpCodes.Ldnull>).</span></span>  
  
 <span data-ttu-id="e5fd8-728">ターゲット命令は、現在の命令に続く命令の先頭からの4バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-728">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-729">ターゲット命令に1つ以上のプレフィックスコードがある場合、control はこれらのプレフィックスの最初の部分にのみ転送できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-729">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="e5fd8-730">`try`、`catch`、`filter`、および `finally` ブロックとの間での転送の制御は、この命令では実行できません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-730">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-731">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`brtrue` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-731">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brtrue` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.Label%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brtrue_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brtrue_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brtrue_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brtrue_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brtrue_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brtrue_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Brtrue_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Brtrue_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-732"><paramref name="value" /> が <see langword="true" />、null 以外、または 0 以外の場合は、ターゲット命令 (短い形式) に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-732">Transfers control to a target instruction (short form) if <paramref name="value" /> is <see langword="true" />, not null, or non-zero.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-733">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-733">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-734">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-734">Format</span></span>|<span data-ttu-id="e5fd8-735">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-735">Assembly Format</span></span>|<span data-ttu-id="e5fd8-736">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-736">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-737">2D < `int8` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-737">2D < `int8` ></span></span>|<span data-ttu-id="e5fd8-738">brtrue `target`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-738">brtrue.s `target`</span></span><br /><br /> <span data-ttu-id="e5fd8-739">brinst. s `target`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-739">brinst.s `target`</span></span>|<span data-ttu-id="e5fd8-740">0以外 (`true`)、短い形式の場合は、指定されたオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-740">Branch to a target instruction at the specified offset if non-zero (`true`), short form.</span></span>|  
  
 <span data-ttu-id="e5fd8-741">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-741">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-742">`value` は、前の操作によってスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-742">`value` is pushed onto the stack by a previous operation.</span></span>  
  
2.  <span data-ttu-id="e5fd8-743">`value` がスタックからポップされます。`value` が `true`場合は `target`に分岐します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-743">`value` is popped from the stack; if `value` is `true`, branch to `target`.</span></span>  
  
 <span data-ttu-id="e5fd8-744">`brtrue.s` 命令は、`value` (型 `native int`) が0以外 (`true`) の場合に、指定されたターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-744">The `brtrue.s` instruction transfers control to the specified target instruction if `value` (type `native int`) is nonzero (`true`).</span></span> <span data-ttu-id="e5fd8-745">`value` がゼロ (`false`) の場合は、次の手順で実行が続行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-745">If `value` is zero (`false`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-746">`value` がオブジェクト参照 (型 `O`) の場合、`brinst` (`brtrue`の別名) は、オブジェクトのインスタンスを表す場合 (たとえば、null オブジェクト参照ではない場合) に制御を転送します。 <xref:System.Reflection.Emit.OpCodes.Ldnull>を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-746">If `value` is an object reference (type `O`) then `brinst` (an alias for `brtrue`) transfers control if it represents an instance of an object (for example, if it is not the null object reference; see <xref:System.Reflection.Emit.OpCodes.Ldnull>).</span></span>  
  
 <span data-ttu-id="e5fd8-747">ターゲット命令は、現在の命令に続く命令の先頭からの1バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-747">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-748">ターゲット命令に1つ以上のプレフィックスコードがある場合、control はこれらのプレフィックスの最初の部分にのみ転送できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-748">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="e5fd8-749">`try`、`catch`、`filter`、および `finally` ブロックとの間での転送の制御は、この命令では実行できません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-749">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-750">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`brtrue.s` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-750">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brtrue.s` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.Label%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Call;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Call" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Call" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Call As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Call;" />
      <MemberSignature Language="F#" Value=" staticval mutable Call : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Call" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-751">渡されたメソッド記述子によって示されているメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-751">Calls the method indicated by the passed method descriptor.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-752">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-752">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-753">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-753">Format</span></span>|<span data-ttu-id="e5fd8-754">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-754">Assembly Format</span></span>|<span data-ttu-id="e5fd8-755">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-755">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-756">28 < `T` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-756">28 < `T` ></span></span>|<span data-ttu-id="e5fd8-757">`methodDesc` を呼び出します</span><span class="sxs-lookup"><span data-stu-id="e5fd8-757">call `methodDesc`</span></span>|<span data-ttu-id="e5fd8-758">`methodDesc`で説明されているメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-758">Call the method described by `methodDesc`.</span></span>|  
  
 <span data-ttu-id="e5fd8-759">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-759">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-760">`argN` を通じて `arg1` メソッド引数はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-760">Method arguments `arg1` through `argN` are pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-761">`argN` を通じて `arg1` メソッド引数はスタックからポップされます。メソッドの呼び出しはこれらの引数を使用して実行され、制御はメソッド記述子によって参照されるメソッドに転送されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-761">Method arguments `arg1` through `argN` are popped from the stack; the method call is performed with these arguments and control is transferred to the method referred to by the method descriptor.</span></span> <span data-ttu-id="e5fd8-762">完了すると、呼び出し先メソッドによって戻り値が生成され、呼び出し元に送信されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-762">When complete, a return value is generated by the callee method and sent to the caller.</span></span>  
  
3.  <span data-ttu-id="e5fd8-763">戻り値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-763">The return value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-764">`call` 命令は、命令と共に渡されたメソッド記述子によって示されるメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-764">The `call` instruction calls the method indicated by the method descriptor passed with the instruction.</span></span> <span data-ttu-id="e5fd8-765">メソッド記述子は、呼び出すメソッドと、そのメソッドに渡されるスタックに配置された引数の数、型、および順序、および使用される呼び出し規約を示すメタデータトークンであり、</span><span class="sxs-lookup"><span data-stu-id="e5fd8-765">The method descriptor is a metadata token that indicates the method to call and the number, type, and order of the arguments that have been placed on the stack to be passed to that method as well as the calling convention to be used.</span></span> <span data-ttu-id="e5fd8-766">`call` 命令は、コントロールを転送する前に現在のメソッドの状態を解放する必要があることを指定するために、`tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) プレフィックス命令の前に記述できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-766">The `call` instruction can be immediately preceded by a `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) prefix instruction to specify that the current method state should be released before transferring control.</span></span> <span data-ttu-id="e5fd8-767">呼び出しが、元のメソッドよりも高い信頼のメソッドに制御を転送する場合、スタックフレームは解放されません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-767">If the call transfers control to a method of higher trust than the origin method, the stack frame is not released.</span></span> <span data-ttu-id="e5fd8-768">代わりに、`tail` が指定されていないかのように実行が自動的に続行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-768">Instead, the execution continues silently as if the `tail` had not been supplied.</span></span> <span data-ttu-id="e5fd8-769">メタデータトークンは、呼び出しが静的メソッド、インスタンスメソッド、仮想メソッド、またはグローバル関数のいずれであるかを判断するために十分な情報を保持します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-769">The metadata token carries sufficient information to determine whether the call is to a static method, an instance method, a virtual method, or a global function.</span></span> <span data-ttu-id="e5fd8-770">これらのすべてのケースでは、宛先アドレスはメソッド記述子から完全に決定されます (これは、仮想メソッドを呼び出すための <xref:System.Reflection.Emit.OpCodes.Callvirt> 命令と比較します。宛先アドレスは、<xref:System.Reflection.Emit.OpCodes.Callvirt>の前にプッシュされたインスタンス参照のランタイム型にも依存します)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-770">In all of these cases the destination address is determined entirely from the method descriptor (contrast this with the <xref:System.Reflection.Emit.OpCodes.Callvirt> instruction for calling virtual methods, where the destination address also depends upon the runtime type of the instance reference pushed before the <xref:System.Reflection.Emit.OpCodes.Callvirt>).</span></span>  
  
 <span data-ttu-id="e5fd8-771">引数は、左から右の順序でスタックに配置されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-771">The arguments are placed on the stack in left-to-right order.</span></span> <span data-ttu-id="e5fd8-772">つまり、最初の引数が計算され、スタックに配置されます。次に、2番目の引数が、必要なすべての引数がスタックの一番上になるまで、3番目の引数が降順になります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-772">That is, the first argument is computed and placed on the stack, then the second argument, then the third, until all necessary arguments are atop the stack in descending order.</span></span> <span data-ttu-id="e5fd8-773">次の3つの重要な特殊なケースがあります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-773">There are three important special cases:</span></span>  
  
 1. <span data-ttu-id="e5fd8-774">インスタンス (または仮想) メソッドの呼び出しでは、ユーザーに表示される引数の前に、そのインスタンス参照をプッシュする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-774">Calls to an instance (or virtual) method must push that instance reference before any of the user-visible arguments.</span></span> <span data-ttu-id="e5fd8-775">インスタンス参照を null 参照にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-775">The instance reference must not be a null reference.</span></span> <span data-ttu-id="e5fd8-776">メタデータに格納されているシグネチャに、`this` ポインターのパラメーターリストのエントリが含まれていません。代わりに、ビットを使用して、メソッドが `this` ポインターを渡す必要があるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-776">The signature carried in the metadata does not contain an entry in the parameter list for the `this` pointer; instead, it uses a bit to indicate whether the method requires passing the `this` pointer.</span></span>  
  
 2. <span data-ttu-id="e5fd8-777">`call` (`callvirt`ではなく) を使用して仮想メソッドを呼び出すことは有効です。これは、メソッドが、呼び出されるオブジェクトから動的に指定されるのではなく、メソッドによって指定されたクラスを使用して解決されることを示します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-777">It is valid to call a virtual method using `call` (rather than `callvirt`); this indicates that the method is to be resolved using the class specified by method rather than as specified dynamically from the object being invoked.</span></span>  
  
 3. <span data-ttu-id="e5fd8-778">デリゲートの `Invoke` メソッドは、`call` または `callvirt` 命令を使用して呼び出すことができることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-778">Note that a delegate's `Invoke` method can be called with either the `call` or `callvirt` instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-779">呼び出されたメソッドへのアクセスがシステムセキュリティによって付与されていない場合、<xref:System.Security.SecurityException> がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-779"><xref:System.Security.SecurityException> may be thrown if system security does not grant the caller access to the called method.</span></span> <span data-ttu-id="e5fd8-780">セキュリティチェックは、Microsoft 中間言語 (MSIL) 命令が実行時ではなくネイティブコードに変換された場合に発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-780">The security check may occur when the Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e5fd8-781">値型に対して System.object のメソッドを呼び出す場合は、`call` 命令を生成する代わりに、`callvirt` 命令と共に `constrained` プレフィックスを使用することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-781">When calling methods of System.Object on value types, consider using the `constrained` prefix with the `callvirt` instruction instead of emitting a `call` instruction.</span></span> <span data-ttu-id="e5fd8-782">これにより、値型がメソッドをオーバーライドするかどうかによって異なる IL を生成する必要がなくなり、バージョン管理の問題が発生する可能性がなくなります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-782">This removes the need to emit different IL depending on whether or not the value type overrides the method, avoiding a potential versioning problem.</span></span> <span data-ttu-id="e5fd8-783">インターフェイスメソッドを実装する値型のメソッドは `MethodImpl`を使用して変更できるため、値型に対してインターフェイスメソッドを呼び出すときは、`constrained` プレフィックスを使用することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-783">Consider using the `constrained` prefix when invoking interface methods on value types, since the value type method implementing the interface method can be changed using a `MethodImpl`.</span></span> <span data-ttu-id="e5fd8-784">これらの問題については、<xref:System.Reflection.Emit.OpCodes.Constrained> オペコードで詳細に説明されています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-784">These issues are described in more detail in the <xref:System.Reflection.Emit.OpCodes.Constrained> opcode.</span></span>  
  
 <span data-ttu-id="e5fd8-785">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`call` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-785">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `call` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.MethodInfo%29?displayProperty=nameWithType>  
  
-   <xref:System.Reflection.Emit.ILGenerator.EmitCall%28System.Reflection.Emit.OpCode%2CSystem.Reflection.MethodInfo%2CSystem.Type%5B%5D%29?displayProperty=nameWithType>  
  
> [!NOTE]
>  <span data-ttu-id="e5fd8-786"><xref:System.Reflection.Emit.ILGenerator.EmitCall%2A> メソッドは `varargs` 呼び出し用に用意されています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-786">The <xref:System.Reflection.Emit.ILGenerator.EmitCall%2A> method is provided for `varargs` calls.</span></span> <span data-ttu-id="e5fd8-787">通常の呼び出しには、<xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-787">Use the <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method for normal calls.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Calli">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Calli;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Calli" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Calli" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Calli As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Calli;" />
      <MemberSignature Language="F#" Value=" staticval mutable Calli : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Calli" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-788">呼び出し規約によって記述されている引数を使用して、評価スタックで (エントリ ポイントへのポインターとして) 指定されているメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-788">Calls the method indicated on the evaluation stack (as a pointer to an entry point) with arguments described by a calling convention.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-789">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-789">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-790">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-790">Format</span></span>|<span data-ttu-id="e5fd8-791">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-791">Assembly Format</span></span>|<span data-ttu-id="e5fd8-792">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-792">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-793">29 < `T` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-793">29 < `T` ></span></span>|<span data-ttu-id="e5fd8-794">calli `callSiteDescr`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-794">calli `callSiteDescr`</span></span>|<span data-ttu-id="e5fd8-795">呼び出し規約によって記述された引数を使用して、が指すメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-795">Calls the method pointed to with arguments described by the calling convention.</span></span>|  
  
 <span data-ttu-id="e5fd8-796">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-796">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-797">`argN` を通じて `arg1` メソッド引数はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-797">Method arguments `arg1` through `argN` are pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-798">メソッドのエントリポインターがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-798">The method entry pointer is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-799">メソッドの引数が `argN` を通じて `arg1`、メソッドのエントリポインターがスタックからポップされます。メソッドの呼び出しが実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-799">Method arguments `arg1` through `argN` and the method entry pointer are popped from the stack; the call to the method is performed.</span></span> <span data-ttu-id="e5fd8-800">完了すると、呼び出し先メソッドによって戻り値が生成され、呼び出し元に送信されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-800">When complete, a return value is generated by the callee method and sent to the caller.</span></span>  
  
4.  <span data-ttu-id="e5fd8-801">戻り値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-801">The return value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-802">`calli` 命令は `argN`を通じて `arg1` 引数を使用してメソッドのエントリポインターを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-802">The `calli` instruction calls the method entry pointer with the arguments `arg1` through `argN`.</span></span> <span data-ttu-id="e5fd8-803">これらの引数の型は、特定の呼び出し規則 (`callSiteDesc`) によって記述されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-803">The types of these arguments are described by the specific calling convention (`callSiteDesc`).</span></span> <span data-ttu-id="e5fd8-804">`calli` 命令は、コントロールを転送する前に現在のメソッドの状態を解放する必要があることを指定するために、`tail` プレフィックス (<xref:System.Reflection.Emit.OpCodes.Tailcall>) の直前にある場合があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-804">The `calli` instruction may be immediately preceded by a `tail` prefix (<xref:System.Reflection.Emit.OpCodes.Tailcall>) to specify that the current method state should be released before transferring control.</span></span> <span data-ttu-id="e5fd8-805">呼び出しによって、元のメソッドより高い信頼のメソッドに制御が転送される場合、スタックフレームは解放されません。代わりに、`tail` が指定されていないかのように、実行は暗黙的に続行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-805">If the call would transfer control to a method of higher trust than the origin method the stack frame will not be released; instead, the execution will continue silently as if the `tail` had not been supplied.</span></span>  
  
 <span data-ttu-id="e5fd8-806">メソッドのエントリポインターは、(ターゲットコンピューターの) ネイティブコードへの特定のポインターと見なされます。このポインターは、呼び出し規約 (スタンドアロン署名の場合はメタデータトークン) で記述された引数を使用して、正規的に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-806">The method entry pointer is assumed to be a specific pointer to native code (of the target machine) that can be legitimately called with the arguments described by the calling convention (a metadata token for a stand-alone signature).</span></span> <span data-ttu-id="e5fd8-807">このようなポインターは、<xref:System.Reflection.Emit.OpCodes.Ldftn> または <xref:System.Reflection.Emit.OpCodes.Ldvirtftn> 命令を使用して作成するか、ネイティブコードから渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-807">Such a pointer can be created using the <xref:System.Reflection.Emit.OpCodes.Ldftn> or <xref:System.Reflection.Emit.OpCodes.Ldvirtftn> instructions, or passed in from native code.</span></span>  
  
 <span data-ttu-id="e5fd8-808">呼び出し規約は動的にチェックされないため、指定された呼び出し規約をコピー先が実際に使用していない場合、`calli` 命令を使用するコードは正常に機能しません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-808">The calling convention is not checked dynamically, so code that uses a `calli` instruction does not work correctly if the destination does not actually use the specified calling convention.</span></span>  
  
 <span data-ttu-id="e5fd8-809">引数は、左から右の順序でスタックに配置されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-809">The arguments are placed on the stack in left-to-right order.</span></span> <span data-ttu-id="e5fd8-810">つまり、最初の引数が計算され、スタックに配置されます。次に、2番目の引数が、必要なすべての引数がスタックの一番上になるまで、3番目の引数が降順になります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-810">That is, the first argument is computed and placed on the stack, then the second argument, then the third, until all necessary arguments are atop the stack in descending order.</span></span> <span data-ttu-id="e5fd8-811">インスタンスまたは仮想メソッドの引数作成コードシーケンスは、ユーザーに表示される引数の前に、そのインスタンス参照 (null 参照ではない必要があります) をプッシュする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-811">The argument-building code sequence for an instance or virtual method must push that instance reference (which must not be a null reference) before any of the user-visible arguments.</span></span>  
  
 <span data-ttu-id="e5fd8-812">呼び出されたメソッドへのアクセスがシステムセキュリティによって付与されていない場合、<xref:System.Security.SecurityException> がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-812"><xref:System.Security.SecurityException> may be thrown if the system security does not grant the caller access to the called method.</span></span> <span data-ttu-id="e5fd8-813">セキュリティチェックは、Microsoft 中間言語 (MSIL) 命令が実行時ではなくネイティブコードに変換された場合に発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-813">The security check can occur when the Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="e5fd8-814">次の <xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> メソッドを使用して、スタックで `calli` 命令を実行できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-814">The following <xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> methods can be used to perform a `calli` instruction on the stack.</span></span> <span data-ttu-id="e5fd8-815">`calli` は、<xref:System.Reflection.Emit.ILGenerator.Emit%2A> クラスを使用して命令をスタックに直接配置するのではなく、以下のメソッドを通じて呼び出す必要があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-815">Note that `calli` should be called through the below methods rather than using the <xref:System.Reflection.Emit.ILGenerator.Emit%2A> class to place the instruction directly on the stack.</span></span>  
  
-   <span data-ttu-id="e5fd8-816">マネージ呼び出し規約を使用して呼び出しを <xref:System.Reflection.Emit.ILGenerator.EmitCalli%28System.Reflection.Emit.OpCode%2CSystem.Reflection.CallingConventions%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29?displayProperty=nameWithType> します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-816"><xref:System.Reflection.Emit.ILGenerator.EmitCalli%28System.Reflection.Emit.OpCode%2CSystem.Reflection.CallingConventions%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29?displayProperty=nameWithType> for calls using a managed calling convention.</span></span>  
  
-   <span data-ttu-id="e5fd8-817">アンマネージ呼び出し規約を使用して呼び出しを <xref:System.Reflection.Emit.ILGenerator.EmitCalli%28System.Reflection.Emit.OpCode%2CSystem.Runtime.InteropServices.CallingConvention%2CSystem.Type%2CSystem.Type%5B%5D%29?displayProperty=nameWithType> します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-817"><xref:System.Reflection.Emit.ILGenerator.EmitCalli%28System.Reflection.Emit.OpCode%2CSystem.Runtime.InteropServices.CallingConvention%2CSystem.Type%2CSystem.Type%5B%5D%29?displayProperty=nameWithType> for calls using an unmanaged calling convention.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Callvirt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Callvirt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Callvirt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Callvirt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Callvirt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Callvirt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Callvirt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Callvirt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-818">オブジェクト上で遅延バインディング メソッドを呼び出し、戻り値を評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-818">Calls a late-bound method on an object, pushing the return value onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-819">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-819">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-820">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-820">Format</span></span>|<span data-ttu-id="e5fd8-821">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-821">Assembly Format</span></span>|<span data-ttu-id="e5fd8-822">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-822">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-823">6F < `T` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-823">6F < `T` ></span></span>|<span data-ttu-id="e5fd8-824">callvirt `method`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-824">callvirt `method`</span></span>|<span data-ttu-id="e5fd8-825">`obj`に関連付けられた特定のメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-825">Calls a specific method associated with `obj`.</span></span>|  
  
 <span data-ttu-id="e5fd8-826">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-826">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-827">オブジェクト参照 `obj` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-827">An object reference `obj` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-828">`argN` を通じて `arg1` メソッド引数はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-828">Method arguments `arg1` through `argN` are pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-829">メソッド引数が `argN` を通じて `arg1`、オブジェクト参照 `obj` がスタックからポップされます。メソッドの呼び出しは、これらの引数を使用して実行され、メソッドのメタデータトークンによって参照される `obj` のメソッドに制御が移ります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-829">Method arguments `arg1` through `argN` and the object reference `obj` are popped from the stack; the method call is performed with these arguments and control is transferred to the method in `obj` referred to by the method metadata token.</span></span> <span data-ttu-id="e5fd8-830">完了すると、呼び出し先メソッドによって戻り値が生成され、呼び出し元に送信されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-830">When complete, a return value is generated by the callee method and sent to the caller.</span></span>  
  
4.  <span data-ttu-id="e5fd8-831">戻り値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-831">The return value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-832">`callvirt` 命令は、オブジェクトに対して遅延バインディングメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-832">The `callvirt` instruction calls a late-bound method on an object.</span></span> <span data-ttu-id="e5fd8-833">つまり、メソッドは、メソッドポインターで参照できるコンパイル時のクラスではなく、`obj` のランタイム型に基づいて選択されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-833">That is, the method is chosen based on the runtime type of `obj` rather than the compile-time class visible in the method pointer.</span></span> <span data-ttu-id="e5fd8-834">`Callvirt` を使用すると、仮想メソッドとインスタンスメソッドの両方を呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-834">`Callvirt` can be used to call both virtual and instance methods.</span></span> <span data-ttu-id="e5fd8-835">`callvirt` 命令は、コントロールを転送する前に現在のスタックフレームを解放する必要があることを指定するために、`tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) プレフィックスの前に配置されている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-835">The `callvirt` instruction may be immediately preceded by a `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) prefix to specify that the current stack frame should be released before transferring control.</span></span> <span data-ttu-id="e5fd8-836">呼び出しによって、元のメソッドよりも高い信頼のメソッドに制御が転送される場合、スタックフレームは解放されません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-836">If the call would transfer control to a method of higher trust than the original method the stack frame will not be released.</span></span>  
  
 <span data-ttu-id="e5fd8-837">メソッドメタデータトークンは、呼び出すメソッドの名前、クラス、および署名を提供します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-837">The method metadata token provides the name, class and signature of the method to call.</span></span> <span data-ttu-id="e5fd8-838">`obj` に関連付けられているクラスは、インスタンスとして使用されるクラスです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-838">The class associated with `obj` is the class of which it is an instance.</span></span> <span data-ttu-id="e5fd8-839">クラスが、指定されたメソッド名とシグネチャに一致する非静的メソッドを定義している場合、このメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-839">If the class defines a non-static method that matches the indicated method name and signature, this method is called.</span></span> <span data-ttu-id="e5fd8-840">それ以外の場合は、このクラスの基底クラスチェーンにあるすべてのクラスが順番にチェックインされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-840">Otherwise all classes in the base class chain of this class are checked in order.</span></span> <span data-ttu-id="e5fd8-841">メソッドが見つからない場合、エラーになります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-841">It is an error if no method is found.</span></span>  
  
 <span data-ttu-id="e5fd8-842">`Callvirt` は、メソッドを呼び出す前に、オブジェクトと関連する引数を評価スタックからポップします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-842">`Callvirt` pops the object and the associated arguments off the evaluation stack before calling the method.</span></span> <span data-ttu-id="e5fd8-843">メソッドに戻り値がある場合、メソッドの完了時にスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-843">If the method has a return value, it is pushed on the stack upon method completion.</span></span> <span data-ttu-id="e5fd8-844">呼び出し先側では、`obj` パラメーターは引数0として、`arg1` 引数1などとしてアクセスされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-844">On the callee side, the `obj` parameter is accessed as argument 0, `arg1` as argument 1, and so on.</span></span>  
  
 <span data-ttu-id="e5fd8-845">引数は、左から右の順序でスタックに配置されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-845">The arguments are placed on the stack in left-to-right order.</span></span> <span data-ttu-id="e5fd8-846">つまり、最初の引数が計算され、スタックに配置されます。次に、2番目の引数が、必要なすべての引数がスタックの一番上になるまで、3番目の引数が降順になります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-846">That is, the first argument is computed and placed on the stack, then the second argument, then the third, until all necessary arguments are atop the stack in descending order.</span></span> <span data-ttu-id="e5fd8-847">(常に `callvirt`に必要な) インスタンス参照 `obj` は、ユーザーが参照できる任意の引数の前にプッシュする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-847">The instance reference `obj` (always required for `callvirt`) must be pushed before any of the user-visible arguments.</span></span> <span data-ttu-id="e5fd8-848">(メタデータトークンに含まれる) シグネチャには、このポインターのパラメーターリストにエントリが含まれていてはなりません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-848">The signature (carried in the metadata token) need not contain an entry in the parameter list for the this pointer.</span></span>  
  
 <span data-ttu-id="e5fd8-849"><xref:System.Reflection.Emit.OpCodes.Call> 命令を使用して仮想メソッドを呼び出すこともできます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-849">Note that a virtual method can also be called using the <xref:System.Reflection.Emit.OpCodes.Call> instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-850">指定された名前およびシグネチャを持つ非静的メソッドが `obj` またはその基本クラスに関連付けられているクラスに見つからなかった場合、<xref:System.MissingMethodException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-850"><xref:System.MissingMethodException> is thrown if a non-static method with the indicated name and signature could not be found in the class associated with `obj` or any of its base classes.</span></span> <span data-ttu-id="e5fd8-851">これは通常、Microsoft 中間言語 (MSIL) 命令が実行時ではなくネイティブコードに変換された場合に検出されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-851">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="e5fd8-852">obj が null の場合、<xref:System.NullReferenceException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-852"><xref:System.NullReferenceException> is thrown if obj is null.</span></span>  
  
 <span data-ttu-id="e5fd8-853">呼び出されたメソッドへのアクセスがシステムセキュリティによって付与されていない場合、<xref:System.Security.SecurityException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-853"><xref:System.Security.SecurityException> is thrown if system security does not grant the caller access to the called method.</span></span> <span data-ttu-id="e5fd8-854">セキュリティチェックは、CIL が実行時ではなくネイティブコードに変換されたときに発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-854">The security check may occur when the CIL is converted to native code rather than at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e5fd8-855">値型に対して System.object のメソッドを呼び出す場合は、`callvirt` 命令と共に `constrained` プレフィックスを使用することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-855">When calling methods of System.Object on value types, consider using the `constrained` prefix with the `callvirt` instruction.</span></span> <span data-ttu-id="e5fd8-856">これにより、値型がメソッドをオーバーライドするかどうかによって異なる IL を生成する必要がなくなり、バージョン管理の問題が発生する可能性がなくなります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-856">This removes the need to emit different IL depending on whether or not the value type overrides the method, avoiding a potential versioning problem.</span></span> <span data-ttu-id="e5fd8-857">インターフェイスメソッドを実装する値型のメソッドは `MethodImpl`を使用して変更できるため、値型に対してインターフェイスメソッドを呼び出すときは、`constrained` プレフィックスを使用することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-857">Consider using the `constrained` prefix when invoking interface methods on value types, since the value type method implementing the interface method can be changed using a `MethodImpl`.</span></span> <span data-ttu-id="e5fd8-858">これらの問題については、<xref:System.Reflection.Emit.OpCodes.Constrained> オペコードで詳細に説明されています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-858">These issues are described in more detail in the <xref:System.Reflection.Emit.OpCodes.Constrained> opcode.</span></span>  
  
 <span data-ttu-id="e5fd8-859">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`callvirt` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-859">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `callvirt` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.MethodInfo%29?displayProperty=nameWithType>  
  
-   <xref:System.Reflection.Emit.ILGenerator.EmitCall%28System.Reflection.Emit.OpCode%2CSystem.Reflection.MethodInfo%2CSystem.Type%5B%5D%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Castclass">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Castclass;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Castclass" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Castclass" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Castclass As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Castclass;" />
      <MemberSignature Language="F#" Value=" staticval mutable Castclass : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Castclass" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-860">指定したクラスへの参照により渡されたオブジェクトをキャストしようとします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-860">Attempts to cast an object passed by reference to the specified class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-861">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-861">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-862">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-862">Format</span></span>|<span data-ttu-id="e5fd8-863">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-863">Assembly Format</span></span>|<span data-ttu-id="e5fd8-864">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-864">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-865">74 < `T` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-865">74 < `T` ></span></span>|<span data-ttu-id="e5fd8-866">castclass `class`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-866">castclass `class`</span></span>|<span data-ttu-id="e5fd8-867">オブジェクトを `class`型の新しいオブジェクトにキャストします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-867">Casts an object to a new object of type `class`.</span></span>|  
  
 <span data-ttu-id="e5fd8-868">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-868">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-869">オブジェクト参照がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-869">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-870">オブジェクト参照がスタックからポップされます。参照先のオブジェクトは、指定された `class`としてキャストされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-870">The object reference is popped from the stack; the referenced object is cast as the specified `class`.</span></span>  
  
3.  <span data-ttu-id="e5fd8-871">成功すると、新しいオブジェクト参照がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-871">If successful, a new object reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-872">`castclass` 命令は、スタックの一番上にあるオブジェクト参照 (型 `O`) を指定されたクラスにキャストしようとします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-872">The `castclass` instruction attempts to cast the object reference (type `O`) atop the stack to a specified class.</span></span> <span data-ttu-id="e5fd8-873">新しいクラスは、必要なクラスを示すメタデータトークンによって指定されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-873">The new class is specified by a metadata token indicating the desired class.</span></span> <span data-ttu-id="e5fd8-874">スタックの一番上にあるオブジェクトのクラスが新しいクラスを実装していない (新しいクラスがインターフェイスであると仮定している) 場合、新しいクラスの派生クラスではない場合、<xref:System.InvalidCastException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-874">If the class of the object on the top of the stack does not implement the new class (assuming the new class is an interface) and is not a derived class of the new class then an <xref:System.InvalidCastException> is thrown.</span></span> <span data-ttu-id="e5fd8-875">オブジェクト参照が null 参照の場合、`castclass` は成功し、新しいオブジェクトが null 参照として返されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-875">If the object reference is a null reference, `castclass` succeeds and returns the new object as a null reference.</span></span>  
  
 <span data-ttu-id="e5fd8-876"><xref:System.InvalidCastException> は、obj をクラスにキャストできない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-876"><xref:System.InvalidCastException> is thrown if obj cannot be cast to class.</span></span>  
  
 <span data-ttu-id="e5fd8-877">クラスが見つからない場合、<xref:System.TypeLoadException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-877"><xref:System.TypeLoadException> is thrown if class cannot be found.</span></span> <span data-ttu-id="e5fd8-878">これは通常、Microsoft 中間言語 (MSIL) 命令が実行時ではなくネイティブコードに変換された場合に検出されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-878">This is typically detected when a Microsoft Intermediate Language (MSIL) instruction is converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="e5fd8-879">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`castclass` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-879">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `castclass` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Type%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceq">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ceq;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ceq" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ceq" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ceq As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ceq;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ceq : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ceq" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-880">2 つの値を比較します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-880">Compares two values.</span></span> <span data-ttu-id="e5fd8-881">2 つの値が等しい場合は、整数 1 <see langword="(int32" />) が評価スタックにプッシュされます。それ以外の場合は、0 (<see langword="int32" />) が評価スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-881">If they are equal, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-882">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-882">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-883">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-883">Format</span></span>|<span data-ttu-id="e5fd8-884">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-884">Assembly Format</span></span>|<span data-ttu-id="e5fd8-885">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-885">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-886">FE 01</span><span class="sxs-lookup"><span data-stu-id="e5fd8-886">FE 01</span></span>|<span data-ttu-id="e5fd8-887">ceq</span><span class="sxs-lookup"><span data-stu-id="e5fd8-887">ceq</span></span>|<span data-ttu-id="e5fd8-888">`value1` が `value2`に等しい場合は1をプッシュします。それ以外の場合は、0をプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-888">Pushes 1 if `value1` equals `value2`; else pushes 0.</span></span>|  
  
 <span data-ttu-id="e5fd8-889">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-889">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-890">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-890">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-891">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-891">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-892">`value2` と `value1` がスタックからポップされます。`value1` は `value2`と比較されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-892">`value2` and `value1` are popped from the stack; `value1` is compared to `value2`.</span></span>  
  
4.  <span data-ttu-id="e5fd8-893">`value1` が `value2`に等しい場合、1がスタックにプッシュされます。それ以外の場合は、0がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-893">If `value1` is equal to `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-894">`ceq` 命令は、`value1` と `value2`を比較します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-894">The `ceq` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="e5fd8-895">`value1` が `value2`に等しい場合は、1 (型 `int32`) がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-895">If `value1` is equal to `value2`, then 1 (of type `int32`) is pushed on the stack.</span></span> <span data-ttu-id="e5fd8-896">それ以外の場合は、0 (型 `int32`) がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-896">Otherwise 0 (of type `int32`) is pushed on the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-897">浮動小数点数の場合、`ceq` は、数値が順序付けられていない場合は0を返します (または両方が NaN)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-897">For floating-point number, `ceq` will return 0 if the numbers are unordered (either or both are NaN).</span></span> <span data-ttu-id="e5fd8-898">無限値は、それ自体と同じです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-898">The infinite values are equal to themselves.</span></span>  
  
 <span data-ttu-id="e5fd8-899">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ceq` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-899">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ceq` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cgt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cgt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cgt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cgt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cgt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cgt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Cgt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Cgt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-900">2 つの値を比較します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-900">Compares two values.</span></span> <span data-ttu-id="e5fd8-901">最初の値が 2 番目の値を超える場合は、整数 1 <see langword="(int32" />) が評価スタックにプッシュされます。それ以外の場合は、0 (<see langword="int32" />) が評価スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-901">If the first value is greater than the second, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-902">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-902">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-903">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-903">Format</span></span>|<span data-ttu-id="e5fd8-904">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-904">Assembly Format</span></span>|<span data-ttu-id="e5fd8-905">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-905">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-906">FE 02</span><span class="sxs-lookup"><span data-stu-id="e5fd8-906">FE 02</span></span>|<span data-ttu-id="e5fd8-907">cgt</span><span class="sxs-lookup"><span data-stu-id="e5fd8-907">cgt</span></span>|<span data-ttu-id="e5fd8-908">`value1` が `value2`より大きい場合は1をプッシュします。それ以外の場合は、0をプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-908">Pushes 1 if `value1` is greater than `value2`; else pushes 0.</span></span>|  
  
 <span data-ttu-id="e5fd8-909">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-909">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-910">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-910">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-911">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-911">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-912">`value2` と `value1` がスタックからポップされます。`value1` が `value2`より大きいかどうかを `cgt` テストします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-912">`value2` and `value1` are popped from the stack; `cgt` tests if `value1` is greater than `value2`.</span></span>  
  
4.  <span data-ttu-id="e5fd8-913">`value1` が `value2`より大きい場合、1がスタックにプッシュされます。それ以外の場合は、0がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-913">If `value1` is greater than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-914">`cgt` 命令は、`value1` と `value2`を比較します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-914">The `cgt` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="e5fd8-915">`value1` が厳密に `value2`より大きい場合、`int32` 値1がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-915">If `value1` is strictly greater than `value2`, then an `int32` value of 1 is pushed on the stack.</span></span> <span data-ttu-id="e5fd8-916">それ以外の場合は、`int32` 値0がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-916">Otherwise, an `int32` value of 0 is pushed on the stack.</span></span>  
  
-   <span data-ttu-id="e5fd8-917">浮動小数点数の場合、数値が順序付けられていない場合、`cgt` は0を返します (つまり、引数の一方または両方が NaN の場合)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-917">For floating-point numbers, `cgt` returns 0 if the numbers are unordered (that is, if one or both of the arguments are NaN).</span></span>  
  
 <span data-ttu-id="e5fd8-918">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`cgt` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-918">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cgt` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cgt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cgt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cgt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cgt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cgt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cgt_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Cgt_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Cgt_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-919">2 つの符号なしの値または順序なしの値を比較します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-919">Compares two unsigned or unordered values.</span></span> <span data-ttu-id="e5fd8-920">最初の値が 2 番目の値を超える場合は、整数 1 <see langword="(int32" />) が評価スタックにプッシュされます。それ以外の場合は、0 (<see langword="int32" />) が評価スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-920">If the first value is greater than the second, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-921">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-921">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-922">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-922">Format</span></span>|<span data-ttu-id="e5fd8-923">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-923">Assembly Format</span></span>|<span data-ttu-id="e5fd8-924">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-924">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-925">FE 03</span><span class="sxs-lookup"><span data-stu-id="e5fd8-925">FE 03</span></span>|<span data-ttu-id="e5fd8-926">cgt.un</span><span class="sxs-lookup"><span data-stu-id="e5fd8-926">cgt.un</span></span>|<span data-ttu-id="e5fd8-927">`value1` が `value2`より大きい場合は1をプッシュします。それ以外の場合は、0 (符号なしの値) をプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-927">Pushes 1 if `value1` is greater than `value2`; else pushes 0 (unsigned values).</span></span>|  
  
 <span data-ttu-id="e5fd8-928">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-928">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-929">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-929">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-930">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-930">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-931">`value2` と `value1` がスタックからポップされます。`value1` が `value2`より大きいかどうかを `cgt.un` テストします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-931">`value2` and `value1` are popped from the stack; `cgt.un` tests if `value1` is greater than `value2`.</span></span>  
  
4.  <span data-ttu-id="e5fd8-932">`value1` が `value2`より大きい場合、1がスタックにプッシュされます。それ以外の場合は、0がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-932">If `value1` is greater than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-933">次のいずれかが `true` 場合は、`int32` 値1がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-933">An `int32` value of 1 is pushed on the stack if any of the following is `true` :</span></span>  
  
 <span data-ttu-id="e5fd8-934">浮動小数点数の場合、`value1` は `value2`に対して順序付けされません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-934">For floating-point numbers, `value1` is not ordered with respect to `value2`.</span></span>  
  
 <span data-ttu-id="e5fd8-935">整数値の場合、`value1` は、符号なし数値として扱われる場合、厳密には `value2` より大きくなります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-935">For integer values, `value1` is strictly greater than `value2` when considered as unsigned numbers.</span></span>  
  
 <span data-ttu-id="e5fd8-936">それ以外の場合は、`int32` 値0がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-936">Otherwise an `int32` value of 0 is pushed on the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-937">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`cgt.un` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-937">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cgt.un` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ckfinite">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ckfinite;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ckfinite" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ckfinite" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ckfinite As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ckfinite;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ckfinite : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ckfinite" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-938">値が有限数ではない場合は、<see cref="T:System.ArithmeticException" /> をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-938">Throws <see cref="T:System.ArithmeticException" /> if value is not a finite number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-939">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-939">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-940">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-940">Format</span></span>|<span data-ttu-id="e5fd8-941">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-941">Assembly Format</span></span>|<span data-ttu-id="e5fd8-942">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-942">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-943">C3</span><span class="sxs-lookup"><span data-stu-id="e5fd8-943">C3</span></span>|<span data-ttu-id="e5fd8-944">ckfinite</span><span class="sxs-lookup"><span data-stu-id="e5fd8-944">ckfinite</span></span>|<span data-ttu-id="e5fd8-945">値が有限数でない場合は、<xref:System.ArithmeticException> をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-945">throw <xref:System.ArithmeticException> if value is not a finite number.</span></span>|  
  
 <span data-ttu-id="e5fd8-946">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-946">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-947">`value` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-947">`value` is pushed onto the stack.</span></span> 
  
2.  <span data-ttu-id="e5fd8-948">`value` がスタックからポップされ、`ckfinite` 命令が実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-948">`value` is popped from the stack and the `ckfinite` instruction is performed on it.</span></span>  
  
3.  <span data-ttu-id="e5fd8-949">例外がスローされない場合、`value` はスタックに戻されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-949">`value` is pushed back onto the stack if no exception is thrown.</span></span>  
  
 <span data-ttu-id="e5fd8-950">`value` (浮動小数点数) が "not no number" 値 (NaN) または `+-` 無限大値の場合、`ckfinite instruction` は <xref:System.ArithmeticException> をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-950">The `ckfinite instruction` throws <xref:System.ArithmeticException> if `value` (a floating-point number) is either a "not a number" value (NaN) or a `+-` infinity value.</span></span> <span data-ttu-id="e5fd8-951">例外がスローされない場合、`Ckfinite` はスタックに値を残します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-951">`Ckfinite` leaves the value on the stack if no exception is thrown.</span></span> <span data-ttu-id="e5fd8-952">`value` が浮動小数点数でない場合、実行は指定されません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-952">Execution is unspecified if `value` is not a floating-point number.</span></span>  
  
 <span data-ttu-id="e5fd8-953">`value` が ' normal ' の数値ではない場合、<xref:System.ArithmeticException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-953"><xref:System.ArithmeticException> is thrown if `value` is not a 'normal' number.</span></span>  
  
 <span data-ttu-id="e5fd8-954"><xref:System.ArithmeticException> の特別な例外または派生クラスがより適切な場合は、例外ハンドラーに間違った値を渡します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-954">Note that a special exception or a derived class of <xref:System.ArithmeticException> may be more appropriate, passing the incorrect value to the exception handler.</span></span>  
  
 <span data-ttu-id="e5fd8-955">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ckfinite` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-955">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ckfinite` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Clt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Clt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Clt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Clt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Clt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Clt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Clt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-956">2 つの値を比較します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-956">Compares two values.</span></span> <span data-ttu-id="e5fd8-957">最初の値が 2 番目の値より小さい場合は、整数 1 <see langword="(int32" />) が評価スタックにプッシュされます。それ以外の場合は、0 (<see langword="int32" />) が評価スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-957">If the first value is less than the second, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-958">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-958">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-959">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-959">Format</span></span>|<span data-ttu-id="e5fd8-960">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-960">Assembly Format</span></span>|<span data-ttu-id="e5fd8-961">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-961">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-962">FE 04</span><span class="sxs-lookup"><span data-stu-id="e5fd8-962">FE 04</span></span>|<span data-ttu-id="e5fd8-963">clt</span><span class="sxs-lookup"><span data-stu-id="e5fd8-963">clt</span></span>|<span data-ttu-id="e5fd8-964">`value1` が `value2`未満の場合は1をプッシュします。それ以外の場合は、0をプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-964">Pushes 1 if `value1` is less than `value2`; else pushes 0.</span></span>|  
  
 <span data-ttu-id="e5fd8-965">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-965">The stack transitional behavior, in sequential order, is:</span></span> 

1.  <span data-ttu-id="e5fd8-966">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-966">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-967">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-967">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-968">`value2` と `value1` がスタックからポップされます。`value1` が `value2`より小さいかどうかを `clt` テストします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-968">`value2` and `value1` are popped from the stack; `clt` tests if `value1` is less than `value2`.</span></span>  
  
4.  <span data-ttu-id="e5fd8-969">`value1` が `value2`未満の場合、1がスタックにプッシュされます。それ以外の場合は、0がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-969">If `value1` is less than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-970">`clt` 命令は、`value1` と `value2`を比較します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-970">The `clt` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="e5fd8-971">`value1` が厳密に `value2`より小さい場合、`int32` 値1がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-971">If `value1` is strictly less than `value2`, then an `int32` value of 1 is pushed on the stack.</span></span> <span data-ttu-id="e5fd8-972">それ以外の場合は、`int32` 値0がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-972">Otherwise, an `int32` value of 0 is pushed on the stack.</span></span>  
  
-   <span data-ttu-id="e5fd8-973">浮動小数点数の場合、数値が順序付けられていない場合、`clt` は0を返します (つまり、引数の一方または両方が NaN の場合)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-973">For floating-point numbers, `clt` returns 0 if the numbers are unordered (that is, if one or both of the arguments are NaN).</span></span>  
  
 <span data-ttu-id="e5fd8-974">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`clt` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-974">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `clt` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Clt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Clt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Clt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Clt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Clt_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Clt_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Clt_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-975">符号なしの値または順序なしの値である <paramref name="value1" /> と <paramref name="value2" /> を比較します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-975">Compares the unsigned or unordered values <paramref name="value1" /> and <paramref name="value2" />.</span></span> <span data-ttu-id="e5fd8-976"><paramref name="value1" /> が <paramref name="value2" /> より小さい場合は、整数 1 <see langword="(int32" />) が評価スタックにプッシュされます。それ以外の場合は、0 (<see langword="int32" />) が評価スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-976">If <paramref name="value1" /> is less than <paramref name="value2" />, then the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-977">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-977">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-978">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-978">Format</span></span>|<span data-ttu-id="e5fd8-979">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-979">Assembly Format</span></span>|<span data-ttu-id="e5fd8-980">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-980">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-981">FE 05</span><span class="sxs-lookup"><span data-stu-id="e5fd8-981">FE 05</span></span>|<span data-ttu-id="e5fd8-982">clt.un</span><span class="sxs-lookup"><span data-stu-id="e5fd8-982">clt.un</span></span>|<span data-ttu-id="e5fd8-983">`value1` が `value2`未満の場合は1をプッシュします。それ以外の場合は、0 (符号なしの値) をプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-983">Pushes 1 if `value1` is less than `value2`; else pushes 0 (unsigned values).</span></span>|  
  
 <span data-ttu-id="e5fd8-984">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-984">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-985">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-985">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-986">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-986">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-987">`value2` と `value1` がスタックからポップされます。`value1` が `value2`より小さいかどうかを `clt.un` テストします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-987">`value2` and `value1` are popped from the stack; `clt.un` tests if `value1` is less than `value2`.</span></span>  
  
4.  <span data-ttu-id="e5fd8-988">`value1` が `value2`未満の場合、1がスタックにプッシュされます。それ以外の場合は、0がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-988">If `value1` is less than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-989">`clt.un` 命令は、`value1` と `value2`を比較します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-989">The `clt.un` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="e5fd8-990">次のいずれかに該当する場合は、`int32` 値1がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-990">An `int32` value of 1 is pushed on the stack if any of the following is true:</span></span>  
  
-   <span data-ttu-id="e5fd8-991">`value1` は、厳密には `value2` (`clt`の場合) よりも小さくなります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-991">`value1` is strictly less than `value2` (as for `clt`).</span></span>  
  
-   <span data-ttu-id="e5fd8-992">浮動小数点数の場合、`value1` は `value2`に対して順序付けされません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-992">For floating-point numbers, `value1` is not ordered with respect to `value2`.</span></span>  
  
-   <span data-ttu-id="e5fd8-993">整数値の場合、`value1` は符号なしの数値と見なされると、厳密には `value2` より小さくなります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-993">For integer values, `value1` is strictly less than `value2` when considered as unsigned numbers.</span></span>  
  
 <span data-ttu-id="e5fd8-994">それ以外の場合は、`int32` 値0がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-994">Otherwise, an `int32` value of 0 is pushed on the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-995">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`clt.un` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-995">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `clt.un` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Constrained">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Constrained;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Constrained" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Constrained" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Constrained As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Constrained;" />
      <MemberSignature Language="F#" Value=" staticval mutable Constrained : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Constrained" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-996">仮想メソッド呼び出しをする対象の型を制約します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-996">Constrains the type on which a virtual method call is made.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-997">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-997">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-998">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-998">Format</span></span>|<span data-ttu-id="e5fd8-999">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-999">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1000">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1000">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1001">FE 16 < `T` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-1001">FE 16 < `T` ></span></span>|<span data-ttu-id="e5fd8-1002">制約付き.</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1002">constrained.</span></span> `thisType`|<span data-ttu-id="e5fd8-1003">型 `T`として制約されている型に対して仮想メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1003">Call a virtual method on a type constrained to be type `T`.</span></span>|  
  
 <span data-ttu-id="e5fd8-1004">`constrained` プレフィックスは、`callvirt` 命令でのみ許可されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1004">The `constrained` prefix is permitted only on a `callvirt` instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-1005">この時点での MSIL スタックの状態は、次のようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1005">The state of the MSIL stack at this point must be as follows:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1006">マネージポインター `ptr`がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1006">A managed pointer, `ptr`, is pushed onto the stack.</span></span> <span data-ttu-id="e5fd8-1007">`ptr` の型は `thisType`するために、マネージポインター (`&`) である必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1007">The type of `ptr` must be a managed pointer (`&`) to `thisType`.</span></span> <span data-ttu-id="e5fd8-1008">これは、プレフィックスのない `callvirt` 命令の場合とは異なり、`thisType`の参照を必要とすることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1008">Note that this is different from the case of an unprefixed `callvirt` instruction, which expects a reference of `thisType`.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1009">プレフィックスのない `callvirt` 命令と同様に、`argN` を通じて `arg1` メソッド引数はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1009">Method arguments `arg1` through `argN` are pushed onto the stack, just as with an unprefixed `callvirt` instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-1010">`constrained` プレフィックスは、`thisType` が値型と参照型のどちらであるかに関係なく、`callvirt` 命令を一貫した方法で作成できるように設計されています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1010">The `constrained` prefix is designed to allow `callvirt` instructions to be made in a uniform way independent of whether `thisType` is a value type or a reference type.</span></span>  
  
 <span data-ttu-id="e5fd8-1011">`callvirt` `method` 命令の先頭に `constrained` `thisType`がある場合、命令は次のように実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1011">When a `callvirt` `method` instruction has been prefixed by `constrained` `thisType`, the instruction is executed as follows:</span></span>  
  
-   <span data-ttu-id="e5fd8-1012">`thisType` が (値型ではなく) 参照型の場合、`ptr` は逆参照され、`method`の `callvirt` への ' this ' ポインターとして渡されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1012">If `thisType` is a reference type (as opposed to a value type) then `ptr` is dereferenced and passed as the 'this' pointer to the `callvirt` of `method`.</span></span>  
  
-   <span data-ttu-id="e5fd8-1013">`thisType` が値型で、`thisType` が `method` を実装している場合、`call` によって `method` を実装するために、`ptr` は `method` `thisType`命令への ' this ' ポインターとして変更されずに渡されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1013">If `thisType` is a value type and `thisType` implements `method` then `ptr` is passed unmodified as the 'this' pointer to a `call` `method` instruction, for the implementation of `method` by `thisType`.</span></span>  
  
-   <span data-ttu-id="e5fd8-1014">`thisType` が値型で `thisType` が `method` を実装していない場合、`ptr` は逆参照され、ボックス化されて、`callvirt` `method` 命令への ' this ' ポインターとして渡されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1014">If `thisType` is a value type and `thisType` does not implement `method` then `ptr` is dereferenced, boxed, and passed as the 'this' pointer to the `callvirt` `method` instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-1015">この最後のケースは、`method` が <xref:System.Object>、<xref:System.ValueType>、または <xref:System.Enum> で定義されていて、`thisType`によってオーバーライドされていない場合にのみ発生します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1015">This last case can occur only when `method` was defined on <xref:System.Object>, <xref:System.ValueType>, or <xref:System.Enum> and not overridden by `thisType`.</span></span> <span data-ttu-id="e5fd8-1016">この場合、ボックス化によって元のオブジェクトのコピーが作成されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1016">In this case, the boxing causes a copy of the original object to be made.</span></span> <span data-ttu-id="e5fd8-1017">ただし、<xref:System.Object>、<xref:System.ValueType>、および <xref:System.Enum> のいずれのメソッドもオブジェクトの状態を変更しないため、このファクトを検出することはできません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1017">However, because none of the methods of <xref:System.Object>, <xref:System.ValueType>, and <xref:System.Enum> modify the state of the object, this fact cannot be detected.</span></span>  
  
 <span data-ttu-id="e5fd8-1018">`constrained` プレフィックスは、ジェネリックコードを作成する IL ジェネレーターをサポートしています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1018">The `constrained` prefix supports IL generators that create generic code.</span></span> <span data-ttu-id="e5fd8-1019">通常、`callvirt` 命令は、値型では有効ではありません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1019">Normally the `callvirt` instruction is not valid on value types.</span></span> <span data-ttu-id="e5fd8-1020">代わりに、IL コンパイラは、`ptr` の型および呼び出されるメソッドに応じて、コンパイル時に上記で説明した ' this ' 変換を効果的に実行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1020">Instead it is required that IL compilers effectively perform the 'this' transformation outlined above at compile time, depending on the type of `ptr` and the method being called.</span></span> <span data-ttu-id="e5fd8-1021">ただし `ptr` がコンパイル時に不明なジェネリック型である場合、コンパイル時にこの変換を行うことはできません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1021">However, when `ptr` is a generic type that is unknown at compile time, it is not possible to make this transformation at compile time.</span></span>  
  
 <span data-ttu-id="e5fd8-1022">`constrained` オペコードを使用すると、IL コンパイラは、`ptr` が値型または参照型のどちらであるかに関係なく、同じ方法で仮想関数を呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1022">The `constrained` opcode allows IL compilers to make a call to a virtual function in a uniform way independent of whether `ptr` is a value type or a reference type.</span></span> <span data-ttu-id="e5fd8-1023">`thisType` がジェネリック型の変数であるケースを想定していますが、`constrained` プレフィックスは非ジェネリック型でも機能し、値型と参照型の区別を隠す言語で仮想呼び出しを生成する複雑さを軽減することができます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1023">Although it is intended for the case where `thisType` is a generic type variable, the `constrained` prefix also works for nongeneric types and can reduce the complexity of generating virtual calls in languages that hide the distinction between value types and reference types.</span></span>  
  
 <span data-ttu-id="e5fd8-1024">`constrained` プレフィックスを使用すると、値の型に関する潜在的なバージョン管理の問題も回避されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1024">Using the `constrained` prefix also avoids potential versioning problems with value types.</span></span> <span data-ttu-id="e5fd8-1025">`constrained` プレフィックスが使用されていない場合は、値型によって System.object のメソッドがオーバーライドされるかどうかに応じて、異なる IL を生成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1025">If the `constrained` prefix is not used, different IL must be emitted depending on whether or not a value type overrides a method of System.Object.</span></span> <span data-ttu-id="e5fd8-1026">たとえば、値型 `V` によってオブジェクトの ToString () メソッドがオーバーライドされる場合、`call` `V.ToString()` 命令が生成されます。そうでない場合は、`box` 命令と `callvirt` `Object.ToString()` 命令が出力されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1026">For example, if a value type `V` overrides the Object.ToString() method, a `call` `V.ToString()` instruction is emitted; if it does not, a `box` instruction and a `callvirt` `Object.ToString()` instruction are emitted.</span></span> <span data-ttu-id="e5fd8-1027">前のケースでは、オーバーライドが後で削除された場合は、バージョン管理の問題が発生する可能性があります。後者の場合は、オーバーライドが後で追加されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1027">A versioning problem can arise in the former case if the override is later removed, and in the latter case if an override is later added.</span></span>  
  
 <span data-ttu-id="e5fd8-1028">`constrained` プレフィックスは、インターフェイスメソッドを実装する値型のメソッドを `MethodImpl`を使用して変更できるため、値型のインターフェイスメソッドの呼び出しにも使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1028">The `constrained` prefix can also be used for invocation of interface methods on value types, because the value type method implementing the interface method can be changed using a `MethodImpl`.</span></span> <span data-ttu-id="e5fd8-1029">`constrained` プレフィックスを使用しない場合、コンパイラはコンパイル時にバインドする値型のメソッドを強制的に選択します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1029">If the `constrained` prefix is not used, the compiler is forced to choose which of the value type's methods to bind to at compile time.</span></span> <span data-ttu-id="e5fd8-1030">`constrained` プレフィックスを使用すると、コンパイル時ではなく、実行時にインターフェイスメソッドを実装するメソッドに MSIL をバインドできます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1030">Using the `constrained` prefix allows the MSIL to bind to the method that implements the interface method at run time, rather than at compile time.</span></span>  
  
 <span data-ttu-id="e5fd8-1031">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`constrained` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1031">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `constrained` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Type%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1032">評価スタックの一番上の値を <see langword="native int" /> に変換します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1032">Converts the value on top of the evaluation stack to <see langword="native int" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1033">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1033">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1034">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1034">Format</span></span>|<span data-ttu-id="e5fd8-1035">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1035">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1036">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1036">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1037">D3</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1037">D3</span></span>|<span data-ttu-id="e5fd8-1038">conv. i</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1038">conv.i</span></span>|<span data-ttu-id="e5fd8-1039">`native int`に変換し、スタックで `native int` をプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1039">Convert to `native int`, pushing `native int` on stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-1040">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1040">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1041">`value` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1041">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1042">`value` がスタックからポップされ、変換操作が試行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1042">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1043">変換が成功した場合、結果の値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1043">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1044">`conv.i` オペコードは、スタックの一番上の `value` をオペコードに指定された型に変換し、その値はスタックの一番上にそのまま残します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1044">The `conv.i` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="e5fd8-1045">4バイト未満の整数値は、評価スタックに読み込まれるときに `int32` に拡張されます (`conv.i` または `conv.u` が使用されていない場合は、結果も `native int`)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1045">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="e5fd8-1046">浮動小数点値は `F` 型に変換されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1046">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="e5fd8-1047">浮動小数点数から整数値への変換では、数値が0方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1047">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="e5fd8-1048">`float64` から `float32`に変換する場合、有効桁数が失われる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1048">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="e5fd8-1049">`value` が大きすぎて `float32 (F)`に収まりきらない場合は、正の無限大 (`value` が正の場合) または負の無限大 (`value` が負の場合) が返されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1049">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="e5fd8-1050">ある整数型から別の整数型への変換でオーバーフローが発生した場合、上位ビットは切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1050">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="e5fd8-1051">結果が `int32`よりも小さい場合、値は、スロットを埋めるために符号拡張されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1051">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="e5fd8-1052">浮動小数点型から整数への変換でオーバーフローが発生した場合、返される値は指定されません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1052">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="e5fd8-1053">このフィールドを使用する場合、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1053">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="e5fd8-1054">結果の型が結果の値を正しく表すことができない場合に例外をスローする同等の命令については、「<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I>」と「<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1054">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="e5fd8-1055">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`conv.i` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1055">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1056">評価スタックの一番上の値を <see langword="int8" /> に変換し、<see langword="int32" /> への拡張 (埋め込み) を行います。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1056">Converts the value on top of the evaluation stack to <see langword="int8" />, then extends (pads) it to <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1057">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1057">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1058">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1058">Format</span></span>|<span data-ttu-id="e5fd8-1059">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1059">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1060">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1060">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1061">67</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1061">67</span></span>|<span data-ttu-id="e5fd8-1062">conv</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1062">conv.i1</span></span>|<span data-ttu-id="e5fd8-1063">`int8`に変換し、スタックで `int32` をプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1063">Convert to `int8`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-1064">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1064">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1065">`value` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1065">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1066">`value` がスタックからポップされ、変換操作が試行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1066">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1067">変換が成功した場合、結果の値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1067">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1068">`conv.i1` オペコードは、スタックの一番上の `value` をオペコードに指定された型に変換し、その値はスタックの一番上にそのまま残します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1068">The `conv.i1` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="e5fd8-1069">4バイト未満の整数値は、評価スタックに読み込まれるときに `int32` に拡張されます (`conv.i` または `conv.u` が使用されていない場合は、結果も `native int`)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1069">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="e5fd8-1070">浮動小数点値は `F` 型に変換されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1070">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="e5fd8-1071">浮動小数点数から整数値への変換では、数値が0方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1071">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="e5fd8-1072">`float64` から `float32`に変換する場合、有効桁数が失われる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1072">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="e5fd8-1073">`value` が大きすぎて `float32 (F)`に収まりきらない場合は、正の無限大 (`value` が正の場合) または負の無限大 (`value` が負の場合) が返されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1073">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="e5fd8-1074">ある整数型から別の整数型への変換でオーバーフローが発生した場合、上位ビットは切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1074">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="e5fd8-1075">結果が `int32`よりも小さい場合、値は、スロットを埋めるために符号拡張されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1075">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="e5fd8-1076">浮動小数点型から整数への変換でオーバーフローが発生した場合、返される値は指定されません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1076">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="e5fd8-1077">このフィールドを使用する場合、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1077">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="e5fd8-1078">結果の型が結果の値を正しく表すことができない場合に例外をスローする同等の命令については、「<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1>」と「<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1078">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="e5fd8-1079">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`conv.i1` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1079">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i1` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1080">評価スタックの一番上の値を <see langword="int16" /> に変換し、<see langword="int32" /> への拡張 (埋め込み) を行います。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1080">Converts the value on top of the evaluation stack to <see langword="int16" />, then extends (pads) it to <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1081">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1081">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1082">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1082">Format</span></span>|<span data-ttu-id="e5fd8-1083">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1083">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1084">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1084">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1085">68</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1085">68</span></span>|<span data-ttu-id="e5fd8-1086">i2</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1086">conv.i2</span></span>|<span data-ttu-id="e5fd8-1087">`int16`に変換し、スタックで `int32` をプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1087">Convert to `int16`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-1088">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1088">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1089">`value` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1089">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1090">`value` がスタックからポップされ、変換操作が試行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1090">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1091">変換が成功した場合、結果の値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1091">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1092">`conv.i2` オペコードは、スタックの一番上の `value` をオペコードに指定された型に変換し、その値はスタックの一番上にそのまま残します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1092">The `conv.i2` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="e5fd8-1093">4バイト未満の整数値は、評価スタックに読み込まれるときに `int32` に拡張されます (`conv.i` または `conv.u` が使用されていない場合は、結果も `native int`)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1093">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="e5fd8-1094">浮動小数点値は `F` 型に変換されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1094">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="e5fd8-1095">浮動小数点数から整数値への変換では、数値が0方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1095">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="e5fd8-1096">`float64` から `float32`に変換する場合、有効桁数が失われる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1096">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="e5fd8-1097">`value` が大きすぎて `float32 (F)`に収まりきらない場合は、正の無限大 (`value` が正の場合) または負の無限大 (`value` が負の場合) が返されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1097">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="e5fd8-1098">ある整数型から別の整数型への変換でオーバーフローが発生した場合、上位ビットは切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1098">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="e5fd8-1099">結果が `int32`よりも小さい場合、値は、スロットを埋めるために符号拡張されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1099">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="e5fd8-1100">浮動小数点型から整数への変換でオーバーフローが発生した場合、返される値は指定されません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1100">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="e5fd8-1101">このフィールドを使用する場合、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1101">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="e5fd8-1102">結果の型が結果の値を正しく表すことができない場合に例外をスローする同等の命令については、「<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2>」と「<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1102">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="e5fd8-1103">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`conv.i2` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1103">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i2` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1104">評価スタックの一番上の値を <see langword="int32" /> に変換します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1104">Converts the value on top of the evaluation stack to <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1105">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1105">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1106">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1106">Format</span></span>|<span data-ttu-id="e5fd8-1107">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1107">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1108">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1108">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1109">69</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1109">69</span></span>|<span data-ttu-id="e5fd8-1110">conv.i4</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1110">conv.i4</span></span>|<span data-ttu-id="e5fd8-1111">`int32`に変換し、スタックで `int32` をプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1111">Convert to `int32`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-1112">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1112">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1113">`value` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1113">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1114">`value` がスタックからポップされ、変換操作が試行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1114">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1115">変換が成功した場合、結果の値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1115">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1116">`conv.i4` オペコードは、スタックの一番上の `value` をオペコードに指定された型に変換し、その値はスタックの一番上にそのまま残します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1116">The `conv.i4` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="e5fd8-1117">4バイト未満の整数値は、評価スタックに読み込まれるときに `int32` に拡張されます (`conv.i` または `conv.u` が使用されていない場合は、結果も `native int`)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1117">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="e5fd8-1118">浮動小数点値は `F` 型に変換されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1118">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="e5fd8-1119">浮動小数点数から整数値への変換では、数値が0方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1119">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="e5fd8-1120">`float64` から `float32`に変換する場合、有効桁数が失われる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1120">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="e5fd8-1121">`value` が大きすぎて `float32 (F)`に収まりきらない場合は、正の無限大 (`value` が正の場合) または負の無限大 (`value` が負の場合) が返されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1121">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="e5fd8-1122">ある整数型から別の整数型への変換でオーバーフローが発生した場合、上位ビットは切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1122">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="e5fd8-1123">結果が `int32`よりも小さい場合、値は、スロットを埋めるために符号拡張されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1123">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="e5fd8-1124">浮動小数点型から整数への変換でオーバーフローが発生した場合、返される値は指定されません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1124">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="e5fd8-1125">このフィールドを使用する場合、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1125">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="e5fd8-1126">結果の型が結果の値を正しく表すことができない場合に例外をスローする同等の命令については、「<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4>」と「<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1126">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="e5fd8-1127">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`conv.i4` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1127">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i4` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1128">評価スタックの一番上の値を <see langword="int64" /> に変換します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1128">Converts the value on top of the evaluation stack to <see langword="int64" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1129">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1129">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1130">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1130">Format</span></span>|<span data-ttu-id="e5fd8-1131">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1131">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1132">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1132">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1133">6A</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1133">6A</span></span>|<span data-ttu-id="e5fd8-1134">i8</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1134">conv.i8</span></span>|<span data-ttu-id="e5fd8-1135">`int64`に変換し、スタックで `int64` をプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1135">Convert to `int64`, pushing `int64` on stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-1136">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1136">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1137">`value` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1137">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1138">`value` がスタックからポップされ、変換操作が試行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1138">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1139">変換が成功した場合、結果の値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1139">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1140">`conv.i8` オペコードは、スタックの一番上の `value` をオペコードに指定された型に変換し、その値はスタックの一番上にそのまま残します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1140">The `conv.i8` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="e5fd8-1141">4バイト未満の整数値は、評価スタックに読み込まれるときに `int32` に拡張されます (`conv.i` または `conv.u` が使用されていない場合は、結果も `native int`)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1141">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="e5fd8-1142">浮動小数点値は `F` 型に変換されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1142">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="e5fd8-1143">浮動小数点数から整数値への変換では、数値が0方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1143">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="e5fd8-1144">`float64` から `float32`に変換する場合、有効桁数が失われる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1144">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="e5fd8-1145">`value` が大きすぎて `float32 (F)`に収まりきらない場合は、正の無限大 (`value` が正の場合) または負の無限大 (`value` が負の場合) が返されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1145">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="e5fd8-1146">ある整数型から別の整数型への変換でオーバーフローが発生した場合、上位ビットは切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1146">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="e5fd8-1147">結果が `int32`よりも小さい場合、値は、スロットを埋めるために符号拡張されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1147">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="e5fd8-1148">浮動小数点型から整数への変換でオーバーフローが発生した場合、返される値は指定されません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1148">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="e5fd8-1149">このフィールドを使用する場合、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1149">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="e5fd8-1150">結果の型が結果の値を正しく表すことができない場合に例外をスローする同等の命令については、「<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8>」と「<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1150">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="e5fd8-1151">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`conv.i8` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1151">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i8` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1152">評価スタックの一番上にある符号付きの値を符号付き <see langword="native int" /> に変換し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1152">Converts the signed value on top of the evaluation stack to signed <see langword="native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1153">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1153">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1154">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1154">Format</span></span>|<span data-ttu-id="e5fd8-1155">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1155">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1156">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1156">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1157">D4</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1157">D4</span></span>|<span data-ttu-id="e5fd8-1158">conv.ovf.i</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1158">conv.ovf.i</span></span>|<span data-ttu-id="e5fd8-1159">(`native int`としてスタック上の) `native int` に変換し、オーバーフロー時に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1159">Convert to a `native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="e5fd8-1160">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1160">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1161">`value` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1161">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1162">`value` がスタックからポップされ、変換操作が試行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1162">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="e5fd8-1163">オーバーフローが発生した場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1163">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1164">変換が成功した場合、結果の値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1164">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1165">`conv.ovf.i` オペコードは、スタックの一番上の `value` をオペコードに指定された型に変換し、その値をスタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1165">The `conv.ovf.i` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="e5fd8-1166">値が大きすぎるか小さすぎて対象の型で表すことができない場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1166">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="e5fd8-1167">浮動小数点数から整数値への変換では、数値が0方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1167">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="e5fd8-1168">4バイト未満の整数値は、評価スタックに読み込まれるときに `int32` に拡張されることに注意してください (`conv.ovf.i` または `conv.ovf.u` が使用されていない場合は、結果も `native int`)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1168">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="e5fd8-1169">結果を結果の型で表すことができない場合、<xref:System.OverflowException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1169"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="e5fd8-1170">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`conv.ovf.i` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1170">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1171">評価スタックの一番上にある符号なしの値を符号付き <see langword="native int" /> に変換し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1171">Converts the unsigned value on top of the evaluation stack to signed <see langword="native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1172">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1172">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1173">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1173">Format</span></span>|<span data-ttu-id="e5fd8-1174">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1174">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1175">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1175">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1176">8A</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1176">8A</span></span>|<span data-ttu-id="e5fd8-1177">conv.ovf.i.un</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1177">conv.ovf.i.un</span></span>|<span data-ttu-id="e5fd8-1178">符号なしの値を `native int`としてスタック上の `native int` に変換し、オーバーフロー時に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1178">Converts an unsigned value to a `native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="e5fd8-1179">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1179">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1180">`value` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1180">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1181">`value` がスタックからポップされ、変換操作が試行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1181">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="e5fd8-1182">オーバーフローが発生した場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1182">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1183">変換が成功した場合、結果の値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1183">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1184">`conv.ovf.i.un` オペコードは、スタックの一番上の `value` をオペコードに指定された型に変換し、その値をスタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1184">The `conv.ovf.i.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="e5fd8-1185">値が大きすぎるか小さすぎて対象の型で表すことができない場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1185">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="e5fd8-1186">浮動小数点数から整数値への変換では、数値が0方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1186">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="e5fd8-1187">4バイト未満の整数値は、評価スタックに読み込まれるときに `int32` に拡張されることに注意してください (`conv.ovf.i` または `conv.ovf.u` が使用されていない場合は、結果も `native int`)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1187">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="e5fd8-1188">結果を結果の型で表すことができない場合、<xref:System.OverflowException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1188"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="e5fd8-1189">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`conv.ovf.i.un` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1189">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i.un` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1190">評価スタックの一番上にある符号付きの値を符号付き <see langword="int8" /> に変換し、その値を <see langword="int32" /> に拡張し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1190">Converts the signed value on top of the evaluation stack to signed <see langword="int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1191">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1191">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1192">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1192">Format</span></span>|<span data-ttu-id="e5fd8-1193">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1193">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1194">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1194">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1195">B3</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1195">B3</span></span>|<span data-ttu-id="e5fd8-1196">conv.ovf.i1</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1196">conv.ovf.i1</span></span>|<span data-ttu-id="e5fd8-1197">(`int32`としてスタック上の) `int8` に変換し、オーバーフロー時に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1197">Convert to an `int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="e5fd8-1198">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1198">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1199">`value` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1199">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1200">`value` がスタックからポップされ、変換操作が試行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1200">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="e5fd8-1201">オーバーフローが発生した場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1201">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1202">変換が成功した場合、結果の値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1202">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1203">`conv.ovf.i1` オペコードは、スタックの一番上の `value` をオペコードに指定された型に変換し、その値をスタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1203">The `conv.ovf.i1` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="e5fd8-1204">値が大きすぎるか小さすぎて対象の型で表すことができない場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1204">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="e5fd8-1205">浮動小数点数から整数値への変換では、数値が0方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1205">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="e5fd8-1206">4バイト未満の整数値は、評価スタックに読み込まれるときに `int32` に拡張されることに注意してください (`conv.ovf.i` または `conv.ovf.u` が使用されていない場合は、結果も `native int`)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1206">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="e5fd8-1207">結果を結果の型で表すことができない場合、<xref:System.OverflowException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1207"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="e5fd8-1208">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`conv.ovf.i1` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1208">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i1` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I1_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I1_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I1_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I1_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I1_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I1_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1209">評価スタックの一番上にある符号なしの値を符号付き <see langword="int8" /> に変換し、その値を <see langword="int32" /> に拡張し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1209">Converts the unsigned value on top of the evaluation stack to signed <see langword="int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1210">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1210">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1211">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1211">Format</span></span>|<span data-ttu-id="e5fd8-1212">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1212">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1213">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1213">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1214">82</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1214">82</span></span>|<span data-ttu-id="e5fd8-1215">conv.ovf.i1.un</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1215">conv.ovf.i1.un</span></span>|<span data-ttu-id="e5fd8-1216">符号なしの値を `int32`としてスタック上の `int8` に変換し、オーバーフロー時に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1216">Converts an unsigned value to an `int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="e5fd8-1217">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1217">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1218">`value` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1218">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1219">`value` がスタックからポップされ、変換操作が試行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1219">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="e5fd8-1220">オーバーフローが発生した場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1220">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1221">変換が成功した場合、結果の値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1221">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1222">`conv.ovf.i1.un` オペコードは、スタックの一番上の `value` をオペコードに指定された型に変換し、その値をスタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1222">The `conv.ovf.i1.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="e5fd8-1223">値が大きすぎるか小さすぎて対象の型で表すことができない場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1223">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="e5fd8-1224">浮動小数点数から整数値への変換では、数値が0方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1224">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="e5fd8-1225">4バイト未満の整数値は、評価スタックに読み込まれるときに `int32` に拡張されることに注意してください (`conv.ovf.i` または `conv.ovf.u` が使用されていない場合は、結果も `native int`)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1225">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="e5fd8-1226">結果を結果の型で表すことができない場合、<xref:System.OverflowException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1226"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="e5fd8-1227">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`conv.ovf.i1.un` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1227">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i1.un` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1228">評価スタックの一番上にある符号付きの値を符号付き <see langword="int16" /> に変換し、変換した値を <see langword="int32" /> に拡張し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1228">Converts the signed value on top of the evaluation stack to signed <see langword="int16" /> and extending it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1229">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1229">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1230">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1230">Format</span></span>|<span data-ttu-id="e5fd8-1231">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1231">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1232">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1232">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1233">B5</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1233">B5</span></span>|<span data-ttu-id="e5fd8-1234">conv.ovf.i2</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1234">conv.ovf.i2</span></span>|<span data-ttu-id="e5fd8-1235">(`int32`としてスタック上の) `int16` に変換し、オーバーフロー時に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1235">Convert to an `int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="e5fd8-1236">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1236">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1237">`value` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1237">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1238">`value` がスタックからポップされ、変換操作が試行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1238">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="e5fd8-1239">オーバーフローが発生した場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1239">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1240">変換が成功した場合、結果の値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1240">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1241">`conv.ovf.i2` オペコードは、スタックの一番上の `value` をオペコードに指定された型に変換し、その値をスタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1241">The `conv.ovf.i2` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="e5fd8-1242">値が大きすぎるか小さすぎて対象の型で表すことができない場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1242">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="e5fd8-1243">浮動小数点数から整数値への変換では、数値が0方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1243">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="e5fd8-1244">4バイト未満の整数値は、評価スタックに読み込まれるときに `int32` に拡張されることに注意してください (`conv.ovf.i` または `conv.ovf.u` が使用されていない場合は、結果も `native int`)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1244">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="e5fd8-1245">結果を結果の型で表すことができない場合、<xref:System.OverflowException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1245"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="e5fd8-1246">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`conv.ovf.i2` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1246">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i2` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I2_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I2_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I2_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I2_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I2_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I2_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1247">評価スタックの一番上にある符号なしの値を符号付き <see langword="int16" /> に変換し、その値を <see langword="int32" /> に拡張し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1247">Converts the unsigned value on top of the evaluation stack to signed <see langword="int16" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1248">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1248">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1249">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1249">Format</span></span>|<span data-ttu-id="e5fd8-1250">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1250">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1251">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1251">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1252">83</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1252">83</span></span>|<span data-ttu-id="e5fd8-1253">conv.ovf.i2.un</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1253">conv.ovf.i2.un</span></span>|<span data-ttu-id="e5fd8-1254">符号なしの値を `int32`としてスタック上の `int16` に変換し、オーバーフロー時に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1254">Converts an unsigned value to an `int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="e5fd8-1255">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1255">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1256">`value` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1256">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1257">`value` がスタックからポップされ、変換操作が試行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1257">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="e5fd8-1258">オーバーフローが発生した場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1258">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1259">変換が成功した場合、結果の値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1259">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1260">`conv.ovf.i2.un` オペコードは、スタックの一番上の `value` をオペコードに指定された型に変換し、その値をスタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1260">The `conv.ovf.i2.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="e5fd8-1261">値が大きすぎるか小さすぎて対象の型で表すことができない場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1261">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="e5fd8-1262">浮動小数点数から整数値への変換では、数値が0方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1262">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="e5fd8-1263">4バイト未満の整数値は、評価スタックに読み込まれるときに `int32` に拡張されることに注意してください (`conv.ovf.i` または `conv.ovf.u` が使用されていない場合は、結果も `native int`)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1263">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="e5fd8-1264">結果を結果の型で表すことができない場合、<xref:System.OverflowException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1264"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="e5fd8-1265">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`conv.ovf.i2.un` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1265">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i2.un` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1266">評価スタックの一番上にある符号付きの値を符号付き <see langword="int32" /> に変換し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1266">Converts the signed value on top of the evaluation stack to signed <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1267">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1267">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1268">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1268">Format</span></span>|<span data-ttu-id="e5fd8-1269">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1269">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1270">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1270">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1271">B7</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1271">B7</span></span>|<span data-ttu-id="e5fd8-1272">conv.ovf.i4</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1272">conv.ovf.i4</span></span>|<span data-ttu-id="e5fd8-1273">(`int32`としてスタック上の) `int32` に変換し、オーバーフロー時に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1273">Convert to an `int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="e5fd8-1274">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1274">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1275">`value` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1275">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1276">`value` がスタックからポップされ、変換操作が試行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1276">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="e5fd8-1277">オーバーフローが発生した場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1277">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1278">変換が成功した場合、結果の値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1278">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1279">`conv.ovf.i4` オペコードは、スタックの一番上の `value` をオペコードに指定された型に変換し、その値をスタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1279">The `conv.ovf.i4` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="e5fd8-1280">値が大きすぎるか小さすぎて対象の型で表すことができない場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1280">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="e5fd8-1281">浮動小数点数から整数値への変換では、数値が0方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1281">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="e5fd8-1282">4バイト未満の整数値は、評価スタックに読み込まれるときに `int32` に拡張されることに注意してください (`conv.ovf.i` または `conv.ovf.u` が使用されていない場合は、結果も `native int`)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1282">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="e5fd8-1283">結果を結果の型で表すことができない場合、<xref:System.OverflowException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1283"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="e5fd8-1284">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`conv.ovf.i4` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1284">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i4` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I4_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I4_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I4_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I4_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I4_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I4_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1285">評価スタックの一番上にある符号なしの値を符号付き <see langword="int32" /> に変換し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1285">Converts the unsigned value on top of the evaluation stack to signed <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1286">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1286">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1287">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1287">Format</span></span>|<span data-ttu-id="e5fd8-1288">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1288">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1289">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1289">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1290">84</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1290">84</span></span>|<span data-ttu-id="e5fd8-1291">conv.ovf.i4.un</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1291">conv.ovf.i4.un</span></span>|<span data-ttu-id="e5fd8-1292">符号なしの値を `int32`としてスタック上の `int32` に変換し、オーバーフロー時に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1292">Converts an unsigned value to an `int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="e5fd8-1293">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1293">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1294">`value` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1294">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1295">`value` がスタックからポップされ、変換操作が試行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1295">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="e5fd8-1296">オーバーフローが発生した場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1296">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1297">変換が成功した場合、結果の値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1297">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1298">`conv.ovf.i4.un` オペコードは、スタックの一番上の `value` をオペコードに指定された型に変換し、その値をスタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1298">The `conv.ovf.i4.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="e5fd8-1299">値が大きすぎるか小さすぎて対象の型で表すことができない場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1299">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="e5fd8-1300">浮動小数点数から整数値への変換では、数値が0方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1300">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="e5fd8-1301">4バイト未満の整数値は、評価スタックに読み込まれるときに `int32` に拡張されることに注意してください (`conv.ovf.i` または `conv.ovf.u` が使用されていない場合は、結果も `native int`)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1301">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="e5fd8-1302">結果を結果の型で表すことができない場合、<xref:System.OverflowException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1302"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="e5fd8-1303">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`conv.ovf.i4.un` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1303">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i4.un` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1304">評価スタックの一番上にある符号付きの値を符号付き <see langword="int64" /> に変換し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1304">Converts the signed value on top of the evaluation stack to signed <see langword="int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1305">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1305">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1306">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1306">Format</span></span>|<span data-ttu-id="e5fd8-1307">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1307">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1308">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1308">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1309">B9</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1309">B9</span></span>|<span data-ttu-id="e5fd8-1310">conv.ovf.i8</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1310">conv.ovf.i8</span></span>|<span data-ttu-id="e5fd8-1311">(`int64`としてスタック上の) `int64` に変換し、オーバーフロー時に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1311">Convert to an `int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="e5fd8-1312">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1312">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1313">`value` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1313">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1314">`value` がスタックからポップされ、変換操作が試行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1314">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="e5fd8-1315">オーバーフローが発生した場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1315">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1316">変換が成功した場合、結果の値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1316">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1317">`conv.ovf.i8` オペコードは、スタックの一番上の `value` をオペコードに指定された型に変換し、その値をスタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1317">The `conv.ovf.i8` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="e5fd8-1318">値が大きすぎるか小さすぎて対象の型で表すことができない場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1318">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="e5fd8-1319">浮動小数点数から整数値への変換では、数値が0方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1319">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="e5fd8-1320">4バイト未満の整数値は、評価スタックに読み込まれるときに `int32` に拡張されることに注意してください (`conv.ovf.i` または `conv.ovf.u` が使用されていない場合は、結果も `native int`)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1320">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="e5fd8-1321">結果を結果の型で表すことができない場合、<xref:System.OverflowException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1321"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="e5fd8-1322">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`conv.ovf.i8` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1322">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i8` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I8_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I8_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I8_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I8_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I8_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I8_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1323">評価スタックの一番上にある符号なしの値を符号付き <see langword="int64" /> に変換し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1323">Converts the unsigned value on top of the evaluation stack to signed <see langword="int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1324">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1324">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1325">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1325">Format</span></span>|<span data-ttu-id="e5fd8-1326">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1326">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1327">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1327">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1328">85</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1328">85</span></span>|<span data-ttu-id="e5fd8-1329">conv.ovf.i8.un</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1329">conv.ovf.i8.un</span></span>|<span data-ttu-id="e5fd8-1330">符号なしの値を `int64`としてスタック上の `int64` に変換し、オーバーフロー時に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1330">Converts an unsigned value to an `int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="e5fd8-1331">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1331">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1332">`value` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1332">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1333">`value` がスタックからポップされ、変換操作が試行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1333">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="e5fd8-1334">オーバーフローが発生した場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1334">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1335">変換が成功した場合、結果の値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1335">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1336">`conv.ovf.i8.un` オペコードは、スタックの一番上の `value` をオペコードに指定された型に変換し、その値をスタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1336">The `conv.ovf.i8.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="e5fd8-1337">値が大きすぎるか小さすぎて対象の型で表すことができない場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1337">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="e5fd8-1338">浮動小数点数から整数値への変換では、数値が0方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1338">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="e5fd8-1339">4バイト未満の整数値は、評価スタックに読み込まれるときに `int32` に拡張されることに注意してください (`conv.ovf.i` または `conv.ovf.u` が使用されていない場合は、結果も `native int`)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1339">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="e5fd8-1340">結果を結果の型で表すことができない場合、<xref:System.OverflowException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1340"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="e5fd8-1341">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`conv.ovf.i8.un` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1341">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i8.un` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1342">評価スタックの一番上にある符号付きの値を <see langword="unsigned native int" /> に変換し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1342">Converts the signed value on top of the evaluation stack to <see langword="unsigned native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1343">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1343">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1344">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1344">Format</span></span>|<span data-ttu-id="e5fd8-1345">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1345">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1346">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1346">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1347">D5</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1347">D5</span></span>|<span data-ttu-id="e5fd8-1348">conv.ovf.u</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1348">conv.ovf.u</span></span>|<span data-ttu-id="e5fd8-1349">(`native int`としてスタック上の) `unsigned native int` に変換し、オーバーフロー時に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1349">Convert to an `unsigned native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="e5fd8-1350">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1350">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1351">`value` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1351">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1352">`value` がスタックからポップされ、変換操作が試行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1352">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="e5fd8-1353">オーバーフローが発生した場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1353">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1354">変換が成功した場合、結果の値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1354">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1355">`conv.ovf.u` オペコードは、スタックの一番上の `value` をオペコードに指定された型に変換し、その値をスタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1355">The `conv.ovf.u` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="e5fd8-1356">値が大きすぎるか小さすぎて対象の型で表すことができない場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1356">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="e5fd8-1357">浮動小数点数から整数値への変換では、数値が0方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1357">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="e5fd8-1358">4バイト未満の整数値は、評価スタックに読み込まれるときに `int32` に拡張されることに注意してください (`conv.ovf.i` または `conv.ovf.u` が使用されていない場合は、結果も `native int`)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1358">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="e5fd8-1359">結果を結果の型で表すことができない場合、<xref:System.OverflowException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1359"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="e5fd8-1360">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`conv.ovf.u` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1360">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1361">評価スタックの一番上にある符号なしの値を <see langword="unsigned native int" /> に変換し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1361">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1362">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1362">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1363">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1363">Format</span></span>|<span data-ttu-id="e5fd8-1364">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1364">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1365">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1365">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1366">8B</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1366">8B</span></span>|<span data-ttu-id="e5fd8-1367">conv.ovf.u.un</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1367">conv.ovf.u.un</span></span>|<span data-ttu-id="e5fd8-1368">符号なしの値を `native int`としてスタック上の `unsigned native int` に変換し、オーバーフロー時に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1368">Converts un unsigned value to an `unsigned native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="e5fd8-1369">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1369">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1370">`value` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1370">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1371">`value` がスタックからポップされ、変換操作が試行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1371">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="e5fd8-1372">オーバーフローが発生した場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1372">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1373">変換が成功した場合、結果の値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1373">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1374">`conv.ovf.u.un` オペコードは、スタックの一番上の `value` をオペコードに指定された型に変換し、その値をスタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1374">The `conv.ovf.u.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="e5fd8-1375">値が大きすぎるか小さすぎて対象の型で表すことができない場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1375">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="e5fd8-1376">浮動小数点数から整数値への変換では、数値が0方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1376">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="e5fd8-1377">4バイト未満の整数値は、評価スタックに読み込まれるときに `int32` に拡張されることに注意してください (`conv.ovf.i` または `conv.ovf.u` が使用されていない場合は、結果も `native int`)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1377">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="e5fd8-1378">結果を結果の型で表すことができない場合、<xref:System.OverflowException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1378"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="e5fd8-1379">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`conv.uvf.u.un` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1379">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.uvf.u.un` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1380">評価スタックの一番上にある符号付きの値を <see langword="unsigned int8" /> に変換し、その値を <see langword="int32" /> に拡張し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1380">Converts the signed value on top of the evaluation stack to <see langword="unsigned int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1381">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1381">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1382">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1382">Format</span></span>|<span data-ttu-id="e5fd8-1383">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1383">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1384">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1384">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1385">B4</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1385">B4</span></span>|<span data-ttu-id="e5fd8-1386">conv.ovf.u1</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1386">conv.ovf.u1</span></span>|<span data-ttu-id="e5fd8-1387">(`int32`としてスタック上の) `unsigned int8` に変換し、オーバーフロー時に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1387">Convert to an `unsigned int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="e5fd8-1388">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1388">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1389">`value` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1389">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1390">`value` がスタックからポップされ、変換操作が試行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1390">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="e5fd8-1391">オーバーフローが発生した場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1391">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1392">変換が成功した場合、結果の値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1392">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1393">`conv.ovf.u1` オペコードは、スタックの一番上の `value` をオペコードに指定された型に変換し、その値をスタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1393">The `conv.ovf.u1` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="e5fd8-1394">値が大きすぎるか小さすぎて対象の型で表すことができない場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1394">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="e5fd8-1395">浮動小数点数から整数値への変換では、数値が0方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1395">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="e5fd8-1396">4バイト未満の整数値は、評価スタックに読み込まれるときに `int32` に拡張されることに注意してください (`conv.ovf.i` または `conv.ovf.u` が使用されていない場合は、結果も `native int`)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1396">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="e5fd8-1397">結果を結果の型で表すことができない場合、<xref:System.OverflowException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1397"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="e5fd8-1398">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`conv.ovf.u1` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1398">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u1` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U1_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U1_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U1_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U1_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U1_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U1_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1399">評価スタックの一番上にある符号なしの値を <see langword="unsigned int8" /> に変換し、その値を <see langword="int32" /> に拡張し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1399">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1400">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1400">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1401">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1401">Format</span></span>|<span data-ttu-id="e5fd8-1402">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1402">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1403">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1403">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1404">86</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1404">86</span></span>|<span data-ttu-id="e5fd8-1405">conv.ovf.u1.un</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1405">conv.ovf.u1.un</span></span>|<span data-ttu-id="e5fd8-1406">符号なしの値を `int32`としてスタック上の `unsigned int8` に変換し、オーバーフロー時に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1406">Converts an unsigned value to an `unsigned int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="e5fd8-1407">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1407">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1408">`value` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1408">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1409">`value` がスタックからポップされ、変換操作が試行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1409">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="e5fd8-1410">オーバーフローが発生した場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1410">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1411">変換が成功した場合、結果の値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1411">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1412">`conv.ovf.u1.un` オペコードは、スタックの一番上の `value` をオペコードに指定された型に変換し、その値をスタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1412">The `conv.ovf.u1.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="e5fd8-1413">値が大きすぎるか小さすぎて対象の型で表すことができない場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1413">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="e5fd8-1414">浮動小数点数から整数値への変換では、数値が0方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1414">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="e5fd8-1415">4バイト未満の整数値は、評価スタックに読み込まれるときに `int32` に拡張されることに注意してください (`conv.ovf.i` または `conv.ovf.u` が使用されていない場合は、結果も `native int`)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1415">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="e5fd8-1416">結果を結果の型で表すことができない場合、<xref:System.OverflowException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1416"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="e5fd8-1417">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`conv.ovf.u1.un` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1417">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u1.un` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1418">評価スタックの一番上にある符号付きの値を <see langword="unsigned int16" /> に変換し、その値を <see langword="int32" /> に拡張し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1418">Converts the signed value on top of the evaluation stack to <see langword="unsigned int16" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1419">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1419">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1420">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1420">Format</span></span>|<span data-ttu-id="e5fd8-1421">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1421">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1422">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1422">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1423">B6</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1423">B6</span></span>|<span data-ttu-id="e5fd8-1424">conv.ovf.u2</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1424">conv.ovf.u2</span></span>|<span data-ttu-id="e5fd8-1425">(`int32`としてスタック上の) `unsigned int16` に変換し、オーバーフロー時に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1425">Convert to an `unsigned int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="e5fd8-1426">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1426">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1427">`value` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1427">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1428">`value` がスタックからポップされ、変換操作が試行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1428">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="e5fd8-1429">オーバーフローが発生した場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1429">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1430">変換が成功した場合、結果の値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1430">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1431">`conv.ovf.u2` オペコードは、スタックの一番上の `value` をオペコードに指定された型に変換し、その値をスタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1431">The `conv.ovf.u2` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="e5fd8-1432">値が大きすぎるか小さすぎて対象の型で表すことができない場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1432">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="e5fd8-1433">浮動小数点数から整数値への変換では、数値が0方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1433">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="e5fd8-1434">4バイト未満の整数値は、評価スタックに読み込まれるときに `int32` に拡張されることに注意してください (`conv.ovf.i` または `conv.ovf.u` が使用されていない場合は、結果も `native int`)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1434">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="e5fd8-1435">結果を結果の型で表すことができない場合、<xref:System.OverflowException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1435"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="e5fd8-1436">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`conv.ovf.u2` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1436">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u2` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U2_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U2_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U2_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U2_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U2_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U2_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1437">評価スタックの一番上にある符号なしの値を <see langword="unsigned int16" /> に変換し、その値を <see langword="int32" /> に拡張し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1437">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int16" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1438">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1438">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1439">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1439">Format</span></span>|<span data-ttu-id="e5fd8-1440">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1440">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1441">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1441">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1442">87</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1442">87</span></span>|<span data-ttu-id="e5fd8-1443">conv.ovf.u2.un</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1443">conv.ovf.u2.un</span></span>|<span data-ttu-id="e5fd8-1444">符号なしの値を `int32`としてスタック上の `unsigned int16` に変換し、オーバーフロー時に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1444">Converts an unsigned value to an `unsigned int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="e5fd8-1445">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1445">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1446">`value` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1446">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1447">`value` がスタックからポップされ、変換操作が試行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1447">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="e5fd8-1448">オーバーフローが発生した場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1448">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1449">変換が成功した場合、結果の値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1449">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1450">`conv.ovf.u2.un` オペコードは、スタックの一番上の `value` をオペコードに指定された型に変換し、その値をスタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1450">The `conv.ovf.u2.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="e5fd8-1451">値が大きすぎるか小さすぎて対象の型で表すことができない場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1451">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="e5fd8-1452">浮動小数点数から整数値への変換では、数値が0方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1452">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="e5fd8-1453">4バイト未満の整数値は、評価スタックに読み込まれるときに `int32` に拡張されることに注意してください (`conv.ovf.i` または `conv.ovf.u` が使用されていない場合は、結果も `native int`)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1453">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="e5fd8-1454">結果を結果の型で表すことができない場合、<xref:System.OverflowException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1454"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="e5fd8-1455">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`conv.ovf.u2.un` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1455">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u2.un` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1456">評価スタックの一番上にある符号付きの値を <see langword="unsigned int32" /> に変換し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1456">Converts the signed value on top of the evaluation stack to <see langword="unsigned int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1457">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1457">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1458">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1458">Format</span></span>|<span data-ttu-id="e5fd8-1459">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1459">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1460">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1460">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1461">B8</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1461">B8</span></span>|<span data-ttu-id="e5fd8-1462">conv.ovf.u4</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1462">conv.ovf.u4</span></span>|<span data-ttu-id="e5fd8-1463">(`int32`としてスタック上の) `unsigned int32` に変換し、オーバーフロー時に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1463">Convert to an `unsigned int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="e5fd8-1464">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1464">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1465">`value` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1465">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1466">`value` がスタックからポップされ、変換操作が試行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1466">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="e5fd8-1467">オーバーフローが発生した場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1467">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1468">変換が成功した場合、結果の値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1468">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1469">`conv.ovf.u4` オペコードは、スタックの一番上の `value` をオペコードに指定された型に変換し、その値をスタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1469">The `conv.ovf.u4` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="e5fd8-1470">値が大きすぎるか小さすぎて対象の型で表すことができない場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1470">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="e5fd8-1471">浮動小数点数から整数値への変換では、数値が0方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1471">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="e5fd8-1472">4バイト未満の整数値は、評価スタックに読み込まれるときに `int32` に拡張されることに注意してください (`conv.ovf.i` または `conv.ovf.u` が使用されていない場合は、結果も `native int`)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1472">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="e5fd8-1473">結果を結果の型で表すことができない場合、<xref:System.OverflowException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1473"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="e5fd8-1474">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`conv.ovf.u4` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1474">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u4` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U4_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U4_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U4_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U4_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U4_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U4_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1475">評価スタックの一番上にある符号なしの値を <see langword="unsigned int32" /> に変換し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1475">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1476">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1476">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1477">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1477">Format</span></span>|<span data-ttu-id="e5fd8-1478">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1478">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1479">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1479">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1480">88</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1480">88</span></span>|<span data-ttu-id="e5fd8-1481">conv.ovf.u4.un</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1481">conv.ovf.u4.un</span></span>|<span data-ttu-id="e5fd8-1482">符号なしの値を `int32`としてスタック上の `unsigned int32` に変換し、オーバーフロー時に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1482">Converts an unsigned value to an `unsigned int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="e5fd8-1483">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1483">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1484">`value` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1484">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1485">`value` がスタックからポップされ、変換操作が試行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1485">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="e5fd8-1486">オーバーフローが発生した場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1486">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1487">変換が成功した場合、結果の値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1487">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1488">`conv.ovf.u4.un` オペコードは、スタックの一番上の `value` をオペコードに指定された型に変換し、その値をスタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1488">The `conv.ovf.u4.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="e5fd8-1489">値が大きすぎるか小さすぎて対象の型で表すことができない場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1489">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="e5fd8-1490">浮動小数点数から整数値への変換では、数値が0方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1490">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="e5fd8-1491">4バイト未満の整数値は、評価スタックに読み込まれるときに `int32` に拡張されることに注意してください (`conv.ovf.i` または `conv.ovf.u` が使用されていない場合は、結果も `native int`)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1491">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="e5fd8-1492">結果を結果の型で表すことができない場合、<xref:System.OverflowException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1492"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="e5fd8-1493">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`conv.ovf.u4.un` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1493">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u4.un` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1494">評価スタックの一番上にある符号付きの値を <see langword="unsigned int64" /> に変換し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1494">Converts the signed value on top of the evaluation stack to <see langword="unsigned int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1495">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1495">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1496">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1496">Format</span></span>|<span data-ttu-id="e5fd8-1497">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1497">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1498">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1498">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1499">BA</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1499">BA</span></span>|<span data-ttu-id="e5fd8-1500">conv.ovf.u8</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1500">conv.ovf.u8</span></span>|<span data-ttu-id="e5fd8-1501">(`int64`としてスタック上の) `unsigned int64` に変換し、オーバーフロー時に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1501">Convert to an `unsigned int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="e5fd8-1502">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1502">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1503">`value` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1503">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1504">`value` がスタックからポップされ、変換操作が試行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1504">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="e5fd8-1505">オーバーフローが発生した場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1505">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1506">変換が成功した場合、結果の値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1506">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1507">`conv.ovf.u8` オペコードは、スタックの一番上の `value` をオペコードに指定された型に変換し、その値をスタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1507">The `conv.ovf.u8` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="e5fd8-1508">値が大きすぎるか小さすぎて対象の型で表すことができない場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1508">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="e5fd8-1509">浮動小数点数から整数値への変換では、数値が0方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1509">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="e5fd8-1510">4バイト未満の整数値は、評価スタックに読み込まれるときに `int32` に拡張されることに注意してください (`conv.ovf.i` または `conv.ovf.u` が使用されていない場合は、結果も `native int`)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1510">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="e5fd8-1511">結果を結果の型で表すことができない場合、<xref:System.OverflowException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1511"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="e5fd8-1512">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`conv.ovf.u8` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1512">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u8` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U8_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U8_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U8_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U8_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U8_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U8_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1513">評価スタックの一番上にある符号なしの値を <see langword="unsigned int64" /> に変換し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1513">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1514">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1514">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1515">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1515">Format</span></span>|<span data-ttu-id="e5fd8-1516">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1516">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1517">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1517">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1518">89</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1518">89</span></span>|<span data-ttu-id="e5fd8-1519">conv.ovf.u8.un</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1519">conv.ovf.u8.un</span></span>|<span data-ttu-id="e5fd8-1520">符号なしの値を `int64`としてスタック上の `unsigned int64` に変換し、オーバーフロー時に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1520">Converts an unsigned value to an `unsigned int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="e5fd8-1521">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1521">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1522">`value` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1522">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1523">`value` がスタックからポップされ、変換操作が試行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1523">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="e5fd8-1524">オーバーフローが発生した場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1524">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1525">変換が成功した場合、結果の値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1525">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1526">`conv.ovf.u8.un` オペコードは、スタックの一番上の `value` をオペコードに指定された型に変換し、その値をスタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1526">The `conv.ovf.u8.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="e5fd8-1527">値が大きすぎるか小さすぎて対象の型で表すことができない場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1527">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="e5fd8-1528">浮動小数点数から整数値への変換では、数値が0方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1528">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="e5fd8-1529">4バイト未満の整数値は、評価スタックに読み込まれるときに `int32` に拡張されることに注意してください (`conv.ovf.i` または `conv.ovf.u` が使用されていない場合は、結果も `native int`)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1529">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="e5fd8-1530">結果を結果の型で表すことができない場合、<xref:System.OverflowException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1530"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="e5fd8-1531">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`conv.ovf.u8.un` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1531">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u8.un` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_R_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_R_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_R_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_R_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_R_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_R_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_R_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_R_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1532">評価スタックの一番上の符号なし整数値を <see langword="float32" /> に変換します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1532">Converts the unsigned integer value on top of the evaluation stack to <see langword="float32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1533">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1533">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1534">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1534">Format</span></span>|<span data-ttu-id="e5fd8-1535">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1535">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1536">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1536">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1537">76</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1537">76</span></span>|<span data-ttu-id="e5fd8-1538">conv.r.un</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1538">conv.r.un</span></span>|<span data-ttu-id="e5fd8-1539">符号なし整数を浮動小数点型に変換し、スタックに `F` をプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1539">Convert unsigned integer to floating-point, pushing `F` on stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-1540">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1540">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1541">`value` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1541">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1542">`value` がスタックからポップされ、変換操作が試行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1542">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1543">変換が成功した場合、結果の値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1543">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1544">`conv.r.un` オペコードは、スタックの一番上の `value` をオペコードに指定された型に変換し、その値はスタックの一番上にそのまま残します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1544">The `conv.r.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="e5fd8-1545">4バイト未満の整数値は、評価スタックに読み込まれるときに `int32` に拡張されます (`conv.i` または `conv.u` が使用されていない場合は、結果も `native int`)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1545">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="e5fd8-1546">浮動小数点値は `F` 型に変換されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1546">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="e5fd8-1547">浮動小数点数から整数値への変換では、数値が0方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1547">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="e5fd8-1548">`float64` から `float32`に変換する場合、有効桁数が失われる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1548">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="e5fd8-1549">`value` が大きすぎて `float32 (F)`に収まりきらない場合は、正の無限大 (`value` が正の場合) または負の無限大 (`value` が負の場合) が返されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1549">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="e5fd8-1550">ある整数型から別の整数型への変換でオーバーフローが発生した場合、上位ビットは切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1550">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="e5fd8-1551">結果が `int32`よりも小さい場合、値は、スロットを埋めるために符号拡張されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1551">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="e5fd8-1552">浮動小数点型から整数への変換でオーバーフローが発生した場合、返される `result` は指定されません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1552">If overflow occurs converting a floating-point type to an integer the `result` returned is unspecified.</span></span> <span data-ttu-id="e5fd8-1553">`conv.r.un` 操作は、スタックから整数を取得し、それを符号なしとして解釈し、整数を表す浮動小数点数に置き換えます。これが、有効桁数を失うことなく整数を表すのに十分な幅である場合は `float32`、それ以外の場合は `float64`です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1553">The `conv.r.un` operation takes an integer off the stack, interprets it as unsigned, and replaces it with a floating-point number to represent the integer: either a `float32`, if this is wide enough to represent the integer without loss of precision, or else a `float64`.</span></span>  
  
 <span data-ttu-id="e5fd8-1554">このフィールドを使用する場合、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1554">No exceptions are ever thrown when using this field.</span></span>  
  
 <span data-ttu-id="e5fd8-1555">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`conv.r.un` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1555">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.r.un` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1556">評価スタックの一番上の値を <see langword="float32" /> に変換します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1556">Converts the value on top of the evaluation stack to <see langword="float32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1557">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1557">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1558">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1558">Format</span></span>|<span data-ttu-id="e5fd8-1559">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1559">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1560">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1560">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1561">6B</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1561">6B</span></span>|<span data-ttu-id="e5fd8-1562">conv.r4</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1562">conv.r4</span></span>|<span data-ttu-id="e5fd8-1563">`float32`に変換し、スタックで `F` をプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1563">Convert to `float32`, pushing `F` on stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-1564">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1564">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1565">`value` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1565">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1566">`value` がスタックからポップされ、変換操作が試行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1566">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1567">変換が成功した場合、結果の値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1567">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1568">`conv.r4` オペコードは、スタックの一番上の `value` をオペコードに指定された型に変換し、その値はスタックの一番上にそのまま残します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1568">The `conv.r4` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="e5fd8-1569">4バイト未満の整数値は、評価スタックに読み込まれるときに `int32` に拡張されます (`conv.i` または `conv.u` が使用されていない場合は、結果も `native int`)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1569">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="e5fd8-1570">浮動小数点値は `F` 型に変換されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1570">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="e5fd8-1571">浮動小数点数から整数値への変換では、数値が0方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1571">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="e5fd8-1572">`float64` から `float32`に変換する場合、有効桁数が失われる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1572">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="e5fd8-1573">`value` が大きすぎて `float32 (F)`に収まりきらない場合は、正の無限大 (`value` が正の場合) または負の無限大 (`value` が負の場合) が返されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1573">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="e5fd8-1574">ある整数型から別の整数型への変換でオーバーフローが発生した場合、上位ビットは切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1574">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="e5fd8-1575">結果が `int32`よりも小さい場合、値は、スロットを埋めるために符号拡張されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1575">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="e5fd8-1576">浮動小数点型から整数への変換でオーバーフローが発生した場合、返される値は指定されません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1576">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="e5fd8-1577">このフィールドを使用する場合、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1577">No exceptions are ever thrown when using this field.</span></span>  
  
 <span data-ttu-id="e5fd8-1578">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`conv.r4` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1578">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.r4` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1579">評価スタックの一番上の値を <see langword="float64" /> に変換します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1579">Converts the value on top of the evaluation stack to <see langword="float64" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1580">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1580">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1581">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1581">Format</span></span>|<span data-ttu-id="e5fd8-1582">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1582">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1583">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1583">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1584">6C</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1584">6C</span></span>|<span data-ttu-id="e5fd8-1585">conv.r8</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1585">conv.r8</span></span>|<span data-ttu-id="e5fd8-1586">`float64`に変換し、スタックで `F` をプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1586">Convert to `float64`, pushing `F` on stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-1587">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1587">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1588">`value` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1588">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1589">`value` がスタックからポップされ、変換操作が試行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1589">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1590">変換が成功した場合、結果の値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1590">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1591">`conv.r8` オペコードは、スタックの一番上の `value` をオペコードに指定された型に変換し、その値はスタックの一番上にそのまま残します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1591">The `conv.r8` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="e5fd8-1592">4バイト未満の整数値は、評価スタックに読み込まれるときに `int32` に拡張されます (`conv.i` または `conv.u` が使用されていない場合は、結果も `native int`)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1592">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="e5fd8-1593">浮動小数点値は `F` 型に変換されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1593">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="e5fd8-1594">浮動小数点数から整数値への変換では、数値が0方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1594">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="e5fd8-1595">`float64` から `float32`に変換する場合、有効桁数が失われる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1595">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="e5fd8-1596">`value` が大きすぎて `float32 (F)`に収まりきらない場合は、正の無限大 (`value` が正の場合) または負の無限大 (`value` が負の場合) が返されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1596">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="e5fd8-1597">ある整数型から別の整数型への変換でオーバーフローが発生した場合、上位ビットは切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1597">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="e5fd8-1598">結果が `int32`よりも小さい場合、値は、スロットを埋めるために符号拡張されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1598">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="e5fd8-1599">浮動小数点型から整数への変換でオーバーフローが発生した場合、返される値は指定されません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1599">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="e5fd8-1600">このフィールドを使用する場合、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1600">No exceptions are ever thrown when using this field.</span></span>  
  
 <span data-ttu-id="e5fd8-1601">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`conv.r8` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1601">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.r8` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1602">評価スタックの一番上の値を <see langword="unsigned native int" /> に変換し、その値を <see langword="native int" /> に拡張します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1602">Converts the value on top of the evaluation stack to <see langword="unsigned native int" />, and extends it to <see langword="native int" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1603">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1603">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1604">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1604">Format</span></span>|<span data-ttu-id="e5fd8-1605">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1605">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1606">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1606">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1607">E0</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1607">E0</span></span>|<span data-ttu-id="e5fd8-1608">conv</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1608">conv.u</span></span>|<span data-ttu-id="e5fd8-1609">`unsigned native int`に変換し、スタックで `native int` をプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1609">Convert to `unsigned native int`, pushing `native int` on stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-1610">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1610">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1611">`value` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1611">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1612">`value` がスタックからポップされ、変換操作が試行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1612">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1613">変換が成功した場合、結果の値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1613">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1614">`conv.u` オペコードは、スタックの一番上の `value` をオペコードに指定された型に変換し、その値はスタックの一番上にそのまま残します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1614">The `conv.u` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="e5fd8-1615">4バイト未満の整数値は、評価スタックに読み込まれるときに `int32` に拡張されます (`conv.i` または `conv.u` が使用されていない場合は、結果も `native int`)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1615">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="e5fd8-1616">浮動小数点値は `F` 型に変換されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1616">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="e5fd8-1617">浮動小数点数から整数値への変換では、数値が0方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1617">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="e5fd8-1618">`float64` から `float32`に変換する場合、有効桁数が失われる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1618">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="e5fd8-1619">`value` が大きすぎて `float32 (F)`に収まりきらない場合は、正の無限大 (`value` が正の場合) または負の無限大 (`value` が負の場合) が返されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1619">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="e5fd8-1620">ある整数型から別の整数型への変換でオーバーフローが発生した場合、上位ビットは切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1620">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="e5fd8-1621">結果が `int32`よりも小さい場合、値は、スロットを埋めるために符号拡張されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1621">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="e5fd8-1622">浮動小数点型から整数への変換でオーバーフローが発生した場合、返される値は指定されません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1622">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="e5fd8-1623">このフィールドを使用する場合、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1623">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="e5fd8-1624">結果の型が結果の値を正しく表すことができない場合に例外をスローする同等の命令については、「<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I>」と「<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1624">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="e5fd8-1625">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`conv.u` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1625">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1626">評価スタックの一番上の値を <see langword="unsigned int8" /> に変換し、その値を <see langword="int32" /> に拡張します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1626">Converts the value on top of the evaluation stack to <see langword="unsigned int8" />, and extends it to <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1627">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1627">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1628">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1628">Format</span></span>|<span data-ttu-id="e5fd8-1629">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1629">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1630">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1630">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1631">D2</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1631">D2</span></span>|<span data-ttu-id="e5fd8-1632">conv</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1632">conv.u1</span></span>|<span data-ttu-id="e5fd8-1633">`int8`に変換し、スタックで `int32` をプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1633">Convert to `int8`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-1634">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1634">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1635">`value` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1635">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1636">`value` がスタックからポップされ、変換操作が試行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1636">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1637">変換が成功した場合、結果の値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1637">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1638">`conv.u1` オペコードは、スタックの一番上の `value` をオペコードに指定された型に変換し、その値はスタックの一番上にそのまま残します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1638">The `conv.u1` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="e5fd8-1639">4バイト未満の整数値は、評価スタックに読み込まれるときに `int32` に拡張されます (`conv.i` または `conv.u` が使用されていない場合は、結果も `native int`)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1639">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="e5fd8-1640">浮動小数点値は `F` 型に変換されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1640">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="e5fd8-1641">浮動小数点数から整数値への変換では、数値が0方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1641">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="e5fd8-1642">`float64` から `float32`に変換する場合、有効桁数が失われる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1642">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="e5fd8-1643">`value` が大きすぎて `float32 (F)`に収まりきらない場合は、正の無限大 (`value` が正の場合) または負の無限大 (`value` が負の場合) が返されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1643">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="e5fd8-1644">ある整数型から別の整数型への変換でオーバーフローが発生した場合、上位ビットは切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1644">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="e5fd8-1645">結果が `int32`よりも小さい場合、値は、スロットを埋めるために符号拡張されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1645">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="e5fd8-1646">浮動小数点型から整数への変換でオーバーフローが発生した場合、返される値は指定されません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1646">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="e5fd8-1647">このフィールドを使用する場合、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1647">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="e5fd8-1648">結果の型が結果の値を正しく表すことができない場合に例外をスローする同等の命令については、「<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1>」と「<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1648">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="e5fd8-1649">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`conv.u1` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1649">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u1` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1650">評価スタックの一番上の値を <see langword="unsigned int16" /> に変換し、その値を <see langword="int32" /> に拡張します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1650">Converts the value on top of the evaluation stack to <see langword="unsigned int16" />, and extends it to <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1651">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1651">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1652">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1652">Format</span></span>|<span data-ttu-id="e5fd8-1653">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1653">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1654">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1654">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1655">D1</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1655">D1</span></span>|<span data-ttu-id="e5fd8-1656">conv. u2</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1656">conv.u2</span></span>|<span data-ttu-id="e5fd8-1657">`int16`に変換し、スタックで `int32` をプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1657">Convert to `int16`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-1658">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1658">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1659">`value` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1659">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1660">`value` がスタックからポップされ、変換操作が試行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1660">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1661">変換が成功した場合、結果の値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1661">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1662">`conv.u2` オペコードは、スタックの一番上の `value` をオペコードに指定された型に変換し、その値はスタックの一番上にそのまま残します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1662">The `conv.u2` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="e5fd8-1663">4バイト未満の整数値は、評価スタックに読み込まれるときに `int32` に拡張されます (`conv.i` または `conv.u` が使用されていない場合は、結果も `native int`)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1663">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="e5fd8-1664">浮動小数点値は `F` 型に変換されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1664">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="e5fd8-1665">浮動小数点数から整数値への変換では、数値が0方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1665">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="e5fd8-1666">`float64` から `float32`に変換する場合、有効桁数が失われる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1666">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="e5fd8-1667">`value` が大きすぎて `float32 (F)`に収まりきらない場合は、正の無限大 (`value` が正の場合) または負の無限大 (`value` が負の場合) が返されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1667">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="e5fd8-1668">ある整数型から別の整数型への変換でオーバーフローが発生した場合、上位ビットは切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1668">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="e5fd8-1669">結果が `int32`よりも小さい場合、値は、スロットを埋めるために符号拡張されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1669">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="e5fd8-1670">浮動小数点型から整数への変換でオーバーフローが発生した場合、返される値は指定されません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1670">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="e5fd8-1671">このフィールドを使用する場合、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1671">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="e5fd8-1672">結果の型が結果の値を正しく表すことができない場合に例外をスローする同等の命令については、「<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2>」と「<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1672">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="e5fd8-1673">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`conv.u2` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1673">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u2` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1674">評価スタックの一番上の値を <see langword="unsigned int32" /> に変換し、その値を <see langword="int32" /> に拡張します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1674">Converts the value on top of the evaluation stack to <see langword="unsigned int32" />, and extends it to <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1675">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1675">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1676">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1676">Format</span></span>|<span data-ttu-id="e5fd8-1677">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1677">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1678">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1678">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1679">6D</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1679">6D</span></span>|<span data-ttu-id="e5fd8-1680">u4</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1680">conv.u4</span></span>|<span data-ttu-id="e5fd8-1681">`unsigned int32`に変換し、スタックで `int32` をプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1681">Convert to `unsigned int32`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-1682">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1682">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1683">`value` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1683">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1684">`value` がスタックからポップされ、変換操作が試行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1684">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1685">変換が成功した場合、結果の値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1685">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1686">`conv.u4` オペコードは、スタックの一番上の `value` をオペコードに指定された型に変換し、その値はスタックの一番上にそのまま残します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1686">The `conv.u4` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="e5fd8-1687">4バイト未満の整数値は、評価スタックに読み込まれるときに `int32` に拡張されます (`conv.i` または `conv.u` が使用されていない場合は、結果も `native int`)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1687">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="e5fd8-1688">浮動小数点値は `F` 型に変換されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1688">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="e5fd8-1689">浮動小数点数から整数値への変換では、数値が0方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1689">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="e5fd8-1690">`float64` から `float32`に変換する場合、有効桁数が失われる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1690">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="e5fd8-1691">`value` が大きすぎて `float32 (F)`に収まりきらない場合は、正の無限大 (`value` が正の場合) または負の無限大 (`value` が負の場合) が返されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1691">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="e5fd8-1692">ある整数型から別の整数型への変換でオーバーフローが発生した場合、上位ビットは切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1692">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="e5fd8-1693">結果が `int32`よりも小さい場合、値は、スロットを埋めるために符号拡張されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1693">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="e5fd8-1694">浮動小数点型から整数への変換でオーバーフローが発生した場合、返される値は指定されません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1694">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="e5fd8-1695">このフィールドを使用する場合、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1695">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="e5fd8-1696">結果の型が結果の値を正しく表すことができない場合に例外をスローする同等の命令については、「<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4>」と「<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1696">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="e5fd8-1697">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`conv.u4` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1697">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u4` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1698">評価スタックの一番上の値を <see langword="unsigned int64" /> に変換し、その値を <see langword="int64" /> に拡張します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1698">Converts the value on top of the evaluation stack to <see langword="unsigned int64" />, and extends it to <see langword="int64" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1699">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1699">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1700">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1700">Format</span></span>|<span data-ttu-id="e5fd8-1701">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1701">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1702">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1702">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1703">6E</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1703">6E</span></span>|<span data-ttu-id="e5fd8-1704">u8</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1704">conv.u8</span></span>|<span data-ttu-id="e5fd8-1705">`int64`に変換し、スタックで `int64` をプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1705">Convert to `int64`, pushing `int64` on stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-1706">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1706">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1707">`value` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1707">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1708">`value` がスタックからポップされ、変換操作が試行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1708">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1709">変換が成功した場合、結果の値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1709">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1710">`conv.u8` オペコードは、スタックの一番上の `value` をオペコードに指定された型に変換し、その値はスタックの一番上にそのまま残します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1710">The `conv.u8` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="e5fd8-1711">4バイト未満の整数値は、評価スタックに読み込まれるときに `int32` に拡張されます (`conv.i` または `conv.u` が使用されていない場合は、結果も `native int`)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1711">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="e5fd8-1712">浮動小数点値は `F` 型に変換されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1712">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="e5fd8-1713">浮動小数点数から整数値への変換では、数値が0方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1713">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="e5fd8-1714">`float64` から `float32`に変換する場合、有効桁数が失われる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1714">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="e5fd8-1715">`value` が大きすぎて `float32 (F)`に収まりきらない場合は、正の無限大 (`value` が正の場合) または負の無限大 (`value` が負の場合) が返されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1715">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="e5fd8-1716">ある整数型から別の整数型への変換でオーバーフローが発生した場合、上位ビットは切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1716">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="e5fd8-1717">結果が `int32`よりも小さい場合、値は、スロットを埋めるために符号拡張されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1717">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="e5fd8-1718">浮動小数点型から整数への変換でオーバーフローが発生した場合、返される値は指定されません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1718">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="e5fd8-1719">このフィールドを使用する場合、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1719">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="e5fd8-1720">結果の型が結果の値を正しく表すことができない場合に例外をスローする同等の命令については、「<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8>」と「<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1720">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="e5fd8-1721">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`conv.u8` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1721">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u8` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cpblk">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cpblk;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cpblk" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cpblk" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cpblk As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cpblk;" />
      <MemberSignature Language="F#" Value=" staticval mutable Cpblk : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Cpblk" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1722">ソース アドレスから指定した数のバイトを宛先アドレスにコピーします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1722">Copies a specified number bytes from a source address to a destination address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1723">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1723">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1724">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1724">Format</span></span>|<span data-ttu-id="e5fd8-1725">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1725">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1726">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1726">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1727">FE 17</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1727">FE 17</span></span>|<span data-ttu-id="e5fd8-1728">cpblk</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1728">cpblk</span></span>|<span data-ttu-id="e5fd8-1729">メモリブロック間でデータをコピーします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1729">Copy data from one memory block to another.</span></span>|  
  
 <span data-ttu-id="e5fd8-1730">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1730">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1731">宛先アドレスはスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1731">The destination address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1732">ソースアドレスはスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1732">The source address is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1733">コピーするバイト数がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1733">The number of bytes to copy is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="e5fd8-1734">バイト数、送信元アドレス、および宛先アドレスがスタックからポップされます。指定されたバイト数が、転送元アドレスから宛先アドレスにコピーされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1734">The number of bytes, the source address, and the destination address are popped from the stack; the specified number of bytes are copied from the source address to the destination address.</span></span>  
  
 <span data-ttu-id="e5fd8-1735">`cpblk` 命令は、送信元アドレス (型 `*`、`native int`、または `&`) から宛先アドレス (`*`、`native int`、または `&`) に、バイトの数 (型 `unsigned int32`) をコピーします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1735">The `cpblk` instruction copies a number (type `unsigned int32`) of bytes from a source address (of type `*`, `native int`, or `&`) to a destination address (of type `*`, `native int`, or `&`).</span></span> <span data-ttu-id="e5fd8-1736">コピー元とコピー先の領域が重複する場合、`cpblk` の動作は指定されません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1736">The behavior of `cpblk` is unspecified if the source and destination areas overlap.</span></span>  
  
 <span data-ttu-id="e5fd8-1737">`cpblk` は、送信元と送信先の両方がコンピューターの自然サイズに合わせて配置されていることを前提としています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1737">`cpblk` assumes that both the source and destination addressed are aligned to the natural size of the machine.</span></span> <span data-ttu-id="e5fd8-1738">`cpblk` 命令の直前に `unaligned.<prefix>` 命令を指定して、変換元または変換先のどちらかが整列していないことを示すことができます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1738">The `cpblk` instruction can be immediately preceded by the `unaligned.<prefix>` instruction to indicate that either the source or the destination is unaligned.</span></span>  
  
 <span data-ttu-id="e5fd8-1739">`cpblk` 命令の操作は、直前の <xref:System.Reflection.Emit.OpCodes.Volatile> または <xref:System.Reflection.Emit.OpCodes.Unaligned> プレフィックス命令によって変更できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1739">The operation of the `cpblk` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-1740">無効なアドレスが検出されると <xref:System.NullReferenceException> がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1740"><xref:System.NullReferenceException> may be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="e5fd8-1741">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`cpblk` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1741">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cpblk` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cpobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cpobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cpobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cpobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cpobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cpobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Cpobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Cpobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1742">オブジェクトのアドレス (<see langword="&amp;" />、<see langword="*" />、または <see langword="native int" /> の各型) にある値型をコピー先のオブジェクトのアドレス (<see langword="&amp;" />、<see langword="*" />、または <see langword="native int" /> の各型) にコピーします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1742">Copies the value type located at the address of an object (type <see langword="&amp;" />, <see langword="*" /> or <see langword="native int" />) to the address of the destination object (type <see langword="&amp;" />, <see langword="*" /> or <see langword="native int" />).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1743">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1743">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1744">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1744">Format</span></span>|<span data-ttu-id="e5fd8-1745">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1745">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1746">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1746">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1747">70 < `T` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-1747">70 < `T` ></span></span>|<span data-ttu-id="e5fd8-1748">cpobj `classTok`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1748">cpobj `classTok`</span></span>|<span data-ttu-id="e5fd8-1749">ソースオブジェクトから変換先オブジェクトに値型をコピーします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1749">Copies a value type from a source object to a destination object.</span></span>|  
  
 <span data-ttu-id="e5fd8-1750">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1750">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1751">ターゲットオブジェクト参照がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1751">The destination object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1752">ソースオブジェクト参照がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1752">The source object reference is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1753">2つのオブジェクト参照がスタックからポップされます。ソースオブジェクトのアドレスの値の型が、コピー先のオブジェクトのアドレスにコピーされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1753">The two object references are popped from the stack; the value type at the address of the source object is copied to the address of the destination object.</span></span>  
  
 <span data-ttu-id="e5fd8-1754">ソースオブジェクトとターゲットオブジェクトの参照が、クラストークン `classTok` (`typeref` または `typedef`) によって表されるクラスのインスタンスへのポインターではない場合、または `classTok` が値型を表していない場合、`cpobj` の動作は指定されません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1754">The behavior of `cpobj` is unspecified if the source and destination object references are not pointers to instances of the class represented by the class token `classTok` (a `typeref` or `typedef`), or if `classTok` does not represent a value type.</span></span>  
  
 <span data-ttu-id="e5fd8-1755">無効なアドレスが検出されると <xref:System.NullReferenceException> がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1755"><xref:System.NullReferenceException> may be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="e5fd8-1756">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`cpobj` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1756">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cpobj` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Type%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Div">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Div;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Div" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Div" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Div As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Div;" />
      <MemberSignature Language="F#" Value=" staticval mutable Div : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Div" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1757">2 つの値の除算を実行し、結果を浮動小数点値 (<see langword="F" /> 型) または商 (<see langword="int32" /> 型) として評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1757">Divides two values and pushes the result as a floating-point (type <see langword="F" />) or quotient (type <see langword="int32" />) onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1758">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1758">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1759">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1759">Format</span></span>|<span data-ttu-id="e5fd8-1760">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1760">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1761">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1761">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1762">5B</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1762">5B</span></span>|<span data-ttu-id="e5fd8-1763">div</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1763">div</span></span>|<span data-ttu-id="e5fd8-1764">2つの値を除算して、商または浮動小数点の結果を返します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1764">Divides two values to return a quotient or floating-point result.</span></span>|  
  
 <span data-ttu-id="e5fd8-1765">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1765">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1766">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1766">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1767">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1767">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1768">`value2` と `value1` がスタックからポップされます。`value1` は `value2`で除算されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1768">`value2` and `value1` are popped from the stack; `value1` is divided by `value2`.</span></span>  
  
4.  <span data-ttu-id="e5fd8-1769">結果がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1769">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1770">`result` = `value1` div value2 は次の条件を満たします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1770">`result` = `value1` div value2 satisfies the following conditions:</span></span>  
  
 <span data-ttu-id="e5fd8-1771">&#124;`result` &#124; = &#124; `value1` &#124; / &#124; `value2` &#124;、および:</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1771">&#124; `result` &#124; = &#124; `value1` &#124; / &#124; `value2` &#124;, and:</span></span>  
  
 <span data-ttu-id="e5fd8-1772">sign (`result`) = +、sign (`value1`) = sign (`value2`)、または-、if sign (`value1`) ~ = sign (`value2`)</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1772">sign(`result`) = +, if sign(`value1`) = sign(`value2`), or -, if sign(`value1`) ~= sign(`value2`)</span></span>  
  
 <span data-ttu-id="e5fd8-1773">`div` 命令は、結果を計算してスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1773">The `div` instruction computes the result and pushes it on the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1774">整数除算は0方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1774">Integer division truncates towards zero.</span></span>  
  
 <span data-ttu-id="e5fd8-1775">有限数を0で除算すると、正しい符号付きの無限値が生成されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1775">Division of a finite number by zero produces the correctly signed infinite value.</span></span>  
  
 <span data-ttu-id="e5fd8-1776">0をゼロまたは無限大で除算すると、NaN (非数) 値が生成されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1776">Dividing zero by zero or infinity by infinity produces the NaN (Not-A-Number) value.</span></span> <span data-ttu-id="e5fd8-1777">任意の数を無限大で除算すると、ゼロ値が生成されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1777">Any number divided by infinity will produce a zero value.</span></span>  
  
 <span data-ttu-id="e5fd8-1778">結果を結果の型で表すことができない場合、整数演算では <xref:System.ArithmeticException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1778">Integral operations throw <xref:System.ArithmeticException> if the result cannot be represented in the result type.</span></span> <span data-ttu-id="e5fd8-1779">これは、`value1` が負の最大値で、`value2` が-1 の場合に発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1779">This can happen if `value1` is the maximum negative value, and `value2` is -1.</span></span>  
  
 <span data-ttu-id="e5fd8-1780">`value2` が0の場合、整数演算は <xref:System.DivideByZeroException> をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1780">Integral operations throw <xref:System.DivideByZeroException> if `value2` is zero.</span></span>  
  
 <span data-ttu-id="e5fd8-1781">Intel ベースのプラットフォームでは、コンピューティング時に <xref:System.OverflowException> がスローされることに注意してください (minint div-1)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1781">Note that on Intel-based platforms an <xref:System.OverflowException> is thrown when computing (minint div -1).</span></span> <span data-ttu-id="e5fd8-1782">浮動小数点演算では、例外がスローされることはありません (代わりに Nan または無限大が生成されます)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1782">Floating-point operations never throw an exception (they produce NaNs or infinities instead).</span></span>  
  
 <span data-ttu-id="e5fd8-1783">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`div` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1783">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `div` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Div_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Div_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Div_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Div_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Div_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Div_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Div_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Div_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1784">2 つの符号なし整数値を除算し、結果 (<see langword="int32" />) を評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1784">Divides two unsigned integer values and pushes the result (<see langword="int32" />) onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1785">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1785">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1786">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1786">Format</span></span>|<span data-ttu-id="e5fd8-1787">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1787">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1788">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1788">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1789">5C</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1789">5C</span></span>|<span data-ttu-id="e5fd8-1790">div.un</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1790">div.un</span></span>|<span data-ttu-id="e5fd8-1791">2つの値を符号なしで除算して商を返します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1791">Divides two values, unsigned, returning a quotient.</span></span>|  
  
 <span data-ttu-id="e5fd8-1792">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1792">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1793">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1793">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1794">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1794">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1795">`value2` と `value1` がスタックからポップされます。`value1` は `value2`で除算されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1795">`value2` and `value1` are popped from the stack; `value1` is divided by `value2`.</span></span>  
  
4.  <span data-ttu-id="e5fd8-1796">結果がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1796">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1797">`div.un` 命令は、符号なし整数として取得された `value2`で除算された `value1` を計算し、スタックに `result` をプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1797">The `div.un` instruction computes `value1` divided by `value2`, both taken as unsigned integers, and pushes the `result` on the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1798">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`div.un` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1798">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `div.un` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dup">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Dup;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Dup" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Dup" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Dup As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Dup;" />
      <MemberSignature Language="F#" Value=" staticval mutable Dup : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Dup" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1799">現在評価スタックの一番上にある値をコピーし、そのコピーを評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1799">Copies the current topmost value on the evaluation stack, and then pushes the copy onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1800">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1800">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1801">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1801">Format</span></span>|<span data-ttu-id="e5fd8-1802">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1802">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1803">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1803">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1804">25</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1804">25</span></span>|<span data-ttu-id="e5fd8-1805">dup</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1805">dup</span></span>|<span data-ttu-id="e5fd8-1806">スタックの一番上の値を複製します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1806">Duplicates the value on the top of the stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-1807">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1807">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1808">`value` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1808">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1809">`value` は、複製のためにスタックからポップされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1809">`value` is popped off of the stack for duplication.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1810">`value` がスタックに戻されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1810">`value` is pushed back onto the stack.</span></span>  
  
4.  <span data-ttu-id="e5fd8-1811">重複する値がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1811">A duplicate value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1812">`dup` 命令は、スタックの最上位要素を複製し、2つの同じ値をその上に残します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1812">The `dup` instruction duplicates the top element of the stack, and leaves two identical values atop it.</span></span>  
  
 <span data-ttu-id="e5fd8-1813">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`dup` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1813">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `dup` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Endfilter">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Endfilter;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Endfilter" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Endfilter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Endfilter As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Endfilter;" />
      <MemberSignature Language="F#" Value=" staticval mutable Endfilter : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Endfilter" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1814">例外の <see langword="filter" /> 句から共通言語基盤 (CLI) 例外ハンドラーに制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1814">Transfers control from the <see langword="filter" /> clause of an exception back to the Common Language Infrastructure (CLI) exception handler.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1815">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1815">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1816">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1816">Format</span></span>|<span data-ttu-id="e5fd8-1817">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1817">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1818">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1818">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1819">FE 11</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1819">FE 11</span></span>|<span data-ttu-id="e5fd8-1820">endfilter</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1820">endfilter</span></span>|<span data-ttu-id="e5fd8-1821">SEH 例外処理のフィルター句を終了します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1821">End filter clause of SEH exception handling.</span></span>|  
  
 <span data-ttu-id="e5fd8-1822">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1822">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1823">`value` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1823">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1824">`value` がスタックからポップされます。`endfilter` が実行され、制御が例外ハンドラーに転送されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1824">`value` is popped from the stack; `endfilter` is executed and control is transferred to the exception handler.</span></span>  
  
 <span data-ttu-id="e5fd8-1825">`Value` (`int32` 型であり、特定の値のセットの1つである必要があります) は、フィルター句から返されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1825">`Value` (which must be of type `int32` and is one of a specific set of values) is returned from the filter clause.</span></span> <span data-ttu-id="e5fd8-1826">次のいずれかである必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1826">It should be one of:</span></span>  
  
-   <span data-ttu-id="e5fd8-1827">`exception_continue_search` (`value` = 0) を使用して、例外ハンドラーの検索を続行します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1827">`exception_continue_search` (`value` = 0) to continue searching for an exception handler</span></span>  
  
-   <span data-ttu-id="e5fd8-1828">`exception_execute_handler` (`value` = 1) を使用して例外処理の2番目のフェーズを開始します。 finally ブロックは、このフィルター句に関連付けられているハンドラーが配置されるまで実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1828">`exception_execute_handler` (`value` = 1) to start the second phase of exception handling where finally blocks are run until the handler associated with this filter clause is located.</span></span> <span data-ttu-id="e5fd8-1829">検出が完了すると、ハンドラーが実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1829">Upon discovery, the handler is executed.</span></span>  
  
 <span data-ttu-id="e5fd8-1830">その他の整数値は、指定されていない結果を生成します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1830">Other integer values will produce unspecified results.</span></span>  
  
 <span data-ttu-id="e5fd8-1831">フィルターのエントリポイントは、メソッドの例外テーブルに示されているように、フィルターのコードブロックの最初の命令である必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1831">The entry point of a filter, as shown in the method's exception table, must be the first instruction in the filter's code block.</span></span> <span data-ttu-id="e5fd8-1832">`endfilter` 命令は、フィルターのコードブロックの最後の命令である必要があります (したがって、1つのフィルターブロックには1つの `endfilter` しか存在できません)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1832">The `endfilter` instruction must be the last instruction in the filter's code block (hence there can only be one `endfilter` for any single filter block).</span></span> <span data-ttu-id="e5fd8-1833">`endfilter` 命令を実行すると、制御は CLI 例外処理機構に論理的に戻ります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1833">After executing the `endfilter` instruction, control logically flows back to the CLI exception handling mechanism.</span></span>  
  
 <span data-ttu-id="e5fd8-1834">例外メカニズムを使用する場合を除き、コントロールをフィルターブロックに転送することはできません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1834">Control cannot be transferred into a filter block except through the exception mechanism.</span></span> <span data-ttu-id="e5fd8-1835">`throw` 命令を使用する場合や、最後の `endfilter` 命令を実行する場合を除き、コントロールをフィルターブロックの外に移すことはできません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1835">Control cannot be transferred out of a filter block except through the use of a `throw` instruction or by executing the final `endfilter` instruction.</span></span> <span data-ttu-id="e5fd8-1836">`filter` ブロック内に `try` ブロックを埋め込むことはできません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1836">You cannot embed a `try` block within a `filter` block.</span></span> <span data-ttu-id="e5fd8-1837">例外が `filter` ブロック内でスローされると、その例外はインターセプトされ、値 0 (`exception_continue_search`) が返されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1837">If an exception is thrown inside the `filter` block, it is intercepted and a value of 0 (`exception_continue_search`) is returned.</span></span>  
  
 <span data-ttu-id="e5fd8-1838">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`endfilter` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1838">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `endfilter` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Endfinally">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Endfinally;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Endfinally" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Endfinally" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Endfinally As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Endfinally;" />
      <MemberSignature Language="F#" Value=" staticval mutable Endfinally : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Endfinally" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1839">例外ブロックの <see langword="fault" /> 句または <see langword="finally" /> 句から共通言語基盤 (CLI) 例外ハンドラーに制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1839">Transfers control from the <see langword="fault" /> or <see langword="finally" /> clause of an exception block back to the Common Language Infrastructure (CLI) exception handler.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1840">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1840">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1841">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1841">Format</span></span>|<span data-ttu-id="e5fd8-1842">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1842">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1843">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1843">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1844">DC</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1844">DC</span></span>|<span data-ttu-id="e5fd8-1845">endfinally</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1845">endfinally</span></span><br /><br /> <span data-ttu-id="e5fd8-1846">endfault</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1846">endfault</span></span>|<span data-ttu-id="e5fd8-1847">例外ブロックの `finally` または `fault` 句を終了します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1847">Ends the `finally` or `fault` clause of an exception block.</span></span>|  
  
 <span data-ttu-id="e5fd8-1848">この命令に対するスタック移行の動作はありません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1848">There are no stack transition behaviors for this instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-1849">`Endfinally` と `endfault` は、例外ハンドラーが呼び出されるまでスタックアンワインドが続行されるように `finally` または `fault` 句の末尾に通知します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1849">`Endfinally` and `endfault` signal the end of the `finally` or `fault` clause so that stack unwinding can continue until the exception handler is invoked.</span></span> <span data-ttu-id="e5fd8-1850">`endfinally` または `endfault` 命令は、CLI 例外機構に制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1850">The `endfinally` or `endfault` instruction transfers control back to the CLI exception mechanism.</span></span> <span data-ttu-id="e5fd8-1851">次に、保護されたブロックが leave 命令で終了した場合に、チェーン内の次の `finally` 句を検索します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1851">The mechanism then searches for the next `finally` clause in the chain if the protected block was exited with a leave instruction.</span></span> <span data-ttu-id="e5fd8-1852">例外を使用して保護されたブロックが終了した場合、CLI は次の `finally` または `fault`を検索するか、例外処理の最初のパス中に選択された例外ハンドラーを入力します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1852">If the protected block was exited with an exception, the CLI will search for the next `finally` or `fault`, or enter the exception handler chosen during the first pass of exception handling.</span></span>  
  
 <span data-ttu-id="e5fd8-1853">`endfinally` 命令は、`finally` ブロック内で構文的にのみ表示される場合があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1853">An `endfinally` instruction might only appear lexically within a `finally` block.</span></span> <span data-ttu-id="e5fd8-1854">`endfilter` 命令とは異なり、ブロックが `endfinally` 命令で終了する必要はありません。また、必要に応じて、ブロック内に `endfinally` 命令をいくつでも指定できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1854">Unlike the `endfilter` instruction, there is no requirement that the block end with an `endfinally` instruction, and there can be as many `endfinally` instructions within the block as required.</span></span> <span data-ttu-id="e5fd8-1855">これらの同じ制限は、`endfault` 命令と `fault` ブロックにも適用されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1855">These same restrictions apply to the `endfault` instruction and the `fault` block.</span></span>  
  
 <span data-ttu-id="e5fd8-1856">例外メカニズムを使用する場合を除き、コントロールを `finally` (または `fault`) ブロックに転送することはできません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1856">Control cannot be transferred into a `finally` (or `fault`) block except through the exception mechanism.</span></span> <span data-ttu-id="e5fd8-1857">`throw` 命令を使用したり、`endfinally` (または `endfault`) 命令を実行したりする以外に、`finally` (または `fault`) ブロックから制御を転送することはできません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1857">Control cannot be transferred out of a `finally` (or `fault`) block except through the use of a `throw` instruction or executing the `endfinally` (or `endfault`) instruction.</span></span> <span data-ttu-id="e5fd8-1858">特に、`finally` (または `fault`) ブロックを "フォールアウト" したり、`finally` (または `fault`) ブロック内で <xref:System.Reflection.Emit.OpCodes.Ret> または <xref:System.Reflection.Emit.OpCodes.Leave> 命令を実行したりすることはできません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1858">In particular, you cannot "fall out" of a `finally` (or `fault`) block or to execute a <xref:System.Reflection.Emit.OpCodes.Ret> or <xref:System.Reflection.Emit.OpCodes.Leave> instruction within a `finally` (or `fault`) block.</span></span>  
  
 <span data-ttu-id="e5fd8-1859">`endfault` と `endfinally` の命令はエイリアスであることに注意してください。これらは同じオペコードに対応します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1859">Note that the `endfault` and `endfinally` instructions are aliases - they correspond to the same opcode.</span></span>  
  
 <span data-ttu-id="e5fd8-1860">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードでは、`endfinally` (`endfault`) オペコード、および `ILGenerator` メソッド <xref:System.Reflection.Emit.ILGenerator.EndExceptionBlock%2A>を使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1860">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `endfinally` (`endfault`) opcode, as well as the `ILGenerator` method <xref:System.Reflection.Emit.ILGenerator.EndExceptionBlock%2A>.</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
-   <xref:System.Reflection.Emit.ILGenerator.EndExceptionBlock?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initblk">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Initblk;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Initblk" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Initblk" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Initblk As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Initblk;" />
      <MemberSignature Language="F#" Value=" staticval mutable Initblk : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Initblk" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1861">特定のアドレスの指定したメモリ ブロックを、指定のサイズと初期値に初期化します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1861">Initializes a specified block of memory at a specific address to a given size and initial value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1862">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1862">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1863">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1863">Format</span></span>|<span data-ttu-id="e5fd8-1864">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1864">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1865">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1865">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1866">FE 18</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1866">FE 18</span></span>|<span data-ttu-id="e5fd8-1867">initblk</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1867">initblk</span></span>|<span data-ttu-id="e5fd8-1868">メモリブロック内の各場所を特定の値に設定します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1868">Set each location in a block of memory to a given value.</span></span>|  
  
 <span data-ttu-id="e5fd8-1869">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1869">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1870">開始アドレスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1870">A starting address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1871">初期化値がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1871">An initialization value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1872">初期化するバイト数がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1872">The number of bytes to initialize is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="e5fd8-1873">バイト数、初期化値、および開始アドレスがスタックからポップされ、その値に従って初期化が実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1873">The number of bytes, the initialization value, and the starting address are popped from the stack, and the initialization is performed as per their values.</span></span>  
  
 <span data-ttu-id="e5fd8-1874">`initblk` 命令は、指定されたアドレス (`native int`、`&`、または `*`) で始まるバイトの数 (`unsigned int32`) を初期化値 (型 `unsigned int8`) に設定します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1874">The `initblk` instruction sets the number (`unsigned int32`) of bytes starting at the specified address (of type `native int`, `&`, or `*`) to the initialization value (of type `unsigned int8`).</span></span> <span data-ttu-id="e5fd8-1875">`initblk` は、開始アドレスがマシンの自然サイズにアラインされることを前提としています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1875">`initblk` assumes that the starting address is aligned to the natural size of the machine.</span></span>  
  
 <span data-ttu-id="e5fd8-1876">`initblk` 命令の操作は、直前の <xref:System.Reflection.Emit.OpCodes.Volatile> または <xref:System.Reflection.Emit.OpCodes.Unaligned> プレフィックス命令によって変更できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1876">The operation of the `initblk` instructions can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-1877">無効なアドレスが検出されると <xref:System.NullReferenceException> がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1877"><xref:System.NullReferenceException> may be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="e5fd8-1878">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`initblk` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1878">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `initblk` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Initobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Initobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Initobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Initobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Initobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Initobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Initobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1879">指定したアドレスにある値型の各フィールドを null 参照または適切なプリミティブ型の 0 に初期化します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1879">Initializes each field of the value type at a specified address to a null reference or a 0 of the appropriate primitive type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1880">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1880">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1881">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1881">Format</span></span>|<span data-ttu-id="e5fd8-1882">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1882">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1883">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1883">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1884">FE 15 < `T` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-1884">FE 15 < `T` ></span></span>|<span data-ttu-id="e5fd8-1885">`initobj` `typeTok`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1885">`initobj` `typeTok`</span></span>|<span data-ttu-id="e5fd8-1886">値型を初期化します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1886">Initializes a value type.</span></span>|  
  
 <span data-ttu-id="e5fd8-1887">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1887">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1888">初期化する値の型のアドレスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1888">The address of the value type to initialize is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1889">アドレスはスタックからポップされます。指定されたアドレスの値の型は `typeTok`型として初期化されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1889">The address is popped from the stack; the value type at the specified address is initialized as type `typeTok`.</span></span>  
  
 <span data-ttu-id="e5fd8-1890">`initobj` 命令は、プッシュされたアドレス (型 `native int`、`&`、または `*`) によって指定された値型の各フィールドを null 参照または適切なプリミティブ型の0に初期化します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1890">The `initobj` instruction initializes each field of the value type specified by the pushed address (of type `native int`, `&`, or `*`) to a null reference or a 0 of the appropriate primitive type.</span></span> <span data-ttu-id="e5fd8-1891">このメソッドが呼び出されると、インスタンスは、コンストラクターメソッドを呼び出すことができる状態になります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1891">After this method is called, the instance is ready for a constructor method to be called.</span></span> <span data-ttu-id="e5fd8-1892">`typeTok` が参照型である場合、この命令は `ldnull` の後に `stind.ref`が続く場合と同じ効果があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1892">If `typeTok` is a reference type, this instruction has the same effect as `ldnull` followed by `stind.ref`.</span></span>  
  
 <span data-ttu-id="e5fd8-1893"><xref:System.Reflection.Emit.OpCodes.Newobj>とは異なり、`initobj` はコンストラクターメソッドを呼び出しません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1893">Unlike <xref:System.Reflection.Emit.OpCodes.Newobj>, `initobj` does not call the constructor method.</span></span> <span data-ttu-id="e5fd8-1894">`Initobj` は値型を初期化するためのものであり、`newobj` はオブジェクトの割り当てと初期化に使用されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1894">`Initobj` is intended for initializing value types, while `newobj` is used to allocate and initialize objects.</span></span>  
  
 <span data-ttu-id="e5fd8-1895">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`initobj` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1895">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `initobj` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Type%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Isinst">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Isinst;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Isinst" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Isinst" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Isinst As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Isinst;" />
      <MemberSignature Language="F#" Value=" staticval mutable Isinst : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Isinst" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1896">オブジェクト参照 (<see langword="O" /> 型) が特定のクラスのインスタンスかどうかをテストします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1896">Tests whether an object reference (type <see langword="O" />) is an instance of a particular class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1897">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1897">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1898">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1898">Format</span></span>|<span data-ttu-id="e5fd8-1899">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1899">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1900">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1900">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1901">75 < `T` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-1901">75 < `T` ></span></span>|<span data-ttu-id="e5fd8-1902">isinst `class`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1902">isinst `class`</span></span>|<span data-ttu-id="e5fd8-1903">オブジェクト参照が `class`のインスタンスであるかどうかをテストして、null 参照またはそのクラスまたはインターフェイスのインスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1903">Tests if an object reference is an instance of `class`, returning either a null reference or an instance of that class or interface.</span></span>|  
  
 <span data-ttu-id="e5fd8-1904">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1904">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1905">オブジェクト参照がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1905">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-1906">オブジェクト参照はスタックからポップされ、`class`で渡されるクラスのインスタンスであるかどうかをテストします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1906">The object reference is popped from the stack and tested to see if it is an instance of the class passed in `class`.</span></span>  
  
3.  <span data-ttu-id="e5fd8-1907">結果 (オブジェクト参照または null 参照) がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1907">The result (either an object reference or a null reference) is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1908">`Class` は、必要なクラスを示すメタデータトークンです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1908">`Class` is a metadata token indicating the desired class.</span></span> <span data-ttu-id="e5fd8-1909">スタックの一番上にあるオブジェクトのクラスが `class` を実装している場合 (`class` がインターフェイスである場合)、または `class` の派生クラスである場合 (`class` が通常のクラスの場合)、`class` が呼び出されたときとまったく同じように、結果がスタックにプッシュされます。<xref:System.Reflection.Emit.OpCodes.Castclass></span><span class="sxs-lookup"><span data-stu-id="e5fd8-1909">If the class of the object on the top of the stack implements `class` (if `class` is an interface) or is a derived class of `class` (if `class` is a regular class) then it is cast to type `class` and the result is pushed on the stack, exactly as though <xref:System.Reflection.Emit.OpCodes.Castclass> had been called.</span></span> <span data-ttu-id="e5fd8-1910">それ以外の場合は、null 参照がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1910">Otherwise, a null reference is pushed on the stack.</span></span> <span data-ttu-id="e5fd8-1911">オブジェクト参照自体が null 参照の場合、`isinst` も同様に null 参照を返します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1911">If the object reference itself is a null reference, then `isinst` likewise returns a null reference.</span></span>  
  
 <span data-ttu-id="e5fd8-1912">クラスが見つからない場合、<xref:System.TypeLoadException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1912"><xref:System.TypeLoadException> is thrown if class cannot be found.</span></span> <span data-ttu-id="e5fd8-1913">これは通常、Microsoft 中間言語 (MSIL) 命令が実行時ではなくネイティブコードに変換された場合に検出されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1913">This is typically detected when the Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="e5fd8-1914">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`isinst` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1914">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `isinst` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Type%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Jmp">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Jmp;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Jmp" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Jmp" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Jmp As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Jmp;" />
      <MemberSignature Language="F#" Value=" staticval mutable Jmp : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Jmp" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1915">現在のメソッドを終了し、指定したメソッドにジャンプします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1915">Exits current method and jumps to specified method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1916">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1916">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1917">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1917">Format</span></span>|<span data-ttu-id="e5fd8-1918">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1918">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1919">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1919">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1920">27 < `T` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-1920">27 < `T` ></span></span>|<span data-ttu-id="e5fd8-1921">jmp `method`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1921">jmp `method`</span></span>|<span data-ttu-id="e5fd8-1922">現在のメソッドを終了し、指定したメソッドにジャンプします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1922">Exit current method and jump to specified method.</span></span>|  
  
 <span data-ttu-id="e5fd8-1923">この命令に対するスタック移行の動作はありません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1923">There are no stack transition behaviors for this instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-1924">`jmp` (ジャンプ) 命令は、`method`によって指定されたメソッドに制御を転送します。これは、メソッド参照のメタデータトークンです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1924">The `jmp` (jump) instruction transfers control to the method specified by `method`, which is a metadata token for a method reference.</span></span> <span data-ttu-id="e5fd8-1925">現在の引数は、転送先のメソッドに転送されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1925">The current arguments are transferred to the destination method.</span></span>  
  
 <span data-ttu-id="e5fd8-1926">この命令の実行時には、評価スタックが空である必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1926">The evaluation stack must be empty when this instruction is executed.</span></span> <span data-ttu-id="e5fd8-1927">呼び出し規約、宛先アドレスの引数の数と型は、現在のメソッドの引数と一致している必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1927">The calling convention, number and type of arguments at the destination address must match that of the current method.</span></span>  
  
 <span data-ttu-id="e5fd8-1928">`jmp` 命令は、`try`、`filter`、`catch`、または `finally` ブロックから制御を転送するためには使用できません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1928">The `jmp` instruction cannot be used to transferred control out of a `try`, `filter`, `catch`, or `finally` block.</span></span>  
  
 <span data-ttu-id="e5fd8-1929">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`jmp` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1929">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `jmp` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.MethodInfo%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1930">指定したインデックス値によって参照される引数をスタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1930">Loads an argument (referenced by a specified index value) onto the stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1931">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1931">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1932">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1932">Format</span></span>|<span data-ttu-id="e5fd8-1933">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1933">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1934">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1934">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1935">FE 09 < `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-1935">FE 09 < `unsigned int16` ></span></span>|<span data-ttu-id="e5fd8-1936">ldarg `index`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1936">ldarg `index`</span></span>|<span data-ttu-id="e5fd8-1937">`index` の引数をスタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1937">Load argument at `index` onto stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-1938">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1938">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1939">`index` の引数値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1939">The argument value at `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1940">`ldarg` 命令は、`index`にインデックスが付けられた引数をプッシュします。引数のインデックスは0以降で、評価スタックになります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1940">The `ldarg` instruction pushes the argument indexed at `index`, where arguments are indexed from 0 onwards, onto the evaluation stack.</span></span> <span data-ttu-id="e5fd8-1941">`ldarg` 命令を使用すると、入力引数からコピーすることによって、値型またはプリミティブ値をスタックに読み込むことができます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1941">The `ldarg` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="e5fd8-1942">引数の値の型は、現在のメソッドのシグネチャによって指定された引数の型と同じです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1942">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="e5fd8-1943">可変長引数リストを受け取るプロシージャの場合、`ldarg` 命令は、シグネチャの変数部分ではなく、初期の固定引数に対してのみ使用できます (詳細については、<xref:System.Reflection.Emit.OpCodes.Arglist> 命令を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1943">For procedures that take a variable-length argument list, the `ldarg` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature (see the <xref:System.Reflection.Emit.OpCodes.Arglist> instruction for more details).</span></span>  
  
 <span data-ttu-id="e5fd8-1944">長さが4バイトより小さい整数値を保持する引数は、スタックに読み込まれるときに `int32` 型に拡張されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1944">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="e5fd8-1945">浮動小数点値は、ネイティブサイズ (型 `F`) に展開されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1945">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="e5fd8-1946">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldarg` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1946">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Int16%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_0;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_0 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1947">インデックス 0 の引数を評価スタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1947">Loads the argument at index 0 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1948">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1948">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1949">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1949">Format</span></span>|<span data-ttu-id="e5fd8-1950">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1950">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1951">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1951">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1952">02</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1952">02</span></span>|<span data-ttu-id="e5fd8-1953">ldarg.0</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1953">ldarg.0</span></span>|<span data-ttu-id="e5fd8-1954">引数0をスタックに読み込みます</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1954">Load argument 0 onto stack</span></span>|  
  
 <span data-ttu-id="e5fd8-1955">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1955">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1956">インデックス0の引数値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1956">The argument value at index 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1957">`ldarg.0` 命令は、インデックス0で引数値を読み込むための効率的なエンコードです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1957">The `ldarg.0` instruction is an efficient encoding for loading the argument value at index 0.</span></span>  
  
 <span data-ttu-id="e5fd8-1958">`ldarg.0` 命令は、0にインデックスが付けられた引数を評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1958">The `ldarg.0` instruction pushes the argument indexed at 0 onto the evaluation stack.</span></span> <span data-ttu-id="e5fd8-1959">`ldarg.0` 命令を使用すると、入力引数からコピーすることによって、値型またはプリミティブ値をスタックに読み込むことができます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1959">The `ldarg.0` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="e5fd8-1960">引数の値の型は、現在のメソッドのシグネチャによって指定された引数の型と同じです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1960">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="e5fd8-1961">長さが4バイトより小さい整数値を保持する引数は、スタックに読み込まれるときに `int32` 型に拡張されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1961">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="e5fd8-1962">浮動小数点値は、ネイティブサイズ (型 `F`) に展開されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1962">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="e5fd8-1963">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldarg.0` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1963">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.0` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1964">インデックス 1 の引数を評価スタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1964">Loads the argument at index 1 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1965">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1965">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1966">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1966">Format</span></span>|<span data-ttu-id="e5fd8-1967">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1967">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1968">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1968">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1969">03</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1969">03</span></span>|<span data-ttu-id="e5fd8-1970">ldarg</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1970">ldarg.1</span></span>|<span data-ttu-id="e5fd8-1971">引数1をスタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1971">Load argument 1 onto stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-1972">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1972">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1973">インデックス1の引数値がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1973">The argument value at index 1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1974">`ldarg.1` 命令は、インデックス1で引数値を読み込むための効率的なエンコードです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1974">The `ldarg.1` instruction is an efficient encoding for loading the argument value at index 1.</span></span>  
  
 <span data-ttu-id="e5fd8-1975">`ldarg.1` 命令は、1にインデックスが付けられた引数を評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1975">The `ldarg.1` instruction pushes the argument indexed at 1 onto the evaluation stack.</span></span> <span data-ttu-id="e5fd8-1976">`ldarg.1` 命令を使用すると、入力引数からコピーすることによって、値型またはプリミティブ値をスタックに読み込むことができます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1976">The `ldarg.1` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="e5fd8-1977">引数の値の型は、現在のメソッドのシグネチャによって指定された引数の型と同じです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1977">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="e5fd8-1978">長さが4バイトより小さい整数値を保持する引数は、スタックに読み込まれるときに `int32` 型に拡張されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1978">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="e5fd8-1979">浮動小数点値は、ネイティブサイズ (型 `F`) に展開されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1979">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="e5fd8-1980">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldarg.1` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1980">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.1` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1981">インデックス 2 の引数を評価スタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1981">Loads the argument at index 2 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1982">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1982">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-1983">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1983">Format</span></span>|<span data-ttu-id="e5fd8-1984">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1984">Assembly Format</span></span>|<span data-ttu-id="e5fd8-1985">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1985">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-1986">04</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1986">04</span></span>|<span data-ttu-id="e5fd8-1987">ldarg</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1987">ldarg.2</span></span>|<span data-ttu-id="e5fd8-1988">引数2をスタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1988">Load argument 2 onto stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-1989">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1989">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-1990">インデックス2の引数値がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1990">The argument value at index 2 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-1991">`ldarg.2` 命令は、インデックス2で引数値を読み込むための効率的なエンコードです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1991">The `ldarg.2` instruction is an efficient encoding for loading the argument value at index 2.</span></span>  
  
 <span data-ttu-id="e5fd8-1992">`ldarg.2` 命令は、2にインデックスが付けられた引数を評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1992">The `ldarg.2` instruction pushes the argument indexed at 2 onto the evaluation stack.</span></span> <span data-ttu-id="e5fd8-1993">`ldarg.2` 命令を使用すると、入力引数からコピーすることによって、値型またはプリミティブ値をスタックに読み込むことができます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1993">The `ldarg.2` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="e5fd8-1994">引数の値の型は、現在のメソッドのシグネチャによって指定された引数の型と同じです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1994">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="e5fd8-1995">長さが4バイトより小さい整数値を保持する引数は、スタックに読み込まれるときに `int32` 型に拡張されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1995">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="e5fd8-1996">浮動小数点値は、ネイティブサイズ (型 `F`) に展開されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1996">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="e5fd8-1997">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldarg.2` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1997">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.2` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-1998">インデックス 3 の引数を評価スタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1998">Loads the argument at index 3 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-1999">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-1999">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2000">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2000">Format</span></span>|<span data-ttu-id="e5fd8-2001">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2001">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2002">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2002">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2003">05</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2003">05</span></span>|<span data-ttu-id="e5fd8-2004">ldarg</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2004">ldarg.3</span></span>|<span data-ttu-id="e5fd8-2005">引数3をスタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2005">Load argument 3 onto stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-2006">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2006">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2007">インデックス3の引数値がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2007">The argument value at index 3 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2008">`ldarg.3` 命令は、インデックス3で引数値を読み込むための効率的なエンコードです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2008">The `ldarg.3` instruction is an efficient encoding for loading the argument value at index 3.</span></span>  
  
 <span data-ttu-id="e5fd8-2009">`ldarg.3` 命令は、3にインデックスが付けられた引数を評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2009">The `ldarg.3` instruction pushes the argument indexed at 3 onto the evaluation stack.</span></span> <span data-ttu-id="e5fd8-2010">`ldarg.3` 命令を使用すると、入力引数からコピーすることによって、値型またはプリミティブ値をスタックに読み込むことができます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2010">The `ldarg.3` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="e5fd8-2011">引数の値の型は、現在のメソッドのシグネチャによって指定された引数の型と同じです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2011">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="e5fd8-2012">長さが4バイトより小さい整数値を保持する引数は、スタックに読み込まれるときに `int32` 型に拡張されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2012">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="e5fd8-2013">浮動小数点値は、ネイティブサイズ (型 `F`) に展開されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2013">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="e5fd8-2014">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldarg.3` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2014">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.3` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2015">指定した短い形式のインデックスによって参照される引数を評価スタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2015">Loads the argument (referenced by a specified short form index) onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2016">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2016">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2017">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2017">Format</span></span>|<span data-ttu-id="e5fd8-2018">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2018">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2019">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2019">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2020">0E < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-2020">0E < `unsigned int8` ></span></span>|<span data-ttu-id="e5fd8-2021">ldarg `index`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2021">ldarg.s `index`</span></span>|<span data-ttu-id="e5fd8-2022">`index` の引数をスタック (短い形式) に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2022">Load argument at `index` onto stack, short form.</span></span>|  
  
 <span data-ttu-id="e5fd8-2023">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2023">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2024">`index` の引数値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2024">The argument value at `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2025">`ldarg.s` 命令は、4 ~ 255 のインデックスが付けられた引数を読み込むための効率的なエンコーディングです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2025">The `ldarg.s` instruction is an efficient encoding for loading arguments indexed from 4 through 255.</span></span>  
  
 <span data-ttu-id="e5fd8-2026">`ldarg.s` 命令は、`index`にインデックスが付けられた引数をプッシュします。引数のインデックスは0以降で、評価スタックになります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2026">The `ldarg.s` instruction pushes the argument indexed at `index`, where arguments are indexed from 0 onwards, onto the evaluation stack.</span></span> <span data-ttu-id="e5fd8-2027">`ldarg.s` 命令を使用すると、入力引数からコピーすることによって、値型またはプリミティブ値をスタックに読み込むことができます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2027">The `ldarg.s` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="e5fd8-2028">引数の値の型は、現在のメソッドのシグネチャによって指定された引数の型と同じです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2028">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="e5fd8-2029">可変長引数リストを受け取るプロシージャの場合、`ldarg.s` 命令は、シグネチャの変数部分ではなく、初期の固定引数に対してのみ使用できます (詳細については、<xref:System.Reflection.Emit.OpCodes.Arglist> 命令を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2029">For procedures that take a variable-length argument list, the `ldarg.s` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature (see the <xref:System.Reflection.Emit.OpCodes.Arglist> instruction for more details).</span></span>  
  
 <span data-ttu-id="e5fd8-2030">長さが4バイトより小さい整数値を保持する引数は、スタックに読み込まれるときに `int32` 型に拡張されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2030">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="e5fd8-2031">浮動小数点値は、ネイティブサイズ (型 `F`) に展開されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2031">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="e5fd8-2032">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldarg.s` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2032">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.s` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Byte%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarga">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarga;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarga" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarga" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarga As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarga;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarga : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarga" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2033">引数アドレスを評価スタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2033">Load an argument address onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2034">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2034">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2035">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2035">Format</span></span>|<span data-ttu-id="e5fd8-2036">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2036">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2037">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2037">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2038">FE 0A < `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-2038">FE 0A < `unsigned int16` ></span></span>|<span data-ttu-id="e5fd8-2039">ldarga `index`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2039">ldarga `index`</span></span>|<span data-ttu-id="e5fd8-2040">`index`によってインデックス付けされた引数のアドレスを取得します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2040">Fetch the address of argument indexed by `index`.</span></span>|  
  
 <span data-ttu-id="e5fd8-2041">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2041">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2042">`index` によってインデックス付けされた引数の `addr` アドレスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2042">The address `addr` of the argument indexed by `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2043">`ldarga` 命令は `index`によってインデックス付けされた引数のアドレス (`*`型) をフェッチします。この場合、引数のインデックスは0以降になります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2043">The `ldarga` instruction fetches the address (of type `*`) of the argument indexed by `index`, where arguments are indexed from 0 onwards.</span></span> <span data-ttu-id="e5fd8-2044">アドレス `addr` は、常にターゲットコンピューター上の自然な境界に合わせて調整されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2044">The address `addr` is always aligned to a natural boundary on the target machine.</span></span>  
  
 <span data-ttu-id="e5fd8-2045">可変長の引数リストを受け取るプロシージャの場合、`ldarga` 命令は、シグネチャの変数部分ではなく、初期の固定引数に対してのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2045">For procedures that take a variable-length argument list, the `ldarga` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 <span data-ttu-id="e5fd8-2046">`ldarga` は、ref パラメーターを渡すために使用されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2046">`ldarga` is used for by-ref parameter passing.</span></span> <span data-ttu-id="e5fd8-2047">その他の場合は、<xref:System.Reflection.Emit.OpCodes.Ldarg> と <xref:System.Reflection.Emit.OpCodes.Starg> を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2047">For other cases, <xref:System.Reflection.Emit.OpCodes.Ldarg> and <xref:System.Reflection.Emit.OpCodes.Starg> should be used.</span></span>  
  
 <span data-ttu-id="e5fd8-2048">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldarga` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2048">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarga` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Int16%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarga_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarga_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarga_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarga_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarga_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarga_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarga_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarga_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2049">引数アドレス (短い形式) を評価スタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2049">Load an argument address, in short form, onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2050">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2050">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2051">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2051">Format</span></span>|<span data-ttu-id="e5fd8-2052">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2052">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2053">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2053">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2054">0F < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-2054">0F < `unsigned int8` ></span></span>|<span data-ttu-id="e5fd8-2055">ldarga `index`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2055">ldarga.s `index`</span></span>|<span data-ttu-id="e5fd8-2056">`index`、短い形式でインデックス付けされた引数のアドレスを取得します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2056">Fetch the address of argument indexed by `index`, short form.</span></span>|  
  
 <span data-ttu-id="e5fd8-2057">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2057">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2058">`index` によってインデックス付けされた引数の `addr` アドレスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2058">The address `addr` of the argument indexed by `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2059">`ldarga.s` (短い形式の `ldarga`) は、0 ~ 255 の引数番号に使用する必要があり、より効率的なエンコードです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2059">`ldarga.s` (the short form of `ldarga`) should be used for argument numbers 0 through 255, and is a more efficient encoding.</span></span>  
  
 <span data-ttu-id="e5fd8-2060">`ldarga.s` 命令は `index`によってインデックス付けされた引数のアドレス (`*`型) をフェッチします。この場合、引数のインデックスは0以降になります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2060">The `ldarga.s` instruction fetches the address (of type`*`) of the argument indexed by `index`, where arguments are indexed from 0 onwards.</span></span> <span data-ttu-id="e5fd8-2061">アドレス `addr` は、常にターゲットコンピューター上の自然な境界に合わせて調整されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2061">The address `addr` is always aligned to a natural boundary on the target machine.</span></span>  
  
 <span data-ttu-id="e5fd8-2062">可変長の引数リストを受け取るプロシージャの場合、`ldarga.s` 命令は、シグネチャの変数部分ではなく、初期の固定引数に対してのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2062">For procedures that take a variable-length argument list, the `ldarga.s` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 <span data-ttu-id="e5fd8-2063">`ldarga.s` は、ref パラメーターを渡すために使用されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2063">`ldarga.s` is used for by-ref parameter passing.</span></span> <span data-ttu-id="e5fd8-2064">その他の場合は、<xref:System.Reflection.Emit.OpCodes.Ldarg_S> と <xref:System.Reflection.Emit.OpCodes.Starg_S> を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2064">For other cases, <xref:System.Reflection.Emit.OpCodes.Ldarg_S> and <xref:System.Reflection.Emit.OpCodes.Starg_S> should be used.</span></span>  
  
 <span data-ttu-id="e5fd8-2065">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldarga.s` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2065">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarga.s` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Byte%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2066">提供された <see langword="int32" /> 型の値を <see langword="int32" /> として評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2066">Pushes a supplied value of type <see langword="int32" /> onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2067">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2067">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2068">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2068">Format</span></span>|<span data-ttu-id="e5fd8-2069">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2069">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2070">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2070">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2071">20 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-2071">20 < `int32` ></span></span>|<span data-ttu-id="e5fd8-2072">ldc i4 `num`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2072">ldc.i4 `num`</span></span>|<span data-ttu-id="e5fd8-2073">`num` 値をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2073">Pushes the value `num` onto the stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-2074">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2074">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2075">`num` 値がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2075">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2076">整数-128 ~ 127、特に-1 ~ 8 の短いエンコーディングには、特別な短い (つまり、効率的な) エンコーディングがあることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2076">Note that there are special short (and hence more efficient) encodings for the integers -128 through 127, and especially short encodings for -1 through 8.</span></span> <span data-ttu-id="e5fd8-2077">すべての短いエンコーディングでは、4バイトの整数がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2077">All short encodings push 4 byte integers on the stack.</span></span> <span data-ttu-id="e5fd8-2078">長いエンコーディングは、8バイトの整数、4および8バイトの浮動小数点数、および短い形式には適合しない4バイトの値に使用されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2078">Longer encodings are used for 8 byte integers and 4 and 8 byte floating-point numbers, as well as 4-byte values that do not fit in the short forms.</span></span> <span data-ttu-id="e5fd8-2079">8バイトの整数定数をスタックにプッシュするには、3つの方法があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2079">There are three ways to push an 8 byte integer constant onto the stack</span></span>  
  
 1. <span data-ttu-id="e5fd8-2080">32ビットを超える定数を表す必要がある場合は、<xref:System.Reflection.Emit.OpCodes.Ldc_I8> 命令を使用します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2080">Use the <xref:System.Reflection.Emit.OpCodes.Ldc_I8> instruction for constants that must be expressed in more than 32 bits.</span></span>  
  
 2. <span data-ttu-id="e5fd8-2081"><xref:System.Reflection.Emit.OpCodes.Ldc_I4> 命令の後に、9 ~ 32 ビットを必要とする定数の <xref:System.Reflection.Emit.OpCodes.Conv_I8> を使用します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2081">Use the <xref:System.Reflection.Emit.OpCodes.Ldc_I4> instruction followed by a <xref:System.Reflection.Emit.OpCodes.Conv_I8> for constants that require 9 to 32 bits.</span></span>  
  
 3. <span data-ttu-id="e5fd8-2082">8個以下のビットで表現できる定数については、短い形式の命令の後に <xref:System.Reflection.Emit.OpCodes.Conv_I8> を使用します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2082">Use a short form instruction followed by a <xref:System.Reflection.Emit.OpCodes.Conv_I8> for constants that can be expressed in 8 or fewer bits.</span></span>  
  
 <span data-ttu-id="e5fd8-2083">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldc.i4` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2083">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Int32%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_0;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_0 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2084">整数値 0 を <see langword="int32" /> として評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2084">Pushes the integer value of 0 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2085">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2085">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2086">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2086">Format</span></span>|<span data-ttu-id="e5fd8-2087">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2087">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2088">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2088">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2089">16</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2089">16</span></span>|<span data-ttu-id="e5fd8-2090">ldc.i4.0</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2090">ldc.i4.0</span></span>|<span data-ttu-id="e5fd8-2091">0をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2091">Pushes 0 onto the stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-2092">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2092">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2093">値0はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2093">The value 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2094">これは、整数値0のプッシュに対する特殊な短いエンコーディングです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2094">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="e5fd8-2095">すべての特殊な短いエンコーディングでは、4バイトの整数がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2095">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2096">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldc.i4.0` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2096">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.0` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2097">整数値 1 を <see langword="int32" /> として評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2097">Pushes the integer value of 1 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2098">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2098">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2099">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2099">Format</span></span>|<span data-ttu-id="e5fd8-2100">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2100">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2101">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2101">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2102">17</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2102">17</span></span>|<span data-ttu-id="e5fd8-2103">ldc.i4.1</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2103">ldc.i4.1</span></span>|<span data-ttu-id="e5fd8-2104">1をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2104">Pushes 1 onto the stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-2105">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2105">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2106">値1がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2106">The value 1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2107">これは、整数値1をプッシュするための特殊な短いエンコーディングです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2107">This is a special short encoding for the push of the integer value 1.</span></span> <span data-ttu-id="e5fd8-2108">すべての特殊な短いエンコーディングでは、4バイトの整数がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2108">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2109">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldc.i4.1` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2109">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.1` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2110">整数値 2 を <see langword="int32" /> として評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2110">Pushes the integer value of 2 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2111">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2111">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2112">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2112">Format</span></span>|<span data-ttu-id="e5fd8-2113">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2113">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2114">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2114">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2115">18</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2115">18</span></span>|<span data-ttu-id="e5fd8-2116">ldc.i4.2</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2116">ldc.i4.2</span></span>|<span data-ttu-id="e5fd8-2117">2をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2117">Pushes 2 onto the stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-2118">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2118">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2119">値2がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2119">The value 2 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2120">これは、整数値2のプッシュに対する特殊な短いエンコーディングです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2120">This is a special short encoding for the push of the integer value 2.</span></span> <span data-ttu-id="e5fd8-2121">すべての特殊な短いエンコーディングでは、4バイトの整数がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2121">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2122">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldc.i4.2` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2122">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.2` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2123">整数値 3 を <see langword="int32" /> として評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2123">Pushes the integer value of 3 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2124">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2124">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2125">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2125">Format</span></span>|<span data-ttu-id="e5fd8-2126">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2126">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2127">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2127">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2128">19</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2128">19</span></span>|<span data-ttu-id="e5fd8-2129">ldc.i4.3</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2129">ldc.i4.3</span></span>|<span data-ttu-id="e5fd8-2130">3をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2130">Pushes 3 onto the stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-2131">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2131">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2132">値3がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2132">The value 3 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2133">これは、整数値3をプッシュするための特殊な短いエンコーディングです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2133">This is a special short encoding for the push of the integer value 3.</span></span> <span data-ttu-id="e5fd8-2134">すべての特殊な短いエンコーディングでは、4バイトの整数がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2134">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2135">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldc.i4.3` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2135">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.3` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2136">整数値 4 を <see langword="int32" /> として評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2136">Pushes the integer value of 4 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2137">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2137">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2138">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2138">Format</span></span>|<span data-ttu-id="e5fd8-2139">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2139">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2140">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2140">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2141">1A</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2141">1A</span></span>|<span data-ttu-id="e5fd8-2142">ldc.i4.4</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2142">ldc.i4.4</span></span>|<span data-ttu-id="e5fd8-2143">4をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2143">Pushes 4 onto the stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-2144">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2144">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2145">値4がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2145">The value 4 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2146">これは、整数値4のプッシュに対する特殊な短いエンコーディングです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2146">This is a special short encoding for the push of the integer value 4.</span></span> <span data-ttu-id="e5fd8-2147">すべての特殊な短いエンコーディングでは、4バイトの整数がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2147">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2148">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldc.i4.4` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2148">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.4` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_5">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_5;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_5" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_5" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_5 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_5;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_5 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_5" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2149">整数値 5 を <see langword="int32" /> として評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2149">Pushes the integer value of 5 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2150">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2150">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2151">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2151">Format</span></span>|<span data-ttu-id="e5fd8-2152">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2152">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2153">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2153">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2154">ドル</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2154">1B</span></span>|<span data-ttu-id="e5fd8-2155">ldc.i4.5</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2155">ldc.i4.5</span></span>|<span data-ttu-id="e5fd8-2156">5をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2156">Pushes 5 onto the stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-2157">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2157">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2158">値5がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2158">The value 5 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2159">これは、整数値5をプッシュするための特殊な短いエンコーディングです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2159">This is a special short encoding for the push of the integer value 5.</span></span> <span data-ttu-id="e5fd8-2160">すべての特殊な短いエンコーディングでは、4バイトの整数がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2160">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2161">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldc.i4.5` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2161">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.5` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_6">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_6;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_6" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_6" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_6 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_6;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_6 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_6" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2162">整数値 6 を <see langword="int32" /> として評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2162">Pushes the integer value of 6 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2163">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2163">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2164">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2164">Format</span></span>|<span data-ttu-id="e5fd8-2165">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2165">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2166">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2166">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2167">1C</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2167">1C</span></span>|<span data-ttu-id="e5fd8-2168">ldc.i4.6</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2168">ldc.i4.6</span></span>|<span data-ttu-id="e5fd8-2169">6をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2169">Pushes 6 onto the stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-2170">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2170">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2171">値6がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2171">The value 6 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2172">これは、整数値6のプッシュに対する特殊な短いエンコーディングです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2172">This is a special short encoding for the push of the integer value 6.</span></span> <span data-ttu-id="e5fd8-2173">すべての特殊な短いエンコーディングでは、4バイトの整数がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2173">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2174">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldc.i4.6` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2174">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.6` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_7">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_7;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_7" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_7" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_7 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_7;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_7 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_7" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2175">整数値 7 を <see langword="int32" /> として評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2175">Pushes the integer value of 7 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2176">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2176">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2177">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2177">Format</span></span>|<span data-ttu-id="e5fd8-2178">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2178">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2179">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2179">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2180">1D</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2180">1D</span></span>|<span data-ttu-id="e5fd8-2181">ldc.i4.7</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2181">ldc.i4.7</span></span>|<span data-ttu-id="e5fd8-2182">7をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2182">Pushes 7 onto the stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-2183">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2183">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2184">値7がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2184">The value 7 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2185">これは、整数値7のプッシュに対する特殊な短いエンコーディングです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2185">This is a special short encoding for the push of the integer value 7.</span></span> <span data-ttu-id="e5fd8-2186">すべての特殊な短いエンコーディングでは、4バイトの整数がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2186">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2187">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldc.i4.7` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2187">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.7` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2188">整数値 8 を <see langword="int32" /> として評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2188">Pushes the integer value of 8 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2189">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2189">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2190">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2190">Format</span></span>|<span data-ttu-id="e5fd8-2191">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2191">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2192">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2192">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2193">1E</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2193">1E</span></span>|<span data-ttu-id="e5fd8-2194">ldc.i4.8</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2194">ldc.i4.8</span></span>|<span data-ttu-id="e5fd8-2195">8をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2195">Pushes 8 onto the stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-2196">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2196">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2197">値8がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2197">The value 8 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2198">これは、整数値8をプッシュするための特殊な短いエンコーディングです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2198">This is a special short encoding for the push of the integer value 8.</span></span> <span data-ttu-id="e5fd8-2199">すべての特殊な短いエンコーディングでは、4バイトの整数がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2199">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2200">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldc.i4.8` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2200">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.8` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_M1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_M1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_M1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_M1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_M1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_M1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_M1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_M1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2201">整数値 -1 を <see langword="int32" /> として評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2201">Pushes the integer value of -1 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2202">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2202">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2203">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2203">Format</span></span>|<span data-ttu-id="e5fd8-2204">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2204">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2205">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2205">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2206">15</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2206">15</span></span>|<span data-ttu-id="e5fd8-2207">ldc.i4.m1</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2207">ldc.i4.m1</span></span>|<span data-ttu-id="e5fd8-2208">-1 をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2208">Pushes -1 onto the stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-2209">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2209">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2210">値-1 がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2210">The value -1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2211">これは、整数値-1 をプッシュするための特殊な短いエンコーディングです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2211">This is a special short encoding for the push of the integer value -1.</span></span> <span data-ttu-id="e5fd8-2212">すべての特殊な短いエンコーディングでは、4バイトの整数がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2212">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2213">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldc.i4.m1` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2213">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.m1` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2214">提供された <see langword="int8" /> 値を <see langword="int32" /> として評価スタックにプッシュします (短い形式)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2214">Pushes the supplied <see langword="int8" /> value onto the evaluation stack as an <see langword="int32" />, short form.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2215">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2215">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2216">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2216">Format</span></span>|<span data-ttu-id="e5fd8-2217">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2217">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2218">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2218">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2219">1F < `int8` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-2219">1F < `int8` ></span></span>|<span data-ttu-id="e5fd8-2220">ldc i4 `num`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2220">ldc.i4.s `num`</span></span>|<span data-ttu-id="e5fd8-2221">`num` を `int32`としてスタックにプッシュします (短い形式)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2221">Pushes `num` onto the stack as `int32`, short form.</span></span>|  
  
 <span data-ttu-id="e5fd8-2222">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2222">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2223">`num` 値がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2223">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2224">`ldc.i4.s` は、-128 から127への整数を評価スタックにプッシュするためのより効率的なエンコードです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2224">`ldc.i4.s` is a more efficient encoding for pushing the integers from -128 to 127 onto the evaluation stack.</span></span>  
  
<span data-ttu-id="e5fd8-2225">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldc.i4.s` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2225">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `ldc.i4.s` opcode:</span></span>
  
- <xref:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)?displayProperty=nameWithType>
- <xref:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)?displayProperty=nameWithType>
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2226">提供された <see langword="int64" /> 型の値を <see langword="int64" /> として評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2226">Pushes a supplied value of type <see langword="int64" /> onto the evaluation stack as an <see langword="int64" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2227">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2227">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2228">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2228">Format</span></span>|<span data-ttu-id="e5fd8-2229">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2229">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2230">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2230">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2231">21 < `int64` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-2231">21 < `int64` ></span></span>|<span data-ttu-id="e5fd8-2232">ldc `num`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2232">ldc.i8 `num`</span></span>|<span data-ttu-id="e5fd8-2233">`num` を `int64`としてスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2233">Pushes `num` onto the stack as `int64`.</span></span>|  
  
 <span data-ttu-id="e5fd8-2234">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2234">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2235">`num` 値がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2235">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2236">このエンコーディングは、`int64` 値をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2236">This encoding pushes an `int64` value onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2237">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldc.i8` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2237">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i8` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Int64%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2238">提供された <see langword="float32" /> 型の値を <see langword="F" /> (float) 型として評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2238">Pushes a supplied value of type <see langword="float32" /> onto the evaluation stack as type <see langword="F" /> (float).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2239">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2239">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2240">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2240">Format</span></span>|<span data-ttu-id="e5fd8-2241">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2241">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2242">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2242">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2243">22 < `float32` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-2243">22 < `float32` ></span></span>|<span data-ttu-id="e5fd8-2244">ldc. r4 `num`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2244">ldc.r4 `num`</span></span>|<span data-ttu-id="e5fd8-2245">`num` を `F`としてスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2245">Pushes `num` onto the stack as `F`.</span></span>|  
  
 <span data-ttu-id="e5fd8-2246">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2246">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2247">`num` 値がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2247">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2248">このエンコーディングは、`float32` 値をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2248">This encoding pushes a `float32` value onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2249">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldc.r4` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2249">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.r4` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Single%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2250">提供された <see langword="float64" /> 型の値を <see langword="F" /> (float) 型として評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2250">Pushes a supplied value of type <see langword="float64" /> onto the evaluation stack as type <see langword="F" /> (float).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2251">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2251">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2252">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2252">Format</span></span>|<span data-ttu-id="e5fd8-2253">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2253">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2254">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2254">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2255">23 < `float64` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-2255">23 < `float64` ></span></span>|<span data-ttu-id="e5fd8-2256">ldc r8 `num`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2256">ldc.r8 `num`</span></span>|<span data-ttu-id="e5fd8-2257">`num` を `F`としてスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2257">Pushes `num` onto the stack as `F`.</span></span>|  
  
 <span data-ttu-id="e5fd8-2258">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2258">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2259">`num` 値がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2259">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2260">このエンコーディングは、`float64` 値をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2260">This encoding pushes a `float64` value onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2261">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldc.r8` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2261">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.r8` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Double%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2262">指定した配列インデックスの要素を命令で指定された型として評価スタックの一番上に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2262">Loads the element at a specified array index onto the top of the evaluation stack as the type specified in the instruction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2263">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2263">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2264">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2264">Format</span></span>|<span data-ttu-id="e5fd8-2265">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2265">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2266">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2266">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2267">A3 < `T` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-2267">A3 < `T` ></span></span>|<span data-ttu-id="e5fd8-2268">ldelem `typeTok`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2268">ldelem `typeTok`</span></span>|<span data-ttu-id="e5fd8-2269">`index` の要素を型 `typeTok`としてスタックの一番上に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2269">Loads the element at `index` onto the top of the stack as type `typeTok`.</span></span>|  
  
 <span data-ttu-id="e5fd8-2270">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2270">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2271">オブジェクト参照 `array` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2271">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-2272">インデックス値 `index` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2272">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-2273">`index` と `array` がスタックからポップされます。`array` の `index` 位置に格納されている値が検索されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2273">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="e5fd8-2274">値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2274">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2275">`ldelem` 命令は、インデックス `index` (型 `native int`) を持つ要素の値を0から始まる1次元 `array` 配列に読み込み、スタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2275">The `ldelem` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="e5fd8-2276">配列はオブジェクトであり、そのため `O`型の値によって表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2276">Arrays are objects, and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="e5fd8-2277">戻り値の型は、命令で `typeTok` トークンによって指定されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2277">The type of the return value is specified by the token `typeTok` in the instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-2278">`array` が null 参照の場合、<xref:System.NullReferenceException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2278"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="e5fd8-2279"><xref:System.IndexOutOfRangeException> は、`index` が負の場合、または `array`の上限を超えている場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2279"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the upper bound of `array`.</span></span>  
  
 <span data-ttu-id="e5fd8-2280">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldelem` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2280">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Type%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2281">指定した配列インデックスの <see langword="native int" /> 型の要素を <see langword="native int" /> として評価スタックの一番上に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2281">Loads the element with type <see langword="native int" /> at a specified array index onto the top of the evaluation stack as a <see langword="native int" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2282">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2282">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2283">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2283">Format</span></span>|<span data-ttu-id="e5fd8-2284">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2284">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2285">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2285">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2286">97</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2286">97</span></span>|<span data-ttu-id="e5fd8-2287">ldelem.i</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2287">ldelem.i</span></span>|<span data-ttu-id="e5fd8-2288">`index` `native int` 型の要素を、`native int`としてスタックの一番上に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2288">Loads the element with type `native int` at `index` onto the top of the stack as a `native int`.</span></span>|  
  
 <span data-ttu-id="e5fd8-2289">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2289">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2290">オブジェクト参照 `array` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2290">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-2291">インデックス値 `index` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2291">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-2292">`index` と `array` がスタックからポップされます。`array` の `index` 位置に格納されている値が検索されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2292">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="e5fd8-2293">値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2293">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2294">`ldelem.i` 命令は、インデックス `index` (型 `native int`) を持つ要素の値を0から始まる1次元 `array` 配列に読み込み、スタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2294">The `ldelem.i` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="e5fd8-2295">配列はオブジェクトであり、そのため `O`型の値によって表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2295">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="e5fd8-2296">`ldelem.i` の戻り値は `native int`です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2296">The return value for `ldelem.i` is `native int`.</span></span>  
  
 <span data-ttu-id="e5fd8-2297">4バイト未満の整数値は、評価スタックに読み込まれるときに (`native int`ではなく) `int32` に拡張されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2297">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2298">`array` が null 参照の場合、<xref:System.NullReferenceException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2298"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="e5fd8-2299">`array` が必要な型の要素を保持していない場合、<xref:System.ArrayTypeMismatchException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2299"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="e5fd8-2300"><xref:System.IndexOutOfRangeException> は、`index` が負の場合、または `array`のバインドより大きい場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2300"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="e5fd8-2301">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldelem.i` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2301">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2302">指定した配列インデックスの <see langword="int8" /> 型の要素を <see langword="int32" /> として評価スタックの一番上に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2302">Loads the element with type <see langword="int8" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2303">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2303">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2304">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2304">Format</span></span>|<span data-ttu-id="e5fd8-2305">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2305">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2306">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2306">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2307">90</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2307">90</span></span>|<span data-ttu-id="e5fd8-2308">ldelem.i1</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2308">ldelem.i1</span></span>|<span data-ttu-id="e5fd8-2309">`index` に `int8` 型の要素を、`int32`としてスタックの一番上に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2309">Loads the element with type `int8` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="e5fd8-2310">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2310">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2311">オブジェクト参照 `array` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2311">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-2312">インデックス値 `index` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2312">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-2313">`index` と `array` がスタックからポップされます。`array` の `index` 位置に格納されている値が検索されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2313">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="e5fd8-2314">値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2314">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2315">`ldelem.i1` 命令は、インデックス `index` (型 `native int`) を持つ要素の値を0から始まる1次元 `array` 配列に読み込み、スタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2315">The `ldelem.i1` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="e5fd8-2316">配列はオブジェクトであり、そのため `O`型の値によって表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2316">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="e5fd8-2317">`ldelem.i1` の戻り値は `int8`です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2317">The return value for `ldelem.i1` is `int8`.</span></span>  
  
 <span data-ttu-id="e5fd8-2318">4バイト未満の整数値は、評価スタックに読み込まれるときに (`native int`ではなく) `int32` に拡張されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2318">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2319">`array` が null 参照の場合、<xref:System.NullReferenceException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2319"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="e5fd8-2320">`array` が必要な型の要素を保持していない場合、<xref:System.ArrayTypeMismatchException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2320"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="e5fd8-2321"><xref:System.IndexOutOfRangeException> は、`index` が負の場合、または `array`のバインドより大きい場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2321"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="e5fd8-2322">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldelem.i1` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2322">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i1` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2323">指定した配列インデックスの <see langword="int16" /> 型の要素を <see langword="int32" /> として評価スタックの一番上に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2323">Loads the element with type <see langword="int16" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2324">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2324">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2325">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2325">Format</span></span>|<span data-ttu-id="e5fd8-2326">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2326">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2327">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2327">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2328">92</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2328">92</span></span>|<span data-ttu-id="e5fd8-2329">ldelem.i2</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2329">ldelem.i2</span></span>|<span data-ttu-id="e5fd8-2330">`index` に `int16` 型の要素を、`int32`としてスタックの一番上に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2330">Loads the element with type `int16` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="e5fd8-2331">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2331">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2332">オブジェクト参照 `array` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2332">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-2333">インデックス値 `index` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2333">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-2334">`index` と `array` がスタックからポップされます。`array` の `index` 位置に格納されている値が検索されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2334">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="e5fd8-2335">値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2335">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2336">`ldelem.i2` 命令は、インデックス `index` (型 `native int`) を持つ要素の値を0から始まる1次元 `array` 配列に読み込み、スタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2336">The `ldelem.i2` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="e5fd8-2337">配列はオブジェクトであり、そのため `O`型の値によって表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2337">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="e5fd8-2338">`ldelem.i2` の戻り値は `int16`です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2338">The return value for `ldelem.i2` is `int16`.</span></span>  
  
 <span data-ttu-id="e5fd8-2339">4バイト未満の整数値は、評価スタックに読み込まれるときに (`native int`ではなく) `int32` に拡張されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2339">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2340">`array` が null 参照の場合、<xref:System.NullReferenceException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2340"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="e5fd8-2341">`array` が必要な型の要素を保持していない場合、<xref:System.ArrayTypeMismatchException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2341"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="e5fd8-2342"><xref:System.IndexOutOfRangeException> は、`index` が負の場合、または `array`のバインドより大きい場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2342"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="e5fd8-2343">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldelem.i2` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2343">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i2` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2344">指定した配列インデックスの <see langword="int32" /> 型の要素を <see langword="int32" /> として評価スタックの一番上に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2344">Loads the element with type <see langword="int32" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2345">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2345">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2346">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2346">Format</span></span>|<span data-ttu-id="e5fd8-2347">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2347">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2348">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2348">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2349">94</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2349">94</span></span>|<span data-ttu-id="e5fd8-2350">ldelem.i4</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2350">ldelem.i4</span></span>|<span data-ttu-id="e5fd8-2351">`index` に `int32` 型の要素を、`int32`としてスタックの一番上に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2351">Loads the element with type `int32` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="e5fd8-2352">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2352">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2353">オブジェクト参照 `array` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2353">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-2354">インデックス値 `index` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2354">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-2355">`index` と `array` がスタックからポップされます。`array` の `index` 位置に格納されている値が検索されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2355">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="e5fd8-2356">値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2356">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2357">`ldelem.i4` 命令は、インデックス `index` (型 `native int`) を持つ要素の値を0から始まる1次元 `array` 配列に読み込み、スタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2357">The `ldelem.i4` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="e5fd8-2358">配列はオブジェクトであり、そのため `O`型の値によって表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2358">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="e5fd8-2359">`ldelem.i4` の戻り値は `int32`です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2359">The return value for `ldelem.i4` is `int32`.</span></span>  
  
 <span data-ttu-id="e5fd8-2360">4バイト未満の整数値は、評価スタックに読み込まれるときに (`native int`ではなく) `int32` に拡張されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2360">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2361">`array` が null 参照の場合、<xref:System.NullReferenceException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2361"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="e5fd8-2362">`array` が必要な型の要素を保持していない場合、<xref:System.ArrayTypeMismatchException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2362"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="e5fd8-2363"><xref:System.IndexOutOfRangeException> は、`index` が負の場合、または `array`のバインドより大きい場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2363"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="e5fd8-2364">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldelem.i4` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2364">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i4` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2365">指定した配列インデックスの <see langword="int64" /> 型の要素を <see langword="int64" /> として評価スタックの一番上に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2365">Loads the element with type <see langword="int64" /> at a specified array index onto the top of the evaluation stack as an <see langword="int64" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2366">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2366">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2367">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2367">Format</span></span>|<span data-ttu-id="e5fd8-2368">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2368">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2369">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2369">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2370">96</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2370">96</span></span>|<span data-ttu-id="e5fd8-2371">ldelem.i8</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2371">ldelem.i8</span></span>|<span data-ttu-id="e5fd8-2372">`index` に `int64` 型の要素を、`int64`としてスタックの一番上に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2372">Loads the element with type `int64` at `index` onto the top of the stack as an `int64`.</span></span>|  
  
 <span data-ttu-id="e5fd8-2373">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2373">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2374">オブジェクト参照 `array` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2374">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-2375">インデックス値 `index` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2375">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-2376">`index` と `array` がスタックからポップされます。`array` の `index` 位置に格納されている値が検索されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2376">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="e5fd8-2377">値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2377">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2378">`ldelem.i8` 命令は、インデックス `index` (型 `native int`) を持つ要素の値を0から始まる1次元 `array` 配列に読み込み、スタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2378">The `ldelem.i8` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="e5fd8-2379">配列はオブジェクトであり、そのため `O`型の値によって表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2379">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="e5fd8-2380">`ldelem.i8` の戻り値は `int64`です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2380">The return value for `ldelem.i8` is `int64`.</span></span>  
  
 <span data-ttu-id="e5fd8-2381">4バイト未満の整数値は、評価スタックに読み込まれるときに (`native int`ではなく) `int32` に拡張されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2381">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2382">`array` が null 参照の場合、<xref:System.NullReferenceException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2382"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="e5fd8-2383">`array` が必要な型の要素を保持していない場合、<xref:System.ArrayTypeMismatchException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2383"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="e5fd8-2384"><xref:System.IndexOutOfRangeException> は、`index` が負の場合、または `array`のバインドより大きい場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2384"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="e5fd8-2385">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldelem.i8` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2385">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i8` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2386">指定した配列インデックスの <see langword="float32" /> 型の要素を <see langword="F" /> (float) 型として評価スタックの一番上に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2386">Loads the element with type <see langword="float32" /> at a specified array index onto the top of the evaluation stack as type <see langword="F" /> (float).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2387">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2387">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2388">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2388">Format</span></span>|<span data-ttu-id="e5fd8-2389">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2389">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2390">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2390">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2391">98</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2391">98</span></span>|<span data-ttu-id="e5fd8-2392">ldelem.r4</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2392">ldelem.r4</span></span>|<span data-ttu-id="e5fd8-2393">`index` `float32` 型の要素を `F`型としてスタックの一番上に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2393">Loads the element with type `float32` at `index` onto the top of the stack as a type `F`.</span></span>|  
  
 <span data-ttu-id="e5fd8-2394">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2394">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2395">オブジェクト参照 `array` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2395">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-2396">インデックス値 `index` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2396">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-2397">`index` と `array` がスタックからポップされます。`array` の `index` 位置に格納されている値が検索されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2397">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="e5fd8-2398">値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2398">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2399">`ldelem.r4` 命令は、インデックス `index` (型 `native int`) を持つ要素の値を0から始まる1次元 `array` 配列に読み込み、スタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2399">The `ldelem.r4` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="e5fd8-2400">配列はオブジェクトであり、そのため `O`型の値によって表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2400">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="e5fd8-2401">`ldelem.r4` の戻り値は `float32`です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2401">The return value for `ldelem.r4` is `float32`.</span></span>  
  
 <span data-ttu-id="e5fd8-2402">浮動小数点値は、評価スタックに読み込まれるときに `F` 型に変換されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2402">Floating-point values are converted to type `F` when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2403">`array` が null 参照の場合、<xref:System.NullReferenceException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2403"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="e5fd8-2404">`array` が必要な型の要素を保持していない場合、<xref:System.ArrayTypeMismatchException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2404"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="e5fd8-2405"><xref:System.IndexOutOfRangeException> は、`index` が負の場合、または `array`のバインドより大きい場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2405"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="e5fd8-2406">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldelem.r4` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2406">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.r4` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2407">指定した配列インデックスの <see langword="float64" /> 型の要素を <see langword="F" /> (float) 型として評価スタックの一番上に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2407">Loads the element with type <see langword="float64" /> at a specified array index onto the top of the evaluation stack as type <see langword="F" /> (float).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2408">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2408">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2409">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2409">Format</span></span>|<span data-ttu-id="e5fd8-2410">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2410">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2411">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2411">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2412">99</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2412">99</span></span>|<span data-ttu-id="e5fd8-2413">ldelem.r8</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2413">ldelem.r8</span></span>|<span data-ttu-id="e5fd8-2414">`index` に型 `float64` を持つ要素を型 `F`としてスタックの一番上に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2414">Loads the element with type `float64` at `index` onto the top of the stack as type `F`.</span></span>|  
  
 <span data-ttu-id="e5fd8-2415">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2415">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2416">オブジェクト参照 `array` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2416">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-2417">インデックス値 `index` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2417">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-2418">`index` と `array` がスタックからポップされます。`array` の `index` 位置に格納されている値が検索されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2418">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="e5fd8-2419">値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2419">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2420">`ldelem.r8` 命令は、インデックス `index` (型 `native int`) を持つ要素の値を0から始まる1次元 `array` 配列に読み込み、スタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2420">The `ldelem.r8` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="e5fd8-2421">配列はオブジェクトであり、そのため `O`型の値によって表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2421">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="e5fd8-2422">`ldelem.r8` の戻り値は `float64`です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2422">The return value for `ldelem.r8` is `float64`.</span></span>  
  
 <span data-ttu-id="e5fd8-2423">浮動小数点値は、評価スタックに読み込まれるときに `F` 型に変換されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2423">Floating-point values are converted to type `F` when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2424">`array` が null 参照の場合、<xref:System.NullReferenceException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2424"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="e5fd8-2425">`array` が必要な型の要素を保持していない場合、<xref:System.ArrayTypeMismatchException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2425"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="e5fd8-2426"><xref:System.IndexOutOfRangeException> は、`index` が負の場合、または `array`のバインドより大きい場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2426"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="e5fd8-2427">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldelem.r8` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2427">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.r8` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_Ref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_Ref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_Ref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2428">指定した配列インデックスのオブジェクト参照を格納している要素を <see langword="O" /> 型 (オブジェクト参照) として評価スタックの一番上に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2428">Loads the element containing an object reference at a specified array index onto the top of the evaluation stack as type <see langword="O" /> (object reference).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2429">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2429">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2430">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2430">Format</span></span>|<span data-ttu-id="e5fd8-2431">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2431">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2432">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2432">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2433">9A</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2433">9A</span></span>|<span data-ttu-id="e5fd8-2434">ldelem.ref</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2434">ldelem.ref</span></span>|<span data-ttu-id="e5fd8-2435">`index` のオブジェクト参照を持つ要素を、型 `O`としてスタックの一番上に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2435">Loads the element with an object reference at `index` onto the top of the stack as type `O`.</span></span>|  
  
 <span data-ttu-id="e5fd8-2436">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2436">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2437">オブジェクト参照 `array` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2437">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-2438">インデックス値 `index` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2438">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-2439">`index` と `array` がスタックからポップされます。`array` の `index` 位置に格納されている値が検索されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2439">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="e5fd8-2440">値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2440">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2441">`ldelem.ref` 命令は、インデックス `index` (型 `native int`) を持つ要素の値を0から始まる1次元 `array` 配列に読み込み、スタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2441">The `ldelem.ref` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="e5fd8-2442">配列はオブジェクトであり、そのため `O`型の値によって表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2442">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="e5fd8-2443">`ldelem.ref` の戻り値は、型 `O` (オブジェクト参照) です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2443">The return value for `ldelem.ref` is type `O` (object reference).</span></span>  
  
 <span data-ttu-id="e5fd8-2444">`array` が null 参照の場合、<xref:System.NullReferenceException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2444"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="e5fd8-2445">`array` が必要な型の要素を保持していない場合、<xref:System.ArrayTypeMismatchException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2445"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="e5fd8-2446"><xref:System.IndexOutOfRangeException> は、`index` が負の場合、または `array`のバインドより大きい場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2446"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="e5fd8-2447">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldelem.ref` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2447">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.ref` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_U1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_U1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_U1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2448">指定した配列インデックスの <see langword="unsigned int8" /> 型の要素を <see langword="int32" /> として評価スタックの一番上に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2448">Loads the element with type <see langword="unsigned int8" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2449">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2449">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2450">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2450">Format</span></span>|<span data-ttu-id="e5fd8-2451">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2451">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2452">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2452">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2453">91</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2453">91</span></span>|<span data-ttu-id="e5fd8-2454">ldelem.u1</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2454">ldelem.u1</span></span>|<span data-ttu-id="e5fd8-2455">`index` に `unsigned int8` 型の要素を、`int32`としてスタックの一番上に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2455">Loads the element with type `unsigned int8` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="e5fd8-2456">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2456">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2457">オブジェクト参照 `array` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2457">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-2458">インデックス値 `index` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2458">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-2459">`index` と `array` がスタックからポップされます。`array` の `index` 位置に格納されている値が検索されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2459">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="e5fd8-2460">値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2460">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2461">`ldelem.u1` 命令は、インデックス `index` (型 `native int`) を持つ要素の値を0から始まる1次元 `array` 配列に読み込み、スタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2461">The `ldelem.u1` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="e5fd8-2462">配列はオブジェクトであり、そのため `O`型の値によって表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2462">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="e5fd8-2463">`ldelem.u1` の戻り値は `int8`です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2463">The return value for `ldelem.u1` is `int8`.</span></span>  
  
 <span data-ttu-id="e5fd8-2464">4バイト未満の整数値は、評価スタックに読み込まれるときに (`native int`ではなく) `int32` に拡張されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2464">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2465">`array` が null 参照の場合、<xref:System.NullReferenceException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2465"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="e5fd8-2466">`array` が必要な型の要素を保持していない場合、<xref:System.ArrayTypeMismatchException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2466"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="e5fd8-2467"><xref:System.IndexOutOfRangeException> は、`index` が負の場合、または `array`のバインドより大きい場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2467"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="e5fd8-2468">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldelem.u1` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2468">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.u1` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_U2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_U2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_U2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2469">指定した配列インデックスの <see langword="unsigned int16" /> 型の要素を <see langword="int32" /> として評価スタックの一番上に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2469">Loads the element with type <see langword="unsigned int16" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2470">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2470">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2471">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2471">Format</span></span>|<span data-ttu-id="e5fd8-2472">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2472">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2473">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2473">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2474">93</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2474">93</span></span>|<span data-ttu-id="e5fd8-2475">ldelem.u2</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2475">ldelem.u2</span></span>|<span data-ttu-id="e5fd8-2476">インデックスの `unsigned int16` 型の要素を `int32`としてスタックの一番上に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2476">Loads the element with type `unsigned int16` at index onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="e5fd8-2477">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2477">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2478">オブジェクト参照 `array` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2478">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-2479">インデックス値 `index` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2479">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-2480">`index` と `array` がスタックからポップされます。`array` の `index` 位置に格納されている値が検索されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2480">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="e5fd8-2481">値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2481">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2482">`ldelem.u2` 命令は、インデックス `index` (型 `native int`) を持つ要素の値を0から始まる1次元 `array` 配列に読み込み、スタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2482">The `ldelem.u2` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="e5fd8-2483">配列はオブジェクトであり、そのため `O`型の値によって表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2483">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="e5fd8-2484">`ldelem.u2` の戻り値は `int16`です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2484">The return value for `ldelem.u2` is `int16`.</span></span>  
  
 <span data-ttu-id="e5fd8-2485">4バイト未満の整数値は、評価スタックに読み込まれるときに (`native int`ではなく) `int32` に拡張されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2485">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2486">`array` が null 参照の場合、<xref:System.NullReferenceException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2486"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="e5fd8-2487">`array` が必要な型の要素を保持していない場合、<xref:System.ArrayTypeMismatchException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2487"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="e5fd8-2488"><xref:System.IndexOutOfRangeException> は、`index` が負の場合、または `array`のバインドより大きい場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2488"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="e5fd8-2489">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldelem.u2` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2489">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.u2` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_U4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_U4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_U4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2490">指定した配列インデックスの <see langword="unsigned int32" /> 型の要素を <see langword="int32" /> として評価スタックの一番上に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2490">Loads the element with type <see langword="unsigned int32" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2491">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2491">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2492">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2492">Format</span></span>|<span data-ttu-id="e5fd8-2493">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2493">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2494">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2494">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2495">95</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2495">95</span></span>|<span data-ttu-id="e5fd8-2496">ldelem.u4</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2496">ldelem.u4</span></span>|<span data-ttu-id="e5fd8-2497">インデックスの `unsigned int32` 型の要素を `int32`としてスタックの一番上に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2497">Loads the element with type `unsigned int32` at index onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="e5fd8-2498">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2498">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2499">オブジェクト参照 `array` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2499">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-2500">インデックス値 `index` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2500">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-2501">`index` と `array` がスタックからポップされます。`array` の `index` 位置に格納されている値が検索されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2501">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="e5fd8-2502">値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2502">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2503">`ldelem.u4` 命令は、インデックス `index` (型 `native int`) を持つ要素の値を0から始まる1次元 `array` 配列に読み込み、スタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2503">The `ldelem.u4` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="e5fd8-2504">配列はオブジェクトであり、そのため `O`型の値によって表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2504">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="e5fd8-2505">`ldelem.u4` の戻り値は `int32`です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2505">The return value for `ldelem.u4` is `int32`.</span></span>  
  
 <span data-ttu-id="e5fd8-2506">4バイト未満の整数値は、評価スタックに読み込まれるときに (`native int`ではなく) `int32` に拡張されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2506">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2507">`array` が null 参照の場合、<xref:System.NullReferenceException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2507"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="e5fd8-2508">配列が必要な型の要素を保持していない場合、<xref:System.ArrayTypeMismatchException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2508"><xref:System.ArrayTypeMismatchException> is thrown if array does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="e5fd8-2509"><xref:System.IndexOutOfRangeException> は、`index` が負の場合、または `array`のバインドより大きい場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2509"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="e5fd8-2510">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldelem.u4` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2510">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.u4` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelema">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelema;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelema" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelema" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelema As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelema;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelema : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelema" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2511">指定した配列インデックスにある配列要素のアドレスを <see langword="&amp;" /> 型 (マネージド ポインター) として評価スタックの一番上に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2511">Loads the address of the array element at a specified array index onto the top of the evaluation stack as type <see langword="&amp;" /> (managed pointer).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2512">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2512">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2513">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2513">Format</span></span>|<span data-ttu-id="e5fd8-2514">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2514">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2515">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2515">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2516">8F < `T` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-2516">8F < `T` ></span></span>|<span data-ttu-id="e5fd8-2517">ldelema `class`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2517">ldelema `class`</span></span>|<span data-ttu-id="e5fd8-2518">`index` の配列要素のアドレスを型 `&` (マネージポインター) として評価スタックの一番上に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2518">Loads the address of the array element at `index` onto the top of the evaluation stack as type `&` (managed pointer).</span></span>|  
  
 <span data-ttu-id="e5fd8-2519">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2519">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2520">オブジェクト参照 `array` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2520">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-2521">インデックス値 `index` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2521">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-2522">`index` と `array` がスタックからポップされます。`array` の位置 `index` に格納されているアドレスが検索されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2522">`index` and `array` are popped from the stack; the address stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="e5fd8-2523">アドレスはスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2523">The address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2524">`ldelema` は、オブジェクトの配列 (`class`型) の特定のインデックス位置にあるオブジェクトのアドレスを取得するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2524">The `ldelema` is used to retrieve the address of an object at a particular index in an array of objects (of type `class`).</span></span> <span data-ttu-id="e5fd8-2525">`ldelema` 命令は、0から始まる1次元 `array` 配列のインデックス `index` (型 `native int`) の値のアドレスを読み込み、スタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2525">The `ldelema` instruction loads the address of the value at index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="e5fd8-2526">配列はオブジェクトであり、そのため `O`型の値によって表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2526">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="e5fd8-2527">この値は、命令で渡される `class` 型である必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2527">The value must be of type `class` passed with the instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-2528">`ldelema` の戻り値はマネージポインター (型 `&`) です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2528">The return value for `ldelema` is a managed pointer (type `&`).</span></span>  
  
 <span data-ttu-id="e5fd8-2529">4バイト未満の整数値は、評価スタックに読み込まれるときに (`native int`ではなく) `int32` に拡張されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2529">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2530">`array` が null 参照の場合、<xref:System.NullReferenceException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2530"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="e5fd8-2531">`array` が必要な型の要素を保持していない場合、<xref:System.ArrayTypeMismatchException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2531"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="e5fd8-2532"><xref:System.IndexOutOfRangeException> は、`index` が負の場合、または `array`のバインドより大きい場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2532"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="e5fd8-2533">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldelema` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2533">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelema` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Type%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldfld;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldfld : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldfld" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2534">参照が現在評価スタック上にあるオブジェクト内のフィールドの値を検索します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2534">Finds the value of a field in the object whose reference is currently on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2535">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2535">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2536">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2536">Format</span></span>|<span data-ttu-id="e5fd8-2537">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2537">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2538">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2538">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2539">7B < `T` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-2539">7B < `T` ></span></span>|<span data-ttu-id="e5fd8-2540">ldfld `field`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2540">ldfld `field`</span></span>|<span data-ttu-id="e5fd8-2541">指定したオブジェクトのフィールドの値をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2541">Pushes the value of a field in a specified object onto the stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-2542">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2542">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2543">オブジェクト参照 (またはポインター) がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2543">An object reference (or pointer) is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-2544">オブジェクト参照 (またはポインター) がスタックからポップされます。オブジェクト内の指定されたフィールドの値が見つかりました。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2544">The object reference (or pointer) is popped from the stack; the value of the specified field in the object is found.</span></span>  
  
3.  <span data-ttu-id="e5fd8-2545">フィールドに格納されている値がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2545">The value stored in the field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2546">`ldfld` 命令は、オブジェクトにあるフィールドの値をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2546">The `ldfld` instruction pushes the value of a field located in an object onto the stack.</span></span> <span data-ttu-id="e5fd8-2547">オブジェクトは、オブジェクト参照 (型 `O`)、マネージポインター (型 `&`)、アンマネージポインター (型 `native int`)、transient ポインター (型 `*`)、または値型のインスタンスとしてスタック上にある必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2547">The object must be on the stack as an object reference (type `O`), a managed pointer (type `&`), an unmanaged pointer (type `native int`), a transient pointer (type `*`), or an instance of a value type.</span></span> <span data-ttu-id="e5fd8-2548">アンマネージポインターを使用することは、検証可能なコードでは許可されていません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2548">The use of an unmanaged pointer is not permitted in verifiable code.</span></span> <span data-ttu-id="e5fd8-2549">オブジェクトのフィールドは、フィールドメンバーを参照する必要があるメタデータトークンによって指定されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2549">The object's field is specified by a metadata token that must refer to a field member.</span></span> <span data-ttu-id="e5fd8-2550">戻り値の型は、フィールドに関連付けられているものと同じです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2550">The return type is the same as the one associated with the field.</span></span> <span data-ttu-id="e5fd8-2551">フィールドは、インスタンスフィールド (この場合は、オブジェクトを null 参照にすることはできません) または静的フィールドのいずれかになります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2551">The field may be either an instance field (in which case the object must not be a null reference) or a static field.</span></span>  
  
 <span data-ttu-id="e5fd8-2552">`ldfld` 命令の前には、<xref:System.Reflection.Emit.OpCodes.Unaligned> と <xref:System.Reflection.Emit.OpCodes.Volatile> プレフィックスのいずれかまたは両方を付けることができます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2552">The `ldfld` instruction can be preceded by either or both of the <xref:System.Reflection.Emit.OpCodes.Unaligned> and <xref:System.Reflection.Emit.OpCodes.Volatile> prefixes.</span></span>  
  
 <span data-ttu-id="e5fd8-2553">オブジェクトが null で、フィールドが静的でない場合、<xref:System.NullReferenceException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2553"><xref:System.NullReferenceException> is thrown if the object is null and the field is not static.</span></span>  
  
 <span data-ttu-id="e5fd8-2554">指定されたフィールドがメタデータ内に見つからない場合、<xref:System.MissingFieldException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2554"><xref:System.MissingFieldException> is thrown if the specified field is not found in the metadata.</span></span> <span data-ttu-id="e5fd8-2555">これは通常、Microsoft 中間言語 (MSIL) 命令が実行時ではなくネイティブコードに変換された場合にチェックされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2555">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at run time.</span></span>  
  
 <span data-ttu-id="e5fd8-2556">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldfld` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2556">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldfld` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.FieldInfo%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldflda">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldflda;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldflda" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldflda" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldflda As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldflda;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldflda : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldflda" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2557">参照が現在評価スタック上にあるオブジェクト内のフィールドのアドレスを検索します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2557">Finds the address of a field in the object whose reference is currently on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2558">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2558">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2559">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2559">Format</span></span>|<span data-ttu-id="e5fd8-2560">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2560">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2561">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2561">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2562">7C < `T` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-2562">7C < `T` ></span></span>|<span data-ttu-id="e5fd8-2563">ldflda `field`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2563">ldflda `field`</span></span>|<span data-ttu-id="e5fd8-2564">指定したオブジェクトの `field` のアドレスをスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2564">Pushes the address of `field` in a specified object onto the stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-2565">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2565">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2566">オブジェクト参照 (またはポインター) がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2566">An object reference (or pointer) is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-2567">オブジェクト参照 (またはポインター) がスタックからポップされます。オブジェクト内の指定されたフィールドのアドレスが見つかりました。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2567">The object reference (or pointer) is popped from the stack; the address of the specified field in the object is found.</span></span>  
  
3.  <span data-ttu-id="e5fd8-2568">指定されたフィールドのアドレスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2568">The address of the specified field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2569">`ldflda` 命令は、オブジェクトにあるフィールドのアドレスをスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2569">The `ldflda` instruction pushes the address of a field located in an object onto the stack.</span></span> <span data-ttu-id="e5fd8-2570">オブジェクトは、オブジェクト参照 (型 `O`)、マネージポインター (型 `&`)、アンマネージポインター (型 `native int`)、transient ポインター (型 `*`)、または値型のインスタンスとしてスタック上にある必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2570">The object must be on the stack as an object reference (type `O`), a managed pointer (type `&`), an unmanaged pointer (type `native int`), a transient pointer (type `*`), or an instance of a value type.</span></span> <span data-ttu-id="e5fd8-2571">アンマネージポインターを使用することは、検証可能なコードでは許可されていません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2571">The use of an unmanaged pointer is not permitted in verifiable code.</span></span> <span data-ttu-id="e5fd8-2572">オブジェクトのフィールドは、フィールドメンバーを参照する必要があるメタデータトークンによって指定されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2572">The object's field is specified by a metadata token that must refer to a field member.</span></span>  
  
 <span data-ttu-id="e5fd8-2573">オブジェクトがアンマネージポインターとしてスタックにプッシュされる場合を除き、`ldflda` によって返される値はマネージポインター (型 `&`) です。この場合、戻りアドレスもアンマネージポインター (型 `native int`) になります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2573">The value returned by `ldflda` is a managed pointer (type `&`) unless the object is pushed onto the stack as an unmanaged pointer, in which case the return address is also an unmanaged pointer (type `native int`).</span></span>  
  
 <span data-ttu-id="e5fd8-2574">`ldflda` 命令の前には、<xref:System.Reflection.Emit.OpCodes.Unaligned> と <xref:System.Reflection.Emit.OpCodes.Volatile> プレフィックスのいずれかまたは両方を付けることができます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2574">The `ldflda` instruction can be preceded by either or both of the <xref:System.Reflection.Emit.OpCodes.Unaligned> and <xref:System.Reflection.Emit.OpCodes.Volatile> prefixes.</span></span>  
  
 <span data-ttu-id="e5fd8-2575">オブジェクトがアクセス元のアプリケーションドメイン内にない場合、<xref:System.InvalidOperationException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2575"><xref:System.InvalidOperationException> is thrown if the object is not within the application domain from which it is being accessed.</span></span> <span data-ttu-id="e5fd8-2576">アクセスしているアプリケーションドメインに含まれていないフィールドのアドレスを読み込むことができません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2576">The address of a field that is not inside the accessing application domain cannot be loaded.</span></span>  
  
 <span data-ttu-id="e5fd8-2577">オブジェクトが null で、フィールドが静的でない場合、<xref:System.NullReferenceException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2577"><xref:System.NullReferenceException> is thrown if the object is null and the field is not static.</span></span>  
  
 <span data-ttu-id="e5fd8-2578">指定されたフィールドがメタデータ内に見つからない場合、<xref:System.MissingFieldException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2578"><xref:System.MissingFieldException> is thrown if the specified field is not found in the metadata.</span></span> <span data-ttu-id="e5fd8-2579">これは通常、Microsoft 中間言語 (MSIL) 命令が実行時ではなくネイティブコードに変換された場合にチェックされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2579">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at run time.</span></span>  
  
 <span data-ttu-id="e5fd8-2580">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldflda` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2580">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldflda` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.FieldInfo%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldftn">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldftn;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldftn" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldftn" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldftn As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldftn;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldftn : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldftn" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2581">特定のメソッドを実装しているネイディブ コードへのアンマネージ ポインター (<see langword="native int" /> 型) を評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2581">Pushes an unmanaged pointer (type <see langword="native int" />) to the native code implementing a specific method onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2582">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2582">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2583">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2583">Format</span></span>|<span data-ttu-id="e5fd8-2584">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2584">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2585">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2585">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2586">FE 06 < `T` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-2586">FE 06 < `T` ></span></span>|<span data-ttu-id="e5fd8-2587">ldftn `method`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2587">ldftn `method`</span></span>|<span data-ttu-id="e5fd8-2588">スタック上の `method` によって参照されるメソッドへのポインターをプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2588">Pushes a pointer to a method referenced by `method` on the stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-2589">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2589">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2590">特定のメソッドへのアンマネージポインターがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2590">The unmanaged pointer to a specific method is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2591">特定のメソッド (`method`) は、マネージメソッド (またはマネージコードからアンマネージコードに遷移するスタブ) を参照する場合、<xref:System.Reflection.Emit.OpCodes.Calli> 命令を使用して呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2591">The specific method (`method`) can be called using the <xref:System.Reflection.Emit.OpCodes.Calli> instruction if it references a managed method (or a stub that transitions from managed to unmanaged code).</span></span>  
  
 <span data-ttu-id="e5fd8-2592">返される値は、CLR 呼び出し規約を使用してネイティブコードを指します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2592">The value returned points to native code using the CLR calling convention.</span></span> <span data-ttu-id="e5fd8-2593">このメソッドポインターは、アンマネージネイティブコードにコールバックルーチンとして渡すことはできません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2593">This method pointer should not be passed to unmanaged native code as a callback routine.</span></span>  
  
 <span data-ttu-id="e5fd8-2594">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldftn` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2594">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldftn` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.MethodInfo%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2595"><see langword="native int" /> 型の値を <see langword="native int" /> として評価スタックに間接的に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2595">Loads a value of type <see langword="native int" /> as a <see langword="native int" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2596">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2596">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2597">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2597">Format</span></span>|<span data-ttu-id="e5fd8-2598">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2598">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2599">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2599">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2600">4D</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2600">4D</span></span>|<span data-ttu-id="e5fd8-2601">ldind.i</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2601">ldind.i</span></span>|<span data-ttu-id="e5fd8-2602">アドレス `addr` の `native int` 値を `native int`としてスタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2602">Loads the `native int` value at address `addr` onto the stack as a `native int`.</span></span>|  
  
 <span data-ttu-id="e5fd8-2603">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2603">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2604">アドレスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2604">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-2605">アドレスはスタックからポップされます。アドレスにある値がフェッチされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2605">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="e5fd8-2606">フェッチされた値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2606">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2607">`ldind.i` 命令は、指定されたアドレス (型 `native int`、`&`、または \*) からの `native int` 値を `native int`としてスタックに間接的に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2607">The `ldind.i` instruction indirectly loads a `native int` value from the specified address (of type `native int`, `&`, or \*) onto the stack as a `native int`.</span></span>  
  
 <span data-ttu-id="e5fd8-2608">`ldind` のすべての手順は、対応する組み込み値クラスを指定する <xref:System.Reflection.Emit.OpCodes.Ldobj> 命令のショートカットです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2608">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="e5fd8-2609">4バイト未満の整数値は、評価スタックに読み込まれるときに (`native int`ではなく) `int32` に拡張されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2609">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="e5fd8-2610">浮動小数点値は、評価スタックに読み込まれるときに `F` 型に変換されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2610">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2611">Microsoft 中間言語 (MSIL) が正しく記述されていると、ポインターの型と一貫性のある方法で `ldind` 命令が使用されるようになります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2611">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="e5fd8-2612">最初にスタックにプッシュされたアドレスは、コンピューター上のオブジェクトの自然サイズに合わせる必要があります。または、<xref:System.NullReferenceException> が発生する可能性があります (「<xref:System.Reflection.Emit.OpCodes.Unaligned>」を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2612">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="e5fd8-2613">アドレスを返すすべての MSIL 命令 (<xref:System.Reflection.Emit.OpCodes.Ldloca> や <xref:System.Reflection.Emit.OpCodes.Ldarga>など) の結果は安全にアラインされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2613">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="e5fd8-2614">1バイトを超えるデータ型の場合、バイトの順序付けはターゲット CPU に依存します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2614">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="e5fd8-2615">バイト順に依存するコードは、すべてのプラットフォームで実行されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2615">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="e5fd8-2616">無効なアドレスが検出された場合、<xref:System.NullReferenceException> がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2616"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="e5fd8-2617">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldind.i` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2617">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2618"><see langword="int8" /> 型の値を <see langword="int32" /> として評価スタックに間接的に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2618">Loads a value of type <see langword="int8" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2619">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2619">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2620">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2620">Format</span></span>|<span data-ttu-id="e5fd8-2621">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2621">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2622">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2622">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2623">46</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2623">46</span></span>|<span data-ttu-id="e5fd8-2624">ldind.i1</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2624">ldind.i1</span></span>|<span data-ttu-id="e5fd8-2625">アドレス `addr` の `int8` 値を `int32`としてスタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2625">Loads the `int8` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="e5fd8-2626">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2626">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2627">アドレスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2627">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-2628">アドレスはスタックからポップされます。アドレスにある値がフェッチされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2628">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="e5fd8-2629">フェッチされた値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2629">The fetched value is pushed onto the stack.</span></span> 
  
 <span data-ttu-id="e5fd8-2630">`ldind.i1` 命令は、指定されたアドレス (型 `native int`、`&`、または \*) からの `int8` 値を `int32`としてスタックに間接的に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2630">The `ldind.i1` instruction indirectly loads an `int8` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="e5fd8-2631">`ldind` のすべての手順は、対応する組み込み値クラスを指定する <xref:System.Reflection.Emit.OpCodes.Ldobj> 命令のショートカットです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2631">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="e5fd8-2632">4バイト未満の整数値は、評価スタックに読み込まれるときに (`native int`ではなく) `int32` に拡張されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2632">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="e5fd8-2633">浮動小数点値は、評価スタックに読み込まれるときに `F` 型に変換されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2633">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2634">Microsoft 中間言語 (MSIL) が正しく記述されていると、ポインターの型と一貫性のある方法で `ldind` 命令が使用されるようになります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2634">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="e5fd8-2635">最初にスタックにプッシュされたアドレスは、コンピューター上のオブジェクトの自然サイズに合わせる必要があります。または、<xref:System.NullReferenceException> が発生する可能性があります (「<xref:System.Reflection.Emit.OpCodes.Unaligned>」を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2635">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="e5fd8-2636">アドレスを返すすべての MSIL 命令 (<xref:System.Reflection.Emit.OpCodes.Ldloca> や <xref:System.Reflection.Emit.OpCodes.Ldarga>など) の結果は安全にアラインされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2636">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="e5fd8-2637">1バイトを超えるデータ型の場合、バイトの順序付けはターゲット CPU に依存します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2637">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="e5fd8-2638">バイト順に依存するコードは、すべてのプラットフォームで実行されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2638">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="e5fd8-2639">無効なアドレスが検出された場合、<xref:System.NullReferenceException> がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2639"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="e5fd8-2640">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldind.i1` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2640">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i1` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2641"><see langword="int16" /> 型の値を <see langword="int32" /> として評価スタックに間接的に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2641">Loads a value of type <see langword="int16" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2642">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2642">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2643">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2643">Format</span></span>|<span data-ttu-id="e5fd8-2644">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2644">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2645">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2645">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2646">48</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2646">48</span></span>|<span data-ttu-id="e5fd8-2647">ldind.i2</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2647">ldind.i2</span></span>|<span data-ttu-id="e5fd8-2648">アドレス `addr` の `int16` 値を `int32`としてスタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2648">Loads the `int16` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="e5fd8-2649">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2649">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2650">アドレスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2650">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-2651">アドレスはスタックからポップされます。アドレスにある値がフェッチされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2651">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="e5fd8-2652">フェッチされた値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2652">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2653">`ldind.i2` 命令は、指定されたアドレス (型 `native int`、`&`、または \*) からの `int16` 値を `int32`としてスタックに間接的に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2653">The `ldind.i2` instruction indirectly loads an `int16` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="e5fd8-2654">`ldind` のすべての手順は、対応する組み込み値クラスを指定する <xref:System.Reflection.Emit.OpCodes.Ldobj> 命令のショートカットです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2654">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="e5fd8-2655">4バイト未満の整数値は、評価スタックに読み込まれるときに (`native int`ではなく) `int32` に拡張されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2655">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="e5fd8-2656">浮動小数点値は、評価スタックに読み込まれるときに `F` 型に変換されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2656">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2657">Microsoft 中間言語 (MSIL) が正しく記述されていると、ポインターの型と一貫性のある方法で `ldind` 命令が使用されるようになります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2657">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="e5fd8-2658">最初にスタックにプッシュされたアドレスは、コンピューター上のオブジェクトの自然サイズに合わせる必要があります。または、<xref:System.NullReferenceException> が発生する可能性があります (「<xref:System.Reflection.Emit.OpCodes.Unaligned>」を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2658">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="e5fd8-2659">アドレスを返すすべての MSIL 命令 (<xref:System.Reflection.Emit.OpCodes.Ldloca> や <xref:System.Reflection.Emit.OpCodes.Ldarga>など) の結果は安全にアラインされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2659">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="e5fd8-2660">1バイトを超えるデータ型の場合、バイトの順序付けはターゲット CPU に依存します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2660">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="e5fd8-2661">バイト順に依存するコードは、すべてのプラットフォームで実行されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2661">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="e5fd8-2662">無効なアドレスが検出された場合、<xref:System.NullReferenceException> がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2662"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="e5fd8-2663">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldind.i2` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2663">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i2` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2664"><see langword="int32" /> 型の値を <see langword="int32" /> として評価スタックに間接的に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2664">Loads a value of type <see langword="int32" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2665">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2665">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2666">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2666">Format</span></span>|<span data-ttu-id="e5fd8-2667">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2667">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2668">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2668">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2669">4A</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2669">4A</span></span>|<span data-ttu-id="e5fd8-2670">ldind.i4</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2670">ldind.i4</span></span>|<span data-ttu-id="e5fd8-2671">アドレス `addr` の `int32` 値を `int32`としてスタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2671">Loads the `int32` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="e5fd8-2672">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2672">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2673">アドレスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2673">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-2674">アドレスはスタックからポップされます。アドレスにある値がフェッチされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2674">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="e5fd8-2675">フェッチされた値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2675">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2676">`ldind.i4` 命令は、指定されたアドレス (型 `native int`、`&`、または \*) からの `int32` 値を `int32`としてスタックに間接的に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2676">The `ldind.i4` instruction indirectly loads an `int32` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="e5fd8-2677">`ldind` のすべての手順は、対応する組み込み値クラスを指定する <xref:System.Reflection.Emit.OpCodes.Ldobj> 命令のショートカットです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2677">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="e5fd8-2678">4バイト未満の整数値は、評価スタックに読み込まれるときに (`native int`ではなく) `int32` に拡張されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2678">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="e5fd8-2679">浮動小数点値は、評価スタックに読み込まれるときに `F` 型に変換されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2679">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2680">Microsoft 中間言語 (MSIL) が正しく記述されていると、ポインターの型と一貫性のある方法で `ldind` 命令が使用されるようになります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2680">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="e5fd8-2681">最初にスタックにプッシュされたアドレスは、コンピューター上のオブジェクトの自然サイズに合わせる必要があります。または、<xref:System.NullReferenceException> が発生する可能性があります (「<xref:System.Reflection.Emit.OpCodes.Unaligned>」を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2681">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="e5fd8-2682">アドレスを返すすべての MSIL 命令 (<xref:System.Reflection.Emit.OpCodes.Ldloca> や <xref:System.Reflection.Emit.OpCodes.Ldarga>など) の結果は安全にアラインされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2682">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="e5fd8-2683">1バイトを超えるデータ型の場合、バイトの順序付けはターゲット CPU に依存します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2683">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="e5fd8-2684">バイト順に依存するコードは、すべてのプラットフォームで実行されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2684">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="e5fd8-2685">無効なアドレスが検出された場合、<xref:System.NullReferenceException> がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2685"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="e5fd8-2686">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldind.i4` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2686">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i4` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2687"><see langword="int64" /> 型の値を <see langword="int64" /> として評価スタックに間接的に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2687">Loads a value of type <see langword="int64" /> as an <see langword="int64" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2688">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2688">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2689">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2689">Format</span></span>|<span data-ttu-id="e5fd8-2690">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2690">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2691">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2691">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2692">4C</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2692">4C</span></span>|<span data-ttu-id="e5fd8-2693">ldind.i8</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2693">ldind.i8</span></span>|<span data-ttu-id="e5fd8-2694">アドレス `addr` の `int64` 値を `int64`としてスタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2694">Loads the `int64` value at address `addr` onto the stack as an `int64`.</span></span>|  
  
 <span data-ttu-id="e5fd8-2695">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2695">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2696">アドレスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2696">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-2697">アドレスはスタックからポップされます。アドレスにある値がフェッチされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2697">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="e5fd8-2698">フェッチされた値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2698">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2699">`ldind.i8` 命令は、指定されたアドレス (型 `native int`、`&`、または \*) からの `int64` 値を `int64`としてスタックに間接的に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2699">The `ldind.i8` instruction indirectly loads an `int64` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int64`.</span></span>  
  
 <span data-ttu-id="e5fd8-2700">`ldind` のすべての手順は、対応する組み込み値クラスを指定する <xref:System.Reflection.Emit.OpCodes.Ldobj> 命令のショートカットです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2700">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="e5fd8-2701">4バイト未満の整数値は、評価スタックに読み込まれるときに (`native int`ではなく) `int32` に拡張されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2701">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="e5fd8-2702">浮動小数点値は、評価スタックに読み込まれるときに `F` 型に変換されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2702">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2703">Microsoft 中間言語 (MSIL) が正しく記述されていると、ポインターの型と一貫性のある方法で `ldind` 命令が使用されるようになります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2703">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="e5fd8-2704">最初にスタックにプッシュされたアドレスは、コンピューター上のオブジェクトの自然サイズに合わせる必要があります。または、<xref:System.NullReferenceException> が発生する可能性があります (「<xref:System.Reflection.Emit.OpCodes.Unaligned>」を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2704">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="e5fd8-2705">アドレスを返すすべての MSIL 命令 (<xref:System.Reflection.Emit.OpCodes.Ldloca> や <xref:System.Reflection.Emit.OpCodes.Ldarga>など) の結果は安全にアラインされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2705">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="e5fd8-2706">1バイトを超えるデータ型の場合、バイトの順序付けはターゲット CPU に依存します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2706">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="e5fd8-2707">バイト順に依存するコードは、すべてのプラットフォームで実行されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2707">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="e5fd8-2708">無効なアドレスが検出された場合、<xref:System.NullReferenceException> がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2708"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="e5fd8-2709">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldind.i8` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2709">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i8` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2710"><see langword="float32" /> 型の値を <see langword="F" /> (float) 型として評価スタックに間接的に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2710">Loads a value of type <see langword="float32" /> as a type <see langword="F" /> (float) onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2711">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2711">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2712">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2712">Format</span></span>|<span data-ttu-id="e5fd8-2713">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2713">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2714">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2714">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2715">4E</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2715">4E</span></span>|<span data-ttu-id="e5fd8-2716">ldind.r4</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2716">ldind.r4</span></span>|<span data-ttu-id="e5fd8-2717">アドレス `addr` の `float32` 値を `F`型としてスタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2717">Loads the `float32` value at address `addr` onto the stack as a type `F`.</span></span>|  
  
 <span data-ttu-id="e5fd8-2718">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2718">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2719">アドレスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2719">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-2720">アドレスはスタックからポップされます。アドレスにある値がフェッチされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2720">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="e5fd8-2721">フェッチされた値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2721">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2722">`ldind.r4` 命令は、指定されたアドレス (型 `native int`、`&`、または \*) からの `float32` 値を、型 `F`としてスタックに間接的に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2722">The `ldind.r4` instruction indirectly loads a `float32` value from the specified address (of type `native int`, `&`, or \*) onto the stack as a type `F`.</span></span>  
  
 <span data-ttu-id="e5fd8-2723">`ldind` のすべての手順は、対応する組み込み値クラスを指定する <xref:System.Reflection.Emit.OpCodes.Ldobj> 命令のショートカットです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2723">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="e5fd8-2724">4バイト未満の整数値は、評価スタックに読み込まれるときに (`native int`ではなく) `int32` に拡張されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2724">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="e5fd8-2725">浮動小数点値は、評価スタックに読み込まれるときに `F` 型に変換されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2725">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2726">Microsoft 中間言語 (MSIL) が正しく記述されていると、ポインターの型と一貫性のある方法で `ldind` 命令が使用されるようになります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2726">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="e5fd8-2727">最初にスタックにプッシュされたアドレスは、コンピューター上のオブジェクトの自然サイズに合わせる必要があります。または、<xref:System.NullReferenceException> が発生する可能性があります (「<xref:System.Reflection.Emit.OpCodes.Unaligned>」を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2727">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="e5fd8-2728">アドレスを返すすべての MSIL 命令 (<xref:System.Reflection.Emit.OpCodes.Ldloca> や <xref:System.Reflection.Emit.OpCodes.Ldarga>など) の結果は安全にアラインされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2728">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="e5fd8-2729">1バイトを超えるデータ型の場合、バイトの順序付けはターゲット CPU に依存します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2729">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="e5fd8-2730">バイト順に依存するコードは、すべてのプラットフォームで実行されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2730">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="e5fd8-2731">無効なアドレスが検出された場合、<xref:System.NullReferenceException> がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2731"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="e5fd8-2732">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldind.r4` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2732">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.r4` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2733"><see langword="float64" /> 型の値を <see langword="F" /> (float) 型として評価スタックに間接的に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2733">Loads a value of type <see langword="float64" /> as a type <see langword="F" /> (float) onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2734">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2734">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2735">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2735">Format</span></span>|<span data-ttu-id="e5fd8-2736">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2736">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2737">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2737">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2738">4F</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2738">4F</span></span>|<span data-ttu-id="e5fd8-2739">ldind.r8</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2739">ldind.r8</span></span>|<span data-ttu-id="e5fd8-2740">アドレス `addr` の `float64` 値を `F`型としてスタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2740">Loads the `float64` value at address `addr` onto the stack as a type `F`.</span></span>|  
  
 <span data-ttu-id="e5fd8-2741">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2741">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2742">アドレスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2742">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-2743">アドレスはスタックからポップされます。アドレスにある値がフェッチされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2743">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="e5fd8-2744">フェッチされた値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2744">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2745">`ldind.r8` 命令は、指定されたアドレス (型 `native int`、`&`、または \*) からの `float64` 値を `float64`としてスタックに間接的に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2745">The `ldind.r8` instruction indirectly loads a `float64` value from the specified address (of type `native int`, `&`, or \*) onto the stack as a `float64`.</span></span>  
  
 <span data-ttu-id="e5fd8-2746">`ldind` のすべての手順は、対応する組み込み値クラスを指定する <xref:System.Reflection.Emit.OpCodes.Ldobj> 命令のショートカットです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2746">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="e5fd8-2747">4バイト未満の整数値は、評価スタックに読み込まれるときに (`native int`ではなく) `int32` に拡張されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2747">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="e5fd8-2748">浮動小数点値は、評価スタックに読み込まれるときに `F` 型に変換されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2748">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2749">Microsoft 中間言語 (MSIL) が正しく記述されていると、ポインターの型と一貫性のある方法で `ldind` 命令が使用されるようになります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2749">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="e5fd8-2750">最初にスタックにプッシュされたアドレスは、コンピューター上のオブジェクトの自然サイズに合わせる必要があります。または、<xref:System.NullReferenceException> が発生する可能性があります (「<xref:System.Reflection.Emit.OpCodes.Unaligned>」を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2750">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="e5fd8-2751">アドレスを返すすべての MSIL 命令 (<xref:System.Reflection.Emit.OpCodes.Ldloca> や <xref:System.Reflection.Emit.OpCodes.Ldarga>など) の結果は安全にアラインされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2751">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="e5fd8-2752">1バイトを超えるデータ型の場合、バイトの順序付けはターゲット CPU に依存します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2752">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="e5fd8-2753">バイト順に依存するコードは、すべてのプラットフォームで実行されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2753">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="e5fd8-2754">無効なアドレスが検出された場合、<xref:System.NullReferenceException> がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2754"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="e5fd8-2755">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldind.r8` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2755">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.r8` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_Ref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_Ref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_Ref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2756">オブジェクト参照を <see langword="O" /> 型 (オブジェクト参照) として評価スタックに間接的に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2756">Loads an object reference as a type <see langword="O" /> (object reference) onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2757">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2757">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2758">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2758">Format</span></span>|<span data-ttu-id="e5fd8-2759">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2759">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2760">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2760">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2761">50</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2761">50</span></span>|<span data-ttu-id="e5fd8-2762">ldind.ref</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2762">ldind.ref</span></span>|<span data-ttu-id="e5fd8-2763">アドレス `addr` にあるオブジェクト参照を、型としてスタックに読み込み `O`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2763">Loads the object reference at address `addr` onto the stack as a type `O`</span></span>|  
  
 <span data-ttu-id="e5fd8-2764">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2764">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2765">アドレスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2765">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-2766">アドレスはスタックからポップされます。アドレスにあるオブジェクト参照がフェッチされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2766">The address is popped from the stack; the object reference located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="e5fd8-2767">フェッチされた参照がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2767">The fetched reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2768">`ldind.ref` 命令は、指定されたアドレス (型 `native int`、`&`、または \*) をオブジェクト参照を `O`型としてスタックに間接的に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2768">The `ldind.ref` instruction indirectly loads the object reference the specified address (of type `native int`, `&`, or \*) onto the stack as type `O`.</span></span>  
  
 <span data-ttu-id="e5fd8-2769">`ldind` のすべての手順は、対応する組み込み値クラスを指定する <xref:System.Reflection.Emit.OpCodes.Ldobj> 命令のショートカットです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2769">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="e5fd8-2770">4バイト未満の整数値は、評価スタックに読み込まれるときに (`native int`ではなく) `int32` に拡張されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2770">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="e5fd8-2771">浮動小数点値は、評価スタックに読み込まれるときに `F` 型に変換されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2771">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2772">Microsoft 中間言語 (MSIL) が正しく記述されていると、ポインターの型と一貫性のある方法で `ldind` 命令が使用されるようになります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2772">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="e5fd8-2773">最初にスタックにプッシュされたアドレスは、コンピューター上のオブジェクトの自然サイズに合わせる必要があります。または、<xref:System.NullReferenceException> が発生する可能性があります (「<xref:System.Reflection.Emit.OpCodes.Unaligned>」を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2773">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="e5fd8-2774">アドレスを返すすべての MSIL 命令 (<xref:System.Reflection.Emit.OpCodes.Ldloca> や <xref:System.Reflection.Emit.OpCodes.Ldarga>など) の結果は安全にアラインされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2774">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="e5fd8-2775">1バイトを超えるデータ型の場合、バイトの順序付けはターゲット CPU に依存します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2775">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="e5fd8-2776">バイト順に依存するコードは、すべてのプラットフォームで実行されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2776">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="e5fd8-2777">無効なアドレスが検出された場合、<xref:System.NullReferenceException> がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2777"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="e5fd8-2778">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldind.ref` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2778">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.ref` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_U1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_U1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_U1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2779"><see langword="unsigned int8" /> 型の値を <see langword="int32" /> として評価スタックに間接的に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2779">Loads a value of type <see langword="unsigned int8" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2780">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2780">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2781">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2781">Format</span></span>|<span data-ttu-id="e5fd8-2782">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2782">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2783">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2783">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2784">47</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2784">47</span></span>|<span data-ttu-id="e5fd8-2785">ldind.u1</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2785">ldind.u1</span></span>|<span data-ttu-id="e5fd8-2786">アドレス `addr` の `unsigned int8` 値を `int32`としてスタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2786">Loads the `unsigned int8` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="e5fd8-2787">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2787">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2788">アドレスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2788">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-2789">アドレスはスタックからポップされます。アドレスにある値がフェッチされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2789">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="e5fd8-2790">フェッチされた値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2790">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2791">`ldind.u1` 命令は、指定されたアドレス (型`native int`、`&`、または \*) からの `unsigned int8` 値を `int32`としてスタックに間接的に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2791">The `ldind.u1` instruction indirectly loads an `unsigned int8` value from the specified address (of type`native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="e5fd8-2792">`ldind` のすべての手順は、対応する組み込み値クラスを指定する <xref:System.Reflection.Emit.OpCodes.Ldobj> 命令のショートカットです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2792">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="e5fd8-2793">4バイト未満の整数値は、評価スタックに読み込まれるときに (`native int`ではなく) `int32` に拡張されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2793">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="e5fd8-2794">浮動小数点値は、評価スタックに読み込まれるときに `F` 型に変換されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2794">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2795">Microsoft 中間言語 (MSIL) が正しく記述されていると、ポインターの型と一貫性のある方法で `ldind` 命令が使用されるようになります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2795">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="e5fd8-2796">最初にスタックにプッシュされたアドレスは、コンピューター上のオブジェクトの自然サイズに合わせる必要があります。または、<xref:System.NullReferenceException> が発生する可能性があります (「<xref:System.Reflection.Emit.OpCodes.Unaligned>」を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2796">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="e5fd8-2797">アドレスを返すすべての MSIL 命令 (<xref:System.Reflection.Emit.OpCodes.Ldloca> や <xref:System.Reflection.Emit.OpCodes.Ldarga>など) の結果は安全にアラインされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2797">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="e5fd8-2798">1バイトを超えるデータ型の場合、バイトの順序付けはターゲット CPU に依存します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2798">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="e5fd8-2799">バイト順に依存するコードは、すべてのプラットフォームで実行されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2799">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="e5fd8-2800">無効なアドレスが検出された場合、<xref:System.NullReferenceException> がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2800"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="e5fd8-2801">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldind.u1` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2801">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.u1` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_U2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_U2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_U2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2802"><see langword="unsigned int16" /> 型の値を <see langword="int32" /> として評価スタックに間接的に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2802">Loads a value of type <see langword="unsigned int16" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2803">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2803">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2804">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2804">Format</span></span>|<span data-ttu-id="e5fd8-2805">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2805">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2806">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2806">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2807">49</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2807">49</span></span>|<span data-ttu-id="e5fd8-2808">ldind.u2</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2808">ldind.u2</span></span>|<span data-ttu-id="e5fd8-2809">アドレス `addr` の `unsigned int16` 値を `int32`としてスタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2809">Loads the `unsigned int16` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="e5fd8-2810">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2810">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2811">アドレスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2811">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-2812">アドレスはスタックからポップされます。アドレスにある値がフェッチされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2812">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="e5fd8-2813">フェッチされた値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2813">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2814">`ldind.u2` 命令は、指定されたアドレス (型 `native int`、`&`、または \*) からの `unsigned int16` 値を `int32`としてスタックに間接的に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2814">The `ldind.u2` instruction indirectly loads an `unsigned int16` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="e5fd8-2815">`ldind` のすべての手順は、対応する組み込み値クラスを指定する <xref:System.Reflection.Emit.OpCodes.Ldobj> 命令のショートカットです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2815">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="e5fd8-2816">4バイト未満の整数値は、評価スタックに読み込まれるときに (`native int`ではなく) `int32` に拡張されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2816">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="e5fd8-2817">浮動小数点値は、評価スタックに読み込まれるときに `F` 型に変換されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2817">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2818">Microsoft 中間言語 (MSIL) が正しく記述されていると、ポインターの型と一貫性のある方法で `ldind` 命令が使用されるようになります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2818">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="e5fd8-2819">最初にスタックにプッシュされたアドレスは、コンピューター上のオブジェクトの自然サイズに合わせる必要があります。または、<xref:System.NullReferenceException> が発生する可能性があります (「<xref:System.Reflection.Emit.OpCodes.Unaligned>」を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2819">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="e5fd8-2820">アドレスを返すすべての MSIL 命令 (<xref:System.Reflection.Emit.OpCodes.Ldloca> や <xref:System.Reflection.Emit.OpCodes.Ldarga>など) の結果は安全にアラインされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2820">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="e5fd8-2821">1バイトを超えるデータ型の場合、バイトの順序付けはターゲット CPU に依存します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2821">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="e5fd8-2822">バイト順に依存するコードは、すべてのプラットフォームで実行されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2822">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="e5fd8-2823">無効なアドレスが検出された場合、<xref:System.NullReferenceException> がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2823"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="e5fd8-2824">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldind.u2` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2824">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.u2` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_U4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_U4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_U4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2825"><see langword="unsigned int32" /> 型の値を <see langword="int32" /> として評価スタックに間接的に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2825">Loads a value of type <see langword="unsigned int32" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2826">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2826">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2827">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2827">Format</span></span>|<span data-ttu-id="e5fd8-2828">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2828">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2829">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2829">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2830">4B</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2830">4B</span></span>|<span data-ttu-id="e5fd8-2831">ldind.u4</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2831">ldind.u4</span></span>|<span data-ttu-id="e5fd8-2832">アドレス `addr` の `unsigned int32` 値を `int32`としてスタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2832">Loads the `unsigned int32` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="e5fd8-2833">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2833">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2834">アドレスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2834">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-2835">アドレスはスタックからポップされます。アドレスにある値がフェッチされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2835">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="e5fd8-2836">フェッチされた値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2836">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2837">`ldind.u4` 命令は、指定されたアドレス (型 `native int`、`&`、または \*) からの `unsigned int32` 値を `int32`としてスタックに間接的に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2837">The `ldind.u4` instruction indirectly loads an `unsigned int32` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="e5fd8-2838">`ldind` のすべての手順は、対応する組み込み値クラスを指定する <xref:System.Reflection.Emit.OpCodes.Ldobj> 命令のショートカットです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2838">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="e5fd8-2839">4バイト未満の整数値は、評価スタックに読み込まれるときに (`native int`ではなく) `int32` に拡張されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2839">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="e5fd8-2840">浮動小数点値は、評価スタックに読み込まれるときに `F` 型に変換されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2840">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2841">Microsoft 中間言語 (MSIL) が正しく記述されていると、ポインターの型と一貫性のある方法で `ldind` 命令が使用されるようになります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2841">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="e5fd8-2842">最初にスタックにプッシュされたアドレスは、コンピューター上のオブジェクトの自然サイズに合わせる必要があります。または、<xref:System.NullReferenceException> が発生する可能性があります (「<xref:System.Reflection.Emit.OpCodes.Unaligned>」を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2842">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="e5fd8-2843">アドレスを返すすべての MSIL 命令 (<xref:System.Reflection.Emit.OpCodes.Ldloca> や <xref:System.Reflection.Emit.OpCodes.Ldarga>など) の結果は安全にアラインされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2843">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="e5fd8-2844">1バイトを超えるデータ型の場合、バイトの順序付けはターゲット CPU に依存します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2844">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="e5fd8-2845">バイト順に依存するコードは、すべてのプラットフォームで実行されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2845">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="e5fd8-2846">無効なアドレスが検出された場合、<xref:System.NullReferenceException> がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2846"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="e5fd8-2847">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldind.u4` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2847">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.u4` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldlen">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldlen;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldlen" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldlen" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldlen As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldlen;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldlen : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldlen" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2848">インデックス番号が 0 から始まる 1 次元配列の要素数を評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2848">Pushes the number of elements of a zero-based, one-dimensional array onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2849">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2849">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2850">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2850">Format</span></span>|<span data-ttu-id="e5fd8-2851">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2851">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2852">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2852">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2853">8E</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2853">8E</span></span>|<span data-ttu-id="e5fd8-2854">ldlen</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2854">ldlen</span></span>|<span data-ttu-id="e5fd8-2855">配列の長さ (型 `natural unsigned int`) をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2855">Pushes the length (of type `natural unsigned int`) of an array on the stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-2856">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2856">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2857">配列へのオブジェクト参照がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2857">An object reference to an array is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-2858">配列参照がスタックからポップされ、長さが計算されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2858">The array reference is popped from the stack and the length is computed.</span></span>  
  
3.  <span data-ttu-id="e5fd8-2859">長さはスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2859">The length is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2860">配列はオブジェクトであり、そのため `O`型の値によって表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2860">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="e5fd8-2861">長さは `natural unsigned int`として返されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2861">The length is returned as a `natural unsigned int`.</span></span>  
  
 <span data-ttu-id="e5fd8-2862">配列参照が null 参照の場合、<xref:System.NullReferenceException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2862"><xref:System.NullReferenceException> is thrown if the array reference is a null reference.</span></span>  
  
 <span data-ttu-id="e5fd8-2863">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldlen` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2863">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldlen` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2864">特定のインデックスのローカル変数を評価スタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2864">Loads the local variable at a specific index onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2865">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2865">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2866">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2866">Format</span></span>|<span data-ttu-id="e5fd8-2867">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2867">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2868">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2868">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2869">FE 0C < `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-2869">FE 0C < `unsigned int16` ></span></span>|<span data-ttu-id="e5fd8-2870">ldloc `index`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2870">ldloc `index`</span></span>|<span data-ttu-id="e5fd8-2871">インデックス `index` のローカル変数をスタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2871">Loads the local variable at index `index` onto stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-2872">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2872">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2873">指定したインデックス位置にあるローカル変数の値がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2873">The local variable value at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2874">`ldloc` 命令は、渡されたインデックスにあるローカル変数番号の内容を評価スタックにプッシュします。この場合、ローカル変数には0以降の番号が付けられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2874">The `ldloc` instruction pushes the contents of the local variable number at the passed index onto the evaluation stack, where the local variables are numbered 0 onwards.</span></span> <span data-ttu-id="e5fd8-2875">ローカル変数は、メソッドの initialize フラグが true の場合にのみ、メソッドに入る前に0に初期化されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2875">Local variables are initialized to 0 before entering the method only if the initialize flag on the method is true.</span></span> <span data-ttu-id="e5fd8-2876">65535 (2 ^ 16-1) ローカル変数を使用できます (0 ~ 65534)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2876">There are 65,535 (2^16-1) local variables possible (0-65,534).</span></span> <span data-ttu-id="e5fd8-2877">インデックス65535は有効ではありません。実装では、2バイトの整数を使用して、ローカルのインデックスと、特定のメソッドのローカルの合計数が追跡されるためです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2877">Index 65,535 is not valid since likely implementations will use a 2-byte integer to track both a local's index, along with the total number of locals for a given method.</span></span> <span data-ttu-id="e5fd8-2878">65535のインデックスが有効になっている場合は、このようなメソッドでローカルの数を追跡するために、より広い整数が必要になります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2878">If an index of 65535 had been made valid, it would require a wider integer to track the number of locals in such a method.</span></span>  
  
 <span data-ttu-id="e5fd8-2879">`ldloc.0`、`ldloc.1`、`ldloc.2`、および `ldloc.3` の各手順では、最初の4つのローカル変数にアクセスするための効率的なエンコードが提供されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2879">The `ldloc.0`, `ldloc.1`, `ldloc.2`, and `ldloc.3` instructions provide an efficient encoding for accessing the first four local variables.</span></span>  
  
 <span data-ttu-id="e5fd8-2880">値の型は、メソッドヘッダーで指定されているローカル変数の型と同じです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2880">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="e5fd8-2881">「パーティション I」を参照してください。4バイトより小さいローカル変数は、スタックに読み込まれるときに `int32` 型に展開されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2881">See Partition I. Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="e5fd8-2882">浮動小数点値は、ネイティブサイズ (型 `F`) に展開されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2882">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="e5fd8-2883">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldloc` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2883">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `ldloc` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.LocalBuilder%29?displayProperty=nameWithType>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Int16%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_0;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_0 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2884">インデックス 0 のローカル変数を評価スタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2884">Loads the local variable at index 0 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2885">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2885">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2886">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2886">Format</span></span>|<span data-ttu-id="e5fd8-2887">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2887">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2888">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2888">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2889">06</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2889">06</span></span>|<span data-ttu-id="e5fd8-2890">ldloc.0</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2890">ldloc.0</span></span>|<span data-ttu-id="e5fd8-2891">インデックス 0 のローカル変数を評価スタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2891">Loads the local variable at index 0 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-2892">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2892">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2893">インデックス0のローカル変数値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2893">The local variable value at the index 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2894">`ldloc.0` は、インデックス0のローカル変数へのアクセスを許可する <xref:System.Reflection.Emit.OpCodes.Ldloc>のための、特に効率的なエンコードです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2894">`ldloc.0` is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 0.</span></span>  
  
 <span data-ttu-id="e5fd8-2895">値の型は、メソッドヘッダーで指定されているローカル変数の型と同じです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2895">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="e5fd8-2896">長さが4バイトより小さいローカル変数は、スタックに読み込まれるときに `int32` 型に拡張されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2896">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="e5fd8-2897">浮動小数点値は、ネイティブサイズ (型 `F`) に展開されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2897">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="e5fd8-2898">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldloc.0` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2898">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.0` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2899">インデックス 1 のローカル変数を評価スタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2899">Loads the local variable at index 1 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2900">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2900">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2901">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2901">Format</span></span>|<span data-ttu-id="e5fd8-2902">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2902">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2903">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2903">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2904">07</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2904">07</span></span>|<span data-ttu-id="e5fd8-2905">ldloc</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2905">ldloc.1</span></span>|<span data-ttu-id="e5fd8-2906">インデックス 1 のローカル変数を評価スタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2906">Loads the local variable at index 1 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-2907">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2907">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2908">インデックス1のローカル変数値がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2908">The local variable value at the index 1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2909">`ldloc.1` は、インデックス1のローカル変数へのアクセスを許可する <xref:System.Reflection.Emit.OpCodes.Ldloc>に特に効率的なエンコードです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2909">`ldloc.1` is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 1.</span></span>  
  
 <span data-ttu-id="e5fd8-2910">値の型は、メソッドヘッダーで指定されているローカル変数の型と同じです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2910">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="e5fd8-2911">長さが4バイトより小さいローカル変数は、スタックに読み込まれるときに `int32` 型に拡張されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2911">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="e5fd8-2912">浮動小数点値は、ネイティブサイズ (型 `F`) に展開されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2912">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="e5fd8-2913">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldloc.1` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2913">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.1` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2914">インデックス 2 のローカル変数を評価スタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2914">Loads the local variable at index 2 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2915">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2915">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2916">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2916">Format</span></span>|<span data-ttu-id="e5fd8-2917">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2917">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2918">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2918">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2919">08</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2919">08</span></span>|<span data-ttu-id="e5fd8-2920">ldloc</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2920">ldloc.2</span></span>|<span data-ttu-id="e5fd8-2921">インデックス 2 のローカル変数を評価スタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2921">Loads the local variable at index 2 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-2922">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2922">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2923">インデックス2のローカル変数値がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2923">The local variable value at the index 2 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2924">`ldloc.2` は、インデックス2でローカル変数へのアクセスを許可する <xref:System.Reflection.Emit.OpCodes.Ldloc>のために特に効率的なエンコードです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2924">`ldloc.2` is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 2.</span></span>  
  
 <span data-ttu-id="e5fd8-2925">値の型は、メソッドヘッダーで指定されているローカル変数の型と同じです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2925">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="e5fd8-2926">長さが4バイトより小さいローカル変数は、スタックに読み込まれるときに `int32` 型に拡張されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2926">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="e5fd8-2927">浮動小数点値は、ネイティブサイズ (型 `F`) に展開されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2927">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="e5fd8-2928">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldloc.2` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2928">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.2` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2929">インデックス 3 のローカル変数を評価スタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2929">Loads the local variable at index 3 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2930">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2930">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2931">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2931">Format</span></span>|<span data-ttu-id="e5fd8-2932">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2932">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2933">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2933">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2934">09</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2934">09</span></span>|<span data-ttu-id="e5fd8-2935">ldloc</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2935">ldloc.3</span></span>|<span data-ttu-id="e5fd8-2936">インデックス 3 のローカル変数を評価スタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2936">Loads the local variable at index 3 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-2937">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2937">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2938">インデックス3のローカル変数値がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2938">The local variable value at the index 3 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2939">`ldloc.3` は、インデックス3でローカル変数へのアクセスを許可する <xref:System.Reflection.Emit.OpCodes.Ldloc>のために特に効率的なエンコードです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2939">`ldloc.3` is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 3.</span></span>  
  
 <span data-ttu-id="e5fd8-2940">値の型は、メソッドヘッダーで指定されているローカル変数の型と同じです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2940">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="e5fd8-2941">長さが4バイトより小さいローカル変数は、スタックに読み込まれるときに `int32` 型に拡張されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2941">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="e5fd8-2942">浮動小数点値は、ネイティブサイズ (型 `F`) に展開されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2942">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="e5fd8-2943">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldloc.3` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2943">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.3` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2944">特定のインデックスのローカル変数を評価スタックに読み込みます (短い形式)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2944">Loads the local variable at a specific index onto the evaluation stack, short form.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2945">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2945">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2946">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2946">Format</span></span>|<span data-ttu-id="e5fd8-2947">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2947">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2948">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2948">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2949">11 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-2949">11 < `unsigned int8` ></span></span>|<span data-ttu-id="e5fd8-2950">ldloc `index`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2950">ldloc.s `index`</span></span>|<span data-ttu-id="e5fd8-2951">インデックス `index` のローカル変数をスタック (短い形式) に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2951">Loads the local variable at index `index` onto stack, short form.</span></span>|  
  
 <span data-ttu-id="e5fd8-2952">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2952">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2953">指定したインデックス位置にあるローカル変数の値がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2953">The local variable value at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2954">`ldloc.s` 命令は、渡されたインデックスにあるローカル変数番号の内容を評価スタックにプッシュします。この場合、ローカル変数には0以降の番号が付けられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2954">The `ldloc.s` instruction pushes the contents of the local variable number at the passed index onto the evaluation stack, where the local variables are numbered 0 onwards.</span></span> <span data-ttu-id="e5fd8-2955">メソッドの initialize フラグが true の場合は、メソッドに入る前にローカル変数が0に初期化されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2955">Local variables are initialized to 0 before entering the method if the initialize flag on the method is true.</span></span> <span data-ttu-id="e5fd8-2956">短い形式では、256 (2 ^ 8) のローカル変数 (0-255) が使用できます。 `ldloc`よりも効率的なエンコードです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2956">There are 256 (2^8) local variables possible (0-255) in the short form, which is a more efficient encoding than `ldloc`.</span></span>  
  
 <span data-ttu-id="e5fd8-2957">値の型は、メソッドヘッダーで指定されているローカル変数の型と同じです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2957">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="e5fd8-2958">「パーティション I」を参照してください。4バイトより小さいローカル変数は、スタックに読み込まれるときに `int32` 型に展開されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2958">See Partition I. Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="e5fd8-2959">浮動小数点値は、ネイティブサイズ (型 `F`) に展開されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2959">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="e5fd8-2960">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldloc.s` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2960">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `ldloc.s` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.LocalBuilder%29?displayProperty=nameWithType>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Byte%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloca">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloca;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloca" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloca" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloca As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloca;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloca : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloca" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2961">特定のインデックスのローカル変数のアドレスを評価スタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2961">Loads the address of the local variable at a specific index onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2962">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2962">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2963">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2963">Format</span></span>|<span data-ttu-id="e5fd8-2964">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2964">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2965">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2965">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2966">FE OD < `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-2966">FE OD < `unsigned int16` ></span></span>|<span data-ttu-id="e5fd8-2967">ldloca `index`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2967">ldloca `index`</span></span>|<span data-ttu-id="e5fd8-2968">`index` のローカル変数のアドレスを評価スタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2968">Loads the address of the local variable at `index` onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-2969">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2969">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2970">指定したインデックス位置にあるローカル変数に格納されているアドレスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2970">The address stored in the local variable at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2971">`ldloca` 命令は、渡されたインデックス位置にあるローカル変数番号のアドレスをスタックにプッシュします。ローカル変数には、0以降の番号が付けられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2971">The `ldloca` instruction pushes the address of the local variable number at the passed index onto the stack, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="e5fd8-2972">スタックにプッシュされた値は、<xref:System.Reflection.Emit.OpCodes.Ldind_I> や <xref:System.Reflection.Emit.OpCodes.Stind_I>などの命令で使用できるように、既に正しく調整されています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2972">The value pushed on the stack is already aligned correctly for use with instructions like <xref:System.Reflection.Emit.OpCodes.Ldind_I> and <xref:System.Reflection.Emit.OpCodes.Stind_I>.</span></span> <span data-ttu-id="e5fd8-2973">結果は、遷移ポインター (型 `*`) になります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2973">The result is a transient pointer (type `*`).</span></span>  
  
 <span data-ttu-id="e5fd8-2974">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldloca` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2974">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloca` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Int16%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloca_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloca_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloca_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloca_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloca_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloca_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloca_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloca_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2975">特定のインデックスのローカル変数のアドレスを評価スタックに読み込みます (短い形式)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2975">Loads the address of the local variable at a specific index onto the evaluation stack, short form.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2976">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2976">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2977">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2977">Format</span></span>|<span data-ttu-id="e5fd8-2978">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2978">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2979">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2979">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2980">12 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-2980">12 < `unsigned int8` ></span></span>|<span data-ttu-id="e5fd8-2981">ldloca `index`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2981">ldloca.s `index`</span></span>|<span data-ttu-id="e5fd8-2982">`index` のローカル変数のアドレスを評価スタック (短い形式) に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2982">Loads the address of the local variable at `index` onto the evaluation stack, short form.</span></span>|  
  
 <span data-ttu-id="e5fd8-2983">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2983">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2984">指定したインデックス位置にあるローカル変数に格納されているアドレスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2984">The address stored in the local variable at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-2985">`ldloca.s` 命令は、渡されたインデックス位置にあるローカル変数番号のアドレスをスタックにプッシュします。ローカル変数には、0以降の番号が付けられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2985">The `ldloca.s` instruction pushes the address of the local variable number at the passed index onto the stack, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="e5fd8-2986">スタックにプッシュされた値は、<xref:System.Reflection.Emit.OpCodes.Ldind_I> や <xref:System.Reflection.Emit.OpCodes.Stind_I>などの命令で使用できるように、既に正しく調整されています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2986">The value pushed on the stack is already aligned correctly for use with instructions like <xref:System.Reflection.Emit.OpCodes.Ldind_I> and <xref:System.Reflection.Emit.OpCodes.Stind_I>.</span></span> <span data-ttu-id="e5fd8-2987">結果は、遷移ポインター (型 `*`) になります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2987">The result is a transient pointer (type `*`).</span></span>  
  
 <span data-ttu-id="e5fd8-2988">`ldloca.s` 命令は、ローカル変数 0 ~ 255 で使用するための効率的なエンコードを提供します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2988">The `ldloca.s` instruction provides an efficient encoding for use with the local variables 0 through 255.</span></span>  
  
 <span data-ttu-id="e5fd8-2989">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldloca.s` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2989">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloca.s` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Byte%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldnull">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldnull;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldnull" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldnull" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldnull As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldnull;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldnull : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldnull" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-2990">null 参照 (<see langword="O" /> 型) を評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2990">Pushes a null reference (type <see langword="O" />) onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-2991">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2991">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-2992">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2992">Format</span></span>|<span data-ttu-id="e5fd8-2993">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2993">Assembly Format</span></span>|<span data-ttu-id="e5fd8-2994">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2994">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-2995">14</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2995">14</span></span>|<span data-ttu-id="e5fd8-2996">ldnull</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2996">ldnull</span></span>|<span data-ttu-id="e5fd8-2997">null 参照をスタックにプッシュします</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2997">push a null reference onto the stack</span></span>|  
  
 <span data-ttu-id="e5fd8-2998">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2998">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-2999">Null オブジェクト参照がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-2999">A null object reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-3000">`ldnull` は、null 参照 (型 `O`) をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3000">`ldnull` pushes a null reference (type `O`) on the stack.</span></span> <span data-ttu-id="e5fd8-3001">これは、データを格納する前に、または非推奨になったときに、場所を初期化するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3001">This is used to initialize locations before they are populated with data, or when they become deprecated.</span></span>  
  
 <span data-ttu-id="e5fd8-3002">`ldnull` は、サイズに依存しない null 参照を提供します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3002">`ldnull` provides a null reference that is size-independent.</span></span>  
  
 <span data-ttu-id="e5fd8-3003">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldnull` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3003">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldnull` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3004">アドレスが指す値型オブジェクトを評価スタックの一番上にコピーします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3004">Copies the value type object pointed to by an address to the top of the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3005">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3005">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3006">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3006">Format</span></span>|<span data-ttu-id="e5fd8-3007">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3007">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3008">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3008">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3009">71 < `T` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-3009">71 < `T` ></span></span>|<span data-ttu-id="e5fd8-3010">ldobj `class`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3010">ldobj `class`</span></span>|<span data-ttu-id="e5fd8-3011">`class` 値の型のインスタンスをスタックにコピーします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3011">Copy instance of value type `class` to the stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-3012">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3012">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3013">値型のオブジェクトのアドレスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3013">The address of a value type object is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3014">アドレスはスタックからポップされ、その特定のアドレスのインスタンスが検索されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3014">The address is popped from the stack and the instance at that particular address is looked up.</span></span>  
  
3.  <span data-ttu-id="e5fd8-3015">そのアドレスに格納されているオブジェクトの値がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3015">The value of the object stored at that address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-3016">`ldobj` 命令は、値型をパラメーターとして渡すために使用されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3016">The `ldobj` instruction is used to pass a value type as a parameter.</span></span>  
  
 <span data-ttu-id="e5fd8-3017">`ldobj` 命令は、`addrOfValObj` (型 `&`、`*`、または `native int`) が指す値をスタックの一番上にコピーします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3017">The `ldobj` instruction copies the value pointed to by `addrOfValObj` (of type `&`, `*`, or `native int`) to the top of the stack.</span></span> <span data-ttu-id="e5fd8-3018">コピーされるバイト数は、クラスのサイズ (`class` パラメーターで指定) によって異なります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3018">The number of bytes copied depends on the size of the class (as specified by the `class` parameter).</span></span> <span data-ttu-id="e5fd8-3019">`class` パラメーターは、値の型を表すメタデータトークンです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3019">The `class` parameter is a metadata token representing the value type.</span></span>  
  
 <span data-ttu-id="e5fd8-3020">`ldobj` 命令の操作は、直前の <xref:System.Reflection.Emit.OpCodes.Volatile> または <xref:System.Reflection.Emit.OpCodes.Unaligned> プレフィックス命令によって変更できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3020">The operation of the `ldobj` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-3021">クラスが見つからない場合、<xref:System.TypeLoadException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3021"><xref:System.TypeLoadException> is thrown if class cannot be found.</span></span> <span data-ttu-id="e5fd8-3022">これは通常、Microsoft 中間言語 (MSIL) 命令が実行時ではなくネイティブコードに変換された場合に検出されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3022">This is typically detected when the Microsoft Intermediate Language (MSIL) instruction is converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="e5fd8-3023">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldobj` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3023">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldobj` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Type%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldsfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldsfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldsfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldsfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldsfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldsfld;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldsfld : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldsfld" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3024">静的フィールドの値を評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3024">Pushes the value of a static field onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3025">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3025">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3026">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3026">Format</span></span>|<span data-ttu-id="e5fd8-3027">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3027">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3028">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3028">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3029">7E < `T` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-3029">7E < `T` ></span></span>|<span data-ttu-id="e5fd8-3030">ldsfld `field`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3030">ldsfld `field`</span></span>|<span data-ttu-id="e5fd8-3031">スタックに `field` の値をプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3031">Push the value of `field` on the stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-3032">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3032">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3033">特定のフィールドの値がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3033">The value of the specific field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-3034">`ldsfld` 命令は、静的 (クラスのすべてのインスタンスで共有される) フィールドの値をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3034">The `ldsfld` instruction pushes the value of a static (shared among all instances of a class) field on the stack.</span></span> <span data-ttu-id="e5fd8-3035">戻り値の型は、渡されたメタデータトークン `field`に関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3035">The return type is that associated with the passed metadata token `field`.</span></span>  
  
 <span data-ttu-id="e5fd8-3036">`ldsfld` 命令は、<xref:System.Reflection.Emit.OpCodes.Volatile> プレフィックスを持つことができます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3036">The `ldsfld` instruction can have a <xref:System.Reflection.Emit.OpCodes.Volatile> prefix.</span></span>  
  
 <span data-ttu-id="e5fd8-3037">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldsfld` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3037">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldsfld` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.FieldInfo%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldsflda">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldsflda;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldsflda" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldsflda" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldsflda As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldsflda;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldsflda : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldsflda" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3038">静的フィールドのアドレスを評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3038">Pushes the address of a static field onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3039">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3039">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3040">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3040">Format</span></span>|<span data-ttu-id="e5fd8-3041">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3041">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3042">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3042">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3043">7F < `T` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-3043">7F < `T` ></span></span>|<span data-ttu-id="e5fd8-3044">ldsflda `field`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3044">ldsflda `field`</span></span>|<span data-ttu-id="e5fd8-3045">スタックに `field` のアドレスをプッシュします</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3045">Push the address of `field` on the stack</span></span>|  
  
 <span data-ttu-id="e5fd8-3046">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3046">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3047">特定のフィールドのアドレスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3047">The address of a specific field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-3048">`ldsflda` 命令は、スタック上の静的 (クラスのすべてのインスタンス間で共有される) フィールドのアドレスをプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3048">The `ldsflda` instruction pushes the address of a static (shared among all instances of a class) field on the stack.</span></span> <span data-ttu-id="e5fd8-3049">メタデータトークン `field` が、メモリが管理されている型を参照している場合は、このアドレスを transient ポインター (型 `*`) として表すことができます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3049">The address may be represented as a transient pointer (type `*`) if the metadata token `field` refers to a type whose memory is managed.</span></span> <span data-ttu-id="e5fd8-3050">それ以外の場合は、アンマネージポインター (型 `native int`) に対応します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3050">Otherwise, it corresponds to an unmanaged pointer (type `native int`).</span></span> <span data-ttu-id="e5fd8-3051">`field` は、割り当てられた相対仮想アドレス (それを含んでいる PE ファイルがメモリに読み込まれるベースアドレスからのフィールドのオフセット) を持つ静的グローバルであり、メモリが管理されていない場合があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3051">Note that `field` may be a static global with an assigned relative virtual address (the offset of the field from the base address at which its containing PE file is loaded into memory) where the memory is unmanaged.</span></span>  
  
 <span data-ttu-id="e5fd8-3052">`ldsflda` 命令は、<xref:System.Reflection.Emit.OpCodes.Volatile> プレフィックスを持つことができます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3052">The `ldsflda` instruction can have a <xref:System.Reflection.Emit.OpCodes.Volatile> prefix.</span></span>  
  
 <span data-ttu-id="e5fd8-3053">メタデータ内にフィールドが見つからない場合、<xref:System.MissingFieldException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3053"><xref:System.MissingFieldException> is thrown if field is not found in the metadata.</span></span> <span data-ttu-id="e5fd8-3054">これは通常、Microsoft 中間言語 (MSIL) 命令が実行時ではなくネイティブコードに変換された場合にチェックされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3054">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at runtime.</span></span>  
  
 <span data-ttu-id="e5fd8-3055">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldsflda` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3055">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldsflda` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.FieldInfo%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldstr">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldstr;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldstr" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldstr" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldstr As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldstr;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldstr : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldstr" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3056">メタデータに格納されているリテラル文字列への新しいオブジェクト参照をプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3056">Pushes a new object reference to a string literal stored in the metadata.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3057">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3057">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3058">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3058">Format</span></span>|<span data-ttu-id="e5fd8-3059">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3059">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3060">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3060">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3061">72 < `T` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-3061">72 < `T` ></span></span>|<span data-ttu-id="e5fd8-3062">ldstr `mdToken`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3062">ldstr `mdToken`</span></span>|<span data-ttu-id="e5fd8-3063">メタデータ文字列トークン `mdToken`の文字列オブジェクトをプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3063">Pushes a string object for the metadata string token `mdToken`.</span></span>|  
  
 <span data-ttu-id="e5fd8-3064">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3064">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3065">文字列へのオブジェクト参照がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3065">An object reference to a string is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-3066">`ldstr` 命令は、オブジェクト参照 (型 `O`) を、メタデータに格納されている特定の文字列リテラルを表す新しい文字列オブジェクトにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3066">The `ldstr` instruction pushes an object reference (type `O`) to a new string object representing the specific string literal stored in the metadata.</span></span> <span data-ttu-id="e5fd8-3067">`ldstr` 命令は、必要な量のメモリを割り当て、ファイルで使用されている形式の文字列リテラルを実行時に必要な文字列形式に変換するために必要な任意の形式変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3067">The `ldstr` instruction allocates the requisite amount of memory and performs any format conversion required to convert the string literal from the form used in the file to the string format required at runtime.</span></span>  
  
 <span data-ttu-id="e5fd8-3068">共通言語基盤 (CLI) では、2つの `ldstr` 命令の結果、同じ文字シーケンスを持つ2つのメタデータトークンを参照すると、正確に同じ文字列オブジェクト ("文字列インターン" と呼ばれるプロセス) が返されることが保証されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3068">The Common Language Infrastructure (CLI) guarantees that the result of two `ldstr` instructions referring to two metadata tokens that have the same sequence of characters return precisely the same string object (a process known as "string interning").</span></span>  
  
 <span data-ttu-id="e5fd8-3069">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldstr` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3069">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldstr` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.String%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldtoken">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldtoken;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldtoken" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldtoken" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldtoken As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldtoken;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldtoken : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldtoken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3070">メタデータ トークンをそのランタイム表現に変換し、評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3070">Converts a metadata token to its runtime representation, pushing it onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3071">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3071">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3072">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3072">Format</span></span>|<span data-ttu-id="e5fd8-3073">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3073">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3074">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3074">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3075">D0 < `T` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-3075">D0 < `T` ></span></span>|<span data-ttu-id="e5fd8-3076">ldtoken `token`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3076">ldtoken `token`</span></span>|<span data-ttu-id="e5fd8-3077">メタデータトークンをそのランタイム表現に変換します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3077">Converts a metadata token to its runtime representation.</span></span>|  
  
 <span data-ttu-id="e5fd8-3078">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3078">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3079">渡されたトークンは `RuntimeHandle` に変換され、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3079">The passed token is converted to a `RuntimeHandle` and pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-3080">`ldtoken` 命令は、指定されたメタデータトークンの `RuntimeHandle` をプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3080">The `ldtoken` instruction pushes a `RuntimeHandle` for the specified metadata token.</span></span> <span data-ttu-id="e5fd8-3081">`RuntimeHandle` には、`fieldref/fielddef`、`methodref/methoddef`、または `typeref/typedef`を指定できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3081">A `RuntimeHandle` can be a `fieldref/fielddef`, a `methodref/methoddef`, or a `typeref/typedef`.</span></span>  
  
 <span data-ttu-id="e5fd8-3082">スタックにプッシュされた値は、システムクラスライブラリの `Reflection` メソッドの呼び出しで使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3082">The value pushed on the stack can be used in calls to `Reflection` methods in the system class library.</span></span>  
  
 <span data-ttu-id="e5fd8-3083">ランタイムハンドルの詳細については、<xref:System.RuntimeFieldHandle>、<xref:System.RuntimeTypeHandle>、および <xref:System.RuntimeMethodHandle>の各クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3083">For information on runtime handles, see the following classes: <xref:System.RuntimeFieldHandle>, <xref:System.RuntimeTypeHandle>, and <xref:System.RuntimeMethodHandle>.</span></span>  
  
 <span data-ttu-id="e5fd8-3084">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldtoken` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3084">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `ldtoken` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.MethodInfo%29?displayProperty=nameWithType>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.FieldInfo%29?displayProperty=nameWithType>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Type%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldvirtftn">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldvirtftn;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldvirtftn" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldvirtftn" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldvirtftn As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldvirtftn;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldvirtftn : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldvirtftn" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3085">指定したオブジェクトに関連付けられた特定の仮想メソッドを実装しているネイティブ コードへのアンマネージ ポインター (<see langword="native int" /> 型) を評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3085">Pushes an unmanaged pointer (type <see langword="native int" />) to the native code implementing a particular virtual method associated with a specified object onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3086">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3086">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3087">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3087">Format</span></span>|<span data-ttu-id="e5fd8-3088">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3088">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3089">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3089">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3090">FE 07 < `T` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-3090">FE 07 < `T` ></span></span>|<span data-ttu-id="e5fd8-3091">ldvirtftn `method`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3091">ldvirtftn `method`</span></span>|<span data-ttu-id="e5fd8-3092">オブジェクトの仮想メソッド `method` へのポインターをスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3092">Pushes the pointer to an object's virtual method `method` on the stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-3093">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3093">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3094">オブジェクト参照がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3094">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3095">オブジェクト参照がスタックからポップされ、(メタデータトークン `method`によって指定された) メソッドへのエントリポイントのアドレスが検索されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3095">The object reference is popped from the stack and the address of the entry point to the method (as specified by the metadata token `method`) is looked up.</span></span>  
  
3.  <span data-ttu-id="e5fd8-3096">`method` へのポインターがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3096">The pointer to `method` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-3097">`ldvirtftn` 命令によってスタックにプッシュされたアンマネージポインターは、マネージメソッド (またはマネージコードからアンマネージコードに遷移するスタブ) を参照する場合、<xref:System.Reflection.Emit.OpCodes.Calli> 命令を使用して呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3097">The resulting unmanaged pointer pushed onto the stack by the `ldvirtftn` instruction can be called using the <xref:System.Reflection.Emit.OpCodes.Calli> instruction if it references a managed method (or a stub that transitions from managed to unmanaged code).</span></span>  
  
 <span data-ttu-id="e5fd8-3098">アンマネージポインターは、CLR 呼び出し規約を使用してネイティブコードを指します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3098">The unmanaged pointer points to native code using the CLR calling convention.</span></span> <span data-ttu-id="e5fd8-3099">このメソッドポインターは、アンマネージネイティブコードにコールバックルーチンとして渡すことはできません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3099">This method pointer should not be passed to unmanaged native code as a callback routine.</span></span>  
  
 <span data-ttu-id="e5fd8-3100">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ldvirtftn` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3100">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldvirtftn` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.MethodInfo%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Leave">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Leave;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Leave" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Leave" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Leave As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Leave;" />
      <MemberSignature Language="F#" Value=" staticval mutable Leave : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Leave" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3101">コードの保護領域を終了し、制御を特定のターゲット命令に無条件で転送します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3101">Exits a protected region of code, unconditionally transferring control to a specific target instruction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3102">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3102">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3103">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3103">Format</span></span>|<span data-ttu-id="e5fd8-3104">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3104">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3105">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3105">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3106">DD < `int32` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-3106">DD < `int32` ></span></span>|<span data-ttu-id="e5fd8-3107">`target` のままにする</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3107">leave `target`</span></span>|<span data-ttu-id="e5fd8-3108">コードの保護された領域を終了します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3108">Exits a protected region of code.</span></span>|  
  
 <span data-ttu-id="e5fd8-3109">この命令にはスタック移行動作が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3109">There is no stack transition behavior specified for this instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-3110">`leave` 命令は無条件で特定のターゲット命令に制御を転送します。これは、現在の命令の後に続く命令の先頭から4バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3110">The `leave` instruction unconditionally transfers control to the specific target instruction, represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-3111">`leave` 命令は `br` 命令に似ていますが、`try`、`filter`、または `catch` ブロックを終了するために使用できますが、通常の分岐命令は、そのようなブロック内でのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3111">The `leave` instruction is similar to the `br` instruction, but it can be used to exit a `try`, `filter`, or `catch` block whereas the ordinary branch instructions can only be used in such a block to transfer control within it.</span></span> <span data-ttu-id="e5fd8-3112">`leave` 命令によって、評価スタックが空になり、適切な周辺の `finally` ブロックが実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3112">The `leave` instruction empties the evaluation stack and ensures that the appropriate surrounding `finally` blocks are executed.</span></span>  
  
 <span data-ttu-id="e5fd8-3113">`leave` 命令を使用して `finally` ブロックを終了することはできません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3113">You cannot use a `leave` instruction to exit a `finally` block.</span></span> <span data-ttu-id="e5fd8-3114">例外ハンドラーのコード生成を簡単にするために、catch ブロック内から `leave` 命令を使用して、関連付けられている `try` ブロック内の命令に制御を移すことができます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3114">To ease code generation for exception handlers it is valid from within a catch block to use a `leave` instruction to transfer control to any instruction within the associated `try` block.</span></span>  
  
 <span data-ttu-id="e5fd8-3115">命令にプレフィックスコードが1つ以上含まれている場合は、これらのプレフィックスの最初の部分にのみ制御を転送できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3115">If an instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="e5fd8-3116">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`leave` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3116">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `leave` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.Label%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Leave_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Leave_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Leave_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Leave_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Leave_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Leave_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Leave_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Leave_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3117">コードの保護領域を終了し、制御をターゲット命令に無条件で転送します (短い形式)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3117">Exits a protected region of code, unconditionally transferring control to a target instruction (short form).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3118">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3118">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3119">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3119">Format</span></span>|<span data-ttu-id="e5fd8-3120">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3120">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3121">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3121">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3122">DE < `int8` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-3122">DE < `int8` ></span></span>|<span data-ttu-id="e5fd8-3123">`target` のままにします</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3123">leave.s `target`</span></span>|<span data-ttu-id="e5fd8-3124">コードの保護された領域 (短い形式) を終了します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3124">Exit a protected region of code, short form.</span></span>|  
  
 <span data-ttu-id="e5fd8-3125">この命令にはスタック移行動作が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3125">There is no stack transition behavior specified for this instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-3126">`leave.s` 命令は、渡されたターゲット命令に無条件で制御を転送します。これは、現在の命令の後に続く命令の先頭から1バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3126">The `leave.s` instruction unconditionally transfers control to the passed target instruction, represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-3127">`leave.s` 命令は `br` 命令に似ていますが、`try`、`filter`、または `catch` ブロックを終了するために使用できますが、通常の分岐命令は、そのようなブロック内でのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3127">The `leave.s` instruction is similar to the `br` instruction, but it can be used to exit a `try`, `filter`, or `catch` block whereas the ordinary branch instructions can only be used in such a block to transfer control within it.</span></span> <span data-ttu-id="e5fd8-3128">`leave.s` 命令によって、評価スタックが空になり、適切な周辺の `finally` ブロックが実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3128">The `leave.s` instruction empties the evaluation stack and ensures that the appropriate surrounding `finally` blocks are executed.</span></span>  
  
 <span data-ttu-id="e5fd8-3129">`leave.s` 命令を使用して `finally` ブロックを終了することはできません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3129">You cannot use a `leave.s` instruction to exit a `finally` block.</span></span> <span data-ttu-id="e5fd8-3130">例外ハンドラーのコード生成を簡単にするために、catch ブロック内から `leave.s` 命令を使用して、関連付けられている `try` ブロック内の命令に制御を移すことができます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3130">To ease code generation for exception handlers it is valid from within a catch block to use a `leave.s` instruction to transfer control to any instruction within the associated `try` block.</span></span>  
  
 <span data-ttu-id="e5fd8-3131">命令にプレフィックスコードが1つ以上含まれている場合は、これらのプレフィックスの最初の部分にのみ制御を転送できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3131">If an instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="e5fd8-3132">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`leave.s` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3132">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `leave.s` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.Label%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Localloc">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Localloc;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Localloc" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Localloc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Localloc As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Localloc;" />
      <MemberSignature Language="F#" Value=" staticval mutable Localloc : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Localloc" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3133">ローカル動的メモリ プールから特定のバイト数を割り当て、最初に割り当てたバイトのアドレス (遷移ポインター、<see langword="*" /> 型) を評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3133">Allocates a certain number of bytes from the local dynamic memory pool and pushes the address (a transient pointer, type <see langword="*" />) of the first allocated byte onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3134">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3134">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3135">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3135">Format</span></span>|<span data-ttu-id="e5fd8-3136">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3136">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3137">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3137">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3138">FE 0F</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3138">FE 0F</span></span>|<span data-ttu-id="e5fd8-3139">localloc</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3139">localloc</span></span>|<span data-ttu-id="e5fd8-3140">ローカルヒープから領域を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3140">Allocate space from the local heap.</span></span>|  
  
 <span data-ttu-id="e5fd8-3141">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3141">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3142">割り当てられるバイト数はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3142">The number of bytes to be allocated is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3143">スタックからポップされたバイト数。サイズに対応するメモリ量は、ローカルヒープから割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3143">The number of bytes is popped from the stack; an amount of memory corresponding to the size is allocated from the local heap.</span></span>  
  
3.  <span data-ttu-id="e5fd8-3144">割り当てられたメモリの最初のバイトへのポインターがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3144">A pointer to the first byte of the allocated memory is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-3145">`localloc` 命令は、ローカルの動的メモリプールから `size` (型 `natural unsigned int`) バイトを割り当て、最初に割り当てられたバイトのアドレス (遷移ポインター、型 `*`) を返します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3145">The `localloc` instruction allocates `size` (type `natural unsigned int`) bytes from the local dynamic memory pool and returns the address (a transient pointer, type `*`) of the first allocated byte.</span></span> <span data-ttu-id="e5fd8-3146">返されるメモリブロックは、メソッドの initialize フラグが `true`場合にのみ0に初期化されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3146">The block of memory returned is initialized to 0 only if the initialize flag on the method is `true`.</span></span> <span data-ttu-id="e5fd8-3147">現在のメソッドが <xref:System.Reflection.Emit.OpCodes.Ret>を実行すると、ローカルメモリプールを再利用できるようになります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3147">When the current method executes a <xref:System.Reflection.Emit.OpCodes.Ret>, the local memory pool is made available for reuse.</span></span>  
  
 <span data-ttu-id="e5fd8-3148">結果のアドレスは、`stind` 命令 (<xref:System.Reflection.Emit.OpCodes.Stind_I4>など) を使用してそこに格納し、`ldind` 命令 (<xref:System.Reflection.Emit.OpCodes.Ldind_I4>など) を使用して読み込むことができるように、配置されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3148">The resulting address is aligned so that any primitive data type can be stored there using the `stind` instructions (such as <xref:System.Reflection.Emit.OpCodes.Stind_I4>) and loaded using the `ldind` instructions (such as <xref:System.Reflection.Emit.OpCodes.Ldind_I4>).</span></span>  
  
 <span data-ttu-id="e5fd8-3149">`localloc` 命令は、`filter`、`catch`、`finally`、または `fault` ブロック内では実行できません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3149">The `localloc` instruction cannot occur within a `filter`, `catch`, `finally`, or `fault` block.</span></span>  
  
 <span data-ttu-id="e5fd8-3150"><xref:System.StackOverflowException> は、要求を処理するためのメモリが不足している場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3150"><xref:System.StackOverflowException> is thrown if there is insufficient memory to service the request.</span></span>  
  
 <span data-ttu-id="e5fd8-3151">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`localloc` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3151">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `localloc` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mkrefany">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mkrefany;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mkrefany" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mkrefany" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mkrefany As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mkrefany;" />
      <MemberSignature Language="F#" Value=" staticval mutable Mkrefany : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Mkrefany" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3152">特定の型のインスタンスへの型指定された参照を評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3152">Pushes a typed reference to an instance of a specific type onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3153">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3153">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3154">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3154">Format</span></span>|<span data-ttu-id="e5fd8-3155">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3155">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3156">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3156">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3157">C6 < `T` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-3157">C6 < `T` ></span></span>|<span data-ttu-id="e5fd8-3158">mkrefany `class`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3158">mkrefany `class`</span></span>|<span data-ttu-id="e5fd8-3159">`class` 型の型指定された参照をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3159">Pushes a typed reference of type `class` onto the stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-3160">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3160">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3161">データへのポインターがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3161">A pointer to piece of data is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3162">ポインターがポップされ、`class`型の型指定された参照に変換されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3162">The pointer is popped and converted to a typed reference of type `class`.</span></span>  
  
3.  <span data-ttu-id="e5fd8-3163">型指定された参照がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3163">The typed reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-3164">`mkrefany` 命令は、動的に型指定された参照を渡すことをサポートしています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3164">The `mkrefany` instruction supports the passing of dynamically typed references.</span></span> <span data-ttu-id="e5fd8-3165">ポインターの型は `&`、`*`、または `native int`で、データの有効なアドレスを保持している必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3165">The pointer must be of type `&`, `*`, or `native int`, and hold the valid address of a piece of data.</span></span> <span data-ttu-id="e5fd8-3166">`Class` は、ポインターによって参照されるデータの型を記述するクラストークンです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3166">`Class` is the class token describing the type of the data referenced by the pointer.</span></span> <span data-ttu-id="e5fd8-3167">`Mkrefany` は、型指定された参照をスタックにプッシュし、ポインターの不透明な記述子と `class`型を提供します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3167">`Mkrefany` pushes a typed reference on the stack, providing an opaque descriptor of the pointer and the type `class`.</span></span>  
  
 <span data-ttu-id="e5fd8-3168">型指定された参照に対して許可される有効な操作は、パラメーターとして型指定された参照を必要とするメソッドに渡すことだけです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3168">The only valid operation permitted upon a typed reference is to pass it to a method that requires a typed reference as a parameter.</span></span> <span data-ttu-id="e5fd8-3169">その後、呼び出し先は <xref:System.Reflection.Emit.OpCodes.Refanytype> と <xref:System.Reflection.Emit.OpCodes.Refanyval> 命令を使用して、それぞれ型 (クラス) とアドレスを取得できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3169">The callee can then use the <xref:System.Reflection.Emit.OpCodes.Refanytype> and <xref:System.Reflection.Emit.OpCodes.Refanyval> instructions to retrieve the type (class) and the address respectively.</span></span>  
  
 <span data-ttu-id="e5fd8-3170">`class` が見つからない場合、<xref:System.TypeLoadException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3170"><xref:System.TypeLoadException> is thrown if `class` cannot be found.</span></span> <span data-ttu-id="e5fd8-3171">これは通常、Microsoft 中間言語 (MSIL) 命令が実行時ではなくネイティブコードに変換された場合に検出されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3171">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="e5fd8-3172">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`mkrefany` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3172">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mkrefany` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Type%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mul;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mul" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mul" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mul As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mul;" />
      <MemberSignature Language="F#" Value=" staticval mutable Mul : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Mul" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3173">2 つの値を乗算し、結果を評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3173">Multiplies two values and pushes the result on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3174">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3174">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3175">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3175">Format</span></span>|<span data-ttu-id="e5fd8-3176">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3176">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3177">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3177">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3178">5A</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3178">5A</span></span>|<span data-ttu-id="e5fd8-3179">mul</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3179">mul</span></span>|<span data-ttu-id="e5fd8-3180">スタックの2つの値を乗算します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3180">Multiplies two values on the stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-3181">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3181">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3182">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3182">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3183">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3183">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-3184">`value2` と `value1` がスタックからポップされます。`value1` は `value2`で乗算されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3184">`value2` and `value1` are popped from the stack; `value1` is multiplied by `value2`.</span></span>  
  
4.  <span data-ttu-id="e5fd8-3185">結果がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3185">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-3186">`mul` 命令は `value2` によって `value1` を乗算し、結果をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3186">The `mul` instruction multiplies `value1` by `value2` and pushes the result on the stack.</span></span> <span data-ttu-id="e5fd8-3187">整数演算では、オーバーフロー時に上位ビットが自動的に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3187">Integer operations silently truncate the upper bits on overflow.</span></span>  
  
 <span data-ttu-id="e5fd8-3188">オーバーフロー処理を使用した整数固有の乗算演算については、「<xref:System.Reflection.Emit.OpCodes.Mul_Ovf>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3188">See <xref:System.Reflection.Emit.OpCodes.Mul_Ovf> for an integer-specific multiply operation with overflow handling.</span></span>  
  
 <span data-ttu-id="e5fd8-3189">浮動小数点型の場合は 0 \* 無限大 = NaN。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3189">For floating-point types, 0 \* infinity = NaN.</span></span>  
  
 <span data-ttu-id="e5fd8-3190">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`mul` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3190">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mul` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul_Ovf">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mul_Ovf;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mul_Ovf" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mul_Ovf" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mul_Ovf As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mul_Ovf;" />
      <MemberSignature Language="F#" Value=" staticval mutable Mul_Ovf : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Mul_Ovf" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3191">2 つの整数値を乗算し、オーバーフロー チェックを実行し、結果を評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3191">Multiplies two integer values, performs an overflow check, and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3192">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3192">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3193">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3193">Format</span></span>|<span data-ttu-id="e5fd8-3194">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3194">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3195">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3195">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3196">D8</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3196">D8</span></span>|<span data-ttu-id="e5fd8-3197">ovf</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3197">mul.ovf</span></span>|<span data-ttu-id="e5fd8-3198">オーバーフローチェックを使用して、スタック上の2つの整数値を乗算します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3198">Multiplies two integer values on the stack with an overflow check.</span></span>|  
  
 <span data-ttu-id="e5fd8-3199">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3199">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3200">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3200">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3201">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3201">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-3202">`value2` と `value1` がスタックからポップされます。`value1` には、オーバーフローチェック付きで `value2`が乗算されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3202">`value2` and `value1` are popped from the stack; `value1` is multiplied by `value2`, with an overflow check.</span></span>  
  
4.  <span data-ttu-id="e5fd8-3203">結果がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3203">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-3204">`mul.ovf` 命令は、整数 `value1` を整数 `value2` に乗算し、結果をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3204">The `mul.ovf` instruction multiplies integer `value1` by integer `value2` and pushes the result on the stack.</span></span> <span data-ttu-id="e5fd8-3205">結果が結果の型に合わない場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3205">An exception is thrown if the result will not fit in the result type.</span></span>  
  
 <span data-ttu-id="e5fd8-3206">結果を結果の型で表すことができない場合、<xref:System.OverflowException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3206"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="e5fd8-3207">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`mul.ovf` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3207">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mul.ovf` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul_Ovf_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mul_Ovf_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mul_Ovf_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mul_Ovf_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mul_Ovf_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mul_Ovf_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Mul_Ovf_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Mul_Ovf_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3208">2 つの符号なし整数値を乗算し、オーバーフロー チェックを実行し、結果を評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3208">Multiplies two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3209">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3209">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3210">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3210">Format</span></span>|<span data-ttu-id="e5fd8-3211">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3211">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3212">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3212">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3213">D9</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3213">D9</span></span>|<span data-ttu-id="e5fd8-3214">mul.ovf.un</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3214">mul.ovf.un</span></span>|<span data-ttu-id="e5fd8-3215">オーバーフローチェックを使用して、スタック上の2つの符号なしの値を乗算します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3215">Multiplies two unsigned values on the stack with an overflow check.</span></span>|  
  
 <span data-ttu-id="e5fd8-3216">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3216">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3217">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3217">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3218">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3218">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-3219">`value2` と `value1` がスタックからポップされます。`value1` には、オーバーフローチェック付きで `value2`が乗算されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3219">`value2` and `value1` are popped from the stack; `value1` is multiplied by `value2`, with an overflow check.</span></span>  
  
4.  <span data-ttu-id="e5fd8-3220">結果がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3220">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-3221">`mul.ovf.un` 命令は、符号なし整数を符号なし `value2` 整数で `value1` 乗算し、結果をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3221">The `mul.ovf.un` instruction multiplies unsigned integer `value1` by unsigned integer `value2` and pushes the result on the stack.</span></span> <span data-ttu-id="e5fd8-3222">結果が結果の型に合わない場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3222">An exception is thrown if the result will not fit in the result type.</span></span>  
  
 <span data-ttu-id="e5fd8-3223">結果を結果の型で表すことができない場合、<xref:System.OverflowException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3223"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="e5fd8-3224">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`mul.ovf.un` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3224">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mul.ovf.un` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Neg">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Neg;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Neg" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Neg" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Neg As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Neg;" />
      <MemberSignature Language="F#" Value=" staticval mutable Neg : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Neg" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3225">値を無効にし、結果を評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3225">Negates a value and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3226">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3226">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3227">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3227">Format</span></span>|<span data-ttu-id="e5fd8-3228">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3228">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3229">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3229">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3230">65</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3230">65</span></span>|<span data-ttu-id="e5fd8-3231">neg</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3231">neg</span></span>|<span data-ttu-id="e5fd8-3232">スタックの現在の上にある値を否定します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3232">Negates the value currently on top of the stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-3233">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3233">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3234">値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3234">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3235">値はスタックからポップされ、否定されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3235">A value is popped from the stack and negated.</span></span>  
  
3.  <span data-ttu-id="e5fd8-3236">結果がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3236">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-3237">`neg` 命令は、値を否定し、結果をスタックの一番上にプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3237">The `neg` instruction negates value and pushes the result on top of the stack.</span></span> <span data-ttu-id="e5fd8-3238">戻り値の型は、オペランドの型と同じです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3238">The return type is the same as the operand type.</span></span>  
  
 <span data-ttu-id="e5fd8-3239">整数値の否定は、標準の2の補数否定です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3239">Negation of integral values is standard two's complement negation.</span></span> <span data-ttu-id="e5fd8-3240">特に、負の数 (正の値に対応する正の数値) を否定すると、最も負の数値が得られます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3240">In particular, negating the most negative number (which does not have a positive counterpart) yields the most negative number.</span></span> <span data-ttu-id="e5fd8-3241">このオーバーフローを検出するには、代わりに <xref:System.Reflection.Emit.OpCodes.Sub_Ovf> 命令を使用します (つまり、0から減算します)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3241">To detect this overflow use the <xref:System.Reflection.Emit.OpCodes.Sub_Ovf> instruction instead (that is, subtract from 0).</span></span>  
  
 <span data-ttu-id="e5fd8-3242">浮動小数点数を否定することはできません。また、NaN を否定すると NaN が返されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3242">Negating a floating-point number cannot overflow, and negating NaN returns NaN.</span></span>  
  
 <span data-ttu-id="e5fd8-3243">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`neg` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3243">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `neg` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Newarr">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Newarr;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Newarr" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Newarr" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Newarr As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Newarr;" />
      <MemberSignature Language="F#" Value=" staticval mutable Newarr : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Newarr" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3244">特定の型の要素を持つ、インデックス番号が 0 から始まる新しい 1 次元配列へのオブジェクト参照を評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3244">Pushes an object reference to a new zero-based, one-dimensional array whose elements are of a specific type onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3245">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3245">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3246">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3246">Format</span></span>|<span data-ttu-id="e5fd8-3247">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3247">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3248">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3248">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3249">8D< `T` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-3249">8D < `T` ></span></span>|<span data-ttu-id="e5fd8-3250">newarr `etype`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3250">newarr `etype`</span></span>|<span data-ttu-id="e5fd8-3251">`etype`型の要素を持つ新しい配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3251">Creates a new array with elements of type `etype`.</span></span>|  
  
 <span data-ttu-id="e5fd8-3252">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3252">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3253">配列内の要素の数がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3253">The number of elements in the array is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3254">要素の数がスタックからポップされ、配列が作成されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3254">The number of elements is popped from the stack and the array is created.</span></span>  
  
3.  <span data-ttu-id="e5fd8-3255">新しい配列へのオブジェクト参照がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3255">An object reference to the new array is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-3256">`newarr` 命令は、オブジェクト参照 (型 `O`) を、`etype` 型 (型を記述するメタデータトークン) の要素を持つ、新しい0から始まる1次元配列にプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3256">The `newarr` instruction pushes an object reference (type `O`) to a new zero-based, one-dimensional array whose elements are of type `etype` (a metadata token describing the type).</span></span> <span data-ttu-id="e5fd8-3257">新しい配列内の要素の数は、`native int`として指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3257">The number of elements in the new array should be specified as a `native int`.</span></span> <span data-ttu-id="e5fd8-3258">有効な配列のインデックスの範囲は、0から最大で1を引いた数までです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3258">Valid array indexes range from zero to the maximum number of elements minus one.</span></span>  
  
 <span data-ttu-id="e5fd8-3259">配列の要素は、値型を含む任意の型にすることができます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3259">The elements of an array can be any type, including value types.</span></span>  
  
 <span data-ttu-id="e5fd8-3260">0から始まる、数値の1次元配列は、適切な値の型 (<xref:System.Int32>など) を参照するメタデータトークンを使用して作成されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3260">Zero-based, one-dimensional arrays of numbers are created using a metadata token referencing the appropriate value type (<xref:System.Int32>, and so on).</span></span> <span data-ttu-id="e5fd8-3261">配列の要素は、適切な型の0に初期化されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3261">Elements of the array are initialized to 0 of the appropriate type.</span></span>  
  
 <span data-ttu-id="e5fd8-3262">0以外のベースの1次元配列と多次元配列は、`newarr`ではなく <xref:System.Reflection.Emit.OpCodes.Newobj> を使用して作成されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3262">Nonzero-based one-dimensional arrays and multidimensional arrays are created using <xref:System.Reflection.Emit.OpCodes.Newobj> rather than `newarr`.</span></span> <span data-ttu-id="e5fd8-3263">一般的には、.NET Framework の <xref:System.Array> クラスのメソッドを使用して作成されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3263">More commonly, they are created using the methods of the <xref:System.Array> class in the .NET Framework.</span></span>  
  
 <span data-ttu-id="e5fd8-3264"><xref:System.OutOfMemoryException> は、要求を満たすのに十分なメモリがない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3264"><xref:System.OutOfMemoryException> is thrown if there is insufficient memory to satisfy the request.</span></span>  
  
 <span data-ttu-id="e5fd8-3265">`numElems` が0未満の場合、<xref:System.OverflowException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3265"><xref:System.OverflowException> is thrown if `numElems` is less than 0.</span></span>  
  
 <span data-ttu-id="e5fd8-3266">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`newarr` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3266">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `newarr` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Type%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Newobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Newobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Newobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Newobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Newobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Newobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Newobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Newobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3267">新しいオブジェクトまたは値型の新しいインスタンスを作成し、オブジェクト参照 (<see langword="O" /> 型) を評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3267">Creates a new object or a new instance of a value type, pushing an object reference (type <see langword="O" />) onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3268">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3268">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3269">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3269">Format</span></span>|<span data-ttu-id="e5fd8-3270">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3270">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3271">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3271">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3272">73 < `T` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-3272">73 < `T` ></span></span>|<span data-ttu-id="e5fd8-3273">newobj `ctor`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3273">newobj `ctor`</span></span>|<span data-ttu-id="e5fd8-3274">初期化されていないオブジェクトまたは値型を割り当て、コンストラクターメソッド `ctor`を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3274">Allocates an uninitialized object or value type and calls the constructor method `ctor`.</span></span>|  
  
 <span data-ttu-id="e5fd8-3275">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3275">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3276">`argn` を通じて `arg1` 引数は、順番にスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3276">Arguments `arg1` through `argn` are pushed on the stack in sequence.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3277">`arg1` を通じて `argn` 引数はスタックからポップされ、オブジェクトの作成のために `ctor` に渡されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3277">Arguments `argn` through `arg1` are popped from the stack and passed to `ctor` for object creation.</span></span>  
  
3.  <span data-ttu-id="e5fd8-3278">新しいオブジェクトへの参照がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3278">A reference to the new object is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-3279">`newobj` 命令は、新しいオブジェクトまたは値型の新しいインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3279">The `newobj` instruction creates a new object or a new instance of a value type.</span></span> <span data-ttu-id="e5fd8-3280">`Ctor` は、呼び出すコンストラクターの名前、クラス、およびシグネチャを示すメタデータトークン (コンストラクターとしてマークされる必要がある `methodref` または `methoddef`) です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3280">`Ctor` is a metadata token (a `methodref` or `methoddef` that must be marked as a constructor) that indicates the name, class and signature of the constructor to call.</span></span>  
  
 <span data-ttu-id="e5fd8-3281">`newobj` 命令は、`ctor` に関連付けられたクラスの新しいインスタンスを割り当て、新しいインスタンス内のすべてのフィールドを 0 (適切な型の) または null 参照 (適切な場合) に初期化します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3281">The `newobj` instruction allocates a new instance of the class associated with `ctor` and initializes all the fields in the new instance to 0 (of the proper type) or null references as appropriate.</span></span> <span data-ttu-id="e5fd8-3282">次に、新しく作成されたインスタンスと共に、指定された引数を使用して `ctor` コンストラクターを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3282">It then calls the constructor `ctor` with the given arguments along with the newly created instance.</span></span> <span data-ttu-id="e5fd8-3283">コンストラクターが呼び出されると、現在初期化されているオブジェクト参照 (型 `O`) がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3283">After the constructor has been called, the now initialized object reference (type `O`) is pushed on the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-3284">コンストラクターの観点からは、初期化されていないオブジェクトは引数0であり、newobj に渡される他の引数は順に続きます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3284">From the constructor's point of view, the uninitialized object is argument 0 and the other arguments passed to newobj follow in order.</span></span>  
  
 <span data-ttu-id="e5fd8-3285">0から始まる、1次元の配列はすべて、`newobj`ではなく <xref:System.Reflection.Emit.OpCodes.Newarr>を使用して作成されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3285">All zero-based, one-dimensional arrays are created using <xref:System.Reflection.Emit.OpCodes.Newarr>, not `newobj`.</span></span> <span data-ttu-id="e5fd8-3286">一方、他のすべての配列 (複数の次元、または1次元ではなく、0から始まる) は `newobj`を使用して作成されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3286">On the other hand, all other arrays (more than one dimension, or one-dimensional but not zero-based) are created using `newobj`.</span></span>  
  
 <span data-ttu-id="e5fd8-3287">値型は、通常、`newobj`を使用して作成されるわけではありません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3287">Value types are not usually created using `newobj`.</span></span> <span data-ttu-id="e5fd8-3288">通常、これらは、`newarr` (0 から始まる、1次元配列の場合)、またはオブジェクトのフィールドとして、引数またはローカル変数として割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3288">They are usually allocated either as arguments or local variables, using `newarr` (for zero-based, one-dimensional arrays), or as fields of objects.</span></span> <span data-ttu-id="e5fd8-3289">割り当てられると、<xref:System.Reflection.Emit.OpCodes.Initobj>を使用して初期化されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3289">Once allocated, they are initialized using <xref:System.Reflection.Emit.OpCodes.Initobj>.</span></span> <span data-ttu-id="e5fd8-3290">ただし、`newobj` 命令を使用して、スタック上に値型の新しいインスタンスを作成することができます。これは、引数として渡すことも、ローカルに格納することもできます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3290">However, the `newobj` instruction can be used to create a new instance of a value type on the stack, that can then be passed as an argument, stored in a local, and so on.</span></span>  
  
 <span data-ttu-id="e5fd8-3291"><xref:System.OutOfMemoryException> は、要求を満たすのに十分なメモリがない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3291"><xref:System.OutOfMemoryException> is thrown if there is insufficient memory to satisfy the request.</span></span>  
  
 <span data-ttu-id="e5fd8-3292"><xref:System.MissingMethodException> は、指定された名前、クラス、およびシグネチャを持つコンストラクターメソッド `ctor` が見つからない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3292"><xref:System.MissingMethodException> is thrown if a constructor method `ctor` with the indicated name, class and signature could not be found.</span></span> <span data-ttu-id="e5fd8-3293">これは通常、Microsoft 中間言語 (MSIL) 命令が実行時ではなくネイティブコードに変換された場合に検出されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3293">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="e5fd8-3294">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`newobj` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3294">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `newobj` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.ConstructorInfo%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Nop">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Nop;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Nop" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Nop" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Nop As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Nop;" />
      <MemberSignature Language="F#" Value=" staticval mutable Nop : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Nop" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3295">オペコードがパッチされている場合は、領域を補完します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3295">Fills space if opcodes are patched.</span></span> <span data-ttu-id="e5fd8-3296">循環参照の処理を利用することはできますが、意味のある演算は実行されません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3296">No meaningful operation is performed although a processing cycle can be consumed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3297">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3297">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3298">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3298">Format</span></span>|<span data-ttu-id="e5fd8-3299">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3299">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3300">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3300">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3301">00</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3301">00</span></span>|<span data-ttu-id="e5fd8-3302">nop</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3302">nop</span></span>|<span data-ttu-id="e5fd8-3303">動作を指定せずに操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3303">Performs an operation without behavior.</span></span>|  
  
 <span data-ttu-id="e5fd8-3304">この命令には、スタック移行動作は定義されていません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3304">There is no stack transitional behavior defined for this instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-3305">`nop` 操作では何も実行されません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3305">The `nop` operation does nothing.</span></span> <span data-ttu-id="e5fd8-3306">これは、オペコードにパッチが適用されている場合に領域を埋めることを目的としています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3306">It is intended to fill in space if opcodes are patched.</span></span>  
  
 <span data-ttu-id="e5fd8-3307">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`nop` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3307">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `nop` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Not">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Not;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Not" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Not" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Not As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Not;" />
      <MemberSignature Language="F#" Value=" staticval mutable Not : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Not" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3308">スタックの一番上にある整数値のビットごとの補数を計算し、結果を同じ型として評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3308">Computes the bitwise complement of the integer value on top of the stack and pushes the result onto the evaluation stack as the same type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3309">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3309">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3310">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3310">Format</span></span>|<span data-ttu-id="e5fd8-3311">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3311">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3312">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3312">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3313">66</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3313">66</span></span>|<span data-ttu-id="e5fd8-3314">not</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3314">not</span></span>|<span data-ttu-id="e5fd8-3315">値のビットごとの補数を計算します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3315">Computes the bitwise complement of a value.</span></span>|  
  
 <span data-ttu-id="e5fd8-3316">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3316">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3317">`value` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3317">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3318">`value` はスタックからポップされ、ビットごとの補数が計算されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3318">`value` is popped from the stack and its bitwise complement computed.</span></span>  
  
3.  <span data-ttu-id="e5fd8-3319">結果がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3319">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-3320">`not` 命令は、整数値のビットごとの補数を計算し、結果をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3320">The `not` instruction computes the bitwise complement of an integer value and pushes the result onto the stack.</span></span> <span data-ttu-id="e5fd8-3321">戻り値の型は、オペランドの型と同じです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3321">The return type is the same as the operand type.</span></span>  
  
 <span data-ttu-id="e5fd8-3322">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`not` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3322">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `not` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Or;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Or" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Or" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Or As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Or;" />
      <MemberSignature Language="F#" Value=" staticval mutable Or : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Or" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3323">スタックの一番上にある 2 つの整数値のビットごとの補数を計算し、結果を評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3323">Compute the bitwise complement of the two integer values on top of the stack and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3324">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3324">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3325">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3325">Format</span></span>|<span data-ttu-id="e5fd8-3326">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3326">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3327">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3327">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3328">60</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3328">60</span></span>|<span data-ttu-id="e5fd8-3329">or</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3329">or</span></span>|<span data-ttu-id="e5fd8-3330">2つの整数値のビットごとの OR を計算し、整数を返します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3330">Computes the bitwise OR of two integer values, returns an integer.</span></span>|  
  
 <span data-ttu-id="e5fd8-3331">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3331">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3332">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3332">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3333">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3333">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-3334">`value2` と `value1` はスタックからポップされ、ビットごとの OR 演算が計算されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3334">`value2` and `value1` are popped from the stack and their bitwise OR computed.</span></span>  
  
4.  <span data-ttu-id="e5fd8-3335">結果がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3335">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-3336">`or` 命令は、スタックの一番上にある2つの値のビットごとの OR を計算し、結果をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3336">The `or` instruction computes the bitwise OR of two values atop the stack, pushing the result onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-3337">`Or` は、整数固有の演算です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3337">`Or` is an integer-specific operation.</span></span>  
  
 <span data-ttu-id="e5fd8-3338">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`or` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3338">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `or` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pop">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Pop;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Pop" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Pop" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Pop As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Pop;" />
      <MemberSignature Language="F#" Value=" staticval mutable Pop : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Pop" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3339">現在評価スタックの一番上にある値を削除します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3339">Removes the value currently on top of the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3340">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3340">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3341">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3341">Format</span></span>|<span data-ttu-id="e5fd8-3342">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3342">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3343">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3343">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3344">26</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3344">26</span></span>|<span data-ttu-id="e5fd8-3345">pop</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3345">pop</span></span>|<span data-ttu-id="e5fd8-3346">スタックから上位の値をポップします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3346">Pops the top value from the stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-3347">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3347">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3348">最上位の値がスタックからポップされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3348">The top value is popped from the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-3349">`pop` 命令は、スタックから最上位の要素を削除します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3349">The `pop` instruction removes the top element from the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-3350">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`pop` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3350">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `pop` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3351">これは予約済みの命令です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3351">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3352">これは予約済みの命令です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3352">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3353">これは予約済みの命令です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3353">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3354">これは予約済みの命令です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3354">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix5">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix5;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix5" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix5" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix5 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix5;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix5 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix5" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3355">これは予約済みの命令です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3355">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix6">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix6;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix6" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix6" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix6 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix6;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix6 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix6" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3356">これは予約済みの命令です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3356">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix7">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix7;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix7" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix7" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix7 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix7;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix7 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix7" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3357">これは予約済みの命令です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3357">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefixref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefixref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefixref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefixref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefixref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefixref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefixref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefixref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3358">これは予約済みの命令です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3358">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Readonly">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Readonly;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Readonly" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Readonly" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Readonly As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Readonly;" />
      <MemberSignature Language="F#" Value=" staticval mutable Readonly : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Readonly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3359">以降の配列アドレス演算で、実行時に型チェックを実行しないこと、および変更可能性が制限されたマネージド ポインターを返すことを指定します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3359">Specifies that the subsequent array address operation performs no type check at run time, and that it returns a managed pointer whose mutability is restricted.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3360">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3360">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3361">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3361">Format</span></span>|<span data-ttu-id="e5fd8-3362">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3362">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3363">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3363">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3364">FE 1E</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3364">FE 1E</span></span>|<span data-ttu-id="e5fd8-3365">readonly.</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3365">readonly.</span></span>|<span data-ttu-id="e5fd8-3366">後続の配列アドレス操作が実行時に型チェックを実行しないことと、制限された可能性が制限されたマネージポインターを返すことを指定します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3366">Specify that the subsequent array address operation performs no type check at run time, and that it returns a managed pointer with restricted mutability.</span></span>|  
  
 <span data-ttu-id="e5fd8-3367">このプレフィックスは、`ldelema` 命令の直前にのみ表示され、配列で特別な `Address` メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3367">This prefix can only appear immediately preceding the `ldelema` instruction and calls to the special `Address` method on arrays.</span></span> <span data-ttu-id="e5fd8-3368">後続の操作に対する影響は次のようになります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3368">Its effect on the subsequent operation is twofold:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3369">実行時には、型チェック操作は実行されません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3369">At run time, no type check operation is performed.</span></span> <span data-ttu-id="e5fd8-3370">通常、参照型の配列で使用する場合は、`ldelema` と `stelem` 命令に対して暗黙的な型チェックがあることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3370">Note that there is normally an implicit type check for the `ldelema` and `stelem` instructions when used on reference type arrays.</span></span> <span data-ttu-id="e5fd8-3371">値クラスに対して実行時の型チェックが行われることはないため、`readonly` はそのような場合には何も行われません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3371">There is never a run-time type check for value classes, so `readonly` is a no-op in that case.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3372">検証ツールは、アドレス操作の結果を、相互実行性が制限されたマネージポインターとして扱います。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3372">The verifier treats the result of the address-of operation as a managed pointer with restricted mutability.</span></span>  
  
 <span data-ttu-id="e5fd8-3373">ポインターは、値を変換できるかどうかを定義する型によって制御されるので、このポインターは、制限性が制限されていると言います。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3373">The pointer is said to have restricted mutability because the defining type controls whether the value can be mutated.</span></span> <span data-ttu-id="e5fd8-3374">パブリックフィールドまたは値を更新するメソッドを公開しない値クラスの場合、ポインターは読み取り専用になります (したがって、プレフィックスの名前)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3374">For value classes that expose no public fields or methods that update the value in place, the pointer is read-only (hence the name of the prefix).</span></span> <span data-ttu-id="e5fd8-3375">特に、プリミティブ型 (system.string など) を表すクラスは、ミューテーターを公開しないため、読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3375">In particular, the classes representing primitive types (for example, System.Int32) do not expose mutators and thus are read-only.</span></span>  
  
 <span data-ttu-id="e5fd8-3376">この方法で制限されているマネージポインターは、次の方法でのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3376">A managed pointer restricted in this fashion can be used only in the following ways:</span></span>  
  
-   <span data-ttu-id="e5fd8-3377">`ldfld`、`ldflda`、`stfld`、`call`、`constrained callvirt` の各命令の `object` パラメーターとして。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3377">As the `object` parameter for the `ldfld`, `ldflda`, `stfld`, `call`, or`constrained callvirt` instructions.</span></span>  
  
-   <span data-ttu-id="e5fd8-3378">`ldobj` 命令への `pointer` パラメーターとして、またはいずれかの `ldind` 命令。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3378">As the `pointer` parameter to the `ldobj` instruction or to one of the `ldind` instructions.</span></span>  
  
-   <span data-ttu-id="e5fd8-3379">`cpobj` 命令の `source` パラメーターとして。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3379">As the `source` parameter to the `cpobj` instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-3380">`stobj`、`initobj`、`mkrefany` 操作、または `stind` 命令を含む、許可されていないその他のすべての操作。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3380">All other operations disallowed, including the `stobj`, `initobj`, or `mkrefany` operations, or any of the `stind` instructions.</span></span>  
  
 <span data-ttu-id="e5fd8-3381">`readonly` プレフィックスの目的は、ジェネリックコードで配列から要素をフェッチするときに型チェックが行われないようにすることです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3381">The purpose of the `readonly` prefix is to avoid a type check when fetching an element from an array in generic code.</span></span> <span data-ttu-id="e5fd8-3382">たとえば、式 `arr[i].m()`、配列 `arr` の要素の型が、メソッド `m`を持つインターフェイスを持つように制約されたジェネリック型である場合、は次の MSIL にコンパイルされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3382">For example, the expression `arr[i].m()`, where the element type of the array `arr` is a generic type that has been constrained to have an interface with method `m`, might compile to the following MSIL.</span></span>  
  
```  
ldloc arr  
ldloc i  
readonly.  
ldelema !0    // Loads the pointer to the object.  
…             // Load the arguments to the call.  
constrained. !0  
callvirt m  
```  
  
 <span data-ttu-id="e5fd8-3383">`readonly` プレフィックスがない場合、`ldelema` 命令は、! 0 が参照型である場合に型チェックを実行します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3383">Without the `readonly` prefix, the `ldelema` instruction would perform a type check in the case where !0 was a reference type.</span></span> <span data-ttu-id="e5fd8-3384">この型チェックは非効率的ですが、意味が正しくありません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3384">Not only is this type check inefficient, but it is semantically incorrect.</span></span> <span data-ttu-id="e5fd8-3385">`ldelema` の型チェックは厳密に一致していますが、これは厳密なものではありません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3385">The type check for `ldelema` is an exact match, which is too strong.</span></span> <span data-ttu-id="e5fd8-3386">配列に型! 0 のサブクラスが保持されている場合、上記のコードは型チェックに失敗します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3386">If the array held subclasses of type !0, the code above would fail the type check.</span></span>  
  
 <span data-ttu-id="e5fd8-3387">配列要素のアドレスは、要素自体の代わりに、値型と参照型の両方に対して機能する `arr[i]` のハンドルを持つためにフェッチされます。したがって、`constrained callvirt` 命令に渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3387">The address of the array element is fetched, instead of the element itself, in order to have a handle for `arr[i]` that works for both value types and reference types, and thus can be passed to the `constrained callvirt` instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-3388">一般に、参照型の要素が配列に保持されている場合、実行時チェックをスキップすることは安全ではありません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3388">In general it would be unsafe to skip the run-time check if the array held elements of a reference type.</span></span> <span data-ttu-id="e5fd8-3389">安全にするには、このポインターを使用して配列を変更しないようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3389">To be safe, it is necessary to ensure that no modifications to the array are made through this pointer.</span></span> <span data-ttu-id="e5fd8-3390">検証規則によってこのことが保証されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3390">The verifier rules ensure this.</span></span> <span data-ttu-id="e5fd8-3391">制限付きマネージポインターは、インスタンスメソッド呼び出しのオブジェクトとして渡すことができるため、厳密には値型の読み取り専用ではありませんが、値型にはタイプセーフの問題はありません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3391">The restricted managed pointer can be passed as the object of instance method calls, so it is not strictly speaking read-only for value types, but there is no type safety problem for value types.</span></span>  
  
 <span data-ttu-id="e5fd8-3392">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`readonly` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3392">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `readonly` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refanytype">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Refanytype;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Refanytype" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Refanytype" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Refanytype As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Refanytype;" />
      <MemberSignature Language="F#" Value=" staticval mutable Refanytype : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Refanytype" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3393">型指定された参照に埋め込まれている型トークンを取得します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3393">Retrieves the type token embedded in a typed reference.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3394">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3394">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3395">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3395">Format</span></span>|<span data-ttu-id="e5fd8-3396">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3396">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3397">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3397">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3398">FE 1D</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3398">FE 1D</span></span>|<span data-ttu-id="e5fd8-3399">refanytype</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3399">refanytype</span></span>|<span data-ttu-id="e5fd8-3400">型指定された参照に格納されている型トークンをプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3400">Pushes the type token stored in a typed reference.</span></span>|  
  
 <span data-ttu-id="e5fd8-3401">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3401">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3402">値型参照がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3402">A value type reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3403">型指定された参照がスタックからポップされ、対応する型トークンが取得されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3403">The typed reference is popped from the stack and its corresponding type token retrieved.</span></span>  
  
3.  <span data-ttu-id="e5fd8-3404">型トークンがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3404">The type token is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-3405">型指定された参照には、型トークンとオブジェクトインスタンスへのアドレスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3405">A typed reference contains a type token and an address to an object instance.</span></span>  
  
 <span data-ttu-id="e5fd8-3406">`refanytype` 命令は、型指定された参照に埋め込まれている型トークンを取得します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3406">The `refanytype` instruction retrieves the type token embedded in the typed reference.</span></span> <span data-ttu-id="e5fd8-3407">型指定された参照の作成の詳細については、<xref:System.Reflection.Emit.OpCodes.Mkrefany> の指示を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3407">See the <xref:System.Reflection.Emit.OpCodes.Mkrefany> instruction for information on creating typed references.</span></span>  
  
 <span data-ttu-id="e5fd8-3408">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`refanytype` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3408">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `refanytype` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refanyval">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Refanyval;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Refanyval" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Refanyval" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Refanyval As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Refanyval;" />
      <MemberSignature Language="F#" Value=" staticval mutable Refanyval : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Refanyval" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3409">型指定された参照に埋め込まれているアドレス (<see langword="&amp;" /> 型) を取得します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3409">Retrieves the address (type <see langword="&amp;" />) embedded in a typed reference.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3410">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3410">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3411">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3411">Format</span></span>|<span data-ttu-id="e5fd8-3412">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3412">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3413">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3413">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3414">C2 < `T` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-3414">C2 < `T` ></span></span>|<span data-ttu-id="e5fd8-3415">refanyval `type`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3415">refanyval `type`</span></span>|<span data-ttu-id="e5fd8-3416">型指定された参照に格納されているアドレスをプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3416">Pushes the address stored in a typed reference.</span></span>|  
  
 <span data-ttu-id="e5fd8-3417">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3417">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3418">値型参照がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3418">A value type reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3419">型指定された参照がスタックからポップされ、対応するアドレスが取得されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3419">The typed reference is popped from the stack and the corresponding address retrieved.</span></span>  
  
3.  <span data-ttu-id="e5fd8-3420">アドレスはスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3420">The address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-3421">型指定された参照には、型トークンとオブジェクトインスタンスへのアドレスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3421">A typed reference contains a type token and an address to an object instance.</span></span>  
  
 <span data-ttu-id="e5fd8-3422">`refanyval` 命令は、型指定された参照に埋め込まれているアドレスを取得します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3422">The `refanyval` instruction retrieves the address embedded in the a typed reference.</span></span> <span data-ttu-id="e5fd8-3423">スタックに指定された型指定された参照に埋め込まれた型は、`type` によって指定された型 (`typedef` または `typeref`) と一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3423">The type embedded in the typed reference supplied on the stack must match the type specified by `type` (a metadata token, either a `typedef` or a `typeref`).</span></span> <span data-ttu-id="e5fd8-3424">関連するコンテンツについては、<xref:System.Reflection.Emit.OpCodes.Mkrefany> 命令を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3424">See the <xref:System.Reflection.Emit.OpCodes.Mkrefany> instruction for related content.</span></span>  
  
 <span data-ttu-id="e5fd8-3425"><xref:System.InvalidCastException> は、`type` が型参照に格納されている型と同一でない場合にスローされます (この例では、`type` は、型指定された参照として構築された <xref:System.Reflection.Emit.OpCodes.Mkrefany> 命令に指定されたクラスです)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3425"><xref:System.InvalidCastException> is thrown if `type` is not identical to the type stored in the type reference (in this case, `type` is the class supplied to the <xref:System.Reflection.Emit.OpCodes.Mkrefany> instruction that constructed said typed reference).</span></span>  
  
 <span data-ttu-id="e5fd8-3426">`type` が見つからない場合、<xref:System.TypeLoadException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3426"><xref:System.TypeLoadException> is thrown if `type` cannot be found.</span></span>  
  
 <span data-ttu-id="e5fd8-3427">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`refanyval` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3427">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `refanyval` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Type%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rem">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Rem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Rem" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Rem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Rem As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Rem;" />
      <MemberSignature Language="F#" Value=" staticval mutable Rem : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Rem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3428">2 つの値を除算し、剰余を評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3428">Divides two values and pushes the remainder onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3429">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3429">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3430">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3430">Format</span></span>|<span data-ttu-id="e5fd8-3431">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3431">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3432">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3432">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3433">5D</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3433">5D</span></span>|<span data-ttu-id="e5fd8-3434">rem</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3434">rem</span></span>|<span data-ttu-id="e5fd8-3435">`value2` によって `value1` を分割した剰余をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3435">Pushes the remainder of dividing `value1` by `value2` onto the stack.</span></span>|  
  
  
 <span data-ttu-id="e5fd8-3436">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3436">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3437">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3437">A `value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3438">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3438">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-3439">`value2` と `value1` はスタックからポップされ、`value1` `value2` `div` の残りは計算されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3439">`value2` and `value1` are popped from the stack and the remainder of `value1` `div` `value2` computed.</span></span>  
  
4.  <span data-ttu-id="e5fd8-3440">結果がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3440">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-3441">`result` = `value1` `rem` `value2` は次の条件を満たしています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3441">`result` = `value1` `rem` `value2` satisfies the following conditions:</span></span>  
  
 <span data-ttu-id="e5fd8-3442">`result` = `value1` - `value2` `×` (`value1` `div` `value2`)、および:</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3442">`result` = `value1` - `value2` `×` (`value1` `div` `value2`), and:</span></span>  
  
 <span data-ttu-id="e5fd8-3443">0 = &#124; `result` &#124; < &#124; `value2` &#124;、sign (`result`) = sign (`value1`)。ここで、`div` は0方向に切り捨てられる除算命令です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3443">0 = &#124; `result` &#124; < &#124; `value2` &#124;, sign(`result`) = sign(`value1`), where `div` is the division instruction that truncates towards zero.</span></span>  
  
 <span data-ttu-id="e5fd8-3444">`value2` がゼロの場合、または `value1` が無限大の場合、結果は NaN になります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3444">If `value2` is zero or `value1` is infinity the result is NaN.</span></span> <span data-ttu-id="e5fd8-3445">`value2` が無限である場合、結果は `value1` になります (`-infinity`の場合は否定されます)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3445">If `value2` is infinity, the result is `value1` (negated for `-infinity`).</span></span>  
  
 <span data-ttu-id="e5fd8-3446">`value2` が0の場合、整数演算は <xref:System.DivideByZeroException> をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3446">Integral operations throw <xref:System.DivideByZeroException> if `value2` is zero.</span></span>  
  
 <span data-ttu-id="e5fd8-3447">Intel ベースのプラットフォームでは、コンピューティング時に <xref:System.OverflowException> がスローされることに注意してください (minint `rem`-1)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3447">Note that on the Intel-based platforms an <xref:System.OverflowException> is thrown when computing (minint `rem` -1).</span></span>  
  
 <span data-ttu-id="e5fd8-3448">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`rem` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3448">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `rem` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rem_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Rem_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Rem_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Rem_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Rem_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Rem_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Rem_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Rem_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3449">2 つの符号なしの値を除算し、剰余を評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3449">Divides two unsigned values and pushes the remainder onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3450">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3450">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3451">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3451">Format</span></span>|<span data-ttu-id="e5fd8-3452">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3452">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3453">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3453">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3454">5E</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3454">5E</span></span>|<span data-ttu-id="e5fd8-3455">rem.un</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3455">rem.un</span></span>|<span data-ttu-id="e5fd8-3456">符号なしの `value1` を符号なし `value2` によってスタックに分割した剰余をプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3456">Pushes the remainder of dividing unsigned `value1` by unsigned `value2` onto the stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-3457">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3457">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3458">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3458">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3459">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3459">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-3460">`value2` と `value1` はスタックからポップされ、`value1` `value2` `div` の残りは計算されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3460">`value2` and `value1` are popped from the stack and the remainder of `value1` `div` `value2` computed.</span></span>  
  
4.  <span data-ttu-id="e5fd8-3461">結果がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3461">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-3462">`result` = `value1` `rem.un` `value2` は次の条件を満たしています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3462">`result` = `value1` `rem.un` `value2` satisfies the following conditions:</span></span>  
  
 <span data-ttu-id="e5fd8-3463">`result` = `value1` - `value2` x (`value1` `div.un` `value2`)、および:</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3463">`result` = `value1` - `value2` x(`value1` `div.un` `value2`), and:</span></span>  
  
 <span data-ttu-id="e5fd8-3464">0 = `result` < `value2`。ここで `div.un` は符号なし除算命令です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3464">0 = `result` < `value2`, where `div.un` is the unsigned division instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-3465">`rem.un` 命令は、`result` を計算してスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3465">The `rem.un` instruction computes `result` and pushes it on the stack.</span></span> <span data-ttu-id="e5fd8-3466">`Rem.un` は引数を符号なし整数として扱い、<xref:System.Reflection.Emit.OpCodes.Rem> は符号付き整数として扱います。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3466">`Rem.un` treats its arguments as unsigned integers, while <xref:System.Reflection.Emit.OpCodes.Rem> treats them as signed integers.</span></span>  
  
 <span data-ttu-id="e5fd8-3467">浮動小数点数では `Rem.un` が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3467">`Rem.un` is unspecified for floating-point numbers.</span></span>  
  
 <span data-ttu-id="e5fd8-3468">`value2` が0の場合、整数演算は <xref:System.DivideByZeroException> をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3468">Integral operations throw <xref:System.DivideByZeroException> if `value2` is zero.</span></span>  
  
 <span data-ttu-id="e5fd8-3469">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`rem.un` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3469">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `rem.un` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ret">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ret;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ret" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ret" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ret As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ret;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ret : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ret" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3470">現在のメソッドから戻り、呼び出し先の評価スタックから呼び出し元の評価スタックに戻り値 (存在する場合) をプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3470">Returns from the current method, pushing a return value (if present) from the callee's evaluation stack onto the caller's evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3471">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3471">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3472">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3472">Format</span></span>|<span data-ttu-id="e5fd8-3473">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3473">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3474">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3474">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3475">2A></span><span class="sxs-lookup"><span data-stu-id="e5fd8-3475">2A</span></span>|<span data-ttu-id="e5fd8-3476">ret</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3476">ret</span></span>|<span data-ttu-id="e5fd8-3477">はメソッドからを返します。値を返す可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3477">Returns from method, possibly returning a value.</span></span>|  
  
 <span data-ttu-id="e5fd8-3478">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3478">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3479">戻り値は、呼び出し先の評価スタックからポップされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3479">The return value is popped from the callee evaluation stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3480">手順 1. で取得した戻り値は、呼び出し元の評価スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3480">The return value obtained in step 1 is pushed onto the caller evaluation stack.</span></span>  
  
 <span data-ttu-id="e5fd8-3481">呼び出し先の評価スタックに戻り値が存在しない場合、値は返されません (呼び出し先または呼び出し元のメソッドのスタック遷移動作はありません)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3481">If the return value is not present on the callee evaluation stack, no value is returned (no stack transition behaviors for either the callee or caller method).</span></span>  
  
 <span data-ttu-id="e5fd8-3482">現在のメソッドの戻り値の型によって、スタックの一番上からフェッチされ、現在のメソッドを呼び出したメソッドのスタックにコピーされる値の型が決まります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3482">The type of the return value, if any, of the current method determines the type of value to be fetched from the top of the stack and copied onto the stack of the method that called the current method.</span></span> <span data-ttu-id="e5fd8-3483">返される値を除き、現在のメソッドの評価スタックは空である必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3483">The evaluation stack for the current method must be empty except for the value to be returned.</span></span>  
  
 <span data-ttu-id="e5fd8-3484">`ret` 命令を使用して、`try`、`filter`、`catch`、または `finally` ブロックから制御を移すことはできません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3484">The `ret` instruction cannot be used to transfer control out of a`try`, `filter`, `catch`, or `finally` block.</span></span> <span data-ttu-id="e5fd8-3485">`try` または `catch`内から、<xref:System.Reflection.Emit.OpCodes.Leave> 命令を、外側のすべての例外ブロックの外側にある `ret` 命令の出力先と共に使用します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3485">From within a `try` or `catch`, use the <xref:System.Reflection.Emit.OpCodes.Leave> instruction with a destination of a `ret` instruction that is outside all enclosing exception blocks.</span></span> <span data-ttu-id="e5fd8-3486">`filter` と `finally` のブロックは論理的には例外処理の一部であり、コードが埋め込まれているメソッドではないため、正しく生成された Microsoft 中間言語 (MSIL) 命令は `filter` または `finally`内からメソッドを返しません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3486">Because the `filter` and `finally` blocks are logically part of exception handling and not the method in which their code is embedded, correctly generated Microsoft Intermediate Language (MSIL) instructions do not perform a method return from within a `filter` or `finally`.</span></span>  
  
 <span data-ttu-id="e5fd8-3487">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`ret` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3487">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ret` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rethrow">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Rethrow;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Rethrow" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Rethrow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Rethrow As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Rethrow;" />
      <MemberSignature Language="F#" Value=" staticval mutable Rethrow : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Rethrow" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3488">現在の例外を再スローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3488">Rethrows the current exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3489">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3489">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3490">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3490">Format</span></span>|<span data-ttu-id="e5fd8-3491">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3491">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3492">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3492">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3493">FE 1A</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3493">FE 1A</span></span>|<span data-ttu-id="e5fd8-3494">スロー</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3494">rethrow</span></span>|<span data-ttu-id="e5fd8-3495">現在の例外を再スローします</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3495">Rethrows the current exception</span></span>|  
  
 <span data-ttu-id="e5fd8-3496">この命令には、スタック移行動作は定義されていません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3496">No stack transition behavior is defined for this instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-3497">`rethrow` 命令は、`catch` ハンドラーの本体内でのみ許可されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3497">The `rethrow` instruction is only permitted within the body of a `catch` handler.</span></span> <span data-ttu-id="e5fd8-3498">このハンドラーでキャッチされたのと同じ例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3498">It throws the same exception that was caught by this handler.</span></span>  
  
 <span data-ttu-id="e5fd8-3499">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`rethrow` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3499">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `rethrow` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shl">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Shl;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Shl" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Shl" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Shl As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Shl;" />
      <MemberSignature Language="F#" Value=" staticval mutable Shl : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Shl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3500">整数値を指定したビット数だけ、0 を使用して左にシフトし、結果を評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3500">Shifts an integer value to the left (in zeroes) by a specified number of bits, pushing the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3501">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3501">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3502">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3502">Format</span></span>|<span data-ttu-id="e5fd8-3503">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3503">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3504">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3504">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3505">62</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3505">62</span></span>|<span data-ttu-id="e5fd8-3506">shl</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3506">shl</span></span>|<span data-ttu-id="e5fd8-3507">整数を左にシフトします (0 でシフト)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3507">Shifts an integer to the left (shifting in zeros).</span></span>|  
  
 <span data-ttu-id="e5fd8-3508">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3508">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3509">値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3509">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3510">シフトされるビットの量がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3510">The amount of bits to be shifted is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-3511">シフトするビット数。値はスタックからポップされます。値は、指定されたビット数だけ左にシフトされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3511">The number of bits to be shifted and the value are popped from the stack; the value is shifted left by the specified number of bits.</span></span>  
  
4.  <span data-ttu-id="e5fd8-3512">結果がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3512">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-3513">`shl` 命令は、指定されたビット数だけ左に値 (型 `int32`、`int64` または `native int`) をシフトします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3513">The `shl` instruction shifts the value (type `int32`, `int64` or `native int`) left by the specified number of bits.</span></span> <span data-ttu-id="e5fd8-3514">ビット数は `int32` または `native int`型の値です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3514">The number of bits is a value of type `int32` or `native int`.</span></span> <span data-ttu-id="e5fd8-3515">シフトするビット数が、指定された値の幅 (ビット単位) 以上の場合、戻り値は指定されません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3515">The return value is unspecified if the number of bits to be shifted is greater than or equal to the width (in bits) of the supplied value.</span></span>  
  
 <span data-ttu-id="e5fd8-3516">`Shl` は、各シフトの最下位位置にゼロビットを挿入します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3516">`Shl` inserts a zero bit in the lowest position on each shift.</span></span>  
  
 <span data-ttu-id="e5fd8-3517">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`shl` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3517">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `shl` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shr">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Shr;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Shr" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Shr" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Shr As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Shr;" />
      <MemberSignature Language="F#" Value=" staticval mutable Shr : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Shr" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3518">整数値を指定したビット数だけ、符号を付けて右にシフトし、結果を評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3518">Shifts an integer value (in sign) to the right by a specified number of bits, pushing the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3519">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3519">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3520">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3520">Format</span></span>|<span data-ttu-id="e5fd8-3521">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3521">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3522">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3522">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3523">63</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3523">63</span></span>|<span data-ttu-id="e5fd8-3524">shr</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3524">shr</span></span>|<span data-ttu-id="e5fd8-3525">整数を右にシフトします (符号でシフトします)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3525">Shifts an integer to the right (shifting in sign).</span></span>|  
  
 <span data-ttu-id="e5fd8-3526">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3526">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3527">値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3527">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3528">シフトされるビットの量がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3528">The amount of bits to be shifted is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-3529">シフトするビット数。値はスタックからポップされます。値は、指定されたビット数だけ右にシフトされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3529">The number of bits to be shifted and the value are popped from the stack; the value is shifted right by the specified number of bits.</span></span>  
  
4.  <span data-ttu-id="e5fd8-3530">結果がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3530">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-3531">`shr.un` 命令は、指定されたビット数だけ右に値 (型 `int32`、`int64` または `native int`) をシフトします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3531">The `shr.un` instruction shifts the value (type `int32`, `int64` or `native int`) right by the specified number of bits.</span></span> <span data-ttu-id="e5fd8-3532">ビット数は `int32` または `native int`型の値です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3532">The number of bits is a value of type `int32` or `native int`.</span></span> <span data-ttu-id="e5fd8-3533">シフトするビット数が、指定された値の幅 (ビット単位) 以上の場合、戻り値は指定されません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3533">The return value is unspecified if the number of bits to be shifted is greater than or equal to the width (in bits) of the supplied value.</span></span>  
  
 <span data-ttu-id="e5fd8-3534">`Shr` は、各シフトの上位ビットをレプリケートし、`result`の元の値の符号を保持します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3534">`Shr` replicates the high order bit on each shift, preserving the sign of the original value in the `result`.</span></span>  
  
 <span data-ttu-id="e5fd8-3535">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`shr` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3535">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `shr` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shr_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Shr_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Shr_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Shr_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Shr_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Shr_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Shr_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Shr_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3536">符号なし整数値を指定したビット数だけ、0 を使用して右にシフトし、結果を評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3536">Shifts an unsigned integer value (in zeroes) to the right by a specified number of bits, pushing the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3537">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3537">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3538">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3538">Format</span></span>|<span data-ttu-id="e5fd8-3539">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3539">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3540">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3540">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3541">64</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3541">64</span></span>|<span data-ttu-id="e5fd8-3542">shr</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3542">shr.un</span></span>|<span data-ttu-id="e5fd8-3543">整数を右にシフトします (0 でシフト)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3543">Shifts an integer to the right (shifting in zeroes).</span></span>|  
  
 <span data-ttu-id="e5fd8-3544">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3544">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3545">値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3545">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3546">シフトされるビットの量がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3546">The amount of bits to be shifted is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-3547">シフトするビット数。値はスタックからポップされます。値は、指定されたビット数だけ右にシフトされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3547">The number of bits to be shifted and the value are popped from the stack; the value is shifted right by the specified number of bits.</span></span>  
  
4.  <span data-ttu-id="e5fd8-3548">結果がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3548">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-3549">`shr.un` 命令は、指定されたビット数だけ右に値 (型 `int32`、`int64` または `native int`) をシフトします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3549">The `shr.un` instruction shifts the value (type `int32`, `int64` or `native int`) right by the specified number of bits.</span></span> <span data-ttu-id="e5fd8-3550">ビット数は `int32`、`int64` または `native int`型の値です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3550">The number of bits is a value of type `int32`, `int64` or `native int`.</span></span> <span data-ttu-id="e5fd8-3551">シフトするビット数が、指定された値の幅 (ビット単位) 以上の場合、戻り値は指定されません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3551">The return value is unspecified if the number of bits to be shifted is greater than or equal to the width (in bits) of the supplied value.</span></span>  
  
 <span data-ttu-id="e5fd8-3552">`Shr.un` は、各シフトの最上位位置にゼロビットを挿入します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3552">`Shr.un` inserts a zero bit in the highest position on each shift.</span></span>  
  
 <span data-ttu-id="e5fd8-3553">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`shr.un` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3553">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `shr.un` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sizeof">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sizeof;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sizeof" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sizeof" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sizeof As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sizeof;" />
      <MemberSignature Language="F#" Value=" staticval mutable Sizeof : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Sizeof" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3554">提供された値型のサイズ (バイト単位) を評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3554">Pushes the size, in bytes, of a supplied value type onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3555">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3555">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3556">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3556">Format</span></span>|<span data-ttu-id="e5fd8-3557">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3557">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3558">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3558">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3559">FE 1C < `T` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-3559">FE 1C < `T` ></span></span>|<span data-ttu-id="e5fd8-3560">sizeof `valType`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3560">sizeof `valType`</span></span>|<span data-ttu-id="e5fd8-3561">値型のサイズをバイト単位で `unsigned int32`としてプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3561">Push the size, in bytes, of a value type as an `unsigned int32`.</span></span>|  
  
 <span data-ttu-id="e5fd8-3562">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3562">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3563">指定した値の型 (`valType`) のサイズ (バイト単位) がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3563">The size (in bytes) of the supplied value type (`valType`) is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-3564">`valType` は、値型、参照型、またはジェネリック型パラメーターを指定するメタデータトークン (`typeref` または `typedef`) である必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3564">`valType` must be a metadata token (a `typeref` or `typedef`) that specifies a value type, reference type, or generic type parameter.</span></span>  
  
 <span data-ttu-id="e5fd8-3565">参照型の場合、返されるサイズは、対応する型の参照値のサイズ (32 ビットシステムでは4バイト) であり、参照値で参照されるオブジェクトに格納されているデータのサイズではありません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3565">For a reference type, the size returned is the size of a reference value of the corresponding type (4 bytes on 32-bit systems), not the size of the data stored in objects referred to by the reference value.</span></span> <span data-ttu-id="e5fd8-3566">ジェネリック型パラメーターは、それを定義する型またはメソッドの本体でのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3566">A generic type parameter can be used only in the body of the type or method that defines it.</span></span> <span data-ttu-id="e5fd8-3567">その型またはメソッドがインスタンス化されると、ジェネリック型パラメーターは値型または参照型に置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3567">When that type or method is instantiated, the generic type parameter is replaced by a value type or reference type.</span></span>  
  
 <span data-ttu-id="e5fd8-3568">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`sizeof` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3568">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sizeof` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Type%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Starg">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Starg;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Starg" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Starg" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Starg As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Starg;" />
      <MemberSignature Language="F#" Value=" staticval mutable Starg : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Starg" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3569">評価スタックの一番上にある値を指定したインデックスの引数スロットに格納します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3569">Stores the value on top of the evaluation stack in the argument slot at a specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3570">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3570">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3571">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3571">Format</span></span>|<span data-ttu-id="e5fd8-3572">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3572">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3573">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3573">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3574">FE 0B < `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-3574">FE 0B < `unsigned int16` ></span></span>|<span data-ttu-id="e5fd8-3575">starg `num`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3575">starg `num`</span></span>|<span data-ttu-id="e5fd8-3576">スタックから上位の値をポップし、引数スロット `num`に格納します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3576">Pops the top value from the stack and stores it in argument slot `num`.</span></span>|  
  
 <span data-ttu-id="e5fd8-3577">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3577">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3578">スタックの一番上にある値はポップされ、引数スロット `num`に配置されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3578">The value currently on top of the stack is popped and placed in argument slot `num`.</span></span>  
  
 <span data-ttu-id="e5fd8-3579">`starg` 命令は、スタックから値をポップし、引数スロット `num`に配置します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3579">The `starg` instruction pops a value from the stack and places it in argument slot `num`.</span></span> <span data-ttu-id="e5fd8-3580">値の型は、現在のメソッドのシグネチャで指定されている引数の型と一致している必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3580">The type of the value must match the type of the argument, as specified in the current method's signature.</span></span>  
  
 <span data-ttu-id="e5fd8-3581">可変個引数リストを受け取るプロシージャの場合、`starg` 命令は、シグネチャの変数部分ではなく、初期の固定引数に対してのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3581">For procedures that take a variable argument list, the `starg` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 <span data-ttu-id="e5fd8-3582">4バイト未満の整数値を保持する引数にストアを実行すると、スタックから引数に移動するときに値が切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3582">Performing a store into arguments that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the argument.</span></span> <span data-ttu-id="e5fd8-3583">浮動小数点値は、ネイティブサイズ (型 `F`) から引数に関連付けられているサイズに丸められます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3583">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="e5fd8-3584">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`starg` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3584">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `starg` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Int16%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Starg_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Starg_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Starg_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Starg_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Starg_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Starg_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Starg_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Starg_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3585">評価スタックの一番上にある値を指定したインデックスの引数スロットに格納します (短い形式)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3585">Stores the value on top of the evaluation stack in the argument slot at a specified index, short form.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3586">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3586">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3587">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3587">Format</span></span>|<span data-ttu-id="e5fd8-3588">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3588">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3589">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3589">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3590">10 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-3590">10 < `unsigned int8` ></span></span>|<span data-ttu-id="e5fd8-3591">starg `num`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3591">starg.s `num`</span></span>|<span data-ttu-id="e5fd8-3592">スタックからトップ値をポップし、引数スロット `num`、短い形式で格納します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3592">Pops the top value from the stack and stores it in argument slot `num`, short form.</span></span>|  
  
 <span data-ttu-id="e5fd8-3593">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3593">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3594">スタックの一番上にある値はポップされ、引数スロット `num`に配置されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3594">The value currently on top of the stack is popped and placed in argument slot `num`.</span></span>  
  
 <span data-ttu-id="e5fd8-3595">`starg.s` 命令は、スタックから値をポップし、引数スロット `num`に配置します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3595">The `starg.s` instruction pops a value from the stack and places it in argument slot `num`.</span></span> <span data-ttu-id="e5fd8-3596">値の型は、現在のメソッドのシグネチャで指定されている引数の型と一致している必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3596">The type of the value must match the type of the argument, as specified in the current method's signature.</span></span>  
  
 <span data-ttu-id="e5fd8-3597">`starg.s` 命令は、最初の256引数で使用するための効率的なエンコードを提供します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3597">The `starg.s` instruction provides an efficient encoding for use with the first 256 arguments.</span></span>  
  
 <span data-ttu-id="e5fd8-3598">可変個引数リストを受け取るプロシージャの場合、`starg.s` 命令は、シグネチャの変数部分ではなく、初期の固定引数に対してのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3598">For procedures that take a variable argument list, the `starg.s` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 <span data-ttu-id="e5fd8-3599">4バイト未満の整数値を保持する引数にストアを実行すると、スタックから引数に移動するときに値が切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3599">Performing a store into arguments that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the argument.</span></span> <span data-ttu-id="e5fd8-3600">浮動小数点値は、ネイティブサイズ (型 `F`) から引数に関連付けられているサイズに丸められます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3600">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="e5fd8-3601">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`starg.s` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3601">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `starg.s` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Byte%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3602">指定のインデックス位置にある配列要素を評価スタックの、命令で指定された型の値に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3602">Replaces the array element at a given index with the value on the evaluation stack, whose type is specified in the instruction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3603">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3603">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3604">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3604">Format</span></span>|<span data-ttu-id="e5fd8-3605">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3605">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3606">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3606">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3607">A4 < `T` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-3607">A4 < `T` ></span></span>|<span data-ttu-id="e5fd8-3608">stelem `typeTok`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3608">stelem `typeTok`</span></span>|<span data-ttu-id="e5fd8-3609">指定したインデックス位置にある配列要素を、スタックの `typeTok` 型の値に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3609">Replaces the array element at the supplied index with a value of type `typeTok` on the stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-3610">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3610">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3611">配列へのオブジェクト参照 `array`がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3611">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3612">`array` 内の要素に対するインデックス値 `index`がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3612">An index value, `index`, to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-3613">命令で指定された型の値がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3613">A value of the type specified in the instruction is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="e5fd8-3614">値、インデックス、および配列参照がスタックからポップされます。値は、指定されたインデックス位置にある配列要素に格納されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3614">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="e5fd8-3615">`stelem` 命令は、1次元 `array` 配列内の指定された0から始まるインデックス位置にある要素の値を、の値に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3615">The `stelem` instruction replaces the value of the element at the supplied zero-based index in the one-dimensional array `array` with the value.</span></span> <span data-ttu-id="e5fd8-3616">この値には、命令で `typeTok` トークンによって指定された型があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3616">The value has the type specified by the token `typeTok` in the instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-3617">配列はオブジェクトであり、そのため `O`型の値によって表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3617">Arrays are objects, and hence represented by a value of type `O`.</span></span> <span data-ttu-id="e5fd8-3618">インデックスは `native int`型です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3618">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="e5fd8-3619">`array` が null 参照の場合、<xref:System.NullReferenceException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3619"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="e5fd8-3620"><xref:System.IndexOutOfRangeException> は、`index` が負の場合、または `array`のバインドより大きい場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3620"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="e5fd8-3621">`array` が必要な型の要素を保持していない場合、<xref:System.ArrayTypeMismatchException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3621"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="e5fd8-3622">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`stelem` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3622">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Type%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3623">指定のインデックス位置にある配列要素を評価スタックの <see langword="native int" /> 値に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3623">Replaces the array element at a given index with the <see langword="native int" /> value on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3624">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3624">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3625">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3625">Format</span></span>|<span data-ttu-id="e5fd8-3626">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3626">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3627">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3627">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3628">9B</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3628">9B</span></span>|<span data-ttu-id="e5fd8-3629">stelem.i</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3629">stelem.i</span></span>|<span data-ttu-id="e5fd8-3630">指定したインデックス位置にある配列要素を、スタックの `native int` 値で置き換えます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3630">Replaces an array element at the supplied index with the `native int` value on the stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-3631">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3631">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3632">配列へのオブジェクト参照 `array`がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3632">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3633">`array` 内の要素への有効なインデックスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3633">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-3634">値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3634">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="e5fd8-3635">値、インデックス、および配列参照がスタックからポップされます。値は、指定されたインデックス位置にある配列要素に格納されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3635">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="e5fd8-3636">`stelem.i` 命令は、1次元配列 `array` の要素 `index` の値を、スタックにプッシュされた `native int` 値に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3636">The `stelem.i` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `native int` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-3637">配列はオブジェクトであり、そのため `O`型の値によって表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3637">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="e5fd8-3638">インデックスは `native int`型です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3638">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="e5fd8-3639">`array` が null 参照の場合、<xref:System.NullReferenceException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3639"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="e5fd8-3640"><xref:System.IndexOutOfRangeException> は、`index` が負の場合、または `array`のバインドより大きい場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3640"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="e5fd8-3641">`array` が必要な型の要素を保持していない場合、<xref:System.ArrayTypeMismatchException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3641"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="e5fd8-3642">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`stelem.i` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3642">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3643">指定のインデックス位置にある配列要素を評価スタックの <see langword="int8" /> 値に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3643">Replaces the array element at a given index with the <see langword="int8" /> value on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3644">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3644">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3645">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3645">Format</span></span>|<span data-ttu-id="e5fd8-3646">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3646">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3647">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3647">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3648">9C</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3648">9C</span></span>|<span data-ttu-id="e5fd8-3649">stelem.i1</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3649">stelem.i1</span></span>|<span data-ttu-id="e5fd8-3650">指定したインデックス位置にある配列要素を、スタックの `int8` 値で置き換えます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3650">Replaces an array element at the supplied index with the `int8` value on the stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-3651">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3651">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3652">配列へのオブジェクト参照 `array`がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3652">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3653">`array` 内の要素への有効なインデックスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3653">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-3654">値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3654">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="e5fd8-3655">値、インデックス、および配列参照がスタックからポップされます。値は、指定されたインデックス位置にある配列要素に格納されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3655">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="e5fd8-3656">`stelem.i1` 命令は、1次元配列 `array` の要素 `index` の値を、スタックにプッシュされた `int8` 値に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3656">The `stelem.i1` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int8` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-3657">配列はオブジェクトであり、そのため `O`型の値によって表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3657">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="e5fd8-3658">インデックスは `native int`型です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3658">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="e5fd8-3659">`array` が null 参照の場合、<xref:System.NullReferenceException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3659"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="e5fd8-3660"><xref:System.IndexOutOfRangeException> は、`index` が負の場合、または `array`のバインドより大きい場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3660"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="e5fd8-3661">`array` が必要な型の要素を保持していない場合、<xref:System.ArrayTypeMismatchException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3661"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="e5fd8-3662">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`stelem.i1` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3662">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i1` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3663">指定のインデックス位置にある配列要素を評価スタックの <see langword="int16" /> 値に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3663">Replaces the array element at a given index with the <see langword="int16" /> value on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3664">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3664">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3665">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3665">Format</span></span>|<span data-ttu-id="e5fd8-3666">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3666">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3667">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3667">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3668">9D</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3668">9D</span></span>|<span data-ttu-id="e5fd8-3669">stelem.i2</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3669">stelem.i2</span></span>|<span data-ttu-id="e5fd8-3670">指定したインデックス位置にある配列要素を、スタックの `int16` 値で置き換えます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3670">Replaces an array element at the supplied index with the `int16` value on the stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-3671">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3671">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3672">配列へのオブジェクト参照 `array`がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3672">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3673">`array` 内の要素への有効なインデックスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3673">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-3674">値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3674">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="e5fd8-3675">値、インデックス、および配列参照がスタックからポップされます。値は、指定されたインデックス位置にある配列要素に格納されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3675">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="e5fd8-3676">`stelem.i2` 命令は、1次元配列 `array` の要素 `index` の値を、スタックにプッシュされた `int16` 値に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3676">The `stelem.i2` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int16` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-3677">配列はオブジェクトであり、そのため `O`型の値によって表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3677">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="e5fd8-3678">インデックスは `native int`型です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3678">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="e5fd8-3679">`array` が null 参照の場合、<xref:System.NullReferenceException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3679"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="e5fd8-3680"><xref:System.IndexOutOfRangeException> は、`index` が負の場合、または `array`のバインドより大きい場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3680"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="e5fd8-3681">`array` が必要な型の要素を保持していない場合、<xref:System.ArrayTypeMismatchException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3681"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="e5fd8-3682">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`stelem.i2` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3682">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i2` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3683">指定のインデックス位置にある配列要素を評価スタックの <see langword="int32" /> 値に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3683">Replaces the array element at a given index with the <see langword="int32" /> value on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3684">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3684">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3685">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3685">Format</span></span>|<span data-ttu-id="e5fd8-3686">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3686">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3687">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3687">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3688">9E</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3688">9E</span></span>|<span data-ttu-id="e5fd8-3689">stelem.i4</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3689">stelem.i4</span></span>|<span data-ttu-id="e5fd8-3690">指定したインデックス位置にある配列要素を、スタックの `int32` 値で置き換えます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3690">Replaces an array element at the supplied index with the `int32` value on the stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-3691">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3691">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3692">配列へのオブジェクト参照 `array`がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3692">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3693">`array` 内の要素への有効なインデックスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3693">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-3694">値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3694">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="e5fd8-3695">値、インデックス、および配列参照がスタックからポップされます。値は、指定されたインデックス位置にある配列要素に格納されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3695">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="e5fd8-3696">`stelem.i4` 命令は、1次元配列 `array` の要素 `index` の値を、スタックにプッシュされた `int32` 値に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3696">The `stelem.i4` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int32` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-3697">配列はオブジェクトであり、そのため `O`型の値によって表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3697">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="e5fd8-3698">インデックスは `native int`型です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3698">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="e5fd8-3699">`array` が null 参照の場合、<xref:System.NullReferenceException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3699"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="e5fd8-3700"><xref:System.IndexOutOfRangeException> は、`index` が負の場合、または `array`のバインドより大きい場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3700"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="e5fd8-3701">`array` が必要な型の要素を保持していない場合、<xref:System.ArrayTypeMismatchException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3701"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="e5fd8-3702">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`stelem.i4` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3702">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i4` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3703">指定のインデックス位置にある配列要素を評価スタックの <see langword="int64" /> 値に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3703">Replaces the array element at a given index with the <see langword="int64" /> value on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3704">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3704">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3705">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3705">Format</span></span>|<span data-ttu-id="e5fd8-3706">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3706">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3707">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3707">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3708">9F</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3708">9F</span></span>|<span data-ttu-id="e5fd8-3709">stelem.i8</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3709">stelem.i8</span></span>|<span data-ttu-id="e5fd8-3710">指定したインデックス位置にある配列要素を、スタックの `int64` 値で置き換えます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3710">Replaces an array element at the supplied index with the `int64` value on the stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-3711">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3711">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3712">配列へのオブジェクト参照 `array`がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3712">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3713">`array` 内の要素への有効なインデックスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3713">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-3714">値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3714">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="e5fd8-3715">値、インデックス、および配列参照がスタックからポップされます。値は、指定されたインデックス位置にある配列要素に格納されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3715">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="e5fd8-3716">`stelem.i8` 命令は、1次元配列 `array` の要素 `index` の値を、スタックにプッシュされた `int64` 値に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3716">The `stelem.i8` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int64` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-3717">配列はオブジェクトであり、そのため `O`型の値によって表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3717">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="e5fd8-3718">インデックスは `native int`型です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3718">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="e5fd8-3719">`array` が null 参照の場合、<xref:System.NullReferenceException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3719"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="e5fd8-3720"><xref:System.IndexOutOfRangeException> は、`index` が負の場合、または `array`のバインドより大きい場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3720"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="e5fd8-3721">`array` が必要な型の要素を保持していない場合、<xref:System.ArrayTypeMismatchException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3721"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="e5fd8-3722">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`stelem.i8` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3722">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i8` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3723">指定のインデックス位置にある配列要素を評価スタックの <see langword="float32" /> 値に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3723">Replaces the array element at a given index with the <see langword="float32" /> value on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3724">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3724">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3725">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3725">Format</span></span>|<span data-ttu-id="e5fd8-3726">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3726">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3727">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3727">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3728">A0</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3728">A0</span></span>|<span data-ttu-id="e5fd8-3729">stelem.r4</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3729">stelem.r4</span></span>|<span data-ttu-id="e5fd8-3730">指定したインデックス位置にある配列要素を、スタックの `float32` 値で置き換えます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3730">Replaces an array element at the supplied index with the `float32` value on the stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-3731">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3731">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3732">配列へのオブジェクト参照 `array`がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3732">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3733">`array` 内の要素への有効なインデックスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3733">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-3734">値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3734">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="e5fd8-3735">値、インデックス、および配列参照がスタックからポップされます。値は、指定されたインデックス位置にある配列要素に格納されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3735">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="e5fd8-3736">`stelem.r4` 命令は、1次元配列 `array` の要素 `index` の値を、スタックにプッシュされた `float32` 値に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3736">The `stelem.r4` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `float32` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-3737">配列はオブジェクトであり、そのため `O`型の値によって表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3737">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="e5fd8-3738">インデックスは `native int`型です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3738">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="e5fd8-3739">`array` が null 参照の場合、<xref:System.NullReferenceException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3739"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="e5fd8-3740"><xref:System.IndexOutOfRangeException> は、`index` が負の場合、または `array`のバインドより大きい場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3740"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="e5fd8-3741">`array` が必要な型の要素を保持していない場合、<xref:System.ArrayTypeMismatchException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3741"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="e5fd8-3742">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`stelem.r4` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3742">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.r4` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3743">指定のインデックス位置にある配列要素を評価スタックの <see langword="float64" /> 値に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3743">Replaces the array element at a given index with the <see langword="float64" /> value on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3744">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3744">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3745">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3745">Format</span></span>|<span data-ttu-id="e5fd8-3746">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3746">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3747">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3747">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3748">A1</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3748">A1</span></span>|<span data-ttu-id="e5fd8-3749">stelem.r8</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3749">stelem.r8</span></span>|<span data-ttu-id="e5fd8-3750">指定したインデックス位置にある配列要素を、スタックの `float64` 値で置き換えます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3750">Replaces an array element at the supplied index with the `float64` value on the stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-3751">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3751">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3752">配列へのオブジェクト参照 `array`がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3752">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3753">`array` 内の要素への有効なインデックスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3753">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-3754">値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3754">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="e5fd8-3755">値、インデックス、および配列参照がスタックからポップされます。値は、指定されたインデックス位置にある配列要素に格納されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3755">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="e5fd8-3756">`stelem.r8` 命令は、1次元配列 `array` の要素 `index` の値を、スタックにプッシュされた `float64` 値に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3756">The `stelem.r8` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `float64` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-3757">配列はオブジェクトであり、そのため `O`型の値によって表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3757">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="e5fd8-3758">インデックスは `native int`型です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3758">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="e5fd8-3759">`array` が null 参照の場合、<xref:System.NullReferenceException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3759"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="e5fd8-3760"><xref:System.IndexOutOfRangeException> は、`index` が負の場合、または `array`のバインドより大きい場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3760"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="e5fd8-3761">`array` が必要な型の要素を保持していない場合、<xref:System.ArrayTypeMismatchException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3761"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="e5fd8-3762">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`stelem.r8` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3762">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.r8` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_Ref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_Ref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_Ref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3763">指定のインデックス位置にある配列要素をオブジェクト参照値 (<see langword="O" /> 型) に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3763">Replaces the array element at a given index with the object ref value (type <see langword="O" />) on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3764">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3764">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3765">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3765">Format</span></span>|<span data-ttu-id="e5fd8-3766">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3766">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3767">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3767">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3768">A2</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3768">A2</span></span>|<span data-ttu-id="e5fd8-3769">stelem.ref</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3769">stelem.ref</span></span>|<span data-ttu-id="e5fd8-3770">指定したインデックス位置にある配列要素を、スタック上の `ref` 値 (型 `O`) で置き換えます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3770">Replaces an array element at the supplied index with the `ref` value (type `O`) on the stack.</span></span>|  
  
 <span data-ttu-id="e5fd8-3771">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3771">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3772">配列へのオブジェクト参照 `array`がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3772">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3773">`array` 内の要素への有効なインデックスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3773">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-3774">値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3774">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="e5fd8-3775">値、インデックス、および配列参照がスタックからポップされます。値は、指定されたインデックス位置にある配列要素に格納されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3775">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="e5fd8-3776">`stelem.ref` 命令は、1次元 `array` 配列内の指定されたインデックス位置にある要素の値を、スタックにプッシュされた `ref` (型 `O`) 値に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3776">The `stelem.ref` instruction replaces the value of the element at the supplied index in the one-dimensional array `array` with the `ref` (type `O`) value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-3777">配列はオブジェクトであり、そのため `O`型の値によって表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3777">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="e5fd8-3778">インデックスは `native int`型です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3778">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="e5fd8-3779">`stelem.ref` は、値を配列要素に割り当てる前に、指定された値を `array` の要素型に暗黙的にキャストすることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3779">Note that `stelem.ref` implicitly casts the supplied value to the element type of `array` before assigning the value to the array element.</span></span> <span data-ttu-id="e5fd8-3780">検証されたコードの場合でも、このキャストは失敗する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3780">This cast can fail, even for verified code.</span></span> <span data-ttu-id="e5fd8-3781">したがって、`stelem.ref` 命令は <xref:System.InvalidCastException>をスローできます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3781">Thus the `stelem.ref` instruction can throw <xref:System.InvalidCastException>.</span></span> <span data-ttu-id="e5fd8-3782">0から始まらない1次元配列、および多次元配列の場合、<xref:System.Array> クラスは <xref:System.Array.SetValue%2A> メソッドを提供します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3782">For one-dimensional arrays that aren't zero-based and for multidimensional arrays, the <xref:System.Array> class provides a <xref:System.Array.SetValue%2A> method.</span></span>  
  
 <span data-ttu-id="e5fd8-3783">`array` が null 参照の場合、<xref:System.NullReferenceException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3783"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="e5fd8-3784"><xref:System.IndexOutOfRangeException> は、`index` が負の場合、または `array`のバインドより大きい場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3784"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="e5fd8-3785">`array` が必要な型の要素を保持していない場合、<xref:System.ArrayTypeMismatchException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3785"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="e5fd8-3786">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`stelem.ref` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3786">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.ref` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stfld;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stfld : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stfld" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3787">オブジェクト参照またはポインターのフィールドに格納された値を新しい値に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3787">Replaces the value stored in the field of an object reference or pointer with a new value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3788">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3788">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3789">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3789">Format</span></span>|<span data-ttu-id="e5fd8-3790">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3790">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3791">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3791">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3792">7D < `T` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-3792">7D < `T` ></span></span>|<span data-ttu-id="e5fd8-3793">stfld `field`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3793">stfld `field`</span></span>|<span data-ttu-id="e5fd8-3794">オブジェクトの `field` の値を新しい値に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3794">Replaces the value of `field` of the object with a new value.</span></span>|  
  
 <span data-ttu-id="e5fd8-3795">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3795">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3796">オブジェクト参照またはポインターがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3796">An object reference or pointer is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3797">値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3797">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-3798">値とオブジェクト参照/ポインターがスタックからポップされます。オブジェクトの `field` の値は、指定された値に置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3798">The value and the object reference/pointer are popped from the stack; the value of `field` in the object is replaced with the supplied value.</span></span>  
  
 <span data-ttu-id="e5fd8-3799">`stfld` 命令は、オブジェクト (型 `O`) のフィールドの値、またはポインター (型 `native int`、`&`、または `*`) を指定された値で置き換えます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3799">The `stfld` instruction replaces the value of a field of an object (type `O`) or via a pointer (type `native int`, `&`, or `*`) with a given value.</span></span> <span data-ttu-id="e5fd8-3800">`Field` は、フィールドメンバー参照を参照するメタデータトークンです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3800">`Field` is a metadata token that refers to a field member reference.</span></span> <span data-ttu-id="e5fd8-3801">`stfld` 命令は、<xref:System.Reflection.Emit.OpCodes.Unaligned> と <xref:System.Reflection.Emit.OpCodes.Volatile>のいずれかまたは両方のプレフィックスを持つことができます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3801">The `stfld` instruction can have a prefix of either or both of <xref:System.Reflection.Emit.OpCodes.Unaligned> and <xref:System.Reflection.Emit.OpCodes.Volatile>.</span></span>  
  
 <span data-ttu-id="e5fd8-3802">オブジェクト参照またはポインターが null 参照で、フィールドが静的でない場合、<xref:System.NullReferenceException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3802"><xref:System.NullReferenceException> is thrown if the object reference or pointer is a null reference and the field isn't static.</span></span>  
  
 <span data-ttu-id="e5fd8-3803">メタデータに `field` が見つからない場合、<xref:System.MissingFieldException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3803"><xref:System.MissingFieldException> is thrown if `field` is not found in the metadata.</span></span> <span data-ttu-id="e5fd8-3804">これは通常、Microsoft 中間言語 (MSIL) 命令が実行時ではなくネイティブコードに変換される場合にチェックされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3804">This is typically checked when the Microsoft Intermediate Language (MSIL) instruction is converted to native code, not at runtime.</span></span>  
  
 <span data-ttu-id="e5fd8-3805">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`stfld` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3805">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stfld` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.FieldInfo%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3806">提供されたアドレスに <see langword="native int" /> 型の値を格納します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3806">Stores a value of type <see langword="native int" /> at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3807">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3807">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3808">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3808">Format</span></span>|<span data-ttu-id="e5fd8-3809">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3809">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3810">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3810">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3811">DF</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3811">DF</span></span>|<span data-ttu-id="e5fd8-3812">stind</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3812">stind.i</span></span>|<span data-ttu-id="e5fd8-3813">指定されたアドレスに `native int` 値を格納します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3813">Stores a `native int` value at a given address.</span></span>|  
  
 <span data-ttu-id="e5fd8-3814">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3814">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3815">アドレスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3815">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3816">値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3816">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-3817">値とアドレスはスタックからポップされます。値はアドレスに格納されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3817">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="e5fd8-3818">`stind.i` 命令は、指定されたアドレス (型 `native int`、`*`、または `&`) に `native int` 値を格納します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3818">The `stind.i` instruction stores a `native int` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="e5fd8-3819">型セーフ操作を行うには、ポインターの型と一貫性のある方法で `stind.i` 命令を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3819">Type safe operation requires that the `stind.i` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="e5fd8-3820">`stind.i` 命令の操作は、直前の <xref:System.Reflection.Emit.OpCodes.Volatile> または <xref:System.Reflection.Emit.OpCodes.Unaligned> プレフィックス命令によって変更できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3820">The operation of the `stind.i` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-3821">命令サフィックスによって暗黙的に指定された引数の型に対して `addr` が自然にアラインされていない場合、<xref:System.NullReferenceException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3821"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="e5fd8-3822">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`stind.i` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3822">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3823">提供されたアドレスに <see langword="int8" /> 型の値を格納します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3823">Stores a value of type <see langword="int8" /> at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3824">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3824">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3825">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3825">Format</span></span>|<span data-ttu-id="e5fd8-3826">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3826">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3827">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3827">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3828">52</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3828">52</span></span>|<span data-ttu-id="e5fd8-3829">stind.i1</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3829">stind.i1</span></span>|<span data-ttu-id="e5fd8-3830">指定されたアドレスに `int8` 値を格納します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3830">Stores an `int8` value at a given address.</span></span>|  
  
 <span data-ttu-id="e5fd8-3831">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3831">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3832">アドレスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3832">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3833">値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3833">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-3834">値とアドレスはスタックからポップされます。値はアドレスに格納されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3834">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="e5fd8-3835">`stind.i1` 命令は、指定されたアドレス (型 `native int`、`*`、または `&`) に `int8` 値を格納します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3835">The `stind.i1` instruction stores an `int8` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="e5fd8-3836">型セーフ操作を行うには、ポインターの型と一貫性のある方法で `stind.i1` 命令を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3836">Type safe operation requires that the `stind.i1` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="e5fd8-3837">`stind.i1` 命令の操作は、直前の <xref:System.Reflection.Emit.OpCodes.Volatile> または <xref:System.Reflection.Emit.OpCodes.Unaligned> プレフィックス命令によって変更できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3837">The operation of the `stind.i1` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-3838">命令サフィックスによって暗黙的に指定された引数の型に対して `addr` が自然にアラインされていない場合、<xref:System.NullReferenceException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3838"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="e5fd8-3839">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`stind.i1` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3839">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i1` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3840">提供されたアドレスに <see langword="int16" /> 型の値を格納します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3840">Stores a value of type <see langword="int16" /> at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3841">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3841">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3842">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3842">Format</span></span>|<span data-ttu-id="e5fd8-3843">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3843">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3844">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3844">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3845">53</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3845">53</span></span>|<span data-ttu-id="e5fd8-3846">stind.i2</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3846">stind.i2</span></span>|<span data-ttu-id="e5fd8-3847">指定されたアドレスに `int16` 値を格納します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3847">Stores an `int16` value at a given address.</span></span>|  
  
 <span data-ttu-id="e5fd8-3848">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3848">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3849">アドレスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3849">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3850">値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3850">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-3851">値とアドレスはスタックからポップされます。値はアドレスに格納されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3851">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="e5fd8-3852">`stind.i2` 命令は、指定されたアドレス (型 `native int`、`*`、または `&`) に `int16` 値を格納します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3852">The `stind.i2` instruction stores an `int16` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="e5fd8-3853">型セーフ操作を行うには、ポインターの型と一貫性のある方法で `stind.2i` 命令を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3853">Type safe operation requires that the `stind.2i` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="e5fd8-3854">`stind.i2` 命令の操作は、直前の <xref:System.Reflection.Emit.OpCodes.Volatile> または <xref:System.Reflection.Emit.OpCodes.Unaligned> プレフィックス命令によって変更できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3854">The operation of the `stind.i2` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-3855">命令サフィックスによって暗黙的に指定された引数の型に対して `addr` が自然にアラインされていない場合、<xref:System.NullReferenceException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3855"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="e5fd8-3856">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`stind.i2` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3856">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i2` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3857">提供されたアドレスに <see langword="int32" /> 型の値を格納します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3857">Stores a value of type <see langword="int32" /> at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3858">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3858">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3859">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3859">Format</span></span>|<span data-ttu-id="e5fd8-3860">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3860">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3861">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3861">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3862">54</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3862">54</span></span>|<span data-ttu-id="e5fd8-3863">stind.i4</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3863">stind.i4</span></span>|<span data-ttu-id="e5fd8-3864">指定されたアドレスに `int32` 値を格納します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3864">Stores an `int32` value at a given address.</span></span>|  
  
 <span data-ttu-id="e5fd8-3865">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3865">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3866">アドレスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3866">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3867">値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3867">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-3868">値とアドレスはスタックからポップされます。値はアドレスに格納されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3868">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="e5fd8-3869">`stind.i4` 命令は、指定されたアドレス (型 `native int`、`*`、または `&`) に `int32` 値を格納します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3869">The `stind.i4` instruction stores an `int32` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="e5fd8-3870">型セーフ操作を行うには、ポインターの型と一貫性のある方法で `stind.i4` 命令を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3870">Type safe operation requires that the `stind.i4` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="e5fd8-3871">`stind.i4` 命令の操作は、直前の <xref:System.Reflection.Emit.OpCodes.Volatile> または <xref:System.Reflection.Emit.OpCodes.Unaligned> プレフィックス命令によって変更できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3871">The operation of the `stind.i4` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-3872">命令サフィックスによって暗黙的に指定された引数の型に対して `addr` が自然にアラインされていない場合、<xref:System.NullReferenceException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3872"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="e5fd8-3873">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`stind.i4` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3873">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i4` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3874">提供されたアドレスに <see langword="int64" /> 型の値を格納します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3874">Stores a value of type <see langword="int64" /> at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3875">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3875">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3876">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3876">Format</span></span>|<span data-ttu-id="e5fd8-3877">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3877">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3878">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3878">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3879">55</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3879">55</span></span>|<span data-ttu-id="e5fd8-3880">stind.i8</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3880">stind.i8</span></span>|<span data-ttu-id="e5fd8-3881">指定されたアドレスに `int64` 値を格納します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3881">Stores an `int64` value at a given address.</span></span>|  
  
 <span data-ttu-id="e5fd8-3882">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3882">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3883">アドレスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3883">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3884">値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3884">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-3885">値とアドレスはスタックからポップされます。値はアドレスに格納されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3885">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="e5fd8-3886">`stind.i8` 命令は、指定されたアドレス (型 `native int`、`*`、または `&`) に `int64` 値を格納します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3886">The `stind.i8` instruction stores an `int64` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="e5fd8-3887">型セーフ操作を行うには、ポインターの型と一貫性のある方法で `stind.i8` 命令を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3887">Type safe operation requires that the `stind.i8` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="e5fd8-3888">`stind.i` 命令の操作は、直前の <xref:System.Reflection.Emit.OpCodes.Volatile> または <xref:System.Reflection.Emit.OpCodes.Unaligned> プレフィックス命令によって変更できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3888">The operation of the `stind.i` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-3889">命令サフィックスによって暗黙的に指定された引数の型に対して `addr` が自然にアラインされていない場合、<xref:System.NullReferenceException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3889"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="e5fd8-3890">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`stind.i8` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3890">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i8` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3891">提供されたアドレスに <see langword="float32" /> 型の値を格納します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3891">Stores a value of type <see langword="float32" /> at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3892">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3892">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3893">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3893">Format</span></span>|<span data-ttu-id="e5fd8-3894">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3894">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3895">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3895">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3896">56</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3896">56</span></span>|<span data-ttu-id="e5fd8-3897">stind.r4</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3897">stind.r4</span></span>|<span data-ttu-id="e5fd8-3898">指定されたアドレスに `float32` 値を格納します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3898">Stores a `float32` value at a given address.</span></span>|  
  
 <span data-ttu-id="e5fd8-3899">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3899">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3900">アドレスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3900">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3901">値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3901">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-3902">値とアドレスはスタックからポップされます。値はアドレスに格納されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3902">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="e5fd8-3903">`stind.r4` 命令は、指定されたアドレス (型 `native int`、`*`、または `&`) に `float32` 値を格納します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3903">The `stind.r4` instruction stores a `float32` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="e5fd8-3904">型セーフ操作を行うには、ポインターの型と一貫性のある方法で `stind.r4` 命令を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3904">Type safe operation requires that the `stind.r4` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="e5fd8-3905">`stind.r4` 命令の操作は、直前の <xref:System.Reflection.Emit.OpCodes.Volatile> または <xref:System.Reflection.Emit.OpCodes.Unaligned> プレフィックス命令によって変更できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3905">The operation of the `stind.r4` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-3906">命令サフィックスによって暗黙的に指定された引数の型に対して `addr` が自然にアラインされていない場合、<xref:System.NullReferenceException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3906"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="e5fd8-3907">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`stind.r4` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3907">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.r4` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3908">提供されたアドレスに <see langword="float64" /> 型の値を格納します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3908">Stores a value of type <see langword="float64" /> at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3909">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3909">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3910">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3910">Format</span></span>|<span data-ttu-id="e5fd8-3911">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3911">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3912">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3912">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3913">57</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3913">57</span></span>|<span data-ttu-id="e5fd8-3914">stind.r8</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3914">stind.r8</span></span>|<span data-ttu-id="e5fd8-3915">指定されたアドレスに `float64` 値を格納します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3915">Stores a `float64` value at a given address.</span></span>|  
  
 <span data-ttu-id="e5fd8-3916">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3916">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3917">アドレスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3917">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3918">値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3918">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-3919">値とアドレスはスタックからポップされます。値はアドレスに格納されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3919">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="e5fd8-3920">`stind.r8` 命令は、指定されたアドレス (型 `native int`、`*`、または `&`) に `float64` 値を格納します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3920">The `stind.r8` instruction stores a `float64` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="e5fd8-3921">型セーフ操作を行うには、ポインターの型と一貫性のある方法で `stind.r8` 命令を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3921">Type safe operation requires that the `stind.r8` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="e5fd8-3922">`stind.r8` 命令の操作は、直前の <xref:System.Reflection.Emit.OpCodes.Volatile> または <xref:System.Reflection.Emit.OpCodes.Unaligned> プレフィックス命令によって変更できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3922">The operation of the `stind.r8` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-3923">命令サフィックスによって暗黙的に指定された引数の型に対して `addr` が自然にアラインされていない場合、<xref:System.NullReferenceException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3923"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="e5fd8-3924">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`stind.r8` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3924">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.r8` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_Ref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_Ref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_Ref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3925">提供されたアドレスにオブジェクト参照値を格納します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3925">Stores a object reference value at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3926">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3926">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3927">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3927">Format</span></span>|<span data-ttu-id="e5fd8-3928">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3928">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3929">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3929">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3930">51</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3930">51</span></span>|<span data-ttu-id="e5fd8-3931">stind.ref</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3931">stind.ref</span></span>|<span data-ttu-id="e5fd8-3932">指定されたアドレスにオブジェクト参照 (型 `O`) の値を格納します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3932">Stores an object reference (type `O`) value at a given address.</span></span>|  
  
 <span data-ttu-id="e5fd8-3933">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3933">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3934">アドレスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3934">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-3935">値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3935">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-3936">値とアドレスはスタックからポップされます。値はアドレスに格納されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3936">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="e5fd8-3937">`stind.ref` 命令は、指定されたアドレス (型 `native int`、`*`、または `&`) にオブジェクト参照値を格納します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3937">The `stind.ref` instruction stores an object reference value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="e5fd8-3938">型セーフ操作を行うには、ポインターの型と一貫性のある方法で `stind.ref` 命令を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3938">Type safe operation requires that the `stind.ref` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="e5fd8-3939">`stind.ref` 命令の操作は、直前の <xref:System.Reflection.Emit.OpCodes.Volatile> または <xref:System.Reflection.Emit.OpCodes.Unaligned> プレフィックス命令によって変更できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3939">The operation of the `stind.ref` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-3940">命令サフィックスによって暗黙的に指定された引数の型に対して `addr` が自然にアラインされていない場合、<xref:System.NullReferenceException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3940"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="e5fd8-3941">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`stind.ref` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3941">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.ref` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3942">評価スタックの一番上から現在の値をポップし、指定したインデックスのローカル変数リストに格納します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3942">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at a specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3943">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3943">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3944">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3944">Format</span></span>|<span data-ttu-id="e5fd8-3945">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3945">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3946">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3946">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3947">FE 0E < `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-3947">FE 0E < `unsigned int16` ></span></span>|<span data-ttu-id="e5fd8-3948">stloc `index`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3948">stloc `index`</span></span>|<span data-ttu-id="e5fd8-3949">スタックから値をポップし、`index`ローカル変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3949">Pops a value from the stack and stores it in local variable `index`.</span></span>|  
  
 <span data-ttu-id="e5fd8-3950">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3950">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3951">値はスタックからポップされ、ローカル変数 `index`に配置されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3951">A value is popped off of the stack and placed in local variable `index`.</span></span>  
  
 <span data-ttu-id="e5fd8-3952">`stloc` 命令は、トップ値を評価スタックからポップし、ローカル変数 number `index`に移動します。ローカル変数には、0以降の番号が付けられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3952">The `stloc` instruction pops the top value off the evaluation stack and moves it into local variable number `index`, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="e5fd8-3953">値の型は、現在のメソッドのローカルシグネチャで指定されているローカル変数の型と一致している必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3953">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="e5fd8-3954">4バイトよりも小さい整数値を保持しているローカル変数に格納すると、スタックからローカル変数に移動するときに値が切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3954">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="e5fd8-3955">浮動小数点値は、ネイティブサイズ (型 `F`) から引数に関連付けられているサイズに丸められます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3955">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="e5fd8-3956">Microsoft 中間言語 (MSIL) 命令を修正するには、`index` 有効なローカルインデックスである必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3956">Correct Microsoft Intermediate Language (MSIL) instructions require that `index` be a valid local index.</span></span> <span data-ttu-id="e5fd8-3957">`stloc` 命令の場合、`index` は 0 ~ 65534 の範囲で指定する必要があります (具体的には65535が有効ではありません)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3957">For the `stloc` instruction, `index` must lie in the range 0 to 65534 inclusive (specifically, 65535 is not valid).</span></span> <span data-ttu-id="e5fd8-3958">65535を除外する理由は実用的であると考えられます。実装では、2バイトの整数を使用して、ローカルのインデックスと、特定のメソッドのローカルの合計数を追跡します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3958">The reason for excluding 65535 is pragmatic: likely implementations will use a 2-byte integer to track both a local's index, as well as the total number of locals for a given method.</span></span> <span data-ttu-id="e5fd8-3959">65535のインデックスが有効になっている場合は、このようなメソッドでローカルの数を追跡するために、より広い整数が必要になります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3959">If an index of 65535 had been made valid, it would require a wider integer to track the number of locals in such a method.</span></span>  
  
 <span data-ttu-id="e5fd8-3960">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`stloc` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3960">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `stloc` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.LocalBuilder%29?displayProperty=nameWithType>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Int16%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_0;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_0 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3961">評価スタックの一番上から現在の値をポップし、インデックス 0 のローカル変数リストに格納します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3961">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 0.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3962">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3962">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3963">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3963">Format</span></span>|<span data-ttu-id="e5fd8-3964">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3964">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3965">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3965">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3966">0A</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3966">0A</span></span>|<span data-ttu-id="e5fd8-3967">stloc</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3967">stloc.0</span></span>|<span data-ttu-id="e5fd8-3968">スタックからローカル変数0に値をポップします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3968">Pops a value from the stack into local variable 0.</span></span>|  
  
 <span data-ttu-id="e5fd8-3969">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3969">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3970">値はスタックからポップされ、0によってインデックスが作成されたローカル変数に配置されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3970">A value is popped off of the stack and placed in the local variable indexed by 0.</span></span>  
  
 <span data-ttu-id="e5fd8-3971">`stloc.0` 命令は、トップ値を評価スタックからポップし、0でインデックス付けされたローカル変数に移動します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3971">The `stloc.0` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 0.</span></span> <span data-ttu-id="e5fd8-3972">値の型は、現在のメソッドのローカルシグネチャで指定されているローカル変数の型と一致している必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3972">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="e5fd8-3973">`stloc.0` は、ローカル変数0に値を格納するための特に効率的なエンコードです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3973">`stloc.0` is an especially efficient encoding for storing values in local variable 0.</span></span>  
  
 <span data-ttu-id="e5fd8-3974">4バイトよりも小さい整数値を保持しているローカル変数に格納すると、スタックからローカル変数に移動するときに値が切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3974">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="e5fd8-3975">浮動小数点値は、ネイティブサイズ (型 `F`) から引数に関連付けられているサイズに丸められます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3975">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="e5fd8-3976">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`stloc.0` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3976">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.0` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3977">評価スタックの一番上から現在の値をポップし、インデックス 1 のローカル変数リストに格納します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3977">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 1.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3978">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3978">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3979">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3979">Format</span></span>|<span data-ttu-id="e5fd8-3980">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3980">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3981">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3981">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3982">0B</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3982">0B</span></span>|<span data-ttu-id="e5fd8-3983">stloc</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3983">stloc.1</span></span>|<span data-ttu-id="e5fd8-3984">スタックからローカル変数1に値をポップします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3984">Pops a value from the stack into local variable 1.</span></span>|  
  
 <span data-ttu-id="e5fd8-3985">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3985">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-3986">値はスタックからポップされ、1によってインデックスが作成されたローカル変数に配置されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3986">A value is popped off of the stack and placed in the local variable indexed by 1.</span></span>  
  
 <span data-ttu-id="e5fd8-3987">`stloc.1` 命令は、トップ値を評価スタックからポップし、1でインデックス付けされたローカル変数に移動します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3987">The `stloc.1` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 1.</span></span> <span data-ttu-id="e5fd8-3988">値の型は、現在のメソッドのローカルシグネチャで指定されているローカル変数の型と一致している必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3988">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="e5fd8-3989">`stloc.1` は、ローカル変数1に値を格納するための特に効率的なエンコードです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3989">`stloc.1` is an especially efficient encoding for storing values in local variable 1.</span></span>  
  
 <span data-ttu-id="e5fd8-3990">4バイトよりも小さい整数値を保持しているローカル変数に格納すると、スタックからローカル変数に移動するときに値が切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3990">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="e5fd8-3991">浮動小数点値は、ネイティブサイズ (型 `F`) から引数に関連付けられているサイズに丸められます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3991">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="e5fd8-3992">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`stloc.1` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3992">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.1` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-3993">評価スタックの一番上から現在の値をポップし、インデックス 2 のローカル変数リストに格納します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3993">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 2.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-3994">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3994">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-3995">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3995">Format</span></span>|<span data-ttu-id="e5fd8-3996">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3996">Assembly Format</span></span>|<span data-ttu-id="e5fd8-3997">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3997">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-3998">0C</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3998">0C</span></span>|<span data-ttu-id="e5fd8-3999">stloc</span><span class="sxs-lookup"><span data-stu-id="e5fd8-3999">stloc.2</span></span>|<span data-ttu-id="e5fd8-4000">スタックからローカル変数2に値をポップします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4000">Pops a value from the stack into local variable 2</span></span>|  
  
 <span data-ttu-id="e5fd8-4001">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4001">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-4002">値はスタックからポップされ、2によってインデックスが作成されたローカル変数に格納されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4002">A value is popped off of the stack and placed in the local variable indexed by 2.</span></span>  
  
 <span data-ttu-id="e5fd8-4003">`stloc.2` 命令は、トップ値を評価スタックからポップし、2でインデックスが作成されたローカル変数に移動します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4003">The `stloc.2` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 2.</span></span> <span data-ttu-id="e5fd8-4004">値の型は、現在のメソッドのローカルシグネチャで指定されているローカル変数の型と一致している必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4004">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="e5fd8-4005">`stloc.2` は、ローカル変数2に値を格納するための特に効率的なエンコードです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4005">`stloc.2` is an especially efficient encoding for storing values in local variable 2.</span></span>  
  
 <span data-ttu-id="e5fd8-4006">4バイトよりも小さい整数値を保持しているローカル変数に格納すると、スタックからローカル変数に移動するときに値が切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4006">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="e5fd8-4007">浮動小数点値は、ネイティブサイズ (型 `F`) から引数に関連付けられているサイズに丸められます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4007">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="e5fd8-4008">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`stloc.2` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4008">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.2` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-4009">評価スタックの一番上から現在の値をポップし、インデックス 3 のローカル変数リストに格納します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4009">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 3.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-4010">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4010">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-4011">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4011">Format</span></span>|<span data-ttu-id="e5fd8-4012">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4012">Assembly Format</span></span>|<span data-ttu-id="e5fd8-4013">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4013">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-4014">0D</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4014">0D</span></span>|<span data-ttu-id="e5fd8-4015">stloc</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4015">stloc.3</span></span>|<span data-ttu-id="e5fd8-4016">スタックからローカル変数3に値をポップします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4016">Pops a value from the stack into local variable 3</span></span>|  
  
 <span data-ttu-id="e5fd8-4017">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4017">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-4018">値はスタックからポップされ、3によってインデックスが作成されたローカル変数に格納されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4018">A value is popped off of the stack and placed in the local variable indexed by 3.</span></span>  
  
 <span data-ttu-id="e5fd8-4019">`stloc.3` 命令は、トップ値を評価スタックからポップし、3によってインデックスが作成されたローカル変数に移動します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4019">The `stloc.3` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 3.</span></span> <span data-ttu-id="e5fd8-4020">値の型は、現在のメソッドのローカルシグネチャで指定されているローカル変数の型と一致している必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4020">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="e5fd8-4021">`stloc.3` は、ローカル変数3に値を格納するための特に効率的なエンコードです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4021">`stloc.3` is an especially efficient encoding for storing values in local variable 3.</span></span>  
  
 <span data-ttu-id="e5fd8-4022">4バイトよりも小さい整数値を保持しているローカル変数に格納すると、スタックからローカル変数に移動するときに値が切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4022">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="e5fd8-4023">浮動小数点値は、ネイティブサイズ (型 `F`) から引数に関連付けられているサイズに丸められます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4023">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="e5fd8-4024">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`stloc.3` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4024">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.3` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-4025">評価スタックの一番上から現在の値をポップし、<paramref name="index" /> のローカル変数リストに格納します (短い形式)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4025">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at <paramref name="index" /> (short form).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-4026">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4026">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-4027">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4027">Format</span></span>|<span data-ttu-id="e5fd8-4028">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4028">Assembly Format</span></span>|<span data-ttu-id="e5fd8-4029">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4029">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-4030">13 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-4030">13 < `unsigned int8` ></span></span>|<span data-ttu-id="e5fd8-4031">stloc `index`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4031">stloc.s `index`</span></span>|<span data-ttu-id="e5fd8-4032">スタックから値をポップし、ローカル変数 `index`、短い形式で格納します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4032">Pops a value from the stack and stores it in local variable `index`, short form.</span></span>|  
  
 <span data-ttu-id="e5fd8-4033">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4033">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-4034">値はスタックからポップされ、ローカル変数 `index`に配置されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4034">A value is popped off of the stack and placed in local variable `index`.</span></span>  
  
 <span data-ttu-id="e5fd8-4035">`stloc.s` 命令は、トップ値を評価スタックからポップし、ローカル変数 number `index`に移動します。ローカル変数には、0以降の番号が付けられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4035">The `stloc.s` instruction pops the top value off the evaluation stack and moves it into local variable number `index`, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="e5fd8-4036">値の型は、現在のメソッドのローカルシグネチャで指定されているローカル変数の型と一致している必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4036">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="e5fd8-4037">`stloc.s` 命令は、ローカル変数 0 ~ 255 の効率的なエンコードを提供します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4037">The `stloc.s` instruction provides an efficient encoding for local variables 0 through 255.</span></span>  
  
 <span data-ttu-id="e5fd8-4038">4バイトよりも小さい整数値を保持しているローカル変数に格納すると、スタックからローカル変数に移動するときに値が切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4038">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="e5fd8-4039">浮動小数点値は、ネイティブサイズ (型 `F`) から引数に関連付けられているサイズに丸められます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4039">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="e5fd8-4040">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`stloc.s` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4040">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `stloc.s` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.LocalBuilder%29?displayProperty=nameWithType>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Byte%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-4041">評価スタックから提供されたメモリ アドレスに、指定した型の値をコピーします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4041">Copies a value of a specified type from the evaluation stack into a supplied memory address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-4042">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4042">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-4043">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4043">Format</span></span>|<span data-ttu-id="e5fd8-4044">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4044">Assembly Format</span></span>|<span data-ttu-id="e5fd8-4045">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4045">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-4046">81 < `T` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-4046">81 < `T` ></span></span>|<span data-ttu-id="e5fd8-4047">stobj `class`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4047">stobj `class`</span></span>|<span data-ttu-id="e5fd8-4048">`class` 型の値をスタックからメモリに格納します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4048">Stores a value of type `class` from the stack into memory.</span></span>|  
  
 <span data-ttu-id="e5fd8-4049">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4049">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-4050">アドレスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4050">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-4051">`class` 型の値型オブジェクトがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4051">A value type object of type `class` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-4052">オブジェクトとアドレスがスタックからポップされます。値型のオブジェクトはアドレスに格納されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4052">The object and the address are popped from the stack; the value type object is stored at the address.</span></span>  
  
 <span data-ttu-id="e5fd8-4053">`stobj` 命令は、アドレス (`native int`、`*`、または `&`) によって指定されたアドレスに、値型オブジェクトをコピーします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4053">The `stobj` instruction copies the value type object into the address specified by the address (a pointer of type `native int`, `*`, or `&`).</span></span> <span data-ttu-id="e5fd8-4054">コピーされるバイト数は、`class`によって表されるクラスのサイズによって異なります。これは、値型を表すメタデータトークンです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4054">The number of bytes copied depends on the size of the class represented by `class`, a metadata token representing a value type.</span></span>  
  
 <span data-ttu-id="e5fd8-4055">`stobj` 命令の操作は、直前の <xref:System.Reflection.Emit.OpCodes.Volatile> または <xref:System.Reflection.Emit.OpCodes.Unaligned> プレフィックス命令によって変更できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4055">The operation of the `stobj` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-4056">クラスが見つからない場合、<xref:System.TypeLoadException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4056"><xref:System.TypeLoadException> is thrown if class cannot be found.</span></span> <span data-ttu-id="e5fd8-4057">これは通常、Microsoft 中間言語 (MSIL) 命令が実行時ではなくネイティブコードに変換された場合に検出されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4057">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at run time.</span></span>  
  
 <span data-ttu-id="e5fd8-4058">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`stobj` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4058">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stobj` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Type%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stsfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stsfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stsfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stsfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stsfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stsfld;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stsfld : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stsfld" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-4059">静的フィールドの値を評価スタックの値に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4059">Replaces the value of a static field with a value from the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-4060">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4060">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-4061">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4061">Format</span></span>|<span data-ttu-id="e5fd8-4062">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4062">Assembly Format</span></span>|<span data-ttu-id="e5fd8-4063">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4063">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-4064">80 < `T` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-4064">80 < `T` ></span></span>|<span data-ttu-id="e5fd8-4065">stsfld `field`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4065">stsfld `field`</span></span>|<span data-ttu-id="e5fd8-4066">`field` の値を指定された値に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4066">Replaces the value in `field` with a supplied value.</span></span>|  
  
 <span data-ttu-id="e5fd8-4067">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4067">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-4068">値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4068">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-4069">値はスタックからポップされ、`field`に格納されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4069">A value is popped from the stack and stored in `field`.</span></span>  
  
 <span data-ttu-id="e5fd8-4070">`stsfld` 命令は、静的フィールドの値をスタックの値に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4070">The `stsfld` instruction replaces the value of a static field with a value from the stack.</span></span> <span data-ttu-id="e5fd8-4071">`field` は、静的フィールドメンバーを参照する必要があるメタデータトークンです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4071">`field` is a metadata token that must refer to a static field member.</span></span>  
  
 <span data-ttu-id="e5fd8-4072">`stsfld` 命令にプレフィックスとして <xref:System.Reflection.Emit.OpCodes.Volatile>を付けることができます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4072">The `stsfld` instruction may be prefixed by <xref:System.Reflection.Emit.OpCodes.Volatile>.</span></span>  
  
 <span data-ttu-id="e5fd8-4073">メタデータ内にフィールドが見つからない場合、<xref:System.MissingFieldException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4073"><xref:System.MissingFieldException> is thrown if field is not found in the metadata.</span></span> <span data-ttu-id="e5fd8-4074">これは通常、Microsoft 中間言語 (MSIL) 命令が実行時ではなくネイティブコードに変換された場合にチェックされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4074">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at run time.</span></span>  
  
 <span data-ttu-id="e5fd8-4075">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`stsfld` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4075">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stsfld` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.FieldInfo%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sub;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sub" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sub" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sub As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sub;" />
      <MemberSignature Language="F#" Value=" staticval mutable Sub : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Sub" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-4076">ある値から別の値を減算し、結果を評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4076">Subtracts one value from another and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-4077">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4077">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-4078">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4078">Format</span></span>|<span data-ttu-id="e5fd8-4079">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4079">Assembly Format</span></span>|<span data-ttu-id="e5fd8-4080">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4080">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-4081">59</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4081">59</span></span>|<span data-ttu-id="e5fd8-4082">sub</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4082">sub</span></span>|<span data-ttu-id="e5fd8-4083">ある値を別の値から減算し、新しい数値を返します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4083">Subtracts one value from another, returning a new numeric value.</span></span>|  
  
 <span data-ttu-id="e5fd8-4084">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4084">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-4085">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4085">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-4086">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4086">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-4087">`value2` と `value1` がスタックからポップされます。`value2` は `value1`から減算されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4087">`value2` and `value1` are popped from the stack; `value2` is subtracted from `value1`.</span></span>  
  
4.  <span data-ttu-id="e5fd8-4088">結果がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4088">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-4089">整数演算のオーバーフローが検出されません (適切なオーバーフロー処理の場合は、<xref:System.Reflection.Emit.OpCodes.Sub_Ovf>を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4089">Overflow is not detected for integer operations (for proper overflow handling, see <xref:System.Reflection.Emit.OpCodes.Sub_Ovf>).</span></span>  
  
 <span data-ttu-id="e5fd8-4090">整数の減算は、によって飽和するのではなく、ラップします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4090">Integer subtraction wraps, rather than saturates.</span></span> <span data-ttu-id="e5fd8-4091">たとえば、8ビット整数を想定して `value1` が0に設定され、`value2` が1に設定されている場合、"ラップされた" 結果は255になります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4091">For example: assuming 8-bit integers, where `value1` is set to 0 and `value2` is set to 1, the "wrapped" result will be 255.</span></span>  
  
 <span data-ttu-id="e5fd8-4092">浮動小数点オーバーフローでは、`+inf` (`PositiveInfinity`) または `-inf` (`NegativeInfinity`) が返されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4092">Floating-point overflow returns `+inf` (`PositiveInfinity`) or `-inf` (`NegativeInfinity`).</span></span>  
  
 <span data-ttu-id="e5fd8-4093">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`sub` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4093">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sub` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub_Ovf">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sub_Ovf;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sub_Ovf" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sub_Ovf" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sub_Ovf As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sub_Ovf;" />
      <MemberSignature Language="F#" Value=" staticval mutable Sub_Ovf : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Sub_Ovf" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-4094">ある整数値を別の整数値から減算し、オーバーフロー チェックを実行し、結果を評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4094">Subtracts one integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-4095">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4095">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-4096">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4096">Format</span></span>|<span data-ttu-id="e5fd8-4097">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4097">Assembly Format</span></span>|<span data-ttu-id="e5fd8-4098">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4098">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-4099">オーディオ</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4099">DA</span></span>|<span data-ttu-id="e5fd8-4100">ovf</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4100">sub.ovf</span></span>|<span data-ttu-id="e5fd8-4101">オーバーフローチェックを使用して、ある整数値を別の整数値から減算します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4101">Subtracts one integer value from another with an overflow check.</span></span>|  
  
 <span data-ttu-id="e5fd8-4102">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4102">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-4103">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4103">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-4104">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4104">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-4105">`value2` と `value1` がスタックからポップされます。`value2` は、オーバーフローのチェック付きで `value1` から減算されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4105">`value2` and `value1` are popped from the stack; `value2` is subtracted from `value1` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="e5fd8-4106">結果がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4106">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-4107">結果を結果の型で表すことができない場合、<xref:System.OverflowException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4107"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="e5fd8-4108">この操作は、符号付き整数に対して実行されます。浮動小数点値の場合は、<xref:System.Reflection.Emit.OpCodes.Sub>を使用します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4108">This operation is performed on signed integers; for floating-point values, use <xref:System.Reflection.Emit.OpCodes.Sub>.</span></span>  
  
 <span data-ttu-id="e5fd8-4109">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`sub.ovf` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4109">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sub.ovf` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub_Ovf_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sub_Ovf_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sub_Ovf_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sub_Ovf_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sub_Ovf_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sub_Ovf_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Sub_Ovf_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Sub_Ovf_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-4110">ある符号なし整数値を別の符号なし整数値から減算し、オーバーフロー チェックを実行し、結果を評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4110">Subtracts one unsigned integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-4111">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4111">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-4112">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4112">Format</span></span>|<span data-ttu-id="e5fd8-4113">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4113">Assembly Format</span></span>|<span data-ttu-id="e5fd8-4114">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4114">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-4115">DB</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4115">DB</span></span>|<span data-ttu-id="e5fd8-4116">sub.ovf.un</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4116">sub.ovf.un</span></span>|<span data-ttu-id="e5fd8-4117">オーバーフローチェックを使用して、1つの符号なし整数値を別の符号なし整数値から減算します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4117">Subtracts one unsigned integer value from another with an overflow check.</span></span>|  
  
 <span data-ttu-id="e5fd8-4118">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4118">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-4119">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4119">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-4120">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4120">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-4121">`value2` と `value1` がスタックからポップされます。`value2` は、オーバーフローのチェック付きで `value1` から減算されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4121">`value2` and `value1` are popped from the stack; `value2` is subtracted from `value1` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="e5fd8-4122">結果がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4122">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-4123">結果を結果の型で表すことができない場合、<xref:System.OverflowException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4123"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="e5fd8-4124">この操作は、符号付き整数に対して実行されます。浮動小数点値の場合は、<xref:System.Reflection.Emit.OpCodes.Sub>を使用します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4124">This operation is performed on signed integers; for floating-point values, use <xref:System.Reflection.Emit.OpCodes.Sub>.</span></span>  
  
 <span data-ttu-id="e5fd8-4125">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`sub.ovf.un` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4125">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sub.ovf.un` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Switch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Switch" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Switch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Switch As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Switch;" />
      <MemberSignature Language="F#" Value=" staticval mutable Switch : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Switch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-4126">ジャンプ テーブルを実装します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4126">Implements a jump table.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-4127">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4127">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-4128">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4128">Format</span></span>|<span data-ttu-id="e5fd8-4129">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4129">Assembly Format</span></span>|<span data-ttu-id="e5fd8-4130">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4130">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-4131">45 < `unsigned int32` > < `int32` >...< `int32` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-4131">45 < `unsigned int32` > < `int32` >... < `int32` ></span></span>|<span data-ttu-id="e5fd8-4132">スイッチ (`N`、`t1`、`t2`... `tN`)</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4132">switch (`N`, `t1`, `t2`... `tN`)</span></span>|<span data-ttu-id="e5fd8-4133">`N` の値のいずれかにジャンプします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4133">Jumps to one of `N` values.</span></span>|  
  
 <span data-ttu-id="e5fd8-4134">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4134">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-4135">値はスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4135">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-4136">値はスタックからポップされ、値によってインデックス付けされたオフセットの命令に実行が転送されます。このとき、値は `N`未満です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4136">The value is popped off the stack and execution is transferred to the instruction at the offset indexed by the value, where the value is less than `N`.</span></span>  
  
 <span data-ttu-id="e5fd8-4137">`switch` 命令は、ジャンプテーブルを実装します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4137">The `switch` instruction implements a jump table.</span></span> <span data-ttu-id="e5fd8-4138">命令の形式は、`N`ターゲットの数を表す `unsigned int32` であり、その後にジャンプターゲットを指定する int32 値 `N` ます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4138">The format of the instruction is an `unsigned int32` representing the number of targets `N`, followed by `N` int32 values specifying jump targets.</span></span> <span data-ttu-id="e5fd8-4139">これらのターゲットは、この `switch` 命令に続く命令の先頭からのオフセット (正または負) として表されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4139">These targets are represented as offsets (positive or negative) from the beginning of the instruction following this `switch` instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-4140">`switch` 命令は、値をスタックからポップし、符号なし整数として `N`に比較します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4140">The `switch` instruction pops a value off the stack and compares it, as an unsigned integer, to `N`.</span></span> <span data-ttu-id="e5fd8-4141">Value が `N`未満の場合、実行は値でインデックス付けされたターゲットに転送されます。この場合、ターゲットは0から番号が付けられます (たとえば、0の値は最初のターゲットを、値1は2番目のターゲットを受け取ります)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4141">If value is less than `N`, execution is transferred to the target indexed by value, where targets are numbered from 0 (for example, a value of 0 takes the first target, a value of 1 takes the second target, and so on).</span></span> <span data-ttu-id="e5fd8-4142">値が `N`以上の場合、実行は次の命令 (フォールスルー) で続行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4142">If the value is greater than or equal to `N`, execution continues at the next instruction (fall through).</span></span>  
  
 <span data-ttu-id="e5fd8-4143">ターゲット命令に1つ以上のプレフィックスコードがある場合、control はこれらのプレフィックスの最初の部分にのみ転送できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4143">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="e5fd8-4144">`try`、`catch`、`filter`、および `finally` ブロックとの間での転送の制御は、この命令では実行できません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4144">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span> <span data-ttu-id="e5fd8-4145">(このような転送は厳しく制限されており、代わりに leave 命令を使用する必要があります)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4145">(Such transfers are severely restricted and must use the leave instruction instead).</span></span>  
  
 <span data-ttu-id="e5fd8-4146">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`switch` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4146">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `switch` opcode.</span></span> <span data-ttu-id="e5fd8-4147">`Label[]` 引数は、32ビットオフセットを表すラベルの配列です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4147">The `Label[]` argument is an array of Labels representing 32-bit offsets.</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.Label%5B%5D%29?displayProperty=nameWithType>  
  
   
  
## Examples  
 <span data-ttu-id="e5fd8-4148">次のコードサンプルは、<xref:System.Reflection.Emit.Label>の配列を使用して `Switch` オペコードを使用してジャンプテーブルを生成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4148">The following code sample illustrates the use of the `Switch` opcode to generate a jump table using an array of <xref:System.Reflection.Emit.Label>.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tailcall">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Tailcall;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Tailcall" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Tailcall" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Tailcall As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Tailcall;" />
      <MemberSignature Language="F#" Value=" staticval mutable Tailcall : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Tailcall" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-4149">実際の呼び出し命令が実行される前に、現在のメソッドのスタック フレームが削除されるように、後置のメソッド呼び出し命令を実行します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4149">Performs a postfixed method call instruction such that the current method's stack frame is removed before the actual call instruction is executed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-4150">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4150">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-4151">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4151">Format</span></span>|<span data-ttu-id="e5fd8-4152">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4152">Assembly Format</span></span>|<span data-ttu-id="e5fd8-4153">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4153">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-4154">FE 14</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4154">FE 14</span></span>|<span data-ttu-id="e5fd8-4155">テイ.</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4155">tail.</span></span>|<span data-ttu-id="e5fd8-4156">後続の呼び出しは、現在のメソッドを終了します</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4156">Subsequent call terminates current methods</span></span>|  
  
 <span data-ttu-id="e5fd8-4157">この命令には、スタック移行動作は定義されていません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4157">There is no stack transition behavior defined for this instruction.</span></span>  
  
 <span data-ttu-id="e5fd8-4158">`tail` prefix 命令は、<xref:System.Reflection.Emit.OpCodes.Call>、<xref:System.Reflection.Emit.OpCodes.Calli>、または <xref:System.Reflection.Emit.OpCodes.Callvirt> 命令の直前に配置する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4158">The `tail` prefix instruction must immediately precede a <xref:System.Reflection.Emit.OpCodes.Call>, <xref:System.Reflection.Emit.OpCodes.Calli>, or <xref:System.Reflection.Emit.OpCodes.Callvirt> instruction.</span></span> <span data-ttu-id="e5fd8-4159">これは、呼び出し命令が実行される前に、現在のメソッドのスタックフレームを削除する必要があることを示します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4159">It indicates that the current method's stack frame should be removed before the call instruction is executed.</span></span> <span data-ttu-id="e5fd8-4160">また、次の呼び出しから返される値も、現在のメソッドによって返される値であることを意味します。この呼び出しは、メソッド間のジャンプに変換できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4160">It also implies that the value returned from the following call is also the value returned by the current method, and the call can therefore be converted into a cross-method jump.</span></span>  
  
 <span data-ttu-id="e5fd8-4161">スタックは、次の呼び出しによって転送される引数を除いて、空である必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4161">The stack must be empty except for the arguments being transferred by the following call.</span></span> <span data-ttu-id="e5fd8-4162">呼び出し命令の後の命令は、ret である必要があります。したがって、有効なコードシーケンスは `tail. call` (または `calli` または `callvirt`) のみです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4162">The instruction following the call instruction must be a ret. Thus the only valid code sequence is `tail. call` (or `calli` or `callvirt`).</span></span> <span data-ttu-id="e5fd8-4163">Microsoft 中間言語 (MSIL) の正しい命令を `call` 命令に分岐することはできませんが、後続の <xref:System.Reflection.Emit.OpCodes.Ret>に分岐する場合があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4163">Correct Microsoft Intermediate Language (MSIL) instructions must not branch to the `call` instruction, but they may branch to the subsequent <xref:System.Reflection.Emit.OpCodes.Ret>.</span></span>  
  
 <span data-ttu-id="e5fd8-4164">コード id のセキュリティが損なわれる可能性があるため、信頼されていないコードから信頼されるコードに制御が転送されるときに、現在のフレームを破棄することはできません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4164">The current frame cannot be discarded when control is transferred from untrusted code to trusted code, since this would jeopardize code identity security.</span></span> <span data-ttu-id="e5fd8-4165">このため、.NET Framework セキュリティチェックによって、`tail` は無視され、標準の <xref:System.Reflection.Emit.OpCodes.Call> 命令が残されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4165">The .NET Framework security checks can therefore cause the `tail` to be ignored, leaving a standard <xref:System.Reflection.Emit.OpCodes.Call> instruction.</span></span> <span data-ttu-id="e5fd8-4166">同様に、呼び出しから制御が戻った後に同期された領域の終了が発生するようにするために、synchronized とマークされているメソッドを終了するために使用した場合、`tail` のプレフィックスは無視されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4166">Similarly, in order to allow the exit of a synchronized region to occur after the call returns, the `tail` prefix is ignored when used to exit a method that is marked synchronized.</span></span>  
  
 <span data-ttu-id="e5fd8-4167">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`tail` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4167">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `tail` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TakesSingleByteArgument">
      <MemberSignature Language="C#" Value="public static bool TakesSingleByteArgument (System.Reflection.Emit.OpCode inst);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TakesSingleByteArgument(valuetype System.Reflection.Emit.OpCode inst) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.OpCodes.TakesSingleByteArgument(System.Reflection.Emit.OpCode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TakesSingleByteArgument (inst As OpCode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TakesSingleByteArgument(System::Reflection::Emit::OpCode inst);" />
      <MemberSignature Language="F#" Value="static member TakesSingleByteArgument : System.Reflection.Emit.OpCode -&gt; bool" Usage="System.Reflection.Emit.OpCodes.TakesSingleByteArgument inst" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inst" Type="System.Reflection.Emit.OpCode" />
      </Parameters>
      <Docs>
        <param name="inst"><span data-ttu-id="e5fd8-4168">Opcode オブジェクトのインスタンス。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4168">An instance of an Opcode object.</span></span></param>
        <summary><span data-ttu-id="e5fd8-4169">提供されたオペコードが 1 バイト引数をとる場合は、true または false を返します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4169">Returns true or false if the supplied opcode takes a single byte argument.</span></span></summary>
        <returns><span data-ttu-id="e5fd8-4170"><see langword="true" /> または <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4170"><see langword="true" /> or <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-4171">このメソッドを使用すると、最適化されたコードで使用される "短い形式" の MSIL オペコードを見つけることができます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4171">This method can be used to find which MSIL opcodes are "short form", for use in optimized code.</span></span>  
  
 <span data-ttu-id="e5fd8-4172">`TakesSingleByteArgument` は、次の場合に <xref:System.Reflection.Emit.OpCode> インスタンスが1バイトの引数を受け取る場合に `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4172">`TakesSingleByteArgument` returns `true` if the <xref:System.Reflection.Emit.OpCode> instance takes a single byte argument in the following cases:</span></span>  
  
-   <span data-ttu-id="e5fd8-4173">オペコードは、バイトサイズのアドレスに対する分岐命令を実行します (たとえば、<xref:System.Reflection.Emit.OpCodes.Br_S> と <xref:System.Reflection.Emit.OpCodes.Bgt_S>)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4173">The opcode performs a branch instruction to a byte-sized address (for example, <xref:System.Reflection.Emit.OpCodes.Br_S> and <xref:System.Reflection.Emit.OpCodes.Bgt_S>).</span></span>  
  
-   <span data-ttu-id="e5fd8-4174">オペコードは、バイト値をスタックにプッシュします (たとえば、<xref:System.Reflection.Emit.OpCodes.Ldc_I4_S>)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4174">The opcode pushes a byte value onto the stack (for example, <xref:System.Reflection.Emit.OpCodes.Ldc_I4_S>).</span></span>  
  
-   <span data-ttu-id="e5fd8-4175">オペコードは、バイトサイズの "短い形式" (たとえば、<xref:System.Reflection.Emit.OpCodes.Ldloc_S> と <xref:System.Reflection.Emit.OpCodes.Stloc_S>) を使用して、変数または引数を参照します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4175">The opcode references a variable or argument via the byte-sized "short form" (for example, <xref:System.Reflection.Emit.OpCodes.Ldloc_S> and <xref:System.Reflection.Emit.OpCodes.Stloc_S>).</span></span>  
  
 <span data-ttu-id="e5fd8-4176">それ以外の場合は `false`を返します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4176">Otherwise, it returns `false`.</span></span>  
  
 <span data-ttu-id="e5fd8-4177">次の例では、`OpCodes` クラスに対してをリフレクションし、各 `OpCode` フィールドが1バイトの引数を受け取るかどうかをテストすることによって `TakesSingleByteArgument` を使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4177">The example below demonstrates the use of `TakesSingleByteArgument` by reflecting on to the `OpCodes` class and testing to see whether each `OpCode` field takes a single-byte argument.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.OpCodes.TakesSingleByteArgument Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.OpCodes.TakesSingleByteArgument Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.OpCodes.TakesSingleByteArgument Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Throw">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Throw;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Throw" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Throw" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Throw As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Throw;" />
      <MemberSignature Language="F#" Value=" staticval mutable Throw : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Throw" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-4178">現在評価スタックにある例外オブジェクトをスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4178">Throws the exception object currently on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-4179">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4179">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-4180">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4180">Format</span></span>|<span data-ttu-id="e5fd8-4181">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4181">Assembly Format</span></span>|<span data-ttu-id="e5fd8-4182">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4182">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-4183">7A</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4183">7A</span></span>|<span data-ttu-id="e5fd8-4184">throw</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4184">throw</span></span>|<span data-ttu-id="e5fd8-4185">例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4185">Throws an exception.</span></span>|  
  
 <span data-ttu-id="e5fd8-4186">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4186">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-4187">(例外への) オブジェクト参照がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4187">An object reference (to an exception) is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-4188">オブジェクト参照がスタックからポップされ、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4188">The object reference is popped from the stack and the exception thrown.</span></span>  
  
 <span data-ttu-id="e5fd8-4189">`throw` 命令は、現在スタックにある例外オブジェクト (型 `O`) をスローします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4189">The `throw` instruction throws the exception object (type `O`) currently on the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-4190">オブジェクト参照が null 参照の場合、<xref:System.NullReferenceException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4190"><xref:System.NullReferenceException> is thrown if the object reference is a null reference.</span></span>  
  
 <span data-ttu-id="e5fd8-4191">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`throw` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4191">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `throw` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unaligned">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Unaligned;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Unaligned" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Unaligned" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Unaligned As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Unaligned;" />
      <MemberSignature Language="F#" Value=" staticval mutable Unaligned : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Unaligned" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-4192">現在評価スタックの一番上にあるアドレスが、直後の <see langword="ldind" />、<see langword="stind" />、<see langword="ldfld" />、<see langword="stfld" />、<see langword="ldobj" />、<see langword="stobj" />、<see langword="initblk" /> または <see langword="cpblk" /> の各命令の通常サイズに合わせて配置されていない可能性があることを示します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4192">Indicates that an address currently atop the evaluation stack might not be aligned to the natural size of the immediately following <see langword="ldind" />, <see langword="stind" />, <see langword="ldfld" />, <see langword="stfld" />, <see langword="ldobj" />, <see langword="stobj" />, <see langword="initblk" />, or <see langword="cpblk" /> instruction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-4193">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4193">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-4194">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4194">Format</span></span>|<span data-ttu-id="e5fd8-4195">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4195">Assembly Format</span></span>|<span data-ttu-id="e5fd8-4196">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4196">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-4197">FE 12 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-4197">FE 12 < `unsigned int8` ></span></span>|<span data-ttu-id="e5fd8-4198">揃え.</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4198">unaligned.</span></span> `alignment`|<span data-ttu-id="e5fd8-4199">後続のポインター命令が整列していない可能性があることを示します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4199">Indicates that the subsequent pointer instruction may be unaligned.</span></span>|  
  
 <span data-ttu-id="e5fd8-4200">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4200">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-4201">アドレスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4201">An address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-4202">`Unaligned` は、スタック上のアドレス (アンマネージポインター、`native int`) が、直後の `ldind`、`stind`、`ldfld`、`stfld`、`ldobj`、`stobj`、`initblk`、または `cpblk` 命令の自然サイズに配置されていない可能性があることを指定します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4202">`Unaligned` specifies that the address (an unmanaged pointer, `native int`) on the stack might not be aligned to the natural size of the immediately following `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, or `cpblk` instruction.</span></span> <span data-ttu-id="e5fd8-4203">つまり、<xref:System.Reflection.Emit.OpCodes.Ldind_I4> 命令の場合、アドレスのアラインメントを4バイト境界にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4203">That is, for a <xref:System.Reflection.Emit.OpCodes.Ldind_I4> instruction the alignment of the address may not be to a 4-byte boundary.</span></span> <span data-ttu-id="e5fd8-4204">`initblk` および `cpblk` の場合、既定のアラインメントはアーキテクチャに依存します (32 ビット Cpu では4バイト、64ビット Cpu では8バイト)。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4204">For `initblk` and `cpblk` the default alignment is architecture dependent (4-byte on 32-bit CPUs, 8-byte on 64-bit CPUs).</span></span> <span data-ttu-id="e5fd8-4205">コンパイル時に8バイトとして配置が認識されない場合、出力を32ビットワードサイズに制限しないコードジェネレーターでは、`unaligned` を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4205">Code generators that do not restrict their output to a 32-bit word size must use `unaligned` if the alignment is not known at compile time to be 8-byte.</span></span>  
  
 <span data-ttu-id="e5fd8-4206">アラインメントの値は1、2、または4である必要があります。生成されたコードでは、アドレスがバイト、2バイト、または4バイトでアラインされていると想定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4206">The value of alignment must be 1, 2, or 4 and means that the generated code should assume that the address is byte, double-byte, or quad-byte aligned, respectively.</span></span> <span data-ttu-id="e5fd8-4207">一時的なポインター (型 `*`) は常にアラインされることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4207">Note that transient pointers (type `*`) are always aligned.</span></span>  
  
 <span data-ttu-id="e5fd8-4208">`cpblk` 命令の配置では、論理的に2つの数値が必要になりますが (1 つはソース用、もう1つは変換先に対して)、低い数値のみが指定されている場合、パフォーマンスに顕著な影響はありません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4208">While the alignment for a `cpblk` instruction would logically require two numbers (one for the source and one for the destination), there is no noticeable impact on performance if only the lower number is specified.</span></span>  
  
 <span data-ttu-id="e5fd8-4209">`unaligned` と `volatile` のプレフィックスは、どちらの順序でも組み合わせることができます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4209">The `unaligned` and `volatile` prefixes can be combined in either order.</span></span> <span data-ttu-id="e5fd8-4210">これらは、`ldind`、`stind`、`ldfld`、`stfld`、`ldobj`、`stobj`、`initblk`、または `cpblk` 命令の直前に配置する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4210">They must immediately precede a `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, or `cpblk` instruction.</span></span> <span data-ttu-id="e5fd8-4211"><xref:System.Reflection.Emit.OpCodes.Ldsfld> と <xref:System.Reflection.Emit.OpCodes.Stsfld> の手順では、<xref:System.Reflection.Emit.OpCodes.Volatile> プレフィックスのみを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4211">Only the <xref:System.Reflection.Emit.OpCodes.Volatile> prefix is allowed for the <xref:System.Reflection.Emit.OpCodes.Ldsfld> and <xref:System.Reflection.Emit.OpCodes.Stsfld> instructions.</span></span>  
  
 <span data-ttu-id="e5fd8-4212">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`unaligned` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4212">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `unaligned` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.Label%29?displayProperty=nameWithType>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Byte%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unbox">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Unbox;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Unbox" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Unbox" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Unbox As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Unbox;" />
      <MemberSignature Language="F#" Value=" staticval mutable Unbox : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Unbox" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-4213">値型のボックス化変換された形式をボックス化が解除された形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4213">Converts the boxed representation of a value type to its unboxed form.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-4214">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4214">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-4215">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4215">Format</span></span>|<span data-ttu-id="e5fd8-4216">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4216">Assembly Format</span></span>|<span data-ttu-id="e5fd8-4217">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4217">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-4218">79 < `T` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-4218">79 < `T` ></span></span>|<span data-ttu-id="e5fd8-4219">`valType` のボックス解除</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4219">unbox `valType`</span></span>|<span data-ttu-id="e5fd8-4220">値型のデータを `obj`のボックス化された形式で抽出します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4220">Extracts the value type data from `obj`, its boxed representation.</span></span>|  
  
 <span data-ttu-id="e5fd8-4221">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4221">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-4222">オブジェクト参照がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4222">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-4223">オブジェクト参照はスタックからポップされ、ボックス化が解除されて値型のポインターになります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4223">The object reference is popped from the stack and unboxed to a value type pointer.</span></span>  
  
3.  <span data-ttu-id="e5fd8-4224">値型のポインターがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4224">The value type pointer is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-4225">値型には、共通言語基盤 (CLI) 内の2つの異なる表現があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4225">A value type has two separate representations within the Common Language Infrastructure (CLI):</span></span>  
  
-   <span data-ttu-id="e5fd8-4226">値型が別のオブジェクトに埋め込まれている場合に使用される ' 未加工 ' フォーム。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4226">A 'raw' form used when a value type is embedded within another object.</span></span>  
  
-   <span data-ttu-id="e5fd8-4227">' ボックス化された ' フォーム。値型のデータは、独立したエンティティとして存在できるように、オブジェクトにラップ (ボックス化) されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4227">A 'boxed' form, where the data in the value type is wrapped (boxed) into an object so it can exist as an independent entity.</span></span>  
  
 <span data-ttu-id="e5fd8-4228">`unbox` 命令は、オブジェクト参照 (型 `O`)、値型のボックス化された表現を、値型ポインター (マネージポインター、型 `&`) に、ボックス化されていない形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4228">The `unbox` instruction converts the object reference (type `O`), the boxed representation of a value type, to a value type pointer (a managed pointer, type `&`), its unboxed form.</span></span> <span data-ttu-id="e5fd8-4229">指定された値の型 (`valType`) は、ボックス化されたオブジェクト内に含まれる値型の型を示すメタデータトークンです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4229">The supplied value type (`valType`) is a metadata token indicating the type of value type contained within the boxed object.</span></span>  
  
 <span data-ttu-id="e5fd8-4230">オブジェクトで使用するために値型のコピーを作成するために必要な <xref:System.Reflection.Emit.OpCodes.Box>とは異なり、`unbox` では、オブジェクトから値型をコピーする必要はありません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4230">Unlike <xref:System.Reflection.Emit.OpCodes.Box>, which is required to make a copy of a value type for use in the object, `unbox` is not required to copy the value type from the object.</span></span> <span data-ttu-id="e5fd8-4231">通常は、ボックス化されたオブジェクト内に既に存在する値の型のアドレスを計算するだけです。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4231">Typically it simply computes the address of the value type that is already present inside of the boxed object.</span></span>  
  
 <span data-ttu-id="e5fd8-4232">オブジェクトが `valType`としてボックス化されていない場合、<xref:System.InvalidCastException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4232"><xref:System.InvalidCastException> is thrown if the object is not boxed as `valType`.</span></span>  
  
 <span data-ttu-id="e5fd8-4233">オブジェクト参照が null 参照の場合、<xref:System.NullReferenceException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4233"><xref:System.NullReferenceException> is thrown if the object reference is a null reference.</span></span>  
  
 <span data-ttu-id="e5fd8-4234">値の型 `valType` が見つからない場合、<xref:System.TypeLoadException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4234"><xref:System.TypeLoadException> is thrown if the value type `valType` cannot be found.</span></span> <span data-ttu-id="e5fd8-4235">これは通常、Microsoft 中間言語 (MSIL) 命令が実行時ではなくネイティブコードに変換された場合に検出されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4235">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="e5fd8-4236">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`unbox` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4236">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `unbox` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Type%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unbox_Any">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Unbox_Any;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Unbox_Any" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Unbox_Any" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Unbox_Any As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Unbox_Any;" />
      <MemberSignature Language="F#" Value=" staticval mutable Unbox_Any : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Unbox_Any" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-4237">命令で指定された型のボックス化変換された形式を、ボックス化が解除された形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4237">Converts the boxed representation of a type specified in the instruction to its unboxed form.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-4238">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4238">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-4239">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4239">Format</span></span>|<span data-ttu-id="e5fd8-4240">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4240">Assembly Format</span></span>|<span data-ttu-id="e5fd8-4241">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4241">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-4242">A5 < `T` ></span><span class="sxs-lookup"><span data-stu-id="e5fd8-4242">A5 < `T` ></span></span>|<span data-ttu-id="e5fd8-4243">ボックス解除します。任意の `typeTok`</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4243">unbox.any `typeTok`</span></span>|<span data-ttu-id="e5fd8-4244">`obj`から、ボックス化された形式でデータを抽出します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4244">Extract the data from `obj`, its boxed representation.</span></span>|  
  
 <span data-ttu-id="e5fd8-4245">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4245">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-4246">オブジェクト参照 `obj` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4246">An object reference `obj` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-4247">オブジェクト参照がスタックからポップされ、その命令で指定された型にボックス化解除されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4247">The object reference is popped from the stack and unboxed to the type specified in the instruction.</span></span>  
  
3.  <span data-ttu-id="e5fd8-4248">結果として得られるオブジェクト参照または値型がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4248">The resulting object reference or value type is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-4249">値型のボックス化された形式に適用すると、`unbox.any` 命令によって `obj` (型 `O`) に含まれる値が抽出され、その後に `ldobj`が続く `unbox` と同じになります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4249">When applied to the boxed form of a value type, the `unbox.any` instruction extracts the value contained within `obj` (of type `O`), and is therefore equivalent to `unbox` followed by `ldobj`.</span></span>  
  
 <span data-ttu-id="e5fd8-4250">参照型に適用された場合、`unbox.any` 命令は `castclass` `typeTok`と同じ効果を持ちます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4250">When applied to a reference type, the `unbox.any` instruction has the same effect as `castclass` `typeTok`.</span></span>  
  
 <span data-ttu-id="e5fd8-4251">オペランド `typeTok` がジェネリック型パラメーターである場合、ランタイムの動作は、そのジェネリック型パラメーターに指定されている型によって決まります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4251">If the operand `typeTok` is a generic type parameter, then the runtime behavior is determined by the type that is specified for that generic type parameter.</span></span>  
  
 <span data-ttu-id="e5fd8-4252"><xref:System.InvalidCastException> は、`obj` がボックス化された型でない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4252"><xref:System.InvalidCastException> is thrown if `obj` is not a boxed type.</span></span>  
  
 <span data-ttu-id="e5fd8-4253">`obj` が null 参照の場合、<xref:System.NullReferenceException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4253"><xref:System.NullReferenceException> is thrown if `obj` is a null reference.</span></span>  
  
 <span data-ttu-id="e5fd8-4254">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`unbox.any` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4254">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `unbox.any` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Type%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Volatile">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Volatile;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Volatile" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Volatile" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Volatile As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Volatile;" />
      <MemberSignature Language="F#" Value=" staticval mutable Volatile : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Volatile" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-4255">現在評価スタックの一番上にあるアドレスが揮発性である可能性があるため、この位置の読み取り結果をキャッシュできないこと、またはこの位置への複数の格納を中止できないことを指定します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4255">Specifies that an address currently atop the evaluation stack might be volatile, and the results of reading that location cannot be cached or that multiple stores to that location cannot be suppressed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-4256">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4256">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-4257">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4257">Format</span></span>|<span data-ttu-id="e5fd8-4258">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4258">Assembly Format</span></span>|<span data-ttu-id="e5fd8-4259">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4259">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-4260">FE 13</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4260">FE 13</span></span>|<span data-ttu-id="e5fd8-4261">やすい.</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4261">volatile.</span></span>|<span data-ttu-id="e5fd8-4262">後続のポインター参照が volatile であることを示します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4262">Indicates that the subsequent pointer reference is volatile.</span></span>|  
  
 <span data-ttu-id="e5fd8-4263">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4263">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-4264">アドレスがスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4264">An address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-4265">[https://login.microsoftonline.com/consumers/](`volatile`)</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4265">`volatile`.</span></span> <span data-ttu-id="e5fd8-4266">アドレスが volatile アドレスである (つまり、現在実行されているスレッドの外部で参照できる) ことを指定します。また、その場所の読み取り結果をキャッシュできないか、またはその場所への複数のストアを抑制できないことを示します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4266">specifies that the address is a volatile address (that is, it can be referenced externally to the current thread of execution) and the results of reading that location cannot be cached or that multiple stores to that location cannot be suppressed.</span></span> <span data-ttu-id="e5fd8-4267">アクセスを `volatile` としてマークすると、その1つのアクセスのみに影響します。同じ場所への他のアクセスは、個別にマークする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4267">Marking an access as `volatile` affects only that single access; other accesses to the same location must be marked separately.</span></span> <span data-ttu-id="e5fd8-4268">揮発性の場所へのアクセスは、アトミックに実行する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4268">Access to volatile locations need not be performed atomically.</span></span>  
  
 <span data-ttu-id="e5fd8-4269"><xref:System.Reflection.Emit.OpCodes.Unaligned> と `volatile` のプレフィックスは、どちらの順序でも組み合わせることができます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4269">The <xref:System.Reflection.Emit.OpCodes.Unaligned> and `volatile` prefixes can be combined in either order.</span></span> <span data-ttu-id="e5fd8-4270">これらは、`ldind`、`stind`、`ldfld`、`stfld`、`ldobj`、`stobj`、`initblk`、または `cpblk` 命令の直前に配置する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4270">They must immediately precede a `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, or `cpblk` instruction.</span></span> <span data-ttu-id="e5fd8-4271"><xref:System.Reflection.Emit.OpCodes.Ldsfld> と <xref:System.Reflection.Emit.OpCodes.Stsfld> の手順では、`volatile` プレフィックスのみを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4271">Only the `volatile` prefix is allowed for the <xref:System.Reflection.Emit.OpCodes.Ldsfld> and <xref:System.Reflection.Emit.OpCodes.Stsfld> instructions.</span></span>  
  
 <span data-ttu-id="e5fd8-4272">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`volatile` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4272">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `volatile` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xor">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Xor;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Xor" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Xor" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Xor As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Xor;" />
      <MemberSignature Language="F#" Value=" staticval mutable Xor : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Xor" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e5fd8-4273">評価スタックの一番上にある 2 つの値のビットごとの XOR を計算し、結果を評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4273">Computes the bitwise XOR of the top two values on the evaluation stack, pushing the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5fd8-4274">次の表は、命令の16進形式と Microsoft 中間言語 (MSIL) のアセンブリ形式と、簡単なリファレンスの概要を示しています。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4274">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="e5fd8-4275">Format</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4275">Format</span></span>|<span data-ttu-id="e5fd8-4276">アセンブリ形式</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4276">Assembly Format</span></span>|<span data-ttu-id="e5fd8-4277">説明</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4277">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="e5fd8-4278">61</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4278">61</span></span>|<span data-ttu-id="e5fd8-4279">xor</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4279">xor</span></span>|<span data-ttu-id="e5fd8-4280">2つの整数値のビットごとの XOR を計算し、整数を返します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4280">Computes the bitwise XOR of two integer values and returns an integer.</span></span>|  
  
 <span data-ttu-id="e5fd8-4281">スタックの移行動作は、次の順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4281">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="e5fd8-4282">`value1` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4282">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="e5fd8-4283">`value2` がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4283">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="e5fd8-4284">`value2` と `value1` はスタックからポップされ、ビットごとの XOR が計算されます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4284">`value2` and `value1` are popped from the stack and their bitwise XOR computed.</span></span>  
  
4.  <span data-ttu-id="e5fd8-4285">`value2` と `value1` のビットごとの XOR がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4285">The bitwise XOR of `value2` and `value1` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-4286">`xor` 命令は、スタックの上位2つの値のビットごとの XOR を計算し、結果をスタックに残します。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4286">The `xor` instruction computes the bitwise XOR of the top two values on the stack and leaves the result on the stack.</span></span>  
  
 <span data-ttu-id="e5fd8-4287">`Xor` は、整数固有の演算です。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4287">`Xor` is an integer-specific operation.</span></span>  
  
 <span data-ttu-id="e5fd8-4288">次の <xref:System.Reflection.Emit.ILGenerator.Emit%2A> メソッドオーバーロードは、`xor` オペコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e5fd8-4288">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `xor` opcode:</span></span>  
  
-   <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%29?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
