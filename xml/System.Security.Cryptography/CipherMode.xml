<Type Name="CipherMode" FullName="System.Security.Cryptography.CipherMode">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3cbb099f6640e6b1b710b24a200e2b83a72ab386" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82320911" /></Metadata><TypeSignature Language="C#" Value="public enum CipherMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CipherMode extends System.Enum" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.CipherMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum CipherMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class CipherMode" />
  <TypeSignature Language="F#" Value="type CipherMode = " />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed CipherMode extends System.Enum" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="b4892-101">暗号化に使用するブロック暗号モードを指定します。</span><span class="sxs-lookup"><span data-stu-id="b4892-101">Specifies the block cipher mode to use for encryption.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4892-102">ブロック暗号アルゴリズムは、一度に1バイトではなく、ブロック単位でデータを暗号化します。</span><span class="sxs-lookup"><span data-stu-id="b4892-102">Block cipher algorithms encrypt data in block units, rather than a single byte at a time.</span></span> <span data-ttu-id="b4892-103">最も一般的なブロックサイズは8バイトです。</span><span class="sxs-lookup"><span data-stu-id="b4892-103">The most common block size is 8 bytes.</span></span> <span data-ttu-id="b4892-104">各ブロックは大量に処理されるため、ブロック暗号は、ストリーム暗号よりも高いレベルのセキュリティを提供します。</span><span class="sxs-lookup"><span data-stu-id="b4892-104">Because each block is heavily processed, block ciphers provide a higher level of security than stream ciphers.</span></span> <span data-ttu-id="b4892-105">ただし、ブロック暗号アルゴリズムは、ストリーム暗号よりも実行速度が遅くなる傾向があります。</span><span class="sxs-lookup"><span data-stu-id="b4892-105">However, block cipher algorithms tend to execute more slowly than stream ciphers.</span></span>  
  
 <span data-ttu-id="b4892-106">ブロック暗号では、ブロックごとに同じ暗号化アルゴリズムが使用されます。</span><span class="sxs-lookup"><span data-stu-id="b4892-106">Block ciphers use the same encryption algorithm for each block.</span></span> <span data-ttu-id="b4892-107">このため、プレーンテキストのブロックは、同じキーとアルゴリズムで暗号化された場合、常に同じ暗号テキストを返します。</span><span class="sxs-lookup"><span data-stu-id="b4892-107">Because of this, a block of plain text will always return the same cipher text when encrypted with the same key and algorithm.</span></span> <span data-ttu-id="b4892-108">この動作は暗号のクラックに使用できるため、以前のブロック暗号化からのフィードバックに基づいて暗号化プロセスを変更する暗号モードが導入されています。</span><span class="sxs-lookup"><span data-stu-id="b4892-108">Because this behavior can be used to crack a cipher, cipher modes are introduced that modify the encryption process based on feedback from earlier block encryptions.</span></span> <span data-ttu-id="b4892-109">結果として得られる暗号化は、単純なブロック暗号化よりも高いレベルのセキュリティを実現します。</span><span class="sxs-lookup"><span data-stu-id="b4892-109">The resulting encryption provides a higher level of security than a simple block encryption.</span></span>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="b4892-110">暗号サービス</span><span class="sxs-lookup"><span data-stu-id="b4892-110">Cryptographic Services</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="CBC">
      <MemberSignature Language="C#" Value="CBC" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Cryptography.CipherMode CBC = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.CipherMode.CBC" />
      <MemberSignature Language="VB.NET" Value="CBC" />
      <MemberSignature Language="C++ CLI" Value="CBC" />
      <MemberSignature Language="F#" Value="CBC = 1" Usage="System.Security.Cryptography.CipherMode.CBC" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.CipherMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary><span data-ttu-id="b4892-111"><see langword="CBC" /> (Cipher Block Chaining) モードは、前のブロックの演算結果を次に引き継ぎます。</span><span class="sxs-lookup"><span data-stu-id="b4892-111">The Cipher Block Chaining (<see langword="CBC" />) mode introduces feedback.</span></span> <span data-ttu-id="b4892-112">平文の各ブロックは、暗号化される前に、前のブロックの演算結果である暗号文とビットごとの排他的 OR 演算によって組み合わされます。</span><span class="sxs-lookup"><span data-stu-id="b4892-112">Before each plain text block is encrypted, it is combined with the cipher text of the previous block by a bitwise exclusive OR operation.</span></span> <span data-ttu-id="b4892-113">これにより、平文に同一のブロックが多数含まれている場合でも、それらのブロックはそれぞれ異なった暗号文へと暗号化されます。</span><span class="sxs-lookup"><span data-stu-id="b4892-113">This ensures that even if the plain text contains many identical blocks, they will each encrypt to a different cipher text block.</span></span> <span data-ttu-id="b4892-114">最初の平文ブロックの場合は、暗号化される前に、ビットごとの排他的 OR 演算によって初期化ベクターと組み合わされます。</span><span class="sxs-lookup"><span data-stu-id="b4892-114">The initialization vector is combined with the first plain text block by a bitwise exclusive OR operation before the block is encrypted.</span></span> <span data-ttu-id="b4892-115">暗号文ブロックの 1 つのビットが破損すると、対応する平文ブロックも破損します。</span><span class="sxs-lookup"><span data-stu-id="b4892-115">If a single bit of the cipher text block is mangled, the corresponding plain text block will also be mangled.</span></span> <span data-ttu-id="b4892-116">さらに、後続ブロックの、元の破損ビットと同位置にあるビットも破損してしまいます。</span><span class="sxs-lookup"><span data-stu-id="b4892-116">In addition, a bit in the subsequent block, in the same position as the original mangled bit, will be mangled.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="CFB">
      <MemberSignature Language="C#" Value="CFB" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Cryptography.CipherMode CFB = int32(4)" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.CipherMode.CFB" />
      <MemberSignature Language="VB.NET" Value="CFB" />
      <MemberSignature Language="C++ CLI" Value="CFB" />
      <MemberSignature Language="F#" Value="CFB = 4" Usage="System.Security.Cryptography.CipherMode.CFB" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.CipherMode</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary><span data-ttu-id="b4892-117"><see langword="CFB" /> (Cipher Feedback) モードは、一度に 1 ブロック全体を処理するのではなく、平文を少しずつ処理して暗号文を生成します。</span><span class="sxs-lookup"><span data-stu-id="b4892-117">The Cipher Feedback (<see langword="CFB" />) mode processes small increments of plain text into cipher text, instead of processing an entire block at a time.</span></span> <span data-ttu-id="b4892-118">このモードでは、長さが 1 ブロックで、複数のセクションに分割されたシフト レジスタを使用します。</span><span class="sxs-lookup"><span data-stu-id="b4892-118">This mode uses a shift register that is one block in length and is divided into sections.</span></span> <span data-ttu-id="b4892-119">たとえば、ブロック サイズが 8 バイトで、一度に 1 バイトずつ処理される場合、シフト レジスタは 8 個のセクションに分割されます。</span><span class="sxs-lookup"><span data-stu-id="b4892-119">For example, if the block size is 8 bytes, with one byte processed at a time, the shift register is divided into eight sections.</span></span> <span data-ttu-id="b4892-120">暗号文の 1 つのビットが破損すると、対応する平文のビットが 1 つ破損し、シフト レジスタも破損します。</span><span class="sxs-lookup"><span data-stu-id="b4892-120">If a bit in the cipher text is mangled, one plain text bit is mangled and the shift register is corrupted.</span></span> <span data-ttu-id="b4892-121">この結果、不良なビットがシフト レジスタからシフト アウトするまで、続けて処理される平文中のいくつかのビットも破損してしまいます。</span><span class="sxs-lookup"><span data-stu-id="b4892-121">This results in the next several plain text increments being mangled until the bad bit is shifted out of the shift register.</span></span> <span data-ttu-id="b4892-122">既定のフィードバック サイズはアルゴリズムによって異なる可能性がありますが、通常は 8 ビットまたはブロック サイズのビット数になります。</span><span class="sxs-lookup"><span data-stu-id="b4892-122">The default feedback size can vary by algorithm, but is typically either 8 bits or the number of bits of the block size.</span></span> <span data-ttu-id="b4892-123">フィードバックのビット数は、<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize" /> プロパティを使用して変更できます。</span><span class="sxs-lookup"><span data-stu-id="b4892-123">You can alter the number of feedback bits by using the <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize" /> property.</span></span> <span data-ttu-id="b4892-124">CFB をサポートするアルゴリズムでは、このプロパティを使用してフィードバックを設定します。</span><span class="sxs-lookup"><span data-stu-id="b4892-124">Algorithms that support CFB use this property to set the feedback.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="CTS">
      <MemberSignature Language="C#" Value="CTS" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Cryptography.CipherMode CTS = int32(5)" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.CipherMode.CTS" />
      <MemberSignature Language="VB.NET" Value="CTS" />
      <MemberSignature Language="C++ CLI" Value="CTS" />
      <MemberSignature Language="F#" Value="CTS = 5" Usage="System.Security.Cryptography.CipherMode.CTS" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.CipherMode</ReturnType>
      </ReturnValue>
      <MemberValue>5</MemberValue>
      <Docs>
        <summary><span data-ttu-id="b4892-125"><see langword="CTS" /> (Cipher Text Stealing) モードは、任意の長さの平文を処理し、その平文と同じ長さの暗号文を生成します。</span><span class="sxs-lookup"><span data-stu-id="b4892-125">The Cipher Text Stealing (<see langword="CTS" />) mode handles any length of plain text and produces cipher text whose length matches the plain text length.</span></span> <span data-ttu-id="b4892-126">このモードは、平文の最後の 2 ブロック以外については、<see langword="CBC" /> モードと同じように動作します。</span><span class="sxs-lookup"><span data-stu-id="b4892-126">This mode behaves like the <see langword="CBC" /> mode for all but the last two blocks of the plain text.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="ECB">
      <MemberSignature Language="C#" Value="ECB" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Cryptography.CipherMode ECB = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.CipherMode.ECB" />
      <MemberSignature Language="VB.NET" Value="ECB" />
      <MemberSignature Language="C++ CLI" Value="ECB" />
      <MemberSignature Language="F#" Value="ECB = 2" Usage="System.Security.Cryptography.CipherMode.ECB" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.CipherMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary><span data-ttu-id="b4892-127"><see langword="ECB" /> (Electronic Codebook) モードは、各ブロックを個別に暗号化します。</span><span class="sxs-lookup"><span data-stu-id="b4892-127">The Electronic Codebook (<see langword="ECB" />) mode encrypts each block individually.</span></span> <span data-ttu-id="b4892-128">同じメッセージに含まれる同一の平文ブロック、または同じキーで暗号化された別のメッセージに含まれる平文ブロックは、同一の暗号文ブロックに変換されます。</span><span class="sxs-lookup"><span data-stu-id="b4892-128">Any blocks of plain text that are identical and in the same message, or that are in a different message encrypted with the same key, will be transformed into identical cipher text blocks.</span></span> <span data-ttu-id="b4892-129">**重要**: 複数のセキュリティ攻撃を受ける可能性が出てくるため、このモードの使用は推奨されません。</span><span class="sxs-lookup"><span data-stu-id="b4892-129">**Important**:  This mode is not recommended because it opens the door for multiple security exploits.</span></span> <span data-ttu-id="b4892-130">暗号化する平文に繰り返しが多い場合、生成された暗号文に含まれるあるブロックが一度に 1 ブロックずつ解読される可能性が高まります。</span><span class="sxs-lookup"><span data-stu-id="b4892-130">If the plain text to be encrypted contains substantial repetition, it is feasible for the cipher text to be broken one block at a time.</span></span> <span data-ttu-id="b4892-131">ブロック分析を使用して暗号化キーを判断することもできます。</span><span class="sxs-lookup"><span data-stu-id="b4892-131">It is also possible to use block analysis to determine the encryption key.</span></span> <span data-ttu-id="b4892-132">また、悪意のある攻撃者が、攻撃に気付かれることなく個別のブロックを置き換えたり、交換したりすることもできるので、攻撃に気付かれることなくブロックを保存したり、他のポイントでストリームに挿入したりすることも可能になります。</span><span class="sxs-lookup"><span data-stu-id="b4892-132">Also, an active adversary can substitute and exchange individual blocks without detection, which allows blocks to be saved and inserted into the stream at other points without detection.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="OFB">
      <MemberSignature Language="C#" Value="OFB" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Cryptography.CipherMode OFB = int32(3)" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.CipherMode.OFB" />
      <MemberSignature Language="VB.NET" Value="OFB" />
      <MemberSignature Language="C++ CLI" Value="OFB" />
      <MemberSignature Language="F#" Value="OFB = 3" Usage="System.Security.Cryptography.CipherMode.OFB" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.CipherMode</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary><span data-ttu-id="b4892-133"><see langword="OFB" /> (Output Feedback) モードは、一度に 1 ブロック全体を処理するのではなく、平文を少しずつ処理して暗号文を生成します。</span><span class="sxs-lookup"><span data-stu-id="b4892-133">The Output Feedback (<see langword="OFB" />) mode processes small increments of plain text into cipher text instead of processing an entire block at a time.</span></span> <span data-ttu-id="b4892-134">このモードは <see langword="CFB" /> とほとんど同じですが、シフト レジスタへの入力方法だけが異なります。</span><span class="sxs-lookup"><span data-stu-id="b4892-134">This mode is similar to <see langword="CFB" />; the only difference between the two modes is the way that the shift register is filled.</span></span> <span data-ttu-id="b4892-135">暗号文の 1 つのビットが破損すると、平文の対応するビットが破損します。</span><span class="sxs-lookup"><span data-stu-id="b4892-135">If a bit in the cipher text is mangled, the corresponding bit of plain text will be mangled.</span></span> <span data-ttu-id="b4892-136">ただし、暗号文に余分なビットや欠落しているビットがあると、平文はその位置から破損してしまいます。</span><span class="sxs-lookup"><span data-stu-id="b4892-136">However, if there are extra or missing bits from the cipher text, the plain text will be mangled from that point on.</span></span></summary>
      </Docs>
    </Member>
  </Members>
</Type>
