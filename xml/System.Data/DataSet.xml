<Type Name="DataSet" FullName="System.Data.DataSet">
  <Metadata><Meta Name="ms.openlocfilehash" Value="90915d08c8a91c1adfc2c291277a5414eb2205ad" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83954334" /></Metadata><TypeSignature Language="C#" Value="public class DataSet : System.ComponentModel.MarshalByValueComponent, System.ComponentModel.IListSource, System.ComponentModel.ISupportInitialize, System.ComponentModel.ISupportInitializeNotification, System.Runtime.Serialization.ISerializable, System.Xml.Serialization.IXmlSerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataSet extends System.ComponentModel.MarshalByValueComponent implements class System.ComponentModel.IListSource, class System.ComponentModel.ISupportInitialize, class System.ComponentModel.ISupportInitializeNotification, class System.Runtime.Serialization.ISerializable, class System.Xml.Serialization.IXmlSerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Data.DataSet" />
  <TypeSignature Language="VB.NET" Value="Public Class DataSet&#xA;Inherits MarshalByValueComponent&#xA;Implements IListSource, ISerializable, ISupportInitialize, ISupportInitializeNotification, IXmlSerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataSet : System::ComponentModel::MarshalByValueComponent, System::ComponentModel::IListSource, System::ComponentModel::ISupportInitialize, System::ComponentModel::ISupportInitializeNotification, System::Runtime::Serialization::ISerializable, System::Xml::Serialization::IXmlSerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="F#" Value="type DataSet = class&#xA;    inherit MarshalByValueComponent&#xA;    interface IListSource&#xA;    interface ISupportInitialize&#xA;    interface ISupportInitializeNotification&#xA;    interface ISerializable&#xA;    interface IXmlSerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="C#" Value="public class DataSet : System.ComponentModel.MarshalByValueComponent, System.ComponentModel.IListSource, System.ComponentModel.ISupportInitialize, System.Runtime.Serialization.ISerializable, System.Xml.Serialization.IXmlSerializable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit DataSet extends System.ComponentModel.MarshalByValueComponent implements class System.ComponentModel.IListSource, class System.ComponentModel.ISupportInitialize, class System.Runtime.Serialization.ISerializable, class System.Xml.Serialization.IXmlSerializable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="VB.NET" Value="Public Class DataSet&#xA;Inherits MarshalByValueComponent&#xA;Implements IListSource, ISerializable, ISupportInitialize, IXmlSerializable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataSet : System::ComponentModel::MarshalByValueComponent, System::ComponentModel::IListSource, System::ComponentModel::ISupportInitialize, System::Runtime::Serialization::ISerializable, System::Xml::Serialization::IXmlSerializable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="F#" Value="type DataSet = class&#xA;    inherit MarshalByValueComponent&#xA;    interface IListSource&#xA;    interface IXmlSerializable&#xA;    interface ISupportInitialize&#xA;    interface ISerializable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="C#" Value="public class DataSet : System.ComponentModel.MarshalByValueComponent, System.ComponentModel.IListSource, System.ComponentModel.ISupportInitializeNotification, System.Runtime.Serialization.ISerializable, System.Xml.Serialization.IXmlSerializable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit DataSet extends System.ComponentModel.MarshalByValueComponent implements class System.ComponentModel.IListSource, class System.ComponentModel.ISupportInitialize, class System.ComponentModel.ISupportInitializeNotification, class System.Runtime.Serialization.ISerializable, class System.Xml.Serialization.IXmlSerializable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="VB.NET" Value="Public Class DataSet&#xA;Inherits MarshalByValueComponent&#xA;Implements IListSource, ISerializable, ISupportInitializeNotification, IXmlSerializable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataSet : System::ComponentModel::MarshalByValueComponent, System::ComponentModel::IListSource, System::ComponentModel::ISupportInitializeNotification, System::Runtime::Serialization::ISerializable, System::Xml::Serialization::IXmlSerializable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type DataSet = class&#xA;    inherit MarshalByValueComponent&#xA;    interface IListSource&#xA;    interface IXmlSerializable&#xA;    interface ISupportInitializeNotification&#xA;    interface ISupportInitialize&#xA;    interface ISerializable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="F#" Value="type DataSet = class&#xA;    inherit MarshalByValueComponent&#xA;    interface IListSource&#xA;    interface IXmlSerializable&#xA;    interface ISupportInitializeNotification&#xA;    interface ISerializable&#xA;    interface ISupportInitialize" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Data.Common" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.ComponentModel.MarshalByValueComponent</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitializeNotification</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Xml.Serialization.IXmlSerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
      <AttributeName>System.ComponentModel.DefaultProperty("DataSetName")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinmac-3.0">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinmac-3.0">
      <AttributeName>System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0">
      <AttributeName>System.Xml.Serialization.XmlRoot("DataSet")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
      <AttributeName>System.Xml.Serialization.XmlSchemaProvider("GetDataSetSchema")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.0;netstandard-2.1">
      <AttributeName>System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=7.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=7.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="6e9b5-101">データのメモリ内キャッシュを表します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-101">Represents an in-memory cache of data.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-102"><xref:System.Data.DataSet>は、データソースから取得されるデータのメモリ内キャッシュであり、ADO.NET アーキテクチャの主要なコンポーネントです。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-102">The <xref:System.Data.DataSet>, which is an in-memory cache of data retrieved from a data source, is a major component of the ADO.NET architecture.</span></span> <span data-ttu-id="6e9b5-103"><xref:System.Data.DataSet> は、<xref:System.Data.DataRelation> オブジェクトを使用して相互に関連付けることができる <xref:System.Data.DataTable> オブジェクトのコレクションで構成されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-103">The <xref:System.Data.DataSet> consists of a collection of <xref:System.Data.DataTable> objects that you can relate to each other with <xref:System.Data.DataRelation> objects.</span></span> <span data-ttu-id="6e9b5-104">また、<xref:System.Data.UniqueConstraint> オブジェクトと <xref:System.Data.ForeignKeyConstraint> オブジェクトを使用して、<xref:System.Data.DataSet> でデータの整合性を強制することもできます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-104">You can also enforce data integrity in the <xref:System.Data.DataSet> by using the <xref:System.Data.UniqueConstraint> and <xref:System.Data.ForeignKeyConstraint> objects.</span></span> <span data-ttu-id="6e9b5-105"><xref:System.Data.DataSet> オブジェクトの操作の詳細については、「[データセット、datatable、および DataViews](/dotnet/framework/data/adonet/dataset-datatable-dataview/)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-105">For further details about working with <xref:System.Data.DataSet> objects, see [DataSets, DataTables, and DataViews](/dotnet/framework/data/adonet/dataset-datatable-dataview/).</span></span>  
  
 <span data-ttu-id="6e9b5-106"><xref:System.Data.DataTable> のオブジェクトにはデータが含まれているのに対し、<xref:System.Data.DataRelationCollection> ではテーブル階層内を移動できます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-106">Whereas <xref:System.Data.DataTable> objects contain the data, the <xref:System.Data.DataRelationCollection> allows you to navigate though the table hierarchy.</span></span> <span data-ttu-id="6e9b5-107">テーブルは、<xref:System.Data.DataSet.Tables%2A> プロパティを通じてアクセスされる <xref:System.Data.DataTableCollection> に含まれています。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-107">The tables are contained in a <xref:System.Data.DataTableCollection> accessed through the <xref:System.Data.DataSet.Tables%2A> property.</span></span> <span data-ttu-id="6e9b5-108"><xref:System.Data.DataTable> オブジェクトにアクセスするときは、条件付きで大文字と小文字を区別することに注意してください。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-108">When accessing <xref:System.Data.DataTable> objects, note that they are conditionally case sensitive.</span></span> <span data-ttu-id="6e9b5-109">たとえば、1つの <xref:System.Data.DataTable> に "mydatatable" という名前が付けられ、別の名前が "Mydatatable" の場合、いずれかのテーブルの検索に使用される文字列は、大文字と小文字が区別されると見なされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-109">For example, if one <xref:System.Data.DataTable> is named "mydatatable" and another is named "Mydatatable", a string used to search for one of the tables is regarded as case sensitive.</span></span> <span data-ttu-id="6e9b5-110">ただし、"mydatatable" が存在し、"Mydatatable" が存在しない場合、検索文字列は大文字と小文字が区別されないと見なされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-110">However, if "mydatatable" exists and "Mydatatable" does not, the search string is regarded as case insensitive.</span></span> <span data-ttu-id="6e9b5-111"><xref:System.Data.DataTable> オブジェクトの操作の詳細については、「 [DataTable の作成](/dotnet/framework/data/adonet/dataset-datatable-dataview/creating-a-datatable)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-111">For more information about working with <xref:System.Data.DataTable> objects, see [Creating a DataTable](/dotnet/framework/data/adonet/dataset-datatable-dataview/creating-a-datatable).</span></span>  
  
 <span data-ttu-id="6e9b5-112"><xref:System.Data.DataSet> は、データとスキーマを XML ドキュメントとして読み書きできます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-112">A <xref:System.Data.DataSet> can read and write data and schema as XML documents.</span></span> <span data-ttu-id="6e9b5-113">その後、データとスキーマを HTTP で転送し、任意のアプリケーション (XML 対応の任意のプラットフォーム) で使用できます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-113">The data and schema can then be transported across HTTP and used by any application, on any platform that is XML-enabled.</span></span> <span data-ttu-id="6e9b5-114"><xref:System.Data.DataSet.WriteXmlSchema%2A> メソッドを使用してスキーマを XML スキーマとして保存できます。また、スキーマとデータの両方を <xref:System.Data.DataSet.WriteXml%2A> メソッドを使用して保存できます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-114">You can save the schema as an XML schema with the <xref:System.Data.DataSet.WriteXmlSchema%2A> method, and both schema and data can be saved using the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span> <span data-ttu-id="6e9b5-115">スキーマとデータの両方を含む XML ドキュメントを読み取るには、<xref:System.Data.DataSet.ReadXml%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-115">To read an XML document that includes both schema and data, use the <xref:System.Data.DataSet.ReadXml%2A> method.</span></span>  
  
 <span data-ttu-id="6e9b5-116">一般的な多層実装では、<xref:System.Data.DataSet>を作成および更新する手順と、元のデータを更新する手順は次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-116">In a typical multiple-tier implementation, the steps for creating and refreshing a <xref:System.Data.DataSet>, and in turn, updating the original data are to:</span></span>  
  
1.  <span data-ttu-id="6e9b5-117"><xref:System.Data.Common.DataAdapter>を使用して、<xref:System.Data.DataSet> 内の各 <xref:System.Data.DataTable> を作成し、データソースのデータを入力します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-117">Build and fill each <xref:System.Data.DataTable> in a <xref:System.Data.DataSet> with data from a data source using a <xref:System.Data.Common.DataAdapter>.</span></span>  
  
2.  <span data-ttu-id="6e9b5-118"><xref:System.Data.DataRow> オブジェクトを追加、更新、または削除することによって、個々の <xref:System.Data.DataTable> オブジェクトのデータを変更します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-118">Change the data in individual <xref:System.Data.DataTable> objects by adding, updating, or deleting <xref:System.Data.DataRow> objects.</span></span>  
  
3.  <span data-ttu-id="6e9b5-119"><xref:System.Data.DataSet.GetChanges%2A> メソッドを呼び出して、データへの変更のみを行う2番目の <xref:System.Data.DataSet> を作成します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-119">Invoke the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> that features only the changes to the data.</span></span>  
  
4.  <span data-ttu-id="6e9b5-120"><xref:System.Data.Common.DataAdapter>の <xref:System.Data.Common.DataAdapter.Update%2A> メソッドを呼び出して、2番目の <xref:System.Data.DataSet> を引数として渡します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-120">Call the <xref:System.Data.Common.DataAdapter.Update%2A> method of the <xref:System.Data.Common.DataAdapter>, passing the second <xref:System.Data.DataSet> as an argument.</span></span>  
  
5.  <span data-ttu-id="6e9b5-121"><xref:System.Data.DataSet.Merge%2A> メソッドを呼び出して、2番目の <xref:System.Data.DataSet> の変更を最初のにマージします。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-121">Invoke the <xref:System.Data.DataSet.Merge%2A> method to merge the changes from the second <xref:System.Data.DataSet> into the first.</span></span>  
  
6.  <span data-ttu-id="6e9b5-122"><xref:System.Data.DataSet>で <xref:System.Data.DataSet.AcceptChanges%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-122">Invoke the <xref:System.Data.DataSet.AcceptChanges%2A> on the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="6e9b5-123">または、<xref:System.Data.DataSet.RejectChanges%2A> を呼び出して、変更を取り消します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-123">Alternatively, invoke <xref:System.Data.DataSet.RejectChanges%2A> to cancel the changes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-124"><xref:System.Data.DataSet> オブジェクトと <xref:System.Data.DataTable> オブジェクトは <xref:System.ComponentModel.MarshalByValueComponent>から継承し、リモート処理のための <xref:System.Runtime.Serialization.ISerializable> インターフェイスをサポートします。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-124">The <xref:System.Data.DataSet> and <xref:System.Data.DataTable> objects inherit from <xref:System.ComponentModel.MarshalByValueComponent>, and support the <xref:System.Runtime.Serialization.ISerializable> interface for remoting.</span></span> <span data-ttu-id="6e9b5-125">これらは、リモート処理ができる唯一の ADO.NET オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-125">These are the only ADO.NET objects that can be remoted.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-126">ファイナライザーが <xref:System.Data.DataSet>で抑制されているため、<xref:System.Data.DataSet> から継承されたクラスは、ガベージコレクターによって終了しません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-126">Classes inherited from <xref:System.Data.DataSet> are not finalized by the garbage collector, because the finalizer has been suppressed in <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="6e9b5-127">派生クラスは、コンストラクター内の <xref:System.GC.ReRegisterForFinalize%2A> メソッドを呼び出して、ガベージコレクターによってクラスがファイナライズされるようにすることができます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-127">The derived class can call the <xref:System.GC.ReRegisterForFinalize%2A> method in its constructor to allow the class to be finalized by the garbage collector.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-128">次の例は、 **Northwind**データベースからの <xref:System.Data.DataSet> の結合、作成、および格納を行ういくつかの方法で構成されています。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-128">The following example consists of several methods that, combined, create and fill a <xref:System.Data.DataSet> from the **Northwind** database.</span></span>  
  
 [!code-csharp[Classic WebData DataSet Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="6e9b5-129">この型は、マルチスレッドの読み取り操作に対して安全です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-129">This type is safe for multithreaded read operations.</span></span> <span data-ttu-id="6e9b5-130">書き込み操作はすべて同期する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-130">You must synchronize any write operations.</span></span></threadsafe>
    <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-131">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-131">Using DataSets in ADO.NET</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6e9b5-132"><see cref="T:System.Data.DataSet" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-132">Initializes a new instance of the <see cref="T:System.Data.DataSet" /> class.</span></span></summary>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-133">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-133">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataSet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataSet();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6e9b5-134"><see cref="T:System.Data.DataSet" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-134">Initializes a new instance of the <see cref="T:System.Data.DataSet" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-135">この <xref:System.Data.DataSet> コンストラクターの実装では、パラメーターを使用せず、新しいインスタンスの既定の名前 "NewDataSet" を作成します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-135">This implementation of the <xref:System.Data.DataSet> constructor takes no parameters, and creates a default name, "NewDataSet," for the new instance.</span></span>  
  
 <span data-ttu-id="6e9b5-136"><xref:System.Data.DataSet> の名前は、<xref:System.Data.DataSet> の XML 表現に、常にスキーマ定義の最上位レベルの要素であるドキュメント要素の名前を持つようにするために必要です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-136">A name for the <xref:System.Data.DataSet> is required to ensure that the XML representation of the <xref:System.Data.DataSet> always has a name for the document element, which is the highest-level element in a schema definition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-137">次の例では、新しい <xref:System.Data.DataSet>を作成し、そこに2つの <xref:System.Data.DataTable> オブジェクトを追加します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-137">The following example creates a new <xref:System.Data.DataSet>, and adds two <xref:System.Data.DataTable> objects to it.</span></span>  
  
 [!code-vb[Classic WebData DataSet.DataSet Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.DataSet Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataTableCollection" />
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-138">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-138">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataSet (string dataSetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string dataSetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dataSetName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataSet(System::String ^ dataSetName);" />
      <MemberSignature Language="F#" Value="new System.Data.DataSet : string -&gt; System.Data.DataSet" Usage="new System.Data.DataSet dataSetName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dataSetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSetName"><span data-ttu-id="6e9b5-139"><see cref="T:System.Data.DataSet" /> の名前。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-139">The name of the <see cref="T:System.Data.DataSet" />.</span></span></param>
        <summary><span data-ttu-id="6e9b5-140">指定した名前で <see cref="T:System.Data.DataSet" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-140">Initializes a new instance of a <see cref="T:System.Data.DataSet" /> class with the given name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-141"><xref:System.Data.DataSet> の名前は、<xref:System.Data.DataSet> の XML 表現に、常にスキーマ定義の最上位レベルの要素であるドキュメント要素の名前を持つようにするために必要です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-141">A name for the <xref:System.Data.DataSet> is required to ensure that the XML representation of the <xref:System.Data.DataSet> always has a name for the document element, which is the highest level element in a schema definition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-142">次の例では、2つの <xref:System.Data.DataTable> オブジェクトが追加される新しい <xref:System.Data.DataSet>を作成します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-142">The following example creates a new <xref:System.Data.DataSet>, to which two <xref:System.Data.DataTable> objects are added.</span></span>  
  
 [!code-vb[Classic WebData DataSet.DataSet1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.DataSet1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataSet.DataSetName" />
        <altmember cref="T:System.Data.DataTableCollection" />
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-143">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-143">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DataSet (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DataSet(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new System.Data.DataSet : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; System.Data.DataSet" Usage="new System.Data.DataSet (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="6e9b5-144">オブジェクトのシリアル化または逆シリアル化に必要なデータです。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-144">The data needed to serialize or deserialize an object.</span></span></param>
        <param name="context"><span data-ttu-id="6e9b5-145">指定したシリアル化ストリームの転送元と転送先。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-145">The source and destination of a given serialized stream.</span></span></param>
        <summary><span data-ttu-id="6e9b5-146">指定されたシリアル化情報とコンテキストを持つ <see cref="T:System.Data.DataSet" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-146">Initializes a new instance of a <see cref="T:System.Data.DataSet" /> class that has the given serialization information and context.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DataSet (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, bool ConstructSchema);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context, bool ConstructSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext, ConstructSchema As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DataSet(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context, bool ConstructSchema);" />
      <MemberSignature Language="F#" Value="new System.Data.DataSet : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext * bool -&gt; System.Data.DataSet" Usage="new System.Data.DataSet (info, context, ConstructSchema)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="ConstructSchema" Type="System.Boolean" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="6e9b5-147"><see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-147">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object.</span></span></param>
        <param name="context"><span data-ttu-id="6e9b5-148"><see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-148">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object.</span></span></param>
        <param name="ConstructSchema"><span data-ttu-id="6e9b5-149">ブール値。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-149">The boolean value.</span></span></param>
        <summary><span data-ttu-id="6e9b5-150"><see cref="T:System.Data.DataSet" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-150">Initializes a new instance of the <see cref="T:System.Data.DataSet" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptChanges">
      <MemberSignature Language="C#" Value="public void AcceptChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcceptChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.AcceptChanges" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcceptChanges ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcceptChanges();" />
      <MemberSignature Language="F#" Value="member this.AcceptChanges : unit -&gt; unit" Usage="dataSet.AcceptChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6e9b5-151">この <see cref="T:System.Data.DataSet" /> の読み込み、または前回の <see cref="M:System.Data.DataSet.AcceptChanges" /> の呼び出し以降にこのデータセットに対して行われたすべての変更をコミットします。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-151">Commits all the changes made to this <see cref="T:System.Data.DataSet" /> since it was loaded or since the last time <see cref="M:System.Data.DataSet.AcceptChanges" /> was called.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-152"><xref:System.Data.DataRow> クラスと <xref:System.Data.DataTable> クラスの両方に <xref:System.Data.DataSet.AcceptChanges%2A> メソッドがあります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-152">Both the <xref:System.Data.DataRow> and <xref:System.Data.DataTable> classes have <xref:System.Data.DataSet.AcceptChanges%2A> methods.</span></span> <span data-ttu-id="6e9b5-153"><xref:System.Data.DataTable> レベルで <xref:System.Data.DataTable.AcceptChanges%2A> を呼び出すと、各 <xref:System.Data.DataRow> の <xref:System.Data.DataRow.AcceptChanges%2A> メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-153">Calling <xref:System.Data.DataTable.AcceptChanges%2A> at the <xref:System.Data.DataTable> level causes the <xref:System.Data.DataRow.AcceptChanges%2A> method for each <xref:System.Data.DataRow> to be called.</span></span> <span data-ttu-id="6e9b5-154">同様に、<xref:System.Data.DataSet> に対して <xref:System.Data.DataSet.AcceptChanges%2A> を呼び出すと、<xref:System.Data.DataSet>内の各テーブルに対して <xref:System.Data.DataTable.AcceptChanges%2A> が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-154">Similarly, invoking <xref:System.Data.DataSet.AcceptChanges%2A> on the <xref:System.Data.DataSet> causes <xref:System.Data.DataTable.AcceptChanges%2A> to be called on each table within the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="6e9b5-155">この方法では、複数のレベルでメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-155">In this manner, you have multiple levels at which the method can be invoked.</span></span> <span data-ttu-id="6e9b5-156"><xref:System.Data.DataSet> の <xref:System.Data.DataSet.AcceptChanges%2A> を呼び出すと、1回の呼び出しですべての下位のオブジェクト (テーブルや行など) に対してメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-156">Calling the <xref:System.Data.DataSet.AcceptChanges%2A> of the <xref:System.Data.DataSet> enables you to invoke the method on all subordinate objects (for example, tables and rows) with one call.</span></span>  
  
 <span data-ttu-id="6e9b5-157">`DataSet`で `AcceptChanges` を呼び出すと、編集モードのすべての <xref:System.Data.DataRow> オブジェクトの編集が正常に終了します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-157">When you call `AcceptChanges` on the `DataSet`, any <xref:System.Data.DataRow> objects still in edit-mode end their edits successfully.</span></span> <span data-ttu-id="6e9b5-158">各 <xref:System.Data.DataRow> の <xref:System.Data.DataRow.RowState%2A> プロパティも変更されます。`Added` と `Modified` 行は `Unchanged`になり、`Deleted` 行が削除されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-158">The <xref:System.Data.DataRow.RowState%2A> property of each <xref:System.Data.DataRow> also changes; `Added` and `Modified` rows become `Unchanged`, and `Deleted` rows are removed.</span></span>  
  
 <span data-ttu-id="6e9b5-159">`DataSet` に <xref:System.Data.ForeignKeyConstraint> オブジェクトが含まれている場合、`AcceptChanges` メソッドを呼び出すと、<xref:System.Data.ForeignKeyConstraint.AcceptRejectRule%2A> も適用されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-159">If the `DataSet` contains <xref:System.Data.ForeignKeyConstraint> objects, invoking the `AcceptChanges` method also causes the <xref:System.Data.ForeignKeyConstraint.AcceptRejectRule%2A> to be enforced.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-160">`AcceptChanges` と `RejectChanges` は `DataRow` 関連の変更 (つまり、追加、削除、削除、および変更) にのみ適用されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-160">`AcceptChanges` and `RejectChanges` only apply to `DataRow` related changes (that is, Add, Remove, Delete, and Modify).</span></span> <span data-ttu-id="6e9b5-161">スキーマまたは構造的な変更には適用されません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-161">They are not applicable to schema or structural changes.</span></span>  
>   
>  <span data-ttu-id="6e9b5-162">データセットが DataAdapter を使用して格納されている場合、AcceptChanges を呼び出すと、これらの変更はデータソースにレプリケートされません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-162">Calling AcceptChanges will not replicate these changes back to the data source if the DataSet was filled using a DataAdapter.</span></span> <span data-ttu-id="6e9b5-163">そのような場合は、代わりに <xref:System.Data.Common.DataAdapter.Update%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-163">In that situation, call <xref:System.Data.Common.DataAdapter.Update%2A> instead.</span></span> <span data-ttu-id="6e9b5-164">詳細については[、「dataadapter によるデータソースの更新](/dotnet/framework/data/adonet/updating-data-sources-with-dataadapters)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-164">See [Updating Data Sources with DataAdapters](/dotnet/framework/data/adonet/updating-data-sources-with-dataadapters) for more information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-165">次の例では、<xref:System.Data.DataSet>内の <xref:System.Data.DataTable> に <xref:System.Data.DataRow> を追加します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-165">The following example adds a <xref:System.Data.DataRow> to a <xref:System.Data.DataTable> in a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="6e9b5-166">次に、<xref:System.Data.DataSet.AcceptChanges%2A> メソッドが <xref:System.Data.DataSet>で呼び出され、含まれているすべての <xref:System.Data.DataTable> オブジェクトにカスケードされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-166">The <xref:System.Data.DataSet.AcceptChanges%2A> method is then called on the <xref:System.Data.DataSet>, which cascades to all <xref:System.Data.DataTable> objects that it contains.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.AcceptChanges#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.AcceptChanges/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.AcceptChanges#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.AcceptChanges/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-167">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-167">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="dataSet.BeginInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6e9b5-168">フォームまたは別のコンポーネントで使用する <see cref="T:System.Data.DataSet" /> の初期化を開始します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-168">Begins the initialization of a <see cref="T:System.Data.DataSet" /> that is used on a form or used by another component.</span></span> <span data-ttu-id="6e9b5-169">初期化は実行時に発生します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-169">The initialization occurs at run time.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-170">Visual Studio .NET デザイン環境では、このメソッドを使用して、フォームまたは別のコンポーネントで使用されるコンポーネントの初期化を開始します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-170">The Visual Studio .NET design environment uses this method to start the initialization of a component that is used on a form or used by another component.</span></span> <span data-ttu-id="6e9b5-171"><xref:System.Data.DataSet.EndInit%2A> メソッドは、初期化を終了します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-171">The <xref:System.Data.DataSet.EndInit%2A> method ends the initialization.</span></span> <span data-ttu-id="6e9b5-172"><xref:System.Data.DataSet.BeginInit%2A> メソッドと <xref:System.Data.DataSet.EndInit%2A> メソッドを使用すると、完全に初期化される前にコントロールが使用されなくなります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-172">Using the <xref:System.Data.DataSet.BeginInit%2A> and <xref:System.Data.DataSet.EndInit%2A> methods prevents the control from being used before it is fully initialized.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-173">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-173">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CaseSensitive">
      <MemberSignature Language="C#" Value="public bool CaseSensitive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CaseSensitive" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.CaseSensitive" />
      <MemberSignature Language="VB.NET" Value="Public Property CaseSensitive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CaseSensitive { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CaseSensitive : bool with get, set" Usage="System.Data.DataSet.CaseSensitive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetCaseSensitiveDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6e9b5-174"><see cref="T:System.Data.DataTable" /> オブジェクト内の文字列比較で大文字と小文字を区別するかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-174">Gets or sets a value indicating whether string comparisons within <see cref="T:System.Data.DataTable" /> objects are case-sensitive.</span></span></summary>
        <value><span data-ttu-id="6e9b5-175">文字列比較で大文字と小文字を区別するかどうかを <see langword="true" /> します。それ以外の場合は、<see langword="false" />ます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-175"><see langword="true" /> if string comparisons are case-sensitive; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6e9b5-176">既定では、 <see langword="false" />です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-176">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-177"><xref:System.Data.DataSet.CaseSensitive%2A> プロパティは、<xref:System.Data.DataTable.Select%2A> メソッドを使用するときに、<xref:System.Data.DataSet> に含まれる各 <xref:System.Data.DataTable> オブジェクトに対して、並べ替え、検索、およびフィルター処理を実行する方法に影響します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-177">The <xref:System.Data.DataSet.CaseSensitive%2A> property affects how sorting, searching, and filtering operations are performed on each <xref:System.Data.DataTable> object contained in a <xref:System.Data.DataSet> when using the <xref:System.Data.DataTable.Select%2A> method.</span></span>  
  
 <span data-ttu-id="6e9b5-178">既定では、<xref:System.Data.DataSet> の [<xref:System.Data.DataSet.CaseSensitive%2A>] プロパティを設定すると、関連付けられている各 <xref:System.Data.DataTable> の <xref:System.Data.DataTable.CaseSensitive%2A> プロパティも同じ値に設定されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-178">By default, setting the <xref:System.Data.DataSet.CaseSensitive%2A> property for a <xref:System.Data.DataSet> also sets the <xref:System.Data.DataTable.CaseSensitive%2A> property of each associated <xref:System.Data.DataTable> to the same value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-179">次の例では、<xref:System.Data.DataSet.CaseSensitive%2A> プロパティを切り替えます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-179">The following example toggles the <xref:System.Data.DataSet.CaseSensitive%2A> property.</span></span>  
  
 [!code-vb[Classic WebData DataSet.CaseSensitive Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.CaseSensitive Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-180">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-180">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="dataSet.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6e9b5-181">すべてのテーブル内のすべての行を削除して、データの <see cref="T:System.Data.DataSet" /> を消去します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-181">Clears the <see cref="T:System.Data.DataSet" /> of any data by removing all rows in all tables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-182"><xref:System.Data.DataSet> が <xref:System.Xml.XmlDataDocument>にバインドされている場合、<xref:System.Data.DataSet.Clear%2A?displayProperty=nameWithType> または <xref:System.Data.DataTable.Clear%2A?displayProperty=nameWithType> を呼び出すと、<xref:System.NotSupportedException>が発生します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-182">If the <xref:System.Data.DataSet> is bound to an <xref:System.Xml.XmlDataDocument>, calling <xref:System.Data.DataSet.Clear%2A?displayProperty=nameWithType> or <xref:System.Data.DataTable.Clear%2A?displayProperty=nameWithType> raises the <xref:System.NotSupportedException>.</span></span> <span data-ttu-id="6e9b5-183">このような状況を回避するには、各テーブルを走査し、各行を一度に1行ずつ削除します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-183">To avoid this situation, traverse each table, removing each row one at a time.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-184">次の例では、すべてのテーブルのすべての行の <xref:System.Data.DataSet> をクリアします。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-184">The following example clears the <xref:System.Data.DataSet> of all rows in all tables.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Clear Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Clear Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-185">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-185">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual System.Data.DataSet Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.DataSet Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Data::DataSet ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; System.Data.DataSet&#xA;override this.Clone : unit -&gt; System.Data.DataSet" Usage="dataSet.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6e9b5-186">すべての <see cref="T:System.Data.DataSet" /> スキーマ、リレーションシップ、および制約を含め <see cref="T:System.Data.DataTable" /> の構造体をコピーします。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-186">Copies the structure of the <see cref="T:System.Data.DataSet" />, including all <see cref="T:System.Data.DataTable" /> schemas, relations, and constraints.</span></span> <span data-ttu-id="6e9b5-187">データのコピーは行いません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-187">Does not copy any data.</span></span></summary>
        <returns><span data-ttu-id="6e9b5-188">現在の <see cref="T:System.Data.DataSet" /> と同じスキーマを持つが、データが格納されていない新しい <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-188">A new <see cref="T:System.Data.DataSet" /> with the same schema as the current <see cref="T:System.Data.DataSet" />, but none of the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-189">これらのクラスがサブクラス化されている場合、複製も同じサブクラスになります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-189">If these classes have been subclassed, the clone will also be of the same subclasses.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-190">次の例では、<xref:System.Data.DataSet> オブジェクトのスキーマの複製を作成します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-190">The following example creates a clone of a <xref:System.Data.DataSet> object's schema.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Clone Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Clone Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Clone Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Clone Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.Copy" />
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-191">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-191">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Data.DataSet Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataSet Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataSet ^ Copy();" />
      <MemberSignature Language="F#" Value="member this.Copy : unit -&gt; System.Data.DataSet" Usage="dataSet.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6e9b5-192">この <see cref="T:System.Data.DataSet" /> の構造体だけでなくデータもコピーします。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-192">Copies both the structure and data for this <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <returns><span data-ttu-id="6e9b5-193">この <see cref="T:System.Data.DataSet" /> と同じ構造体 (テーブル スキーマ、リレーションシップ、および制約) とデータを持つ新しい <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-193">A new <see cref="T:System.Data.DataSet" /> with the same structure (table schemas, relations, and constraints) and data as this <see cref="T:System.Data.DataSet" />.</span></span>  
  
 <block subset="none" type="note"><para>  
 <span data-ttu-id="6e9b5-194">これらのクラスがサブクラス化されている場合は、コピーも同じサブクラスになります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-194">If these classes have been subclassed, the copy will also be of the same subclasses.</span></span>  
  
</para></block></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6e9b5-195">次の例では、<xref:System.Data.DataSet.Copy%2A> メソッドを使用して、元の <xref:System.Data.DataSet>のコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-195">The following example uses the <xref:System.Data.DataSet.Copy%2A> method to create a copy of the original <xref:System.Data.DataSet>.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Copy Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Copy Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Copy Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Copy Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.Clone" />
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-196">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-196">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDataReader">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6e9b5-197"><see cref="T:System.Data.DataTableReader" /> ごとに 1 つの結果セットを含む <see cref="T:System.Data.DataTable" /> を返します。順序は、<see cref="P:System.Data.DataSet.Tables" /> コレクション内のテーブルでの出現順序と同じです。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-197">Returns a <see cref="T:System.Data.DataTableReader" /> with one result set per <see cref="T:System.Data.DataTable" />, in the same sequence as the tables appear in the <see cref="P:System.Data.DataSet.Tables" /> collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-198">返された <xref:System.Data.DataTableReader>内の結果セットの順序を確認するために、<xref:System.Data.DataSet> 内の <xref:System.Data.DataTable> が空の場合、返された `DataTableReader`内の空の結果セットによって表されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-198">In order to ensure the order of the result sets within the returned <xref:System.Data.DataTableReader>, if a <xref:System.Data.DataTable> within the <xref:System.Data.DataSet> is empty, it will be represented by an empty result set within the returned `DataTableReader`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-199">次の例では、コンソールアプリケーションとして、3つの <xref:System.Data.DataTable> インスタンスを作成し、それぞれを <xref:System.Data.DataSet>に追加します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-199">This example, a Console application, creates three <xref:System.Data.DataTable> instances and adds each to a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="6e9b5-200">この例では、<xref:System.Data.DataSet.CreateDataReader%2A> メソッドを呼び出し、返された <xref:System.Data.DataTableReader>の内容を表示します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-200">The example calls the <xref:System.Data.DataSet.CreateDataReader%2A> method and displays the contents of the returned <xref:System.Data.DataTableReader>.</span></span> <span data-ttu-id="6e9b5-201">`DataTableReader` 内の結果セットの順序は、パラメーターとして渡された `DataTable` インスタンスの順序によって制御されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-201">Note that the order of the result sets in the `DataTableReader` is controlled by the order of the `DataTable` instances passed as parameters.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-202">この例では、`CreateDataReader`のオーバーロードされたバージョンのいずれかを使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-202">This example shows how to use one of the overloaded versions of `CreateDataReader`.</span></span> <span data-ttu-id="6e9b5-203">使用できるその他の例については、個々のオーバーロードに関するトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-203">For other examples that might be available, see the individual overload topics.</span></span>  
  
 [!code-csharp[DataWorks DataSet.CreateDataReader#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.CreateDataReader/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.CreateDataReader#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.CreateDataReader/VB/source.vb#1)]  
  
 <span data-ttu-id="6e9b5-204">この例では、コンソールウィンドウに次のコードが表示されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-204">The example displays the following code in the Console window:</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-205">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-205">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDataReader">
      <MemberSignature Language="C#" Value="public System.Data.DataTableReader CreateDataReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTableReader CreateDataReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.CreateDataReader" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateDataReader () As DataTableReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTableReader ^ CreateDataReader();" />
      <MemberSignature Language="F#" Value="member this.CreateDataReader : unit -&gt; System.Data.DataTableReader" Usage="dataSet.CreateDataReader " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTableReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6e9b5-206"><see cref="T:System.Data.DataTableReader" /> ごとに 1 つの結果セットを含む <see cref="T:System.Data.DataTable" /> を返します。順序は、<see cref="P:System.Data.DataSet.Tables" /> コレクション内のテーブルでの出現順序と同じです。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-206">Returns a <see cref="T:System.Data.DataTableReader" /> with one result set per <see cref="T:System.Data.DataTable" />, in the same sequence as the tables appear in the <see cref="P:System.Data.DataSet.Tables" /> collection.</span></span></summary>
        <returns><span data-ttu-id="6e9b5-207">ソースの <see cref="T:System.Data.DataTableReader" /> 内に格納されている <see cref="T:System.Data.DataTable" /> インスタンスに対応する結果セットを 1 つ以上格納している <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-207">A <see cref="T:System.Data.DataTableReader" /> containing one or more result sets, corresponding to the <see cref="T:System.Data.DataTable" /> instances contained within the source <see cref="T:System.Data.DataSet" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-208">返された <xref:System.Data.DataTableReader>内の結果セットの順序を確認するために、<xref:System.Data.DataSet> 内の <xref:System.Data.DataTable> が空の場合は、返された `DataTableReader`内の空の結果セットによって表されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-208">In order to ensure the order of the result sets within the returned <xref:System.Data.DataTableReader>, if a <xref:System.Data.DataTable> within the <xref:System.Data.DataSet> is empty, it is represented by an empty result set within the returned `DataTableReader`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-209">次の例では、3つの <xref:System.Data.DataTable> インスタンスを作成し、それぞれを <xref:System.Data.DataSet>に追加します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-209">The following example creates three <xref:System.Data.DataTable> instances, and adds each to a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="6e9b5-210">この例では、次に、入力された `DataSet` を <xref:System.Data.DataSet.CreateDataReader%2A> メソッドを呼び出すプロシージャに渡し、<xref:System.Data.DataTableReader>に含まれるすべての結果セットを反復処理します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-210">The example then passes the filled `DataSet` to a procedure that calls the <xref:System.Data.DataSet.CreateDataReader%2A> method, and proceeds to iterate through all the result sets contained within the <xref:System.Data.DataTableReader>.</span></span> <span data-ttu-id="6e9b5-211">この例では、コンソールウィンドウに結果を表示します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-211">The example displays the results in the Console window.</span></span>  
  
 [!code-csharp[DataWorks DataSet.DataTableReader#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.DataTableReader/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.DataTableReader#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.DataTableReader/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-212">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-212">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CreateDataReader">
      <MemberSignature Language="C#" Value="public System.Data.DataTableReader CreateDataReader (params System.Data.DataTable[] dataTables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTableReader CreateDataReader(class System.Data.DataTable[] dataTables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.CreateDataReader(System.Data.DataTable[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateDataReader (ParamArray dataTables As DataTable()) As DataTableReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTableReader ^ CreateDataReader(... cli::array &lt;System::Data::DataTable ^&gt; ^ dataTables);" />
      <MemberSignature Language="F#" Value="member this.CreateDataReader : System.Data.DataTable[] -&gt; System.Data.DataTableReader" Usage="dataSet.CreateDataReader dataTables" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTableReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTables" Type="System.Data.DataTable[]" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="dataTables"><span data-ttu-id="6e9b5-213"><see cref="T:System.Data.DataTableReader" /> で返される結果セットの順序を示す、DataTable の配列。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-213">An array of DataTables providing the order of the result sets to be returned in the <see cref="T:System.Data.DataTableReader" />.</span></span></param>
        <summary><span data-ttu-id="6e9b5-214">1 つの <see cref="T:System.Data.DataTableReader" /> につき 1 つの結果セットを含む <see cref="T:System.Data.DataTable" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-214">Returns a <see cref="T:System.Data.DataTableReader" /> with one result set per <see cref="T:System.Data.DataTable" />.</span></span></summary>
        <returns><span data-ttu-id="6e9b5-215">ソースの <see cref="T:System.Data.DataTableReader" /> 内に格納されている <see cref="T:System.Data.DataTable" /> インスタンスに対応する結果セットを 1 つ以上格納している <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-215">A <see cref="T:System.Data.DataTableReader" /> containing one or more result sets, corresponding to the <see cref="T:System.Data.DataTable" /> instances contained within the source <see cref="T:System.Data.DataSet" />.</span></span> <span data-ttu-id="6e9b5-216">返される結果セットの順序は、<paramref name="dataTables" /> パラメーターにより指定されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-216">The returned result sets are in the order specified by the <paramref name="dataTables" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-217">返された <xref:System.Data.DataTableReader>内の結果セットの順序が空であることを確認するために、<xref:System.Data.DataSet> 内の <xref:System.Data.DataTable> が空の場合は、返された `DataTableReader`内に空の結果セットが表示されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-217">In order to ensure that the order of the result sets within the returned <xref:System.Data.DataTableReader>, if a <xref:System.Data.DataTable> within the <xref:System.Data.DataSet> is empty, it is represented by an empty result set within the returned `DataTableReader`.</span></span> <span data-ttu-id="6e9b5-218">このオーバーロードされたバージョンでは、`DataTable` のインスタンスの一覧をパラメーターとして指定できるため、結果セットが返される `DataTableReader`内で表示される順序を指定できます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-218">Because this overloaded version allows you to supply a list of `DataTable` instances as parameters, you can specify the order in which the result sets appear within the returned `DataTableReader`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-219">次の例では、コンソールアプリケーションとして、3つの <xref:System.Data.DataTable> インスタンスを作成し、それぞれを <xref:System.Data.DataSet>に追加します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-219">This example, a Console application, creates three <xref:System.Data.DataTable> instances and adds each to a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="6e9b5-220">この例では、<xref:System.Data.DataSet.CreateDataReader%2A> メソッドを呼び出し、返された <xref:System.Data.DataTableReader>の内容を表示します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-220">The example calls the <xref:System.Data.DataSet.CreateDataReader%2A> method and displays the contents of the returned <xref:System.Data.DataTableReader>.</span></span> <span data-ttu-id="6e9b5-221">`DataTableReader` 内の結果セットの順序は、パラメーターとして渡された `DataTable` インスタンスの順序によって制御されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-221">Note that the order of the result sets in the `DataTableReader` is controlled by the order of the `DataTable` instances passed as parameters.</span></span> <span data-ttu-id="6e9b5-222">この例では、コンソールウィンドウに結果を表示します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-222">The example displays the results in the Console window.</span></span>  
  
 [!code-csharp[DataWorks DataSet.DataTableReaderTables#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.DataTableReaderTables/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.DataTableReaderTables#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.DataTableReaderTables/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-223">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-223">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DataSetName">
      <MemberSignature Language="C#" Value="public string DataSetName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataSetName" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.DataSetName" />
      <MemberSignature Language="VB.NET" Value="Public Property DataSetName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataSetName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataSetName : string with get, set" Usage="System.Data.DataSet.DataSetName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetDataSetNameDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6e9b5-224">現在の <see cref="T:System.Data.DataSet" /> の名前を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-224">Gets or sets the name of the current <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <value><span data-ttu-id="6e9b5-225"><see cref="T:System.Data.DataSet" /> の名前。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-225">The name of the <see cref="T:System.Data.DataSet" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6e9b5-226">次の例では、指定された <xref:System.Data.DataSet.DataSetName%2A>を使用して新しい <xref:System.Data.DataSet> を作成します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-226">The following example creates a new <xref:System.Data.DataSet> with the given <xref:System.Data.DataSet.DataSetName%2A>.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.DataSetName Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.DataSetName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.DataSetName Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.DataSetName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-227">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-227">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DefaultViewManager">
      <MemberSignature Language="C#" Value="public System.Data.DataViewManager DefaultViewManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataViewManager DefaultViewManager" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.DefaultViewManager" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultViewManager As DataViewManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataViewManager ^ DefaultViewManager { System::Data::DataViewManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultViewManager : System.Data.DataViewManager" Usage="System.Data.DataSet.DefaultViewManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetDefaultViewDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataViewManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6e9b5-228">カスタム <see cref="T:System.Data.DataSet" /> を使用してフィルター処理、検索、移動の各操作を行うことができる、<see cref="T:System.Data.DataViewManager" /> に格納されているデータのカスタム ビューを取得します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-228">Gets a custom view of the data contained in the <see cref="T:System.Data.DataSet" /> to allow filtering, searching, and navigating using a custom <see cref="T:System.Data.DataViewManager" />.</span></span></summary>
        <value><span data-ttu-id="6e9b5-229"><see cref="T:System.Data.DataViewManager" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-229">A <see cref="T:System.Data.DataViewManager" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-230"><xref:System.Data.DataSet.DefaultViewManager%2A> プロパティによって返される <xref:System.Data.DataViewManager> を使用すると、<xref:System.Data.DataSet>内の各 <xref:System.Data.DataTable> のカスタム設定を作成できます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-230">The <xref:System.Data.DataViewManager> returned by the <xref:System.Data.DataSet.DefaultViewManager%2A> property allows you to create custom settings for each <xref:System.Data.DataTable> in the <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="6e9b5-231"><xref:System.Data.DataTable>から <xref:System.Data.DataView> を取得する場合、並べ替え順、フィルター処理、および <xref:System.Data.DataViewRowState> は、<xref:System.Data.DataSet.DefaultViewManager%2A> プロパティの設定に従って構成されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-231">When you obtain a <xref:System.Data.DataView> from a <xref:System.Data.DataTable>, the sort order, filtering, and <xref:System.Data.DataViewRowState> are configured according to the settings in the <xref:System.Data.DataSet.DefaultViewManager%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-232">次の例では、<xref:System.Data.DataSet>の既定の <xref:System.Data.DataViewManager> を取得し、<xref:System.Data.DataTableCollection>に <xref:System.Data.DataTable> を追加します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-232">The following example gets the default <xref:System.Data.DataViewManager> for a <xref:System.Data.DataSet>, and adds a <xref:System.Data.DataTable> to the <xref:System.Data.DataTableCollection>.</span></span>  
  
 [!code-vb[Classic WebData DataSet.DefaultViewManager Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.DefaultViewManager Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-233">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-233">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DetermineSchemaSerializationMode">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6e9b5-234"><see cref="P:System.Data.DataSet.SchemaSerializationMode" /> の <see cref="T:System.Data.DataSet" /> を判別します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-234">Determines the <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> for a <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-235">このメソッドは、型指定された <xref:System.Data.DataSet> を逆シリアル化してその <xref:System.Data.DataSet.SchemaSerializationMode%2A>を決定するときに呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-235">This method can be called when deserializing a typed <xref:System.Data.DataSet> to determine its <xref:System.Data.DataSet.SchemaSerializationMode%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-236">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-236">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="DetermineSchemaSerializationMode">
      <MemberSignature Language="C#" Value="protected System.Data.SchemaSerializationMode DetermineSchemaSerializationMode (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Data.SchemaSerializationMode DetermineSchemaSerializationMode(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.DetermineSchemaSerializationMode(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Protected Function DetermineSchemaSerializationMode (reader As XmlReader) As SchemaSerializationMode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Data::SchemaSerializationMode DetermineSchemaSerializationMode(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.DetermineSchemaSerializationMode : System.Xml.XmlReader -&gt; System.Data.SchemaSerializationMode" Usage="dataSet.DetermineSchemaSerializationMode reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SchemaSerializationMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="6e9b5-237"><see cref="T:System.Xml.XmlReader" /> の逆シリアル化の際に渡される <see cref="T:System.Data.DataSet" /> インスタンス。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-237">The <see cref="T:System.Xml.XmlReader" /> instance that is passed during deserialization of the <see cref="T:System.Data.DataSet" />.</span></span></param>
        <summary><span data-ttu-id="6e9b5-238"><see cref="P:System.Data.DataSet.SchemaSerializationMode" /> の <see cref="T:System.Data.DataSet" /> を判別します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-238">Determines the <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> for a <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <returns><span data-ttu-id="6e9b5-239">ペイロードのスキーマ情報が省略されているかどうかを示す、<see cref="T:System.Data.SchemaSerializationMode" /> 列挙体。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-239">An <see cref="T:System.Data.SchemaSerializationMode" /> enumeration indicating whether schema information has been omitted from the payload.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-240">このメソッドは、型指定された <xref:System.Data.DataSet> を逆シリアル化してその <xref:System.Data.DataSet.SchemaSerializationMode%2A>を決定するときに呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-240">This method can be called when deserializing a typed <xref:System.Data.DataSet> to determine its <xref:System.Data.DataSet.SchemaSerializationMode%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-241">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-241">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DetermineSchemaSerializationMode">
      <MemberSignature Language="C#" Value="protected System.Data.SchemaSerializationMode DetermineSchemaSerializationMode (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Data.SchemaSerializationMode DetermineSchemaSerializationMode(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Function DetermineSchemaSerializationMode (info As SerializationInfo, context As StreamingContext) As SchemaSerializationMode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Data::SchemaSerializationMode DetermineSchemaSerializationMode(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="member this.DetermineSchemaSerializationMode : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; System.Data.SchemaSerializationMode" Usage="dataSet.DetermineSchemaSerializationMode (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SchemaSerializationMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="6e9b5-242">リモート処理のシナリオで逆シリアル化の間に <see langword="DataSet" /> の保護されたコンストラクター <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> を起動するために使用される <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-242">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that a <see langword="DataSet" />'s protected constructor <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> is invoked with during deserialization in remoting scenarios.</span></span></param>
        <param name="context"><span data-ttu-id="6e9b5-243">リモート処理のシナリオで逆シリアル化の間に <see langword="DataSet" /> の保護されたコンストラクター <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> を起動するために使用される <see cref="T:System.Runtime.Serialization.StreamingContext" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-243">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that a <see langword="DataSet" />'s protected constructor <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> is invoked with during deserialization in remoting scenarios.</span></span></param>
        <summary><span data-ttu-id="6e9b5-244"><see cref="P:System.Data.DataSet.SchemaSerializationMode" /> の <see cref="T:System.Data.DataSet" /> を判別します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-244">Determines the <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> for a <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <returns><span data-ttu-id="6e9b5-245">ペイロードのスキーマ情報が省略されているかどうかを示す、<see cref="T:System.Data.SchemaSerializationMode" /> 列挙体。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-245">An <see cref="T:System.Data.SchemaSerializationMode" /> enumeration indicating whether schema information has been omitted from the payload.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-246">このメソッドは、型指定された <xref:System.Data.DataSet> を逆シリアル化してその <xref:System.Data.DataSet.SchemaSerializationMode%2A>を決定するときに呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-246">This method can be called when deserializing a typed <xref:System.Data.DataSet> to determine its <xref:System.Data.DataSet.SchemaSerializationMode%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-247">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-247">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="dataSet.EndInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6e9b5-248">フォームまたは別のコンポーネントで使用する <see cref="T:System.Data.DataSet" /> の初期化を終了します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-248">Ends the initialization of a <see cref="T:System.Data.DataSet" /> that is used on a form or used by another component.</span></span> <span data-ttu-id="6e9b5-249">初期化は実行時に発生します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-249">The initialization occurs at run time.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-250">Visual Studio .NET デザイン環境では、このメソッドを使用して、フォームまたは別のコンポーネントで使用されるコンポーネントの初期化を終了します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-250">The Visual Studio .NET design environment uses this method to end the initialization of a component that is used on a form or used by another component.</span></span> <span data-ttu-id="6e9b5-251"><xref:System.Data.DataSet.BeginInit%2A> メソッドは、初期化を開始します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-251">The <xref:System.Data.DataSet.BeginInit%2A> method starts the initialization.</span></span> <span data-ttu-id="6e9b5-252"><xref:System.Data.DataSet.BeginInit%2A> メソッドと <xref:System.Data.DataSet.EndInit%2A> メソッドを使用すると、完全に初期化される前にコントロールが使用されなくなります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-252">Using the <xref:System.Data.DataSet.BeginInit%2A> and <xref:System.Data.DataSet.EndInit%2A> methods prevents the control from being used before it is fully initialized.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-253">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-253">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EnforceConstraints">
      <MemberSignature Language="C#" Value="public bool EnforceConstraints { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnforceConstraints" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.EnforceConstraints" />
      <MemberSignature Language="VB.NET" Value="Public Property EnforceConstraints As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnforceConstraints { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnforceConstraints : bool with get, set" Usage="System.Data.DataSet.EnforceConstraints" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetEnforceConstraintsDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6e9b5-254">更新操作を試みたときに操作が制約規則に従っているかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-254">Gets or sets a value indicating whether constraint rules are followed when attempting any update operation.</span></span></summary>
        <value><span data-ttu-id="6e9b5-255">ルールが適用されるかどうかを <see langword="true" /> します。それ以外の場合は、<see langword="false" />ます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-255"><see langword="true" /> if rules are enforced; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6e9b5-256">既定では、 <see langword="true" />です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-256">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-257">制約は <xref:System.Data.DataTable> レベル (<xref:System.Data.DataTable.Constraints%2A> プロパティ) で設定されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-257">Constraints are set at the <xref:System.Data.DataTable> level (<xref:System.Data.DataTable.Constraints%2A> property).</span></span> <span data-ttu-id="6e9b5-258">制約の作成の詳細については、「 [DataTable の制約](/dotnet/framework/data/adonet/dataset-datatable-dataview/datatable-constraints)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-258">For more information about creating constraints, see [DataTable Constraints](/dotnet/framework/data/adonet/dataset-datatable-dataview/datatable-constraints).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-259">次の例では、1つのテーブル、1つの列、5つの行、および1つの <xref:System.Data.UniqueConstraint>を含む <xref:System.Data.DataSet> を作成します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-259">The following example creates a <xref:System.Data.DataSet> with one table, one column, five rows, and one <xref:System.Data.UniqueConstraint>.</span></span> <span data-ttu-id="6e9b5-260"><xref:System.Data.DataSet.EnforceConstraints%2A> プロパティが `false` に設定されており、各行の値が同じ値に設定されています。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-260">The <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false` and the values of each row are set to the same value.</span></span> <span data-ttu-id="6e9b5-261"><xref:System.Data.DataSet.EnforceConstraints%2A> プロパティが `true`にリセットされると、<xref:System.Data.ConstraintException> が生成されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-261">When the <xref:System.Data.DataSet.EnforceConstraints%2A> property is reset to `true`, a <xref:System.Data.ConstraintException> is generated.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.EnforceConstraints Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.EnforceConstraints Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.EnforceConstraints Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.EnforceConstraints Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.ConstraintException"><span data-ttu-id="6e9b5-262">1 つ以上の制約を適用できません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-262">One or more constraints cannot be enforced.</span></span></exception>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-263">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-263">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ExtendedProperties">
      <MemberSignature Language="C#" Value="public System.Data.PropertyCollection ExtendedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.PropertyCollection ExtendedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.ExtendedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExtendedProperties As PropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::PropertyCollection ^ ExtendedProperties { System::Data::PropertyCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExtendedProperties : System.Data.PropertyCollection" Usage="System.Data.DataSet.ExtendedProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("ExtendedPropertiesDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.PropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6e9b5-264"><see langword="DataSet" /> に関連付けられている、カスタマイズされたユーザー情報のコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-264">Gets the collection of customized user information associated with the <see langword="DataSet" />.</span></span></summary>
        <value><span data-ttu-id="6e9b5-265">すべてのカスタム ユーザー情報が含まれる <see cref="T:System.Data.PropertyCollection" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-265">A <see cref="T:System.Data.PropertyCollection" /> with all custom user information.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-266"><xref:System.Data.DataSet.ExtendedProperties%2A> プロパティを使用すると、`DataSet`と共にカスタム情報を格納できます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-266">The <xref:System.Data.DataSet.ExtendedProperties%2A> property enables you to store custom information with the `DataSet`.</span></span> <span data-ttu-id="6e9b5-267">たとえば、データを更新する必要がある時間を格納できます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-267">For example, you might store a time when the data should be refreshed.</span></span>  
  
 <span data-ttu-id="6e9b5-268"><xref:System.Data.DataSet> を XML として記述するときに永続化する場合は、拡張プロパティを <xref:System.String> 型にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-268">Extended properties must be of type <xref:System.String> if you want them persisted when the <xref:System.Data.DataSet> is written as XML.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-269">次の例では、<xref:System.Data.DataColumn.ExtendedProperties%2A> プロパティによって返される <xref:System.Data.PropertyCollection> にカスタムプロパティを追加します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-269">The following example adds a custom property to the <xref:System.Data.PropertyCollection> returned by the <xref:System.Data.DataColumn.ExtendedProperties%2A> property.</span></span> <span data-ttu-id="6e9b5-270">2番目の例では、カスタムプロパティを取得します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-270">The second example retrieves the custom property.</span></span>  
  
 [!code-csharp[Classic WebData DataColumn.ExtendedProperties Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ExtendedProperties Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ExtendedProperties Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ExtendedProperties Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-271">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-271">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChanges">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6e9b5-272">前回 <see cref="T:System.Data.DataSet" /> を読み取るか、<see cref="M:System.Data.DataSet.AcceptChanges" /> を呼び出した以降にこのデータセットに対して行われたすべての変更が格納されているこのデータセットのコピーを取得します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-272">Gets a copy of the <see cref="T:System.Data.DataSet" /> containing all changes made to it since it was last loaded, or since <see cref="M:System.Data.DataSet.AcceptChanges" /> was called.</span></span></summary>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-273">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-273">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChanges">
      <MemberSignature Language="C#" Value="public System.Data.DataSet GetChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataSet GetChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetChanges" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChanges () As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataSet ^ GetChanges();" />
      <MemberSignature Language="F#" Value="member this.GetChanges : unit -&gt; System.Data.DataSet" Usage="dataSet.GetChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6e9b5-274">前回 <see cref="T:System.Data.DataSet" /> を読み取るか、<see cref="M:System.Data.DataSet.AcceptChanges" /> を呼び出した以降にこのデータセットに対して行われたすべての変更が格納されているこのデータセットのコピーを取得します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-274">Gets a copy of the <see cref="T:System.Data.DataSet" /> that contains all changes made to it since it was loaded or since <see cref="M:System.Data.DataSet.AcceptChanges" /> was last called.</span></span></summary>
        <returns><span data-ttu-id="6e9b5-275">この <see cref="T:System.Data.DataSet" /> の変更内容のコピー。これに対してアクションを実行した後、<see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> を使って元のデータにマージできます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-275">A copy of the changes from this <see cref="T:System.Data.DataSet" /> that can have actions performed on it and later be merged back in using <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />.</span></span> <span data-ttu-id="6e9b5-276">変更された行が見つからない場合、このメソッドは <see langword="null" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-276">If no changed rows are found, the method returns <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-277">保留中の変更がある元の <xref:System.Data.DataSet> 内のすべての行のコピーを含む新しい <xref:System.Data.DataSet> を作成します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-277">Creates a new <xref:System.Data.DataSet> that contains a copy of all rows in the original <xref:System.Data.DataSet> that have pending changes.</span></span> <span data-ttu-id="6e9b5-278">リレーションシップの制約により、変更された行の外部キーに対応する主キーが変更されていない行に含まれている場合は、変更されていない行が新しい <xref:System.Data.DataSet> に追加されることがあります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-278">Relationship constraints can cause additional unchanged rows to be added to the new <xref:System.Data.DataSet> if the unchanged rows contain primary keys corresponding to foreign keys in the changed rows.</span></span> <span data-ttu-id="6e9b5-279">元の <xref:System.Data.DataSet> に保留中の変更がある行がない場合、メソッドは `null` を返します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-279">The method returns `null` if there are no rows in the original <xref:System.Data.DataSet> that have pending changes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-280">次の例では、1つのテーブル、2つの列、および10行を含む単純な <xref:System.Data.DataSet> を作成します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-280">The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows.</span></span> <span data-ttu-id="6e9b5-281">2つの値が変更され、1つの行が追加されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-281">Two values are changed, and one row is added.</span></span> <span data-ttu-id="6e9b5-282">変更されたデータのサブセットは、<xref:System.Data.DataSet.GetChanges%2A> メソッドを使用して作成されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-282">A subset of the changed data is created using the <xref:System.Data.DataSet.GetChanges%2A> method.</span></span> <span data-ttu-id="6e9b5-283">エラーを調整した後、新しい列がサブセットに追加され、スキーマが変更されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-283">After reconciling errors, a new column is added to the subset, changing the schema.</span></span> <span data-ttu-id="6e9b5-284">`missingSchemaAction` を `MissingSchemaAction.Add`に設定して <xref:System.Data.DataSet.Merge%2A> メソッドを呼び出すと、元の <xref:System.Data.DataSet> オブジェクトのスキーマに新しい列が追加されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-284">When the <xref:System.Data.DataSet.Merge%2A> method is called with the `missingSchemaAction` set to `MissingSchemaAction.Add`, the new column is added to the original <xref:System.Data.DataSet> object's schema.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.GetChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.HasChanges" />
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-285">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-285">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetChanges">
      <MemberSignature Language="C#" Value="public System.Data.DataSet GetChanges (System.Data.DataRowState rowStates);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataSet GetChanges(valuetype System.Data.DataRowState rowStates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetChanges(System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChanges (rowStates As DataRowState) As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataSet ^ GetChanges(System::Data::DataRowState rowStates);" />
      <MemberSignature Language="F#" Value="member this.GetChanges : System.Data.DataRowState -&gt; System.Data.DataSet" Usage="dataSet.GetChanges rowStates" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowStates" Type="System.Data.DataRowState" />
      </Parameters>
      <Docs>
        <param name="rowStates"><span data-ttu-id="6e9b5-286"><see cref="T:System.Data.DataRowState" /> 値のいずれか 1 つです。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-286">One of the <see cref="T:System.Data.DataRowState" /> values.</span></span></param>
        <summary><span data-ttu-id="6e9b5-287">前回 <see cref="T:System.Data.DataSet" /> を読み取るか、<see cref="M:System.Data.DataSet.AcceptChanges" /> を呼び出した以降にこのデータセットに対して行われたすべての変更が格納されているこのデータセットのコピーを、<see cref="T:System.Data.DataRowState" /> によってフィルター処理した後で取得します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-287">Gets a copy of the <see cref="T:System.Data.DataSet" /> containing all changes made to it since it was last loaded, or since <see cref="M:System.Data.DataSet.AcceptChanges" /> was called, filtered by <see cref="T:System.Data.DataRowState" />.</span></span></summary>
        <returns><span data-ttu-id="6e9b5-288">アクションを実行した後、<see cref="T:System.Data.DataSet" /> を使用して元のデータセットにマージするために使用できる、<see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> のフィルター処理後のコピー。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-288">A filtered copy of the <see cref="T:System.Data.DataSet" /> that can have actions performed on it, and subsequently be merged back in using <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />.</span></span> <span data-ttu-id="6e9b5-289">必要な <see cref="T:System.Data.DataRowState" /> の行が見つからない場合、このメソッドは <see langword="null" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-289">If no rows of the desired <see cref="T:System.Data.DataRowState" /> are found, the method returns <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-290"><xref:System.Data.DataSet.GetChanges%2A> メソッドは、元のに導入された変更のみを含む2番目の <xref:System.Data.DataSet> オブジェクトを生成するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-290">The <xref:System.Data.DataSet.GetChanges%2A> method is used to produce a second <xref:System.Data.DataSet> object that contains only the changes introduced into the original.</span></span> <span data-ttu-id="6e9b5-291">`rowStates` 引数を使用して、新しいオブジェクトに含める変更の種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-291">Use the `rowStates` argument to specify the type of changes the new object should include.</span></span>  
  
 <span data-ttu-id="6e9b5-292">この返されたコピーは、この元の <xref:System.Data.DataSet>に再びマージされるように設計されています。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-292">This returned copy is designed to be merged back in to this original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="6e9b5-293">リレーションシップの制約により、`Unchanged` マークが付けられた親行が含まれる場合があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-293">Relationship constraints may cause parent rows marked `Unchanged` to be included.</span></span> <span data-ttu-id="6e9b5-294">目的の <xref:System.Data.DataRowState> の行が見つからない場合、<xref:System.Data.DataSet.GetChanges%2A> メソッドは `null`を返します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-294">If no rows of the desired <xref:System.Data.DataRowState> are found, the <xref:System.Data.DataSet.GetChanges%2A> method returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-295">次の例では、<xref:System.Data.DataSet.GetChanges%2A> メソッドを使用して、2番目の <xref:System.Data.DataSet> オブジェクトを作成します。このオブジェクトは、データソースの更新に使用されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-295">The following example uses the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> object, which is then used to update a data source.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.GetChanges1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetChanges1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-296">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-296">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetDataSetSchema">
      <MemberSignature Language="C#" Value="public static System.Xml.Schema.XmlSchemaComplexType GetDataSetSchema (System.Xml.Schema.XmlSchemaSet schemaSet);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Schema.XmlSchemaComplexType GetDataSetSchema(class System.Xml.Schema.XmlSchemaSet schemaSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDataSetSchema (schemaSet As XmlSchemaSet) As XmlSchemaComplexType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Schema::XmlSchemaComplexType ^ GetDataSetSchema(System::Xml::Schema::XmlSchemaSet ^ schemaSet);" />
      <MemberSignature Language="F#" Value="static member GetDataSetSchema : System.Xml.Schema.XmlSchemaSet -&gt; System.Xml.Schema.XmlSchemaComplexType" Usage="System.Data.DataSet.GetDataSetSchema schemaSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaComplexType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaSet" Type="System.Xml.Schema.XmlSchemaSet" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="schemaSet"><span data-ttu-id="6e9b5-297">指定されたスキーマ セット。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-297">The specified schema set.</span></span></param>
        <summary><span data-ttu-id="6e9b5-298">データセットの <see cref="T:System.Xml.Schema.XmlSchemaSet" /> のコピーを取得します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-298">Gets a copy of <see cref="T:System.Xml.Schema.XmlSchemaSet" /> for the DataSet.</span></span></summary>
        <returns><span data-ttu-id="6e9b5-299"><see cref="T:System.Xml.Schema.XmlSchemaSet" /> のコピーです。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-299">A copy of <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="dataSet.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="6e9b5-300"><see cref="T:System.Runtime.Serialization.SerializationInfo" /> と関連付けるシリアル化データを保持する <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-300">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized data associated with the <see cref="T:System.Data.DataSet" />.</span></span></param>
        <param name="context"><span data-ttu-id="6e9b5-301"><see cref="T:System.Runtime.Serialization.StreamingContext" /> に関連付けるシリアル化ストリームの転送元および転送先を格納する <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-301">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains the source and destination of the serialized stream associated with the <see cref="T:System.Data.DataSet" />.</span></span></param>
        <summary><span data-ttu-id="6e9b5-302">シリアル化情報オブジェクトを、<see cref="T:System.Data.DataSet" /> のシリアル化に必要なデータで事前設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-302">Populates a serialization information object with the data needed to serialize the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6e9b5-303"><paramref name="info" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-303">The <paramref name="info" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-304">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-304">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetSchemaSerializable">
      <MemberSignature Language="C#" Value="protected virtual System.Xml.Schema.XmlSchema GetSchemaSerializable ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xml.Schema.XmlSchema GetSchemaSerializable() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetSchemaSerializable" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetSchemaSerializable () As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xml::Schema::XmlSchema ^ GetSchemaSerializable();" />
      <MemberSignature Language="F#" Value="abstract member GetSchemaSerializable : unit -&gt; System.Xml.Schema.XmlSchema&#xA;override this.GetSchemaSerializable : unit -&gt; System.Xml.Schema.XmlSchema" Usage="dataSet.GetSchemaSerializable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6e9b5-305">シリアル化することができる <see cref="T:System.Xml.Schema.XmlSchema" /> インスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-305">Returns a serializable <see cref="T:System.Xml.Schema.XmlSchema" /> instance.</span></span></summary>
        <returns><span data-ttu-id="6e9b5-306"><see cref="T:System.Xml.Schema.XmlSchema" /> のインスタンスです。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-306">The <see cref="T:System.Xml.Schema.XmlSchema" /> instance.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSerializationData">
      <MemberSignature Language="C#" Value="protected void GetSerializationData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void GetSerializationData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub GetSerializationData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void GetSerializationData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="member this.GetSerializationData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="dataSet.GetSerializationData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="6e9b5-307"><see cref="T:System.Runtime.Serialization.SerializationInfo" /> のインスタンスです。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-307">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance.</span></span></param>
        <param name="context"><span data-ttu-id="6e9b5-308">ストリーミング コンテキスト。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-308">The streaming context.</span></span></param>
        <summary><span data-ttu-id="6e9b5-309">バイナリまたは XML ストリームからテーブル データを逆シリアル化します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-309">Deserializes the table data from the binary or XML stream.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXml">
      <MemberSignature Language="C#" Value="public string GetXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetXml" />
      <MemberSignature Language="VB.NET" Value="Public Function GetXml () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetXml();" />
      <MemberSignature Language="F#" Value="member this.GetXml : unit -&gt; string" Usage="dataSet.GetXml " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6e9b5-310"><see cref="T:System.Data.DataSet" /> に格納されているデータの XML 表現を返します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-310">Returns the XML representation of the data stored in the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <returns><span data-ttu-id="6e9b5-311"><see cref="T:System.Data.DataSet" /> に格納されているデータの表現である文字列。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-311">A string that is a representation of the data stored in the <see cref="T:System.Data.DataSet" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-312">このメソッドの呼び出しは、<xref:System.Data.XmlWriteMode> が <xref:System.Data.XmlWriteMode.IgnoreSchema>に設定された <xref:System.Data.DataSet.WriteXml%2A> の呼び出しと同じです。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-312">Calling this method is identical to calling <xref:System.Data.DataSet.WriteXml%2A> with <xref:System.Data.XmlWriteMode> set to <xref:System.Data.XmlWriteMode.IgnoreSchema>.</span></span>  
  
 <span data-ttu-id="6e9b5-313"><xref:System.Data.DataSet.GetXml%2A> では XML が文字列として返されるため、ファイルに XML を書き込む <xref:System.Data.DataSet.WriteXml%2A> よりも多くのオーバーヘッドが必要になります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-313"><xref:System.Data.DataSet.GetXml%2A> returns XML as a string, and therefore requires more overhead than <xref:System.Data.DataSet.WriteXml%2A> to write XML to a file.</span></span>  
  
 <span data-ttu-id="6e9b5-314">スキーマ推論を使用して <xref:System.Data.DataSet> を作成し、XML または Web サービスを使用してシリアル化すると、列の順序が変わる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-314">If you build a <xref:System.Data.DataSet> using schema inference and serialize it using XML or Web services, the column ordering may change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-315">次の例では、<xref:System.Data.DataSet> と <xref:System.Data.DataTable>を作成し、サンプルデータを追加して、データを XML 形式で表示します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-315">The following example creates a <xref:System.Data.DataSet> and <xref:System.Data.DataTable>, adds sample data, and then displays the data in XML format.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.GetXml Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetXml Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetXml Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetXml Example/VB/source.vb#1)]  
  
 <span data-ttu-id="6e9b5-316">このサンプルでは、データセットから XML ファイルにデータを書き込んで、XML からデータセットにデータを読み取る方法を示します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-316">This sample demonstrates how to write data into an XML file from a DataSet and read data into DataSet from XML.</span></span> <span data-ttu-id="6e9b5-317">このサンプルでは、2つのテーブルを含む1つのデータセットを作成し、データセットを XML ファイルにエクスポートする2つの方法 (WriteXml と GetXml) を使用して、XML ファイルからデータセットをインポートする2つの方法 (ReadXml と InferXmlSchema) を使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-317">This sample will create one dataset with two tables, use two ways to export a dataset into the XML files (WriteXml and GetXml), and use two ways (ReadXml and InferXmlSchema) to import a dataset from the XML files.</span></span>  
  
 <span data-ttu-id="6e9b5-318">サンプルをコンパイルして実行する前に、サンプルディレクトリに4つの XML ファイルを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-318">Before you compile and run the sample, you need to create four XML files in the sample directory.</span></span> <span data-ttu-id="6e9b5-319">まず、次のように、属性を作成します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-319">First, create ElementsWithAttributes.xml:</span></span>  
  
```xml  
<MySchool>  
  <Course CourseID="C1045" Year="2012"  Title="Calculus" Credits="4" DepartmentID="7">New</Course>  
  <Course CourseID="C1061" Year="2012"  Title="Physics" Credits="4" DepartmentID="1" />  
  <Department DepartmentID="1" Name="Engineering" Budget="350000" StartDate="2007-09-01T00:00:00+08:00" Administrator="2" />  
  <Department DepartmentID="7" Name="Mathematics" Budget="250024" StartDate="2007-09-01T00:00:00+08:00" Administrator="3">Cancelled</Department>  
</MySchool>  
```  
  
 <span data-ttu-id="6e9b5-320">次に、ElementsWithChildElementsxml を作成します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-320">Next, create ElementsWithChildElementsxml.xml:</span></span>  
  
```xml  
<MySchool>  
  <Course>  
    <CourseID>C1045</CourseID>  
    <Year>2012</Year>  
    <Title>Calculus</Title>  
    <Credits>4</Credits>  
    <DepartmentID>7</DepartmentID>  
  </Course>  
  <Course>  
    <CourseID>C1061</CourseID>  
    <Year>2012</Year>  
    <Title>Physics</Title>  
    <Credits>4</Credits>  
    <DepartmentID>1</DepartmentID>  
  </Course>  
  <Course>  
    <CourseID>C2021</CourseID>  
    <Year>2012</Year>  
    <Title>Composition</Title>  
    <Credits>3</Credits>  
    <DepartmentID>2</DepartmentID>  
  </Course>  
  <Course>  
    <CourseID>C2042</CourseID>  
    <Year>2012</Year>  
    <Title>Literature</Title>  
    <Credits>4</Credits>  
    <DepartmentID>2</DepartmentID>  
  </Course>  
  <Department>  
    <DepartmentID>1</DepartmentID>  
    <Name>Engineering</Name>  
    <Budget>350000</Budget>  
    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  
    <Administrator>2</Administrator>  
  </Department>  
  <Department>  
    <DepartmentID>2</DepartmentID>  
    <Name>English</Name>  
    <Budget>120000</Budget>  
    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  
    <Administrator>6</Administrator>  
  </Department>  
  <Department>  
    <DepartmentID>4</DepartmentID>  
    <Name>Economics</Name>  
    <Budget>200000</Budget>  
    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  
    <Administrator>4</Administrator>  
  </Department>  
  <Department>  
    <DepartmentID>7</DepartmentID>  
    <Name>Mathematics</Name>  
    <Budget>250024</Budget>  
    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  
    <Administrator>3</Administrator>  
  </Department>  
</MySchool>  
```  
  
 <span data-ttu-id="6e9b5-321">ここで、次のように、次のように作成します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-321">Now create ElementsWithOnlyAttributes.xml:</span></span>  
  
```xml
<MySchool>  
  <Course CourseID="C1045" Year="2012"  Title="Calculus" Credits="4" DepartmentID="7" />  
  <Course CourseID="C1061" Year="2012"  Title="Physics" Credits="4" DepartmentID="1" />  
  <Department DepartmentID="1" Name="Engineering" Budget="350000" StartDate="2007-09-01T00:00:00+08:00" Administrator="2" />  
  <Department DepartmentID="7" Name="Mathematics" Budget="250024" StartDate="2007-09-01T00:00:00+08:00" Administrator="3" />  
</MySchool>  
```  
  
 <span data-ttu-id="6e9b5-322">最後に、RepeatingElements を作成します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-322">And finally, create RepeatingElements.xml:</span></span>  
  
```xml
<MySchool>  
  <Course>C1045</Course>  
  <Course>C1061</Course>  
  <Department>Engineering</Department>   
  <Department>Mathematics</Department>  
</MySchool>  
```  
  
 <span data-ttu-id="6e9b5-323">これで、次のソースコードをコンパイルして実行できるようになりました。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-323">Now you can compile and run the following source code.</span></span>  <span data-ttu-id="6e9b5-324">[データセットのデータを XML ファイルに格納する方法](https://code.msdn.microsoft.com/How-to-Store-Data-of-7b9710f3)にC#は、このサンプルの Visual Basic とプロジェクトがあります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-324">[How to Store Data of DataSet into XML File](https://code.msdn.microsoft.com/How-to-Store-Data-of-7b9710f3) has Visual Basic and C# projects for this sample.</span></span>  
  
```csharp
using System;  
using System.Data;  
using System.IO;  
using System.Text;  
using System.Xml;  
  
// Use WriteXml method to export the dataset.  
static class DataTableHelper {  
   public static void WriteDataSetToXML(DataSet dataset, String xmlFileName) {  
      using (FileStream fsWriterStream = new FileStream(xmlFileName, FileMode.Create)) {  
         using (XmlTextWriter xmlWriter = new XmlTextWriter(fsWriterStream, Encoding.Unicode)) {  
            dataset.WriteXml(xmlWriter, XmlWriteMode.WriteSchema);  
            Console.WriteLine("Write {0} to the File {1}.", dataset.DataSetName, xmlFileName);  
            Console.WriteLine();  
         }  
      }  
   }  
  
   // Use GetXml method to get the XML data of the dataset and then export to the file.  
   public static void GetXMLFromDataSet(DataSet dataset, String xmlFileName) {  
      using (StreamWriter writer = new StreamWriter(xmlFileName)) {  
         writer.WriteLine(dataset.GetXml());  
         Console.WriteLine("Get Xml data from {0} and write to the File {1}.", dataset.DataSetName, xmlFileName);  
         Console.WriteLine();  
      }  
   }  
  
   // Use ReadXml method to import the dataset from the dataset.  
   public static void ReadXmlIntoDataSet(DataSet newDataSet, String xmlFileName) {  
      using (FileStream fsReaderStream = new FileStream(xmlFileName, FileMode.Open)) {  
         using (XmlTextReader xmlReader = new XmlTextReader(fsReaderStream)) {  
            newDataSet.ReadXml(xmlReader, XmlReadMode.ReadSchema);  
         }  
      }  
   }  
  
   // Display the columns and value of DataSet.  
   public static void ShowDataSet(DataSet dataset) {  
      foreach (DataTable table in dataset.Tables) {  
         Console.WriteLine("Table {0}:", table.TableName);  
         ShowDataTable(table);  
      }  
   }  
  
   // Display the columns and value of DataTable.  
   private static void ShowDataTable(DataTable table) {  
      foreach (DataColumn col in table.Columns) {  
         Console.Write("{0,-14}", col.ColumnName);  
      }  
      Console.WriteLine("{0,-14}", "");  
  
      foreach (DataRow row in table.Rows) {  
         if (row.RowState == DataRowState.Deleted) {  
            foreach (DataColumn col in table.Columns) {  
               if (col.DataType.Equals(typeof(DateTime))) {  
                  Console.Write("{0,-14:d}", row[col, DataRowVersion.Original]);  
               }  
               else if (col.DataType.Equals(typeof(Decimal))) {  
                  Console.Write("{0,-14:C}", row[col, DataRowVersion.Original]);  
               }  
               else {  
                  Console.Write("{0,-14}", row[col, DataRowVersion.Original]);  
               }  
            }  
         }  
         else {  
            foreach (DataColumn col in table.Columns) {  
               if (col.DataType.Equals(typeof(DateTime))) {  
                  Console.Write("{0,-14:d}", row[col]);  
               }  
               else if (col.DataType.Equals(typeof(Decimal))) {  
                  Console.Write("{0,-14:C}", row[col]);  
               }  
               else {  
                  Console.Write("{0,-14}", row[col]);  
               }  
            }  
         }  
         Console.WriteLine("{0,-14}", "");  
      }  
   }  
  
   // Display the columns of DataSet.  
   public static void ShowDataSetSchema(DataSet dataSet) {  
      Console.WriteLine("{0} contains the following tables:", dataSet.DataSetName);  
      foreach (DataTable table in dataSet.Tables) {  
         Console.WriteLine("   Table {0} contains the following columns:", table.TableName);  
         ShowDataTableSchema(table);  
      }  
   }  
  
   // Display the columns of DataTable  
   private static void ShowDataTableSchema(DataTable table) {  
      String columnString = "";  
      foreach (DataColumn col in table.Columns) {  
         columnString += col.ColumnName + "   ";  
      }  
      Console.WriteLine(columnString);  
   }  
}  
  
class Program {  
   static void Main(string[] args) {  
      // Create the DataSet  
      DataSet school = new DataSet("MySchool");  
      DataTable course = CreateCourse();  
      DataTable department = CreateDepartment();  
      school.Tables.Add(course);  
      school.Tables.Add(department);  
  
      // Define the constraint between the tables.  
      ForeignKeyConstraint courseDepartFK = new ForeignKeyConstraint("CourseDepartFK", department.Columns["DepartmentID"], course.Columns["DepartmentID"]);  
      courseDepartFK.DeleteRule = Rule.Cascade;  
      courseDepartFK.UpdateRule = Rule.Cascade;  
      courseDepartFK.AcceptRejectRule = AcceptRejectRule.None;  
      course.Constraints.Add(courseDepartFK);  
  
      InsertDepartments(department);  
      InsertCourses(course);  
  
      // Export the dataset to the XML file.  
      Console.WriteLine("Data of the whole DataSet {0}", school.DataSetName);  
      DataTableHelper.ShowDataSet(school);  
  
      String xmlWithSchemaFileName = "WriterXMLWithSchema.xml";  
      String xmlGetDataFileName = "GetXML.xml";  
  
      // Use two ways to export the dataset to the Xml file.  
      DataTableHelper.WriteDataSetToXML(school, xmlWithSchemaFileName);  
      DataTableHelper.GetXMLFromDataSet(school, xmlGetDataFileName);  
  
      // Import the dataset from the XML file.  
      // Use two ways to import the dataset from the Xml file.  
      Console.WriteLine("Read Xml document into a new DataSet:");  
      DataSet newSchool = new DataSet("NewSchool");  
      DataTableHelper.ReadXmlIntoDataSet(newSchool, xmlWithSchemaFileName);  
      DataTableHelper.ShowDataSetSchema(newSchool);  
      Console.WriteLine();  
  
      Console.WriteLine("Infer a schema for a DataSet from an XML document:");  
      InferDataSetSchemaFromXml();  
  
      Console.WriteLine("Press any key to exit.");  
      Console.ReadKey();  
   }  
  
   static DataTable CreateCourse() {  
      DataTable course = new DataTable("Course");  
      DataColumn[] cols ={  
                              new DataColumn("CourseID",typeof(String)),  
                              new DataColumn("Year",typeof(Int32)),  
                              new DataColumn("Title",typeof(String)),  
                              new DataColumn("Credits",typeof(Int32)),  
                              new DataColumn("DepartmentID",typeof(Int32))};  
      course.Columns.AddRange(cols);  
  
      course.PrimaryKey = new DataColumn[] { course.Columns["CourseID"], course.Columns["Year"] };  
  
      return course;  
   }  
  
   static DataTable CreateDepartment() {  
      DataTable department = new DataTable("Department");  
      DataColumn[] cols = {   
                                new DataColumn("DepartmentID", typeof(Int32)),  
                                new DataColumn("Name",typeof(String)),  
                                new DataColumn("Budget",typeof(Decimal)),  
                                new DataColumn("StartDate",typeof(DateTime)),  
                                new DataColumn("Administrator",typeof(Int32))};  
      department.Columns.AddRange(cols);  
  
      department.PrimaryKey = new DataColumn[] { department.Columns["DepartmentID"] };  
  
      return department;  
   }  
  
   static void InsertDepartments(DataTable department) {  
      Object[] rows = {   
                            new Object[]{1,"Engineering",350000.00,new DateTime(2007,9,1),2},  
                            new Object[]{2,"English",120000.00,new DateTime(2007,9,1),6},  
                            new Object[]{4,"Economics",200000.00,new DateTime(2007,9,1),4},  
                            new Object[]{7,"Mathematics",250024.00,new DateTime(2007,9,1),3}};  
  
      foreach (Object[] row in rows) {  
         department.Rows.Add(row);  
      }  
   }  
  
   static void InsertCourses(DataTable course) {  
      Object[] rows ={  
                               new Object[]{"C1045",2012,"Calculus",4,7},  
                               new Object[]{"C1061",2012,"Physics",4,1},  
                               new Object[]{"C2021",2012,"Composition",3,2},  
                               new Object[]{"C2042",2012,"Literature",4,2}};  
  
      foreach (Object[] row in rows) {  
         course.Rows.Add(row);  
      }  
   }  
  
   // Display the results of inferring schema from four types of XML structures  
   private static void InferDataSetSchemaFromXml() {  
      String[] xmlFileNames = {   
  
                                    @"ElementsWithOnlyAttributes.xml",   
                                    @"ElementsWithAttributes.xml",  
                                    @"RepeatingElements.xml",   
                                    @"ElementsWithChildElements.xml" };  
  
      foreach (String xmlFileName in xmlFileNames) {  
         Console.WriteLine("Result of {0}", Path.GetFileNameWithoutExtension(xmlFileName));  
         DataSet newSchool = new DataSet();  
         newSchool.InferXmlSchema(xmlFileName, null);  
         DataTableHelper.ShowDataSetSchema(newSchool);  
         Console.WriteLine();  
      }  
   }  
}  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-325">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-325">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetXmlSchema">
      <MemberSignature Language="C#" Value="public string GetXmlSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetXmlSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetXmlSchema" />
      <MemberSignature Language="VB.NET" Value="Public Function GetXmlSchema () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetXmlSchema();" />
      <MemberSignature Language="F#" Value="member this.GetXmlSchema : unit -&gt; string" Usage="dataSet.GetXmlSchema " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6e9b5-326"><see cref="T:System.Data.DataSet" /> に格納されているデータの XML 表現の XML スキーマを返します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-326">Returns the XML Schema for the XML representation of the data stored in the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <returns><span data-ttu-id="6e9b5-327"><see cref="T:System.Data.DataSet" /> に格納されているデータの XML 表現の XML スキーマである文字列。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-327">String that is the XML Schema for the XML representation of the data stored in the <see cref="T:System.Data.DataSet" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-328">このメソッドの呼び出しは、プライマリスキーマのみが書き込まれている点を除いて、<xref:System.Data.DataSet.WriteXmlSchema%2A>の呼び出しと同じです。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-328">Calling this method is identical to calling <xref:System.Data.DataSet.WriteXmlSchema%2A>, except that only the primary schema is written.</span></span>  
  
 <span data-ttu-id="6e9b5-329"><xref:System.Data.DataSet.GetXmlSchema%2A> では XML が文字列として返されるため、ファイルに XML を書き込む <xref:System.Data.DataSet.WriteXmlSchema%2A> よりも多くのオーバーヘッドが必要になります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-329"><xref:System.Data.DataSet.GetXmlSchema%2A> returns XML as a string, and therefore requires more overhead than <xref:System.Data.DataSet.WriteXmlSchema%2A> to write XML to a file.</span></span>  
  
 <span data-ttu-id="6e9b5-330">スキーマ推論を使用して <xref:System.Data.DataSet> を作成し、XML または Web サービスを使用してシリアル化すると、列の順序が変わる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-330">If you build a <xref:System.Data.DataSet> using schema inference and serialize it using XML or Web services, the column ordering may change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-331">次の例では、<xref:System.Data.DataSet> と <xref:System.Data.DataTable>を作成し、スキーマを XML 形式で表示します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-331">The following example creates a <xref:System.Data.DataSet> and <xref:System.Data.DataTable>, and then displays the schema in XML format.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.GetXmlSchema Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetXmlSchema Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetXmlSchema Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetXmlSchema Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-332">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-332">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="HasChanges">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6e9b5-333"><see cref="T:System.Data.DataSet" /> に新しい行、削除された行、変更された行などの変更があるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-333">Gets a value indicating whether the <see cref="T:System.Data.DataSet" /> has changes, including new, deleted, or modified rows.</span></span></summary>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-334">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-334">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="HasChanges">
      <MemberSignature Language="C#" Value="public bool HasChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.HasChanges" />
      <MemberSignature Language="VB.NET" Value="Public Function HasChanges () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasChanges();" />
      <MemberSignature Language="F#" Value="member this.HasChanges : unit -&gt; bool" Usage="dataSet.HasChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6e9b5-335"><see cref="T:System.Data.DataSet" /> に新しい行、削除された行、変更された行などの変更があるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-335">Gets a value indicating whether the <see cref="T:System.Data.DataSet" /> has changes, including new, deleted, or modified rows.</span></span></summary>
        <returns><span data-ttu-id="6e9b5-336"><see cref="T:System.Data.DataSet" /> に変更がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-336"><see langword="true" /> if the <see cref="T:System.Data.DataSet" /> has changes; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6e9b5-337">次の例では、<xref:System.Data.DataSet.GetChanges%2A> メソッドを使用して、データソースを更新するために使用する2番目の <xref:System.Data.DataSet> オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-337">The following example uses the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> object that is then used to update a data source.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.HasChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.HasChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.HasChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.HasChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-338">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-338">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="HasChanges">
      <MemberSignature Language="C#" Value="public bool HasChanges (System.Data.DataRowState rowStates);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasChanges(valuetype System.Data.DataRowState rowStates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.HasChanges(System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasChanges (rowStates As DataRowState) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasChanges(System::Data::DataRowState rowStates);" />
      <MemberSignature Language="F#" Value="member this.HasChanges : System.Data.DataRowState -&gt; bool" Usage="dataSet.HasChanges rowStates" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowStates" Type="System.Data.DataRowState" />
      </Parameters>
      <Docs>
        <param name="rowStates"><span data-ttu-id="6e9b5-339"><see cref="T:System.Data.DataRowState" /> 値のいずれか 1 つです。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-339">One of the <see cref="T:System.Data.DataRowState" /> values.</span></span></param>
        <summary><span data-ttu-id="6e9b5-340"><see cref="T:System.Data.DataSet" /> に <see cref="T:System.Data.DataRowState" /> でフィルター処理された新しい行、削除された行、変更された行などの変更があるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-340">Gets a value indicating whether the <see cref="T:System.Data.DataSet" /> has changes, including new, deleted, or modified rows, filtered by <see cref="T:System.Data.DataRowState" />.</span></span></summary>
        <returns><span data-ttu-id="6e9b5-341"><see cref="T:System.Data.DataSet" /> に変更がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-341"><see langword="true" /> if the <see cref="T:System.Data.DataSet" /> has changes; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-342"><xref:System.Data.DataSet.GetChanges%2A> メソッドを呼び出す前に、`DataSet` の <xref:System.Data.DataSet.HasChanges%2A> プロパティを調べます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-342">Examine the <xref:System.Data.DataSet.HasChanges%2A> property of the `DataSet` before invoking the <xref:System.Data.DataSet.GetChanges%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-343">次の例では、<xref:System.Data.DataSet.GetChanges%2A> メソッドを使用して、2番目の <xref:System.Data.DataSet> オブジェクトを作成します。このオブジェクトは、データソースの更新に使用されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-343">The following example uses the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> object, which is then used to update a data source.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.GetChanges1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetChanges1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-344">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-344">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="HasErrors">
      <MemberSignature Language="C#" Value="public bool HasErrors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasErrors" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.HasErrors" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasErrors As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasErrors { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasErrors : bool" Usage="System.Data.DataSet.HasErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetHasErrorsDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6e9b5-345">この <see cref="T:System.Data.DataTable" /> 内の <see cref="T:System.Data.DataSet" /> オブジェクトのいずれかにエラーがあるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-345">Gets a value indicating whether there are errors in any of the <see cref="T:System.Data.DataTable" /> objects within this <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <value><span data-ttu-id="6e9b5-346">テーブルにエラーが含まれている場合は <see langword="true" /> します。それ以外の場合は、<see langword="false" />ます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-346"><see langword="true" /> if any table contains an error; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-347"><xref:System.Data.DataSet> 内の各 <xref:System.Data.DataTable> には、<xref:System.Data.DataTable.HasErrors%2A> プロパティもあります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-347">Each <xref:System.Data.DataTable> in a <xref:System.Data.DataSet> also has a <xref:System.Data.DataTable.HasErrors%2A> property.</span></span> <span data-ttu-id="6e9b5-348">最初に `DataSet` の `HasErrors` プロパティを使用して、テーブルにエラーがあるかどうかを確認してから、個々の <xref:System.Data.DataTable> オブジェクトを確認します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-348">Use the `HasErrors` property of the `DataSet` first, to determine if any table has errors, before checking individual <xref:System.Data.DataTable> objects.</span></span> <span data-ttu-id="6e9b5-349">`DataTable` にエラーがある場合、<xref:System.Data.DataTable.GetErrors%2A> メソッドはエラーを含む <xref:System.Data.DataRow> オブジェクトの配列を返します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-349">If a `DataTable` has errors, the <xref:System.Data.DataTable.GetErrors%2A> method returns an array of <xref:System.Data.DataRow> objects containing the errors.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-350">次の例では、<xref:System.Data.DataSet.HasErrors%2A> プロパティを使用して、<xref:System.Data.DataSet> オブジェクトにエラーが含まれているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-350">The following example uses the <xref:System.Data.DataSet.HasErrors%2A> property to determine whether a <xref:System.Data.DataSet> object contains errors.</span></span> <span data-ttu-id="6e9b5-351">その場合、各 <xref:System.Data.DataTable> の各 <xref:System.Data.DataRow> のエラーが出力されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-351">If so, the errors for each <xref:System.Data.DataRow> in each <xref:System.Data.DataTable> are printed.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.HasErrors Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.HasErrors Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.HasErrors Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.HasErrors Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-352">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-352">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="InferXmlSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6e9b5-353">XML スキーマを <see cref="T:System.Data.DataSet" /> に適用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-353">Applies XML schema to the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-354">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-354">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="InferXmlSchema">
      <MemberSignature Language="C#" Value="public void InferXmlSchema (System.IO.Stream stream, string[] nsArray);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InferXmlSchema(class System.IO.Stream stream, string[] nsArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InferXmlSchema(System.IO.Stream,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub InferXmlSchema (stream As Stream, nsArray As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InferXmlSchema(System::IO::Stream ^ stream, cli::array &lt;System::String ^&gt; ^ nsArray);" />
      <MemberSignature Language="F#" Value="member this.InferXmlSchema : System.IO.Stream * string[] -&gt; unit" Usage="dataSet.InferXmlSchema (stream, nsArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="nsArray" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="6e9b5-355">スキーマの読み出し元の <see langword="Stream" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-355">The <see langword="Stream" /> from which to read the schema.</span></span></param>
        <param name="nsArray"><span data-ttu-id="6e9b5-356">スキーマ推論から除外する名前空間 URI (Uniform Resource Identifier) 文字列の配列。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-356">An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.</span></span></param>
        <summary><span data-ttu-id="6e9b5-357">指定した <see cref="T:System.IO.Stream" /> の XML スキーマを <see cref="T:System.Data.DataSet" /> に適用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-357">Applies the XML schema from the specified <see cref="T:System.IO.Stream" /> to the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-358">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-358">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InferXmlSchema">
      <MemberSignature Language="C#" Value="public void InferXmlSchema (System.IO.TextReader reader, string[] nsArray);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InferXmlSchema(class System.IO.TextReader reader, string[] nsArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InferXmlSchema(System.IO.TextReader,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub InferXmlSchema (reader As TextReader, nsArray As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InferXmlSchema(System::IO::TextReader ^ reader, cli::array &lt;System::String ^&gt; ^ nsArray);" />
      <MemberSignature Language="F#" Value="member this.InferXmlSchema : System.IO.TextReader * string[] -&gt; unit" Usage="dataSet.InferXmlSchema (reader, nsArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
        <Parameter Name="nsArray" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="6e9b5-359">スキーマの読み出し元の <see langword="TextReader" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-359">The <see langword="TextReader" /> from which to read the schema.</span></span></param>
        <param name="nsArray"><span data-ttu-id="6e9b5-360">スキーマ推論から除外する名前空間 URI (Uniform Resource Identifier) 文字列の配列。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-360">An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.</span></span></param>
        <summary><span data-ttu-id="6e9b5-361">指定した <see cref="T:System.IO.TextReader" /> の XML スキーマを <see cref="T:System.Data.DataSet" /> に適用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-361">Applies the XML schema from the specified <see cref="T:System.IO.TextReader" /> to the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-362">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-362">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InferXmlSchema">
      <MemberSignature Language="C#" Value="public void InferXmlSchema (string fileName, string[] nsArray);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InferXmlSchema(string fileName, string[] nsArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InferXmlSchema(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub InferXmlSchema (fileName As String, nsArray As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InferXmlSchema(System::String ^ fileName, cli::array &lt;System::String ^&gt; ^ nsArray);" />
      <MemberSignature Language="F#" Value="member this.InferXmlSchema : string * string[] -&gt; unit" Usage="dataSet.InferXmlSchema (fileName, nsArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="nsArray" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="6e9b5-363">スキーマの読み込み元の (パスを含む) ファイル名。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-363">The name of the file (including the path) from which to read the schema.</span></span></param>
        <param name="nsArray"><span data-ttu-id="6e9b5-364">スキーマ推論から除外する名前空間 URI (Uniform Resource Identifier) 文字列の配列。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-364">An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.</span></span></param>
        <summary><span data-ttu-id="6e9b5-365">指定したファイルの XML スキーマを <see cref="T:System.Data.DataSet" /> に適用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-365">Applies the XML schema from the specified file to the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="6e9b5-366"><see cref="T:System.Security.Permissions.FileIOPermission" /> が <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /> に設定されていません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-366"><see cref="T:System.Security.Permissions.FileIOPermission" /> is not set to <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</span></span></exception>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-367">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-367">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InferXmlSchema">
      <MemberSignature Language="C#" Value="public void InferXmlSchema (System.Xml.XmlReader reader, string[] nsArray);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InferXmlSchema(class System.Xml.XmlReader reader, string[] nsArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InferXmlSchema(System.Xml.XmlReader,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub InferXmlSchema (reader As XmlReader, nsArray As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InferXmlSchema(System::Xml::XmlReader ^ reader, cli::array &lt;System::String ^&gt; ^ nsArray);" />
      <MemberSignature Language="F#" Value="member this.InferXmlSchema : System.Xml.XmlReader * string[] -&gt; unit" Usage="dataSet.InferXmlSchema (reader, nsArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="nsArray" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="6e9b5-368">スキーマの読み出し元の <see langword="XMLReader" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-368">The <see langword="XMLReader" /> from which to read the schema.</span></span></param>
        <param name="nsArray"><span data-ttu-id="6e9b5-369">スキーマ推論から除外する名前空間 URI (Uniform Resource Identifier) 文字列の配列。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-369">An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.</span></span></param>
        <summary><span data-ttu-id="6e9b5-370">指定した <see cref="T:System.Xml.XmlReader" /> の XML スキーマを <see cref="T:System.Data.DataSet" /> に適用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-370">Applies the XML schema from the specified <see cref="T:System.Xml.XmlReader" /> to the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-371">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-371">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Initialized">
      <MemberSignature Language="C#" Value="public event EventHandler Initialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Initialized" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataSet.Initialized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Initialized As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ Initialized;" />
      <MemberSignature Language="F#" Value="member this.Initialized : EventHandler " Usage="member this.Initialized : System.EventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.ComponentModel.ISupportInitializeNotification.Initialized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6e9b5-372"><see cref="T:System.Data.DataSet" /> が初期化された後に発生します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-372">Occurs after the <see cref="T:System.Data.DataSet" /> is initialized.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-373">詳細については、<xref:System.Data.DataSet.IsInitialized%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-373">For more information, see <xref:System.Data.DataSet.IsInitialized%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-374">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-374">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InitializeDerivedDataSet">
      <MemberSignature Language="C#" Value="protected virtual void InitializeDerivedDataSet ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeDerivedDataSet() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InitializeDerivedDataSet" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub InitializeDerivedDataSet ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InitializeDerivedDataSet();" />
      <MemberSignature Language="F#" Value="abstract member InitializeDerivedDataSet : unit -&gt; unit&#xA;override this.InitializeDerivedDataSet : unit -&gt; unit" Usage="dataSet.InitializeDerivedDataSet " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6e9b5-375">バイナリまたは XML ストリームからデータセットのすべてのテーブル データを逆シリアル化します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-375">Deserialize all of the tables data of the DataSet from the binary or XML stream.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBinarySerialized">
      <MemberSignature Language="C#" Value="protected bool IsBinarySerialized (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsBinarySerialized(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsBinarySerialized (info As SerializationInfo, context As StreamingContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsBinarySerialized(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="member this.IsBinarySerialized : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; bool" Usage="dataSet.IsBinarySerialized (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="6e9b5-376"><see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-376">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object.</span></span></param>
        <param name="context"><span data-ttu-id="6e9b5-377"><see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-377">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object.</span></span></param>
        <summary><span data-ttu-id="6e9b5-378"><see langword="DataSet" /> のシリアル化された表現の形式を検査します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-378">Inspects the format of the serialized representation of the <see langword="DataSet" />.</span></span></summary>
        <returns><span data-ttu-id="6e9b5-379">指定した <see cref="T:System.Runtime.Serialization.SerializationInfo" /> がバイナリ形式でシリアル化された <see langword="true" /> を表す場合は <see langword="DataSet" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-379"><see langword="true" /> if the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> represents a <see langword="DataSet" /> serialized in its binary format, <see langword="false" /> otherwise.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-380">このメンバーは .NET Framework インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-380">This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitialized">
      <MemberSignature Language="C#" Value="public bool IsInitialized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitialized" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.IsInitialized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInitialized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitialized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInitialized : bool" Usage="System.Data.DataSet.IsInitialized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.ISupportInitializeNotification.IsInitialized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6e9b5-381"><see cref="T:System.Data.DataSet" /> が初期化されているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-381">Gets a value that indicates whether the <see cref="T:System.Data.DataSet" /> is initialized.</span></span></summary>
        <value><span data-ttu-id="6e9b5-382">コンポーネントの初期化が完了していることを示す場合は<see langword="true" /> 。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-382"><see langword="true" /> to indicate the component has completed initialization; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-383">Visual Studio などによって構築されているときの <xref:System.Data.DataSet> の状態を返します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-383">Returns the status of the <xref:System.Data.DataSet> while it's being constructed, for instance by Visual Studio.</span></span> <span data-ttu-id="6e9b5-384"><xref:System.Data.DataSet.BeginInit%2A> メソッドは、それを `false` に設定し、<xref:System.Data.DataSet.EndInit%2A> メソッドによって `true`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-384">The <xref:System.Data.DataSet.BeginInit%2A> method sets it to `false` and <xref:System.Data.DataSet.EndInit%2A> method sets it to `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-385">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-385">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6e9b5-386">指定された <see cref="T:System.Data.DataSet" /> を使用し、<see cref="T:System.Data.IDataReader" /> にデータ ソースからの値を設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-386">Fills a <see cref="T:System.Data.DataSet" /> with values from a data source using the supplied <see cref="T:System.Data.IDataReader" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-387"><xref:System.Data.DataTable.Load%2A> メソッドは、1つの <xref:System.Data.DataTable> にデータを格納し、<xref:System.Data.IDataReader> インスタンスから取得する方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-387">The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance.</span></span> <span data-ttu-id="6e9b5-388">このメソッドは同じ機能を提供しますが、`IDataReader` から複数の結果セットを `DataSet`内の複数のテーブルに読み込むことができます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-388">This method provides the same functionality, but allows you to load multiple result sets from an `IDataReader` into multiple tables within a `DataSet`.</span></span>  
  
 <span data-ttu-id="6e9b5-389">`DataSet` が既に行を含んでいる場合、データ ソースからの受信データは既存の行にマージされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-389">If the `DataSet` already contains rows, the incoming data from the data source is merged with the existing rows.</span></span>  
  
 <span data-ttu-id="6e9b5-390">`Load` メソッドは、指定されたデータソースからデータを取得し、それを現在のデータコンテナー (この場合は `DataSet`) に追加することを中心として、いくつかの一般的なシナリオで使用できます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-390">The `Load` method can be used in several common scenarios, all centered around getting data from a specified data source and adding it to the current data container (in this case, a `DataSet`).</span></span> <span data-ttu-id="6e9b5-391">これらのシナリオでは、`DataSet`の標準の使用方法について説明し、その更新とマージの動作について説明します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-391">These scenarios describe standard usage for a `DataSet`, describing its update and merge behavior.</span></span>  
  
 <span data-ttu-id="6e9b5-392">1つのプライマリデータソースと同期または更新する `DataSet`。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-392">A `DataSet` synchronizes or updates with a single primary data source.</span></span> <span data-ttu-id="6e9b5-393">`DataSet` によって変更が追跡され、プライマリデータソースとの同期が可能になります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-393">The `DataSet` tracks changes, allowing synchronization with the primary data source.</span></span> <span data-ttu-id="6e9b5-394">さらに、1つまたは複数のセカンダリデータソースからの増分データを受け取ることが `DataSet` ます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-394">In addition, a `DataSet` can accept incremental data from one or more secondary data sources.</span></span> <span data-ttu-id="6e9b5-395">`DataSet` は、セカンダリデータソースとの同期を許可するために変更を追跡する責任はありません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-395">The `DataSet` isn't responsible for tracking changes in order to allow synchronization with the secondary data source.</span></span>  
  
 <span data-ttu-id="6e9b5-396">これらの2つの仮想データソースを指定すると、ユーザーは次のいずれかの動作を必要とする可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-396">Given these two hypothetical data sources, a user is likely to require one of the following behaviors:</span></span>  
  
-   <span data-ttu-id="6e9b5-397">プライマリデータソースから `DataSet` を初期化します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-397">Initialize `DataSet` from a primary data source.</span></span> <span data-ttu-id="6e9b5-398">このシナリオでは、ユーザーは、プライマリデータソースの値を使用して空の `DataSet` を初期化する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-398">In this scenario, the user wants to initialize an empty `DataSet` with values from the primary data source.</span></span> <span data-ttu-id="6e9b5-399">1つ以上の DataTable の内容が変更されています。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-399">One or more DataTable's contents are modified.</span></span> <span data-ttu-id="6e9b5-400">その後、ユーザーが変更をプライマリデータソースに反映する予定です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-400">Later the user intends to propagate changes back to the primary data source.</span></span>  
  
-   <span data-ttu-id="6e9b5-401">変更を保持し、プライマリデータソースから再同期します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-401">Preserve changes and re-synchronize from the primary data source.</span></span> <span data-ttu-id="6e9b5-402">このシナリオでは、ユーザーは前のシナリオで入力した `DataSet` を取得し、プライマリデータソースとの増分同期を実行して、`DataSet`に加えられた変更を保持する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-402">In this scenario, the user wants to take the `DataSet` filled in the previous scenario and perform an incremental synchronization with the primary data source, preserving modifications made in the `DataSet`.</span></span>  
  
-   <span data-ttu-id="6e9b5-403">セカンダリデータソースからの増分データフィード。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-403">Incremental data feed from secondary data sources.</span></span> <span data-ttu-id="6e9b5-404">このシナリオでは、ユーザーは1つまたは複数のセカンダリデータソースから変更をマージし、それらの変更をプライマリデータソースに反映させます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-404">In this scenario, the user wants to merge changes from one or more secondary data sources, and propagate those changes back to the primary data source.</span></span>  
  
 <span data-ttu-id="6e9b5-405">`Load` メソッドを使用すると、すべてのシナリオを可能にすることができます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-405">The `Load` method makes all these scenarios possible.</span></span> <span data-ttu-id="6e9b5-406">このメソッドを使用すると、読み込みオプションパラメーターを指定して、<xref:System.Data.DataTable> 内の既存の行を読み込んだ行と結合する方法を示すことができます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-406">This method allows you to specify a load option parameter, indicating how rows already in a <xref:System.Data.DataTable> combine with rows being loaded.</span></span> <span data-ttu-id="6e9b5-407">次の表では、<xref:System.Data.LoadOption> 列挙型によって提供される3つの読み込みオプションについて説明します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-407">The following table describes the three load options provided by the <xref:System.Data.LoadOption> enumeration.</span></span> <span data-ttu-id="6e9b5-408">どちらの場合も、説明は、受信データの行の主キーが既存の行の主キーと一致する場合の動作を示します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-408">In each case, the description indicates the behavior when the primary key of a row in the incoming data matches the primary key of an existing row.</span></span>  
  
|<span data-ttu-id="6e9b5-409">Load オプション</span><span class="sxs-lookup"><span data-stu-id="6e9b5-409">Load Option</span></span>|<span data-ttu-id="6e9b5-410">説明</span><span class="sxs-lookup"><span data-stu-id="6e9b5-410">Description</span></span>|  
|-----------------|-----------------|  
|<span data-ttu-id="6e9b5-411">`PreserveChanges` (規定値)</span><span class="sxs-lookup"><span data-stu-id="6e9b5-411">`PreserveChanges` (default)</span></span>|<span data-ttu-id="6e9b5-412">受信した行の値を使用して、行の元のバージョンを更新します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-412">Updates the original version of the row with the value of the incoming row.</span></span>|  
|`OverwriteChanges`|<span data-ttu-id="6e9b5-413">行の現在のバージョンと元のバージョンを、受信した行の値で更新します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-413">Updates the current and original versions of the row with the value of the incoming row.</span></span>|  
|`Upsert`|<span data-ttu-id="6e9b5-414">行の現在のバージョンを、受信した行の値で更新します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-414">Updates the current version of the row with the value of the incoming row.</span></span>|  
  
 <span data-ttu-id="6e9b5-415">一般に、`PreserveChanges` オプションと `OverwriteChanges` オプションは、ユーザーが `DataSet` とその変更をプライマリデータソースと同期する必要があるシナリオを対象としています。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-415">In general, the `PreserveChanges` and `OverwriteChanges` options are intended for scenarios in which the user needs to synchronize the `DataSet` and its changes with the primary data source.</span></span> <span data-ttu-id="6e9b5-416">`Upsert` オプションを選択すると、1つまたは複数のセカンダリデータソースからの変更を簡単に集計できます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-416">The `Upsert` option facilitates aggregating changes from one or more secondary data sources.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-417">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-417">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, params System.Data.DataTable[] tables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Data.IDataReader reader, valuetype System.Data.LoadOption loadOption, class System.Data.DataTable[] tables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (reader As IDataReader, loadOption As LoadOption, ParamArray tables As DataTable())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Data::IDataReader ^ reader, System::Data::LoadOption loadOption, ... cli::array &lt;System::Data::DataTable ^&gt; ^ tables);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Data.IDataReader * System.Data.LoadOption * System.Data.DataTable[] -&gt; unit" Usage="dataSet.Load (reader, loadOption, tables)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="loadOption" Type="System.Data.LoadOption" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="tables" Type="System.Data.DataTable[]" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="6e9b5-418">1 つ以上の結果セットを含む <see cref="T:System.Data.IDataReader" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-418">An <see cref="T:System.Data.IDataReader" /> that provides one or more result sets.</span></span></param>
        <param name="loadOption"><span data-ttu-id="6e9b5-419"><see cref="T:System.Data.LoadOption" /> 列挙体の値。<see cref="T:System.Data.DataTable" /> 内の <see cref="T:System.Data.DataSet" /> インスタンスに既に含まれている行を同じ主キーを持つ受信した行と結合する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-419">A value from the <see cref="T:System.Data.LoadOption" /> enumeration that indicates how rows already in the <see cref="T:System.Data.DataTable" /> instances within the <see cref="T:System.Data.DataSet" /> will be combined with incoming rows that share the same primary key.</span></span></param>
        <param name="tables"><span data-ttu-id="6e9b5-420"><see cref="T:System.Data.DataTable" /> メソッドが名前と名前空間の情報を取得する、<see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])" /> インスタンスの配列。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-420">An array of <see cref="T:System.Data.DataTable" /> instances, from which the <see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])" /> method retrieves name and namespace information.</span></span> <span data-ttu-id="6e9b5-421">これらのテーブルは、この <see cref="T:System.Data.DataTableCollection" /> に格納されている <see cref="T:System.Data.DataSet" /> のメンバーである必要があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-421">Each of these tables must be a member of the <see cref="T:System.Data.DataTableCollection" /> contained by this <see cref="T:System.Data.DataSet" />.</span></span></param>
        <summary><span data-ttu-id="6e9b5-422">指定した <see cref="T:System.Data.DataSet" /> を使用するデータ ソースの値を <see cref="T:System.Data.IDataReader" /> に格納し、<see cref="T:System.Data.DataTable" /> インスタンスの配列を使用してスキーマ情報と名前空間情報を指定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-422">Fills a <see cref="T:System.Data.DataSet" /> with values from a data source using the supplied <see cref="T:System.Data.IDataReader" />, using an array of <see cref="T:System.Data.DataTable" /> instances to supply the schema and namespace information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-423"><xref:System.Data.DataTable.Load%2A> メソッドは、1つの <xref:System.Data.DataTable> にデータを格納し、<xref:System.Data.IDataReader> インスタンスから取得する方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-423">The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance.</span></span> <span data-ttu-id="6e9b5-424">このメソッドは同じ機能を提供しますが、<xref:System.Data.IDataReader> から複数の結果セットを <xref:System.Data.DataSet>内の複数のテーブルに読み込むことができます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-424">This method provides the same functionality, but allows you to load multiple result sets from an <xref:System.Data.IDataReader> into multiple tables within a <xref:System.Data.DataSet>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-425">受信 `reader` 内のいずれかのソースデータ列が計算列である場合、読み込み操作は <xref:System.InvalidOperationException> で失敗します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-425">The load operation will fail with an <xref:System.InvalidOperationException> if any of the source data columns in the incoming `reader` are computed columns.</span></span>  
  
 <span data-ttu-id="6e9b5-426">`loadOption` パラメーターを使用すると、インポートしたデータが既存のデータとどのように対話するかを指定できます。また、<xref:System.Data.LoadOption> 列挙型の値を使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-426">The `loadOption` parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <xref:System.Data.LoadOption> enumeration.</span></span> <span data-ttu-id="6e9b5-427">このパラメーターの使用方法の詳細については、<xref:System.Data.DataTable><xref:System.Data.DataTable.Load%2A> メソッドのドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-427">See the documentation for the <xref:System.Data.DataTable><xref:System.Data.DataTable.Load%2A> method for more information on using this parameter.</span></span>  
  
 <span data-ttu-id="6e9b5-428">`tables` パラメーターを使用すると、リーダーから読み込まれた各結果セットに対応するテーブルの順序を示す <xref:System.Data.DataTable> インスタンスの配列を指定できます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-428">The `tables` parameter allows you to specify an array of <xref:System.Data.DataTable> instances, indicating the order of the tables corresponding to each result set loaded from the reader.</span></span> <span data-ttu-id="6e9b5-429"><xref:System.Data.DataSet.Load%2A> メソッドは、指定された各 <xref:System.Data.DataTable> インスタンスに、ソースデータリーダーからの1つの結果セットのデータを格納します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-429">The <xref:System.Data.DataSet.Load%2A> method fills each supplied <xref:System.Data.DataTable> instance with data from a single result set from the source data reader.</span></span> <span data-ttu-id="6e9b5-430">各結果セットの後、<xref:System.Data.DataSet.Load%2A> メソッドは、結果セットがなくなるまで、リーダー内の次の結果セットに移動します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-430">After each result set, the <xref:System.Data.DataSet.Load%2A> method moves on to the next result set within the reader, until there are no more result sets.</span></span>  
  
 <span data-ttu-id="6e9b5-431">このメソッドの名前解決スキームは、<xref:System.Data.Common.DbDataAdapter> クラスの <xref:System.Data.Common.DbDataAdapter.Fill%2A> メソッドの後に続くものと同じです。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-431">The name resolution scheme for this method is the same as that followed by the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method of the <xref:System.Data.Common.DbDataAdapter> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-432">次の例では、新しい <xref:System.Data.DataSet>を作成し、2つの <xref:System.Data.DataTable> インスタンスを <xref:System.Data.DataSet>に追加します。次に、<xref:System.Data.DataSet.Load%2A> メソッドを使用して <xref:System.Data.DataSet> に入力し、2つの結果セットを含む <xref:System.Data.DataTableReader> からデータを取得します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-432">The following example creates a new <xref:System.Data.DataSet>, adds two <xref:System.Data.DataTable> instances to the <xref:System.Data.DataSet>, and then fills the <xref:System.Data.DataSet> using the <xref:System.Data.DataSet.Load%2A> method, retrieving data from a <xref:System.Data.DataTableReader> that contains two result sets.</span></span> <span data-ttu-id="6e9b5-433">最後に、この例では、テーブルの内容をコンソールウィンドウに表示します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-433">Finally, the example displays the contents of the tables in the console window.</span></span>  
  
 [!code-csharp[DataWorks DataSet.LoadTables#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.LoadTables/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.LoadTables#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.LoadTables/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-434">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-434">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, params string[] tables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Data.IDataReader reader, valuetype System.Data.LoadOption loadOption, string[] tables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (reader As IDataReader, loadOption As LoadOption, ParamArray tables As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Data::IDataReader ^ reader, System::Data::LoadOption loadOption, ... cli::array &lt;System::String ^&gt; ^ tables);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Data.IDataReader * System.Data.LoadOption * string[] -&gt; unit" Usage="dataSet.Load (reader, loadOption, tables)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="loadOption" Type="System.Data.LoadOption" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="tables" Type="System.String[]" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="6e9b5-435">1 つ以上の結果セットを含む <see cref="T:System.Data.IDataReader" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-435">An <see cref="T:System.Data.IDataReader" /> that provides one or more result sets.</span></span></param>
        <param name="loadOption"><span data-ttu-id="6e9b5-436"><see cref="T:System.Data.LoadOption" /> 列挙体の値。<see cref="T:System.Data.DataTable" /> 内の <see langword="DataSet" /> インスタンスに既に含まれている行を同じ主キーを持つ受信した行と結合する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-436">A value from the <see cref="T:System.Data.LoadOption" /> enumeration that indicates how rows already in the <see cref="T:System.Data.DataTable" /> instances within the <see langword="DataSet" /> will be combined with incoming rows that share the same primary key.</span></span></param>
        <param name="tables"><span data-ttu-id="6e9b5-437"><see langword="Load" /> メソッドがテーブル名の情報を取得する、文字列の配列。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-437">An array of strings, from which the <see langword="Load" /> method retrieves table name information.</span></span></param>
        <summary><span data-ttu-id="6e9b5-438">指定した <see cref="T:System.Data.DataSet" /> を使用するデータ ソースの値を <see cref="T:System.Data.IDataReader" /> に格納し、文字列の配列を使用して <see langword="DataSet" /> 内のテーブルの名前を指定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-438">Fills a <see cref="T:System.Data.DataSet" /> with values from a data source using the supplied <see cref="T:System.Data.IDataReader" />, using an array of strings to supply the names for the tables within the <see langword="DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-439"><xref:System.Data.DataTable.Load%2A> メソッドは、1つの <xref:System.Data.DataTable> にデータを格納し、<xref:System.Data.IDataReader> インスタンスから取得する方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-439">The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance.</span></span> <span data-ttu-id="6e9b5-440">このメソッドは同じ機能を提供しますが、`IDataReader` から複数の結果セットを `DataSet`内の複数のテーブルに読み込むことができます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-440">This method provides the same functionality, but allows you to load multiple result sets from an `IDataReader` into multiple tables within a `DataSet`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-441">受信 `reader` 内のいずれかのソースデータ列が計算列である場合、読み込み操作は <xref:System.InvalidOperationException> で失敗します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-441">The load operation will fail with an <xref:System.InvalidOperationException> if any of the source data columns in the incoming `reader` are computed columns.</span></span>  
  
 <span data-ttu-id="6e9b5-442">`loadOption` パラメーターを使用すると、インポートしたデータが既存のデータとどのように対話するかを指定できます。また、<xref:System.Data.LoadOption> 列挙型の値を使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-442">The `loadOption` parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <xref:System.Data.LoadOption> enumeration.</span></span> <span data-ttu-id="6e9b5-443">このパラメーターの使用方法の詳細については、<xref:System.Data.DataTable.Load%2A> メソッドのドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-443">See the documentation for the <xref:System.Data.DataTable.Load%2A> method for more information on using this parameter.</span></span>  
  
 <span data-ttu-id="6e9b5-444">`tables` パラメーターを使用すると、リーダーから読み込まれた各結果セットに対応するテーブルの順序を示す、テーブル名の配列を指定できます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-444">The `tables` parameter allows you to specify an array of table names, indicating the order of the tables corresponding to each result set loaded from the reader.</span></span> <span data-ttu-id="6e9b5-445">`Load` メソッドは、テーブル名の配列で見つかった名前に一致する `DataSet` 内のテーブルを順に検索しようとします。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-445">The `Load` method attempts to find a table within the `DataSet` matching the name found in the array of table names, in order.</span></span> <span data-ttu-id="6e9b5-446">一致するテーブルが見つかった場合、そのテーブルは現在の結果セットの内容と共に読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-446">If a matching table is found, that table is loaded with the content of the current result set.</span></span> <span data-ttu-id="6e9b5-447">一致するテーブルが見つからない場合は、テーブル名の配列に指定された名前を使用してテーブルが作成され、新しいテーブルのスキーマが結果セットから推論されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-447">If no matching table is found, a table is created using the name supplied in the array of table names, and the new table's schema is inferred from the result set.</span></span> <span data-ttu-id="6e9b5-448">各結果セットの後、`Load` メソッドは、結果セットがなくなるまで、リーダー内の次の結果セットに移動します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-448">After each result set, the `Load` method moves on to the next result set within the reader, until there are no more result sets.</span></span>  
  
 <span data-ttu-id="6e9b5-449">`DataSet`に関連付けられた既定の名前空間 (存在する場合) は、新しく作成された各 `DataTable`に関連付けられます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-449">The default namespace associated with `DataSet`, if any, is associated with each newly created `DataTable`.</span></span> <span data-ttu-id="6e9b5-450">このメソッドの名前解決スキームは、<xref:System.Data.Common.DbDataAdapter> クラスの <xref:System.Data.Common.DbDataAdapter.Fill%2A> メソッドの後に続くものと同じです。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-450">The name resolution scheme for this method is the same as that followed by the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method of the <xref:System.Data.Common.DbDataAdapter> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-451">次のコンソールアプリケーションの例では、最初にテーブルを作成し、`Load` メソッドを使用してリーダーから <xref:System.Data.DataSet>にデータを読み込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-451">The following Console application example first creates tables and loads data from a reader into a <xref:System.Data.DataSet>, using the `Load` method.</span></span> <span data-ttu-id="6e9b5-452">次に、テーブルを <xref:System.Data.DataSet> に追加し、テーブルに <xref:System.Data.DataTableReader>からのデータを格納しようとします。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-452">The example then adds tables to a <xref:System.Data.DataSet> and attempts to fill the tables with data from a <xref:System.Data.DataTableReader>.</span></span> <span data-ttu-id="6e9b5-453">この例では、`Load` メソッドに渡されたパラメーターが存在しないテーブル名を示しているため、`Load` メソッドは、パラメーターとして渡された名前と一致する新しいテーブルを作成します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-453">In this example, because the parameters passed to the `Load` method indicate a table name that does not exist, the `Load` method creates a new table to match the name passed as a parameter.</span></span> <span data-ttu-id="6e9b5-454">データが読み込まれると、この例では、すべてのテーブルの内容がコンソールウィンドウに表示されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-454">Once the data has been loaded, the example displays the contents of all its tables in the Console window.</span></span>  
  
 [!code-csharp[DataWorks DataSet.LoadString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.LoadString/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.LoadString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.LoadString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-455">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-455">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public virtual void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, System.Data.FillErrorEventHandler errorHandler, params System.Data.DataTable[] tables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load(class System.Data.IDataReader reader, valuetype System.Data.LoadOption loadOption, class System.Data.FillErrorEventHandler errorHandler, class System.Data.DataTable[] tables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Load (reader As IDataReader, loadOption As LoadOption, errorHandler As FillErrorEventHandler, ParamArray tables As DataTable())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Load(System::Data::IDataReader ^ reader, System::Data::LoadOption loadOption, System::Data::FillErrorEventHandler ^ errorHandler, ... cli::array &lt;System::Data::DataTable ^&gt; ^ tables);" />
      <MemberSignature Language="F#" Value="abstract member Load : System.Data.IDataReader * System.Data.LoadOption * System.Data.FillErrorEventHandler * System.Data.DataTable[] -&gt; unit&#xA;override this.Load : System.Data.IDataReader * System.Data.LoadOption * System.Data.FillErrorEventHandler * System.Data.DataTable[] -&gt; unit" Usage="dataSet.Load (reader, loadOption, errorHandler, tables)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="loadOption" Type="System.Data.LoadOption" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="errorHandler" Type="System.Data.FillErrorEventHandler" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="tables" Type="System.Data.DataTable[]" Index="3" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="6e9b5-456">1 つ以上の結果セットを含む <see cref="T:System.Data.IDataReader" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-456">An <see cref="T:System.Data.IDataReader" /> that provides one or more result sets.</span></span></param>
        <param name="loadOption"><span data-ttu-id="6e9b5-457"><see cref="T:System.Data.LoadOption" /> 列挙体の値。<see cref="T:System.Data.DataTable" /> 内の <see cref="T:System.Data.DataSet" /> インスタンスに既に含まれている行を同じ主キーを持つ受信した行と結合する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-457">A value from the <see cref="T:System.Data.LoadOption" /> enumeration that indicates how rows already in the <see cref="T:System.Data.DataTable" /> instances within the <see cref="T:System.Data.DataSet" /> will be combined with incoming rows that share the same primary key.</span></span></param>
        <param name="errorHandler"><span data-ttu-id="6e9b5-458">データの読み込み中にエラーが発生した場合に呼び出される <see cref="T:System.Data.FillErrorEventHandler" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-458">A <see cref="T:System.Data.FillErrorEventHandler" /> delegate to call when an error occurs while loading data.</span></span></param>
        <param name="tables"><span data-ttu-id="6e9b5-459"><see cref="T:System.Data.DataTable" /> メソッドが名前と名前空間の情報を取得する、<see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])" /> インスタンスの配列。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-459">An array of <see cref="T:System.Data.DataTable" /> instances, from which the <see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])" /> method retrieves name and namespace information.</span></span></param>
        <summary><span data-ttu-id="6e9b5-460">指定した <see cref="T:System.Data.DataSet" /> を使用するデータ ソースの値を <see cref="T:System.Data.IDataReader" /> に格納し、<see cref="T:System.Data.DataTable" /> インスタンスの配列を使用してスキーマ情報と名前空間情報を指定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-460">Fills a <see cref="T:System.Data.DataSet" /> with values from a data source using the supplied <see cref="T:System.Data.IDataReader" />, using an array of <see cref="T:System.Data.DataTable" /> instances to supply the schema and namespace information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-461"><xref:System.Data.DataTable.Load%2A> メソッドは、1つの <xref:System.Data.DataTable> にデータを格納し、<xref:System.Data.IDataReader> インスタンスから取得する方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-461">The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance.</span></span> <span data-ttu-id="6e9b5-462">このメソッドは同じ機能を提供しますが、<xref:System.Data.IDataReader> から複数の結果セットを <xref:System.Data.DataSet>内の複数のテーブルに読み込むことができます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-462">This method provides the same functionality, but allows you to load multiple result sets from an <xref:System.Data.IDataReader> into multiple tables within a <xref:System.Data.DataSet>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-463">受信 `reader` 内のいずれかのソースデータ列が計算列である場合、読み込み操作は <xref:System.InvalidOperationException> で失敗します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-463">The load operation will fail with an <xref:System.InvalidOperationException> if any of the source data columns in the incoming `reader` are computed columns.</span></span>  
  
 <span data-ttu-id="6e9b5-464">`loadOption` パラメーターを使用すると、インポートしたデータが既存のデータとどのように対話するかを指定できます。また、<xref:System.Data.LoadOption> 列挙型の値を使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-464">The `loadOption` parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <xref:System.Data.LoadOption> enumeration.</span></span> <span data-ttu-id="6e9b5-465">このパラメーターの使用方法の詳細については、<xref:System.Data.DataTable><xref:System.Data.DataTable.Load%2A> メソッドのドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-465">See the documentation for the <xref:System.Data.DataTable><xref:System.Data.DataTable.Load%2A> method for more information on using this parameter.</span></span>  
  
 <span data-ttu-id="6e9b5-466">`errorHandler` パラメーターは、データの読み込み中にエラーが発生したときに呼び出されるプロシージャを参照する <xref:System.Data.FillErrorEventHandler> デリゲートです。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-466">The `errorHandler` parameter is a <xref:System.Data.FillErrorEventHandler> delegate that refers to a procedure that is called when an error occurs while loading data.</span></span> <span data-ttu-id="6e9b5-467">プロシージャに渡される <xref:System.Data.FillErrorEventArgs> パラメーターには、発生したエラー、データの現在の行、および格納されている <xref:System.Data.DataTable> に関する情報を取得するためのプロパティが用意されています。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-467">The <xref:System.Data.FillErrorEventArgs> parameter passed to the procedure provides properties that allow you to retrieve information about the error that occurred, the current row of data, and the <xref:System.Data.DataTable> being filled.</span></span> <span data-ttu-id="6e9b5-468">より単純な try/catch ブロックではなく、このデリゲートメカニズムを使用すると、エラーを特定し、状況を処理し、必要に応じて処理を続行できます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-468">Using this delegate mechanism, rather than a simpler try/catch block, allows you to determine the error, handle the situation, and continue processing if you like.</span></span> <span data-ttu-id="6e9b5-469"><xref:System.Data.FillErrorEventArgs> パラメーターは <xref:System.Data.FillErrorEventArgs.Continue%2A> プロパティを提供します。このプロパティを `true` に設定して、エラーを処理して処理を続行することを示します。プロパティを `false` に設定して、処理を停止することを指定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-469">The <xref:System.Data.FillErrorEventArgs> parameter supplies a <xref:System.Data.FillErrorEventArgs.Continue%2A> property: set this property to `true` to indicate that you have handled the error and wish to continue processing; set the property to `false` to indicate that you wish to halt processing.</span></span> <span data-ttu-id="6e9b5-470">プロパティを `false` に設定すると、問題を発生させたコードが例外をスローすることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-470">Be aware that setting the property to `false` causes the code that triggered the problem to throw an exception.</span></span>  
  
 <span data-ttu-id="6e9b5-471">`tables` パラメーターを使用すると、リーダーから読み込まれた各結果セットに対応するテーブルの順序を示す <xref:System.Data.DataTable> インスタンスの配列を指定できます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-471">The `tables` parameter allows you to specify an array of <xref:System.Data.DataTable> instances, indicating the order of the tables corresponding to each result set loaded from the reader.</span></span> <span data-ttu-id="6e9b5-472"><xref:System.Data.DataSet.Load%2A> メソッドは、指定された各 <xref:System.Data.DataTable> インスタンスに、ソースデータリーダーからの1つの結果セットのデータを格納します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-472">The <xref:System.Data.DataSet.Load%2A> method fills each supplied <xref:System.Data.DataTable> instance with data from a single result set from the source data reader.</span></span> <span data-ttu-id="6e9b5-473">各結果セットの後、<xref:System.Data.DataSet.Load%2A> メソッドは、結果セットがなくなるまで、リーダー内の次の結果セットに移動します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-473">After each result set, the <xref:System.Data.DataSet.Load%2A> method moves on to the next result set within the reader, until there are no more result sets.</span></span>  
  
 <span data-ttu-id="6e9b5-474">このメソッドの名前解決スキームは、<xref:System.Data.Common.DbDataAdapter> クラスの <xref:System.Data.Common.DbDataAdapter.Fill%2A> メソッドの後に続くものと同じです。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-474">The name resolution scheme for this method is the same as that followed by the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method of the <xref:System.Data.Common.DbDataAdapter> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-475">次の例では、<xref:System.Data.DataSet>にテーブルを追加し、<xref:System.Data.DataSet.Load%2A> メソッドを使用して、互換性のないスキーマを含む <xref:System.Data.DataTableReader> からデータを読み込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-475">The following example adds a table to a <xref:System.Data.DataSet>, and then attempts to use the <xref:System.Data.DataSet.Load%2A> method to load data from a <xref:System.Data.DataTableReader> that contains an incompatible schema.</span></span> <span data-ttu-id="6e9b5-476">この例では、エラーをトラップするのではなく、<xref:System.Data.FillErrorEventHandler> デリゲートを使用してエラーを調査して処理します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-476">Rather than trapping the error, this example uses a <xref:System.Data.FillErrorEventHandler> delegate to investigate and handle the error.</span></span> <span data-ttu-id="6e9b5-477">出力がコンソールウィンドウに表示されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-477">The output is displayed in the console window.</span></span>  
  
 [!code-csharp[DataWorks DataSet.Load#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.Load/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.Load#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.Load/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-478">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-478">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Locale">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Locale { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Locale" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Locale" />
      <MemberSignature Language="VB.NET" Value="Public Property Locale As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Locale { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Locale : System.Globalization.CultureInfo with get, set" Usage="System.Data.DataSet.Locale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetLocaleDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6e9b5-479">テーブル内の文字列の比較に使用するロケール情報を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-479">Gets or sets the locale information used to compare strings within the table.</span></span></summary>
        <value><span data-ttu-id="6e9b5-480">ユーザーのコンピューターのロケールについてのデータが格納されている <see cref="T:System.Globalization.CultureInfo" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-480">A <see cref="T:System.Globalization.CultureInfo" /> that contains data about the user's machine locale.</span></span> <span data-ttu-id="6e9b5-481">既定では、 <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-481">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-482"><xref:System.Data.DataSet.Locale%2A> プロパティは、並べ替えを適用するロケールを指定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-482">The <xref:System.Data.DataSet.Locale%2A> property specifies the locale for which sorting applies.</span></span>  
  
 <span data-ttu-id="6e9b5-483">既定では、<xref:System.Data.DataSet> の <xref:System.Data.DataSet.Locale%2A> を設定すると、その `DataSet` 内の <xref:System.Data.DataTable> オブジェクトごとに <xref:System.Data.DataSet.Locale%2A> も同じ値に設定されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-483">By default, setting the <xref:System.Data.DataSet.Locale%2A> for a <xref:System.Data.DataSet> also sets the <xref:System.Data.DataSet.Locale%2A> for each <xref:System.Data.DataTable> object in that `DataSet` to the same value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-484">式を含む列では、<xref:System.StringComparison.InvariantCulture> が使用されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-484">In columns that contain expressions, the <xref:System.StringComparison.InvariantCulture> is used.</span></span> <span data-ttu-id="6e9b5-485"><xref:System.StringComparison.CurrentCulture> は無視されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-485">The <xref:System.StringComparison.CurrentCulture> is ignored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-486">次の例では、<xref:System.Data.DataSet> の <xref:System.Globalization.CultureInfo> を取得し、<xref:System.Globalization.CultureInfo.DisplayName%2A> と <xref:System.Globalization.CultureInfo.EnglishName%2A> のプロパティを出力します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-486">The following example gets the <xref:System.Globalization.CultureInfo> for a <xref:System.Data.DataSet> and prints the <xref:System.Globalization.CultureInfo.DisplayName%2A> and <xref:System.Globalization.CultureInfo.EnglishName%2A> properties.</span></span>  
  
 [!code-vb[Classic WebData DataSet.Locale Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Locale Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-487">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-487">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Merge">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6e9b5-488">指定した <see cref="T:System.Data.DataSet" /> か <see cref="T:System.Data.DataTable" />、または <see cref="T:System.Data.DataRow" /> オブジェクトの配列を現在の <see langword="DataSet" /> または <see langword="DataTable" /> にマージします。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-488">Merges a specified <see cref="T:System.Data.DataSet" />, <see cref="T:System.Data.DataTable" />, or array of <see cref="T:System.Data.DataRow" /> objects into the current <see langword="DataSet" /> or <see langword="DataTable" />.</span></span></summary>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-489">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-489">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Merge (rows As DataRow())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataRow[] -&gt; unit" Usage="dataSet.Merge rows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="rows"><span data-ttu-id="6e9b5-490"><see langword="DataRow" /> にマージされる <see langword="DataSet" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-490">The array of <see langword="DataRow" /> objects to be merged into the <see langword="DataSet" />.</span></span></param>
        <summary><span data-ttu-id="6e9b5-491"><see cref="T:System.Data.DataRow" /> オブジェクトの配列を現在の <see cref="T:System.Data.DataSet" /> にマージします。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-491">Merges an array of <see cref="T:System.Data.DataRow" /> objects into the current <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-492"><xref:System.Data.DataSet.Merge%2A> メソッドは、ほぼ類似したスキーマを持つ2つの <xref:System.Data.DataSet> オブジェクトをマージするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-492">The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas.</span></span> <span data-ttu-id="6e9b5-493">通常、マージはクライアントアプリケーションで使用され、データソースからの最新の変更内容を既存の <xref:System.Data.DataSet>に組み込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-493">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="6e9b5-494">これにより、クライアントアプリケーションは、データソースの最新のデータを使用して <xref:System.Data.DataSet> を更新できます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-494">This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="6e9b5-495"><xref:System.Data.DataSet.Merge%2A> メソッドは、変更の検証、エラーの調整、変更によるデータソースの更新、最後に既存の <xref:System.Data.DataSet>の更新を伴う一連の手順の最後に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-495">The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="6e9b5-496">クライアントアプリケーションでは、1つのボタンをクリックするだけで、変更されたデータを収集し、中間層コンポーネントに送信する前にそのデータを検証することができます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-496">In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</span></span> <span data-ttu-id="6e9b5-497">このシナリオでは、<xref:System.Data.DataSet.GetChanges%2A> メソッドが最初に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-497">In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked.</span></span> <span data-ttu-id="6e9b5-498">このメソッドは、検証とマージのために最適化された2番目の <xref:System.Data.DataSet> を返します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-498">That method returns a second <xref:System.Data.DataSet> optimized for validating and merging.</span></span> <span data-ttu-id="6e9b5-499">この2番目の <xref:System.Data.DataSet> オブジェクトには、変更された <xref:System.Data.DataTable> および <xref:System.Data.DataRow> オブジェクトのみが含まれ、その結果、元の <xref:System.Data.DataSet>のサブセットになります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-499">This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="6e9b5-500">通常、このサブセットは小さいため、中間層コンポーネントにより効率的に戻されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-500">This subset is generally smaller and thus more efficiently passed back to a middle-tier component.</span></span> <span data-ttu-id="6e9b5-501">次に、中間層コンポーネントによって、元のデータソースが変更され、ストアドプロシージャによって更新されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-501">The middle-tier component then updates the original data source with the changes through stored procedures.</span></span> <span data-ttu-id="6e9b5-502">その後、中間層では、元のデータを含む新しい <xref:System.Data.DataSet> とデータソースの最新のデータ (元のクエリを再度実行) のいずれかを返すことができます。または、データソースから変更を加えたサブセットを送信することもできます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-502">The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</span></span> <span data-ttu-id="6e9b5-503">(たとえば、データソースによって一意の主キー値が自動的に作成された場合、これらの値をクライアントアプリケーションに反映させることができます)。どちらの場合も、返された <xref:System.Data.DataSet> は、<xref:System.Data.DataSet.Merge%2A> メソッドを使用して、クライアントアプリケーションの元の <xref:System.Data.DataSet> に再びマージできます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-503">(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.</span></span>  
  
 <span data-ttu-id="6e9b5-504"><xref:System.Data.DataSet.Merge%2A> メソッドを呼び出すと、スキーマが変更されている可能性があるため、2つの <xref:System.Data.DataSet> オブジェクトのスキーマが比較されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-504">When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed.</span></span> <span data-ttu-id="6e9b5-505">たとえば、企業間のシナリオでは、自動化されたプロセスによって新しい列が XML スキーマに追加されている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-505">For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</span></span> <span data-ttu-id="6e9b5-506">ソース <xref:System.Data.DataSet> に、ターゲットに存在しないスキーマ要素 (追加された <xref:System.Data.DataColumn> オブジェクト) が含まれている場合は、`missingSchemaAction` 引数を `MissingSchemaAction.Add`に設定することによって、スキーマ要素をターゲットに追加できます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-506">If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`.</span></span> <span data-ttu-id="6e9b5-507">この場合、結合された <xref:System.Data.DataSet> には追加されたスキーマとデータが含まれます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-507">In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.</span></span>  
  
 <span data-ttu-id="6e9b5-508">スキーマをマージすると、データはマージされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-508">After merging schemas, the data is merged.</span></span>  
  
 <span data-ttu-id="6e9b5-509">新しいソース <xref:System.Data.DataSet> をターゲットにマージする場合、<xref:System.Data.DataRowState> 値が `Unchanged`、`Modified`、または `Deleted` のソース行が、同じ主キー値を持つターゲット行と照合されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-509">When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values.</span></span> <span data-ttu-id="6e9b5-510"><xref:System.Data.DataRowState> 値が `Added` のソース行は、新しいソース行と同じ主キー値を持つ新しいターゲット行と照合されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-510">Source rows with a <xref:System.Data.DataRowState> value of `Added` are matched to new target rows with the same primary key values as the new source rows.</span></span>  
  
 <span data-ttu-id="6e9b5-511">マージ中、制約は無効になります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-511">During a merge, constraints are disabled.</span></span> <span data-ttu-id="6e9b5-512">マージの最後に有効にできない制約がある場合は、<xref:System.Data.ConstraintException> が生成され、制約が無効になっている間はマージされたデータが保持されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-512">If any constraints cannot be enabled at the end of a merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled.</span></span> <span data-ttu-id="6e9b5-513">この場合、<xref:System.Data.DataSet.EnforceConstraints%2A> プロパティは `false`に設定され、無効なすべての行はエラーとしてマークされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-513">In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error.</span></span> <span data-ttu-id="6e9b5-514">このエラーは、<xref:System.Data.DataSet.EnforceConstraints%2A> プロパティを `true`にリセットする前に解決しておく必要があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-514">The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-515">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-515">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Merge (dataSet As DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataSet -&gt; unit" Usage="dataSet.Merge dataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet"><span data-ttu-id="6e9b5-516">データとスキーマをマージする対象の <see langword="DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-516">The <see langword="DataSet" /> whose data and schema will be merged.</span></span></param>
        <summary><span data-ttu-id="6e9b5-517">指定した <see cref="T:System.Data.DataSet" /> およびそのスキーマを現在の <see langword="DataSet" /> にマージします。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-517">Merges a specified <see cref="T:System.Data.DataSet" /> and its schema into the current <see langword="DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-518"><xref:System.Data.DataSet.Merge%2A> メソッドは、ほぼ類似したスキーマを持つ2つの <xref:System.Data.DataSet> オブジェクトをマージするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-518">The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas.</span></span> <span data-ttu-id="6e9b5-519">通常、マージはクライアントアプリケーションで使用され、データソースからの最新の変更内容を既存の <xref:System.Data.DataSet>に組み込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-519">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="6e9b5-520">これにより、クライアントアプリケーションは、データソースの最新のデータを使用して <xref:System.Data.DataSet> を更新できます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-520">This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="6e9b5-521"><xref:System.Data.DataSet.Merge%2A> メソッドは、変更の検証、エラーの調整、変更によるデータソースの更新、最後に既存の <xref:System.Data.DataSet>の更新を伴う一連の手順の最後に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-521">The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="6e9b5-522">クライアントアプリケーションでは、1つのボタンをクリックするだけで、変更されたデータを収集し、中間層コンポーネントに送信する前にそのデータを検証することができます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-522">In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</span></span> <span data-ttu-id="6e9b5-523">このシナリオでは、<xref:System.Data.DataSet.GetChanges%2A> メソッドが最初に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-523">In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked.</span></span> <span data-ttu-id="6e9b5-524">このメソッドは、検証とマージのために最適化された2番目の <xref:System.Data.DataSet> を返します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-524">That method returns a second <xref:System.Data.DataSet> optimized for validating and merging.</span></span> <span data-ttu-id="6e9b5-525">この2番目の <xref:System.Data.DataSet> オブジェクトには、変更された <xref:System.Data.DataTable> および <xref:System.Data.DataRow> オブジェクトのみが含まれ、その結果、元の <xref:System.Data.DataSet>のサブセットになります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-525">This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="6e9b5-526">通常、このサブセットは小さいため、中間層コンポーネントにより効率的に戻されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-526">This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.</span></span> <span data-ttu-id="6e9b5-527">次に、中間層コンポーネントによって、元のデータソースが変更され、ストアドプロシージャによって更新されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-527">The middle-tier component then updates the original data source with the changes through stored procedures.</span></span> <span data-ttu-id="6e9b5-528">その後、中間層では、元のデータを含む新しい <xref:System.Data.DataSet> とデータソースの最新のデータ (元のクエリを再度実行) のいずれかを返すことができます。または、データソースから変更を加えたサブセットを送信することもできます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-528">The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</span></span> <span data-ttu-id="6e9b5-529">(たとえば、データソースによって一意の主キー値が自動的に作成された場合、これらの値をクライアントアプリケーションに反映させることができます)。どちらの場合も、返された <xref:System.Data.DataSet> は、<xref:System.Data.DataSet.Merge%2A> メソッドを使用して、クライアントアプリケーションの元の <xref:System.Data.DataSet> に再びマージできます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-529">(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.</span></span>  
  
 <span data-ttu-id="6e9b5-530"><xref:System.Data.DataSet.Merge%2A> メソッドを呼び出すと、スキーマが変更されている可能性があるため、2つの <xref:System.Data.DataSet> オブジェクトのスキーマが比較されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-530">When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed.</span></span> <span data-ttu-id="6e9b5-531">たとえば、企業間のシナリオでは、自動化されたプロセスによって新しい列が XML スキーマに追加されている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-531">For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</span></span> <span data-ttu-id="6e9b5-532">ソース <xref:System.Data.DataSet> に、ターゲットに存在しないスキーマ要素 (追加された <xref:System.Data.DataColumn> オブジェクト) が含まれている場合は、`missingSchemaAction` 引数を `MissingSchemaAction.Add`に設定することによって、スキーマ要素をターゲットに追加できます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-532">If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`.</span></span> <span data-ttu-id="6e9b5-533">この場合、結合された <xref:System.Data.DataSet> には追加されたスキーマとデータが含まれます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-533">In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.</span></span>  
  
 <span data-ttu-id="6e9b5-534">スキーマをマージすると、データはマージされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-534">After merging schemas, the data is merged.</span></span>  
  
 <span data-ttu-id="6e9b5-535">新しいソース <xref:System.Data.DataSet> をターゲットにマージする場合、<xref:System.Data.DataRowState> 値が `Unchanged`、`Modified`、または `Deleted` のソース行が、同じ主キー値を持つターゲット行と照合されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-535">When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values.</span></span> <span data-ttu-id="6e9b5-536">`DataRowState` 値が `Added` のソース行は、新しいソース行と同じ主キー値を持つ新しいターゲット行と照合されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-536">Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.</span></span>  
  
 <span data-ttu-id="6e9b5-537">マージ中、制約は無効になります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-537">During a merge, constraints are disabled.</span></span> <span data-ttu-id="6e9b5-538">マージの最後に有効にできない制約がある場合は、<xref:System.Data.ConstraintException> が生成され、制約が無効になっている間はマージされたデータが保持されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-538">If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled.</span></span> <span data-ttu-id="6e9b5-539">この場合、<xref:System.Data.DataSet.EnforceConstraints%2A> プロパティは `false`に設定され、無効なすべての行はエラーとしてマークされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-539">In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error.</span></span> <span data-ttu-id="6e9b5-540">このエラーは、<xref:System.Data.DataSet.EnforceConstraints%2A> プロパティを `true`にリセットする前に解決しておく必要があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-540">The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-541">次の例では、<xref:System.Data.DataSet>に対して <xref:System.Data.DataSet.GetChanges%2A>、Update、および <xref:System.Data.DataSet.Merge%2A> の各メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-541">The following example uses the <xref:System.Data.DataSet.GetChanges%2A>, Update, and <xref:System.Data.DataSet.Merge%2A> methods on a <xref:System.Data.DataSet>.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Merge Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Merge Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.ConstraintException"><span data-ttu-id="6e9b5-542">1 つ以上の制約を有効にできません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-542">One or more constraints cannot be enabled.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6e9b5-543"><paramref name="dataSet" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-543">The <paramref name="dataSet" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Data.ForeignKeyConstraint" />
        <altmember cref="M:System.Data.DataSet.GetChanges" />
        <altmember cref="T:System.Data.UniqueConstraint" />
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-544">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-544">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Merge (table As DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataTable -&gt; unit" Usage="dataSet.Merge table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="table"><span data-ttu-id="6e9b5-545">データとスキーマをマージする対象の <see cref="T:System.Data.DataTable" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-545">The <see cref="T:System.Data.DataTable" /> whose data and schema will be merged.</span></span></param>
        <summary><span data-ttu-id="6e9b5-546">指定した <see cref="T:System.Data.DataTable" /> およびそのスキーマを現在の <see cref="T:System.Data.DataSet" /> にマージします。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-546">Merges a specified <see cref="T:System.Data.DataTable" /> and its schema into the current <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-547"><xref:System.Data.DataSet.Merge%2A> メソッドは、ほぼ類似したスキーマを持つ2つの <xref:System.Data.DataSet> オブジェクトをマージするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-547">The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas.</span></span> <span data-ttu-id="6e9b5-548">通常、マージはクライアントアプリケーションで使用され、データソースからの最新の変更内容を既存の <xref:System.Data.DataSet>に組み込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-548">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="6e9b5-549">これにより、クライアントアプリケーションは、データソースの最新のデータを使用して <xref:System.Data.DataSet> を更新できます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-549">This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="6e9b5-550"><xref:System.Data.DataSet.Merge%2A> メソッドは、変更の検証、エラーの調整、変更によるデータソースの更新、最後に既存の <xref:System.Data.DataSet>の更新を伴う一連の手順の最後に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-550">The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="6e9b5-551">クライアントアプリケーションでは、1つのボタンをクリックするだけで、変更されたデータを収集し、中間層コンポーネントに送信する前にそのデータを検証することができます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-551">In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</span></span> <span data-ttu-id="6e9b5-552">このシナリオでは、<xref:System.Data.DataSet.GetChanges%2A> メソッドが最初に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-552">In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked.</span></span> <span data-ttu-id="6e9b5-553">このメソッドは、検証とマージのために最適化された2番目の <xref:System.Data.DataSet> を返します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-553">That method returns a second <xref:System.Data.DataSet> optimized for validating and merging.</span></span> <span data-ttu-id="6e9b5-554">この2番目の <xref:System.Data.DataSet> オブジェクトには、変更された <xref:System.Data.DataTable> および <xref:System.Data.DataRow> オブジェクトのみが含まれ、その結果、元の <xref:System.Data.DataSet>のサブセットになります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-554">This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="6e9b5-555">通常、このサブセットは小さいため、中間層コンポーネントにより効率的に戻されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-555">This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.</span></span> <span data-ttu-id="6e9b5-556">次に、中間層コンポーネントによって、元のデータソースが変更され、ストアドプロシージャによって更新されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-556">The middle-tier component then updates the original data source with the changes through stored procedures.</span></span> <span data-ttu-id="6e9b5-557">その後、中間層では、元のデータを含む新しい <xref:System.Data.DataSet> とデータソースの最新のデータ (元のクエリを再度実行) のいずれかを返すことができます。または、データソースから変更を加えたサブセットを送信することもできます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-557">The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</span></span> <span data-ttu-id="6e9b5-558">(たとえば、データソースによって一意の主キー値が自動的に作成された場合、これらの値をクライアントアプリケーションに反映させることができます)。どちらの場合も、返された <xref:System.Data.DataSet> は、<xref:System.Data.DataSet.Merge%2A> メソッドを使用して、クライアントアプリケーションの元の <xref:System.Data.DataSet> に再びマージできます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-558">(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.</span></span>  
  
 <span data-ttu-id="6e9b5-559"><xref:System.Data.DataSet.Merge%2A> メソッドを呼び出すと、スキーマが変更されている可能性があるため、2つの <xref:System.Data.DataSet> オブジェクトのスキーマが比較されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-559">When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed.</span></span> <span data-ttu-id="6e9b5-560">たとえば、企業間のシナリオでは、自動化されたプロセスによって新しい列が XML スキーマに追加されている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-560">For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</span></span> <span data-ttu-id="6e9b5-561">ソース <xref:System.Data.DataSet> に、ターゲットに存在しないスキーマ要素 (追加された <xref:System.Data.DataColumn> オブジェクト) が含まれている場合は、`missingSchemaAction` 引数を `MissingSchemaAction.Add`に設定することによって、スキーマ要素をターゲットに追加できます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-561">If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`.</span></span> <span data-ttu-id="6e9b5-562">この場合、結合された <xref:System.Data.DataSet> には追加されたスキーマとデータが含まれます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-562">In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.</span></span>  
  
 <span data-ttu-id="6e9b5-563">スキーマをマージすると、データはマージされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-563">After merging schemas, the data is merged.</span></span>  
  
 <span data-ttu-id="6e9b5-564">新しいソース <xref:System.Data.DataSet> をターゲットにマージする場合、<xref:System.Data.DataRowState> 値が `Unchanged`、`Modified`、または `Deleted` のソース行が、同じ主キー値を持つターゲット行と照合されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-564">When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values.</span></span> <span data-ttu-id="6e9b5-565">`DataRowState` 値が `Added` のソース行は、新しいソース行と同じ主キー値を持つ新しいターゲット行と照合されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-565">Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.</span></span>  
  
 <span data-ttu-id="6e9b5-566">マージ中、制約は無効になります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-566">During a merge, constraints are disabled.</span></span> <span data-ttu-id="6e9b5-567">マージの最後に有効にできない制約がある場合は、<xref:System.Data.ConstraintException> が生成され、制約が無効になっている間はマージされたデータが保持されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-567">If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled.</span></span> <span data-ttu-id="6e9b5-568">この場合、<xref:System.Data.DataSet.EnforceConstraints%2A> プロパティは `false`に設定され、無効なすべての行はエラーとしてマークされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-568">In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error.</span></span> <span data-ttu-id="6e9b5-569">このエラーは、<xref:System.Data.DataSet.EnforceConstraints%2A> プロパティを `true`にリセットする前に解決しておく必要があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-569">The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-570">次の例では、1つのテーブル、2つの列、および10行を含む単純な <xref:System.Data.DataSet> を作成します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-570">The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows.</span></span> <span data-ttu-id="6e9b5-571">2番目の <xref:System.Data.DataTable> が作成されます。これは最初のと同じです。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-571">A second <xref:System.Data.DataTable> is created that is identical to the first.</span></span> <span data-ttu-id="6e9b5-572">2つの行が2番目のテーブルに追加され、<xref:System.Data.DataSet>にマージされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-572">Two rows are added to the second table, which is then merged into the <xref:System.Data.DataSet>.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Merge3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Merge3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6e9b5-573"><paramref name="table" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-573">The <paramref name="table" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-574">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-574">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataSet dataSet, bool preserveChanges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataSet dataSet, bool preserveChanges) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Merge (dataSet As DataSet, preserveChanges As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataSet ^ dataSet, bool preserveChanges);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataSet * bool -&gt; unit" Usage="dataSet.Merge (dataSet, preserveChanges)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="preserveChanges" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dataSet"><span data-ttu-id="6e9b5-575">データとスキーマをマージする対象の <see langword="DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-575">The <see langword="DataSet" /> whose data and schema will be merged.</span></span></param>
        <param name="preserveChanges"><span data-ttu-id="6e9b5-576">現在の <see langword="DataSet" /> に対して行われた変更を保持するには <see langword="true" />。保持しない場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-576"><see langword="true" /> to preserve changes in the current <see langword="DataSet" />; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="6e9b5-577">指定した <see cref="T:System.Data.DataSet" /> およびそのスキーマを現在の <see langword="DataSet" /> にマージします。この <see langword="DataSet" /> に対して行われた変更は、指定した引数に従って保持または破棄します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-577">Merges a specified <see cref="T:System.Data.DataSet" /> and its schema into the current <see langword="DataSet" />, preserving or discarding any changes in this <see langword="DataSet" /> according to the given argument.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-578"><xref:System.Data.DataSet.Merge%2A> メソッドは、ほぼ類似したスキーマを持つ2つの <xref:System.Data.DataSet> オブジェクトをマージするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-578">The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas.</span></span> <span data-ttu-id="6e9b5-579">通常、マージはクライアントアプリケーションで使用され、データソースからの最新の変更内容を既存の <xref:System.Data.DataSet>に組み込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-579">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="6e9b5-580">これにより、クライアントアプリケーションは、データソースの最新のデータを使用して <xref:System.Data.DataSet> を更新できます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-580">This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="6e9b5-581"><xref:System.Data.DataSet.Merge%2A> メソッドは、変更の検証、エラーの調整、変更によるデータソースの更新、最後に既存の <xref:System.Data.DataSet>の更新を伴う一連の手順の最後に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-581">The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="6e9b5-582">クライアントアプリケーションでは、1つのボタンをクリックするだけで、変更されたデータを収集し、中間層コンポーネントに送信する前にそのデータを検証することができます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-582">In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</span></span> <span data-ttu-id="6e9b5-583">このシナリオでは、<xref:System.Data.DataSet.GetChanges%2A> メソッドが最初に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-583">In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked.</span></span> <span data-ttu-id="6e9b5-584">このメソッドは、検証とマージのために最適化された2番目の <xref:System.Data.DataSet> を返します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-584">That method returns a second <xref:System.Data.DataSet> optimized for validating and merging.</span></span> <span data-ttu-id="6e9b5-585">この2番目の <xref:System.Data.DataSet> オブジェクトには、変更された <xref:System.Data.DataTable> および <xref:System.Data.DataRow> オブジェクトのみが含まれ、その結果、元の <xref:System.Data.DataSet>のサブセットになります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-585">This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="6e9b5-586">通常、このサブセットは小さいため、中間層コンポーネントにより効率的に戻されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-586">This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.</span></span> <span data-ttu-id="6e9b5-587">次に、中間層コンポーネントによって、元のデータソースが変更され、ストアドプロシージャによって更新されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-587">The middle-tier component then updates the original data source with the changes through stored procedures.</span></span> <span data-ttu-id="6e9b5-588">その後、中間層では、元のデータを含む新しい <xref:System.Data.DataSet> とデータソースの最新のデータ (元のクエリを再度実行) のいずれかを返すことができます。または、データソースから変更を加えたサブセットを送信することもできます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-588">The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</span></span> <span data-ttu-id="6e9b5-589">(たとえば、データソースによって一意の主キー値が自動的に作成された場合、これらの値をクライアントアプリケーションに反映させることができます)。どちらの場合も、返された <xref:System.Data.DataSet> は、<xref:System.Data.DataSet.Merge%2A> メソッドを使用して、クライアントアプリケーションの元の <xref:System.Data.DataSet> に再びマージできます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-589">(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.</span></span>  
  
 <span data-ttu-id="6e9b5-590"><xref:System.Data.DataSet.Merge%2A> メソッドを呼び出すと、スキーマが変更されている可能性があるため、2つの <xref:System.Data.DataSet> オブジェクトのスキーマが比較されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-590">When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed.</span></span> <span data-ttu-id="6e9b5-591">たとえば、企業間のシナリオでは、自動化されたプロセスによって新しい列が XML スキーマに追加されている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-591">For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</span></span> <span data-ttu-id="6e9b5-592">ソース <xref:System.Data.DataSet> に、ターゲットに存在しないスキーマ要素 (追加された <xref:System.Data.DataColumn> オブジェクト) が含まれている場合は、`missingSchemaAction` 引数を `MissingSchemaAction.Add`に設定することによって、スキーマ要素をターゲットに追加できます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-592">If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`.</span></span> <span data-ttu-id="6e9b5-593">この場合、結合された <xref:System.Data.DataSet> には追加されたスキーマとデータが含まれます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-593">In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.</span></span>  
  
 <span data-ttu-id="6e9b5-594">スキーマをマージすると、データはマージされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-594">After merging schemas, the data is merged.</span></span>  
  
 <span data-ttu-id="6e9b5-595">新しいソース <xref:System.Data.DataSet> をターゲットにマージする場合、<xref:System.Data.DataRowState> 値が `Unchanged`、`Modified`、または `Deleted` のソース行が、同じ主キー値を持つターゲット行と照合されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-595">When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values.</span></span> <span data-ttu-id="6e9b5-596">`DataRowState` 値が `Added` のソース行は、新しいソース行と同じ主キー値を持つ新しいターゲット行と照合されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-596">Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.</span></span>  
  
 <span data-ttu-id="6e9b5-597">マージ中、制約は無効になります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-597">During a merge, constraints are disabled.</span></span> <span data-ttu-id="6e9b5-598">マージの最後に有効にできない制約がある場合は、<xref:System.Data.ConstraintException> が生成され、制約が無効になっている間はマージされたデータが保持されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-598">If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled.</span></span> <span data-ttu-id="6e9b5-599">この場合、<xref:System.Data.DataSet.EnforceConstraints%2A> プロパティは `false`に設定され、無効なすべての行はエラーとしてマークされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-599">In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error.</span></span> <span data-ttu-id="6e9b5-600">このエラーは、<xref:System.Data.DataSet.EnforceConstraints%2A> プロパティを `true`にリセットする前に解決しておく必要があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-600">The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-601">次の例では、1つのテーブル、2つの列、および10行を含む単純な <xref:System.Data.DataSet> を作成します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-601">The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows.</span></span> <span data-ttu-id="6e9b5-602">10行を追加すると、2つの値が変更され、1つの行が追加されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-602">After adding ten rows, two values are changed, and one row is added.</span></span> <span data-ttu-id="6e9b5-603">変更されたデータのサブセットは、<xref:System.Data.DataSet.GetChanges%2A> メソッドを使用して作成されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-603">A subset of the changed data is created using the <xref:System.Data.DataSet.GetChanges%2A> method.</span></span> <span data-ttu-id="6e9b5-604">エラーを調整した後で、サブセットのデータが元の <xref:System.Data.DataSet>にマージされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-604">After reconciling errors, the subset data is merged into the original <xref:System.Data.DataSet>.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.GetChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.ForeignKeyConstraint" />
        <altmember cref="T:System.Data.UniqueConstraint" />
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-605">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-605">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataRow[] rows, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataRow[] rows, bool preserveChanges, valuetype System.Data.MissingSchemaAction missingSchemaAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Merge (rows As DataRow(), preserveChanges As Boolean, missingSchemaAction As MissingSchemaAction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(cli::array &lt;System::Data::DataRow ^&gt; ^ rows, bool preserveChanges, System::Data::MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataRow[] * bool * System.Data.MissingSchemaAction -&gt; unit" Usage="dataSet.Merge (rows, preserveChanges, missingSchemaAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
        <Parameter Name="preserveChanges" Type="System.Boolean" />
        <Parameter Name="missingSchemaAction" Type="System.Data.MissingSchemaAction" />
      </Parameters>
      <Docs>
        <param name="rows"><span data-ttu-id="6e9b5-606"><see cref="T:System.Data.DataRow" /> にマージされる <see langword="DataSet" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-606">The array of <see cref="T:System.Data.DataRow" /> objects to be merged into the <see langword="DataSet" />.</span></span></param>
        <param name="preserveChanges"><span data-ttu-id="6e9b5-607"><see langword="true" /> に対して行われた変更を保持するには <see langword="DataSet" />。保持しない場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-607"><see langword="true" /> to preserve changes in the <see langword="DataSet" />; otherwise, <see langword="false" />.</span></span></param>
        <param name="missingSchemaAction"><span data-ttu-id="6e9b5-608"><see cref="T:System.Data.MissingSchemaAction" /> 値のいずれか 1 つです。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-608">One of the <see cref="T:System.Data.MissingSchemaAction" /> values.</span></span></param>
        <summary><span data-ttu-id="6e9b5-609"><see cref="T:System.Data.DataRow" /> オブジェクトの配列を現在の <see cref="T:System.Data.DataSet" /> にマージします。指定した引数に従って、この <see langword="DataSet" /> に行われた変更を保持または破棄し、互換性のないスキーマを処理します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-609">Merges an array of <see cref="T:System.Data.DataRow" /> objects into the current <see cref="T:System.Data.DataSet" />, preserving or discarding changes in the <see langword="DataSet" /> and handling an incompatible schema according to the given arguments.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-610"><xref:System.Data.DataSet.Merge%2A> メソッドは、ほぼ類似したスキーマを持つ2つの <xref:System.Data.DataSet> オブジェクトをマージするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-610">The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas.</span></span> <span data-ttu-id="6e9b5-611">通常、マージはクライアントアプリケーションで使用され、データソースからの最新の変更内容を既存の <xref:System.Data.DataSet>に組み込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-611">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="6e9b5-612">これにより、クライアントアプリケーションは、データソースの最新のデータを使用して <xref:System.Data.DataSet> を更新できます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-612">This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="6e9b5-613"><xref:System.Data.DataSet.Merge%2A> メソッドは、変更の検証、エラーの調整、変更によるデータソースの更新、最後に既存の <xref:System.Data.DataSet>の更新を伴う一連の手順の最後に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-613">The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="6e9b5-614">クライアントアプリケーションでは、1つのボタンをクリックするだけで、変更されたデータを収集し、中間層コンポーネントに送信する前にそのデータを検証することができます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-614">In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</span></span> <span data-ttu-id="6e9b5-615">このシナリオでは、<xref:System.Data.DataSet.GetChanges%2A> メソッドが最初に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-615">In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked.</span></span> <span data-ttu-id="6e9b5-616">このメソッドは、検証とマージのために最適化された2番目の <xref:System.Data.DataSet> を返します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-616">That method returns a second <xref:System.Data.DataSet> optimized for validating and merging.</span></span> <span data-ttu-id="6e9b5-617">この2番目の <xref:System.Data.DataSet> オブジェクトには、変更された <xref:System.Data.DataTable> および <xref:System.Data.DataRow> オブジェクトのみが含まれ、その結果、元の <xref:System.Data.DataSet>のサブセットになります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-617">This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="6e9b5-618">通常、このサブセットは小さいため、中間層コンポーネントにより効率的に戻されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-618">This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.</span></span> <span data-ttu-id="6e9b5-619">次に、中間層コンポーネントによって、元のデータソースが変更され、ストアドプロシージャによって更新されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-619">The middle-tier component then updates the original data source with the changes through stored procedures.</span></span> <span data-ttu-id="6e9b5-620">その後、中間層では、元のデータを含む新しい <xref:System.Data.DataSet> とデータソースの最新のデータ (元のクエリを再度実行) のいずれかを返すことができます。または、データソースから変更を加えたサブセットを送信することもできます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-620">The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</span></span> <span data-ttu-id="6e9b5-621">(たとえば、データソースによって一意の主キー値が自動的に作成された場合、これらの値をクライアントアプリケーションに反映させることができます)。どちらの場合も、返された <xref:System.Data.DataSet> は、<xref:System.Data.DataSet.Merge%2A> メソッドを使用して、クライアントアプリケーションの元の <xref:System.Data.DataSet> に再びマージできます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-621">(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.</span></span>  
  
 <span data-ttu-id="6e9b5-622"><xref:System.Data.DataSet.Merge%2A> メソッドの説明を容易にするために、"target" を使用して現在の <xref:System.Data.DataSet>を示し、"source" を使用して2番目の (パラメーター) <xref:System.Data.DataSet>に名前を指定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-622">To facilitate explanation of the <xref:System.Data.DataSet.Merge%2A> method, we use "target" to signify the current <xref:System.Data.DataSet>, and "source" to name the second (parameter) <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="6e9b5-623">ターゲット <xref:System.Data.DataSet> は、アクション (マージ) が発生するオブジェクトであるため、という名前になります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-623">The target <xref:System.Data.DataSet> is so named because it is the object upon which an action (the merge) occurs.</span></span> <span data-ttu-id="6e9b5-624">2番目の <xref:System.Data.DataSet> は、含まれている情報は変更されず、代わりに現在の <xref:System.Data.DataSet>にマージされるため、"ソース" と呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-624">The second <xref:System.Data.DataSet> is called a "source" because the information it contains does not change, but instead is merged into the current <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="6e9b5-625"><xref:System.Data.DataSet.Merge%2A> メソッドを呼び出すと、スキーマが変更されている可能性があるため、2つの <xref:System.Data.DataSet> オブジェクトのスキーマが比較されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-625">When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed.</span></span> <span data-ttu-id="6e9b5-626">たとえば、企業間のシナリオでは、自動化されたプロセスによって新しい列が XML スキーマに追加されている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-626">For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</span></span> <span data-ttu-id="6e9b5-627">ソース <xref:System.Data.DataSet> に、ターゲットに存在しないスキーマ要素 (追加された <xref:System.Data.DataColumn> オブジェクト) が含まれている場合は、`missingSchemaAction` 引数を `MissingSchemaAction.Add`に設定することによって、スキーマ要素をターゲットに追加できます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-627">If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`.</span></span> <span data-ttu-id="6e9b5-628">この場合、結合された <xref:System.Data.DataSet> には追加されたスキーマとデータが含まれます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-628">In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.</span></span>  
  
 <span data-ttu-id="6e9b5-629">スキーマをマージすると、データはマージされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-629">After merging schemas, the data is merged.</span></span>  
  
 <span data-ttu-id="6e9b5-630">新しいソース <xref:System.Data.DataSet> をターゲットにマージする場合、<xref:System.Data.DataRowState> 値が `Unchanged`、`Modified`、または `Deleted` のソース行が、同じ主キー値を持つターゲット行と照合されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-630">When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values.</span></span> <span data-ttu-id="6e9b5-631">`DataRowState` 値が `Added` のソース行は、新しいソース行と同じ主キー値を持つ新しいターゲット行と照合されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-631">Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.</span></span>  
  
 <span data-ttu-id="6e9b5-632">マージ中、制約は無効になります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-632">During a merge, constraints are disabled.</span></span> <span data-ttu-id="6e9b5-633">マージの最後に有効にできない制約がある場合は、<xref:System.Data.ConstraintException> が生成され、制約が無効になっている間はマージされたデータが保持されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-633">If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled.</span></span> <span data-ttu-id="6e9b5-634">この場合、<xref:System.Data.DataSet.EnforceConstraints%2A> プロパティは `false`に設定され、無効なすべての行はエラーとしてマークされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-634">In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error.</span></span> <span data-ttu-id="6e9b5-635">このエラーは、<xref:System.Data.DataSet.EnforceConstraints%2A> プロパティを `true`にリセットする前に解決しておく必要があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-635">The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-636">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-636">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataSet dataSet, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataSet dataSet, bool preserveChanges, valuetype System.Data.MissingSchemaAction missingSchemaAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Merge (dataSet As DataSet, preserveChanges As Boolean, missingSchemaAction As MissingSchemaAction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataSet ^ dataSet, bool preserveChanges, System::Data::MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataSet * bool * System.Data.MissingSchemaAction -&gt; unit" Usage="dataSet.Merge (dataSet, preserveChanges, missingSchemaAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="preserveChanges" Type="System.Boolean" />
        <Parameter Name="missingSchemaAction" Type="System.Data.MissingSchemaAction" />
      </Parameters>
      <Docs>
        <param name="dataSet"><span data-ttu-id="6e9b5-637">データとスキーマをマージする対象の <see langword="DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-637">The <see langword="DataSet" /> whose data and schema will be merged.</span></span></param>
        <param name="preserveChanges"><span data-ttu-id="6e9b5-638">現在の <see langword="DataSet" /> に対して行われた変更を保持するには <see langword="true" />。保持しない場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-638"><see langword="true" /> to preserve changes in the current <see langword="DataSet" />; otherwise, <see langword="false" />.</span></span></param>
        <param name="missingSchemaAction"><span data-ttu-id="6e9b5-639"><see cref="T:System.Data.MissingSchemaAction" /> 値のいずれか 1 つです。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-639">One of the <see cref="T:System.Data.MissingSchemaAction" /> values.</span></span></param>
        <summary><span data-ttu-id="6e9b5-640">指定した <see cref="T:System.Data.DataSet" /> およびそのスキーマを現在の <see langword="DataSet" /> にマージします。指定した引数に従って、この <see langword="DataSet" /> に行われた変更を保持または破棄し、互換性のないスキーマを処理します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-640">Merges a specified <see cref="T:System.Data.DataSet" /> and its schema with the current <see langword="DataSet" />, preserving or discarding changes in the current <see langword="DataSet" /> and handling an incompatible schema according to the given arguments.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-641"><xref:System.Data.DataSet.Merge%2A> メソッドは、ほぼ類似したスキーマを持つ2つの <xref:System.Data.DataSet> オブジェクトをマージするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-641">The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas.</span></span> <span data-ttu-id="6e9b5-642">通常、マージはクライアントアプリケーションで使用され、データソースからの最新の変更内容を既存の <xref:System.Data.DataSet>に組み込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-642">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="6e9b5-643">これにより、クライアントアプリケーションは、データソースの最新のデータを使用して <xref:System.Data.DataSet> を更新できます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-643">This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="6e9b5-644"><xref:System.Data.DataSet.Merge%2A> メソッドは、変更の検証、エラーの調整、変更によるデータソースの更新、最後に既存の <xref:System.Data.DataSet>の更新を伴う一連の手順の最後に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-644">The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="6e9b5-645">クライアントアプリケーションでは、1つのボタンをクリックするだけで、変更されたデータを収集し、中間層コンポーネントに送信する前にそのデータを検証することができます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-645">In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</span></span> <span data-ttu-id="6e9b5-646">このシナリオでは、<xref:System.Data.DataSet.GetChanges%2A> メソッドが最初に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-646">In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked.</span></span> <span data-ttu-id="6e9b5-647">このメソッドは、検証とマージのために最適化された2番目の <xref:System.Data.DataSet> を返します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-647">That method returns a second <xref:System.Data.DataSet> optimized for validating and merging.</span></span> <span data-ttu-id="6e9b5-648">この2番目の <xref:System.Data.DataSet> オブジェクトには、変更された <xref:System.Data.DataTable> および <xref:System.Data.DataRow> オブジェクトのみが含まれ、その結果、元の <xref:System.Data.DataSet>のサブセットになります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-648">This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="6e9b5-649">通常、このサブセットは小さいため、中間層コンポーネントにより効率的に戻されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-649">This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.</span></span> <span data-ttu-id="6e9b5-650">次に、中間層コンポーネントによって、元のデータソースが変更され、ストアドプロシージャによって更新されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-650">The middle-tier component then updates the original data source with the changes through stored procedures.</span></span> <span data-ttu-id="6e9b5-651">その後、中間層では、元のデータを含む新しい <xref:System.Data.DataSet> とデータソースの最新のデータ (元のクエリを再度実行) のいずれかを返すことができます。または、データソースから変更を加えたサブセットを送信することもできます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-651">The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</span></span> <span data-ttu-id="6e9b5-652">(たとえば、データソースによって一意の主キー値が自動的に作成された場合、これらの値をクライアントアプリケーションに反映させることができます)。どちらの場合も、返された <xref:System.Data.DataSet> は、<xref:System.Data.DataSet.Merge%2A> メソッドを使用して、クライアントアプリケーションの元の <xref:System.Data.DataSet> に再びマージできます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-652">(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.</span></span>  
  
 <span data-ttu-id="6e9b5-653"><xref:System.Data.DataSet.Merge%2A> メソッドの説明を容易にするために、"target" を使用して現在の <xref:System.Data.DataSet>を示し、"source" を使用して2番目の (パラメーター) <xref:System.Data.DataSet>に名前を指定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-653">To facilitate explanation of the <xref:System.Data.DataSet.Merge%2A> method, we use "target" to signify the current <xref:System.Data.DataSet>, and "source" to name the second (parameter) <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="6e9b5-654">ターゲット <xref:System.Data.DataSet> は、アクション (マージ) が発生するオブジェクトであるため、という名前になります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-654">The target <xref:System.Data.DataSet> is so named because it is the object upon which an action (the merge) occurs.</span></span> <span data-ttu-id="6e9b5-655">2番目の <xref:System.Data.DataSet> は、含まれている情報は変更されず、代わりに現在の <xref:System.Data.DataSet>にマージされるため、"ソース" と呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-655">The second <xref:System.Data.DataSet> is called a "source" because the information it contains does not change, but instead is merged into the current <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="6e9b5-656"><xref:System.Data.DataSet.Merge%2A> メソッドを呼び出すと、スキーマが変更されている可能性があるため、2つの <xref:System.Data.DataSet> オブジェクトのスキーマが比較されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-656">When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed.</span></span> <span data-ttu-id="6e9b5-657">たとえば、企業間のシナリオでは、自動化されたプロセスによって新しい列が XML スキーマに追加されている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-657">For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</span></span> <span data-ttu-id="6e9b5-658">ソース <xref:System.Data.DataSet> に、ターゲットに存在しないスキーマ要素 (追加された <xref:System.Data.DataColumn> オブジェクト) が含まれている場合は、`missingSchemaAction` 引数を `MissingSchemaAction.Add`に設定することによって、スキーマ要素をターゲットに追加できます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-658">If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`.</span></span> <span data-ttu-id="6e9b5-659">この場合、結合された <xref:System.Data.DataSet> には追加されたスキーマとデータが含まれます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-659">In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.</span></span>  
  
 <span data-ttu-id="6e9b5-660">スキーマをマージすると、データはマージされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-660">After merging schemas, the data is merged.</span></span>  
  
 <span data-ttu-id="6e9b5-661">新しいソース <xref:System.Data.DataSet> をターゲットにマージする場合、<xref:System.Data.DataRowState> 値が `Unchanged`、`Modified`、または `Deleted` のソース行が、同じ主キー値を持つターゲット行と照合されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-661">When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values.</span></span> <span data-ttu-id="6e9b5-662">`DataRowState` 値が `Added` のソース行は、新しいソース行と同じ主キー値を持つ新しいターゲット行と照合されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-662">Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.</span></span>  
  
 <span data-ttu-id="6e9b5-663">マージ中、制約は無効になります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-663">During a merge, constraints are disabled.</span></span> <span data-ttu-id="6e9b5-664">マージの最後に有効にできない制約がある場合は、<xref:System.Data.ConstraintException> が生成され、制約が無効になっている間はマージされたデータが保持されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-664">If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled.</span></span> <span data-ttu-id="6e9b5-665">この場合、<xref:System.Data.DataSet.EnforceConstraints%2A> プロパティは `false`に設定され、無効なすべての行はエラーとしてマークされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-665">In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error.</span></span> <span data-ttu-id="6e9b5-666">このエラーは、<xref:System.Data.DataSet.EnforceConstraints%2A> プロパティを `true`にリセットする前に解決しておく必要があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-666">The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-667">次の例では、1つのテーブル、2つの列、および10行を含む単純な <xref:System.Data.DataSet> を作成します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-667">The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows.</span></span> <span data-ttu-id="6e9b5-668">2つの値が変更され、1つの行が追加されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-668">Two values are changed, and one row is added.</span></span> <span data-ttu-id="6e9b5-669">変更されたデータのサブセットは、<xref:System.Data.DataSet.GetChanges%2A> メソッドを使用して作成されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-669">A subset of the changed data is created using the <xref:System.Data.DataSet.GetChanges%2A> method.</span></span> <span data-ttu-id="6e9b5-670">エラーを調整した後、新しい列がサブセットに追加され、スキーマが変更されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-670">After reconciling errors, a new column is added to the subset, changing the schema.</span></span> <span data-ttu-id="6e9b5-671">`missingSchemaAction` を `MissingSchemaAction.Add`に設定して <xref:System.Data.DataSet.Merge%2A> メソッドを呼び出すと、元の <xref:System.Data.DataSet> オブジェクトのスキーマに新しい列が追加されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-671">When the <xref:System.Data.DataSet.Merge%2A> method is called with the `missingSchemaAction` set to `MissingSchemaAction.Add`, the new column is added to the original <xref:System.Data.DataSet> object's schema.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Merge2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Merge2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6e9b5-672"><paramref name="dataSet" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-672">The <paramref name="dataSet" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-673">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-673">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataTable table, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataTable table, bool preserveChanges, valuetype System.Data.MissingSchemaAction missingSchemaAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Merge (table As DataTable, preserveChanges As Boolean, missingSchemaAction As MissingSchemaAction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataTable ^ table, bool preserveChanges, System::Data::MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataTable * bool * System.Data.MissingSchemaAction -&gt; unit" Usage="dataSet.Merge (table, preserveChanges, missingSchemaAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="preserveChanges" Type="System.Boolean" />
        <Parameter Name="missingSchemaAction" Type="System.Data.MissingSchemaAction" />
      </Parameters>
      <Docs>
        <param name="table"><span data-ttu-id="6e9b5-674">データとスキーマをマージする対象の <see langword="DataTable" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-674">The <see langword="DataTable" /> whose data and schema will be merged.</span></span></param>
        <param name="preserveChanges"><span data-ttu-id="6e9b5-675"><see cref="T:System.Data.MissingSchemaAction" /> 値のいずれか 1 つです。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-675">One of the <see cref="T:System.Data.MissingSchemaAction" /> values.</span></span></param>
        <param name="missingSchemaAction"><span data-ttu-id="6e9b5-676"><see langword="true" /> に対して行われた変更を保持するには <see langword="DataSet" />。保持しない場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-676"><see langword="true" /> to preserve changes in the <see langword="DataSet" />; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="6e9b5-677">指定した <see cref="T:System.Data.DataTable" /> およびそのスキーマを現在の <see langword="DataSet" /> にマージします。指定した引数に従って、この <see langword="DataSet" /> に行われた変更を保持または破棄し、互換性のないスキーマを処理します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-677">Merges a specified <see cref="T:System.Data.DataTable" /> and its schema into the current <see langword="DataSet" />, preserving or discarding changes in the <see langword="DataSet" /> and handling an incompatible schema according to the given arguments.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-678"><xref:System.Data.DataSet.Merge%2A> メソッドは、ほぼ類似したスキーマを持つ2つの <xref:System.Data.DataSet> オブジェクトをマージするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-678">The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas.</span></span> <span data-ttu-id="6e9b5-679">通常、マージはクライアントアプリケーションで使用され、データソースからの最新の変更内容を既存の <xref:System.Data.DataSet>に組み込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-679">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="6e9b5-680">これにより、クライアントアプリケーションは、データソースの最新のデータを使用して <xref:System.Data.DataSet> を更新できます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-680">This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="6e9b5-681"><xref:System.Data.DataSet.Merge%2A> メソッドは、変更の検証、エラーの調整、変更によるデータソースの更新、最後に既存の <xref:System.Data.DataSet>の更新を伴う一連の手順の最後に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-681">The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="6e9b5-682">クライアントアプリケーションでは、通常、1つのボタンをクリックするだけで、変更されたデータを収集し、中間層コンポーネントに送信する前にそのデータを検証することができます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-682">iOn a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</span></span> <span data-ttu-id="6e9b5-683">このシナリオでは、<xref:System.Data.DataSet.GetChanges%2A> メソッドが最初に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-683">In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked.</span></span> <span data-ttu-id="6e9b5-684">このメソッドは、検証とマージのために最適化された2番目の <xref:System.Data.DataSet> を返します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-684">That method returns a second <xref:System.Data.DataSet> optimized for validating and merging.</span></span> <span data-ttu-id="6e9b5-685">この2番目の <xref:System.Data.DataSet> オブジェクトには、変更された <xref:System.Data.DataTable> および <xref:System.Data.DataRow> オブジェクトのみが含まれ、その結果、元の <xref:System.Data.DataSet>のサブセットになります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-685">This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="6e9b5-686">通常、このサブセットは小さいため、中間層コンポーネントにより効率的に戻されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-686">This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.</span></span> <span data-ttu-id="6e9b5-687">次に、中間層コンポーネントによって、元のデータソースが変更され、ストアドプロシージャによって更新されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-687">The middle-tier component then updates the original data source with the changes through stored procedures.</span></span> <span data-ttu-id="6e9b5-688">その後、中間層では、元のデータを含む新しい <xref:System.Data.DataSet> とデータソースの最新のデータ (元のクエリを再度実行) のいずれかを返すことができます。または、データソースから変更を加えたサブセットを送信することもできます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-688">The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</span></span> <span data-ttu-id="6e9b5-689">(たとえば、データソースによって一意の主キー値が自動的に作成された場合、これらの値をクライアントアプリケーションに反映させることができます)。どちらの場合も、返された <xref:System.Data.DataSet> は、<xref:System.Data.DataSet.Merge%2A> メソッドを使用して、クライアントアプリケーションの元の <xref:System.Data.DataSet> に再びマージできます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-689">(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.</span></span>  
  
 <span data-ttu-id="6e9b5-690"><xref:System.Data.DataSet.Merge%2A> メソッドを呼び出すと、スキーマが変更されている可能性があるため、2つの <xref:System.Data.DataSet> オブジェクトのスキーマが比較されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-690">When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed.</span></span> <span data-ttu-id="6e9b5-691">たとえば、企業間のシナリオでは、自動化されたプロセスによって新しい列が XML スキーマに追加されている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-691">For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</span></span> <span data-ttu-id="6e9b5-692">ソース <xref:System.Data.DataSet> に、ターゲットに存在しないスキーマ要素 (追加された <xref:System.Data.DataColumn> オブジェクト) が含まれている場合は、`missingSchemaAction` 引数を `MissingSchemaAction.Add`に設定することによって、スキーマ要素をターゲットに追加できます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-692">If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`.</span></span> <span data-ttu-id="6e9b5-693">この場合、結合された <xref:System.Data.DataSet> には追加されたスキーマとデータが含まれます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-693">In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.</span></span>  
  
 <span data-ttu-id="6e9b5-694">スキーマをマージすると、データはマージされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-694">After merging schemas, the data is merged.</span></span>  
  
 <span data-ttu-id="6e9b5-695">新しいソース <xref:System.Data.DataSet> をターゲットにマージする場合、<xref:System.Data.DataRowState> 値が `Unchanged`、`Modified`、または `Deleted` のソース行が、同じ主キー値を持つターゲット行と照合されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-695">When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values.</span></span> <span data-ttu-id="6e9b5-696">`DataRowState` 値が `Added` のソース行は、新しいソース行と同じ主キー値を持つ新しいターゲット行と照合されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-696">Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.</span></span>  
  
 <span data-ttu-id="6e9b5-697">マージ中、制約は無効になります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-697">During a merge, constraints are disabled.</span></span> <span data-ttu-id="6e9b5-698">マージの最後に有効にできない制約がある場合は、<xref:System.Data.ConstraintException> が生成され、制約が無効になっている間はマージされたデータが保持されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-698">If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled.</span></span> <span data-ttu-id="6e9b5-699">この場合、<xref:System.Data.DataSet.EnforceConstraints%2A> プロパティは `false`に設定され、無効なすべての行はエラーとしてマークされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-699">In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error.</span></span> <span data-ttu-id="6e9b5-700">このエラーは、<xref:System.Data.DataSet.EnforceConstraints%2A> プロパティを `true`にリセットする前に解決しておく必要があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-700">The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-701">次の例では、1つのテーブル、2つの列、および10行を含む単純な <xref:System.Data.DataSet> を作成します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-701">The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows.</span></span> <span data-ttu-id="6e9b5-702">2つ目の <xref:System.Data.DataTable> は、テーブルに新しい `DataColumn` が追加される点を除いて、最初のものとほぼ同じです。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-702">A second <xref:System.Data.DataTable> is created that is nearly identical to the first except that a new `DataColumn` is added to the table.</span></span> <span data-ttu-id="6e9b5-703">2つの行が2番目のテーブルに追加され、`preserveChanges` 引数が `false`に設定され、`missingSchemaAction` 引数が `MissingSchemaAction.Add`に設定された <xref:System.Data.DataSet> にマージされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-703">Two rows are added to the second table, which is then merged into the <xref:System.Data.DataSet> with the `preserveChanges` argument set to `false`, and the `missingSchemaAction` argument set to `MissingSchemaAction.Add`.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Merge4 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge4 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Merge4 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge4 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6e9b5-704"><paramref name="dataSet" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-704">The <paramref name="dataSet" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-705">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-705">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MergeFailed">
      <MemberSignature Language="C#" Value="public event System.Data.MergeFailedEventHandler MergeFailed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.MergeFailedEventHandler MergeFailed" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataSet.MergeFailed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MergeFailed As MergeFailedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::MergeFailedEventHandler ^ MergeFailed;" />
      <MemberSignature Language="F#" Value="member this.MergeFailed : System.Data.MergeFailedEventHandler " Usage="member this.MergeFailed : System.Data.MergeFailedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetMergeFailedDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.MergeFailedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6e9b5-706">ターゲットとソースの <see cref="T:System.Data.DataRow" /> に同じ主キー値が格納されていて、<see cref="P:System.Data.DataSet.EnforceConstraints" /> が true に設定されているときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-706">Occurs when a target and source <see cref="T:System.Data.DataRow" /> have the same primary key value, and <see cref="P:System.Data.DataSet.EnforceConstraints" /> is set to true.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-707">イベントを処理する方法の詳細については、次を参照してください。[処理とイベントの発生](/dotnet/standard/events/)します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-707">For more information about how to handle events, see [Handling and Raising Events](/dotnet/standard/events/).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-708">次の例は、<xref:System.Data.DataSet.MergeFailed> イベントの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-708">The following example demonstrates the use of the <xref:System.Data.DataSet.MergeFailed> event.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.MergeFailed Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.MergeFailed Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.MergeFailed Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.MergeFailed Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-709">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-709">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Data.DataSet.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetNamespaceDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6e9b5-710"><see cref="T:System.Data.DataSet" /> の名前空間を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-710">Gets or sets the namespace of the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <value><span data-ttu-id="6e9b5-711"><see cref="T:System.Data.DataSet" /> の名前空間。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-711">The namespace of the <see cref="T:System.Data.DataSet" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-712"><xref:System.Data.DataSet.Namespace%2A> プロパティは、<xref:System.Data.DataSet.ReadXml%2A>、<xref:System.Data.DataSet.WriteXml%2A>、<xref:System.Data.DataSet.ReadXmlSchema%2A>、または <xref:System.Data.DataSet.WriteXmlSchema%2A> の各メソッドを使用して、<xref:System.Data.DataSet> に XML ドキュメントを読み書きするときに使用されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-712">The <xref:System.Data.DataSet.Namespace%2A> property is used when reading and writing an XML document into the <xref:System.Data.DataSet> using the <xref:System.Data.DataSet.ReadXml%2A>, <xref:System.Data.DataSet.WriteXml%2A>, <xref:System.Data.DataSet.ReadXmlSchema%2A>, or <xref:System.Data.DataSet.WriteXmlSchema%2A> methods.</span></span>  
  
 <span data-ttu-id="6e9b5-713">XML ドキュメントの名前空間は、<xref:System.Data.DataSet>に読み取るときに XML 属性と要素のスコープを限定するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-713">The namespace of an XML document is used to scope XML attributes and elements when read into a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="6e9b5-714">たとえば、名前空間が "myCompany" であるドキュメントから読み取られたスキーマが <xref:System.Data.DataSet> に含まれていて、別の名前空間を持つドキュメントからのみデータの読み取りを試行した場合、既存のスキーマに対応していないデータは無視されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-714">For example, if a <xref:System.Data.DataSet> contains a schema that was read from a document with the namespace "myCompany," and an attempt is made to read data only from a document with a different namespace, any data that does not correspond to the existing schema is ignored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-715">次の例では、<xref:System.Data.DataSet.ReadXml%2A> メソッドを呼び出す前に <xref:System.Data.DataSet.Prefix%2A> を設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-715">The following example sets the <xref:System.Data.DataSet.Prefix%2A> before calling the <xref:System.Data.DataSet.ReadXml%2A> method.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Namespace Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Namespace Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Namespace Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Namespace Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6e9b5-716">この名前空間には既にデータが格納されています。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-716">The namespace already has data.</span></span></exception>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-717">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-717">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanging(class System.ComponentModel.PropertyChangedEventArgs pcevent) cil managed" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanging (pcevent As PropertyChangedEventArgs)" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanging(System::ComponentModel::PropertyChangedEventArgs ^ pcevent);" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member OnPropertyChanging : System.ComponentModel.PropertyChangedEventArgs -&gt; unit&#xA;override this.OnPropertyChanging : System.ComponentModel.PropertyChangedEventArgs -&gt; unit" Usage="dataSet.OnPropertyChanging pcevent" />
      <MemberSignature Language="C#" Value="protected internal virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPropertyChanging(class System.ComponentModel.PropertyChangedEventArgs pcevent) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPropertyChanging (pcevent As PropertyChangedEventArgs)" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPropertyChanging(System::ComponentModel::PropertyChangedEventArgs ^ pcevent);" FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcevent" Type="System.ComponentModel.PropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="pcevent"><span data-ttu-id="6e9b5-718">イベント データを含んでいる <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-718">A <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6e9b5-719"><see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-719">Raises the <see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-720">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-720">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6e9b5-721">概要については、「[イベントの処理と発生](/dotnet/standard/events/)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-721">For an overview, see [Handling and Raising Events](/dotnet/standard/events/).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6e9b5-722">派生クラスで <see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> をオーバーライドする場合は、必ず基底クラスの <see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-722">When overriding <see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> in a derived class, be sure to call the base class' <see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> method.</span></span></para></block>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-723">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-723">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="OnRemoveRelation">
      <MemberSignature Language="C#" Value="protected virtual void OnRemoveRelation (System.Data.DataRelation relation);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRemoveRelation(class System.Data.DataRelation relation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.OnRemoveRelation(System.Data.DataRelation)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRemoveRelation (relation As DataRelation)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRemoveRelation(System::Data::DataRelation ^ relation);" />
      <MemberSignature Language="F#" Value="abstract member OnRemoveRelation : System.Data.DataRelation -&gt; unit&#xA;override this.OnRemoveRelation : System.Data.DataRelation -&gt; unit" Usage="dataSet.OnRemoveRelation relation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relation" Type="System.Data.DataRelation" />
      </Parameters>
      <Docs>
        <param name="relation"><span data-ttu-id="6e9b5-724">削除する <see cref="T:System.Data.DataRelation" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-724">The <see cref="T:System.Data.DataRelation" /> being removed.</span></span></param>
        <summary><span data-ttu-id="6e9b5-725"><see cref="T:System.Data.DataRelation" /> から <see cref="T:System.Data.DataTable" /> オブジェクトが削除されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-725">Occurs when a <see cref="T:System.Data.DataRelation" /> object is removed from a <see cref="T:System.Data.DataTable" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-726">このメソッドは、削除するテーブルを制限するために、サブクラスによってオーバーライドされる必要があります</span><span class="sxs-lookup"><span data-stu-id="6e9b5-726">This method should be overridden by subclasses to restrict tables being removed</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-727">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-727">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="OnRemoveTable">
      <MemberSignature Language="C#" Value="protected internal virtual void OnRemoveTable (System.Data.DataTable table);" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnRemoveTable(class System.Data.DataTable table) cil managed" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.OnRemoveTable(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnRemoveTable (table As DataTable)" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnRemoveTable(System::Data::DataTable ^ table);" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member OnRemoveTable : System.Data.DataTable -&gt; unit&#xA;override this.OnRemoveTable : System.Data.DataTable -&gt; unit" Usage="dataSet.OnRemoveTable table" />
      <MemberSignature Language="C#" Value="protected virtual void OnRemoveTable (System.Data.DataTable table);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRemoveTable(class System.Data.DataTable table) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRemoveTable (table As DataTable)" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRemoveTable(System::Data::DataTable ^ table);" FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="table"><span data-ttu-id="6e9b5-728">削除する <see cref="T:System.Data.DataTable" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-728">The <see cref="T:System.Data.DataTable" /> being removed.</span></span></param>
        <summary><span data-ttu-id="6e9b5-729"><see cref="T:System.Data.DataTable" /> から <see cref="T:System.Data.DataSet" /> が削除されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-729">Occurs when a <see cref="T:System.Data.DataTable" /> is removed from a <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-730">このメソッドは、サブクラスによってオーバーライドされ、テーブルが削除されるのを防ぐことができます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-730">This method can be overridden by subclasses to restrict tables from being removed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-731">次の例は、<xref:System.Data.DataSet.OnRemoveTable%2A> メソッドがオーバーライドされた <xref:System.Data.DataSet> から派生したクラスを示しています。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-731">The following example shows a class derived from the <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.OnRemoveTable%2A> method overridden.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.OnRemoveTable Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.OnRemoveTable Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.OnRemoveTable Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.OnRemoveTable Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-732">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-732">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public string Prefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Prefix" />
      <MemberSignature Language="VB.NET" Value="Public Property Prefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Prefix { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Prefix : string with get, set" Usage="System.Data.DataSet.Prefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetPrefixDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6e9b5-733"><see cref="T:System.Data.DataSet" /> の名前空間に別名を付ける XML プリフィックスを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-733">Gets or sets an XML prefix that aliases the namespace of the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <value><span data-ttu-id="6e9b5-734"><see cref="T:System.Data.DataSet" /> 名前空間の XML プリフィックス。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-734">The XML prefix for the <see cref="T:System.Data.DataSet" /> namespace.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-735"><xref:System.Data.DataSet.Prefix%2A> プロパティは、<xref:System.Data.DataSet.Namespace%2A> プロパティによって設定されるように、<xref:System.Data.DataSet> オブジェクトの名前空間に属する要素を識別するために、XML ドキュメント全体で使用されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-735">The <xref:System.Data.DataSet.Prefix%2A> property is used throughout an XML document to identify elements which belong to the namespace of the <xref:System.Data.DataSet> object (as set by the <xref:System.Data.DataSet.Namespace%2A> property).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-736">次の例では、<xref:System.Data.DataSet.ReadXml%2A> メソッドを呼び出す前に <xref:System.Data.DataSet.Prefix%2A> を設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-736">The following example sets the <xref:System.Data.DataSet.Prefix%2A> before calling the <xref:System.Data.DataSet.ReadXml%2A> method.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Namespace Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Namespace Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Namespace Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Namespace Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-737">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-737">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RaisePropertyChanging">
      <MemberSignature Language="C#" Value="protected internal void RaisePropertyChanging (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void RaisePropertyChanging(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.RaisePropertyChanging(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub RaisePropertyChanging (name As String)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void RaisePropertyChanging(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.RaisePropertyChanging : string -&gt; unit" Usage="dataSet.RaisePropertyChanging name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6e9b5-738">これから変更されるプロパティの名前。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-738">The name of the property that is about to change.</span></span></param>
        <summary><span data-ttu-id="6e9b5-739">指定した <see cref="T:System.Data.DataSet" /> プロパティがこれから変更されるという通知を送信します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-739">Sends a notification that the specified <see cref="T:System.Data.DataSet" /> property is about to change.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-740">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-740">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadXml">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6e9b5-741">XML スキーマとデータを <see cref="T:System.Data.DataSet" /> に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-741">Reads XML schema and data into the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-742">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-742">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (stream As Stream) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.IO.Stream -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="6e9b5-743"><see cref="T:System.IO.Stream" /> から派生するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-743">An object that derives from <see cref="T:System.IO.Stream" />.</span></span></param>
        <summary><span data-ttu-id="6e9b5-744">指定した <see cref="T:System.Data.DataSet" /> を使用して、XML スキーマとデータを <see cref="T:System.IO.Stream" /> に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-744">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.Stream" />.</span></span></summary>
        <returns><span data-ttu-id="6e9b5-745">データを読み込むために使用する <see cref="T:System.Data.XmlReadMode" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-745">The <see cref="T:System.Data.XmlReadMode" /> used to read the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-746"><xref:System.Data.DataSet.ReadXml%2A> メソッドを使用すると、データのみ、またはデータとスキーマの両方を XML ドキュメントから <xref:System.Data.DataSet> に読み取ることができます。一方、<xref:System.Data.DataSet.ReadXmlSchema%2A> メソッドでは、スキーマのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-746">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="6e9b5-747">データとスキーマの両方を読み取るには、`mode` パラメーターを含む `ReadXML` オーバーロードのいずれかを使用し、その値を `ReadSchema`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-747">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="6e9b5-748"><xref:System.Data.DataSet.WriteXml%2A> メソッドと <xref:System.Data.DataSet.WriteXmlSchema%2A> メソッドについても同様です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-748">Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="6e9b5-749">XML データ、または `DataSet`のスキーマとデータの両方を書き込むには、`WriteXml` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-749">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="6e9b5-750">スキーマだけを記述するには、`WriteXmlSchema` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-750">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-751">読み取りまたは書き込みを行う `DataRow` 内の列の型が <xref:System.Dynamic.IDynamicMetaObjectProvider> を実装していて、<xref:System.Xml.Serialization.IXmlSerializable>を実装していない場合、<xref:System.InvalidOperationException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-751">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="6e9b5-752">インラインスキーマが指定されている場合は、データを読み込む前に、インラインスキーマを使用して既存のリレーショナル構造が拡張されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-752">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="6e9b5-753">競合がある場合 (たとえば、同じテーブル内の同じ列が異なるデータ型で定義されている場合)、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-753">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="6e9b5-754">インラインスキーマが指定されていない場合、XML ドキュメントの構造に従って、必要に応じて、推論によってリレーショナル構造が拡張されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-754">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="6e9b5-755">すべてのデータを公開するために、推論によってスキーマを拡張できない場合は、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-755">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-756">`DataSet` は、("_") のような有効な XML 文字がシリアル化された XML でエスケープされている場合に、XML 要素とそれに対応する `DataColumn` または `DataTable` を関連付けません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-756">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="6e9b5-757">`DataSet` 自体は XML 要素名で無効な XML 文字をエスケープするだけであるため、同じを使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-757">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="6e9b5-758">XML 要素名に有効な文字がエスケープされている場合、要素は処理中に無視されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-758">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="6e9b5-759"><xref:System.Data.DataSet> の XML スキーマに `targetNamespace`が含まれている場合、データが読み取られない可能性があります。また、<xref:System.Data.DataSet.ReadXml%2A> を呼び出して、修飾された名前空間を持たない要素を含む XML を使用して <xref:System.Data.DataSet> を読み込むと、例外が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-759">If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="6e9b5-760">修飾されていない要素を読み取るには、次の例に示すように、XML スキーマで `elementFormDefault` を "qualified" に設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-760">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema, as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-761"><xref:System.Data.DataSet> のスキーマに同じ名前の要素が含まれていても、同じ名前空間に存在する型が異なる場合は、`XmlReadMode.ReadSchema`を指定することによって <xref:System.Data.DataSet.ReadXml%2A> で <xref:System.Data.DataSet> にスキーマを読み取ろうとすると、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-761">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="6e9b5-762">.NET Framework バージョン1.0 を使用している場合、この例外は発生しません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-762">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-763">次の例では、最初に、1つの <xref:System.Data.DataTable>、2つの列、および10行を含む単純な <xref:System.Data.DataSet> を作成します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-763">The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows.</span></span> <span data-ttu-id="6e9b5-764"><xref:System.Data.DataSet> スキーマとデータは、<xref:System.Data.DataSet.WriteXml%2A> メソッドを呼び出すことによってディスクに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-764">The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span> <span data-ttu-id="6e9b5-765">2番目の <xref:System.Data.DataSet> が作成され、スキーマとデータを格納するために <xref:System.Data.DataSet.ReadXml%2A> メソッドが使用されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-765">A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXml1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)" />
        <altmember cref="M:System.Data.DataSet.WriteXml(System.IO.Stream)" />
        <altmember cref="M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream)" />
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-766">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-766">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (reader As TextReader) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::IO::TextReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.IO.TextReader -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="6e9b5-767">スキーマおよびデータの読み出し元の <see langword="TextReader" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-767">The <see langword="TextReader" /> from which to read the schema and data.</span></span></param>
        <summary><span data-ttu-id="6e9b5-768">指定した <see cref="T:System.Data.DataSet" /> を使用して、XML スキーマとデータを <see cref="T:System.IO.TextReader" /> に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-768">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.TextReader" />.</span></span></summary>
        <returns><span data-ttu-id="6e9b5-769">データを読み込むために使用する <see cref="T:System.Data.XmlReadMode" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-769">The <see cref="T:System.Data.XmlReadMode" /> used to read the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-770"><xref:System.Data.DataSet.ReadXml%2A> メソッドを使用すると、データのみ、またはデータとスキーマの両方を XML ドキュメントから <xref:System.Data.DataSet> に読み取ることができます。一方、<xref:System.Data.DataSet.ReadXmlSchema%2A> メソッドでは、スキーマのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-770">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="6e9b5-771">データとスキーマの両方を読み取るには、`mode` パラメーターを含む `ReadXML` オーバーロードのいずれかを使用し、その値を `ReadSchema`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-771">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="6e9b5-772"><xref:System.Data.DataSet.WriteXml%2A> メソッドと <xref:System.Data.DataSet.WriteXmlSchema%2A> メソッドについても同様です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-772">Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="6e9b5-773">XML データ、または `DataSet`のスキーマとデータの両方を書き込むには、`WriteXml` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-773">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="6e9b5-774">スキーマだけを記述するには、`WriteXmlSchema` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-774">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-775">読み取りまたは書き込みを行う `DataRow` 内の列の型が <xref:System.Dynamic.IDynamicMetaObjectProvider> を実装していて、<xref:System.Xml.Serialization.IXmlSerializable>を実装していない場合、<xref:System.InvalidOperationException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-775">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="6e9b5-776">インラインスキーマが指定されている場合は、データを読み込む前に、インラインスキーマを使用して既存のリレーショナル構造が拡張されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-776">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="6e9b5-777">競合がある場合 (たとえば、同じテーブル内の同じ列が異なるデータ型で定義されている場合)、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-777">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="6e9b5-778">インラインスキーマが指定されていない場合、XML ドキュメントの構造に従って、必要に応じて、推論によってリレーショナル構造が拡張されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-778">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="6e9b5-779">すべてのデータを公開するために、推論によってスキーマを拡張できない場合は、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-779">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-780">`DataSet` は、("_") のような有効な XML 文字がシリアル化された XML でエスケープされている場合に、XML 要素とそれに対応する `DataColumn` または `DataTable` を関連付けません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-780">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="6e9b5-781">`DataSet` 自体は XML 要素名で無効な XML 文字をエスケープするだけであるため、同じを使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-781">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="6e9b5-782">XML 要素名に有効な文字がエスケープされている場合、要素は処理中に無視されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-782">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="6e9b5-783"><xref:System.Data.DataSet> の XML スキーマに `targetNamespace`が含まれている場合、データが読み取られない可能性があります。また、<xref:System.Data.DataSet.ReadXml%2A> を呼び出して、修飾された名前空間を持たない要素を含む XML を使用して <xref:System.Data.DataSet> を読み込むと、例外が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-783">If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="6e9b5-784">修飾されていない要素を読み取るには、次の例に示すように、XML スキーマで `elementFormDefault` を "qualified" に設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-784">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
 <span data-ttu-id="6e9b5-785"><xref:System.IO.TextReader> クラスを継承するクラスには、<xref:System.IO.StreamReader> クラスと <xref:System.IO.StringReader> クラスが含まれます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-785">Classes that inherit from the <xref:System.IO.TextReader> class include the <xref:System.IO.StreamReader> and <xref:System.IO.StringReader> classes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-786"><xref:System.Data.DataSet> のスキーマに同じ名前の要素が含まれていても、同じ名前空間に存在する型が異なる場合は、`XmlReadMode.ReadSchema`を指定することによって <xref:System.Data.DataSet.ReadXml%2A> で <xref:System.Data.DataSet> にスキーマを読み取ろうとすると、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-786">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="6e9b5-787">.NET Framework バージョン1.0 を使用している場合、この例外は発生しません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-787">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-788">次の例では、最初に、1つの <xref:System.Data.DataTable>、2つの列、および10行を含む単純な <xref:System.Data.DataSet> を作成します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-788">The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows.</span></span> <span data-ttu-id="6e9b5-789"><xref:System.Data.DataSet> スキーマとデータは、<xref:System.Data.DataSet.WriteXml%2A> メソッドを呼び出すことによってディスクに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-789">The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span> <span data-ttu-id="6e9b5-790">2番目の <xref:System.Data.DataSet> が作成され、スキーマとデータを格納するために <xref:System.Data.DataSet.ReadXml%2A> メソッドが使用されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-790">A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXml2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-791">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-791">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (fileName As String) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : string -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="6e9b5-792">読み込み元の (パスを含む) ファイル名。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-792">The filename (including the path) from which to read.</span></span></param>
        <summary><span data-ttu-id="6e9b5-793">指定したファイルを使用して、XML スキーマとデータを <see cref="T:System.Data.DataSet" /> に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-793">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified file.</span></span></summary>
        <returns><span data-ttu-id="6e9b5-794">データを読み込むために使用する <see langword="XmlReadMode" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-794">The <see langword="XmlReadMode" /> used to read the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-795"><xref:System.Data.DataSet.ReadXml%2A> メソッドを使用すると、データのみ、またはデータとスキーマの両方を XML ドキュメントから <xref:System.Data.DataSet> に読み取ることができます。一方、<xref:System.Data.DataSet.ReadXmlSchema%2A> メソッドでは、スキーマのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-795">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="6e9b5-796">データとスキーマの両方を読み取るには、`mode` パラメーターを含む `ReadXML` オーバーロードのいずれかを使用し、その値を `ReadSchema`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-796">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="6e9b5-797"><xref:System.Data.DataSet.WriteXml%2A> メソッドと <xref:System.Data.DataSet.WriteXmlSchema%2A> メソッドについても同様です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-797">Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="6e9b5-798">XML データ、または `DataSet`のスキーマとデータの両方を書き込むには、`WriteXml` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-798">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="6e9b5-799">スキーマだけを記述するには、`WriteXmlSchema` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-799">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-800">読み取りまたは書き込みを行う `DataRow` 内の列の型が <xref:System.Dynamic.IDynamicMetaObjectProvider> を実装していて、<xref:System.Xml.Serialization.IXmlSerializable>を実装していない場合、<xref:System.InvalidOperationException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-800">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="6e9b5-801">インラインスキーマが指定されている場合は、データを読み込む前に、インラインスキーマを使用して既存のリレーショナル構造が拡張されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-801">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="6e9b5-802">競合がある場合 (たとえば、同じテーブル内の同じ列が異なるデータ型で定義されている場合)、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-802">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="6e9b5-803">インラインスキーマが指定されていない場合、XML ドキュメントの構造に従って、必要に応じて、推論によってリレーショナル構造が拡張されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-803">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="6e9b5-804">すべてのデータを公開するために、推論によってスキーマを拡張できない場合は、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-804">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-805">`DataSet` は、("_") のような有効な XML 文字がシリアル化された XML でエスケープされている場合に、XML 要素とそれに対応する `DataColumn` または `DataTable` を関連付けません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-805">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="6e9b5-806">`DataSet` 自体は XML 要素名で無効な XML 文字をエスケープするだけであるため、同じを使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-806">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="6e9b5-807">XML 要素名に有効な文字がエスケープされている場合、要素は処理中に無視されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-807">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="6e9b5-808"><xref:System.Data.DataSet> の XML スキーマに `targetNamespace`が含まれている場合、データが読み取られない可能性があります。また、<xref:System.Data.DataSet.ReadXml%2A> を呼び出して、修飾された名前空間を持たない要素を含む XML を使用して <xref:System.Data.DataSet> を読み込むと、例外が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-808">If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="6e9b5-809">修飾されていない要素を読み取るには、次の例に示すように、XML スキーマで `elementFormDefault` を "qualified" に設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-809">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-810"><xref:System.Data.DataSet> のスキーマに同じ名前の要素が含まれていても、同じ名前空間に存在する型が異なる場合は、`XmlReadMode.ReadSchema`を指定することによって <xref:System.Data.DataSet.ReadXml%2A> で <xref:System.Data.DataSet> にスキーマを読み取ろうとすると、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-810">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="6e9b5-811">.NET Framework バージョン1.0 を使用している場合、この例外は発生しません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-811">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-812">次の例では、最初に、1つの <xref:System.Data.DataTable>、2つの列、および10行を含む単純な <xref:System.Data.DataSet> を作成します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-812">The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows.</span></span> <span data-ttu-id="6e9b5-813"><xref:System.Data.DataSet> スキーマとデータは、<xref:System.Data.DataSet.WriteXml%2A> メソッドを呼び出すことによってディスクに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-813">The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span> <span data-ttu-id="6e9b5-814">2番目の <xref:System.Data.DataSet> が作成され、スキーマとデータを格納するために <xref:System.Data.DataSet.ReadXml%2A> メソッドが使用されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-814">A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXml3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="6e9b5-815"><see cref="T:System.Security.Permissions.FileIOPermission" /> が <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /> に設定されていません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-815"><see cref="T:System.Security.Permissions.FileIOPermission" /> is not set to <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</span></span></exception>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-816">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-816">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (reader As XmlReader) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.Xml.XmlReader -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="6e9b5-817">読み取り元の <see cref="T:System.Xml.XmlReader" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-817">The <see cref="T:System.Xml.XmlReader" /> from which to read.</span></span></param>
        <summary><span data-ttu-id="6e9b5-818">指定した <see cref="T:System.Data.DataSet" /> を使用して、XML スキーマとデータを <see cref="T:System.Xml.XmlReader" /> に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-818">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.Xml.XmlReader" />.</span></span></summary>
        <returns><span data-ttu-id="6e9b5-819">データを読み込むために使用する <see langword="XmlReadMode" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-819">The <see langword="XmlReadMode" /> used to read the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-820"><xref:System.Data.DataSet.ReadXml%2A> メソッドを使用すると、データのみ、またはデータとスキーマの両方を XML ドキュメントから <xref:System.Data.DataSet> に読み取ることができます。一方、<xref:System.Data.DataSet.ReadXmlSchema%2A> メソッドでは、スキーマのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-820">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="6e9b5-821">データとスキーマの両方を読み取るには、`mode` パラメーターを含む `ReadXML` オーバーロードのいずれかを使用し、その値を `ReadSchema`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-821">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="6e9b5-822"><xref:System.Data.DataSet.WriteXml%2A> メソッドと <xref:System.Data.DataSet.WriteXmlSchema%2A> メソッドについても同様です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-822">Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="6e9b5-823">XML データ、または `DataSet`のスキーマとデータの両方を書き込むには、`WriteXml` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-823">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="6e9b5-824">スキーマだけを記述するには、`WriteXmlSchema` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-824">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-825">読み取りまたは書き込みを行う `DataRow` 内の列の型が <xref:System.Dynamic.IDynamicMetaObjectProvider> を実装していて、<xref:System.Xml.Serialization.IXmlSerializable>を実装していない場合、<xref:System.InvalidOperationException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-825">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="6e9b5-826">インラインスキーマが指定されている場合は、データを読み込む前に、インラインスキーマを使用して既存のリレーショナル構造が拡張されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-826">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="6e9b5-827">競合がある場合 (たとえば、同じテーブル内の同じ列が異なるデータ型で定義されている場合)、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-827">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="6e9b5-828">インラインスキーマが指定されていない場合、XML ドキュメントの構造に従って、必要に応じて、推論によってリレーショナル構造が拡張されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-828">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="6e9b5-829">すべてのデータを公開するために、推論によってスキーマを拡張できない場合は、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-829">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-830">`DataSet` は、("_") のような有効な XML 文字がシリアル化された XML でエスケープされている場合に、XML 要素とそれに対応する `DataColumn` または `DataTable` を関連付けません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-830">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="6e9b5-831">`DataSet` 自体は XML 要素名で無効な XML 文字をエスケープするだけであるため、同じを使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-831">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="6e9b5-832">XML 要素名に有効な文字がエスケープされている場合、要素は処理中に無視されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-832">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="6e9b5-833"><xref:System.Data.DataSet> の XML スキーマに `targetNamespace`が含まれている場合、データが読み取られない可能性があります。また、<xref:System.Data.DataSet.ReadXml%2A> を呼び出して、修飾された名前空間を持たない要素を含む XML を使用して <xref:System.Data.DataSet> を読み込むと、例外が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-833">If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="6e9b5-834">修飾されていない要素を読み取るには、次の例に示すように、XML スキーマで `elementFormDefault` を "qualified" に設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-834">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
 <span data-ttu-id="6e9b5-835"><xref:System.Xml.XmlTextReader?displayProperty=nameWithType> は、<xref:System.Xml.XmlReader> から継承されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-835"><xref:System.Xml.XmlTextReader?displayProperty=nameWithType> inherits from <xref:System.Xml.XmlReader>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-836"><xref:System.Data.DataSet> のスキーマに同じ名前の要素が含まれていても、同じ名前空間に存在する型が異なる場合は、`XmlReadMode.ReadSchema`を指定することによって <xref:System.Data.DataSet.ReadXml%2A> で <xref:System.Data.DataSet> にスキーマを読み取ろうとすると、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-836">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="6e9b5-837">.NET Framework バージョン1.0 を使用している場合、この例外は発生しません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-837">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-838">次の例では、最初に、1つの <xref:System.Data.DataTable>、2つの列、および10行を含む単純な <xref:System.Data.DataSet> を作成します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-838">The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows.</span></span> <span data-ttu-id="6e9b5-839"><xref:System.Data.DataSet> スキーマとデータは、<xref:System.Data.DataSet.WriteXml%2A> メソッドを呼び出すことによってディスクに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-839">The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span> <span data-ttu-id="6e9b5-840">2番目の <xref:System.Data.DataSet> が作成され、スキーマとデータを格納するために <xref:System.Data.DataSet.ReadXml%2A> メソッドが使用されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-840">A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXml Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-841">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-841">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.IO.Stream stream, System.Data.XmlReadMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.IO.Stream stream, valuetype System.Data.XmlReadMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.IO.Stream,System.Data.XmlReadMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (stream As Stream, mode As XmlReadMode) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::IO::Stream ^ stream, System::Data::XmlReadMode mode);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.IO.Stream * System.Data.XmlReadMode -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml (stream, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="mode" Type="System.Data.XmlReadMode" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="6e9b5-842">読み取り元の <see cref="T:System.IO.Stream" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-842">The <see cref="T:System.IO.Stream" /> from which to read.</span></span></param>
        <param name="mode"><span data-ttu-id="6e9b5-843"><see cref="T:System.Data.XmlReadMode" /> 値のいずれか 1 つです。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-843">One of the <see cref="T:System.Data.XmlReadMode" /> values.</span></span></param>
        <summary><span data-ttu-id="6e9b5-844">指定した <see cref="T:System.Data.DataSet" /> と <see cref="T:System.IO.Stream" /> を使用して、XML スキーマとデータを <see cref="T:System.Data.XmlReadMode" /> に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-844">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.Stream" /> and <see cref="T:System.Data.XmlReadMode" />.</span></span></summary>
        <returns><span data-ttu-id="6e9b5-845">データを読み込むために使用する <see langword="XmlReadMode" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-845">The <see langword="XmlReadMode" /> used to read the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-846"><xref:System.Data.DataSet.ReadXml%2A> メソッドを使用すると、データのみ、またはデータとスキーマの両方を XML ドキュメントから <xref:System.Data.DataSet> に読み取ることができます。一方、<xref:System.Data.DataSet.ReadXmlSchema%2A> メソッドでは、スキーマのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-846">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="6e9b5-847">データとスキーマの両方を読み取るには、`mode` パラメーターを含む `ReadXML` オーバーロードのいずれかを使用し、その値を `ReadSchema`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-847">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="6e9b5-848"><xref:System.Data.DataSet.WriteXml%2A> メソッドと <xref:System.Data.DataSet.WriteXmlSchema%2A> メソッドについても同様です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-848">The same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="6e9b5-849">XML データ、または `DataSet`のスキーマとデータの両方を書き込むには、`WriteXml` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-849">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="6e9b5-850">スキーマだけを記述するには、`WriteXmlSchema` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-850">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-851"><xref:System.Data.DataSet.ReadXml%2A> を使用し、<xref:System.Data.XmlReadMode> を `Diffgram`に設定した場合、diffgram の生成方法と処理方法によって、ターゲット `DataSet` と元の `DataSet` の内容が異なる場合があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-851">When you use <xref:System.Data.DataSet.ReadXml%2A> and you set <xref:System.Data.XmlReadMode> to `Diffgram`, the content of the target `DataSet` and the original `DataSet` may differ because of how the diffgram is generated and processed.</span></span> <span data-ttu-id="6e9b5-852">Diffgram の詳細については、「 [diffgram](/dotnet/framework/data/adonet/dataset-datatable-dataview/diffgrams)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-852">For more information on diffgrams, see [DiffGrams](/dotnet/framework/data/adonet/dataset-datatable-dataview/diffgrams).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-853">読み取りまたは書き込みを行う `DataRow` 内の列の型が <xref:System.Dynamic.IDynamicMetaObjectProvider> を実装していて、<xref:System.Xml.Serialization.IXmlSerializable>を実装していない場合、<xref:System.InvalidOperationException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-853">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="6e9b5-854">インラインスキーマが指定されている場合は、データを読み込む前に、インラインスキーマを使用して既存のリレーショナル構造が拡張されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-854">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="6e9b5-855">競合がある場合 (たとえば、同じテーブル内の同じ列が異なるデータ型で定義されている場合)、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-855">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="6e9b5-856">インラインスキーマが指定されていない場合、XML ドキュメントの構造に従って、必要に応じて、推論によってリレーショナル構造が拡張されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-856">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="6e9b5-857">すべてのデータを公開するために、推論によってスキーマを拡張できない場合は、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-857">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-858">`DataSet` は、("_") のような有効な XML 文字がシリアル化された XML でエスケープされている場合に、XML 要素とそれに対応する `DataColumn` または `DataTable` を関連付けません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-858">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="6e9b5-859">`DataSet` 自体は XML 要素名で無効な XML 文字をエスケープするだけであるため、同じを使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-859">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="6e9b5-860">XML 要素名に有効な文字がエスケープされている場合、要素は処理中に無視されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-860">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="6e9b5-861"><xref:System.Data.DataSet> の XML スキーマに `targetNamespace`が含まれている場合、データが読み取られない可能性があります。また、<xref:System.Data.DataSet.ReadXml%2A> を呼び出して、修飾された名前空間を持たない要素を含む XML を使用して <xref:System.Data.DataSet> を読み込むと、例外が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-861">If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="6e9b5-862">修飾されていない要素を読み取るには、次の例に示すように、XML スキーマで `elementFormDefault` を "qualified" に設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-862">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-863"><xref:System.Data.DataSet> のスキーマに同じ名前の要素が含まれていても、同じ名前空間に存在する型が異なる場合は、`XmlReadMode.ReadSchema`を指定することによって <xref:System.Data.DataSet.ReadXml%2A> で <xref:System.Data.DataSet> にスキーマを読み取ろうとすると、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-863">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="6e9b5-864">.NET Framework バージョン1.0 を使用している場合、この例外は発生しません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-864">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-865">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-865">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader, System.Data.XmlReadMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.IO.TextReader reader, valuetype System.Data.XmlReadMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.IO.TextReader,System.Data.XmlReadMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (reader As TextReader, mode As XmlReadMode) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::IO::TextReader ^ reader, System::Data::XmlReadMode mode);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.IO.TextReader * System.Data.XmlReadMode -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml (reader, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
        <Parameter Name="mode" Type="System.Data.XmlReadMode" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="6e9b5-866">読み取り元の <see cref="T:System.IO.TextReader" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-866">The <see cref="T:System.IO.TextReader" /> from which to read.</span></span></param>
        <param name="mode"><span data-ttu-id="6e9b5-867"><see cref="T:System.Data.XmlReadMode" /> 値のいずれか 1 つです。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-867">One of the <see cref="T:System.Data.XmlReadMode" /> values.</span></span></param>
        <summary><span data-ttu-id="6e9b5-868">指定した <see cref="T:System.Data.DataSet" /> と <see cref="T:System.IO.TextReader" /> を使用して、XML スキーマとデータを <see cref="T:System.Data.XmlReadMode" /> に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-868">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.TextReader" /> and <see cref="T:System.Data.XmlReadMode" />.</span></span></summary>
        <returns><span data-ttu-id="6e9b5-869">データを読み込むために使用する <see langword="XmlReadMode" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-869">The <see langword="XmlReadMode" /> used to read the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-870"><xref:System.Data.DataSet.ReadXml%2A> メソッドを使用すると、データのみ、またはデータとスキーマの両方を XML ドキュメントから <xref:System.Data.DataSet> に読み取ることができます。一方、<xref:System.Data.DataSet.ReadXmlSchema%2A> メソッドでは、スキーマのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-870">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="6e9b5-871">データとスキーマの両方を読み取るには、`mode` パラメーターを含む `ReadXML` オーバーロードのいずれかを使用し、その値を `ReadSchema`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-871">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="6e9b5-872"><xref:System.Data.DataSet.WriteXml%2A> メソッドと <xref:System.Data.DataSet.WriteXmlSchema%2A> メソッドについても同様です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-872">Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="6e9b5-873">XML データ、または `DataSet`のスキーマとデータの両方を書き込むには、`WriteXml` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-873">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="6e9b5-874">スキーマだけを記述するには、`WriteXmlSchema` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-874">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-875">読み取りまたは書き込みを行う `DataRow` 内の列の型が <xref:System.Dynamic.IDynamicMetaObjectProvider> を実装していて、<xref:System.Xml.Serialization.IXmlSerializable>を実装していない場合、<xref:System.InvalidOperationException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-875">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="6e9b5-876">インラインスキーマが指定されている場合は、データを読み込む前に、インラインスキーマを使用して既存のリレーショナル構造が拡張されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-876">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="6e9b5-877">競合がある場合 (たとえば、同じテーブル内の同じ列が異なるデータ型で定義されている場合)、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-877">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="6e9b5-878">インラインスキーマが指定されていない場合、XML ドキュメントの構造に従って、必要に応じて、推論によってリレーショナル構造が拡張されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-878">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="6e9b5-879">すべてのデータを公開するために、推論によってスキーマを拡張できない場合は、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-879">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-880">`DataSet` は、("_") のような有効な XML 文字がシリアル化された XML でエスケープされている場合に、XML 要素とそれに対応する `DataColumn` または `DataTable` を関連付けません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-880">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="6e9b5-881">`DataSet` 自体は XML 要素名で無効な XML 文字をエスケープするだけであるため、同じを使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-881">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="6e9b5-882">XML 要素名に有効な文字がエスケープされている場合、要素は処理中に無視されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-882">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="6e9b5-883"><xref:System.Data.DataSet> の XML スキーマに `targetNamespace`が含まれている場合、データが読み取られない可能性があります。また、<xref:System.Data.DataSet.ReadXml%2A> を呼び出して、修飾された名前空間を持たない要素を含む XML を使用して <xref:System.Data.DataSet> を読み込むと、例外が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-883">If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="6e9b5-884">修飾されていない要素を読み取るには、次の例に示すように、XML スキーマで `elementFormDefault` を "qualified" に設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-884">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-885"><xref:System.Data.DataSet> のスキーマに同じ名前の要素が含まれていても、同じ名前空間に存在する型が異なる場合は、`XmlReadMode.ReadSchema`を指定することによって <xref:System.Data.DataSet.ReadXml%2A> で <xref:System.Data.DataSet> にスキーマを読み取ろうとすると、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-885">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="6e9b5-886">.NET Framework バージョン1.0 を使用している場合、この例外は発生しません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-886">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-887">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-887">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (string fileName, System.Data.XmlReadMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(string fileName, valuetype System.Data.XmlReadMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.String,System.Data.XmlReadMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (fileName As String, mode As XmlReadMode) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::String ^ fileName, System::Data::XmlReadMode mode);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : string * System.Data.XmlReadMode -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml (fileName, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="mode" Type="System.Data.XmlReadMode" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="6e9b5-888">読み込み元の (パスを含む) ファイル名。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-888">The filename (including the path) from which to read.</span></span></param>
        <param name="mode"><span data-ttu-id="6e9b5-889"><see cref="T:System.Data.XmlReadMode" /> 値のいずれか 1 つです。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-889">One of the <see cref="T:System.Data.XmlReadMode" /> values.</span></span></param>
        <summary><span data-ttu-id="6e9b5-890">指定したファイルと <see cref="T:System.Data.DataSet" /> を使用して、XML スキーマとデータを <see cref="T:System.Data.XmlReadMode" /> に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-890">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified file and <see cref="T:System.Data.XmlReadMode" />.</span></span></summary>
        <returns><span data-ttu-id="6e9b5-891">データを読み込むために使用する <see langword="XmlReadMode" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-891">The <see langword="XmlReadMode" /> used to read the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-892"><xref:System.Data.DataSet.ReadXml%2A> メソッドを使用すると、データのみ、またはデータとスキーマの両方を XML ドキュメントから <xref:System.Data.DataSet> に読み取ることができます。一方、<xref:System.Data.DataSet.ReadXmlSchema%2A> メソッドでは、スキーマのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-892">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="6e9b5-893">データとスキーマの両方を読み取るには、`mode` パラメーターを含む `ReadXML` オーバーロードのいずれかを使用し、その値を `ReadSchema`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-893">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="6e9b5-894"><xref:System.Data.DataSet.WriteXml%2A> メソッドと <xref:System.Data.DataSet.WriteXmlSchema%2A> メソッドについても同様です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-894">Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="6e9b5-895">XML データ、または `DataSet`のスキーマとデータの両方を書き込むには、`WriteXml` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-895">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="6e9b5-896">スキーマだけを記述するには、`WriteXmlSchema` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-896">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-897">読み取りまたは書き込みを行う `DataRow` 内の列の型が <xref:System.Dynamic.IDynamicMetaObjectProvider> を実装していて、<xref:System.Xml.Serialization.IXmlSerializable>を実装していない場合、<xref:System.InvalidOperationException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-897">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="6e9b5-898">インラインスキーマが指定されている場合は、データを読み込む前に、インラインスキーマを使用して既存のリレーショナル構造が拡張されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-898">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="6e9b5-899">競合がある場合 (たとえば、同じテーブル内の同じ列が異なるデータ型で定義されている場合)、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-899">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="6e9b5-900">インラインスキーマが指定されていない場合、XML ドキュメントの構造に従って、必要に応じて、推論によってリレーショナル構造が拡張されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-900">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="6e9b5-901">すべてのデータを公開するために、推論によってスキーマを拡張できない場合は、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-901">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-902">`DataSet` は、("_") のような有効な XML 文字がシリアル化された XML でエスケープされている場合に、XML 要素とそれに対応する `DataColumn` または `DataTable` を関連付けません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-902">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="6e9b5-903">`DataSet` 自体は XML 要素名で無効な XML 文字をエスケープするだけであるため、同じを使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-903">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="6e9b5-904">XML 要素名に有効な文字がエスケープされている場合、要素は処理中に無視されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-904">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="6e9b5-905"><xref:System.Data.DataSet> の XML スキーマに `targetNamespace`が含まれている場合、データが読み取られない可能性があります。また、<xref:System.Data.DataSet.ReadXml%2A> を呼び出して、修飾された名前空間を持たない要素を含む XML を使用して <xref:System.Data.DataSet> を読み込むと、例外が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-905">If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="6e9b5-906">修飾されていない要素を読み取るには、次の例に示すように、XML スキーマで `elementFormDefault` を "qualified" に設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-906">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-907"><xref:System.Data.DataSet> のスキーマに同じ名前の要素が含まれていても、同じ名前空間に存在する型が異なる場合は、`XmlReadMode.ReadSchema`を指定することによって <xref:System.Data.DataSet.ReadXml%2A> で <xref:System.Data.DataSet> にスキーマを読み取ろうとすると、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-907">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="6e9b5-908">.NET Framework バージョン1.0 を使用している場合、この例外は発生しません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-908">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="6e9b5-909"><see cref="T:System.Security.Permissions.FileIOPermission" /> が <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /> に設定されていません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-909"><see cref="T:System.Security.Permissions.FileIOPermission" /> is not set to <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</span></span></exception>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-910">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-910">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader, System.Data.XmlReadMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.Xml.XmlReader reader, valuetype System.Data.XmlReadMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (reader As XmlReader, mode As XmlReadMode) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::Xml::XmlReader ^ reader, System::Data::XmlReadMode mode);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.Xml.XmlReader * System.Data.XmlReadMode -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml (reader, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="mode" Type="System.Data.XmlReadMode" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="6e9b5-911">読み取り元の <see cref="T:System.Xml.XmlReader" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-911">The <see cref="T:System.Xml.XmlReader" /> from which to read.</span></span></param>
        <param name="mode"><span data-ttu-id="6e9b5-912"><see cref="T:System.Data.XmlReadMode" /> 値のいずれか 1 つです。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-912">One of the <see cref="T:System.Data.XmlReadMode" /> values.</span></span></param>
        <summary><span data-ttu-id="6e9b5-913">指定した <see cref="T:System.Data.DataSet" /> と <see cref="T:System.Xml.XmlReader" /> を使用して、XML スキーマとデータを <see cref="T:System.Data.XmlReadMode" /> に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-913">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.Xml.XmlReader" /> and <see cref="T:System.Data.XmlReadMode" />.</span></span></summary>
        <returns><span data-ttu-id="6e9b5-914">データを読み込むために使用する <see langword="XmlReadMode" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-914">The <see langword="XmlReadMode" /> used to read the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-915"><xref:System.Data.DataSet.ReadXml%2A> メソッドを使用すると、データのみ、またはデータとスキーマの両方を XML ドキュメントから <xref:System.Data.DataSet> に読み取ることができます。一方、<xref:System.Data.DataSet.ReadXmlSchema%2A> メソッドでは、スキーマのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-915">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="6e9b5-916">データとスキーマの両方を読み取るには、`mode` パラメーターを含む `ReadXML` オーバーロードのいずれかを使用し、その値を `ReadSchema`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-916">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="6e9b5-917"><xref:System.Data.DataSet.WriteXml%2A> メソッドと <xref:System.Data.DataSet.WriteXmlSchema%2A> メソッドについても同様です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-917">Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="6e9b5-918">XML データ、または `DataSet`のスキーマとデータの両方を書き込むには、`WriteXml` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-918">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="6e9b5-919">スキーマだけを記述するには、`WriteXmlSchema` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-919">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-920">読み取りまたは書き込みを行う `DataRow` 内の列の型が <xref:System.Dynamic.IDynamicMetaObjectProvider> を実装していて、<xref:System.Xml.Serialization.IXmlSerializable>を実装していない場合、<xref:System.InvalidOperationException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-920">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="6e9b5-921">インラインスキーマが指定されている場合は、データを読み込む前に、インラインスキーマを使用して既存のリレーショナル構造が拡張されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-921">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="6e9b5-922">競合がある場合 (たとえば、同じテーブル内の同じ列が異なるデータ型で定義されている場合)、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-922">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="6e9b5-923">インラインスキーマが指定されていない場合、XML ドキュメントの構造に従って、必要に応じて、推論によってリレーショナル構造が拡張されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-923">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="6e9b5-924">すべてのデータを公開するために、推論によってスキーマを拡張できない場合は、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-924">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-925">`DataSet` は、("_") のような有効な XML 文字がシリアル化された XML でエスケープされている場合に、XML 要素とそれに対応する `DataColumn` または `DataTable` を関連付けません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-925">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="6e9b5-926">`DataSet` 自体は XML 要素名で無効な XML 文字をエスケープするだけであるため、同じを使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-926">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="6e9b5-927">XML 要素名に有効な文字がエスケープされている場合、要素は処理中に無視されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-927">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="6e9b5-928"><xref:System.Data.DataSet> の XML スキーマに `targetNamespace`が含まれている場合、データが読み取られない可能性があります。また、<xref:System.Data.DataSet.ReadXml%2A> を呼び出して、修飾された名前空間を持たない要素を含む XML を使用して <xref:System.Data.DataSet> を読み込むと、例外が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-928">If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="6e9b5-929">修飾されていない要素を読み取るには、次の例に示すように、XML スキーマで `elementFormDefault` を "qualified" に設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-929">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-930"><xref:System.Data.DataSet> のスキーマに同じ名前の要素が含まれていても、同じ名前空間に存在する型が異なる場合は、`XmlReadMode.ReadSchema`を指定することによって <xref:System.Data.DataSet.ReadXml%2A> で <xref:System.Data.DataSet> にスキーマを読み取ろうとすると、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-930">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="6e9b5-931">.NET Framework バージョン1.0 を使用している場合、この例外は発生しません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-931">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-932">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-932">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadXmlSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6e9b5-933">XML スキーマを <see cref="T:System.Data.DataSet" /> に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-933">Reads an XML schema into the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-934">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-934">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSchema(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadXmlSchema (stream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.ReadXmlSchema : System.IO.Stream -&gt; unit" Usage="dataSet.ReadXmlSchema stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="6e9b5-935">読み取り元の <see cref="T:System.IO.Stream" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-935">The <see cref="T:System.IO.Stream" /> from which to read.</span></span></param>
        <summary><span data-ttu-id="6e9b5-936">指定した <see cref="T:System.IO.Stream" /> から <see cref="T:System.Data.DataSet" /> に XML スキーマを読み込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-936">Reads the XML schema from the specified <see cref="T:System.IO.Stream" /> into the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-937"><xref:System.Data.DataSet>のスキーマを作成するには、<xref:System.Data.DataSet.ReadXmlSchema%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-937">Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="6e9b5-938">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-938">The schema includes table, relation, and constraint definitions.</span></span> <span data-ttu-id="6e9b5-939">スキーマを XML ドキュメントに書き込むには、<xref:System.Data.DataSet.WriteXmlSchema%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-939">To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="6e9b5-940">XML スキーマは、XSD 標準を使用して記述されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-940">The XML schema is written using the XSD standard.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-941">データの破損は、msdata: DataType と xs: type の型が一致しない場合に発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-941">Data corruption can occur if the msdata:DataType and the xs:type types do not match.</span></span> <span data-ttu-id="6e9b5-942">例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-942">No exception will be thrown.</span></span>  
  
 <span data-ttu-id="6e9b5-943"><xref:System.Data.DataSet.ReadXmlSchema%2A> メソッドは、通常、<xref:System.Data.DataSet>を埋めるために使用される <xref:System.Data.DataSet.ReadXml%2A> メソッドを呼び出す前に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-943">The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="6e9b5-944"><xref:System.IO.Stream> クラスから派生するクラスには、<xref:System.IO.BufferedStream>、<xref:System.IO.FileStream>、<xref:System.IO.MemoryStream>、および <xref:System.Net.Sockets.NetworkStream>があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-944">Classes that derive from the <xref:System.IO.Stream> class include <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>, and <xref:System.Net.Sockets.NetworkStream>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-945"><xref:System.Data.DataSet> のスキーマに同じ名前の要素が含まれていても、同じ名前空間に存在する型が異なる場合、<xref:System.Data.DataSet.ReadXmlSchema%2A>で <xref:System.Data.DataSet> にスキーマを読み取ろうとすると、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-945">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>.</span></span> <span data-ttu-id="6e9b5-946">.NET Framework バージョン1.0 を使用している場合、この例外は発生しません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-946">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-947">次の例では、<xref:System.IO.FileStream> オブジェクトを作成し、を使用して XML スキーマを読み取り、オブジェクトを使用して <xref:System.Data.DataSet.ReadXmlSchema%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-947">The following example creates a <xref:System.IO.FileStream> object to read an XML schema with, and invokes the <xref:System.Data.DataSet.ReadXmlSchema%2A> method with the object.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXmlSchema1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXmlSchema1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-948">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-948">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadXmlSchema (reader As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::IO::TextReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.ReadXmlSchema : System.IO.TextReader -&gt; unit" Usage="dataSet.ReadXmlSchema reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="6e9b5-949">読み取り元の <see cref="T:System.IO.TextReader" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-949">The <see cref="T:System.IO.TextReader" /> from which to read.</span></span></param>
        <summary><span data-ttu-id="6e9b5-950">指定した <see cref="T:System.IO.TextReader" /> から <see cref="T:System.Data.DataSet" /> に XML スキーマを読み込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-950">Reads the XML schema from the specified <see cref="T:System.IO.TextReader" /> into the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-951"><xref:System.Data.DataSet>のスキーマを作成するには、<xref:System.Data.DataSet.ReadXmlSchema%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-951">Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="6e9b5-952">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-952">The schema includes table, relation, and constraint definitions.</span></span> <span data-ttu-id="6e9b5-953">スキーマを XML ドキュメントに書き込むには、<xref:System.Data.DataSet.WriteXmlSchema%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-953">To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="6e9b5-954">XML スキーマは、XSD 標準を使用して記述されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-954">The XML schema is written using the XSD standard.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-955">データの破損は、msdata: DataType と xs: type の型が一致しない場合に発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-955">Data corruption can occur if the msdata:DataType and the xs:type types do not match.</span></span> <span data-ttu-id="6e9b5-956">例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-956">No exception will be thrown.</span></span>  
  
 <span data-ttu-id="6e9b5-957"><xref:System.Data.DataSet.ReadXmlSchema%2A> メソッドは、通常、<xref:System.Data.DataSet>を埋めるために使用される <xref:System.Data.DataSet.ReadXml%2A> メソッドを呼び出す前に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-957">The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="6e9b5-958"><xref:System.IO.TextReader> クラスを継承するクラスには、<xref:System.IO.StreamReader> クラスと <xref:System.IO.StringReader> クラスが含まれます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-958">Classes that inherit from the <xref:System.IO.TextReader> class include the <xref:System.IO.StreamReader> and <xref:System.IO.StringReader> classes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-959"><xref:System.Data.DataSet> のスキーマに同じ名前の要素が含まれていても、同じ名前空間に存在する型が異なる場合、<xref:System.Data.DataSet.ReadXmlSchema%2A>で <xref:System.Data.DataSet> にスキーマを読み取ろうとすると、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-959">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>.</span></span> <span data-ttu-id="6e9b5-960">.NET Framework バージョン1.0 を使用している場合、この例外は発生しません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-960">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-961">次の例では、<xref:System.IO.StreamReader> オブジェクトを作成し、を使用してスキーマを読み取り、オブジェクトを使用して <xref:System.Data.DataSet.ReadXmlSchema%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-961">The following example creates a <xref:System.IO.StreamReader> object to read a schema with, and invokes the <xref:System.Data.DataSet.ReadXmlSchema%2A> method with the object.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXmlSchema2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXmlSchema2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-962">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-962">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSchema(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadXmlSchema (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.ReadXmlSchema : string -&gt; unit" Usage="dataSet.ReadXmlSchema fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="6e9b5-963">読み込み元の (パスを含む) ファイル名。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-963">The file name (including the path) from which to read.</span></span></param>
        <summary><span data-ttu-id="6e9b5-964">指定したファイルから <see cref="T:System.Data.DataSet" /> に XML スキーマを読み込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-964">Reads the XML schema from the specified file into the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-965"><xref:System.Data.DataSet>のスキーマを作成するには、<xref:System.Data.DataSet.ReadXmlSchema%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-965">Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="6e9b5-966">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-966">The schema includes table, relation, and constraint definitions.</span></span> <span data-ttu-id="6e9b5-967">スキーマを XML ドキュメントに書き込むには、<xref:System.Data.DataSet.WriteXmlSchema%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-967">To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="6e9b5-968">XML スキーマは、XSD 標準を使用して記述されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-968">The XML schema is written using the XSD standard.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-969">データの破損は、msdata: DataType と xs: type の型が一致しない場合に発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-969">Data corruption can occur if the msdata:DataType and the xs:type types do not match.</span></span> <span data-ttu-id="6e9b5-970">例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-970">No exception will be thrown.</span></span>  
  
 <span data-ttu-id="6e9b5-971"><xref:System.Data.DataSet.ReadXmlSchema%2A> メソッドは、通常、<xref:System.Data.DataSet>を埋めるために使用される <xref:System.Data.DataSet.ReadXml%2A> メソッドを呼び出す前に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-971">The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-972"><xref:System.Data.DataSet> のスキーマに同じ名前の要素が含まれていても、同じ名前空間に存在する型が異なる場合は、<xref:System.Data.DataSet.ReadXmlSchema%2A>でスキーマを <xref:System.Data.DataSet> に読み取ろうとすると例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-972">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>.</span></span> <span data-ttu-id="6e9b5-973">.NET Framework バージョン1.0 を使用している場合、この例外は発生しません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-973">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataSet.ReadXmlSchema3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXmlSchema3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="6e9b5-974"><see cref="T:System.Security.Permissions.FileIOPermission" /> が <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /> に設定されていません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-974"><see cref="T:System.Security.Permissions.FileIOPermission" /> is not set to <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</span></span></exception>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-975">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-975">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadXmlSchema (reader As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.ReadXmlSchema : System.Xml.XmlReader -&gt; unit" Usage="dataSet.ReadXmlSchema reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="6e9b5-976">読み取り元の <see cref="T:System.Xml.XmlReader" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-976">The <see cref="T:System.Xml.XmlReader" /> from which to read.</span></span></param>
        <summary><span data-ttu-id="6e9b5-977">指定した <see cref="T:System.Xml.XmlReader" /> から <see cref="T:System.Data.DataSet" /> に XML スキーマを読み込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-977">Reads the XML schema from the specified <see cref="T:System.Xml.XmlReader" /> into the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-978"><xref:System.Data.DataSet>のスキーマを作成するには、<xref:System.Data.DataSet.ReadXmlSchema%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-978">Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="6e9b5-979">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-979">The schema includes table, relation, and constraint definitions.</span></span>  
  
 <span data-ttu-id="6e9b5-980">XML スキーマは、XSD 標準を使用して記述されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-980">The XML schema is written using the XSD standard.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-981">データの破損は、msdata: DataType と xs: type の型が一致しない場合に発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-981">Data corruption can occur if the msdata:DataType and the xs:type types do not match.</span></span> <span data-ttu-id="6e9b5-982">例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-982">No exception will be thrown.</span></span>  
  
 <span data-ttu-id="6e9b5-983"><xref:System.Data.DataSet.ReadXmlSchema%2A> メソッドは、通常、<xref:System.Data.DataSet>を埋めるために使用される <xref:System.Data.DataSet.ReadXml%2A> メソッドを呼び出す前に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-983">The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="6e9b5-984"><xref:System.Xml.XmlReader?displayProperty=nameWithType> クラスは abstract です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-984">The <xref:System.Xml.XmlReader?displayProperty=nameWithType> class is abstract.</span></span> <span data-ttu-id="6e9b5-985">`XmlReader` から継承するクラスは、<xref:System.Xml.XmlTextReader?displayProperty=nameWithType> クラスです。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-985">A class that inherits from the `XmlReader` is the <xref:System.Xml.XmlTextReader?displayProperty=nameWithType> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-986"><xref:System.Data.DataSet> のスキーマに同じ名前の要素が含まれていても、同じ名前空間に存在する型が異なる場合、<xref:System.Data.DataSet.ReadXmlSchema%2A>で <xref:System.Data.DataSet> にスキーマを読み取ろうとすると、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-986">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>.</span></span> <span data-ttu-id="6e9b5-987">.NET Framework バージョン1.0 を使用している場合、この例外は発生しません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-987">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-988">次の例では、新しい <xref:System.Data.DataSet> と <xref:System.IO.FileStream?displayProperty=nameWithType> オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-988">The following example creates a new <xref:System.Data.DataSet> and <xref:System.IO.FileStream?displayProperty=nameWithType> object.</span></span> <span data-ttu-id="6e9b5-989">ファイルパスとファイル名を使用して作成された <xref:System.IO.FileStream> オブジェクトは、<xref:System.Data.DataSet.ReadXmlSchema%2A> メソッドに引数として渡される <xref:System.Xml.XmlTextReader?displayProperty=nameWithType> を作成するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-989">The <xref:System.IO.FileStream> object, created with a file path and file name, is used to create an <xref:System.Xml.XmlTextReader?displayProperty=nameWithType> that is passed as an argument to the <xref:System.Data.DataSet.ReadXmlSchema%2A> method.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXmlSchema Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXmlSchema Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-990">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-990">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSerializable">
      <MemberSignature Language="C#" Value="protected virtual void ReadXmlSerializable (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ReadXmlSerializable(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSerializable(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ReadXmlSerializable (reader As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ReadXmlSerializable(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="abstract member ReadXmlSerializable : System.Xml.XmlReader -&gt; unit&#xA;override this.ReadXmlSerializable : System.Xml.XmlReader -&gt; unit" Usage="dataSet.ReadXmlSerializable reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="6e9b5-991">指定された XML リーダー。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-991">The specified XML reader.</span></span></param>
        <summary><span data-ttu-id="6e9b5-992">属性を無視して、空のデータセットを返します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-992">Ignores attributes and returns an empty DataSet.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RejectChanges">
      <MemberSignature Language="C#" Value="public virtual void RejectChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RejectChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.RejectChanges" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RejectChanges ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RejectChanges();" />
      <MemberSignature Language="F#" Value="abstract member RejectChanges : unit -&gt; unit&#xA;override this.RejectChanges : unit -&gt; unit" Usage="dataSet.RejectChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6e9b5-993">この <see cref="T:System.Data.DataSet" /> を作成するか、前回 <see cref="M:System.Data.DataSet.AcceptChanges" /> を呼び出した以降にこのデータセットに対して行われたすべての変更をロールバックします。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-993">Rolls back all the changes made to the <see cref="T:System.Data.DataSet" /> since it was created, or since the last time <see cref="M:System.Data.DataSet.AcceptChanges" /> was called.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-994"><xref:System.Data.DataSet.RejectChanges%2A?displayProperty=nameWithType> を呼び出して、<xref:System.Data.DataSet>に含まれるすべての <xref:System.Data.DataTable> オブジェクトで <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-994">Invoke the <xref:System.Data.DataSet.RejectChanges%2A?displayProperty=nameWithType> to call the <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType> method on all <xref:System.Data.DataTable> objects contained by the <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="6e9b5-995"><xref:System.Data.DataSet> に含まれる <xref:System.Data.DataRow> オブジェクトは、<xref:System.Data.DataRow.BeginEdit%2A?displayProperty=nameWithType> メソッドを呼び出すことによって、各オブジェクトを編集モードに設定できます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-995"><xref:System.Data.DataRow> objects contained by the <xref:System.Data.DataSet> can each be set into edit mode by invoking the <xref:System.Data.DataRow.BeginEdit%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="6e9b5-996"><xref:System.Data.DataRow.EndEdit%2A?displayProperty=nameWithType> メソッドを呼び出した後、<xref:System.Data.DataRow> オブジェクトが属する <xref:System.Data.DataTable> の <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType> を呼び出すことによって、変更を拒否できます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-996">After invoking the <xref:System.Data.DataRow.EndEdit%2A?displayProperty=nameWithType> method, changes can be rejected by calling the <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType> on the <xref:System.Data.DataTable> to which the <xref:System.Data.DataRow> objects belong.</span></span>  
  
 <span data-ttu-id="6e9b5-997"><xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType> メソッドが呼び出されると、編集モードのすべての行が編集をキャンセルします。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-997">When the <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType> method is called, any rows still in edit-mode cancel their edits.</span></span> <span data-ttu-id="6e9b5-998">新しい行が削除されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-998">New rows are removed.</span></span> <span data-ttu-id="6e9b5-999">変更および削除された行は元の状態 (`DataRowState.Unchanged`) に戻されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-999">Modified and deleted rows return back to their original state (`DataRowState.Unchanged`).</span></span>  
  
 <span data-ttu-id="6e9b5-1000">AcceptChanges と RejectChanges は、<xref:System.Data.DataRow> 関連の変更 (つまり、`Add`、`Remove`、`Delete`、および `Modify`) にのみ適用されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1000">AcceptChanges and RejectChanges only apply to <xref:System.Data.DataRow> related changes (that is, `Add`, `Remove`, `Delete`, and `Modify`).</span></span> <span data-ttu-id="6e9b5-1001">スキーマまたは構造的な変更には適用されません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1001">They are not applicable to schema or structural changes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-1002">次の例は、<xref:System.Data.DataSet> クラスから派生したクラスを示しています。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1002">The following example shows a class derived from the <xref:System.Data.DataSet> class.</span></span> <span data-ttu-id="6e9b5-1003"><xref:System.Data.DataSet.RejectChanges%2A> イベントは、関数内から呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1003">The <xref:System.Data.DataSet.RejectChanges%2A> event is invoked from within a function.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.RejectChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.RejectChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.RejectChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.RejectChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-1004">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1004">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Relations">
      <MemberSignature Language="C#" Value="public System.Data.DataRelationCollection Relations { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataRelationCollection Relations" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Relations" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Relations As DataRelationCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataRelationCollection ^ Relations { System::Data::DataRelationCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Relations : System.Data.DataRelationCollection" Usage="System.Data.DataSet.Relations" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetRelationsDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataRelationCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6e9b5-1005">テーブルをリンクし、親テーブルから子テーブルへ移動できるようにするリレーションシップのコレクションが取得されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1005">Gets the collection of relations that link tables and allow navigation from parent tables to child tables.</span></span></summary>
        <value><span data-ttu-id="6e9b5-1006"><see cref="T:System.Data.DataRelationCollection" /> オブジェクトのコレクションを格納している <see cref="T:System.Data.DataRelation" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1006">A <see cref="T:System.Data.DataRelationCollection" /> that contains a collection of <see cref="T:System.Data.DataRelation" /> objects.</span></span> <span data-ttu-id="6e9b5-1007"><see cref="T:System.Data.DataRelation" /> オブジェクトが存在しない場合、空のコレクションが返されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1007">An empty collection is returned if no <see cref="T:System.Data.DataRelation" /> objects exist.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6e9b5-1008">次の例では、<xref:System.Data.DataSet.Relations%2A> プロパティを使用して、すべての子テーブルの列名を出力します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1008">The following example prints the column name of all child tables through the <xref:System.Data.DataSet.Relations%2A> property.</span></span>  
  
 [!code-vb[Classic WebData DataSet.Relations Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Relations Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-1009">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1009">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RemotingFormat">
      <MemberSignature Language="C#" Value="public System.Data.SerializationFormat RemotingFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.SerializationFormat RemotingFormat" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.RemotingFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property RemotingFormat As SerializationFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SerializationFormat RemotingFormat { System::Data::SerializationFormat get(); void set(System::Data::SerializationFormat value); };" />
      <MemberSignature Language="F#" Value="member this.RemotingFormat : System.Data.SerializationFormat with get, set" Usage="System.Data.DataSet.RemotingFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SerializationFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6e9b5-1010">リモート処理中に使用される <see cref="T:System.Data.SerializationFormat" /> の <see cref="T:System.Data.DataSet" /> を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1010">Gets or sets a <see cref="T:System.Data.SerializationFormat" /> for the <see cref="T:System.Data.DataSet" /> used during remoting.</span></span></summary>
        <value><span data-ttu-id="6e9b5-1011"><see cref="T:System.Data.SerializationFormat" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1011">A <see cref="T:System.Data.SerializationFormat" /> object.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-1012">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1012">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="dataSet.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6e9b5-1013">すべてのテーブルをクリアし、<see cref="T:System.Data.DataSet" />からすべての関係、外部の制約、テーブルを削除します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1013">Clears all tables and removes all relations, foreign constraints, and tables from the <see cref="T:System.Data.DataSet" />.</span></span> <span data-ttu-id="6e9b5-1014">サブクラスが <see cref="M:System.Data.DataSet.Reset" /> をオーバーライドして <see cref="T:System.Data.DataSet" /> を元の状態に戻す必要があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1014">Subclasses should override <see cref="M:System.Data.DataSet.Reset" /> to restore a <see cref="T:System.Data.DataSet" /> to its original state.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-1015">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1015">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SchemaSerializationMode">
      <MemberSignature Language="C#" Value="public virtual System.Data.SchemaSerializationMode SchemaSerializationMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.SchemaSerializationMode SchemaSerializationMode" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.SchemaSerializationMode" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SchemaSerializationMode As SchemaSerializationMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::SchemaSerializationMode SchemaSerializationMode { System::Data::SchemaSerializationMode get(); void set(System::Data::SchemaSerializationMode value); };" />
      <MemberSignature Language="F#" Value="member this.SchemaSerializationMode : System.Data.SchemaSerializationMode with get, set" Usage="System.Data.DataSet.SchemaSerializationMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SchemaSerializationMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6e9b5-1016"><see cref="T:System.Data.SchemaSerializationMode" /> の <see cref="T:System.Data.DataSet" /> を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1016">Gets or sets a <see cref="T:System.Data.SchemaSerializationMode" /> for a <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <value><span data-ttu-id="6e9b5-1017"><see cref="T:System.Data.SchemaSerializationMode" /> の <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1017">A <see cref="T:System.Data.SchemaSerializationMode" /> for a <see cref="T:System.Data.DataSet" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-1018"><xref:System.Data.DataSet> は、Web サービスとリモート処理のシナリオで、既定でスキーマとインスタンスデータをシリアル化します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1018">A <xref:System.Data.DataSet> serializes its schema and instance data by default in Web services and remoting scenarios.</span></span> <span data-ttu-id="6e9b5-1019">型指定された `DataSet` の <xref:System.Data.DataSet.SchemaSerializationMode%2A> プロパティを <xref:System.Data.SchemaSerializationMode.ExcludeSchema> に設定すると、スキーマ情報がシリアル化ペイロードから除外されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1019">Setting the <xref:System.Data.DataSet.SchemaSerializationMode%2A> property of a typed `DataSet` to <xref:System.Data.SchemaSerializationMode.ExcludeSchema> causes schema information to be excluded from the serialization payload.</span></span>  
  
 <span data-ttu-id="6e9b5-1020"><xref:System.Data.SchemaSerializationMode.ExcludeSchema> は、型指定された `DataSet`に対してのみサポートされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1020"><xref:System.Data.SchemaSerializationMode.ExcludeSchema> is supported only for a typed `DataSet`.</span></span> <span data-ttu-id="6e9b5-1021">型指定されていない `DataSet` は、このプロパティを <xref:System.Data.SchemaSerializationMode.IncludeSchema>にのみ設定できます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1021">For an un-typed `DataSet` this property can only be set to <xref:System.Data.SchemaSerializationMode.IncludeSchema>.</span></span>  
  
 <span data-ttu-id="6e9b5-1022"><xref:System.Data.SchemaSerializationMode.ExcludeSchema> は、基になる型指定された `DataTables`、`DataRelations`、および `Constraints` のスキーマ情報が変更されていない場合にのみ使用してください。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1022"><xref:System.Data.SchemaSerializationMode.ExcludeSchema> should only be used in cases where the schema information of the underlying typed `DataTables`, `DataRelations` and `Constraints` has not been modified.</span></span> <span data-ttu-id="6e9b5-1023">変更が発生した場合は、完全なスキーマ情報を <xref:System.Data.SchemaSerializationMode.IncludeSchema>でシリアル化する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1023">If modifications have occurred, complete schema information should be serialized with <xref:System.Data.SchemaSerializationMode.IncludeSchema>.</span></span>  
  
 <span data-ttu-id="6e9b5-1024"><xref:System.Data.SchemaSerializationMode.ExcludeSchema> は、.NET Framework 以降のバージョン2.0 でサポートされています。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1024"><xref:System.Data.SchemaSerializationMode.ExcludeSchema> is supported in version 2.0 of the .NET Framework or later.</span></span>  
  
 <span data-ttu-id="6e9b5-1025"><xref:System.Data.SchemaSerializationMode.ExcludeSchema> が設定されている場合、<xref:System.Data.DataSet> に存在する最上位レベルのランタイムプロパティのみがシリアル化されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1025">When <xref:System.Data.SchemaSerializationMode.ExcludeSchema> is set, only the top level runtime properties present on the <xref:System.Data.DataSet> are serialized.</span></span> <span data-ttu-id="6e9b5-1026">また、これらは既定値とは異なる場合にのみシリアル化されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1026">In addition, they are serialized only if they happen to be different from the default values.</span></span> <span data-ttu-id="6e9b5-1027">`Tables`、`Relations`、`Constraints` はいずれもシリアル化されません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1027">None of the `Tables`, `Relations` or `Constraints` are serialized.</span></span> <span data-ttu-id="6e9b5-1028">シリアル化されたランタイムプロパティには、<xref:System.Data.DataSet.DataSetName%2A>、<xref:System.Data.DataSet.Namespace%2A>、<xref:System.Data.DataSet.Prefix%2A>、<xref:System.Data.DataSet.Locale%2A>、<xref:System.Data.DataSet.EnforceConstraints%2A>、および <xref:System.Data.DataSet.CaseSensitive%2A>があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1028">The serialized runtime properties include <xref:System.Data.DataSet.DataSetName%2A>, <xref:System.Data.DataSet.Namespace%2A>, <xref:System.Data.DataSet.Prefix%2A>, <xref:System.Data.DataSet.Locale%2A>, <xref:System.Data.DataSet.EnforceConstraints%2A>, and <xref:System.Data.DataSet.CaseSensitive%2A>.</span></span> <span data-ttu-id="6e9b5-1029">これらのプロパティは、全体的なランタイムデータの整合性を維持するためにシリアル化されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1029">These properties are serialized to make sure that overall runtime data integrity is preserved.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-1030">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1030">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeRelations">
      <MemberSignature Language="C#" Value="protected virtual bool ShouldSerializeRelations ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShouldSerializeRelations() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ShouldSerializeRelations" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ShouldSerializeRelations () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ShouldSerializeRelations();" />
      <MemberSignature Language="F#" Value="abstract member ShouldSerializeRelations : unit -&gt; bool&#xA;override this.ShouldSerializeRelations : unit -&gt; bool" Usage="dataSet.ShouldSerializeRelations " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6e9b5-1031"><see cref="P:System.Data.DataSet.Relations" /> プロパティを永続化する必要があるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1031">Gets a value indicating whether <see cref="P:System.Data.DataSet.Relations" /> property should be persisted.</span></span></summary>
        <returns><span data-ttu-id="6e9b5-1032">プロパティの値が既定値から変更されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1032"><see langword="true" /> if the property value has been changed from its default; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-1033"><xref:System.Data.DataSet>のデザイナーを作成するか、<xref:System.Data.DataSet>を組み込んだ独自のコントロールを作成する場合は、通常、このメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1033">You typically use this method if you are either creating a designer for the <xref:System.Data.DataSet>, or creating your own control incorporating the <xref:System.Data.DataSet>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-1034">次の例は、<xref:System.Data.DataSet> クラスから派生したクラスを示しています。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1034">The following examples show a class derived from the <xref:System.Data.DataSet> class.</span></span> <span data-ttu-id="6e9b5-1035"><xref:System.Data.DataSet.Reset%2A> メソッドと <xref:System.Data.DataSet.ShouldSerializeRelations%2A> メソッドは、派生クラスの関数内から呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1035">The <xref:System.Data.DataSet.Reset%2A> and <xref:System.Data.DataSet.ShouldSerializeRelations%2A> methods are invoked from within functions in the derived class.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ShouldSerializeRelations Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ShouldSerializeRelations Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ShouldSerializeRelations Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ShouldSerializeRelations Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-1036">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1036">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeTables">
      <MemberSignature Language="C#" Value="protected virtual bool ShouldSerializeTables ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShouldSerializeTables() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ShouldSerializeTables" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ShouldSerializeTables () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ShouldSerializeTables();" />
      <MemberSignature Language="F#" Value="abstract member ShouldSerializeTables : unit -&gt; bool&#xA;override this.ShouldSerializeTables : unit -&gt; bool" Usage="dataSet.ShouldSerializeTables " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6e9b5-1037"><see cref="P:System.Data.DataSet.Tables" /> プロパティを永続化する必要があるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1037">Gets a value indicating whether <see cref="P:System.Data.DataSet.Tables" /> property should be persisted.</span></span></summary>
        <returns><span data-ttu-id="6e9b5-1038">プロパティの値が既定値から変更されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1038"><see langword="true" /> if the property value has been changed from its default; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-1039">このメソッドは、通常、<xref:System.Data.DataSet>のデザイナーを作成する場合、または <xref:System.Data.DataSet>を組み込んだ独自のコントロールを作成する場合にのみ使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1039">You typically use this method only if you are either creating a designer for the <xref:System.Data.DataSet>, or creating your own control incorporating the <xref:System.Data.DataSet>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-1040">次の例は、<xref:System.Data.DataSet> クラスから派生したクラスを示しています。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1040">The following example shows a class derived from the <xref:System.Data.DataSet> class.</span></span> <span data-ttu-id="6e9b5-1041"><xref:System.Data.DataSet.ShouldSerializeTables%2A> メソッドは、派生クラスの関数内から呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1041">The <xref:System.Data.DataSet.ShouldSerializeTables%2A> method is called from within functions in the derived class.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ShouldSerializeTables Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ShouldSerializeTables Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ShouldSerializeTables Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ShouldSerializeTables Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-1042">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1042">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Site" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Site As ISite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::ISite ^ Site { System::ComponentModel::ISite ^ get(); void set(System::ComponentModel::ISite ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Site : System.ComponentModel.ISite with get, set" Usage="System.Data.DataSet.Site" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6e9b5-1043"><see cref="T:System.ComponentModel.ISite" /> の <see cref="T:System.Data.DataSet" /> を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1043">Gets or sets an <see cref="T:System.ComponentModel.ISite" /> for the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <value><span data-ttu-id="6e9b5-1044"><see cref="T:System.ComponentModel.ISite" /> の <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1044">An <see cref="T:System.ComponentModel.ISite" /> for the <see cref="T:System.Data.DataSet" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-1045">サイトは、<xref:System.ComponentModel.Component> を <xref:System.ComponentModel.Container> にバインドし、それらの間の通信を可能にします。また、コンテナーがそのコンポーネントを管理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1045">Sites bind a <xref:System.ComponentModel.Component> to a <xref:System.ComponentModel.Container> and enable communication between them, as well as provide a way for the container to manage its components.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-1046">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1046">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="C++ CLI" Value="property bool System::ComponentModel::IListSource::ContainsListCollection { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.System.ComponentModel.IListSource.ContainsListCollection : bool" Usage="System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.IListSource.ContainsListCollection</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6e9b5-1047">このメンバーの説明については、<see cref="P:System.ComponentModel.IListSource.ContainsListCollection" /> のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1047">For a description of this member, see <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />.</span></span></summary>
        <value><span data-ttu-id="6e9b5-1048">このメンバーの説明については、<see cref="P:System.ComponentModel.IListSource.ContainsListCollection" /> のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1048">For a description of this member, see <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-1049">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1049">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="6e9b5-1050">これは、<xref:System.Data.DataSet> のインスタンスが <xref:System.ComponentModel.IListSource> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1050">It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.ComponentModel.IListSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IList ^ System.ComponentModel.IListSource.GetList() = System::ComponentModel::IListSource::GetList;" />
      <MemberSignature Language="F#" Value="abstract member System.ComponentModel.IListSource.GetList : unit -&gt; System.Collections.IList&#xA;override this.System.ComponentModel.IListSource.GetList : unit -&gt; System.Collections.IList" Usage="dataSet.System.ComponentModel.IListSource.GetList " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.IListSource.GetList</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6e9b5-1051">このメンバーの説明については、<see cref="M:System.ComponentModel.IListSource.GetList" /> のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1051">For a description of this member, see <see cref="M:System.ComponentModel.IListSource.GetList" />.</span></span></summary>
        <returns><span data-ttu-id="6e9b5-1052">このメンバーの説明については、<see cref="M:System.ComponentModel.IListSource.GetList" /> のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1052">For a description of this member, see <see cref="M:System.ComponentModel.IListSource.GetList" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-1053">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1053">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="6e9b5-1054">これは、<xref:System.Data.DataSet> のインスタンスが <xref:System.ComponentModel.IListSource> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1054">It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.ComponentModel.IListSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberSignature Language="F#" Value="abstract member System.Runtime.Serialization.ISerializable.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.System.Runtime.Serialization.ISerializable.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="dataSet.System.Runtime.Serialization.ISerializable.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="6e9b5-1055">データの読み込み先となる <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1055">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</span></span></param>
        <param name="context"><span data-ttu-id="6e9b5-1056">このシリアル化のシリアル化先です (<see cref="T:System.Runtime.Serialization.StreamingContext" /> を参照)。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1056">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</span></span></param>
        <summary><span data-ttu-id="6e9b5-1057">シリアル化情報オブジェクトを、<see cref="T:System.Data.DataSet" /> のシリアル化に必要なデータで事前設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1057">Populates a serialization information object with the data needed to serialize the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.GetSchema">
      <MemberSignature Language="C#" Value="System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Xml.Schema.XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema" />
      <MemberSignature Language="VB.NET" Value="Function GetSchema () As XmlSchema Implements IXmlSerializable.GetSchema" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Xml::Schema::XmlSchema ^ System.Xml.Serialization.IXmlSerializable.GetSchema() = System::Xml::Serialization::IXmlSerializable::GetSchema;" />
      <MemberSignature Language="F#" Value="abstract member System.Xml.Serialization.IXmlSerializable.GetSchema : unit -&gt; System.Xml.Schema.XmlSchema&#xA;override this.System.Xml.Serialization.IXmlSerializable.GetSchema : unit -&gt; System.Xml.Schema.XmlSchema" Usage="dataSet.System.Xml.Serialization.IXmlSerializable.GetSchema " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.GetSchema</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6e9b5-1058">このメンバーの説明については、<see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" /> のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1058">For a description of this member, see <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />.</span></span></summary>
        <returns><span data-ttu-id="6e9b5-1059">このメンバーの説明については、<see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" /> のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1059">For a description of this member, see <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-1060">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1060">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="6e9b5-1061">これは、<xref:System.Data.DataSet> のインスタンスが <xref:System.Xml.Serialization.IXmlSerializable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1061">It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.ReadXml">
      <MemberSignature Language="C#" Value="void IXmlSerializable.ReadXml (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Xml.Serialization.IXmlSerializable.ReadXml(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Sub ReadXml (reader As XmlReader) Implements IXmlSerializable.ReadXml" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Xml.Serialization.IXmlSerializable.ReadXml(System::Xml::XmlReader ^ reader) = System::Xml::Serialization::IXmlSerializable::ReadXml;" />
      <MemberSignature Language="F#" Value="abstract member System.Xml.Serialization.IXmlSerializable.ReadXml : System.Xml.XmlReader -&gt; unit&#xA;override this.System.Xml.Serialization.IXmlSerializable.ReadXml : System.Xml.XmlReader -&gt; unit" Usage="dataSet.System.Xml.Serialization.IXmlSerializable.ReadXml reader" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="6e9b5-1062"><see cref="T:System.Xml.XmlReader" /> です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1062">A <see cref="T:System.Xml.XmlReader" />.</span></span></param>
        <summary><span data-ttu-id="6e9b5-1063">このメンバーの説明については、<see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1063">For a description of this member, see <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-1064">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1064">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="6e9b5-1065">これは、<xref:System.Data.DataSet> のインスタンスが <xref:System.Xml.Serialization.IXmlSerializable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1065">It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.WriteXml">
      <MemberSignature Language="C#" Value="void IXmlSerializable.WriteXml (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Xml.Serialization.IXmlSerializable.WriteXml(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Sub WriteXml (writer As XmlWriter) Implements IXmlSerializable.WriteXml" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Xml.Serialization.IXmlSerializable.WriteXml(System::Xml::XmlWriter ^ writer) = System::Xml::Serialization::IXmlSerializable::WriteXml;" />
      <MemberSignature Language="F#" Value="abstract member System.Xml.Serialization.IXmlSerializable.WriteXml : System.Xml.XmlWriter -&gt; unit&#xA;override this.System.Xml.Serialization.IXmlSerializable.WriteXml : System.Xml.XmlWriter -&gt; unit" Usage="dataSet.System.Xml.Serialization.IXmlSerializable.WriteXml writer" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="6e9b5-1066"><see cref="T:System.Xml.XmlWriter" /> です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1066">A <see cref="T:System.Xml.XmlWriter" />.</span></span></param>
        <summary><span data-ttu-id="6e9b5-1067">このメンバーの説明については、<see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1067">For a description of this member, see <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-1068">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1068">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="6e9b5-1069">これは、<xref:System.Data.DataSet> のインスタンスが <xref:System.Xml.Serialization.IXmlSerializable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1069">It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tables">
      <MemberSignature Language="C#" Value="public System.Data.DataTableCollection Tables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataTableCollection Tables" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Tables" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Tables As DataTableCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataTableCollection ^ Tables { System::Data::DataTableCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Tables : System.Data.DataTableCollection" Usage="System.Data.DataSet.Tables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetTablesDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataTableCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6e9b5-1070"><see cref="T:System.Data.DataSet" /> に格納されているテーブルのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1070">Gets the collection of tables contained in the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <value><span data-ttu-id="6e9b5-1071">この <see cref="T:System.Data.DataTableCollection" /> に格納されている <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1071">The <see cref="T:System.Data.DataTableCollection" /> contained by this <see cref="T:System.Data.DataSet" />.</span></span> <span data-ttu-id="6e9b5-1072"><see cref="T:System.Data.DataTable" /> オブジェクトが存在しない場合、空のコレクションが返されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1072">An empty collection is returned if no <see cref="T:System.Data.DataTable" /> objects exist.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-1073">コレクションにテーブルを追加するには、<xref:System.Data.DataTableCollection>の <xref:System.Data.DataTableCollection.Add%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1073">To add tables to the collection, use <xref:System.Data.DataTableCollection.Add%2A> method of the <xref:System.Data.DataTableCollection>.</span></span> <span data-ttu-id="6e9b5-1074">テーブルを削除するには、<xref:System.Data.DataTableCollection.Remove%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1074">To remove tables, use the <xref:System.Data.DataTableCollection.Remove%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-1075">次の例では、<xref:System.Data.DataSet> オブジェクトの <xref:System.Data.DataTableCollection>を返し、各テーブルの列と行を出力します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1075">The following example returns the <xref:System.Data.DataSet> object's <xref:System.Data.DataTableCollection>, and prints the columns and rows in each table.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Tables Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Tables Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Tables Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Tables Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-1076">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1076">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteXml">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6e9b5-1077"><see cref="T:System.Data.DataSet" /> から XML データを書き込みます。オプションでスキーマも書き込むことができます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1077">Writes XML data, and optionally the schema, from the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-1078">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1078">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (stream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.IO.Stream -&gt; unit" Usage="dataSet.WriteXml stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="6e9b5-1079">ファイルに書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1079">A <see cref="T:System.IO.Stream" /> object used to write to a file.</span></span></param>
        <summary><span data-ttu-id="6e9b5-1080">指定した <see cref="T:System.Data.DataSet" /> を使用して <see cref="T:System.IO.Stream" /> の現在のデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1080">Writes the current data for the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.Stream" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-1081">`WriteXml` メソッドを使用すると、データのみ、またはデータとスキーマの両方を <xref:System.Data.DataSet> から XML ドキュメントに書き込むことができます。一方、<xref:System.Data.DataSet.WriteXmlSchema%2A> メソッドでは、スキーマのみが書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1081">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="6e9b5-1082">データとスキーマの両方を書き込むには、`mode` パラメーターを含むオーバーロードのいずれかを使用し、その値を `WriteSchema`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1082">To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="6e9b5-1083"><xref:System.Data.DataSet.ReadXml%2A> メソッドと <xref:System.Data.DataSet.ReadXmlSchema%2A> メソッドについても同様です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1083">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="6e9b5-1084">XML データ、またはスキーマとデータの両方を `DataSet`に読み取るには、`ReadXml` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1084">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="6e9b5-1085">スキーマのみを読み取るには、`ReadXmlSchema` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1085">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-1086">読み取りまたは書き込みを行う `DataRow` 内の列の型が <xref:System.Dynamic.IDynamicMetaObjectProvider> を実装していて、<xref:System.Xml.Serialization.IXmlSerializable>を実装していない場合、<xref:System.InvalidOperationException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1086">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-1087">次の例では、<xref:System.IO.FileStream?displayProperty=nameWithType> オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1087">The following example creates a <xref:System.IO.FileStream?displayProperty=nameWithType> object.</span></span> <span data-ttu-id="6e9b5-1088">次に、オブジェクトを <xref:System.Data.DataSet.WriteXml%2A> メソッドと共に使用して、XML ドキュメントを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1088">The object is then used with the <xref:System.Data.DataSet.WriteXml%2A> method to write an XML document.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.WriteXml Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXml Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-1089">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1089">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.IO.TextWriter -&gt; unit" Usage="dataSet.WriteXml writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="6e9b5-1090">書き込む対象の <see cref="T:System.IO.TextWriter" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1090">The <see cref="T:System.IO.TextWriter" /> object with which to write.</span></span></param>
        <summary><span data-ttu-id="6e9b5-1091">指定した <see cref="T:System.Data.DataSet" /> を使用して <see cref="T:System.IO.TextWriter" /> の現在のデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1091">Writes the current data for the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.TextWriter" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-1092">`WriteXml` メソッドを使用すると、データのみ、またはデータとスキーマの両方を <xref:System.Data.DataSet> から XML ドキュメントに書き込むことができます。一方、<xref:System.Data.DataSet.WriteXmlSchema%2A> メソッドでは、スキーマのみが書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1092">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="6e9b5-1093">データとスキーマの両方を書き込むには、`mode` パラメーターを含むオーバーロードのいずれかを使用し、その値を `WriteSchema`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1093">To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="6e9b5-1094"><xref:System.Data.DataSet.ReadXml%2A> メソッドと <xref:System.Data.DataSet.ReadXmlSchema%2A> メソッドについても同様です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1094">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="6e9b5-1095">XML データ、またはスキーマとデータの両方を `DataSet`に読み取るには、`ReadXml` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1095">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="6e9b5-1096">スキーマのみを読み取るには、`ReadXmlSchema` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1096">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-1097">読み取りまたは書き込みを行う `DataRow` 内の列の型が <xref:System.Dynamic.IDynamicMetaObjectProvider> を実装していて、<xref:System.Xml.Serialization.IXmlSerializable>を実装していない場合、<xref:System.InvalidOperationException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1097">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-1098">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1098">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : string -&gt; unit" Usage="dataSet.WriteXml fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="6e9b5-1099">書き込み先の (パスを含む) ファイル名。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1099">The file name (including the path) to which to write.</span></span></param>
        <summary><span data-ttu-id="6e9b5-1100">指定したファイルに、<see cref="T:System.Data.DataSet" /> の現在のデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1100">Writes the current data for the <see cref="T:System.Data.DataSet" /> to the specified file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-1101">`WriteXml` メソッドを使用すると、データのみ、またはデータとスキーマの両方を <xref:System.Data.DataSet> から XML ドキュメントに書き込むことができます。一方、<xref:System.Data.DataSet.WriteXmlSchema%2A> メソッドでは、スキーマのみが書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1101">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="6e9b5-1102">データとスキーマの両方を書き込むには、`mode` パラメーターを含むオーバーロードのいずれかを使用し、その値を `WriteSchema`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1102">To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="6e9b5-1103"><xref:System.Data.DataSet.ReadXml%2A> メソッドと <xref:System.Data.DataSet.ReadXmlSchema%2A> メソッドについても同様です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1103">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="6e9b5-1104">XML データ、またはスキーマとデータの両方を `DataSet`に読み取るには、`ReadXml` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1104">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="6e9b5-1105">スキーマのみを読み取るには、`ReadXmlSchema` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1105">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-1106">読み取りまたは書き込みを行う `DataRow` 内の列の型が <xref:System.Dynamic.IDynamicMetaObjectProvider> を実装していて、<xref:System.Xml.Serialization.IXmlSerializable>を実装していない場合、<xref:System.InvalidOperationException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1106">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="6e9b5-1107"><see cref="T:System.Security.Permissions.FileIOPermission" /> が <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /> に設定されていません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1107"><see cref="T:System.Security.Permissions.FileIOPermission" /> is not set to <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />.</span></span></exception>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-1108">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1108">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::Xml::XmlWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.Xml.XmlWriter -&gt; unit" Usage="dataSet.WriteXml writer" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="6e9b5-1109">書き込み先の <see cref="T:System.Xml.XmlWriter" /> です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1109">The <see cref="T:System.Xml.XmlWriter" /> with which to write.</span></span></param>
        <summary><span data-ttu-id="6e9b5-1110">指定した <see cref="T:System.Data.DataSet" /> に、<see cref="T:System.Xml.XmlWriter" /> の現在のデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1110">Writes the current data for the <see cref="T:System.Data.DataSet" /> to the specified <see cref="T:System.Xml.XmlWriter" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-1111">`WriteXml` メソッドを使用すると、データのみ、またはデータとスキーマの両方を <xref:System.Data.DataSet> から XML ドキュメントに書き込むことができます。一方、<xref:System.Data.DataSet.WriteXmlSchema%2A> メソッドでは、スキーマのみが書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1111">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="6e9b5-1112">データとスキーマの両方を書き込むには、`mode` パラメーターを含むオーバーロードのいずれかを使用し、その値を `WriteSchema`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1112">To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="6e9b5-1113"><xref:System.Data.DataSet.ReadXml%2A> メソッドと <xref:System.Data.DataSet.ReadXmlSchema%2A> メソッドについても同様です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1113">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="6e9b5-1114">XML データ、またはスキーマとデータの両方を `DataSet`に読み取るには、`ReadXml` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1114">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="6e9b5-1115">スキーマのみを読み取るには、`ReadXmlSchema` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1115">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-1116">読み取りまたは書き込みを行う `DataRow` 内の列の型が <xref:System.Dynamic.IDynamicMetaObjectProvider> を実装していて、<xref:System.Xml.Serialization.IXmlSerializable>を実装していない場合、<xref:System.InvalidOperationException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1116">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-1117">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1117">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.Stream stream, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.Stream stream, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (stream As Stream, mode As XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::Stream ^ stream, System::Data::XmlWriteMode mode);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.IO.Stream * System.Data.XmlWriteMode -&gt; unit" Usage="dataSet.WriteXml (stream, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="6e9b5-1118">ファイルに書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1118">A <see cref="T:System.IO.Stream" /> object used to write to a file.</span></span></param>
        <param name="mode"><span data-ttu-id="6e9b5-1119"><see cref="T:System.Data.XmlWriteMode" /> 値のいずれか 1 つです。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1119">One of the <see cref="T:System.Data.XmlWriteMode" /> values.</span></span></param>
        <summary><span data-ttu-id="6e9b5-1120">指定した <see cref="T:System.Data.DataSet" /> と <see cref="T:System.IO.Stream" /> を使用して、<see cref="T:System.Data.XmlWriteMode" /> の現在のデータを書き込みます。オプションでスキーマを書き込むこともできます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1120">Writes the current data, and optionally the schema, for the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.Stream" /> and <see cref="T:System.Data.XmlWriteMode" />.</span></span> <span data-ttu-id="6e9b5-1121">スキーマを書き込むには、<paramref name="mode" /> パラメーターの値を <see langword="WriteSchema" /> に設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1121">To write the schema, set the value for the <paramref name="mode" /> parameter to <see langword="WriteSchema" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-1122">`WriteXml` メソッドを使用すると、データのみ、またはデータとスキーマの両方を <xref:System.Data.DataSet> から XML ドキュメントに書き込むことができます。一方、<xref:System.Data.DataSet.WriteXmlSchema%2A> メソッドでは、スキーマのみが書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1122">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="6e9b5-1123">データとスキーマの両方を書き込むには、`mode` パラメーターを `WriteSchema`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1123">To write both data and schema, set the `mode` parameter to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="6e9b5-1124"><xref:System.Data.DataSet.ReadXml%2A> メソッドと <xref:System.Data.DataSet.ReadXmlSchema%2A> メソッドについても同様です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1124">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="6e9b5-1125">XML データ、またはスキーマとデータの両方を `DataSet`に読み取るには、`ReadXml` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1125">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="6e9b5-1126">スキーマのみを読み取るには、`ReadXmlSchema` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1126">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-1127">読み取りまたは書き込みを行う `DataRow` 内の列の型が <xref:System.Dynamic.IDynamicMetaObjectProvider> を実装していて、<xref:System.Xml.Serialization.IXmlSerializable>を実装していない場合、<xref:System.InvalidOperationException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1127">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-1128">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1128">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.TextWriter writer, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.TextWriter writer, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As TextWriter, mode As XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::TextWriter ^ writer, System::Data::XmlWriteMode mode);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.IO.TextWriter * System.Data.XmlWriteMode -&gt; unit" Usage="dataSet.WriteXml (writer, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="6e9b5-1129">ドキュメントの書き込みに使用する <see cref="T:System.IO.TextWriter" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1129">A <see cref="T:System.IO.TextWriter" /> object used to write the document.</span></span></param>
        <param name="mode"><span data-ttu-id="6e9b5-1130"><see cref="T:System.Data.XmlWriteMode" /> 値のいずれか 1 つです。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1130">One of the <see cref="T:System.Data.XmlWriteMode" /> values.</span></span></param>
        <summary><span data-ttu-id="6e9b5-1131">指定した <see cref="T:System.Data.DataSet" /> と <see cref="T:System.IO.TextWriter" /> を使用して、<see cref="T:System.Data.XmlWriteMode" /> の現在のデータを書き込みます。オプションでスキーマを書き込むこともできます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1131">Writes the current data, and optionally the schema, for the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.TextWriter" /> and <see cref="T:System.Data.XmlWriteMode" />.</span></span> <span data-ttu-id="6e9b5-1132">スキーマを書き込むには、<paramref name="mode" /> パラメーターの値を <see langword="WriteSchema" /> に設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1132">To write the schema, set the value for the <paramref name="mode" /> parameter to <see langword="WriteSchema" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-1133">`WriteXml` メソッドを使用すると、データのみ、またはデータとスキーマの両方を <xref:System.Data.DataSet> から XML ドキュメントに書き込むことができます。一方、<xref:System.Data.DataSet.WriteXmlSchema%2A> メソッドでは、スキーマのみが書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1133">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="6e9b5-1134">データとスキーマの両方を書き込むには、`mode` パラメーターを `WriteSchema`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1134">To write both data and schema, set the `mode` parameter to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="6e9b5-1135"><xref:System.Data.DataSet.ReadXml%2A> メソッドと <xref:System.Data.DataSet.ReadXmlSchema%2A> メソッドについても同様です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1135">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="6e9b5-1136">XML データ、またはスキーマとデータの両方を `DataSet`に読み取るには、`ReadXml` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1136">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="6e9b5-1137">スキーマのみを読み取るには、`ReadXmlSchema` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1137">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-1138">読み取りまたは書き込みを行う `DataRow` 内の列の型が <xref:System.Dynamic.IDynamicMetaObjectProvider> を実装していて、<xref:System.Xml.Serialization.IXmlSerializable>を実装していない場合、<xref:System.InvalidOperationException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1138">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-1139">次の例では、最初に、1つの <xref:System.Data.DataTable>、2つの列、および10行を含む単純な <xref:System.Data.DataSet> を作成します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1139">The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows.</span></span> <span data-ttu-id="6e9b5-1140"><xref:System.Data.DataSet> スキーマとデータは、<xref:System.Data.DataSet.WriteXml%2A> メソッドを呼び出すことによってディスクに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1140">The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span> <span data-ttu-id="6e9b5-1141">2番目の <xref:System.Data.DataSet> が作成され、スキーマとデータを格納するために <xref:System.Data.DataSet.ReadXml%2A> メソッドが使用されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1141">A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXml2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-1142">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1142">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (string fileName, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(string fileName, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.String,System.Data.XmlWriteMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (fileName As String, mode As XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::String ^ fileName, System::Data::XmlWriteMode mode);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : string * System.Data.XmlWriteMode -&gt; unit" Usage="dataSet.WriteXml (fileName, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="6e9b5-1143">書き込み先の (パスを含む) ファイル名。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1143">The file name (including the path) to which to write.</span></span></param>
        <param name="mode"><span data-ttu-id="6e9b5-1144"><see cref="T:System.Data.XmlWriteMode" /> 値のいずれか 1 つです。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1144">One of the <see cref="T:System.Data.XmlWriteMode" /> values.</span></span></param>
        <summary><span data-ttu-id="6e9b5-1145">指定した <see cref="T:System.Data.DataSet" /> を使用して、<see cref="T:System.Data.XmlWriteMode" /> の現在のデータを、指定したファイルに書き込みます。オプションでスキーマを書き込むこともできます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1145">Writes the current data, and optionally the schema, for the <see cref="T:System.Data.DataSet" /> to the specified file using the specified <see cref="T:System.Data.XmlWriteMode" />.</span></span> <span data-ttu-id="6e9b5-1146">スキーマを書き込むには、<paramref name="mode" /> パラメーターの値を <see langword="WriteSchema" /> に設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1146">To write the schema, set the value for the <paramref name="mode" /> parameter to <see langword="WriteSchema" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-1147">`WriteXml` メソッドを使用すると、データのみ、またはデータとスキーマの両方を <xref:System.Data.DataSet> から XML ドキュメントに書き込むことができます。一方、<xref:System.Data.DataSet.WriteXmlSchema%2A> メソッドでは、スキーマのみが書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1147">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="6e9b5-1148">データとスキーマの両方を書き込むには、`mode` パラメーターを `WriteSchema`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1148">To write both data and schema, set the `mode` parameter to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="6e9b5-1149"><xref:System.Data.DataSet.ReadXml%2A> メソッドと <xref:System.Data.DataSet.ReadXmlSchema%2A> メソッドについても同様です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1149">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="6e9b5-1150">XML データ、またはスキーマとデータの両方を `DataSet`に読み取るには、`ReadXml` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1150">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="6e9b5-1151">スキーマのみを読み取るには、`ReadXmlSchema` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1151">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-1152">読み取りまたは書き込みを行う `DataRow` 内の列の型が <xref:System.Dynamic.IDynamicMetaObjectProvider> を実装していて、<xref:System.Xml.Serialization.IXmlSerializable>を実装していない場合、<xref:System.InvalidOperationException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1152">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-1153">次の例では、<xref:System.Data.DataSet.WriteXml%2A> メソッドを使用して、XML ドキュメントを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1153">The following example uses the <xref:System.Data.DataSet.WriteXml%2A> method to write an XML document.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.WriteXml7 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml7 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXml7 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml7 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="6e9b5-1154"><see cref="T:System.Security.Permissions.FileIOPermission" /> が <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /> に設定されていません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1154"><see cref="T:System.Security.Permissions.FileIOPermission" /> is not set to <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />.</span></span></exception>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-1155">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1155">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.Xml.XmlWriter writer, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.Xml.XmlWriter writer, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As XmlWriter, mode As XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::Xml::XmlWriter ^ writer, System::Data::XmlWriteMode mode);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.Xml.XmlWriter * System.Data.XmlWriteMode -&gt; unit" Usage="dataSet.WriteXml (writer, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="6e9b5-1156">書き込み先の <see cref="T:System.Xml.XmlWriter" /> です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1156">The <see cref="T:System.Xml.XmlWriter" /> with which to write.</span></span></param>
        <param name="mode"><span data-ttu-id="6e9b5-1157"><see cref="T:System.Data.XmlWriteMode" /> 値のいずれか 1 つです。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1157">One of the <see cref="T:System.Data.XmlWriteMode" /> values.</span></span></param>
        <summary><span data-ttu-id="6e9b5-1158">指定した <see cref="T:System.Data.DataSet" /> と <see cref="T:System.Xml.XmlWriter" /> を使用して、<see cref="T:System.Data.XmlWriteMode" /> の現在のデータを書き込みます。オプションでスキーマを書き込むこともできます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1158">Writes the current data, and optionally the schema, for the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.Xml.XmlWriter" /> and <see cref="T:System.Data.XmlWriteMode" />.</span></span> <span data-ttu-id="6e9b5-1159">スキーマを書き込むには、<paramref name="mode" /> パラメーターの値を <see langword="WriteSchema" /> に設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1159">To write the schema, set the value for the <paramref name="mode" /> parameter to <see langword="WriteSchema" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-1160">`WriteXml` メソッドを使用すると、データのみ、またはデータとスキーマの両方を <xref:System.Data.DataSet> から XML ドキュメントに書き込むことができます。一方、<xref:System.Data.DataSet.WriteXmlSchema%2A> メソッドでは、スキーマのみが書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1160">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="6e9b5-1161">データとスキーマの両方を書き込むには、`mode` パラメーターを `WriteSchema`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1161">To write both data and schema, set the `mode` parameter to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="6e9b5-1162"><xref:System.Data.DataSet.ReadXml%2A> メソッドと <xref:System.Data.DataSet.ReadXmlSchema%2A> メソッドについても同様です。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1162">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="6e9b5-1163">XML データ、またはスキーマとデータの両方を `DataSet`に読み取るには、`ReadXml` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1163">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="6e9b5-1164">スキーマのみを読み取るには、`ReadXmlSchema` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1164">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e9b5-1165">読み取りまたは書き込みを行う `DataRow` 内の列の型が <xref:System.Dynamic.IDynamicMetaObjectProvider> を実装していて、<xref:System.Xml.Serialization.IXmlSerializable>を実装していない場合、<xref:System.InvalidOperationException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1165">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-1166">次の例では、新しい <xref:System.Xml.XmlTextWriter>を作成するために使用される <xref:System.IO.FileStream?displayProperty=nameWithType> オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1166">The following example creates a <xref:System.IO.FileStream?displayProperty=nameWithType> object that is used to create a new <xref:System.Xml.XmlTextWriter>.</span></span> <span data-ttu-id="6e9b5-1167"><xref:System.Xml.XmlTextWriter> オブジェクトは、XML ドキュメントを書き込むために <xref:System.Data.DataSet.WriteXml%2A> メソッドと共に使用されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1167">The <xref:System.Xml.XmlTextWriter> object is used with the <xref:System.Data.DataSet.WriteXml%2A> method to write an XML document.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.WriteXml6 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml6 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXml6 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml6 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-1168">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1168">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteXmlSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6e9b5-1169"><see cref="T:System.Data.DataSet" /> 構造体を XML スキーマとして書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1169">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema.</span></span></summary>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-1170">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1170">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (stream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.IO.Stream -&gt; unit" Usage="dataSet.WriteXmlSchema stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="6e9b5-1171">ファイルに書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1171">A <see cref="T:System.IO.Stream" /> object used to write to a file.</span></span></param>
        <summary><span data-ttu-id="6e9b5-1172">XML スキーマとして <see cref="T:System.Data.DataSet" /> 構造体を指定した <see cref="T:System.IO.Stream" /> オブジェクトに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1172">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to the specified <see cref="T:System.IO.Stream" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-1173"><xref:System.Data.DataSet.WriteXmlSchema%2A> メソッドを使用して、<xref:System.Data.DataSet> のスキーマを XML ドキュメントに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1173">Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document.</span></span> <span data-ttu-id="6e9b5-1174">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1174">The schema includes table, relation, and constraint definitions.</span></span> <span data-ttu-id="6e9b5-1175">スキーマを XML ドキュメントに書き込むには、<xref:System.Data.DataSet.WriteXmlSchema%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1175">To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="6e9b5-1176">XML スキーマは、XSD 標準を使用して記述されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1176">The XML schema is written using the XSD standard.</span></span>  
  
 <span data-ttu-id="6e9b5-1177">XML ドキュメントにデータを書き込むには、<xref:System.Data.DataSet.WriteXml%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1177">To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span>  
  
 <span data-ttu-id="6e9b5-1178"><xref:System.IO.Stream> クラスから派生するクラスには、<xref:System.IO.BufferedStream>、<xref:System.IO.FileStream>、<xref:System.IO.MemoryStream>、および <xref:System.Net.Sockets.NetworkStream>があります。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1178">Classes that derive from the <xref:System.IO.Stream> class include <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>, and <xref:System.Net.Sockets.NetworkStream>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-1179">次の例では、スキーマをディスクに書き込むために <xref:System.Data.DataSet.WriteXmlSchema%2A> メソッドに渡される新しい <xref:System.IO.FileStream> オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1179">The following example creates a new <xref:System.IO.FileStream> object that is passed to the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema to disk.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.WriteXmlSchema Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXmlSchema Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-1180">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1180">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.IO.TextWriter -&gt; unit" Usage="dataSet.WriteXmlSchema writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="6e9b5-1181">書き込む対象の <see cref="T:System.IO.TextWriter" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1181">The <see cref="T:System.IO.TextWriter" /> object with which to write.</span></span></param>
        <summary><span data-ttu-id="6e9b5-1182">XML スキーマとして <see cref="T:System.Data.DataSet" /> 構造体を指定した <see cref="T:System.IO.TextWriter" /> オブジェクトに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1182">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to the specified <see cref="T:System.IO.TextWriter" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-1183"><xref:System.Data.DataSet.WriteXmlSchema%2A> メソッドを使用して、<xref:System.Data.DataSet> のスキーマを XML ドキュメントに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1183">Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document.</span></span> <span data-ttu-id="6e9b5-1184">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1184">The schema includes table, relation, and constraint definitions.</span></span> <span data-ttu-id="6e9b5-1185">スキーマを XML ドキュメントに書き込むには、<xref:System.Data.DataSet.WriteXmlSchema%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1185">To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="6e9b5-1186">XML スキーマは、XSD 標準を使用して記述されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1186">The XML schema is written using the XSD standard.</span></span>  
  
 <span data-ttu-id="6e9b5-1187">XML ドキュメントにデータを書き込むには、<xref:System.Data.DataSet.WriteXml%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1187">To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span>  
  
 <span data-ttu-id="6e9b5-1188"><xref:System.IO.TextWriter?displayProperty=nameWithType> クラスから派生したクラスには、<xref:System.Web.HttpWriter?displayProperty=nameWithType>、<xref:System.CodeDom.Compiler.IndentedTextWriter?displayProperty=nameWithType>、<xref:System.Web.UI.HtmlTextWriter?displayProperty=nameWithType>、<xref:System.IO.StreamWriter?displayProperty=nameWithType>、および <xref:System.IO.StringWriter?displayProperty=nameWithType>が含まれます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1188">Classes the derive from the <xref:System.IO.TextWriter?displayProperty=nameWithType> class include the <xref:System.Web.HttpWriter?displayProperty=nameWithType>, <xref:System.CodeDom.Compiler.IndentedTextWriter?displayProperty=nameWithType>, <xref:System.Web.UI.HtmlTextWriter?displayProperty=nameWithType>, <xref:System.IO.StreamWriter?displayProperty=nameWithType>, and <xref:System.IO.StringWriter?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-1189">次の例では、新しい <xref:System.IO.StringWriter?displayProperty=nameWithType>を作成するために使用される <xref:System.Text.StringBuilder?displayProperty=nameWithType> オブジェクトをに作成します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1189">The following example creates a <xref:System.Text.StringBuilder?displayProperty=nameWithType> object to that is used to create a new <xref:System.IO.StringWriter?displayProperty=nameWithType>.</span></span> <span data-ttu-id="6e9b5-1190"><xref:System.IO.StringWriter> が <xref:System.Data.DataSet.WriteXmlSchema%2A> メソッドに渡され、結果の文字列がコンソールウィンドウに出力されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1190">The <xref:System.IO.StringWriter> is passed to the <xref:System.Data.DataSet.WriteXmlSchema%2A> method, and the resulting string is printed to the console window.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.WriteXmlSchema1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXmlSchema1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-1191">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1191">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : string -&gt; unit" Usage="dataSet.WriteXmlSchema fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="6e9b5-1192">書き込み先の (パスを含む) ファイル名。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1192">The file name (including the path) to which to write.</span></span></param>
        <summary><span data-ttu-id="6e9b5-1193"><see cref="T:System.Data.DataSet" /> 構造体を XML スキーマとしてファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1193">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to a file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-1194"><xref:System.Data.DataSet.WriteXmlSchema%2A> メソッドを使用して、<xref:System.Data.DataSet> のスキーマを XML ドキュメントに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1194">Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document.</span></span> <span data-ttu-id="6e9b5-1195">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1195">The schema includes table, relation, and constraint definitions.</span></span> <span data-ttu-id="6e9b5-1196">スキーマを XML ドキュメントに書き込むには、<xref:System.Data.DataSet.WriteXmlSchema%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1196">To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="6e9b5-1197">XML スキーマは、XSD 標準を使用して記述されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1197">The XML schema is written using the XSD standard.</span></span>  
  
 <span data-ttu-id="6e9b5-1198">XML ドキュメントにデータを書き込むには、<xref:System.Data.DataSet.WriteXml%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1198">To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span>  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataSet.WriteXmlSchema3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXmlSchema3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="6e9b5-1199"><see cref="T:System.Security.Permissions.FileIOPermission" /> が <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /> に設定されていません。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1199"><see cref="T:System.Security.Permissions.FileIOPermission" /> is not set to <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />.</span></span></exception>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-1200">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1200">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::Xml::XmlWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.Xml.XmlWriter -&gt; unit" Usage="dataSet.WriteXmlSchema writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="6e9b5-1201">書き込み先の <see cref="T:System.Xml.XmlWriter" />。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1201">The <see cref="T:System.Xml.XmlWriter" /> to write to.</span></span></param>
        <summary><span data-ttu-id="6e9b5-1202"><see cref="T:System.Data.DataSet" /> 構造体を XML スキーマとして <see cref="T:System.Xml.XmlWriter" /> オブジェクトに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1202">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to an <see cref="T:System.Xml.XmlWriter" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e9b5-1203"><xref:System.Data.DataSet.WriteXmlSchema%2A> メソッドを使用して、<xref:System.Data.DataSet> のスキーマを XML ドキュメントに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1203">Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document.</span></span> <span data-ttu-id="6e9b5-1204">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1204">The schema includes table, relation, and constraint definitions.</span></span> <span data-ttu-id="6e9b5-1205">スキーマを XML ドキュメントに書き込むには、<xref:System.Data.DataSet.WriteXmlSchema%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1205">To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="6e9b5-1206">XML スキーマは、XSD 標準を使用して記述されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1206">The XML schema is written using the XSD standard.</span></span>  
  
 <span data-ttu-id="6e9b5-1207">XML ドキュメントにデータを書き込むには、<xref:System.Data.DataSet.WriteXml%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1207">To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span>  
  
 <span data-ttu-id="6e9b5-1208"><xref:System.Xml.XmlWriter?displayProperty=nameWithType> クラスから継承される1つのクラスは、<xref:System.Xml.XmlTextWriter> クラスです。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1208">One class that inherits from the <xref:System.Xml.XmlWriter?displayProperty=nameWithType> class is the <xref:System.Xml.XmlTextWriter> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e9b5-1209">次の例では、指定されたパスを使用して新しい <xref:System.IO.FileStream?displayProperty=nameWithType> オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1209">The following example creates a new <xref:System.IO.FileStream?displayProperty=nameWithType> object with the specified path.</span></span> <span data-ttu-id="6e9b5-1210"><xref:System.IO.FileStream> オブジェクトは、<xref:System.Xml.XmlTextWriter> オブジェクトを作成するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1210">The <xref:System.IO.FileStream> object is used to create an <xref:System.Xml.XmlTextWriter> object.</span></span> <span data-ttu-id="6e9b5-1211">次に、<xref:System.Xml.XmlTextWriter> オブジェクトを使用して <xref:System.Data.DataSet.WriteXmlSchema%2A> メソッドが呼び出され、スキーマがディスクに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1211">The <xref:System.Data.DataSet.WriteXmlSchema%2A> method is then invoked with the <xref:System.Xml.XmlTextWriter> object to write the schema to the disk.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.WriteXmlSchema2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXmlSchema2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="6e9b5-1212">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1212">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.Stream stream, Converter&lt;Type,string&gt; multipleTargetConverter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.Stream stream, class System.Converter`2&lt;class System.Type, string&gt; multipleTargetConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (stream As Stream, multipleTargetConverter As Converter(Of Type, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::Stream ^ stream, Converter&lt;Type ^, System::String ^&gt; ^ multipleTargetConverter);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.IO.Stream * Converter&lt;Type, string&gt; -&gt; unit" Usage="dataSet.WriteXmlSchema (stream, multipleTargetConverter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="multipleTargetConverter" Type="System.Converter&lt;System.Type,System.String&gt;" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="6e9b5-1213">書き込み先の <see cref="T:System.IO.Stream" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1213">A <see cref="T:System.IO.Stream" /> object to write to.</span></span></param>
        <param name="multipleTargetConverter"><span data-ttu-id="6e9b5-1214"><see cref="T:System.Type" /> を文字列に変換するために使用するデリゲート。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1214">A delegate used to convert <see cref="T:System.Type" /> to string.</span></span></param>
        <summary><span data-ttu-id="6e9b5-1215">XML スキーマとして <see cref="T:System.Data.DataSet" /> 構造体を指定した <see cref="T:System.IO.Stream" /> オブジェクトに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1215">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to the specified <see cref="T:System.IO.Stream" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.TextWriter writer, Converter&lt;Type,string&gt; multipleTargetConverter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.TextWriter writer, class System.Converter`2&lt;class System.Type, string&gt; multipleTargetConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As TextWriter, multipleTargetConverter As Converter(Of Type, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::TextWriter ^ writer, Converter&lt;Type ^, System::String ^&gt; ^ multipleTargetConverter);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.IO.TextWriter * Converter&lt;Type, string&gt; -&gt; unit" Usage="dataSet.WriteXmlSchema (writer, multipleTargetConverter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="multipleTargetConverter" Type="System.Converter&lt;System.Type,System.String&gt;" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="6e9b5-1216">書き込み先の <see cref="T:System.IO.TextWriter" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1216">A <see cref="T:System.IO.TextWriter" /> object to write to.</span></span></param>
        <param name="multipleTargetConverter"><span data-ttu-id="6e9b5-1217"><see cref="T:System.Type" /> を文字列に変換するために使用するデリゲート。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1217">A delegate used to convert <see cref="T:System.Type" /> to string.</span></span></param>
        <summary><span data-ttu-id="6e9b5-1218">指定した <see cref="T:System.Data.DataSet" /> に対し、<see cref="T:System.IO.TextWriter" /> 構造体を XML スキーマとして書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1218">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to the specified <see cref="T:System.IO.TextWriter" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (string fileName, Converter&lt;Type,string&gt; multipleTargetConverter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(string fileName, class System.Converter`2&lt;class System.Type, string&gt; multipleTargetConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.String,System.Converter{System.Type,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (fileName As String, multipleTargetConverter As Converter(Of Type, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::String ^ fileName, Converter&lt;Type ^, System::String ^&gt; ^ multipleTargetConverter);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : string * Converter&lt;Type, string&gt; -&gt; unit" Usage="dataSet.WriteXmlSchema (fileName, multipleTargetConverter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="multipleTargetConverter" Type="System.Converter&lt;System.Type,System.String&gt;" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="6e9b5-1219">書き込み先のファイルの名前。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1219">The name of the file to write to.</span></span></param>
        <param name="multipleTargetConverter"><span data-ttu-id="6e9b5-1220"><see cref="T:System.Type" /> を文字列に変換するために使用するデリゲート。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1220">A delegate used to convert <see cref="T:System.Type" /> to string.</span></span></param>
        <summary><span data-ttu-id="6e9b5-1221"><see cref="T:System.Data.DataSet" /> 構造体を XML スキーマとしてファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1221">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to a file.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.Xml.XmlWriter writer, Converter&lt;Type,string&gt; multipleTargetConverter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.Xml.XmlWriter writer, class System.Converter`2&lt;class System.Type, string&gt; multipleTargetConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As XmlWriter, multipleTargetConverter As Converter(Of Type, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::Xml::XmlWriter ^ writer, Converter&lt;Type ^, System::String ^&gt; ^ multipleTargetConverter);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.Xml.XmlWriter * Converter&lt;Type, string&gt; -&gt; unit" Usage="dataSet.WriteXmlSchema (writer, multipleTargetConverter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="multipleTargetConverter" Type="System.Converter&lt;System.Type,System.String&gt;" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="6e9b5-1222">書き込み先の <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1222">A <see cref="T:System.Xml.XmlWriter" /> object to write to.</span></span></param>
        <param name="multipleTargetConverter"><span data-ttu-id="6e9b5-1223"><see cref="T:System.Type" /> を文字列に変換するために使用するデリゲート。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1223">A delegate used to convert <see cref="T:System.Type" /> to string.</span></span></param>
        <summary><span data-ttu-id="6e9b5-1224">指定した <see cref="T:System.Data.DataSet" /> に対し、<see cref="T:System.Xml.XmlWriter" /> 構造体を XML スキーマとして書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6e9b5-1224">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to the specified <see cref="T:System.Xml.XmlWriter" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
