<Type Name="IDataAdapter" FullName="System.Data.IDataAdapter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="035170c05d0931c719d0232a106c021008c0f4db" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78826889" /></Metadata><TypeSignature Language="C#" Value="public interface IDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataAdapter" />
  <TypeSignature Language="DocId" Value="T:System.Data.IDataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataAdapter" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataAdapter" />
  <TypeSignature Language="F#" Value="type IDataAdapter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="1a345-101">オブジェクトが DataAdapter を実装できるようにします。<see cref="T:System.Data.DataSet" /> の格納と更新およびデータ ソースの更新に使用するメソッドとマップ アクション関連プロパティのセットを表します。</span><span class="sxs-lookup"><span data-stu-id="1a345-101">Allows an object to implement a DataAdapter, and represents a set of methods and mapping action-related properties that are used to fill and update a <see cref="T:System.Data.DataSet" /> and update a data source.</span></span>  
  
 <span data-ttu-id="1a345-102"><see cref="T:System.Data.IDbDataAdapter" /> インスタンスは、テキスト コマンド (例: Transact-SQL) を入力するリレーショナル データベースのデータ ソース (またはそれに類似したもの) で、<see cref="T:System.Data.IDataAdapter" /> インスタンスは任意の型のデータ ソースに使用できます。</span><span class="sxs-lookup"><span data-stu-id="1a345-102"><see cref="T:System.Data.IDbDataAdapter" /> instances are for data sources that are (or resemble) relational databases with textual commands (like Transact-SQL), while <see cref="T:System.Data.IDataAdapter" /> instances could can use any type of data source.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a345-103"><xref:System.Data.IDataAdapter> インターフェイスにより、継承クラスは、データソースと <xref:System.Data.DataSet>間のブリッジを表す DataAdapter クラスを実装できます。</span><span class="sxs-lookup"><span data-stu-id="1a345-103">The <xref:System.Data.IDataAdapter> interface allows an inheriting class to implement a DataAdapter class, which represents the bridge between a data source and a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="1a345-104">DataAdapter クラスの詳細については、「 [dataadapter からのデータセットの読み込み](~/docs/framework/data/adonet/populating-a-dataset-from-a-dataadapter.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="1a345-104">For more information about DataAdapter classes, see [Populating a DataSet from a DataAdapter](~/docs/framework/data/adonet/populating-a-dataset-from-a-dataadapter.md).</span></span>  
  
 <span data-ttu-id="1a345-105">アプリケーションは、<xref:System.Data.IDataAdapter> インターフェイスのインスタンスを直接作成するのではなく、<xref:System.Data.IDataAdapter>を継承するクラスのインスタンスを実装します。</span><span class="sxs-lookup"><span data-stu-id="1a345-105">An application does not create an instance of the <xref:System.Data.IDataAdapter> interface directly, but implements an instance of a class that inherits <xref:System.Data.IDataAdapter>.</span></span>  
  
 <span data-ttu-id="1a345-106"><xref:System.Data.IDataAdapter> を継承するクラスは、継承されたメンバーを実装する必要があり、通常は、プロバイダー固有の機能を追加するための追加メンバーを定義します。</span><span class="sxs-lookup"><span data-stu-id="1a345-106">Classes that inherit <xref:System.Data.IDataAdapter> must implement the inherited members, and they typically define additional members to add provider-specific functionality.</span></span> <span data-ttu-id="1a345-107">たとえば、<xref:System.Data.IDataAdapter> インターフェイスは、パラメーターとして <xref:System.Data.DataSet> を受け取る <xref:System.Data.IDataAdapter.Fill%2A> メソッドを定義します。</span><span class="sxs-lookup"><span data-stu-id="1a345-107">For example, the <xref:System.Data.IDataAdapter> interface defines a <xref:System.Data.IDataAdapter.Fill%2A> method that takes a <xref:System.Data.DataSet> as a parameter.</span></span> <span data-ttu-id="1a345-108">次に、<xref:System.Data.OleDb.OleDbDataAdapter> クラスは <xref:System.Data.Common.DbDataAdapter.Fill%2A> メソッドを継承します。また、ADO レコードセットオブジェクトをパラメーターとして受け取る <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> メソッドの2つの追加のオーバーロードも定義します。</span><span class="sxs-lookup"><span data-stu-id="1a345-108">In turn, the <xref:System.Data.OleDb.OleDbDataAdapter> class inherits the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method and also defines two additional overloads of the <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> method that take an ADO Recordset object as a parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a345-109">次の例では、<xref:System.Data.SqlClient.SqlCommand>、<xref:System.Data.SqlClient.SqlDataAdapter>、および <xref:System.Data.SqlClient.SqlConnection>の派生クラスを使用して、データベースからレコードを選択します。</span><span class="sxs-lookup"><span data-stu-id="1a345-109">The following example uses the derived classes, <xref:System.Data.SqlClient.SqlCommand>, <xref:System.Data.SqlClient.SqlDataAdapter>, and <xref:System.Data.SqlClient.SqlConnection>, to select records from a database.</span></span> <span data-ttu-id="1a345-110">次に、塗りつぶされた <xref:System.Data.DataSet> が返されます。</span><span class="sxs-lookup"><span data-stu-id="1a345-110">The filled <xref:System.Data.DataSet> is then returned.</span></span> <span data-ttu-id="1a345-111">これを行うには、初期化された <xref:System.Data.DataSet>、接続文字列、および Transact-sql SELECT ステートメントであるクエリ文字列をメソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="1a345-111">To do this, the method is passed an initialized <xref:System.Data.DataSet>, a connection string, and a query string that is a Transact-SQL SELECT statement.</span></span>  
  
 [!code-csharp[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="1a345-112">.NET Framework データプロバイダー間の一貫性を高めるには、<paramref name="Prv" /> DataAdapter の形式で継承クラスに名前を付けます。 <paramref name="Prv" /> は、特定の .NET Framework データプロバイダーの名前空間のすべてのクラスに指定された均一なプレフィックスです。</span><span class="sxs-lookup"><span data-stu-id="1a345-112">To promote consistency among .NET Framework data providers, name the inheriting class in the form <paramref name="Prv" /> DataAdapter where <paramref name="Prv" /> is the uniform prefix given to all classes in a specific .NET Framework data provider namespace.</span></span> <span data-ttu-id="1a345-113">たとえば、<paramref name="Sql" /> は <see langword="System.Data.SqlClient" /> 名前空間の <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> クラスのプレフィックスです。</span><span class="sxs-lookup"><span data-stu-id="1a345-113">For example, <paramref name="Sql" /> is the prefix of the <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> class in the <see langword="System.Data.SqlClient" /> namespace.</span></span>  
  
<span data-ttu-id="1a345-114"><see cref="T:System.Data.IDataAdapter" /> インターフェイスから継承する場合は、次のコンストラクターを実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1a345-114">When you inherit from the <see cref="T:System.Data.IDataAdapter" /> interface, you should implement the following constructors:</span></span> 
 <list type="table"><listheader><term> <span data-ttu-id="1a345-115">アイテム</span><span class="sxs-lookup"><span data-stu-id="1a345-115">Item</span></span> 
 </term><description> <span data-ttu-id="1a345-116">説明</span><span class="sxs-lookup"><span data-stu-id="1a345-116">Description</span></span> 
 </description></listheader><item><term> <span data-ttu-id="1a345-117">PrvDataAdapter()</span><span class="sxs-lookup"><span data-stu-id="1a345-117">PrvDataAdapter()</span></span> 
 </term><description> <span data-ttu-id="1a345-118">PrvDataAdapter クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="1a345-118">Initializes a new instance of the PrvDataAdapter class.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="1a345-119">PrvDataAdapter (PrvCommand selectCommand)</span><span class="sxs-lookup"><span data-stu-id="1a345-119">PrvDataAdapter(PrvCommand selectCommand)</span></span> 
 </term><description> <span data-ttu-id="1a345-120">指定した SQL SELECT ステートメントを使用して、PrvDataAdapter クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="1a345-120">Initializes a new instance of the PrvDataAdapter class by using the specified SQL SELECT statement.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="1a345-121">PrvDataAdapter (string selectCommandText、string Selectcommandtext)</span><span class="sxs-lookup"><span data-stu-id="1a345-121">PrvDataAdapter(string selectCommandText, string selectConnectionString)</span></span> 
 </term><description> <span data-ttu-id="1a345-122">SQL SELECT ステートメントと接続文字列を使用して、PrvDataAdapter クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="1a345-122">Initializes a new instance of the PrvDataAdapter class by using an SQL SELECT statement and a connection string.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="1a345-123">PrvDataAdapter(string selectCommandText, PrvConnection selectConnection)</span><span class="sxs-lookup"><span data-stu-id="1a345-123">PrvDataAdapter(string selectCommandText, PrvConnection selectConnection)</span></span> 
 </term><description> <span data-ttu-id="1a345-124">SQL SELECT ステートメントと PrvConnection オブジェクトを使用して、PrvDataAdapter クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="1a345-124">Initializes a new instance of the PrvDataAdapter class by using an SQL SELECT statement and a PrvConnection object.</span></span>  
  
 </description></item></list></para></block>
  </Docs>
  <Members>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fill (dataSet As DataSet) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="abstract member Fill : System.Data.DataSet -&gt; int" Usage="iDataAdapter.Fill dataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet"><span data-ttu-id="1a345-125">レコードおよび必要に応じてスキーマを格納するための <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="1a345-125">A <see cref="T:System.Data.DataSet" /> to fill with records and, if necessary, schema.</span></span></param>
        <summary><span data-ttu-id="1a345-126"><see cref="T:System.Data.DataSet" /> 名を使用して、データ ソース内の行と一致するように、<see cref="T:System.Data.DataSet" /> 内の行を追加または更新します。また、Table という名前の <see cref="T:System.Data.DataTable" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="1a345-126">Adds or updates rows in the <see cref="T:System.Data.DataSet" /> to match those in the data source using the <see cref="T:System.Data.DataSet" /> name, and creates a <see cref="T:System.Data.DataTable" /> named "Table".</span></span></summary>
        <returns><span data-ttu-id="1a345-127"><see cref="T:System.Data.DataSet" /> で正常に追加または更新された行数。</span><span class="sxs-lookup"><span data-stu-id="1a345-127">The number of rows successfully added to or refreshed in the <see cref="T:System.Data.DataSet" />.</span></span> <span data-ttu-id="1a345-128">これには、行を返さないステートメントの影響を受ける行は含まれません。</span><span class="sxs-lookup"><span data-stu-id="1a345-128">This does not include rows affected by statements that do not return rows.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a345-129"><xref:System.Data.IDataAdapter.Fill%2A> は、関連付けられた <xref:System.Data.IDbDataAdapter.SelectCommand%2A> プロパティによって指定された SELECT ステートメントを使用して、データソースから行を取得します。</span><span class="sxs-lookup"><span data-stu-id="1a345-129"><xref:System.Data.IDataAdapter.Fill%2A> retrieves rows from the data source using the SELECT statement specified by an associated <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property.</span></span> <span data-ttu-id="1a345-130">SELECT ステートメントに関連付けられている接続オブジェクトは有効である必要がありますが、開く必要はありません。</span><span class="sxs-lookup"><span data-stu-id="1a345-130">The connection object associated with the SELECT statement must be valid, but it does not need to be open.</span></span> <span data-ttu-id="1a345-131"><xref:System.Data.IDataAdapter.Fill%2A> が呼び出される前に接続が閉じられた場合は、データを取得して閉じた状態で接続が開かれます。</span><span class="sxs-lookup"><span data-stu-id="1a345-131">If the connection is closed before <xref:System.Data.IDataAdapter.Fill%2A> is called, it is opened to retrieve data, then closed.</span></span> <span data-ttu-id="1a345-132"><xref:System.Data.IDataAdapter.Fill%2A> が呼び出される前に接続が開いている場合は、開いたままになります。</span><span class="sxs-lookup"><span data-stu-id="1a345-132">If the connection is open before <xref:System.Data.IDataAdapter.Fill%2A> is called, it remains open.</span></span>  
  
 <span data-ttu-id="1a345-133">次に、<xref:System.Data.IDataAdapter.Fill%2A> 操作は、<xref:System.Data.DataSet>内の変換先 <xref:System.Data.DataTable> オブジェクトに行を追加し、存在しない場合は <xref:System.Data.DataTable> オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="1a345-133">The <xref:System.Data.IDataAdapter.Fill%2A> operation then adds the rows to destination <xref:System.Data.DataTable> objects in the <xref:System.Data.DataSet>, creating the <xref:System.Data.DataTable> objects if they do not already exist.</span></span> <span data-ttu-id="1a345-134"><xref:System.Data.DataTable> オブジェクトを作成すると、通常、<xref:System.Data.IDataAdapter.Fill%2A> 操作では列名のメタデータのみが作成されます。</span><span class="sxs-lookup"><span data-stu-id="1a345-134">When creating <xref:System.Data.DataTable> objects, the <xref:System.Data.IDataAdapter.Fill%2A> operation usually creates only column name metadata.</span></span> <span data-ttu-id="1a345-135">ただし、<xref:System.Data.IDataAdapter.MissingSchemaAction%2A> プロパティが `AddWithKey`に設定されている場合は、適切な主キーと制約も作成されます。</span><span class="sxs-lookup"><span data-stu-id="1a345-135">However, if the <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> property is set to `AddWithKey`, appropriate primary keys and constraints are also created.</span></span>  
  
 <span data-ttu-id="1a345-136">`SelectCommand` が OUTER JOIN の結果を返す場合、 `DataAdapter` は、生成される <xref:System.Data.DataTable.PrimaryKey%2A> に <xref:System.Data.DataTable>値を設定しません。</span><span class="sxs-lookup"><span data-stu-id="1a345-136">If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="1a345-137">重複行が正しく解決されるようにするには、主キーを明示的に定義する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1a345-137">You must explicitly define the primary key to ensure that duplicate rows are resolved correctly.</span></span> <span data-ttu-id="1a345-138">詳細については、「[主キーの定義](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="1a345-138">For more information, see [Defining Primary Keys](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).</span></span>  
  
 <span data-ttu-id="1a345-139"><xref:System.Data.DataTable>を設定しているときに <xref:System.Data.IDataAdapter> が重複した列を検出した場合、"columnname1"、"columnname2"、"columnname3" などのパターンを使用して、連続した列の名前が生成されます。</span><span class="sxs-lookup"><span data-stu-id="1a345-139">If the <xref:System.Data.IDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the successive columns, using the pattern "columnname1", "columnname2", "columnname3", and so on.</span></span> <span data-ttu-id="1a345-140">受信データに名前のない列が含まれている場合、"Column1"、"Column2" などのパターンに従って <xref:System.Data.DataSet> に配置されます。</span><span class="sxs-lookup"><span data-stu-id="1a345-140">If the incoming data contains unnamed columns, they are put in the <xref:System.Data.DataSet> according to the pattern "Column1", "Column2", and so on.</span></span> <span data-ttu-id="1a345-141">複数の結果セットが <xref:System.Data.DataSet>に追加されると、各結果セットが個別のテーブルに格納されます。</span><span class="sxs-lookup"><span data-stu-id="1a345-141">When multiple result sets are added to the <xref:System.Data.DataSet>, each result set is put in a separate table.</span></span> <span data-ttu-id="1a345-142">追加の結果セットには、指定されたテーブル名に整数値を追加することによって名前が付けられます (たとえば、"Table"、"Table1"、"Table2" など)。</span><span class="sxs-lookup"><span data-stu-id="1a345-142">Additional result sets are named by appending integral values to the specified table name (for example, "Table", "Table1", "Table2", and so on).</span></span> <span data-ttu-id="1a345-143">アプリケーションでは、列名とテーブル名を使用して、これらの命名パターンとの競合が発生しないように注意する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1a345-143">Applications should use caution when using column and table names to ensure that conflicts with these naming patterns do not occur.</span></span>  
  
 <span data-ttu-id="1a345-144"><xref:System.Data.DataSet> の設定に使用される SELECT ステートメントが複数の結果 (バッチ SQL ステートメントなど) を返す場合、結果の1つにエラーが含まれていると、連続した結果はすべてスキップされ、<xref:System.Data.DataSet>には追加されません。</span><span class="sxs-lookup"><span data-stu-id="1a345-144">When the SELECT statement that is used to populate the <xref:System.Data.DataSet> returns multiple results, such as a batch SQL statement, if one of the results contains an error, all successive results are skipped and not added to the <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="1a345-145">同じ <xref:System.Data.DataTable>で <xref:System.Data.IDataAdapter.Fill%2A> メソッドを複数回使用できます。</span><span class="sxs-lookup"><span data-stu-id="1a345-145">You can use the <xref:System.Data.IDataAdapter.Fill%2A> method multiple times on the same <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="1a345-146">主キーが存在する場合、受信した行は、既に存在する一致する行とマージされます。</span><span class="sxs-lookup"><span data-stu-id="1a345-146">If a primary key exists, incoming rows are merged with matching rows that already exist.</span></span> <span data-ttu-id="1a345-147">主キーが存在しない場合は、受信行が <xref:System.Data.DataTable>に追加されます。</span><span class="sxs-lookup"><span data-stu-id="1a345-147">If no primary key exists, incoming rows are appended to the <xref:System.Data.DataTable>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1a345-148">複数の結果を返すバッチ SQL ステートメントを処理する場合、.NET Framework データプロバイダーの <xref:System.Data.IDataAdapter.Fill%2A> と <xref:System.Data.IDataAdapter.FillSchema%2A> の実装では、最初の結果についてのみスキーマ情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="1a345-148">When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.IDataAdapter.Fill%2A> and <xref:System.Data.IDataAdapter.FillSchema%2A> for a .NET Framework data provider retrieves schema information for only the first result.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      <MemberSignature Language="VB.NET" Value="Public Function FillSchema (dataSet As DataSet, schemaType As SchemaType) As DataTable()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType);" />
      <MemberSignature Language="F#" Value="abstract member FillSchema : System.Data.DataSet * System.Data.SchemaType -&gt; System.Data.DataTable[]" Usage="iDataAdapter.FillSchema (dataSet, schemaType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataSet"><span data-ttu-id="1a345-149">データ ソースからのスキーマを格納する <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="1a345-149">The <see cref="T:System.Data.DataSet" /> to be filled with the schema from the data source.</span></span></param>
        <param name="schemaType"><span data-ttu-id="1a345-150"><see cref="T:System.Data.SchemaType" /> 値のいずれか 1 つです。</span><span class="sxs-lookup"><span data-stu-id="1a345-150">One of the <see cref="T:System.Data.SchemaType" /> values.</span></span></param>
        <summary><span data-ttu-id="1a345-151">"Table" という名前の <see cref="T:System.Data.DataTable" /> を指定された <see cref="T:System.Data.DataSet" /> に追加し、指定された <see cref="T:System.Data.SchemaType" /> に基づいて、データ ソースにあるスキーマと一致するようにスキーマを構成します。</span><span class="sxs-lookup"><span data-stu-id="1a345-151">Adds a <see cref="T:System.Data.DataTable" /> named "Table" to the specified <see cref="T:System.Data.DataSet" /> and configures the schema to match that in the data source based on the specified <see cref="T:System.Data.SchemaType" />.</span></span></summary>
        <returns><span data-ttu-id="1a345-152">データ ソースから返されたスキーマ情報が格納された、<see cref="T:System.Data.DataTable" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="1a345-152">An array of <see cref="T:System.Data.DataTable" /> objects that contain schema information returned from the data source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a345-153"><xref:System.Data.IDataAdapter.FillSchema%2A> メソッドは、<xref:System.Data.IDbDataAdapter.SelectCommand%2A>を使用して、データソースからスキーマを取得します。</span><span class="sxs-lookup"><span data-stu-id="1a345-153">The <xref:System.Data.IDataAdapter.FillSchema%2A> method retrieves the schema from the data source using the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</span></span> <span data-ttu-id="1a345-154"><xref:System.Data.IDbDataAdapter.SelectCommand%2A> に関連付けられている接続オブジェクトは有効である必要がありますが、開く必要はありません。</span><span class="sxs-lookup"><span data-stu-id="1a345-154">The connection object associated with the <xref:System.Data.IDbDataAdapter.SelectCommand%2A> must be valid, but it does not need to be open.</span></span> <span data-ttu-id="1a345-155"><xref:System.Data.IDataAdapter.FillSchema%2A> が呼び出される前に接続が閉じられた場合は、データを取得して閉じた状態で接続が開かれます。</span><span class="sxs-lookup"><span data-stu-id="1a345-155">If the connection is closed before <xref:System.Data.IDataAdapter.FillSchema%2A> is called, it is opened to retrieve data, then closed.</span></span> <span data-ttu-id="1a345-156"><xref:System.Data.IDataAdapter.FillSchema%2A> が呼び出される前に接続が開いている場合は、開いたままになります。</span><span class="sxs-lookup"><span data-stu-id="1a345-156">If the connection is open before <xref:System.Data.IDataAdapter.FillSchema%2A> is called, it remains open.</span></span>  
  
 <span data-ttu-id="1a345-157"><xref:System.Data.IDataAdapter.FillSchema%2A> 操作は、転送先 <xref:System.Data.DataSet>に <xref:System.Data.DataTable> を追加します。</span><span class="sxs-lookup"><span data-stu-id="1a345-157">A <xref:System.Data.IDataAdapter.FillSchema%2A> operation adds a <xref:System.Data.DataTable> to the destination <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="1a345-158">次に、<xref:System.Data.DataTable> の <xref:System.Data.DataColumnCollection> に列を追加し、データソースに次の <xref:System.Data.DataColumn> プロパティが存在する場合はそのプロパティを構成します。</span><span class="sxs-lookup"><span data-stu-id="1a345-158">It then adds columns to the <xref:System.Data.DataColumnCollection> of the <xref:System.Data.DataTable> and configures the following <xref:System.Data.DataColumn> properties if they exist at the data source:</span></span>  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <span data-ttu-id="1a345-159">[https://login.microsoftonline.com/consumers/](<xref:System.Data.DataColumn.AutoIncrement%2A>)</span><span class="sxs-lookup"><span data-stu-id="1a345-159"><xref:System.Data.DataColumn.AutoIncrement%2A>.</span></span> <span data-ttu-id="1a345-160"><xref:System.Data.DataColumn.AutoIncrementStep%2A> と <xref:System.Data.DataColumn.AutoIncrementSeed%2A> を個別に設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1a345-160">You must set <xref:System.Data.DataColumn.AutoIncrementStep%2A> and <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separately.</span></span>  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <span data-ttu-id="1a345-161">また <xref:System.Data.IDataAdapter.FillSchema%2A> は、次の規則に従って <xref:System.Data.DataTable.PrimaryKey%2A> と <xref:System.Data.DataTable.Constraints%2A> のプロパティも構成します。</span><span class="sxs-lookup"><span data-stu-id="1a345-161"><xref:System.Data.IDataAdapter.FillSchema%2A> also configures the <xref:System.Data.DataTable.PrimaryKey%2A> and <xref:System.Data.DataTable.Constraints%2A> properties according to the following rules:</span></span>  
  
-   <span data-ttu-id="1a345-162"><xref:System.Data.IDbDataAdapter.SelectCommand%2A>によって1つ以上の主キー列が返された場合は、<xref:System.Data.DataTable>の主キー列として使用されます。</span><span class="sxs-lookup"><span data-stu-id="1a345-162">If one or more primary key columns are returned by the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, they are used as the primary key columns for the <xref:System.Data.DataTable>.</span></span>  
  
-   <span data-ttu-id="1a345-163">主キー列が返されず、一意の列がの場合は、一意の列が null 非許容である場合、その一意の列が主キーとして使用されます。</span><span class="sxs-lookup"><span data-stu-id="1a345-163">If no primary key columns are returned but unique columns are, the unique columns are used as the primary key if all the unique columns are non-nullable.</span></span> <span data-ttu-id="1a345-164">Null 値が許容される列がある場合は、<xref:System.Data.UniqueConstraint> が <xref:System.Data.ConstraintCollection>に追加されますが、<xref:System.Data.DataTable.PrimaryKey%2A> プロパティは設定されません。</span><span class="sxs-lookup"><span data-stu-id="1a345-164">If any of the columns are nullable, a <xref:System.Data.UniqueConstraint> is added to the <xref:System.Data.ConstraintCollection>, but the <xref:System.Data.DataTable.PrimaryKey%2A> property is not set.</span></span>  
  
-   <span data-ttu-id="1a345-165">主キー列と一意の列の両方が返された場合は、主キー列が <xref:System.Data.DataTable>の主キー列として使用されます。</span><span class="sxs-lookup"><span data-stu-id="1a345-165">If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the <xref:System.Data.DataTable>.</span></span>  
  
 <span data-ttu-id="1a345-166">主キーと一意の制約は、前のルールに従って <xref:System.Data.ConstraintCollection> に追加されることに注意してくださいが、その他の制約の種類は追加されません。</span><span class="sxs-lookup"><span data-stu-id="1a345-166">Note that primary keys and unique constraints are added to the <xref:System.Data.ConstraintCollection> according to the previous rules, but other constraint types are not added.</span></span>  
  
 <span data-ttu-id="1a345-167">SQL Server テーブルの1つまたは複数の列に一意のクラスター化インデックスが定義されていて、primary key 制約が別の列のセットに対して定義されている場合、クラスター化インデックス内の列の名前が返されます。</span><span class="sxs-lookup"><span data-stu-id="1a345-167">If a unique clustered index is defined on a column or columns in a SQL Server table and the primary key constraint is defined on a separate set of columns, then the names of the columns in the clustered index will be returned.</span></span> <span data-ttu-id="1a345-168">主キー列の名前または名前を取得するには、主キーインデックスの名前を指定する SELECT ステートメントでクエリヒントを使用します。</span><span class="sxs-lookup"><span data-stu-id="1a345-168">To return the name or names of the primary key columns, use a query hint with the SELECT statement that specifies the name of the primary key index.</span></span> <span data-ttu-id="1a345-169">クエリヒントを指定する方法の詳細については、「[ヒント (transact-sql)-query](/sql/t-sql/queries/hints-transact-sql-query)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="1a345-169">For more information about how to specify query hints, see [Hints (Transact-SQL) - Query](/sql/t-sql/queries/hints-transact-sql-query).</span></span>  
  
 <span data-ttu-id="1a345-170"><xref:System.Data.DataTable>を設定しているときに <xref:System.Data.IDataAdapter> が重複した列を検出した場合、"columnname1"、"columnname2"、"columnname3" などのパターンを使用して、連続した列の名前が生成されます。</span><span class="sxs-lookup"><span data-stu-id="1a345-170">If the <xref:System.Data.IDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the successive columns, using the pattern "columnname1", "columnname2", "columnname3", and so on.</span></span> <span data-ttu-id="1a345-171">受信データに名前のない列が含まれている場合、"Column1"、"Column2" などのパターンに従って <xref:System.Data.DataSet> に配置されます。</span><span class="sxs-lookup"><span data-stu-id="1a345-171">If the incoming data contains unnamed columns, they are put in the <xref:System.Data.DataSet> according to the pattern "Column1", "Column2", and so on.</span></span> <span data-ttu-id="1a345-172">複数の結果セットが <xref:System.Data.DataSet>に追加されると、各結果セットが個別のテーブルに格納されます。</span><span class="sxs-lookup"><span data-stu-id="1a345-172">When multiple result sets are added to the <xref:System.Data.DataSet>, each result set is put in a separate table.</span></span> <span data-ttu-id="1a345-173">追加の結果セットには、指定されたテーブル名に整数値を追加することによって名前が付けられます (たとえば、"Table"、"Table1"、"Table2" など)。</span><span class="sxs-lookup"><span data-stu-id="1a345-173">Additional result sets are named by appending integral values to the specified table name (for example, "Table", "Table1", "Table2", and so on).</span></span> <span data-ttu-id="1a345-174">アプリケーションでは、列名とテーブル名を使用して、これらの命名パターンとの競合が発生しないように注意する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1a345-174">Applications should use caution when using column and table names to ensure that conflicts with these naming patterns do not occur.</span></span>  
  
 <span data-ttu-id="1a345-175"><xref:System.Data.IDataAdapter.FillSchema%2A> は行を返しません。</span><span class="sxs-lookup"><span data-stu-id="1a345-175"><xref:System.Data.IDataAdapter.FillSchema%2A> returns no rows.</span></span> <span data-ttu-id="1a345-176"><xref:System.Data.DataTable>に行を追加するには、<xref:System.Data.IDataAdapter.Fill%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="1a345-176">Use the <xref:System.Data.IDataAdapter.Fill%2A> method to add rows to a <xref:System.Data.DataTable>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />
      </Docs>
    </Member>
    <Member MemberName="GetFillParameters">
      <MemberSignature Language="C#" Value="public System.Data.IDataParameter[] GetFillParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.IDataParameter[] GetFillParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.GetFillParameters" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFillParameters () As IDataParameter()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::IDataParameter ^&gt; ^ GetFillParameters();" />
      <MemberSignature Language="F#" Value="abstract member GetFillParameters : unit -&gt; System.Data.IDataParameter[]" Usage="iDataAdapter.GetFillParameters " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1a345-177">SQL SELECT ステートメントの実行時にユーザーが設定したパラメーターを取得します。</span><span class="sxs-lookup"><span data-stu-id="1a345-177">Gets the parameters set by the user when executing an SQL SELECT statement.</span></span></summary>
        <returns><span data-ttu-id="1a345-178">ユーザーが設定したパラメーターが格納された <see cref="T:System.Data.IDataParameter" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="1a345-178">An array of <see cref="T:System.Data.IDataParameter" /> objects that contains the parameters set by the user.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
  
```csharp
private static void GetParameters(string connectionString)
{
    using (var conn = new SqlConnection(connectionString))
    {
        var queryString = "SELECT [CourseID],[Title],[Credits] FROM [MySchool].[dbo].[Course] WHERE [Year]=@Year AND [Credits]>=@Credits";
        var year = new SqlParameter("@Year", 2012);
        var credits = new SqlParameter("@Credits", SqlDbType.Int, 4, "Credits");
        credits.Value = 4;
        var command = new SqlCommand(queryString, conn);
        command.Parameters.Add(year);
        command.Parameters.Add(credits);
        IDbDataAdapter mySchool = new SqlDataAdapter(command);
        IDataParameter[] parameters = mySchool.GetFillParameters();
        Console.WriteLine("{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}", "ParameterName", "SourceColumn", "Direction", "DbType", "Value");
        foreach (IDataParameter parameter in parameters)
        {
            Console.WriteLine("{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}", parameter.ParameterName, parameter.SourceColumn, parameter.Direction, parameter.DbType, parameter.Value);
        }
    }
}
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MissingMappingAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingMappingAction MissingMappingAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingMappingAction MissingMappingAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.MissingMappingAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MissingMappingAction As MissingMappingAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::MissingMappingAction MissingMappingAction { System::Data::MissingMappingAction get(); void set(System::Data::MissingMappingAction value); };" />
      <MemberSignature Language="F#" Value="member this.MissingMappingAction : System.Data.MissingMappingAction with get, set" Usage="System.Data.IDataAdapter.MissingMappingAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MissingMappingAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1a345-179">割り当てられていないソース テーブルまたはソース列をソース名で渡して、フィルター処理するか、エラーを発生させるかどうかを指示または指定します。</span><span class="sxs-lookup"><span data-stu-id="1a345-179">Indicates or specifies whether unmapped source tables or columns are passed with their source names in order to be filtered or to raise an error.</span></span></summary>
        <value><span data-ttu-id="1a345-180"><see cref="T:System.Data.MissingMappingAction" /> 値のいずれか 1 つです。</span><span class="sxs-lookup"><span data-stu-id="1a345-180">One of the <see cref="T:System.Data.MissingMappingAction" /> values.</span></span> <span data-ttu-id="1a345-181">既定では、 <see langword="Passthrough" />です。</span><span class="sxs-lookup"><span data-stu-id="1a345-181">The default is <see langword="Passthrough" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a345-182"><xref:System.Data.IDataAdapter.TableMappings%2A> プロパティは、返されるレコードと <xref:System.Data.DataSet>との間のマスターマッピングを提供します。</span><span class="sxs-lookup"><span data-stu-id="1a345-182">The <xref:System.Data.IDataAdapter.TableMappings%2A> property provides the master mapping between the returned records and the <xref:System.Data.DataSet>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1a345-183">設定された値が <see cref="T:System.Data.MissingMappingAction" /> 値の 1 つではありません。</span><span class="sxs-lookup"><span data-stu-id="1a345-183">The value set is not one of the <see cref="T:System.Data.MissingMappingAction" /> values.</span></span></exception>
        <altmember cref="P:System.Data.IDataAdapter.MissingSchemaAction" />
      </Docs>
    </Member>
    <Member MemberName="MissingSchemaAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingSchemaAction MissingSchemaAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingSchemaAction MissingSchemaAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.MissingSchemaAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MissingSchemaAction As MissingSchemaAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::MissingSchemaAction MissingSchemaAction { System::Data::MissingSchemaAction get(); void set(System::Data::MissingSchemaAction value); };" />
      <MemberSignature Language="F#" Value="member this.MissingSchemaAction : System.Data.MissingSchemaAction with get, set" Usage="System.Data.IDataAdapter.MissingSchemaAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MissingSchemaAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1a345-184">存在しないソース テーブル、ソース列、それらのリレーションシップをデータセット スキーマに追加するか、無視するか、またはエラーを発生させるかを表示または指定します。</span><span class="sxs-lookup"><span data-stu-id="1a345-184">Indicates or specifies whether missing source tables, columns, and their relationships are added to the dataset schema, ignored, or cause an error to be raised.</span></span></summary>
        <value><span data-ttu-id="1a345-185"><see cref="T:System.Data.MissingSchemaAction" /> 値のいずれか 1 つです。</span><span class="sxs-lookup"><span data-stu-id="1a345-185">One of the <see cref="T:System.Data.MissingSchemaAction" /> values.</span></span> <span data-ttu-id="1a345-186">既定では、 <see langword="Add" />です。</span><span class="sxs-lookup"><span data-stu-id="1a345-186">The default is <see langword="Add" />.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1a345-187">設定された値が <see cref="T:System.Data.MissingSchemaAction" /> 値の 1 つではありません。</span><span class="sxs-lookup"><span data-stu-id="1a345-187">The value set is not one of the <see cref="T:System.Data.MissingSchemaAction" /> values.</span></span></exception>
        <altmember cref="P:System.Data.Common.DataAdapter.MissingMappingAction" />
      </Docs>
    </Member>
    <Member MemberName="TableMappings">
      <MemberSignature Language="C#" Value="public System.Data.ITableMappingCollection TableMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.ITableMappingCollection TableMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.TableMappings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TableMappings As ITableMappingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::ITableMappingCollection ^ TableMappings { System::Data::ITableMappingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TableMappings : System.Data.ITableMappingCollection" Usage="System.Data.IDataAdapter.TableMappings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.ITableMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1a345-188">ソース テーブルをデータセット テーブルに割り当てる方法を示します。</span><span class="sxs-lookup"><span data-stu-id="1a345-188">Indicates how a source table is mapped to a dataset table.</span></span></summary>
        <value><span data-ttu-id="1a345-189">返されたレコードと <see cref="T:System.Data.DataSet" /> との間のマスター マップを提供するコレクション。</span><span class="sxs-lookup"><span data-stu-id="1a345-189">A collection that provides the master mapping between the returned records and the <see cref="T:System.Data.DataSet" />.</span></span> <span data-ttu-id="1a345-190">既定値は空のコレクションです。</span><span class="sxs-lookup"><span data-stu-id="1a345-190">The default value is an empty collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a345-191"><xref:System.Data.IDataAdapter> は、"Table" という名前のソーステーブルのマッピングのみを使用します。</span><span class="sxs-lookup"><span data-stu-id="1a345-191">The <xref:System.Data.IDataAdapter> uses only the mappings for the source table named "Table".</span></span> <span data-ttu-id="1a345-192">すべての SELECT、INSERT、DELETE、および UPDATE ステートメントでは、一貫性のある列名を使用してデータを返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="1a345-192">All SELECT, INSERT, DELETE, and UPDATE statements returning data must do so using consistent column naming.</span></span> <span data-ttu-id="1a345-193">レコードで返される列名は一意である必要があります。そうでない場合、名前が重複している列は前のデータを上書きします。</span><span class="sxs-lookup"><span data-stu-id="1a345-193">The column names returned in the records must be unique, otherwise columns with duplicate names overwrite previous data.</span></span> <span data-ttu-id="1a345-194"><xref:System.Data.IDataAdapter.Update%2A>では、"Table" という名前のソーステーブルにマップされているテーブルだけが、その変更を調整します。</span><span class="sxs-lookup"><span data-stu-id="1a345-194">On <xref:System.Data.IDataAdapter.Update%2A>, only the table mapped to the source table named "Table" will have its changes reconciled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Update(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (dataSet As DataSet) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="abstract member Update : System.Data.DataSet -&gt; int" Usage="iDataAdapter.Update dataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet"><span data-ttu-id="1a345-195">データ ソースの更新に使用した <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="1a345-195">The <see cref="T:System.Data.DataSet" /> used to update the data source.</span></span></param>
        <summary><span data-ttu-id="1a345-196">指定された <see cref="T:System.Data.DataSet" /> 内の Table という名前の <see cref="T:System.Data.DataTable" /> に含まれる挿入行、更新行、または削除行に対して、INSERT、UPDATE、または DELETE ステートメントを個別に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="1a345-196">Calls the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified <see cref="T:System.Data.DataSet" /> from a <see cref="T:System.Data.DataTable" /> named "Table".</span></span></summary>
        <returns><span data-ttu-id="1a345-197"><see cref="T:System.Data.DataSet" /> 内で正常に更新された行の数。</span><span class="sxs-lookup"><span data-stu-id="1a345-197">The number of rows successfully updated from the <see cref="T:System.Data.DataSet" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a345-198">アプリケーションが <xref:System.Data.IDataAdapter.Update%2A> メソッドを呼び出すと、<xref:System.Data.IDataAdapter> は <xref:System.Data.DataRow.RowState%2A> プロパティを調べ、<xref:System.Data.DataSet>で構成されているインデックスの順序に基づいて、必要な INSERT、UPDATE、または DELETE ステートメントを各行に対して繰り返し実行します。</span><span class="sxs-lookup"><span data-stu-id="1a345-198">When an application calls the <xref:System.Data.IDataAdapter.Update%2A> method, the <xref:System.Data.IDataAdapter> examines the <xref:System.Data.DataRow.RowState%2A> property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="1a345-199">たとえば、<xref:System.Data.DataTable>内の行の順序が原因で、DELETE ステートメントを実行した後に INSERT ステートメントを実行した後、別の DELETE ステートメントを実行 <xref:System.Data.IDataAdapter.Update%2A> ことがあります。</span><span class="sxs-lookup"><span data-stu-id="1a345-199">For example, <xref:System.Data.IDataAdapter.Update%2A> might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, because of the ordering of the rows in the <xref:System.Data.DataTable>.</span></span>  
  
 <span data-ttu-id="1a345-200">これらのステートメントはバッチ処理として実行されないことに注意してください。各行は個別に更新されます。</span><span class="sxs-lookup"><span data-stu-id="1a345-200">Be aware that these statements are not performed as a batch process; each row is updated individually.</span></span> <span data-ttu-id="1a345-201">ステートメントの種類 (更新前の挿入など) のシーケンスを制御する必要がある場合、アプリケーションは <xref:System.Data.DataSet.GetChanges%2A> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="1a345-201">An application can call the <xref:System.Data.DataSet.GetChanges%2A> method if you must control the sequence of statement types (for example, INSERTs before UPDATEs).</span></span> <span data-ttu-id="1a345-202">詳細については、「 [dataadapter を使用したデータソースの更新](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="1a345-202">For more information, see [Updating Data Sources with DataAdapters](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).</span></span>  
  
 <span data-ttu-id="1a345-203">INSERT、UPDATE、または DELETE ステートメントが指定されていない場合、<xref:System.Data.Common.DataAdapter.Update%2A> メソッドによって例外が生成されます。</span><span class="sxs-lookup"><span data-stu-id="1a345-203">If INSERT, UPDATE, or DELETE statements have not been specified, the <xref:System.Data.Common.DataAdapter.Update%2A> method generates an exception.</span></span> <span data-ttu-id="1a345-204">ただし、<xref:System.Data.SqlClient.SqlCommandBuilder> または <xref:System.Data.OleDb.OleDbCommandBuilder> オブジェクトを作成すると、.NET Framework データプロバイダーの `SelectCommand` プロパティを設定した場合に、単一テーブルの更新の SQL ステートメントが自動的に生成されます。</span><span class="sxs-lookup"><span data-stu-id="1a345-204">However, you can create a <xref:System.Data.SqlClient.SqlCommandBuilder> or <xref:System.Data.OleDb.OleDbCommandBuilder> object to automatically generate SQL statements for single-table updates if you set the `SelectCommand` property of a .NET Framework data provider.</span></span> <span data-ttu-id="1a345-205">その後、設定していない追加の SQL ステートメントは、CommandBuilder によって生成されます。</span><span class="sxs-lookup"><span data-stu-id="1a345-205">Then, any additional SQL statements that you do not set are generated by the CommandBuilder.</span></span> <span data-ttu-id="1a345-206">この生成ロジックでは、キー列の情報が <xref:System.Data.DataSet>に存在している必要があります。</span><span class="sxs-lookup"><span data-stu-id="1a345-206">This generation logic requires key column information to be present in the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="1a345-207">詳細については、「 [CommandBuilders を使用したコマンドの生成](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="1a345-207">For more information see [Generating Commands with CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).</span></span>  
  
 <span data-ttu-id="1a345-208"><xref:System.Data.Common.DataAdapter.Update%2A> メソッドは、更新を実行する前に、最初のマッピングに記載されているテーブルから行を取得します。</span><span class="sxs-lookup"><span data-stu-id="1a345-208">The <xref:System.Data.Common.DataAdapter.Update%2A> method retrieves rows from the table listed in the first mapping before performing an update.</span></span> <span data-ttu-id="1a345-209"><xref:System.Data.Common.DataAdapter.Update%2A> は、<xref:System.Data.IDbCommand.UpdatedRowSource%2A> プロパティの値を使用して行を更新します。</span><span class="sxs-lookup"><span data-stu-id="1a345-209">The <xref:System.Data.Common.DataAdapter.Update%2A> then updates the row using the value of the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property.</span></span> <span data-ttu-id="1a345-210">返されたその他の行は無視されます。</span><span class="sxs-lookup"><span data-stu-id="1a345-210">Any additional rows returned are ignored.</span></span>  
  
 <span data-ttu-id="1a345-211">任意のデータが <xref:System.Data.DataSet>に読み込まれると、<xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> イベントが発生し、ユーザーは、調整された <xref:System.Data.DataSet> 行とコマンドによって返される出力パラメーターを調べることができます。</span><span class="sxs-lookup"><span data-stu-id="1a345-211">After any data is loaded back into the <xref:System.Data.DataSet>, the <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised, allowing the user to inspect the reconciled <xref:System.Data.DataSet> row and any output parameters returned by the command.</span></span> <span data-ttu-id="1a345-212">行が正常に更新されると、その行に対する変更が受け入れられます。</span><span class="sxs-lookup"><span data-stu-id="1a345-212">After a row updates successfully, the changes to that row are accepted.</span></span>  
  
 <span data-ttu-id="1a345-213"><xref:System.Data.IDataAdapter.Update%2A>を使用する場合、実行の順序は次のようになります。</span><span class="sxs-lookup"><span data-stu-id="1a345-213">When using <xref:System.Data.IDataAdapter.Update%2A>, the order of execution is as follows:</span></span>  
  
1.  <span data-ttu-id="1a345-214"><xref:System.Data.DataRow> 内の値は、パラメーター値に移動されます。</span><span class="sxs-lookup"><span data-stu-id="1a345-214">The values in the <xref:System.Data.DataRow> are moved to the parameter values.</span></span>  
  
2.  <span data-ttu-id="1a345-215"><xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="1a345-215">The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.</span></span>  
  
3.  <span data-ttu-id="1a345-216">コマンドが実行されます。</span><span class="sxs-lookup"><span data-stu-id="1a345-216">The command executes.</span></span>  
  
4.  <span data-ttu-id="1a345-217">コマンドが `FirstReturnedRecord`に設定されている場合、最初に返された結果が <xref:System.Data.DataRow>に格納されます。</span><span class="sxs-lookup"><span data-stu-id="1a345-217">If the command is set to `FirstReturnedRecord`, then the first returned result is put in the <xref:System.Data.DataRow>.</span></span>  
  
5.  <span data-ttu-id="1a345-218">出力パラメーターがある場合は、<xref:System.Data.DataRow>に格納されます。</span><span class="sxs-lookup"><span data-stu-id="1a345-218">If there are output parameters, they are put in the <xref:System.Data.DataRow>.</span></span>  
  
6.  <span data-ttu-id="1a345-219"><xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="1a345-219">The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.</span></span>  
  
7.  <span data-ttu-id="1a345-220"><xref:System.Data.DataRow.AcceptChanges%2A> が呼び出されます</span><span class="sxs-lookup"><span data-stu-id="1a345-220"><xref:System.Data.DataRow.AcceptChanges%2A> is called.</span></span>  
  
 <span data-ttu-id="1a345-221"><xref:System.Data.IDataAdapter> に関連付けられた各コマンドには、通常、パラメーターコレクションが関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="1a345-221">Each command associated with the <xref:System.Data.IDataAdapter> usually has a parameter collection associated with it.</span></span> <span data-ttu-id="1a345-222">パラメーターは、.NET Framework データプロバイダーの `Parameter` クラスの `SourceColumn` および `SourceVersion` プロパティを使用して、現在の行にマップされます。</span><span class="sxs-lookup"><span data-stu-id="1a345-222">Parameters are mapped to the current row through the `SourceColumn` and `SourceVersion` properties of a .NET Framework data provider's `Parameter` class.</span></span> <span data-ttu-id="1a345-223">`SourceColumn` は、現在の行のパラメーター値を取得するために <xref:System.Data.IDataAdapter> が参照する <xref:System.Data.DataTable> 列を参照します。</span><span class="sxs-lookup"><span data-stu-id="1a345-223">`SourceColumn` refers to a <xref:System.Data.DataTable> column that the <xref:System.Data.IDataAdapter> references to obtain parameter values for the current row.</span></span>  
  
 <span data-ttu-id="1a345-224">`SourceColumn` は、テーブルマッピングが適用される前に、マップされていない列名を参照します。</span><span class="sxs-lookup"><span data-stu-id="1a345-224">`SourceColumn` refers to the unmapped column name before any table mappings have been applied.</span></span> <span data-ttu-id="1a345-225">`SourceColumn` が存在しない列を参照している場合、実行されるアクションは、次のいずれかの <xref:System.Data.MissingMappingAction> 値に依存します。</span><span class="sxs-lookup"><span data-stu-id="1a345-225">If `SourceColumn` refers to a nonexistent column, the action taken depends on one of the following <xref:System.Data.MissingMappingAction> values.</span></span>  
  
|<span data-ttu-id="1a345-226">列挙値</span><span class="sxs-lookup"><span data-stu-id="1a345-226">Enumeration Value</span></span>|<span data-ttu-id="1a345-227">実行されたアクション</span><span class="sxs-lookup"><span data-stu-id="1a345-227">Action Taken</span></span>|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|<span data-ttu-id="1a345-228">マッピングが存在しない場合は、<xref:System.Data.DataSet> でソース列の名前とテーブル名を使用します。</span><span class="sxs-lookup"><span data-stu-id="1a345-228">Use the source column names and table names in the <xref:System.Data.DataSet> if no mapping is present.</span></span>|  
|`MissingMappingAction.Ignore`|<span data-ttu-id="1a345-229"><xref:System.SystemException> が生成されます。</span><span class="sxs-lookup"><span data-stu-id="1a345-229">A <xref:System.SystemException> is generated.</span></span> <span data-ttu-id="1a345-230">マッピングが明示的に設定されている場合、入力パラメーターのマッピングが不足していると、通常はエラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="1a345-230">When the mappings are explicitly set, a missing mapping for an input parameter is usually caused by an error.</span></span>|  
|`MissingMappingAction.Error`|<span data-ttu-id="1a345-231"><xref:System.SystemException> が生成されます。</span><span class="sxs-lookup"><span data-stu-id="1a345-231">A <xref:System.SystemException> is generated.</span></span>|  
  
 <span data-ttu-id="1a345-232">`SourceColumn` プロパティは、出力パラメーターまたは入出力パラメーターの値を `DataSet`にマップするためにも使用されます。</span><span class="sxs-lookup"><span data-stu-id="1a345-232">The `SourceColumn` property is also used to map the value for output or input/output parameters back to the `DataSet`.</span></span> <span data-ttu-id="1a345-233">存在しない列を参照している場合は、例外が生成されます。</span><span class="sxs-lookup"><span data-stu-id="1a345-233">An exception is generated if it refers to a nonexistent column.</span></span>  
  
 <span data-ttu-id="1a345-234">.NET Framework データプロバイダーの `Parameter` クラスの `SourceVersion` プロパティは、列の値の `Original`、`Current`、または `Proposed` バージョンのどちらを使用するかを決定します。</span><span class="sxs-lookup"><span data-stu-id="1a345-234">The `SourceVersion` property of a .NET Framework data provider's `Parameter` class determines whether to use the `Original`, `Current`, or `Proposed` version of the column value.</span></span> <span data-ttu-id="1a345-235">この機能は、オプティミスティック同時実行制御違反を確認するために、UPDATE ステートメントの WHERE 句に元の値を含めるために頻繁に使用されます。</span><span class="sxs-lookup"><span data-stu-id="1a345-235">This capability is frequently used to include original values in the WHERE clause of an UPDATE statement to check for optimistic concurrency violations.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1a345-236">行の更新中にエラーが発生した場合は、例外がスローされ、更新の実行が中止されます。</span><span class="sxs-lookup"><span data-stu-id="1a345-236">If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued.</span></span> <span data-ttu-id="1a345-237">エラーが発生したときに例外を生成せずに更新操作を続行するには、<xref:System.Data.Common.DbDataAdapter.Update%2A>を呼び出す前に、<xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> プロパティを `true` に設定します。</span><span class="sxs-lookup"><span data-stu-id="1a345-237">To continue the update operation without generating exceptions when an error is encountered, set the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property to `true` before calling <xref:System.Data.Common.DbDataAdapter.Update%2A>.</span></span> <span data-ttu-id="1a345-238">また、DataAdapter の `RowUpdated` イベント内の行ごとにエラーに対応することもできます。</span><span class="sxs-lookup"><span data-stu-id="1a345-238">You may also respond to errors on a per-row basis within the `RowUpdated` event of a DataAdapter.</span></span> <span data-ttu-id="1a345-239">`RowUpdated` イベント内に例外を生成せずに更新操作を続行するには、<xref:System.Data.Common.RowUpdatedEventArgs> の <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> プロパティを <xref:System.Data.UpdateStatus.Continue>に設定します。</span><span class="sxs-lookup"><span data-stu-id="1a345-239">To continue the update operation without generating an exception within the `RowUpdated` event, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus.Continue>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a345-240">次の例では、<xref:System.Data.OleDb.OleDbDataAdapter>の派生クラスを使用して、データソースを <xref:System.Data.Common.DataAdapter.Update%2A> します。</span><span class="sxs-lookup"><span data-stu-id="1a345-240">The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to <xref:System.Data.Common.DataAdapter.Update%2A> the data source.</span></span> <span data-ttu-id="1a345-241">この例では、<xref:System.Data.OleDb.OleDbDataAdapter> と <xref:System.Data.DataSet>が作成されていることを前提としています。</span><span class="sxs-lookup"><span data-stu-id="1a345-241">This example assumes that you have created an <xref:System.Data.OleDb.OleDbDataAdapter> and a <xref:System.Data.DataSet>.</span></span>  
  
 [!code-csharp[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.DBConcurrencyException"><span data-ttu-id="1a345-242">INSERT、UPDATE、DELETE の各ステートメントを実行しようとしましたが、影響を受けたレコードはありませんでした。</span><span class="sxs-lookup"><span data-stu-id="1a345-242">An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
