<Type Name="Button" FullName="System.Web.UI.WebControls.Button">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4759236d13aa7e3d69815b119d738cbb5100c00a" /><Meta Name="ms.sourcegitcommit" Value="a8ff98b48bda124cfcb2605f5da9b21bc6dcd791" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/14/2020" /><Meta Name="ms.locfileid" Value="77244825" /></Metadata><TypeSignature Language="C#" Value="public class Button : System.Web.UI.WebControls.WebControl, System.Web.UI.IPostBackEventHandler, System.Web.UI.WebControls.IButtonControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Button extends System.Web.UI.WebControls.WebControl implements class System.Web.UI.IPostBackEventHandler, class System.Web.UI.WebControls.IButtonControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.Button" />
  <TypeSignature Language="VB.NET" Value="Public Class Button&#xA;Inherits WebControl&#xA;Implements IButtonControl, IPostBackEventHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class Button : System::Web::UI::WebControls::WebControl, System::Web::UI::IPostBackEventHandler, System::Web::UI::WebControls::IButtonControl" />
  <TypeSignature Language="F#" Value="type Button = class&#xA;    inherit WebControl&#xA;    interface IButtonControl&#xA;    interface IPostBackEventHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IPostBackEventHandler</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.WebControls.IButtonControl</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Click")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Text")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.ButtonDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Web.UI.DataBindingHandler("System.Web.UI.Design.TextDataBindingHandler, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Web.UI.SupportsEventValidation</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Web.UI.ToolboxData("&lt;{0}:Button runat="server" Text="Button"&gt;&lt;/{0}:Button&gt;")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.ButtonDesigner, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.Web.UI.DataBindingHandler("System.Web.UI.Design.TextDataBindingHandler, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.Web.UI.ToolboxData("&lt;{0}:Button runat=server Text="Button"&gt;&lt;/{0}:Button&gt;")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.ButtonDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.Web.UI.DataBindingHandler("System.Web.UI.Design.TextDataBindingHandler, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Web ページにプッシュ ボタン コントロールを表示します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 このトピックの内容:

-   [はじめに](#Introduction)

-   [ボタンのポストバック動作とサーバーイベント](#ButtonPostbackBehaviorandServerEvents)

-   [クライアントスクリプトでのボタンイベントの処理](#HandlingButtonEventsinClientScript)

-   [ボタンコントロールと検証](#ButtonControlsAndValidation)

-   [データコントロールのボタン](#ButtonsInDataControls)

-   [コントロールへのデータのバインド](#BindingDataToTheControls)

-   [UpdatePanel コントロールでのボタンの使用](#UsingButtonsWithUpdatePanelControls)

-   [宣言型の構文](#DeclarativeSyntax)

<a name="Introduction"></a>
## <a name="introduction"></a>はじめに
 <xref:System.Web.UI.WebControls.Button> コントロールを使用して Web ページにプッシュボタンを作成し、ユーザーがページをサーバーにポストできるようにします。 コントロールは、ポストバックに応答するために処理できるサーバーコードでイベントをトリガーします。 また、クライアントスクリプトでイベントを発生させることもできます。これは、ページがポストされる前、またはページの送信を実行してからページの送信をキャンセルする前に処理することができます。

> [!NOTE]
>  ASP.NET には、いくつかの種類のボタンコントロールが含まれており、それぞれが Web ページで異なる方法で表示されます。 これらは、プッシュボタンとしてレンダリングされる <xref:System.Web.UI.WebControls.Button> コントロールです。リンクとして表示される <xref:System.Web.UI.WebControls.LinkButton> コントロール。<xref:System.Web.UI.WebControls.ImageButton> コントロールで、イメージとしてレンダリングされます。および <xref:System.Web.UI.WebControls.ImageMap> コントロールを使用すると、ユーザーがクリックできるホットスポットを持つグラフィックを作成できます。 既定では、クリックすると、すべてのボタンコントロールがページを送信します。 また、<xref:System.Web.UI.HtmlControls.HtmlButton> および <xref:System.Web.UI.HtmlControls.HtmlInputButton> コントロールを使用して、サーバーコードでプログラミング可能なボタンをページに作成することもできます。 HTML と Web サーバーコントロールの違いの詳細については、「 [ASP.NET Web サーバーコントロールの概要](https://msdn.microsoft.com/library/0d4854a3-6e79-4b7b-a27f-ac57cd9c2a84)」を参照してください。

 既定では、<xref:System.Web.UI.WebControls.Button> コントロールは [送信] ボタンです。 [送信] ボタンには、ボタンに関連付けられたコマンド名 (<xref:System.Web.UI.WebControls.Button.CommandName%2A> プロパティで指定) がないため、Web ページがサーバーにポストされます。 <xref:System.Web.UI.WebControls.Button.Click> イベントのイベントハンドラーを指定して、[送信] ボタンをクリックしたときに実行されるアクションをプログラムで制御できます。

 コマンドボタンには、<xref:System.Web.UI.WebControls.Button.CommandName%2A> プロパティを設定することによって、`Sort`などのボタンに関連付けられたコマンド名があります。 これにより、Web ページ上に複数の <xref:System.Web.UI.WebControls.Button> コントロールを作成し、どの <xref:System.Web.UI.WebControls.Button> コントロールがクリックされているかをプログラムで判断できます。 また、コマンドボタンと共に <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> プロパティを使用して、`Ascending`など、実行するコマンドに関する追加情報を指定することもできます。 <xref:System.Web.UI.WebControls.Button.Command> イベントのイベントハンドラーを指定すると、コマンドボタンをクリックしたときに実行されるアクションをプログラムで制御できます。

<a name="ButtonPostbackBehaviorandServerEvents"></a>
## <a name="button-postback-behavior-and-server-events"></a>ボタンのポストバック動作とサーバーイベント
 ユーザーが Web サーバーコントロールボタンをクリックすると、そのページがサーバーに送信されます。 これにより、Web ページが処理され、保留中のイベントがサーバーベースのコードで発生します。 すべてのページとコントロールの処理が完了すると、ページがブラウザーに再び表示されます。

 ボタンを使用すると、独自の <xref:System.Web.UI.WebControls.Button.Click> イベントや <xref:System.Web.UI.WebControls.Button.Command> イベントを発生させることができます。このイベントは、サーバーベースのコードを使用して処理できます。 これは、従来の HTML ページやクライアントベースの Web アプリケーションのイベントとは異なり、ボタンの `onclick` イベントは、クライアントで実行される JavaScript を使用して処理されます。 詳細については、「 [ASP.NET Web フォームサーバーコントロールイベントモデル](https://docs.microsoft.com/previous-versions/aspnet/y3bwdsh3(v=vs.100))」を参照してください。

 ユーザーがボタンコントロールをクリックすると、ページがサーバーにポストバックされます。 既定では、ページは自動的にポストバックされます。

 現在のページを別のページに投稿するためのボタンを構成できます。 これは、複数ページのフォームを作成する場合に便利です。 詳細については、「 [ASP.NET Web Forms でのページ間の投稿](https://msdn.microsoft.com/library/fedf234e-b7c4-4644-a9e8-c1c0870b043b)」を参照してください。

<a name="HandlingButtonEventsinClientScript"></a>
## <a name="handling-button-events-in-client-script"></a>クライアントスクリプトでのボタンイベントの処理
 ボタンコントロールは、サーバーイベントとクライアントイベントの両方を発生させることができます。 サーバーイベントはポストバック後に発生し、ページに対して記述するサーバー側のコードで処理されます。 クライアントイベントはクライアントスクリプト (通常は ECMAScript (JavaScript)) で処理され、ページが送信される前に発生します。 クライアント側のイベントを ASP.NET button コントロールに追加することで、ページを送信する前に確認ダイアログボックスを表示するなどのタスクを実行したり、送信をキャンセルすることができます。 詳細については、「 [ASP.NET Web ページのクライアントスクリプト](https://docs.microsoft.com/previous-versions/aspnet/3hc29e2a(v=vs.100))」および「[方法: クライアントスクリプトでボタン Web サーバーコントロールイベントに応答する](https://msdn.microsoft.com/library/1ab97f0b-1c38-4897-85b0-ac915f6a182b)」を参照してください。

 また、<xref:System.Web.UI.WebControls.Button> コントロールでもクライアントスクリプトを使用して、HTTP POST 操作を実行するのではなく、ポストバックを実行することもできます。 これは、ページ上の他の要素に接続するなど、プログラムによってポストバックを操作する場合に便利です。 <xref:System.Web.UI.WebControls.Button> コントロールの <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> プロパティを `true` に設定して、<xref:System.Web.UI.WebControls.Button> コントロールでクライアントとスクリプトに基づくポストバックを使用することができます。

<a name="ButtonControlsAndValidation"></a>
## <a name="button-controls-and-validation"></a>ボタンコントロールと検証
 ページに ASP.NET バリデーターコントロールが含まれている場合、既定では、ボタンコントロールをクリックすると、検証コントロールのチェックが実行されます。 検証コントロールでクライアント側の検証が有効になっている場合、検証チェックに失敗した場合、ページは送信されません。

 次の表では、検証プロセスをより正確に制御できるようにする、ボタンコントロールでサポートされるプロパティについて説明します。

|プロパティ|説明|
|--------------|-----------------|
|<xref:System.Web.UI.WebControls.Button.CausesValidation%2A>|ボタンをクリックしても検証チェックを実行するかどうかを指定します。 検証チェックが行われないようにするには、このプロパティを `false` に設定します。|
|<xref:System.Web.UI.WebControls.Button.ValidationGroup%2A>|ボタンがクリックされたときに、ページ上の検証コントロールを呼び出すかを指定できます。 検証グループが確立されていない場合、ボタンをクリックすると、ページ上のすべての検証コントロールが呼び出されます。|

 詳細については、「[ASP.NET Web ページにおけるユーザー入力の検証](https://msdn.microsoft.com/library/4ad3dacb-89e0-4cee-89ac-40a3f2a85461)」を参照してください。

<a name="ButtonsInDataControls"></a>
## <a name="buttons-in-data-controls"></a>データコントロールのボタン
 ボタン Web サーバーコントロールは、<xref:System.Web.UI.WebControls.DataList>、<xref:System.Web.UI.WebControls.GridView>、<xref:System.Web.UI.WebControls.Repeater> リストコントロールなどのデータコントロールでよく使用されます。 このような場合は、通常、ボタンクリックイベントに直接応答しません。 代わりに、データコントロールのボタンによって、データコントロールに固有のイベントが発生します。 たとえば、<xref:System.Web.UI.WebControls.DataList> コントロールでは、ボタンによって、<xref:System.Web.UI.WebControls.Button> コントロールの <xref:System.Web.UI.WebControls.Button.Click> イベントを発生させる代わりに、<xref:System.Web.UI.WebControls.DataList> コントロールの <xref:System.Web.UI.WebControls.DataList.ItemCommand> イベントが発生することがあります。

 データバインドリストコントロールには多くのボタンを含めることができるため、ボタンの <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> プロパティを設定して、イベントの一部として渡す値を指定できます。 この引数をテストして、どのボタンがクリックされたかを確認できます。

<a name="BindingDataToTheControls"></a>
## <a name="binding-data-to-the-controls"></a>コントロールへのデータのバインド
 プロパティ設定を動的に制御するために、ボタン Web サーバーコントロールをデータソースにバインドできます。 たとえば、データバインディングを使用して、ボタンの <xref:System.Web.UI.WebControls.Button.Text%2A> プロパティを設定できます。

<a name="UsingButtonsWithUpdatePanelControls"></a>
## <a name="using-buttons-with-updatepanel-controls"></a>UpdatePanel コントロールでのボタンの使用
 部分ページレンダリングを使用すると、ポストバックを使用せずにページの一部を更新できます。 <xref:System.Web.UI.UpdatePanel> コントロールを使用すると、部分ページレンダリングに参加するページの部分をマークできます。 既定では、<xref:System.Web.UI.WebControls.Button> コントロールを含む、<xref:System.Web.UI.UpdatePanel> コントロール内のコントロールの動作は、ポストバックではなく非同期ポストバックを実行します。 これにより、ポストバック元の <xref:System.Web.UI.UpdatePanel> コントロールの内容のみが更新されます。

 <xref:System.Web.UI.UpdatePanel> コントロール内にある <xref:System.Web.UI.WebControls.Button> コントロールのシナリオに加えて、次のシナリオでは、<xref:System.Web.UI.WebControls.Button> コントロールと <xref:System.Web.UI.UpdatePanel> コントロールを使用できます。

-   そのパネルの <xref:System.Web.UI.AsyncPostBackTrigger> コントロールとして <xref:System.Web.UI.UpdatePanel> コントロールの外側にある <xref:System.Web.UI.WebControls.Button> コントロールを定義する。 ボタンがクリックされると、非同期ポストバックが実行され、パネルの内容が更新されます。

-   パネルの <xref:System.Web.UI.PostBackTrigger> として <xref:System.Web.UI.UpdatePanel> コントロール内にある <xref:System.Web.UI.WebControls.Button> コントロールを定義する。 このボタンをクリックすると、<xref:System.Web.UI.UpdatePanel> コントロール内にある場合でもポストバックが実行されます。

 部分ページレンダリングと <xref:System.Web.UI.UpdatePanel> コントロールの使用の詳細については、「 [UpdatePanel コントロールの概要](https://docs.microsoft.com/previous-versions/aspnet/bb386454(v=vs.100))」および「[部分ページレンダリングの概要](https://docs.microsoft.com/previous-versions/aspnet/bb386573(v=vs.100))」を参照してください。

<a name="DeclarativeSyntax"></a>
## <a name="declarative-syntax"></a>宣言型の構文

```
<asp:Button
    AccessKey="string"
    BackColor="color name|#dddddd"
    BorderColor="color name|#dddddd"
    BorderStyle="NotSet|None|Dotted|Dashed|Solid|Double|Groove|Ridge|
        Inset|Outset"
    BorderWidth="size"
    CausesValidation="True|False"
    CommandArgument="string"
    CommandName="string"
    CssClass="string"
    Enabled="True|False"
    EnableTheming="True|False"
    EnableViewState="True|False"
    Font-Bold="True|False"
    Font-Italic="True|False"
    Font-Names="string"
    Font-Overline="True|False"
    Font-Size="string|Smaller|Larger|XX-Small|X-Small|Small|Medium|
        Large|X-Large|XX-Large"
    Font-Strikeout="True|False"
    Font-Underline="True|False"
    ForeColor="color name|#dddddd"
    Height="size"
    ID="string"
    OnClick="Click event handler"
    OnClientClick="string"
    OnCommand="Command event handler"
    OnDataBinding="DataBinding event handler"
    OnDisposed="Disposed event handler"
    OnInit="Init event handler"
    OnLoad="Load event handler"
    OnPreRender="PreRender event handler"
    OnUnload="Unload event handler"
    PostBackUrl="uri"
    runat="server"
    SkinID="string"
    Style="string"
    TabIndex="integer"
    Text="string"
    ToolTip="string"
    UseSubmitBehavior="True|False"
    ValidationGroup="string"
    Visible="True|False"
    Width="size"
/>
```



## Examples
 次のコード例は、Web ページの内容をサーバーにポストバックする送信 <xref:System.Web.UI.WebControls.Button> コントロールを作成する方法を示しています。

 [!code-aspx-csharp[Classic Button Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic Button Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic Button Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic Button Example/VB/sourcevb.aspx#1)]

 リストを並べ替えるコマンド <xref:System.Web.UI.WebControls.Button> コントロールを作成する方法を次のコード例に示します。

 [!code-aspx-csharp[ButtonCommandNameArgument#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommandNameArgument/CS/buttoncommandnamecs.aspx#1)]
 [!code-aspx-vb[ButtonCommandNameArgument#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommandNameArgument/VB/buttoncommandnamevb.aspx#1)]

 ]]></format>
    </remarks>
    <altmember cref="P:System.Web.UI.WebControls.Button.CommandName" />
    <altmember cref="P:System.Web.UI.WebControls.Button.CommandArgument" />
    <altmember cref="E:System.Web.UI.WebControls.Button.Click" />
    <altmember cref="E:System.Web.UI.WebControls.Button.Command" />
    <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">ボタン Web サーバーコントロール</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Button ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Button();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.Button" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 このコンストラクターを使用して、<xref:System.Web.UI.WebControls.Button> クラスの新しいインスタンスを作成し、初期化します。



## Examples
 次のコード例は、<xref:System.Web.UI.WebControls.Button> クラスの新しいインスタンスを作成して初期化する方法を示しています。

 [!code-aspx-csharp[ButtonCtor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCtor/CS/buttonctorcs.aspx#1)]
 [!code-aspx-vb[ButtonCtor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCtor/VB/buttonctorvb.aspx#1)]

 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">ボタン Web サーバーコントロール</related>
      </Docs>
    </Member>
    <Member MemberName="AddAttributesToRender">
      <MemberSignature Language="C#" Value="protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddAttributesToRender(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub AddAttributesToRender (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void AddAttributesToRender(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.AddAttributesToRender : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="button.AddAttributesToRender writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">クライアントに表示する出力ストリームを格納している <see cref="T:System.Web.UI.HtmlTextWriter" />。</param>
        <summary><see cref="T:System.Web.UI.WebControls.Button" /> コントロールの属性を、クライアントに表示する出力ストリームに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 次のコード例は、<xref:System.Web.UI.WebControls.Button> テキストが常に赤で表示されるように、カスタムサーバーコントロールの <xref:System.Web.UI.WebControls.Button.AddAttributesToRender%2A> メソッドをオーバーライドする方法を示しています。

 [!code-aspx-csharp[CustomButtonAddAttributesToRender#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomButtonAddAttributesToRender/CS/custombuttonaddattributestorendercs.aspx#1)]
 [!code-aspx-vb[CustomButtonAddAttributesToRender#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomButtonAddAttributesToRender/VB/custombuttonaddattributestorendervb.aspx#1)]
[!code-csharp[CustomButtonAddAttributesToRender#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomButtonAddAttributesToRender/CS/custombuttonaddattributestorender.cs#2)]
[!code-vb[CustomButtonAddAttributesToRender#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomButtonAddAttributesToRender/VB/custombuttonaddattributestorender.vb#2)]

 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">ボタン Web サーバーコントロール</related>
      </Docs>
    </Member>
    <Member MemberName="CausesValidation">
      <MemberSignature Language="C#" Value="public bool CausesValidation { get; set; }" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CausesValidation" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.CausesValidation" />
      <MemberSignature Language="VB.NET" Value="Public Property CausesValidation As Boolean" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CausesValidation { bool get(); void set(bool value); };" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="member this.CausesValidation : bool with get, set" Usage="System.Web.UI.WebControls.Button.CausesValidation" />
      <MemberSignature Language="C#" Value="public virtual bool CausesValidation { get; set; }" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CausesValidation As Boolean" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CausesValidation { bool get(); void set(bool value); };" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IButtonControl.CausesValidation</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.Button" /> コントロールがクリックされたときに検証を実行するかどうかを示す値を取得または設定します。</summary>
        <value><see langword="true" /> コントロールがクリックされたときに検証を実行する場合は <see cref="T:System.Web.UI.WebControls.Button" />、それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 既定では、<xref:System.Web.UI.WebControls.Button> コントロールがクリックされると、ページの検証が実行されます。 ページの検証では、ページ上の検証コントロールに関連付けられている入力コントロールが、検証コントロールによって指定された検証規則に合格するかどうかを判断します。

 <xref:System.Web.UI.WebControls.Button.CausesValidation%2A> プロパティを使用して <xref:System.Web.UI.WebControls.Button> コントロールがクリックされたときに、クライアントとサーバーの両方で検証を実行するかどうかを指定したり、指定したりすることができます。 検証が実行されないようにするには、<xref:System.Web.UI.WebControls.Button.CausesValidation%2A> プロパティを `false`に設定します。

> [!NOTE]
>  <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> プロパティを使用して別のページにポストバックする場合は、<xref:System.Web.UI.WebControls.Button.CausesValidation%2A> プロパティを `false` に設定する必要があります。 別のページにポストバックする場合は、検証を明示的に確認する必要があります。 例については、<xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> プロパティの「解説」を参照してください。

 このプロパティは、`reset` または `clear` ボタンをクリックしたときに検証が実行されないようにするために、通常は `false` に設定されます。

 <xref:System.Web.UI.WebControls.Button.CausesValidation%2A> プロパティの値が `true`に設定されている場合は、<xref:System.Web.UI.WebControls.Button.ValidationGroup%2A> プロパティを使用して、<xref:System.Web.UI.WebControls.Button> コントロールで検証が行われる検証グループの名前を指定することもできます。

 このプロパティは、テーマまたはスタイル シート テーマによって設定することはできません。 詳細については、「<xref:System.Web.UI.ThemeableAttribute> and [ASP.NET theme And スキン](https://docs.microsoft.com/previous-versions/aspnet/ykzx33wh(v=vs.100))」を参照してください。



## Examples
 次のコード例は、<xref:System.Web.UI.WebControls.Button.CausesValidation%2A> プロパティを使用して、ページの検証を行わないようにする方法を示しています。 <xref:System.Web.UI.WebControls.BaseValidator.Validate%2A> メソッドは各検証コントロールを個別にアクティブ化することに注意してください。

> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[スクリプトによる攻略の概要](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))」を参照してください。

 [!code-aspx-csharp[ButtonControlCausesValidation#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonControlCausesValidation/CS/buttoncausesvalidationcs.aspx#1)]
 [!code-aspx-vb[ButtonControlCausesValidation#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonControlCausesValidation/VB/buttoncausesvalidationvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.Validate" />
        <altmember cref="P:System.Web.UI.WebControls.Button.ValidationGroup" />
        <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">ボタン Web サーバーコントロール</related>
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event EventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.Button.Click" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Click As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Click;" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="member this.Click : EventHandler " Usage="member this.Click : System.EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ Click;" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.UI.WebControls.IButtonControl.Click</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.Button" /> コントロールがクリックされたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.Button> コントロールがクリックされると、<xref:System.Web.UI.WebControls.Button.Click> イベントが発生します。 このイベントは、<xref:System.Web.UI.WebControls.Button> コントロールにコマンド名が関連付けられていない場合によく使用されます (たとえば、[送信] ボタンを使用した場合)。

 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。



## Examples
 次のコード例は、<xref:System.Web.UI.WebControls.Button> コントロールがクリックされたときに Web ページにメッセージを表示するために、<xref:System.Web.UI.WebControls.Button.Click> イベントのイベントハンドラーを指定してコーディングする方法を示しています。

 [!code-aspx-csharp[ButtonClickText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonClickText/cs/ButtonClickCS.aspx#1)]
 [!code-aspx-vb[ButtonClickText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonClickText/vb/ButtonClickVB.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.Button.OnClick(System.EventArgs)" />
        <altmember cref="T:System.Web.UI.WebControls.CommandEventHandler" />
        <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">ボタン Web サーバーコントロール</related>
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.CommandEventHandler Command;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.CommandEventHandler Command" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.Button.Command" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Command As CommandEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::CommandEventHandler ^ Command;" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="member this.Command : System.Web.UI.WebControls.CommandEventHandler " Usage="member this.Command : System.Web.UI.WebControls.CommandEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Web::UI::WebControls::CommandEventHandler ^ Command;" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.UI.WebControls.IButtonControl.Command</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.CommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.Button" /> コントロールがクリックされたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.Button> コントロールがクリックされると、<xref:System.Web.UI.WebControls.Button.Command> イベントが発生します。 このイベントは、`Sort`などのコマンド名が <xref:System.Web.UI.WebControls.Button> コントロールに関連付けられている場合によく使用されます。 これにより、Web ページ上に複数の <xref:System.Web.UI.WebControls.Button> コントロールを作成し、どの <xref:System.Web.UI.WebControls.Button> コントロールがクリックされているかをプログラムで判断できます。

> [!NOTE]
>  <xref:System.Web.UI.WebControls.Button.Command> イベントは、`BubbleEvent`の形式でコントロール階層を介して発生します。

 イベントを処理する方法の詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。



## Examples
 次のコード例では、<xref:System.Web.UI.WebControls.Button> コントロールがクリックされたときにリストを並べ替える <xref:System.Web.UI.WebControls.Button.Command> イベントのイベントハンドラーを指定し、コーディングする方法を示します。 この例では、<xref:System.Web.UI.WebControls.Button> コントロールの <xref:System.Web.UI.WebControls.Button.OnClick%2A> プロパティを使用して、イベントハンドラーを宣言によって指定します。

 [!code-aspx-csharp[ButtonCommandNameArgument#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommandNameArgument/CS/buttoncommandnamecs.aspx#1)]
 [!code-aspx-vb[ButtonCommandNameArgument#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommandNameArgument/VB/buttoncommandnamevb.aspx#1)]

 次のコード例では、イベントハンドラーを指定し、`Page_Load` メソッドのイベントにプログラムで追加する方法を示します。

 [!code-aspx-csharp[ButtonCommand#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommand/CS/buttoncommandcs.aspx#1)]
 [!code-aspx-vb[ButtonCommand#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommand/VB/buttoncommandvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.Button.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" />
        <altmember cref="T:System.Web.UI.WebControls.CommandEventHandler" />
        <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">ボタン Web サーバーコントロール</related>
      </Docs>
    </Member>
    <Member MemberName="CommandArgument">
      <MemberSignature Language="C#" Value="public string CommandArgument { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CommandArgument" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.CommandArgument" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandArgument As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CommandArgument { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommandArgument : string with get, set" Usage="System.Web.UI.WebControls.Button.CommandArgument" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IButtonControl.CommandArgument</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>関連付けられている <see cref="E:System.Web.UI.WebControls.Button.Command" /> と共に <see cref="P:System.Web.UI.WebControls.Button.CommandName" /> イベントに渡された省略可能なパラメーターを取得または設定します。</summary>
        <value>関連付けられている<see cref="E:System.Web.UI.WebControls.Button.Command" /> と共に <see cref="P:System.Web.UI.WebControls.Button.CommandName" /> イベントに渡された省略可能なパラメーター。 既定値は <see cref="F:System.String.Empty" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.Button.CommandName%2A> プロパティを補完するパラメーターを指定するには、<xref:System.Web.UI.WebControls.Button.CommandArgument%2A> プロパティを使用します。

> [!NOTE]
>  <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> プロパティを単独で設定することもできますが、通常は <xref:System.Web.UI.WebControls.Button.CommandName%2A> プロパティも設定されている場合にのみ使用されます。

 <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> プロパティは、実行するコマンドに関する追加情報を提供できるようにすることで、<xref:System.Web.UI.WebControls.Button.CommandName%2A> プロパティを補完します。 たとえば、<xref:System.Web.UI.WebControls.Button.CommandName%2A> プロパティを `Sort` に設定し、<xref:System.Web.UI.WebControls.Button.CommandArgument%2A> プロパティを `Ascending`に設定した場合は、昇順で並べ替えるコマンドを指定します。

 このプロパティは、テーマまたはスタイル シート テーマによって設定することはできません。 詳細については、「<xref:System.Web.UI.ThemeableAttribute> and [ASP.NET theme And スキン](https://docs.microsoft.com/previous-versions/aspnet/ykzx33wh(v=vs.100))」を参照してください。



## Examples
 次のコード例では、<xref:System.Web.UI.WebControls.Button.CommandArgument%2A> プロパティを使用して、リストを昇順に並べ替える <xref:System.Web.UI.WebControls.Button> コントロールを作成する方法を示します。

 [!code-aspx-csharp[ButtonCommandNameArgument#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommandNameArgument/CS/buttoncommandnamecs.aspx#1)]
 [!code-aspx-vb[ButtonCommandNameArgument#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommandNameArgument/VB/buttoncommandnamevb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.Button.Command" />
        <altmember cref="M:System.Web.UI.WebControls.Button.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" />
        <altmember cref="P:System.Web.UI.WebControls.Button.CommandName" />
        <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">ボタン Web サーバーコントロール</related>
      </Docs>
    </Member>
    <Member MemberName="CommandName">
      <MemberSignature Language="C#" Value="public string CommandName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CommandName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.CommandName" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CommandName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommandName : string with get, set" Usage="System.Web.UI.WebControls.Button.CommandName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IButtonControl.CommandName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.Button" /> イベントに渡された <see cref="E:System.Web.UI.WebControls.Button.Command" /> コントロールに関連付けられているコマンド名を取得または設定します。</summary>
        <value><see cref="T:System.Web.UI.WebControls.Button" /> コントロールのコマンド名。 既定値は <see cref="F:System.String.Empty" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Web ページに複数の <xref:System.Web.UI.WebControls.Button> コントロールがある場合は、<xref:System.Web.UI.WebControls.Button.CommandName%2A> プロパティを使用して、各 <xref:System.Web.UI.WebControls.Button> コントロールに関連付けられているコマンド名を指定または確認します。 実行するコマンドを識別する任意の文字列を使用して、<xref:System.Web.UI.WebControls.Button.CommandName%2A> プロパティを設定できます。 その後、プログラムを使用して <xref:System.Web.UI.WebControls.Button> コントロールのコマンド名を決定し、適切な操作を実行できます。

 `Ascending`など、コマンドに関する追加情報は、<xref:System.Web.UI.WebControls.Button.CommandArgument%2A> プロパティを使用して指定できます。

 このプロパティは、テーマまたはスタイル シート テーマによって設定することはできません。 詳細については、「<xref:System.Web.UI.ThemeableAttribute> and [ASP.NET theme And スキン](https://docs.microsoft.com/previous-versions/aspnet/ykzx33wh(v=vs.100))」を参照してください。



## Examples
 次のコード例は、<xref:System.Web.UI.WebControls.Button.CommandName%2A> プロパティを使用して、リストを並べ替える <xref:System.Web.UI.WebControls.Button> コントロールを作成する方法を示しています。

 [!code-aspx-csharp[ButtonCommandNameArgument#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommandNameArgument/CS/buttoncommandnamecs.aspx#1)]
 [!code-aspx-vb[ButtonCommandNameArgument#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommandNameArgument/VB/buttoncommandnamevb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.Button.Command" />
        <altmember cref="M:System.Web.UI.WebControls.Button.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" />
        <altmember cref="P:System.Web.UI.WebControls.Button.CommandArgument" />
        <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">ボタン Web サーバーコントロール</related>
      </Docs>
    </Member>
    <Member MemberName="GetPostBackOptions">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.PostBackOptions GetPostBackOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.PostBackOptions GetPostBackOptions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.GetPostBackOptions" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetPostBackOptions () As PostBackOptions" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::PostBackOptions ^ GetPostBackOptions();" />
      <MemberSignature Language="F#" Value="abstract member GetPostBackOptions : unit -&gt; System.Web.UI.PostBackOptions&#xA;override this.GetPostBackOptions : unit -&gt; System.Web.UI.PostBackOptions" Usage="button.GetPostBackOptions " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.PostBackOptions</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.PostBackOptions" /> コントロールのポストバック動作を表す <see cref="T:System.Web.UI.WebControls.Button" /> オブジェクトを作成します。</summary>
        <returns><see cref="T:System.Web.UI.PostBackOptions" /> コントロールのポストバック動作を表す <see cref="T:System.Web.UI.WebControls.Button" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.Button.GetPostBackOptions%2A> メソッドは、<xref:System.Web.UI.WebControls.Button> コントロールのポストバック動作を表す <xref:System.Web.UI.PostBackOptions> オブジェクトを作成します。 <xref:System.Web.UI.PostBackOptions> オブジェクトは通常、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%29?displayProperty=nameWithType> メソッドに渡されます。このメソッドは、呼び出されたときにサーバーがページにポストバックするクライアント側のスクリプト関数への参照を取得するために使用されます。

 このメソッドは、主にコントロールの開発者が <xref:System.Web.UI.WebControls.Button> クラスを拡張するときに使用されます。

 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスの <see cref="M:System.Web.UI.WebControls.Button.GetPostBackOptions" /> メソッドをオーバーライドして、ボタンコントロールのポストバックオプションを変更したり、ボタンがクリックされたときにクライアント側スクリプトを呼び出したりすることができます。 基本クラスの <see cref="M:System.Web.UI.WebControls.Button.GetPostBackOptions" /> メソッドを呼び出して、標準のポストバックオプションが設定されるようにしてください。</para></block>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
        <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">ボタン Web サーバーコントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/3hc29e2a(v=vs.100)">ASP.NET Web ページのクライアントスクリプト</related>
      </Docs>
    </Member>
    <Member MemberName="OnClick">
      <MemberSignature Language="C#" Value="protected virtual void OnClick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.OnClick(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClick (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClick(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnClick : EventArgs -&gt; unit&#xA;override this.OnClick : EventArgs -&gt; unit" Usage="button.OnClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベントのデータ。</param>
        <summary><see cref="E:System.Web.UI.WebControls.Button.Click" /> コントロールの <see cref="T:System.Web.UI.WebControls.Button" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.Button> コントロールがクリックされると、<xref:System.Web.UI.WebControls.Button.Click> イベントが発生します。 このイベントは、<xref:System.Web.UI.WebControls.Button> コントロールにコマンド名が関連付けられていない場合によく使用されます (たとえば、[送信] ボタンを使用した場合)。

 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。

 <xref:System.Web.UI.WebControls.Button.OnClick%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。



## Examples
 次のコード例は、Web ページに単純なメッセージを表示するために、<xref:System.Web.UI.WebControls.Button.Click> イベントのイベントハンドラーを指定してコーディングする方法を示しています。

 [!code-aspx-csharp[ButtonClickText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonClickText/cs/ButtonClickCS.aspx#1)]
 [!code-aspx-vb[ButtonClickText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonClickText/vb/ButtonClickVB.aspx#1)]

 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Web.UI.WebControls.Button.OnClick(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Web.UI.WebControls.Button.OnClick(System.EventArgs)" /> メソッドを呼び出してください。</para></block>
        <altmember cref="E:System.Web.UI.WebControls.Button.Click" />
        <altmember cref="T:System.EventArgs" />
        <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">ボタン Web サーバーコントロール</related>
      </Docs>
    </Member>
    <Member MemberName="OnClientClick">
      <MemberSignature Language="C#" Value="public virtual string OnClientClick { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OnClientClick" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.OnClientClick" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property OnClientClick As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ OnClientClick { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OnClientClick : string with get, set" Usage="System.Web.UI.WebControls.Button.OnClientClick" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.Button" /> コントロールの <see cref="E:System.Web.UI.WebControls.Button.Click" /> イベントが発生したときに実行されるクライアント側スクリプトを取得または設定します。</summary>
        <value><see cref="T:System.Web.UI.WebControls.Button" /> コントロールの <see cref="E:System.Web.UI.WebControls.Button.Click" /> イベントが発生したときに実行されるクライアント側スクリプト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.Button> コントロールの <xref:System.Web.UI.WebControls.Button.Click> イベントが発生したときに実行される追加のクライアント側スクリプトを指定するには、<xref:System.Web.UI.WebControls.Button.OnClientClick%2A> プロパティを使用します。 このプロパティに指定したスクリプトは、コントロールの定義済みのクライアント側スクリプトに加えて、<xref:System.Web.UI.WebControls.Button> コントロールの `OnClick` 属性に表示されます。

 このプロパティは、テーマまたはスタイル シート テーマによって設定することはできません。 詳細については、「<xref:System.Web.UI.ThemeableAttribute> and [ASP.NET theme And スキン](https://docs.microsoft.com/previous-versions/aspnet/ykzx33wh(v=vs.100))」を参照してください。



## Examples
 このトピックでは、ソースコードが含まれている Visual Studio Web サイトプロジェクトを[ダウンロード](https://go.microsoft.com/fwlink/?LinkId=192871)できます。

 次のコード例では、<xref:System.Web.UI.WebControls.Button.OnClientClick%2A> プロパティを使用して、<xref:System.Web.UI.WebControls.Button> コントロールがクリックされたときに実行される追加のクライアント側スクリプトを指定する方法を示します。

 [!code-aspx-csharp[Button.OnClientClick#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Button.OnClientClick/cs/button.onclientclickcs.aspx#1)]
 [!code-aspx-vb[Button.OnClientClick#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Button.OnClientClick/vb/button.onclientclickvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.Button.Click" />
        <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">ボタン Web サーバーコントロール</related>
      </Docs>
    </Member>
    <Member MemberName="OnCommand">
      <MemberSignature Language="C#" Value="protected virtual void OnCommand (System.Web.UI.WebControls.CommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCommand(class System.Web.UI.WebControls.CommandEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCommand (e As CommandEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCommand(System::Web::UI::WebControls::CommandEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCommand : System.Web.UI.WebControls.CommandEventArgs -&gt; unit&#xA;override this.OnCommand : System.Web.UI.WebControls.CommandEventArgs -&gt; unit" Usage="button.OnCommand e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.CommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベントのデータ。</param>
        <summary><see cref="E:System.Web.UI.WebControls.Button.Command" /> コントロールの <see cref="T:System.Web.UI.WebControls.Button" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.Button> コントロールがクリックされると、<xref:System.Web.UI.WebControls.Button.Command> イベントが発生します。 このイベントは、`Sort`などのコマンド名が <xref:System.Web.UI.WebControls.Button> コントロールに関連付けられている場合によく使用されます。 これにより、Web ページ上に複数の <xref:System.Web.UI.WebControls.Button> コントロールを作成し、どの <xref:System.Web.UI.WebControls.Button> コントロールがクリックされているかをプログラムで判断できます。

> [!NOTE]
>  <xref:System.Web.UI.WebControls.Button.Command> イベントは、`BubbleEvent`の形式でコントロール階層を介して発生します。

 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。

 <xref:System.Web.UI.WebControls.Button.OnCommand%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。



## Examples
 次のコード例では、<xref:System.Web.UI.WebControls.Button> コントロールがクリックされたときにリストを並べ替える <xref:System.Web.UI.WebControls.Button.Command> イベントのイベントハンドラーを指定し、コーディングする方法を示します。 この例では、<xref:System.Web.UI.WebControls.Button> コントロールの <xref:System.Web.UI.WebControls.Button.OnClick%2A> プロパティを使用して、イベントハンドラーを宣言によって指定します。

 [!code-aspx-csharp[ButtonCommandNameArgument#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommandNameArgument/CS/buttoncommandnamecs.aspx#1)]
 [!code-aspx-vb[ButtonCommandNameArgument#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommandNameArgument/VB/buttoncommandnamevb.aspx#1)]

 次のコード例では、イベントハンドラーを指定し、`Page_Load` メソッドのイベントにプログラムで追加する方法を示します。

 [!code-aspx-csharp[ButtonCommand#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommand/CS/buttoncommandcs.aspx#1)]
 [!code-aspx-vb[ButtonCommand#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommand/VB/buttoncommandvb.aspx#1)]

 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Web.UI.WebControls.Button.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Web.UI.WebControls.Button.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" /> メソッドを呼び出してください。</para></block>
        <altmember cref="E:System.Web.UI.WebControls.Button.Command" />
        <altmember cref="T:System.Web.UI.WebControls.CommandEventArgs" />
        <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">ボタン Web サーバーコントロール</related>
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected internal override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.OnPreRender(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnPreRender (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnPreRender(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnPreRender : EventArgs -&gt; unit" Usage="button.OnPreRender e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">イベントのデータ。</param>
        <summary>クライアントに表示する前にボタンがクリックされたかどうかを確認します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.Button.OnPreRender%2A> メソッドは、<xref:System.Web.UI.WebControls.Button> コントロールからカスタムクラスを派生させる場合に、主にコントロールの開発者によって使用されます。

 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">ボタン Web サーバーコントロール</related>
      </Docs>
    </Member>
    <Member MemberName="PostBackUrl">
      <MemberSignature Language="C#" Value="public virtual string PostBackUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PostBackUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.PostBackUrl" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property PostBackUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ PostBackUrl { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PostBackUrl : string with get, set" Usage="System.Web.UI.WebControls.Button.PostBackUrl" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IButtonControl.PostBackUrl</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.UrlProperty("*.aspx")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.UrlEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.Button" /> コントロールがクリックされたときに現在のページからのポスト先となるページの URL を取得または設定します。</summary>
        <value><see cref="T:System.Web.UI.WebControls.Button" /> コントロールがクリックされたときに現在のページからのポスト先となる Web ページの URL。 既定値は空の文字列 ("") です。この場合、ページはそのページ自体にポストバックされます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> プロパティを使用すると、<xref:System.Web.UI.WebControls.Button> コントロールを使用してページ間のポストを実行できます。

> [!NOTE]
>  このプロパティでは、正しく指定されたパスのみが動作します。 たとえば、相対パス (`Test/default.aspx`)、絶対パス (`https://localhost/WebApp/default.aspx`)、および仮想 (`~\Test\default.aspx`) は正常に動作します。 "/Test/default.aspx" や "\Test\default.aspx" などの不適切な形式のパスは機能しません。 正しいパスを作成する方法については、「 [ASP.NET Web プロジェクトのパス](https://docs.microsoft.com/previous-versions/aspnet/ms178116(v=vs.100))」を参照してください。

 <xref:System.Web.UI.WebControls.Button> コントロールがクリックされたときに、投稿先の Web ページの URL に <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> プロパティを設定します。 たとえば、`Page2.aspx` を指定すると、<xref:System.Web.UI.WebControls.Button> コントロールを含むページが `Page2.aspx`にポストされます。 <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> プロパティの値を指定しなかった場合は、ページがそれ自体にポストバックされます。

> [!IMPORTANT]
>  サーバー側の検証でコントロールを使用してページ間ポストバックを実行する場合は、ポストバックを処理する前に、ページの <xref:System.Web.UI.Page.IsValid%2A> プロパティが `true` ていることを確認する必要があります。 クロスページポストバックの場合、確認するページは <xref:System.Web.UI.Page.PreviousPage%2A>です。 次の VB コードは、その方法を示しています。

```
Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
        If Page.PreviousPage.IsValid Then
            ' Handle the post back
        Else
            Response.Write("Invalid")
        End If
End Sub
```

 ページ間の投稿方法の詳細については、「 [ASP.NET Web Forms でのページ間の投稿](https://msdn.microsoft.com/library/fedf234e-b7c4-4644-a9e8-c1c0870b043b)」を参照してください。

 このプロパティは、テーマまたはスタイル シート テーマによって設定することはできません。 詳細については、「<xref:System.Web.UI.ThemeableAttribute> and [ASP.NET theme And スキン](https://docs.microsoft.com/previous-versions/aspnet/ykzx33wh(v=vs.100))」を参照してください。



## Examples
 次のコード例では、<xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> プロパティを使用して、ページ間のポストを実行する方法を示します。 ユーザーが <xref:System.Web.UI.WebControls.Button> コントロールをクリックすると、ページによって、テキストボックスに入力された値が、<xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> プロパティによって指定されたターゲットページにポストされます。 このサンプルを実行するには、このコード例と同じディレクトリにターゲットページのファイルも作成する必要があります。 ターゲットページのコードについては、次の例で説明します。

 [!code-aspx-csharp[Button.PostBackUrlProperty#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Button.PostBackUrlProperty/CS/button.postbackurlpropertycs.aspx#1)]
 [!code-aspx-vb[Button.PostBackUrlProperty#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Button.PostBackUrlProperty/VB/button.postbackurlpropertyvb.aspx#1)]

 次のコード例では、<xref:System.Web.UI.Page.PreviousPage%2A?displayProperty=nameWithType> プロパティを使用して、<xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> プロパティを使用して別のページからポストされた値にアクセスする方法を示します。 このページでは、前のページからポストされた文字列を取得し、ユーザーに表示します。 このコード例を直接実行しようとすると、`text` フィールドの値が `null`されるため、エラーが表示されます。 代わりに、このコードを使用してターゲットページを作成し、前の例のコードと同じディレクトリにファイルを配置します。 ファイルの名前は、前の例の <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> プロパティに指定された値に対応している必要があります。 前の例のコードを実行すると、クロスページポストが発生したときに、このページが自動的に実行されます。

> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[スクリプトによる攻略の概要](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))」を参照してください。

 [!code-aspx-csharp[Button.PostBackUrlPage2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Button.PostBackUrlPage2/CS/button.postbackurlpage2cs.aspx#1)]
 [!code-aspx-vb[Button.PostBackUrlPage2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Button.PostBackUrlPage2/VB/button.postbackurlpage2vb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Page.PreviousPage" />
        <related type="Article" href="https://msdn.microsoft.com/library/fedf234e-b7c4-4644-a9e8-c1c0870b043b">ASP.NET Web ページでのページ間ポスティング</related>
        <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">ボタン Web サーバーコントロール</related>
      </Docs>
    </Member>
    <Member MemberName="RaisePostBackEvent">
      <MemberSignature Language="C#" Value="protected virtual void RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.RaisePostBackEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RaisePostBackEvent (eventArgument As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void RaisePostBackEvent(System::String ^ eventArgument);" />
      <MemberSignature Language="F#" Value="abstract member RaisePostBackEvent : string -&gt; unit&#xA;override this.RaisePostBackEvent : string -&gt; unit" Usage="button.RaisePostBackEvent eventArgument" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="eventArgument">イベントの引数。</param>
        <summary>サーバーへのポストバック時に、<see cref="T:System.Web.UI.WebControls.Button" /> コントロールのイベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 このイベントは、<xref:System.Web.UI.WebControls.Button> コントロールがクリックされたときに内部で使用され、<xref:System.Web.UI.WebControls.Button.Click> イベントを発生させ、<xref:System.Web.UI.WebControls.Button.Command> イベントを生成します。

 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.Button.Click" />
        <altmember cref="E:System.Web.UI.WebControls.Button.Command" />
        <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">ボタン Web サーバーコントロール</related>
      </Docs>
    </Member>
    <Member MemberName="RenderContents">
      <MemberSignature Language="C#" Value="protected override void RenderContents (System.Web.UI.HtmlTextWriter writer);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RenderContents(class System.Web.UI.HtmlTextWriter writer) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.RenderContents(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RenderContents (writer As HtmlTextWriter)" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RenderContents(System::Web::UI::HtmlTextWriter ^ writer);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="override this.RenderContents : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="button.RenderContents writer" />
      <MemberSignature Language="C#" Value="protected internal override void RenderContents (System.Web.UI.HtmlTextWriter writer);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void RenderContents(class System.Web.UI.HtmlTextWriter writer) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub RenderContents (writer As HtmlTextWriter)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void RenderContents(System::Web::UI::HtmlTextWriter ^ writer);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">HTML コンテンツをクライアントに表示する出力ストリームを表す <see cref="T:System.Web.UI.HtmlTextWriter" /> オブジェクト。</param>
        <summary>コントロールの内容を指定したライターに出力します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 次のコード例は、カスタムのサーバーコントロールの <xref:System.Web.UI.WebControls.Button.RenderContents%2A> メソッドをオーバーライドして、カスタム <xref:System.Web.UI.WebControls.Button> サーバーコントロールの後に常にテキストを表示する方法を示しています。

 [!code-aspx-csharp[CustomButtonRenderContents#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomButtonRenderContents/CS/custombuttonrendercontentscs.aspx#1)]
 [!code-aspx-vb[CustomButtonRenderContents#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomButtonRenderContents/VB/custombuttonrendercontentsvb.aspx#1)]
[!code-csharp[CustomButtonRenderContents#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomButtonRenderContents/CS/custombuttonrendercontents.cs#2)]
[!code-vb[CustomButtonRenderContents#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomButtonRenderContents/VB/custombuttonrendercontents.vb#2)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
        <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">ボタン Web サーバーコントロール</related>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackEventHandler.RaisePostBackEvent">
      <MemberSignature Language="C#" Value="void IPostBackEventHandler.RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.System#Web#UI#IPostBackEventHandler#RaisePostBackEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub RaisePostBackEvent (eventArgument As String) Implements IPostBackEventHandler.RaisePostBackEvent" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System::String ^ eventArgument) = System::Web::UI::IPostBackEventHandler::RaisePostBackEvent;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">イベントの引数。</param>
        <summary>サーバーへのポストバック時に、<see cref="T:System.Web.UI.WebControls.Button" /> コントロールのイベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 このイベントは、<xref:System.Web.UI.WebControls.Button> コントロールがクリックされたときに内部で使用され、<xref:System.Web.UI.WebControls.Button.Click> イベントを発生させ、<xref:System.Web.UI.WebControls.Button.Command> イベントを生成します。



## Examples
 次のコード例は、<xref:System.Web.UI.WebControls.Button.System%23Web%23UI%23IPostBackEventHandler%23RaisePostBackEvent%2A> メソッドをオーバーライドして、常にカスタム <xref:System.Web.UI.WebControls.Button> コントロールで <xref:System.Web.UI.WebControls.Button.OnClick%2A> イベントを発生させる方法を示しています。

 [!code-csharp[CustomButtonRaisePostBackEvent#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomButtonRaisePostBackEvent/CS/custombuttonraisepostbackevent.cs#2)]
 [!code-vb[CustomButtonRaisePostBackEvent#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomButtonRaisePostBackEvent/VB/custombuttonraisepostbackevent.vb#2)]

 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.Button.Click" />
        <altmember cref="E:System.Web.UI.WebControls.Button.Command" />
        <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">ボタン Web サーバーコントロール</related>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.Text" />
      <MemberSignature Language="VB.NET" Value="Public Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Web.UI.WebControls.Button.Text" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IButtonControl.Text</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.Button" /> コントロールに表示するテキスト キャプションを取得または設定します。</summary>
        <value><see cref="T:System.Web.UI.WebControls.Button" /> コントロールに表示するテキスト キャプション。 既定値は <see cref="F:System.String.Empty" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.Button> コントロールに表示するキャプションを指定または確認するには、<xref:System.Web.UI.WebControls.Button.Text%2A> プロパティを使用します。

 このプロパティの値は、設定されると、デザイナーツールを使用してリソースファイルに自動的に保存できます。 詳細については、「<xref:System.ComponentModel.LocalizableAttribute> と[グローバリゼーションおよびローカリゼーション](https://docs.microsoft.com/previous-versions/aspnet/c6zyy3s9(v=vs.100))」を参照してください。



## Examples
 次のコード例は、<xref:System.Web.UI.WebControls.Button.Text%2A> プロパティを使用して、<xref:System.Web.UI.WebControls.Button> コントロールに表示されるキャプションを指定する方法を示しています。

 [!code-aspx-csharp[ButtonClickText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonClickText/cs/ButtonClickCS.aspx#1)]
 [!code-aspx-vb[ButtonClickText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonClickText/vb/ButtonClickVB.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="F:System.String.Empty" />
        <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">ボタン Web サーバーコントロール</related>
      </Docs>
    </Member>
    <Member MemberName="UseSubmitBehavior">
      <MemberSignature Language="C#" Value="public virtual bool UseSubmitBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseSubmitBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.UseSubmitBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UseSubmitBehavior As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool UseSubmitBehavior { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseSubmitBehavior : bool with get, set" Usage="System.Web.UI.WebControls.Button.UseSubmitBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.Button" /> コントロールがクライアント ブラウザーの送信機構を使用するのか、ASP.NET のポストバック機構を使用するのかを示す値を取得または設定します。</summary>
        <value>コントロールがブラウザーの送信機構を使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定では、 <see langword="true" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> プロパティを使用して、<xref:System.Web.UI.WebControls.Button> コントロールでクライアントブラウザーの送信メカニズムと ASP.NET ポストバックメカニズムのどちらを使用するかを指定します。 既定では、このプロパティの値は `true`であり、<xref:System.Web.UI.WebControls.Button> コントロールでブラウザーの送信メカニズムが使用されます。 `false`を指定すると、ASP.NET page framework によって、クライアント側のスクリプトがページに追加され、フォームがサーバーにポストされます。

 <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> プロパティが `false`場合、コントロール開発者は <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> メソッドを使用して、<xref:System.Web.UI.WebControls.Button>のクライアントポストバックイベントを返すことができます。 <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> メソッドによって返される文字列には、クライアント側の関数呼び出しのテキストが含まれており、クライアント側のイベントハンドラーに挿入できます。

 このプロパティは、テーマまたはスタイル シート テーマによって設定することはできません。 詳細については、「<xref:System.Web.UI.ThemeableAttribute> and [ASP.NET theme And スキン](https://docs.microsoft.com/previous-versions/aspnet/ykzx33wh(v=vs.100))」を参照してください。



## Examples
 次のコード例では、<xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> プロパティを使用して、<xref:System.Web.UI.WebControls.Button> コントロールがサーバーにポストバックするときに使用する送信機構を指定する方法を示します。 <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> プロパティが `false`に設定されているため、ボタンは ASP.NET ポストバック機構を使用します。 ブラウザーの [ソースの表示] コマンドを使用して、表示されるページのソースコードを表示すると、ASP.NET page framework によってクライアント側のスクリプトが追加され、フォームがサーバーに送信されることがわかります。

 [!code-aspx-csharp[Button.UseSubmitBehavior#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Button.UseSubmitBehavior/CS/button.usesubmitbehaviorcs.aspx#1)]
 [!code-aspx-vb[Button.UseSubmitBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Button.UseSubmitBehavior/VB/button.usesubmitbehaviorvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.GetPostBackEventReference" />
        <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">ボタン Web サーバーコントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/3hc29e2a(v=vs.100)">ASP.NET Web ページのクライアントスクリプト</related>
      </Docs>
    </Member>
    <Member MemberName="ValidationGroup">
      <MemberSignature Language="C#" Value="public virtual string ValidationGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ValidationGroup" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.ValidationGroup" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ValidationGroup As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ValidationGroup { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationGroup : string with get, set" Usage="System.Web.UI.WebControls.Button.ValidationGroup" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IButtonControl.ValidationGroup</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.Button" /> コントロールがサーバーにポストバックされるときに検証が実行されるコントロールのグループを取得または設定します。</summary>
        <value><see cref="T:System.Web.UI.WebControls.Button" /> コントロールがサーバーにポストバックされるときに検証が実行されるコントロールのグループ。 既定値は空の文字列 ("") です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 検証グループを使用すると、ページ上の検証コントロールを特定のカテゴリに割り当てることができます。 各検証グループは、ページ上の他の検証グループとは別に検証できます。 <xref:System.Web.UI.WebControls.Button.ValidationGroup%2A> プロパティを使用して、<xref:System.Web.UI.WebControls.Button> コントロールがサーバーへのポストバック時に検証を行う検証グループの名前を指定します。

 このプロパティは、<xref:System.Web.UI.WebControls.Button.CausesValidation%2A> プロパティの値が `true`に設定されている場合にのみ効果があります。 <xref:System.Web.UI.WebControls.Button.ValidationGroup%2A> プロパティの値を指定すると、<xref:System.Web.UI.WebControls.Button> コントロールがサーバーにポストバックするときに、指定したグループの一部である検証コントロールのみが検証されます。 このプロパティの値を指定せず、<xref:System.Web.UI.WebControls.Button.CausesValidation%2A> プロパティが `true`に設定されている場合、コントロールがサーバーにポストバックされるときに、検証グループに割り当てられていないページ上のすべての検証コントロールが検証されます。

 このプロパティは、テーマまたはスタイル シート テーマによって設定することはできません。 詳細については、「<xref:System.Web.UI.ThemeableAttribute> and [ASP.NET theme And スキン](https://docs.microsoft.com/previous-versions/aspnet/ykzx33wh(v=vs.100))」を参照してください。



## Examples
 次のコード例では、<xref:System.Web.UI.WebControls.Button.ValidationGroup%2A> プロパティを使用して、<xref:System.Web.UI.WebControls.Button> コントロールがサーバーにポストバックするときに検証するコントロールを指定する方法を示します。 このページには3つのテキストボックスが含まれており、ユーザーがテキストボックスを空白のままにしないように、ユーザーと3つの <xref:System.Web.UI.WebControls.RequiredFieldValidator> コントロールからデータをキャプチャします。 最初の2つのテキストボックスの <xref:System.Web.UI.WebControls.RequiredFieldValidator> コントロールは `PersonalInfoGroup` 検証グループにあり、3番目のテキストボックスの <xref:System.Web.UI.WebControls.RequiredFieldValidator> コントロールは `LocationInfoGroup` 検証グループに含まれています。 `Button1` をクリックすると、検証グループ `PersonalInfoGroup` 内のコントロールのみが検証されます。 `Button2` をクリックすると、検証グループ `LocationInfoGroup` 内のコントロールだけが検証されます。

> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[スクリプトによる攻略の概要](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))」を参照してください。

 [!code-aspx-csharp[Button.ValidationGroup#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Button.ValidationGroup/CS/button.validationgroupcs.aspx#1)]
 [!code-aspx-vb[Button.ValidationGroup#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Button.ValidationGroup/VB/button.validationgroupvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Button.CausesValidation" />
        <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
        <related type="Article" href="https://msdn.microsoft.com/library/66b3ce28-3b93-4f0a-951f-42fb5bb5fddf">ボタン Web サーバーコントロール</related>
      </Docs>
    </Member>
  </Members>
</Type>
