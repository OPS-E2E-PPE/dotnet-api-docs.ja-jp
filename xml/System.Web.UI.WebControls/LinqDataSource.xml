<Type Name="LinqDataSource" FullName="System.Web.UI.WebControls.LinqDataSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0ba8c412be6c57db1d1b2b166fe08282856679d8" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78763267" /></Metadata><TypeSignature Language="C#" Value="public class LinqDataSource : System.Web.UI.DataSourceControl, System.Web.DynamicData.IDynamicDataSource" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSource extends System.Web.UI.DataSourceControl implements class System.Web.DynamicData.IDynamicDataSource, class System.Web.UI.IDataSource" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSource&#xA;Inherits DataSourceControl&#xA;Implements IDynamicDataSource" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSource : System::Web::UI::DataSourceControl, System::Web::DynamicData::IDynamicDataSource" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="F#" Value="type LinqDataSource = class&#xA;    inherit DataSourceControl&#xA;    interface IDynamicDataSource&#xA;    interface IDataSource" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="C#" Value="public class LinqDataSource : System.Web.UI.WebControls.ContextDataSource, System.Web.DynamicData.IDynamicDataSource" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSource extends System.Web.UI.WebControls.ContextDataSource implements class System.Web.DynamicData.IDynamicDataSource, class System.Web.UI.IDataSource" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSource&#xA;Inherits ContextDataSource&#xA;Implements IDynamicDataSource" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSource : System::Web::UI::WebControls::ContextDataSource, System::Web::DynamicData::IDynamicDataSource" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="F#" Value="type LinqDataSource = class&#xA;    inherit ContextDataSource&#xA;    interface IDynamicDataSource&#xA;    interface IDataSource" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.DataSourceControl</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">System.Web.UI.WebControls.ContextDataSource</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IDynamicDataSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IDataSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Selecting")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("ContextTypeName")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.LinqDataSource), "LinqDataSource.bmp")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", System.ComponentModel.ToolboxItemFilterType.Require)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.LinqDataSource), "LinqDataSource.ico")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>ASP.NET Web ページでマークアップ テキストを通じて統合言語クエリ (LINQ) を使用し、データ オブジェクトのデータを取得したり変更したりできるようにします。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このトピックの内容:  
  
-   [はじめに](#introduction)  
  
-   [操作の順序](#order_of_operations)  
  
-   [データの順序付け](#ordering_data)  
  
-   [データのグループ化](#grouping_data)  
  
-   [データの変更](#data_modifications)  
  
-   [実行時の値の評価](#evaluating_value_at_run_time)  
  
-   [ストアドプロシージャの操作](#working_with_stored_procedures)  
  
-   [宣言型の構文](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>はじめに  
 統合言語クエリ (LINQ) は、走査、フィルター、および射影操作を任意のの宣言型の方法で表現できるようにする一連のクエリ演算子を定義するクエリ構文です。NET ベースのプログラミング言語。 データオブジェクトには、メモリ内のデータコレクションまたはデータベースのデータを表すオブジェクトを指定できます。 各操作の SQL コマンドを記述しなくても、データを取得または変更できます。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールでは、マークアップテキストのプロパティを設定することにより、ASP.NET Web ページで LINQ を使用できます。 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールは、LINQ to SQL を使用して、データコマンドを自動的に生成します。 LINQ to SQL の詳細については、「 [LINQ to SQL](https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655)」を参照してください。  
  
 メモリ内データコレクションからデータを取得する場合は、<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> プロパティをデータコレクションを含むクラスに設定します。 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> プロパティは、データコレクションを返すプロパティまたはフィールドに設定します。 たとえば、文字列値の配列を返す `FavoriteCities` という名前のプロパティを含む `Person` という名前のクラスがあるとします。 その場合は、<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> プロパティを `Person` に設定し、<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> プロパティを `FavoriteCities`に設定します。  
  
 データベースに対してクエリを実行する場合は、まずデータベースとそのテーブルを表すエンティティクラスを作成する必要があります。 [!INCLUDE[vs_ordesigner_long](~/includes/vs-ordesigner-long-md.md)] または SqlMetal ユーティリティを使用して、これらのクラスを生成できます。 次に、データベースを表すクラスに <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> プロパティを設定し、<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> プロパティをデータベーステーブルを表すプロパティに設定します。  
  
<a name="order_of_operations"></a>   
## <a name="order-of-operations"></a>操作順序  
 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールは、次の順序でデータ操作を適用します。  
  
1.  Where (返されるデータレコードを指定します)。  
  
2.  Order By (並べ替え)。  
  
3.  Group By (値を共有する集計データレコード)。  
  
4.  グループの順序付け (グループ化されたデータの並べ替え)  
  
5.  Select (返すフィールドまたはプロパティを指定します)。  
  
6.  自動並べ替え (ユーザーが選択したプロパティでデータレコードを並べ替えます)。  
  
7.  自動ページ (ユーザーによって選択されたデータレコードのサブセットを取得します)。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> プロパティに条件を追加して、クエリから返されるデータレコードをフィルター処理できます。 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> プロパティが設定されていない場合、<xref:System.Web.UI.WebControls.LinqDataSource> コントロールはデータオブジェクトからすべてのレコードを取得します。  
  
<a name="ordering_data"></a>   
## <a name="ordering-data"></a>データの順序付け  
 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> プロパティを使用して、返されるデータから並べ替えの対象となるプロパティの名前を指定します。  
  
> [!NOTE]
>  [!INCLUDE[ss2k](~/includes/ss2k-md.md)] または [!INCLUDE[ssEW](~/includes/ssew-md.md)] で <xref:System.Web.UI.WebControls.LinqDataSource> コントロールを使用し、<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> プロパティを `true`に設定する場合は、<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> プロパティで値を指定する必要があります。 既定では、<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> プロパティは `true`です。 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティに値を割り当てる場合は、クエリで返されるプロパティの一覧にすべての id 列を含める必要もあります。  
  
<a name="grouping_data"></a>   
## <a name="grouping-data"></a>データのグループ化  
 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> プロパティを使用して、同じ値を持つデータレコードを統合するために使用するプロパティを指定します。 データをグループ化する場合、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティに動的に作成されたプロパティである `Key` および `It`を含めることができます。 `Key` プロパティは、データをグループ化するために使用されたプロパティの値を参照します。 たとえば、`Category`という名前のプロパティでグループ化した場合、`Key` プロパティには `Category` プロパティのすべての一意の値が含まれます。 `It` プロパティは、データグループ内の個々のレコードのコレクションを参照します。 `It` プロパティを反復処理して、グループ化操作で統合された個々のレコードを取得できます。 たとえば、`Category`という名前のプロパティでグループ化した場合、`It` プロパティには、`Category` プロパティで共通の値を共有するすべてのレコードが含まれます。  
  
 グループ化されたデータの並べ替えに使用するプロパティを指定するには、<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> プロパティを使用します。 データをグループ化する場合、[<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>] プロパティでは、グループ化されたデータ内の個々のレコードの並べ替え方法を指定します。  
  
 既定では、<xref:System.Web.UI.WebControls.LinqDataSource> コントロールは、データオブジェクトからすべてのプロパティの値を取得します。 使用できるプロパティのサブセットを操作する場合は、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティを使用して、どのプロパティを返すかを指定します。 Select 操作は、Where、Order By、および Group By 操作の後に適用されます。 そのため、Select 句で別名を作成した場合、その別名を他の句で使用することはできません。  
  
<a name="data_modifications"></a>   
## <a name="data-modifications"></a>データ変更  
 <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>、<xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>、および <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> の各プロパティを使用して、データ変更を有効にするかどうかを指定できます。 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールからデータを変更するためのユーザーインターフェイスは、通常、<xref:System.Web.UI.WebControls.DetailsView> コントロールなどのデータバインドコントロールを使用して提供されます。 <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>、<xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>、または <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> を `true`に設定するだけでなく、自動データ変更を有効にするために次の条件が必要になります。  
  
-   <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティに値を割り当てることはできません。  
  
-   <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> プロパティに値を割り当てることはできません。  
  
-   <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> プロパティに割り当てられるクラスは、<xref:System.Data.Linq.DataContext>から派生する必要があります。  
  
-   <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> プロパティに割り当てられるプロパティは、<xref:System.Data.Linq.Table%601>から派生する必要があります。  
  
 データバインドコントロールに表示されるプロパティを制限するには、次の2つの方法があります。 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティをプロパティのサブセットに設定するか、<xref:System.Web.UI.WebControls.DataControlField> コントロールを追加してデータバインドコントロールのフィールドを定義することができます。 ただし、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティを設定した場合は、自動更新、挿入、および削除の各操作を有効にできないことを意味します。 使用できるプロパティのサブセットを操作しているときに自動データ変更を有効にする場合は、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティを設定しないでください。 代わりに、データオブジェクトからすべてのプロパティを取得し、データバインドコントロールを使用して表示されるプロパティを管理します。 <xref:System.Web.UI.WebControls.DetailsView> コントロールまたは <xref:System.Web.UI.WebControls.GridView> コントロールを使用する場合は、<xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> または <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> プロパティも `false`に設定する必要があります。 これにより、データバインドコントロールに、データの編集と削除を行うためのボタンが自動的に追加されるのを防ぐことができます。 データバインドコントロールに表示されない値は、ビューステートに格納されます。 これらは、データ更新の実行時にデータソースに渡されます。  
  
<a name="evaluating_value_at_run_time"></a>   
## <a name="evaluating-values-at-run-time"></a>実行時の値の評価  
 実行時に値の順序付け、フィルター処理、またはグループ化の値を評価する必要がある場合は、<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>、<xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>、<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>、または <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> コレクションにパラメーターを追加できます。  
  
 既定値を指定する場合は、<xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> コレクションにパラメーターを追加できます。  
  
 データ操作を実行する前に値を確認または変更する場合は、<xref:System.Web.UI.WebControls.LinqDataSource.Deleting>、<xref:System.Web.UI.WebControls.LinqDataSource.Inserting>、<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>、または <xref:System.Web.UI.WebControls.LinqDataSource.Updating> イベントを処理できます。 また、これらのイベントを処理して、データ操作をキャンセルしたり、ユーザー入力に基づいてデータクラスのプロパティを設定するときに発生した検証エラーを確認したりすることもできます。  
  
 データ操作の完了後に値を調べるには、<xref:System.Web.UI.WebControls.LinqDataSource.Deleted>、<xref:System.Web.UI.WebControls.LinqDataSource.Inserted>、<xref:System.Web.UI.WebControls.LinqDataSource.Selected>、または <xref:System.Web.UI.WebControls.LinqDataSource.Updated> イベントを処理します。  
  
<a name="working_with_stored_procedures"></a>   
## <a name="working-with-stored-procedures"></a>ストアドプロシージャの操作  
 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> イベントのイベントハンドラーを作成することによって、ストアドプロシージャからデータを取得するには、<xref:System.Web.UI.WebControls.LinqDataSource> コントロールを使用します。 イベントハンドラーでは、ストアドプロシージャを表すデータコンテキストクラスのメソッドを呼び出し、その結果を <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> オブジェクトの <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> プロパティに設定します。 データの更新、挿入、および削除の自動操作を有効にする場合は、メソッドから返される型が、<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> プロパティで指定されている型と一致している必要があります。 データコンテキストメソッドの作成の詳細については、「[方法: ストアドプロシージャおよび関数にマップされる DataContext メソッドを作成する (O/R デザイナー)](https://msdn.microsoft.com/library/e7ca32f1-50b3-48af-ad92-ceafd749296a)」を参照してください。  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>宣言型の構文  
  
```  
<asp:LinqDataSource  
    AutoGenerateOrderByClause="True|False"  
    AutoGenerateWhereClause="True|False"  
    AutoPage="True|False"  
    AutoSort="True|False"  
    ContextTypeName="string"  
    EnableDelete="True|False"  
    EnableInsert="True|False"  
    EnableTheming="True|False"  
    EnableUpdate="True|False"  
    EnableViewState="True|False"  
    GroupBy="string"  
    ID="string"  
    OnContextCreated="ContextCreated event handler"  
    OnContextCreating="ContextCreating event handler"  
    OnContextDisposing="ContextDisposing event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDeleted="Deleted event handler"  
    OnDeleting="Deleting event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnInserted="Inserted event handler"  
    OnInserting="Inserting event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnSelected="Selected event handler"  
    OnSelecting="Selecting event handler"  
    OnUnload="Unload event handler"  
    OnUpdated="Updated event handler"  
    OnUpdating="Updating event handler"  
    OrderBy="string"  
    runat="server"  
    Select="string"  
    SkinID="string"  
    StoreOriginalValuesInViewState="True|False"  
    TableName="string"  
    Visible="True|False"  
    Where="string"  
>  
        <GroupByParameters />  
        <InsertParameters />  
        <OrderByParameters />  
        <SelectParameters />  
        <WhereParameters />  
</asp:LinqDataSource>  
```  
  
   
  
## Examples  
 次の例は、`Products`という名前のエンティティクラスからデータを取得する <xref:System.Web.UI.WebControls.LinqDataSource> コントロールを示しています。 エンティティクラスは、[!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)] または SqlMetal ユーティリティを使用して生成された可能性があります。 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> プロパティは、`Price` プロパティの値が50より大きいレコードのみを返すように設定されています。 データを表示するために、<xref:System.Web.UI.WebControls.GridView> コントロールが <xref:System.Web.UI.WebControls.LinqDataSource> コントロールにバインドされています。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default5.aspx#5)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default5.aspx#5)]  
  
 次の例は、ユーザーがデータソースのレコードを更新、削除、および挿入できるようにする <xref:System.Web.UI.WebControls.LinqDataSource> コントロールを示しています。 <xref:System.Web.UI.WebControls.DetailsView> コントロールは <xref:System.Web.UI.WebControls.LinqDataSource> コントロールにバインドされ、ユーザーはデータを表示および変更できます。 レコードを選択、更新、削除、または挿入するために SQL コマンドが必要ないことに注意してください。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 次の例は、Web ページの値に基づいてデータオブジェクトを設定する <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> イベントのイベントハンドラーを示しています。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default3.aspx.cs#3)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default3.aspx.vb#3)]  
  
 次の例は、2つの列でグループ化するように構成された <xref:System.Web.UI.WebControls.LinqDataSource> コントロールを示しています。 `Key` プロパティは、`ProductCategory` と `Color`の2つのプロパティを持つオブジェクトを参照します。 `It` によって表されるオブジェクトの名前が `Products`に変更されます (エイリアス)。 名前が変更された `Products` オブジェクトには、グループ内の個々のレコードのコレクションが含まれます。 各インスタンスには、`Products` テーブルのすべての列が含まれます。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#1)]  
  
 次の例は、前の例の <xref:System.Web.UI.WebControls.LinqDataSource> コントロールのデータを表示する2つの <xref:System.Web.UI.WebControls.ListView> コントロールを示しています。 1つの <xref:System.Web.UI.WebControls.ListView> コントロールがグループ化されたデータを表示し、もう一方の <xref:System.Web.UI.WebControls.ListView> コントロールには、そのグループに属する製品の個別の名前が表示されます。 入れ子になったデータバインドコントロールの <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> プロパティは `Products`に設定されます。これは、`It` オブジェクトの別名です。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#2)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655">LINQ to SQL</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateOrderByClause">
      <MemberSignature Language="C#" Value="public bool AutoGenerateOrderByClause { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateOrderByClause" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoGenerateOrderByClause As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoGenerateOrderByClause { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoGenerateOrderByClause : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールが <see cref="P:System.Web.UI.WebControls.LinqDataSource.OrderByParameters" /> コレクション内の値に基づいて Order By 句を動的に作成するかどうかを示す値を取得または設定します。</summary>
        <value><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールで Order By 句を作成する場合に <see langword="true" /> します。それ以外の場合は、<see langword="false" />ます。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> プロパティを `true`に設定すると、<xref:System.Web.UI.WebControls.LinqDataSource> コントロールは <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> コレクション内の値に基づいて Order By 句を動的に作成します。 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールは、最初のパラメーターを使用してデータを並べ替え、さらに追加のパラメーターごとにデータを並べ替えます。 `null` または空の値を含むパラメーターは、Order By 句に含まれません。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> が `true`に設定されている場合、パーサーは Order By 句を動的に作成するため、<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> プロパティを設定しません。 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> が `true` に設定され、<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> プロパティに値が割り当てられている場合、<xref:System.Web.UI.WebControls.LinqDataSource> コントロールは例外をスローします。  
  
   
  
## Examples  
 次の例は、<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> が `true`に設定された <xref:System.Web.UI.WebControls.LinqDataSource> コントロールを示しています。 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> コレクションには、ユーザーが <xref:System.Web.UI.WebControls.DropDownList> コントロールから選択したプロパティ名に基づいてデータを順序付けするパラメーターが含まれています。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default8.aspx#8)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default8.aspx#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateWhereClause">
      <MemberSignature Language="C#" Value="public bool AutoGenerateWhereClause { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateWhereClause" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoGenerateWhereClause As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoGenerateWhereClause { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoGenerateWhereClause : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.AutoGenerateWhereClause</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールが <see cref="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" /> コレクションに定義された値に基づいて Where 句を動的に作成するかどうかを示す値を取得または設定します。</summary>
        <value><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールが Where 句を作成する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> プロパティを `true`に設定すると、<xref:System.Web.UI.WebControls.LinqDataSource> コントロールによって <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> コレクション内のパラメーターから Where 句が動的に作成されます。 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> コレクションに追加する各パラメーターは、クエリ対象のデータオブジェクトのプロパティと一致する値に設定された <xref:System.Web.UI.WebControls.Parameter.Name%2A> プロパティを持つ必要があります。 自動的に生成された Where 句は、<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> コレクションで指定された値が、データオブジェクトの一致するプロパティの値と等しいかどうかをチェックします。 複数のパラメーターを指定すると、パラメーターは論理 `AND` 操作にリンクされます。 `null` または空の値を含むパラメーターは、Where 句に含まれません。  
  
 自動的に生成された <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 句は、等しいかどうかのみをテストでき、`AND` 操作によってのみパラメーターをリンクできます。 等しいかどうかをテストしない条件を追加する必要がある場合、またはパラメーターを `OR` 操作と関連付ける必要がある場合は、<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> プロパティを `true` に設定しないでください。 これらのタスクを実行するには、<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> プロパティを `false` に設定し、<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> コレクション内の各パラメーターの <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> プロパティにプレースホルダーを追加します。 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> プロパティで、各プレースホルダー名の先頭に @ 記号を付けます。  
  
 パーサーが Where 句を動的に作成するため、<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> プロパティが `true`場合は、<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> プロパティを設定しません。 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> プロパティが `true`、<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> プロパティに値が割り当てられている場合、<xref:System.Web.UI.WebControls.LinqDataSource> コントロールは例外をスローします。  
  
   
  
## Examples  
 次の例は、<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> が `true`に設定された <xref:System.Web.UI.WebControls.LinqDataSource> コントロールを示しています。 クエリから返されたデータを表示するために、<xref:System.Web.UI.WebControls.GridView> コントロールが <xref:System.Web.UI.WebControls.LinqDataSource> コントロールにバインドされています。 3つの値が設定された <xref:System.Web.UI.WebControls.DropDownList> コントロールが含まれています。 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> コレクションにパラメーターが含まれています。この名前は、データオブジェクトのプロパティの1つに一致する `Category,` に設定されています。 <xref:System.Web.UI.WebControls.ControlParameter.ControlID%2A> プロパティは、<xref:System.Web.UI.WebControls.DropDownList> コントロールの ID に設定されます。 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールは、ユーザーが <xref:System.Web.UI.WebControls.DropDownList> コントロールから選択した値に基づいてレコードをフィルター処理するための <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> プロパティを自動的に作成します。 このクエリは、<xref:System.Web.UI.WebControls.DropDownList> コントロールからユーザーが選択した値に `Category` プロパティが一致するレコードを返します。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default7.aspx#7)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default7.aspx#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoPage">
      <MemberSignature Language="C#" Value="public bool AutoPage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoPage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoPage" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoPage As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoPage { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoPage : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>実行時に <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールがデータ セクションでのナビゲーションをサポートするかどうかを示す値を取得または設定します。</summary>
        <value>ユーザーがデータを閲覧できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールでページングを有効にするには、<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> プロパティを `true` に設定します。 ユーザーがデータをページ化できるようにするには、ページング用のインターフェイスを提供するデータバインドコントロールを <xref:System.Web.UI.WebControls.LinqDataSource> コントロールに接続します。 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> プロパティが `true`に設定されている場合、<xref:System.Web.UI.WebControls.LinqDataSource> コントロールは、データバインドコントロール内の1ページに対して十分なレコードだけを取得します。 <xref:System.Linq.Enumerable.Skip%2A> および <xref:System.Linq.Enumerable.Take%2A> メソッドを使用して、現在のページのレコードを取得します。  
  
   
  
## Examples  
 次の例は、<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> プロパティが `true` に設定された <xref:System.Web.UI.WebControls.LinqDataSource> コントロールと、<xref:System.Web.UI.WebControls.LinqDataSource> コントロールにバインドされている <xref:System.Web.UI.WebControls.GridView> コントロールを示しています。 <xref:System.Web.UI.WebControls.GridView> コントロールの <xref:System.Web.UI.WebControls.GridView.AllowPaging%2A> プロパティは `true` に設定されており、ユーザーがデータを使用できるようにするインターフェイスを提供します。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSort">
      <MemberSignature Language="C#" Value="public bool AutoSort { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoSort" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoSort" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoSort As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoSort { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoSort : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoSort" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>実行時に <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールがデータの並べ替えをサポートするかどうかを示す値を取得または設定します。</summary>
        <value>ユーザーがデータを並べ替えられる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールは、データの並べ替えに2つの方法をサポートしています。 <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> プロパティを使用すると、実行時の並べ替えを有効にすることができます。または、<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> プロパティを設定して、デザイン時に並べ替えを定義することもできます。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> プロパティを `true` に設定すると、データバインドコントロールの並べ替え式に基づく <xref:System.Web.UI.WebControls.LinqDataSource> コントロールでの並べ替えが有効になります。 データバインドコントロールは、ユーザーが並べ替えに使用するプロパティを実行時に選択できるようにするインターフェイスを提供します。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> プロパティを並べ替えに使用するプロパティまたはプロパティに設定することによって、データが返される順序をプログラムで設定できます。 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> プロパティがプロパティに設定され、<xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> プロパティが `true`場合、データバインドコントロールの並べ替え式は <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> プロパティの式の後に適用されます。 したがって、これにより、データの最終的な並べ替えが決定されます。  
  
   
  
## Examples  
 次の例は、<xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> プロパティが `true` に設定された <xref:System.Web.UI.WebControls.LinqDataSource> コントロールと、<xref:System.Web.UI.WebControls.LinqDataSource> コントロールにバインドされている <xref:System.Web.UI.WebControls.GridView> コントロールを示しています。 ユーザーがデータを並べ替えることができるインターフェイスを提供するには、<xref:System.Web.UI.WebControls.GridView> コントロールの <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A> プロパティを `true` に設定します。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextCreated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; ContextCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; ContextCreated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextCreated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextCreated As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ ContextCreated;" />
      <MemberSignature Language="F#" Value="member this.ContextCreated : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.ContextCreated : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンテキスト タイプ オブジェクトのインスタンスが作成された後に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated> イベントを処理してコンテキスト型オブジェクトを調べたり、オブジェクトの作成中に発生した例外を調べたりします。 このイベントに関連付けられている <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> オブジェクトの <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> プロパティからコンテキスト型オブジェクトを取得します。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> プロパティから、データ操作中に発生した例外を取得します。  
  
 コンテキスト型オブジェクトは、select、update、insert、および delete 操作中に作成され、要求全体で再利用されます。  
  
 イベントが発生しない場合は、1回だけ発生します。 これは、<xref:System.Web.UI.WebControls.LinqDataSource.Selecting> イベント中にプログラムによって <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> プロパティをオブジェクトに設定する場合です。 追加の条件として、元の値をビューステートに格納する必要がないか、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> プロパティのオブジェクトが <xref:System.Data.Linq.ITable> インターフェイスを実装することがあります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextCreating">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; ContextCreating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; ContextCreating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextCreating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextCreating As EventHandler(Of LinqDataSourceContextEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceContextEventArgs ^&gt; ^ ContextCreating;" />
      <MemberSignature Language="F#" Value="member this.ContextCreating : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; " Usage="member this.ContextCreating : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンテキスト タイプ オブジェクトのインスタンスが作成される前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定では、<xref:System.Web.UI.WebControls.LinqDataSource> コントロールは、<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> プロパティで指定された型のインスタンスを作成します。 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールは、データコンテキストオブジェクトのパラメーターなしのコンストラクターを呼び出して、オブジェクトのインスタンスを作成します。 パラメーターなしのコンストラクターを使用するか、<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> プロパティで指定されたものとは異なるオブジェクトを作成する必要がある可能性があります。 その場合は、<xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> イベントを処理し、データコンテキストオブジェクトを手動で作成する必要があります。  
  
 Context 型オブジェクトは、select、update、insert、delete の各操作中に作成されます。  
  
 イベントが発生しない場合は、1回だけ発生します。 これは、プログラムを使用して <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> プロパティを、<xref:System.Web.UI.WebControls.LinqDataSource.Selecting> イベントのイベントハンドラー内のオブジェクトに設定する場合です。 追加の条件として、元の値をビューステートに格納する必要がないか、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> プロパティのオブジェクトが <xref:System.Data.Linq.ITable> インターフェイスを実装することがあります。  
  
   
  
## Examples  
 次の例では、<xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> イベントでパラメーターなしのコンストラクターを使用して、データコンテキストオブジェクトを作成する方法を示します。 このコードは、オブジェクトを <xref:System.Web.UI.WebControls.LinqDataSourceContextEventArgs.ObjectInstance%2A> プロパティに割り当てます。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.ContextCreating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.ContextCreating/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextDisposing">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; ContextDisposing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; ContextDisposing" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextDisposing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextDisposing As EventHandler(Of LinqDataSourceDisposeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceDisposeEventArgs ^&gt; ^ ContextDisposing;" />
      <MemberSignature Language="F#" Value="member this.ContextDisposing : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; " Usage="member this.ContextDisposing : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンテキスト タイプ オブジェクトが破棄される前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 オブジェクトを手動で破棄する場合、またはオブジェクトが破棄される前にオブジェクトに固有のクリーンアップを実行する場合は、<xref:System.Web.UI.WebControls.LinqDataSource.ContextDisposing> イベントを処理します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextTypeName">
      <MemberSignature Language="C#" Value="public string ContextTypeName { get; set; }" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContextTypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.ContextTypeName" />
      <MemberSignature Language="VB.NET" Value="Public Property ContextTypeName As String" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ContextTypeName { System::String ^ get(); void set(System::String ^ value); };" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="F#" Value="member this.ContextTypeName : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.ContextTypeName" />
      <MemberSignature Language="C#" Value="public override string ContextTypeName { get; set; }" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ContextTypeName As String" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ContextTypeName { System::String ^ get(); void set(System::String ^ value); };" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得するデータが値として格納されているプロパティを含む型の名前を取得または設定します。</summary>
        <value>取得するデータが含まれているクラスの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールを使用して、メモリ内のデータコレクションまたはデータベースからデータを取得する場合は、2つのプロパティを指定する必要があります。 1つ目は、データソースを表すデータコンテキストクラスです。 2つ目は、データを格納しているデータコンテキストクラスのプロパティです。 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> プロパティをデータコンテキストクラスの名前に設定し、<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> プロパティにデータを格納するデータコレクションを設定します。  
  
 たとえば、データベースからデータを取得する場合は、<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> プロパティを、データベースを表すクラスの名前に設定します。 また、<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> プロパティを、データベース内のテーブルを表すプロパティに設定します。 データベースからクラスを生成するには、[!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)] または SqlMetal ユーティリティを使用して、これらのクラスを自動的に生成します。  
  
 配列などのメモリ内データコレクションからデータを取得する場合は、<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> プロパティを、配列プロパティを含むクラスの名前に設定します。 次に、<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> プロパティを、配列を取得するプロパティに設定します。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールを使用して更新、挿入、または削除の操作を自動実行できるようにするには、<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> プロパティに割り当てられたクラスが <xref:System.Data.Linq.DataContext>から派生している必要があります。 また、<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> プロパティに割り当てられたプロパティは、<xref:System.Data.Linq.Table%601>から派生する必要があります。 更新、挿入、または削除の自動操作を有効にする必要がない場合は、任意の型のクラスの名前を <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> プロパティに割り当てることができます。  
  
 クラスのインスタンスからデータを選択する方法の詳細については、<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> プロパティを参照してください。  
  
   
  
## Examples  
 次の例は、<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> プロパティを、文字列の配列を含むクラスに設定する方法を示しています。 また、プロパティを、データベースを表す ([!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]によって生成される) クラスに設定する方法も示します。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/Default.aspx#2)]  
  
 この例では、データベーステーブルを表す `ExampleDataContext` という名前のクラスは示されていません。 この例を使用するには、Example .dbml という名前の LINQ To SQL クラスを追加し、Movie という名前のテーブルを [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]にドラッグして、このクラスを作成する必要があります。 `Movies` という名前のプロパティを持つ `ExampleDataContext` という名前のクラスが生成されます。  
  
 次の例は、<xref:System.Web.UI.WebControls.LinqDataSource> コントロールで参照される `MovieLibrary` という名前のクラスを示しています。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/App_Code/MovieLibrary.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/App_Code/MovieLibrary.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655">LINQ to SQL</related>
      </Docs>
    </Member>
    <Member MemberName="CreateQueryableView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.CreateQueryableView" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateQueryableView () As QueryableDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::WebControls::QueryableDataSourceView ^ CreateQueryableView();" />
      <MemberSignature Language="F#" Value="override this.CreateQueryableView : unit -&gt; System.Web.UI.WebControls.QueryableDataSourceView" Usage="linqDataSource.CreateQueryableView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.QueryableDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>クエリ可能なビューを返します。</summary>
        <returns>クエリ可能なビュー。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateView">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.LinqDataSourceView CreateView ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.LinqDataSourceView CreateView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.CreateView" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateView () As LinqDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::LinqDataSourceView ^ CreateView();" />
      <MemberSignature Language="F#" Value="abstract member CreateView : unit -&gt; System.Web.UI.WebControls.LinqDataSourceView&#xA;override this.CreateView : unit -&gt; System.Web.UI.WebControls.LinqDataSourceView" Usage="linqDataSource.CreateView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.LinqDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このコントロールに関連付けられている <see cref="T:System.Web.UI.WebControls.LinqDataSourceView" /> クラスの新しいインスタンスを作成します。</summary>
        <returns>データ バインド コントロールのインターフェイスとして動作するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 カスタムビューを提供するには、派生クラスでこのメソッドをオーバーライドします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public int Delete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Delete(class System.Collections.IDictionary keys, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Delete (keys As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Delete(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ oldValues);" />
      <MemberSignature Language="F#" Value="member this.Delete : System.Collections.IDictionary * System.Collections.IDictionary -&gt; int" Usage="linqDataSource.Delete (keys, oldValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">削除するレコードの行のキー値。</param>
        <param name="oldValues">データの競合を検出するために評価される行の値。</param>
        <summary>削除の操作を実行します。</summary>
        <returns>削除操作によって影響を受けたレコードの数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常、コードから <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> メソッドを呼び出す必要はありません。 データバインドコントロールで <xref:System.Web.UI.WebControls.LinqDataSource> コントロールを使用すると、ユーザーがレコードを削除するアクションを実行したときに、データバインドコントロールによって自動的に <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> メソッドが呼び出されます。 データを削除する独自のプロセスを作成する場合は、明示的に <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> メソッドを呼び出します。 たとえば、データバインドコントロールの外部にあるイベントに基づいてレコードを削除する場合は、<xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> メソッドを呼び出すことができます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Deleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Deleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleted As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Deleted;" />
      <MemberSignature Language="F#" Value="member this.Deleted : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Deleted : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>削除操作が終了したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> イベントを処理して、削除操作から例外をキャッチするか、操作の完了後に出力パラメーターを確認します。 イベントハンドラーに渡される <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> オブジェクトから出力パラメーターを取得できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection DeleteParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.DeleteParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeleteParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ DeleteParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeleteParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.DeleteParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このプロパティは、<see cref="T:System.Web.UI.WebControls.LinqDataSource" /> クラスでは使用されません。</summary>
        <value>パラメーターのコレクション。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; Deleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; Deleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Deleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleting As EventHandler(Of LinqDataSourceDeleteEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceDeleteEventArgs ^&gt; ^ Deleting;" />
      <MemberSignature Language="F#" Value="member this.Deleting : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; " Usage="member this.Deleting : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>削除操作の前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> イベントを処理して、削除するオブジェクトの検証、データクラスからのデータの検証エラーの調査、削除操作の前の値の変更、または削除操作のキャンセルを行います。 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールは、<xref:System.Web.UI.WebControls.LinqDataSource.Deleting> イベントのイベントハンドラーに <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> オブジェクトを渡します。 <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> オブジェクトには、削除されるデータが含まれており、削除操作を取り消すことができます。 データクラスが <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> 例外をスローした場合、<xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> オブジェクトには、<xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.Exception%2A> プロパティにその例外が含まれます。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> イベントのイベントハンドラーで例外がスローされた場合は、そのイベントハンドラーで例外を処理する必要があります。 例外は、(<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> オブジェクトの <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> プロパティを使用して) <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> イベントのイベントハンドラーに渡されません。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> プロパティには、<xref:System.Web.UI.WebControls.LinqDataSource.Deleting> イベントの後にスローされる例外のみが含まれます。  
  
   
  
## Examples  
 次の例は、<xref:System.Web.UI.WebControls.LinqDataSource.Deleting> イベントのイベントハンドラーを示しています。 このコードは、<xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.OriginalObject%2A> プロパティのプロパティと Web ページの値に基づいて、削除操作を取り消します。 この例では、`OnSale` プロパティが `true`に設定されている場合、レコードを削除する必要があることを確認するために、<xref:System.Web.UI.WebControls.CheckBox> コントロールを選択する必要があります。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Deleting/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Deleting/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableDelete">
      <MemberSignature Language="C#" Value="public bool EnableDelete { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableDelete" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableDelete" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableDelete As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableDelete { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableDelete : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableDelete" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableDelete</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールを通じてデータ レコードを削除できるかどうかを示す値を取得または設定します。</summary>
        <value>削除の自動実行が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザーが <xref:System.Web.UI.WebControls.LinqDataSource> コントロールを使用してデータレコードを削除できるようにする場合は、[<xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>] プロパティを [`true`] に設定します。 <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> が `true`場合、<xref:System.Web.UI.WebControls.LinqDataSource> コントロールは LINQ to SQL を使用して、データを削除するコマンドを自動的に作成します。 <xref:System.Web.UI.WebControls.DetailsView> コントロールなど、削除するレコードをユーザーが選択できるようにするためのインターフェイスを含める必要があります。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールは、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティまたは <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> プロパティが設定されている場合、自動削除操作をサポートしていません。 この場合、削除操作を実行しようとすると、<xref:System.Web.UI.WebControls.LinqDataSource> コントロールは例外をスローします。  
  
   
  
## Examples  
 次の例は、<xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> が `true`に設定されている <xref:System.Web.UI.WebControls.LinqDataSource> コントロールを示しています。 <xref:System.Web.UI.WebControls.DetailsView> コントロールは、データを表示し、ユーザーがデータレコードを削除できるようにするボタンを作成します。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655">LINQ to SQL</related>
      </Docs>
    </Member>
    <Member MemberName="EnableInsert">
      <MemberSignature Language="C#" Value="public bool EnableInsert { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableInsert" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableInsert" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableInsert As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableInsert { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableInsert : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableInsert" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableInsert</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールを通じてデータ レコードを挿入できるかどうかを示す値を取得または設定します。</summary>
        <value>挿入の自動実行が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザーが <xref:System.Web.UI.WebControls.LinqDataSource> コントロールを使用して新しいデータレコードを挿入できるようにする場合は、[<xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>] プロパティを [`true`] に設定します。 <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> が `true`場合、<xref:System.Web.UI.WebControls.LinqDataSource> コントロールは LINQ to SQL を使用して、データを挿入するコマンドを自動的に作成します。 <xref:System.Web.UI.WebControls.DetailsView> コントロールなどの新しいレコードをユーザーが挿入できるようにするインターフェイスを含める必要があります。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティまたは <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> プロパティが設定されている場合、<xref:System.Web.UI.WebControls.LinqDataSource> コントロールでは挿入操作の自動実行がサポートされません。 その場合、挿入操作が試行されると、<xref:System.Web.UI.WebControls.LinqDataSource> コントロールは例外をスローします。  
  
   
  
## Examples  
 次の例は、<xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> が `true`に設定されている <xref:System.Web.UI.WebControls.LinqDataSource> コントロールを示しています。 <xref:System.Web.UI.WebControls.DetailsView> コントロールは、データを表示し、ユーザーが新しいレコードを作成して保存できる挿入モードにコントロールを切り替えるボタンを表示します。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655">LINQ to SQL</related>
      </Docs>
    </Member>
    <Member MemberName="EnableObjectTracking">
      <MemberSignature Language="C#" Value="public bool EnableObjectTracking { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableObjectTracking" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableObjectTracking As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableObjectTracking { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableObjectTracking : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ コンテキスト オブジェクトの変更履歴を記録するかどうかを示す値を取得または設定します。</summary>
        <value>データ コンテキスト オブジェクトの変更履歴を記録する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A> プロパティは、LINQ To SQL データコンテキストオブジェクトからデータを選択する場合にのみ使用されます。  
  
 読み取り専用データを操作する場合、<xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A> プロパティを `false` に設定すると、データがキャッシュされずに変更されたかどうかを判断できるため、パフォーマンスが向上します。 ただし、クエリの遅延実行も無効になります。 遅延クエリの実行を使用する場合は、このプロパティを `true` に設定する必要があります。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" />
      </Docs>
    </Member>
    <Member MemberName="EnableUpdate">
      <MemberSignature Language="C#" Value="public bool EnableUpdate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableUpdate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableUpdate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableUpdate { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableUpdate : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableUpdate" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableUpdate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールを通じてデータ レコードを更新できるかどうかを示す値を取得または設定します。</summary>
        <value>更新の自動実行が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザーが <xref:System.Web.UI.WebControls.LinqDataSource> コントロールを使用してデータレコードを更新できるようにする場合は、[<xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A>] プロパティを [`true`] に設定します。 <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> が `true`場合、<xref:System.Web.UI.WebControls.LinqDataSource> コントロールは LINQ to SQL を使用して、データを更新するコマンドを自動的に作成します。 <xref:System.Web.UI.WebControls.DetailsView> コントロールなどのレコードをユーザーが更新できるようにするには、インターフェイスを含める必要があります。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティまたは <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> プロパティが設定されている場合、<xref:System.Web.UI.WebControls.LinqDataSource> コントロールは自動更新操作をサポートしません。 この場合、更新操作を実行しようとすると、<xref:System.Web.UI.WebControls.LinqDataSource> コントロールは例外をスローします。  
  
   
  
## Examples  
 次の例は、<xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> が `true`に設定されている <xref:System.Web.UI.WebControls.LinqDataSource> コントロールを示しています。 <xref:System.Web.UI.WebControls.DetailsView> コントロールは、データを表示し、ユーザーがデータレコードを更新できるようにするボタンを作成します。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.DataSourceView GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.DataSourceView GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.GetView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetView (viewName As String) As DataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::DataSourceView ^ GetView(System::String ^ viewName);" />
      <MemberSignature Language="F#" Value="override this.GetView : string -&gt; System.Web.UI.DataSourceView" Usage="linqDataSource.GetView viewName" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetView(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" Index="0" FrameworkAlternate="netframework-3.5" />
      </Parameters>
      <Docs>
        <param name="viewName">取得するビューの名前。"DefaultView" である必要があります。</param>
        <summary><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> オブジェクトに関連付けられたデータ ソース ビューを返します。</summary>
        <returns><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> オブジェクトに関連付けられたデータ ソース ビュー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<xref:System.Web.UI.WebControls.LinqDataSource> コントロールでサポートされるデータソースビューは1つだけです。 <xref:System.Web.UI.WebControls.LinqDataSourceView> オブジェクトの既定の名前は "DefaultView" です。 <xref:System.Web.UI.WebControls.LinqDataSourceView> オブジェクトは、データソースコントロールの機能を定義し、基になるデータベースからデータを取得して、並べ替え、挿入、削除、更新などの操作を実行します。

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><p>viewName は null (Visual Basic では Nothing)、または "DefaultView" 以外の何か。</p></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)">LinqDataSource Web サーバーコントロールの概要</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)">ASP.NET データ アクセスの概要</related>
      </Docs>
    </Member>
    <Member MemberName="GetViewNames">
      <MemberSignature Language="C#" Value="protected override System.Collections.ICollection GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Collections.ICollection GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.GetViewNames" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetViewNames () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Collections::ICollection ^ GetViewNames();" />
      <MemberSignature Language="F#" Value="override this.GetViewNames : unit -&gt; System.Collections.ICollection" Usage="linqDataSource.GetViewNames " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetViewNames</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールに関連付けられたビュー オブジェクトのリストを表す名前のコレクションを返します。</summary>
        <returns>"DefaultView" という名前を含む 1 つの要素があるコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<xref:System.Web.UI.WebControls.LinqDataSource> コントロールは、基になるデータに対して、`DefaultView`という名前のビューを1つだけサポートします。 したがって、`GetViewNames` メソッドは、このビュー名を含む1つの要素のみを含むコレクションを返します。

]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)">LinqDataSource Web サーバーコントロールの概要</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)">ASP.NET データ アクセスの概要</related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy">
      <MemberSignature Language="C#" Value="public string GroupBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string GroupBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.GroupBy" />
      <MemberSignature Language="VB.NET" Value="Public Property GroupBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ GroupBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.GroupBy : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.GroupBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得したデータのグループ化に使用するプロパティを示す値を取得または設定します。</summary>
        <value>Group By 句の作成に使用される文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> プロパティを使用して、同じ値を持つデータレコードを統合するために使用するプロパティを指定します。 たとえば、<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> プロパティを `Name`に設定すると、同じ `Name` プロパティ値を持つクエリ内のすべてのレコードが1つの統合レコードとして返されます。  
  
 `new` 関数のすべてのプロパティを囲み、コンマを使用して各プロパティを区切ることによって、複数のプロパティを <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> プロパティに割り当てることができます。 たとえば、プロパティ `Name` でグループ化してから `Category`するには、<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> プロパティを `new(Name, Category)`に設定します。  
  
 グループ化に使用されるプロパティの値は、`Key`という名前の生成されたプロパティを使用して返されます。 グループ化された値を取得するには、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティに `Key` プロパティを含めます。 `As` キーワードを使用して `Key` プロパティをエイリアスに設定できますが、別名を使用する必要はありません。 たとえば、<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> プロパティを `Category`という名前のプロパティに設定することができます。 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティを `new(Key As ProductCategory)`に設定すると、`Category` プロパティから統合値を取得できます。  
  
 グループ内の個々のレコードにアクセスするには、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティに `It` プロパティを含めます。 `It` プロパティには、グループ化されたプロパティの値を共有するレコードのコレクションが含まれます。 `It` プロパティを反復処理して、個々のレコードを取得できます。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> プロパティは、多くの場合、集計メソッドと共に使用されます。 次の集計メソッドを使用できます。  
  
-   `Count()`  
  
-   `Average(`*列*`)`  
  
-   `Sum(`*列*`)`  
  
-   `Max(`*列*`)`  
  
-   `Min(`*列*`)`  
  
-   `Where(`*条件*`)`  
  
-   `Any()`  
  
-   `All(`*条件*`)`  
  
 詳細については、「 [Linqdatasource Web サーバーコントロールの概要](https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100))」および「[方法: Linqdatasource コントロールを使用してデータをグループ化および集計する](https://docs.microsoft.com/previous-versions/aspnet/bb470251(v=vs.100))」を参照してください。  
  
   
  
## Examples  
 次の例は、返されたデータを `Category`という名前のプロパティでグループ化する <xref:System.Web.UI.WebControls.LinqDataSource> コントロールを示しています。 共有値を返し、グループ化されたレコードの平均価格を計算します。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default3.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default3.aspx#3)]  
  
 次の例は、2つの列でグループ化するように構成された <xref:System.Web.UI.WebControls.LinqDataSource> コントロールを示しています。 `Key` プロパティは、`ProductCategory` と `Color`の2つのプロパティを持つオブジェクトを参照します。 `It` によって表されるオブジェクトの名前が `Products`に変更されます。 名前が変更された `Products` オブジェクトには、グループ内の個々のレコードのコレクションが含まれ、各インスタンスには Products テーブルのすべての列が含まれます。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#1)]  
  
 次の例は、前の例の <xref:System.Web.UI.WebControls.LinqDataSource> コントロールからデータを表示するための2つの <xref:System.Web.UI.WebControls.ListView> コントロールを示しています。 1つの <xref:System.Web.UI.WebControls.ListView> コントロールはグループ化されたデータを表示し、もう一方の <xref:System.Web.UI.WebControls.ListView> コントロールには、そのグループに属する製品の個別の名前が表示されます。 入れ子になったデータバインドコントロールの <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> プロパティは `Products`に設定されます。これは、`It` オブジェクトの別名です。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection GroupByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection GroupByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.GroupByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GroupByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ GroupByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GroupByParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.GroupByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Group By 句の作成に使用されるパラメーターのコレクションを取得します。</summary>
        <value>Group By 句の作成に使用されるパラメーター。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールは、<xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> コレクションのパラメーターを使用して、実行時に Group By 句を作成します。 通常は、<xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> コレクションを使用してデータをグループ化しません。 代わりに、<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> プロパティを使用できます。 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> コレクションは、Group By 句の値を実行時に設定する必要があり、その値がプロパティ名ではない場合にのみ使用します。 たとえば、データレコードの `LastName` プロパティがユーザーによって指定された値と等しいかどうかに基づいてデータをグループ化するには、<xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> コレクションを使用します。  
  
 プロパティでデータをグループ化する必要があり、そのプロパティを実行時に設定する必要がない場合は、<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> プロパティでグループ化プロパティを定義できます。 たとえば、`LastName`別にグループ化されたデータベーステーブルから値を返すには、パラメーターを指定せずに <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> を "LastName" に設定します。 プロパティによってデータを動的にグループ化する場合は、<xref:System.Web.UI.WebControls.LinqDataSource.Selecting> イベントのイベントハンドラーを作成し、必要に応じて <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> プロパティをカスタマイズします。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> コレクションのパラメーターの値として、プロパティの名前を割り当てることはできません。 実行時に設定する必要がある条件を <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> プロパティに追加する場合は、<xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> コレクションにパラメーターを追加します。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> コレクションに値を設定するには、各パラメーターに名前を割り当ててから、その名前付きパラメーターの <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> プロパティにプレースホルダーを追加します。 Group By 句で、各パラメーター名の先頭に @ 記号を付けます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public int Insert (System.Collections.IDictionary values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Insert(class System.Collections.IDictionary values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (values As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Insert(System::Collections::IDictionary ^ values);" />
      <MemberSignature Language="F#" Value="member this.Insert : System.Collections.IDictionary -&gt; int" Usage="linqDataSource.Insert values" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="values">データ ソースに挿入する行の値。</param>
        <summary>挿入の操作を実行します。</summary>
        <returns>挿入操作の影響を受けた行の数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常、コードから <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> メソッドを呼び出す必要はありません。 データバインドコントロールは、ユーザーが新しいレコードを挿入するアクションを実行すると、<xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> メソッドを自動的に呼び出します。 データを挿入するための独自のプロセスを作成する場合は、明示的に <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> メソッドを呼び出します。  
  
   
  
## Examples  
 次の例は、ユーザーがボタンをクリックした後に、プログラムによってデータソースに新しいレコードを挿入する方法を示しています。 このコードは、既定値を含む <xref:System.Collections.Specialized.ListDictionary> オブジェクトを <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> メソッドに渡します。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/cs/Default2.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/vb/Default2.aspx.vb#1)]  
  
 次の例は、前の例のマークアップを示しています。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inserted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Inserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Inserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Inserted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserted As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Inserted;" />
      <MemberSignature Language="F#" Value="member this.Inserted : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Inserted : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>挿入操作が終了したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 挿入操作から例外をキャッチしたり、挿入操作の完了後に値を調べたりするには、<xref:System.Web.UI.WebControls.LinqDataSource.Inserted> イベントを処理します。 イベントハンドラーに渡される <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> オブジェクトを使用して、新しい値を取得できます。 たとえば、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> オブジェクトを使用して、データベースによって生成された新しいデータレコードの id プロパティを取得できます。  
  
   
  
## Examples  
 次の例では、<xref:System.Web.UI.WebControls.LinqDataSource.Inserted> イベントのイベントハンドラーを作成して、例外を確認し、新しいレコードの identity プロパティを取得する方法を示します。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inserting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; Inserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; Inserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Inserting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserting As EventHandler(Of LinqDataSourceInsertEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceInsertEventArgs ^&gt; ^ Inserting;" />
      <MemberSignature Language="F#" Value="member this.Inserting : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; " Usage="member this.Inserting : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>挿入操作の前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 挿入するオブジェクトの検証、データクラスからのデータの検証エラーの調査、挿入操作の前の値の変更、または挿入操作の取り消しを行うために、<xref:System.Web.UI.WebControls.LinqDataSource.Inserting> イベントを処理します。 このイベントのイベントハンドラーに渡される <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> オブジェクトには、データソースに挿入する新しいオブジェクトが含まれています。  
  
 挿入操作中に検証エラーが発生した場合、<xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> オブジェクトには、データクラスによってスローされた検証例外が含まれます。 挿入する値がデータクラスのプロパティの型と一致しない場合、またはカスタム検証チェックに合格しなかった場合は、検証エラーが発生します。 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> イベントのイベントハンドラーでは、検証例外を取得して適切なアクションを実行できます。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> イベントのイベントハンドラーで例外がスローされた場合は、そのイベントハンドラーで例外を処理する必要があります。 例外は、(<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> オブジェクトの <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> プロパティを使用して) <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> イベントのイベントハンドラーに渡されません。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> プロパティには、<xref:System.Web.UI.WebControls.LinqDataSource.Inserting> イベントの後にスローされる例外のみが含まれます。  
  
   
  
## Examples  
 次の例は、挿入操作の前にデータを変更する <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> イベントのイベントハンドラーを示しています。 <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> プロパティからのオブジェクトは `Product`という名前の型にキャストされます。 `Product` オブジェクトの `DateModified` プロパティは、現在の日付と時刻に設定されます。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/vb/Default.aspx.vb#1)]  
  
 次の例は、検証例外を取得する <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> イベントのイベントハンドラーを示しています。  
  
```vb  
Protected Sub LinqDataSource_Inserting(ByVal sender As Object, _  
        ByVal e As LinqDataSourceInsertEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Inserting(object sender,   
        LinqDataSourceInsertEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 前の例では、検証例外を取得します。 値がプロパティの型と一致しない場合、例外がスローされる可能性があります。 また、次の例に示すように、カスタマイズされたチェックからもスローされる場合があります。 `OnAgeChanging` メソッドは、`Age` プロパティの数値が負でないことを確認します。  
  
```csharp  
partial void  OnAgeChanging(int? value)  
{  
    if (value < 0)  
    {  
        throw new Exception("Age cannot be a negative number.");  
    }  
}  
```  
  
```vb  
Private Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  
    If (value < 0) Then  
        Throw New Exception("Age cannot be a negative number.")  
    End If  
End Sub  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection InsertParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.InsertParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ InsertParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InsertParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.InsertParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>挿入の操作中に使用されるパラメーターのコレクションを取得します。</summary>
        <value>挿入の操作中に使用されるパラメーターのコレクション。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常、挿入操作に必要な値は、データバインドコントロールによって <xref:System.Web.UI.WebControls.LinqDataSource> コントロールに渡されます。 既定値を指定する場合、または空の値を `null`に変換するかどうかを定義する場合は、insert パラメーターを指定します。 ユーザーが値を指定しなかった場合に処理する必要がある値に対してのみ、挿入されるすべての値に対してパラメーターを指定する必要はありません。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> コレクションに指定した値は、データソースで定義されているがデータコントロールにバインドされていないフィールドに対してのみ使用されます。 たとえば、データベーステーブルに、Name、Address、および郵便番号という名前の列があるものの、テーブルにバインドされている <xref:System.Web.UI.WebControls.ListView> コントロールが、Name フィールドと Address フィールドにのみバインドされているとします。 <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> コレクション内の値は、[郵便番号] フィールドに対してのみ使用されます。 名前とアドレスフィールドには使用されません。 これは、これらのフィールドに値が入力されていない場合でも当てはまります。 データバインドコントロールがデータソース内のすべてのフィールドに対してフィールドを自動生成する場合、<xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> コレクションの値は使用されません。  
  
   
  
## Examples  
 次の例では、<xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> コレクションの既定値を提供するパラメーターを使用して、<xref:System.Web.UI.WebControls.LinqDataSource> コントロールを示します。 ユーザーが `Category` プロパティの値を指定しなかった場合は、パラメーターによって指定された既定値がデータベースに保存されます。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default9.aspx#9)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default9.aspx#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub LoadViewState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void LoadViewState(System::Object ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.LoadViewState : obj -&gt; unit" Usage="linqDataSource.LoadViewState savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" Index="0" FrameworkAlternate="netframework-3.5" />
      </Parameters>
      <Docs>
        <param name="savedState"><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールの状態を表すオブジェクト。</param>
        <summary>永続化する必要がある <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロール内の値の状態を読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
`LoadViewState` メソッドは、以前に保存した <xref:System.Web.UI.WebControls.LinqDataSource> コントロールのビューステートを読み込むために使用されます。

]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)">LinqDataSource Web サーバーコントロールの概要</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)">ASP.NET データ アクセスの概要</related>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="linqDataSource.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベントのデータ。</param>
        <summary><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> オブジェクトを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUnload">
      <MemberSignature Language="C#" Value="protected internal override void OnUnload (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnUnload(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnUnload (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnUnload(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnUnload : EventArgs -&gt; unit" Usage="linqDataSource.OnUnload e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" /> オブジェクト。</param>
        <summary><see cref="E:System.Web.UI.Control.Unload" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.Control.OnUnload(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OrderBy">
      <MemberSignature Language="C#" Value="public string OrderBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OrderBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderBy" />
      <MemberSignature Language="VB.NET" Value="Public Property OrderBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OrderBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OrderBy : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.OrderBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得したデータの並べ替えに使用するフィールドを示す値を取得または設定します。</summary>
        <value>Order By 句の作成に使用される文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> プロパティを使用して、返されたデータから並べ替えに使用するプロパティを指定します。 データの並べ替えに使用するプロパティは、元のデータソースに存在している必要がありますが、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティに含める必要はありません。 順序付けされたデータの取得方法を指定するために、スペースと `Ascending`、`ASC`、`Descending`、または `DESC` を <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 文字列のプロパティに追加できます。  
  
 コンマを使用して各プロパティを区切ることによって、<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> プロパティに複数のプロパティを指定できます。 たとえば、`LastName` と `FirstName`という名前のプロパティの順序を指定するには、<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> プロパティを "LastName, FirstName" に設定します。  
  
> [!NOTE]
>  [!INCLUDE[ss2k](~/includes/ss2k-md.md)] または [!INCLUDE[ssEW](~/includes/ssew-md.md)] で <xref:System.Web.UI.WebControls.LinqDataSource> コントロールを使用し、<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> プロパティを `true`に設定する場合は、<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> プロパティで値を指定する必要があります。 既定では、<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> プロパティは `true`です。 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティに値を割り当てる場合は、クエリで返されるプロパティの一覧にすべての id 列を含める必要もあります。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> プロパティが `true`に設定されている場合、データバインドコントロールは、実行時に <xref:System.Web.UI.WebControls.LinqDataSource> コントロールに並べ替え式を渡すことができます。 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールは、<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> プロパティを適用した後に、データバインドコントロールから並べ替え式を適用します。 したがって、データバインドコントロールからの並べ替え式に従ってデータが返されます。  
  
   
  
## Examples  
 次の例では、`Category` プロパティの値に基づいてアルファベット順で逆順にデータを返します。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default4.aspx#4)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default4.aspx#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection OrderByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection OrderByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OrderByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ OrderByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OrderByParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.OrderByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Order By 句の作成に使用されるパラメーターのコレクションを取得します。</summary>
        <value>Order By 句の作成に使用されるパラメーター。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールは、<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> コレクションのパラメーターを使用して、実行時に Order By 句を作成します。 通常、<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> コレクションにパラメーターを追加する場合は、<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> プロパティを `true` に設定します。 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> プロパティが `true`に設定されている場合、<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> コレクション内の各パラメーターは、<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> コレクションで指定されている順序で Order By 句に追加されます。 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> プロパティが `true`場合、パラメーターはシーケンスで適用され、プレースホルダーとは一致しないため、名前を指定する必要はありません。  
  
 実行時に Order By 句で値を設定する必要がない場合は、<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> コレクションを使用する必要はありません。 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> プロパティでデータの並べ替えに使用するフィールドを定義できます。 たとえば、`LastName`によって並べ替えられたデータベーステーブルから値を返すには、パラメーターを指定せずに <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> を "LastName" に設定します。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> コレクションにパラメーターを設定し、パラメーターを <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> プロパティのプレースホルダーに一致させることができますが、この方法ではアプリケーションが制限されます。 この方法を使用する場合、<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> コレクション内のパラメーターは列名を表すことができません。 パラメーターを値に設定し、その値をプロパティの値と比較することができます。 たとえば、プロパティの値が、パラメーターによって表される実行時の値よりも小さいかどうかに基づいてデータを並べ替えることができます。  
  
   
  
## Examples  
 次の例は、<xref:System.Web.UI.WebControls.LinqDataSource> プロパティが <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> に設定された `true` コントロールを示したものです。 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> コレクションには、ユーザーが <xref:System.Web.UI.WebControls.DropDownList> コントロールから選択したプロパティ名に基づいてデータを順序付けするパラメーターが含まれています。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default8.aspx#8)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default8.aspx#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderGroupsBy">
      <MemberSignature Language="C#" Value="public string OrderGroupsBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OrderGroupsBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy" />
      <MemberSignature Language="VB.NET" Value="Public Property OrderGroupsBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OrderGroupsBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OrderGroupsBy : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>グループ化されたデータの並べ替えに使用するフィールドを取得または設定します。</summary>
        <value>Order Groups By 句の作成に使用される文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 データのグループの並べ替え方法を指定するには、<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> プロパティを使用します。 たとえば、`CategoryID` プロパティでグループ化し、各カテゴリ ID グループを `Price` プロパティの平均で並べ替えることができます。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> プロパティは、データをグループ化した場合にのみ設定できます。 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> プロパティを設定せずに <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> プロパティを設定した場合、<xref:System.Web.UI.WebControls.LinqDataSource> コントロールは例外をスローします。  
  
 データの並べ替えに使用されるプロパティは、データのグループ化に使用されるプロパティか、グループ化されたデータに対する集計関数の結果である必要があります。 データの並べ替え方法を指定するには、スペースと文字列 "昇順"、"ASC"、"降順"、または "DESC" を <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 文字列のプロパティ名に追加します。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> プロパティには、複数のプロパティを指定できます。 コンマを使用して、各プロパティを区切ります。  
  
   
  
## Examples  
 次の例では、2つのプロパティを使用してデータをグループ化する方法と、これらのプロパティのいずれかを使用してグループ化されたデータを並べ替える方法を示します。 `Products` という名前のテーブルのデータは、`CategoryID` と `Discontinued`という名前のプロパティを使用してグループ化されます。 グループ化されたデータは、`CategoryID` プロパティによって並べ替えられます。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/vb/Default.aspx#1)]  
  
 次の例は、プロパティを使用してデータをグループ化する方法と、集計関数の結果に基づいてデータを並べ替える方法を示しています。 `Products` テーブルのデータは、`CategoryID` プロパティを使用してグループ化されます。 各グループ内の `UnitPrice` プロパティの平均に基づいて並べ替えられます。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderGroupsByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OrderGroupsByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ OrderGroupsByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OrderGroupsByParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Order Groups By 句の作成に使用されるパラメーターのコレクションを取得します。</summary>
        <value>Order Groups By 句の作成に使用されるパラメーター。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールは、<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> コレクションのパラメーターを使用して、実行時に Order Groups By 句を作成します。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> コレクションに値を追加するのは、Order Groups By 句で実行時に値を設定する必要がある場合のみです。 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> プロパティを使用して、データの並べ替えに使用するフィールドを定義できます。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> コレクションでパラメーターを設定し、パラメーターを <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> プロパティのプレースホルダーに一致させることができます。 ただし、この方法を使用する場合、<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> コレクション内のパラメーターは列名を表すことはできません。値を表す必要があります。 パラメーターを値に設定し、その値をプロパティと比較することができます。 たとえば、プロパティの値が、パラメーターによって表される実行時の値よりも小さいかどうかに基づいてデータを並べ替えることができます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function SaveViewState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Object ^ SaveViewState();" />
      <MemberSignature Language="F#" Value="override this.SaveViewState : unit -&gt; obj" Usage="linqDataSource.SaveViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールの現在のビューステートを保存します。</summary>
        <returns><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールについて前回保存した状態を格納しているオブジェクト。</returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)">LinqDataSource Web サーバーコントロールの概要</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)">ASP.NET データ アクセスの概要</related>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public string Select { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Select" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.Select" />
      <MemberSignature Language="VB.NET" Value="Public Property Select As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Select { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Select : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.Select" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得したデータに含まれるプロパティと計算値を取得または設定します。</summary>
        <value>Select 句の作成に使用される文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティを設定しない場合、<xref:System.Web.UI.WebControls.LinqDataSource> コントロールはデータオブジェクトからすべてのプロパティ (データ列) を取得します。 オブジェクトからプロパティのサブセットを取得したり、データを取得するときに新しい値を計算したりするには、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティを使用します。  
  
 取得するプロパティを指定するには、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティに、返されたデータに含めるプロパティの名前を設定します。  
  
 データオブジェクトからプロパティのサブセットを取得すると、<xref:System.Web.UI.WebControls.LinqDataSource> コントロールによって、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティに指定したプロパティのみを含むクラスが動的に作成されます。 データオブジェクトのプロパティではないプロパティを計算する場合は、クラスも動的に作成されます。 このような場合、クエリから返されるオブジェクトは、<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> プロパティで指定されたクラスのインスタンスではありません。 代わりに、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティの `new` メソッドを使用して、クエリから新しいクラスが返されることを示す必要があります。 たとえば、これらのプロパティを含むオブジェクトから `FirstName` と `LastName` のプロパティのみを返すには、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティを `new(FirstName, LastName)`に設定します。 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールは、`new` メソッドで指定した新しいクラスを動的に作成します。  
  
 `As` キーワードを使用して、選択した値に別名を割り当てることができます。 エイリアスを割り当てる場合は、`new` メソッドにエイリアス化されたプロパティを含める必要があります。 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールの結果にバインドするデータバインドコントロールは、別名によってプロパティを参照する必要があります。 たとえば、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティを `new(Region As SalesRegion, Revenue / 1000 As RevenueThousands)`に設定した場合、データバインドコントロールは `SalesRegion` と `RevenueThousands`の2つのプロパティにアクセスできます。  
  
 次の表に示す条件に従って、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティの `new` 関数を使用します。  
  
|選択|New の使用|例|  
|------------|----------------|-------------|  
|1つのプロパティ。|`new` 必要ありません。|`Select="Category"`|  
|複数のプロパティ。|`new` 必要です。|`Select="new(Category, Name)"`|  
|エイリアスを持つ1つまたは複数のプロパティ。|`new` 必要です。|`Select="new(Category As CategoryGroup)"`|  
  
 自動データ変更を有効にし、データオブジェクトのすべてのプロパティを表示しない場合は、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティを設定しないでください。 代わりに、データバインドコントロールを使用して表示を管理します。 <xref:System.Web.UI.WebControls.DetailsView> コントロールまたは <xref:System.Web.UI.WebControls.GridView> コントロールを使用する場合は、<xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> または <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> プロパティも `false`に設定する必要があります。 データバインドコントロールに表示されない値は、ビューステートに格納されます。 これらは、データ更新の実行時にデータソースに渡されます。  
  
 クエリでデータをグループ化する場合は、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティに集計メソッドを含めることができます。 次の集計メソッドを使用できます。  
  
-   `Count()`  
  
-   `Average(`*列*`)`  
  
-   `Sum(`*列*`)`  
  
-   `Max(`*列*`)`  
  
-   `Min(`*列*`)`  
  
-   `Where(`*条件*`)`  
  
-   `Any()`  
  
-   `All(`*条件*`)`  
  
 詳細については、「 [Linqdatasource Web サーバーコントロールの概要](https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100))」および「[方法: Linqdatasource コントロールを使用してデータをグループ化および集計する](https://docs.microsoft.com/previous-versions/aspnet/bb470251(v=vs.100))」を参照してください。  
  
 データをグループ化する場合、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティに動的に作成されたプロパティである `Key` および `It`を含めることができます。 `Key` プロパティは、データをグループ化するために使用されたプロパティの値を参照します。 たとえば、`Category`という名前のプロパティでグループ化した場合、`Key` プロパティには `Category` プロパティの一意の値がそれぞれ格納されます。 `It` プロパティは、データグループ内の個々のレコードのコレクションを参照します。 `It` プロパティを反復処理して、グループ化操作で統合された個々のレコードを取得できます。 たとえば、`Category`という名前のプロパティでグループ化した場合、`It` プロパティには、`Category` プロパティで共通の値を共有するすべてのレコードが含まれます。  
  
 データをグループ化するときに、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティに `It` キーワードを含める場合は、`It` キーワードにエイリアスを割り当てる必要があります。 `It` にエイリアスがない場合は、<xref:System.Web.UI.WebControls.LinqDataSource> コントロールによって例外がスローされます。 `Key` キーワードにエイリアスを割り当てることはできますが、これは必須ではありません。  
  
   
  
## Examples  
 次の例では、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティを、データオブジェクトのプロパティのサブセットに設定する方法を示します。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default10.aspx#10)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default10.aspx#10)]  
  
 次の例は、データをグループ化するために使用されたプロパティの値を取得し、グループ化されたレコードの平均を取得する方法を示しています。 `Key` キーワードには、データをグループ化するために使用されたプロパティが含まれています。 この例では、`ProductCategory` プロパティの共有値が `Key` に含まれています。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default3.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default3.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Selected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Selected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selected As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Selected;" />
      <MemberSignature Language="F#" Value="member this.Selected : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Selected : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ取得操作が終了したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 データ取得操作から例外をキャッチしたり、取得操作が終了した後にデータオブジェクトを調べたりするには、<xref:System.Web.UI.WebControls.LinqDataSource.Selected> イベントを処理します。 オブジェクトは、イベントハンドラーに渡される <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> オブジェクトから使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selecting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; Selecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; Selecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Selecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selecting As EventHandler(Of LinqDataSourceSelectEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceSelectEventArgs ^&gt; ^ Selecting;" />
      <MemberSignature Language="F#" Value="member this.Selecting : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; " Usage="member this.Selecting : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ取得操作の前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次のタスクを実行するために <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> イベントを処理します。  
  
-   データ取得用のパラメーターを変更します。  
  
-   プログラムによってクエリを生成します。  
  
-   並べ替えまたはページングの値を変更します。  
  
-   カスタムの並べ替えまたはページングを実行します。  
  
-   データ取得操作をキャンセルします。  
  
 このイベントのイベントハンドラーに渡される <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> オブジェクトには、データ取得操作のためのパラメーターが含まれています。 クエリを実行する前に <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> イベントハンドラーのパラメーターを変更することも、新しい結果セットを作成して <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> プロパティに割り当てることもできます。  
  
 このイベントのハンドラーにカスタムの並べ替えまたはページングを実装する機能は、<xref:System.Web.UI.WebControls.LinqDataSource>にバインドされているコントロールによって制限される場合があります。 たとえば、<xref:System.Web.UI.WebControls.GridView> コントロールの列ヘッダーをクリックすると、コントロールは自動並べ替えを実行します。これは、イベントハンドラーで設定された順序をオーバーライドする可能性があります。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> イベントのイベントハンドラーで例外がスローされた場合は、そのイベントハンドラーで例外を処理する必要があります。 例外は、(<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> オブジェクトの <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> プロパティを使用して) <xref:System.Web.UI.WebControls.LinqDataSource.Selected> イベントのイベントハンドラーに渡されません。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> プロパティには、<xref:System.Web.UI.WebControls.LinqDataSource.Selecting> イベントの後にスローされる例外のみが含まれます。  
  
   
  
## Examples  
 次の例は、<xref:System.Web.UI.WebControls.LinqDataSource.Selecting> イベントのイベントハンドラーを示しています。 ハンドラーは、Web ページ内の文字列値の配列から値を取得するクエリを作成します。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default3.aspx.cs#3)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default3.aspx.vb#3)]  
  
 次の例では、ストアドプロシージャを表すメソッドから返されたオブジェクトに <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> プロパティを割り当てる方法を示します。  
  
```vb  
Protected Sub LinqDataSource_Selecting(ByVal sender As Object, _  
        ByVal e As LinqDataSourceSelectEventArgs)  
    Dim exampleContext As ExampleDataContext = New ExampleDataContext()  
    e.Result = exampleContext.GetRegisteredCustomers()  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Selecting(object sender,   
        LinqDataSourceSelectEventArgs e)  
{  
    ExampleDataContext exampleContext = new ExampleDataContext();  
    e.Result = exampleContext.GetRegisteredCustomers();  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection SelectParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.SelectParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ SelectParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.SelectParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ取得の操作中に使用されるパラメーターのコレクションを取得します。</summary>
        <value>Select 句の作成に使用されるパラメーター。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールは、<xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> コレクションのパラメーターを使用して、実行時に Select 句を作成します。 Select 句で実行時の値を使用する場合は、<xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> コレクションにパラメーターを追加します。 たとえば、<xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> コレクションにパラメーターを追加して、ユーザーのプロファイルのプロパティを表すことができます。 その後、そのプロパティとデータソースからの値を使用して、新しい値を計算できます。  
  
 Select 句で実行時に値を設定する必要がない場合は、<xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> コレクションを使用する必要はありません。 取得するプロパティは、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティで定義できます。 たとえば、データベーステーブルから `FirstName` と `LastName` の値を取得するには、パラメーターを指定せずに <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> を "FirstName, LastName" に設定します。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> コレクションに値を設定するには、名前付きパラメーターの <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティにプレースホルダーを追加します。 Select 句で、各パラメーター名の先頭に @ 記号を付けます。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> コレクション内のパラメーターを使用してプロパティ名を表すことはできません。 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティをプロパティの名前に動的に設定するには、<xref:System.Web.UI.WebControls.LinqDataSource.Selecting> イベントのイベントハンドラーを作成し、必要に応じて <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティをカスタマイズします。  
  
   
  
## Examples  
 次の例は、ユーザーが指定した値を使用して、返されたデータの値を計算する方法を示しています。 ユーザーは、製造日の数を表す値をテキストボックスに入力できます。 この値は、製品を製造する日数を表すデータベースの値で除算されます。 返される値は、指定された日数の間に製造できる製品の数を示します。 ユーザーの入力は、<xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> コレクションを通じて Select コマンドに含まれています。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.SelectParameters/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.SelectParameters/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StoreOriginalValuesInViewState">
      <MemberSignature Language="C#" Value="public bool StoreOriginalValuesInViewState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StoreOriginalValuesInViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState" />
      <MemberSignature Language="VB.NET" Value="Public Property StoreOriginalValuesInViewState As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool StoreOriginalValuesInViewState { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.StoreOriginalValuesInViewState : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ ソースから取得するデータをビューステートに保存して、そのデータが更新または削除される前に別のプロセスによって変更されていないことを確認する値を取得または設定します。</summary>
        <value>値をビューステートに保存する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定では、更新操作および削除操作が有効になっていると、<xref:System.Web.UI.WebControls.LinqDataSource> コントロールは、すべてのレコードの元の値をビューステートに格納します。 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールには、すべての主キーと、`Column` 属性の `UpdateCheck.Never` でマークされていないすべてのプロパティの値が格納されます。 [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]で `Column` 属性の `UpdateCheck` プロパティを設定します。  
  
 データを更新または削除する前 LINQ to SQL に、データソースの現在の値に対してビューステートの値をチェックします。 値が一致しない場合、データソースレコードは変更されています。 この場合、LINQ to SQL は例外をスローし、更新または削除操作は続行されません。 LINQ to SQL の詳細については、「 [LINQ to SQL](https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655)」を参照してください。  
  
 元の値をビューステートに格納すると、ページサイズが不必要に大きくなり、機密データが悪意のあるユーザーに公開される可能性があります。 <xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A> プロパティを `false`に設定することにより、ビューステートに値を格納できないようにすることができます。 これを行う場合は、データが変更されていないことを確認する独自の方法を用意する必要があります。 <xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A> プロパティを `false`に設定した場合、元の値はデータバインドコントロールのビューステートに保存されません。 この場合、LINQ to SQL は、データの整合性を検証できません。 LINQ to SQL は、データソース内のデータが実際に変更されていない場合でもデータの競合を示す例外をスローします。  
  
 更新中に自動的に更新されるタイムスタンプフィールドが基になるデータソースに含まれている場合は、その値のみをビューステートに格納できます。 この場合、エンティティクラスの timestamp プロパティは `IsVersion=true` に設定され、すべてのプロパティは `UpdateCheck.Never`に設定されます。 タイムスタンプフィールドは、そのレコード内のデータが変更されるたびにデータベースによって自動的に更新されるため、データが変更された場合、LINQ to SQL によってその値が決定されます。 これにより、ビューステートのサイズを小さくすることができ、機密データは公開されません。 LINQ to SQL では、ビューステートのタイムスタンプ値とデータベースのタイムスタンプ値を比較することによって、データの一貫性をチェックします。 詳細については、「[チュートリアル: LinqDataSource コントロールでタイムスタンプを使用してデータの整合性をチェックする](https://msdn.microsoft.com/library/e7700162-4f05-4130-81f7-3be1361027fa)」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655">LINQ to SQL</related>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.ContextType">
      <MemberSignature Language="C#" Value="Type System.Web.DynamicData.IDynamicDataSource.ContextType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type System.Web.DynamicData.IDynamicDataSource.ContextType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType" />
      <MemberSignature Language="VB.NET" Value=" Property ContextType As Type Implements IDynamicDataSource.ContextType" />
      <MemberSignature Language="C++ CLI" Value="property Type ^ System::Web::DynamicData::IDynamicDataSource::ContextType { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.System.Web.DynamicData.IDynamicDataSource.ContextType : Type with get, set" Usage="System.Web.DynamicData.IDynamicDataSource.ContextType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.ContextType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="T:System.Web.DynamicData.IDynamicDataSource" />」をご覧ください。</summary>
        <value>クラスに関連付けられている型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Web.UI.WebControls.LinqDataSource> のインスタンスが <xref:System.Web.DynamicData.IDynamicDataSource> インターフェイスにキャストされる場合のみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.EntitySetName">
      <MemberSignature Language="C#" Value="string System.Web.DynamicData.IDynamicDataSource.EntitySetName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string System.Web.DynamicData.IDynamicDataSource.EntitySetName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName" />
      <MemberSignature Language="VB.NET" Value=" Property EntitySetName As String Implements IDynamicDataSource.EntitySetName" />
      <MemberSignature Language="C++ CLI" Value="property System::String ^ System::Web::DynamicData::IDynamicDataSource::EntitySetName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.System.Web.DynamicData.IDynamicDataSource.EntitySetName : string with get, set" Usage="System.Web.DynamicData.IDynamicDataSource.EntitySetName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EntitySetName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="T:System.Web.DynamicData.IDynamicDataSource" />」をご覧ください。</summary>
        <value>エンティティの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Web.UI.WebControls.LinqDataSource> のインスタンスが <xref:System.Web.DynamicData.IDynamicDataSource> インターフェイスにキャストされる場合のみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.Exception">
      <MemberSignature Language="C#" Value="event EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt; System.Web.DynamicData.IDynamicDataSource.Exception;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.DynamicData.DynamicValidatorEventArgs&gt; System.Web.DynamicData.IDynamicDataSource.Exception" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#Exception" />
      <MemberSignature Language="VB.NET" Value="Custom Event Exception As EventHandler(Of DynamicValidatorEventArgs) Implements System.Web.DynamicData.IDynamicDataSource" />
      <MemberSignature Language="F#" Value="member this.System.Web.DynamicData.IDynamicDataSource.Exception : EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt; " Usage="member this.System.Web.DynamicData.IDynamicDataSource.Exception : System.EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.DynamicData.IDynamicDataSource.Exception</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="T:System.Web.DynamicData.IDynamicDataSource" />」をご覧ください。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Web.UI.WebControls.LinqDataSource> のインスタンスが <xref:System.Web.DynamicData.IDynamicDataSource> インターフェイスにキャストされる場合のみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TableName">
      <MemberSignature Language="C#" Value="public string TableName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TableName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.TableName" />
      <MemberSignature Language="VB.NET" Value="Public Property TableName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TableName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TableName : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.TableName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ コンテキスト クラス内でデータ コレクションを表すプロパティまたはフィールドの名前を取得または設定します。</summary>
        <value>データ コレクションを含むプロパティの名前を示す文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> プロパティに、取得するデータを表すプロパティまたはフィールドの名前を設定します。 データベーステーブルに接続する場合、プロパティの名前は通常、テーブルの名前と同じになります。 メモリ内データコレクションに接続する場合は、<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> プロパティを、データコレクションを返すプロパティまたはフィールドの名前に設定します。  
  
 取得操作のために、任意の型を返すプロパティを <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> プロパティに割り当てることができます。 プロパティによって表されるオブジェクトが <xref:System.Collections.IEnumerable>を実装していない場合は、<xref:System.Web.UI.WebControls.LinqDataSource> コントロールによって、オブジェクトが <xref:System.Collections.IEnumerable> オブジェクトのインスタンスに自動的にラップされます。  
  
 更新、挿入、または削除の自動操作を有効にするには、<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> プロパティに割り当てられているクラスが <xref:System.Data.Linq.DataContext> から派生し、<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> プロパティに割り当てられたプロパティが <xref:System.Data.Linq.Table%601>から派生している必要があります。  
  
 クラスのインスタンスからデータを選択する方法の詳細については、<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> プロパティを参照してください。  
  
   
  
## Examples  
 次の例は、2つの <xref:System.Web.UI.WebControls.LinqDataSource> コントロールを示しています。 1つの <xref:System.Web.UI.WebControls.LinqDataSource> コントロールで、<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> プロパティはクラスのプロパティに設定されます。 このプロパティは、文字列の配列を返します。 他の <xref:System.Web.UI.WebControls.LinqDataSource> コントロールでは、<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> プロパティは、データベーステーブルを表すプロパティに設定されます。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/Default.aspx#2)]  
  
 この例では、データベーステーブルを表す `ExampleDataContext` という名前のクラスは示されていません。 この例を使用するには、Example .dbml という名前の LINQ to SQL クラスを追加し、Movie という名前のテーブルを [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]にドラッグして、このクラスを作成する必要があります。 `Movies` という名前のプロパティを持つ `ExampleDataContext` という名前のクラスが生成されます。  
  
 次の例は、<xref:System.Web.UI.WebControls.LinqDataSource> コントロールで参照される `MovieLibrary` という名前のクラスを示しています。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/App_Code/MovieLibrary.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/App_Code/MovieLibrary.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void TrackViewState();" />
      <MemberSignature Language="F#" Value="override this.TrackViewState : unit -&gt; unit" Usage="linqDataSource.TrackViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールのビューステートの変更を追跡し、変更がコントロールの <see cref="T:System.Web.UI.StateBag" /> オブジェクトに格納されるようにします。</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)">LinqDataSource Web サーバーコントロールの概要</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)">ASP.NET データ アクセスの概要</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Collections.IDictionary keys, class System.Collections.IDictionary values, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (keys As IDictionary, values As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ values, System::Collections::IDictionary ^ oldValues);" />
      <MemberSignature Language="F#" Value="member this.Update : System.Collections.IDictionary * System.Collections.IDictionary * System.Collections.IDictionary -&gt; int" Usage="linqDataSource.Update (keys, values, oldValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="values" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">更新するレコードの行のキー値。</param>
        <param name="values">データ ソース内で更新する行の値。</param>
        <param name="oldValues">データの競合を検出するために評価される行の値。</param>
        <summary>更新の操作を実行します。</summary>
        <returns>更新操作によって影響を受けたレコードの数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常、コードから <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> メソッドを呼び出す必要はありません。 ユーザーがレコードを更新するアクションを実行すると、データバインドコントロールは、<xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> メソッドを自動的に呼び出します。 データを更新するための独自のプロセスを作成する場合は、明示的に <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> メソッドを呼び出します。  
  
   
  
## Examples  
 次の例は、ユーザーがボタンをクリックした後に、プログラムによってデータソース内のレコードを更新する方法を示しています。 このコードは、キー値、元の値を含む <xref:System.Collections.Specialized.ListDictionary> オブジェクト、および <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> メソッドの新しい値を格納している <xref:System.Collections.Specialized.ListDictionary> オブジェクトを含む <xref:System.Collections.Specialized.ListDictionary> オブジェクトを渡します。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Update#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/cs/Default2.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Update#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/vb/Default3.aspx.vb#1)]  
  
 次の例は、前の例のマークアップを示しています。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.Update#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.Update#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/vb/Default3.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Updated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Updated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updated As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Updated;" />
      <MemberSignature Language="F#" Value="member this.Updated : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Updated : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>更新操作が終了したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 更新操作から例外をキャッチしたり、更新操作の完了後に出力パラメーターの値を確認したりするために、<xref:System.Web.UI.WebControls.LinqDataSource.Updated> イベントを処理します。 出力パラメーターは、イベントハンドラーに渡される <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> オブジェクトから使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection UpdateParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.UpdateParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UpdateParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ UpdateParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UpdateParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.UpdateParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このコレクションは、<see cref="T:System.Web.UI.WebControls.LinqDataSource" /> クラスでは使用されません。</summary>
        <value>パラメーターのコレクション。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Updating">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; Updating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; Updating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Updating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updating As EventHandler(Of LinqDataSourceUpdateEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceUpdateEventArgs ^&gt; ^ Updating;" />
      <MemberSignature Language="F#" Value="member this.Updating : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; " Usage="member this.Updating : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>更新操作の前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 更新するオブジェクトの検証、データクラスからのデータの検証エラーの確認、更新操作の前の値の変更、または更新操作の取り消しを行うために、<xref:System.Web.UI.WebControls.LinqDataSource.Updating> イベントを処理します。 イベントハンドラーに渡される <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> オブジェクトには、元のオブジェクトと更新されたオブジェクトの両方が含まれます。  
  
 更新操作中に検証エラーが発生した場合、<xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> オブジェクトには、データクラスによってスローされた検証例外が含まれます。 更新する値がデータクラスのプロパティの型と一致しない場合、またはカスタム検証チェックに合格しなかった場合は、検証エラーが発生します。 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> イベントのイベントハンドラーでは、検証例外を取得して適切なアクションを実行できます。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> イベントのイベントハンドラーで例外がスローされた場合は、そのイベントハンドラーで例外を処理する必要があります。 例外は、(<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> オブジェクトの <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> プロパティを使用して) <xref:System.Web.UI.WebControls.LinqDataSource.Updated> イベントのイベントハンドラーに渡されません。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> プロパティには、<xref:System.Web.UI.WebControls.LinqDataSource.Updating> イベントの後にスローされる例外のみが含まれます。  
  
   
  
## Examples  
 次の例は、<xref:System.Web.UI.WebControls.LinqDataSource.Updating> イベントのイベントハンドラーを示しています。 このコードでは、<xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> プロパティと <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> プロパティのプロパティを比較して、値が変更されたかどうかを確認します。 値が変更された場合は、<xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> プロパティの値が `true`に設定されます。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 次の例は、検証例外を取得する <xref:System.Web.UI.WebControls.LinqDataSource.Updating> イベントのイベントハンドラーを示しています。  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 前の例では、検証例外を取得します。 値がプロパティの型と一致しない場合、例外がスローされる可能性があります。 また、次の例に示すように、カスタマイズされたチェックからもスローされる場合があります。 `OnAgeChanging` メソッドは、`Age` プロパティの数値が負でないことを確認します。  
  
```csharp  
partial void  OnAgeChanging(int? value)  
{  
    if (value < 0)  
    {  
        throw new Exception("Age cannot be a negative number.");  
    }  
}  
```  
  
```vb  
Private Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  
    If (value < 0) Then  
        Throw New Exception("Age cannot be a negative number.")  
    End If  
End Sub  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Where">
      <MemberSignature Language="C#" Value="public string Where { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Where" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.Where" />
      <MemberSignature Language="VB.NET" Value="Public Property Where As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Where { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Where : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.Where" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.Where</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得されるデータにレコードを含めるかどうかを決める条件を示す値を取得または設定します。</summary>
        <value>Where 句の作成に使用される文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クエリから返されるレコードの条件を指定するには、<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> プロパティを使用します。 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> プロパティの構文は、のC#LINQ の Where 句の構文と同じです。  
  
 ブール値になる式を指定します。また、式が特定の行の `true` に評価される場合は、その行が結果セットに含まれます。 式は、次の例に示すように、と比較する列名、比較演算子、および値で構成されます。  
  
```  
<asp:LinqDataSource ... Where="Price > 50"...>  
```  
  
 論理 `AND` または `OR` 演算子によってリンクされた複数の式を指定するには、次の例に示すように、論理 AND 演算子として `&&` を使用し、論理 OR 演算子として `||` します。  
  
```  
<asp:LinqDataSource ... Where="Price > 50 && Price < 100"...>  
<asp:LinqDataSource ... Where="Price <= 50 || Price >= 100"...>  
```  
  
 リテラル文字列値に対してプロパティをテストする場合は、リテラル文字列値を二重引用符で囲む必要があります。 マークアップでこれを行うには、次の例に示すように、<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 句の値を単一引用符で囲みます。  
  
```  
<asp:LinqDataSource ... Where='Category = "Sports"' ... >  
```  
  
 コード内のリテラル文字列値に対してテストするには、次の例に示すように、二重引用符を挿入するために使用している言語に適したエスケープ文字を使用します。  
  
```vb  
LinqDataSource1.Where = "Category = ""Sports"""  
```  
  
```csharp  
LinqDataSource1.Where = "Category = \"Sports\"";  
```  
  
 文字列が別の文字列より大きいか小さいかをテストする場合は、列名と文字列値の間で `<` または `>` 演算子を使用するのではなく、<xref:System.String> クラスのメソッドを使用する必要があります。 次の例では、カテゴリの値が、より小さい、以下、より大きい、または "スポーツ" 以上の行を選択する方法を示します。  
  
```  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") < 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") <= 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") > 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") >= 0' ... >  
```  
  
 また、<xref:System.String.StartsWith%2A>、<xref:System.String.EndsWith%2A>、<xref:System.String.Contains%2A>など、<xref:System.String> クラスの他のメソッドを使用することもできます。 文字列を比較する方法の詳細については、「[文字列の比較](~/docs/standard/base-types/comparing.md)」を参照してください。 Where 句の構文の詳細については、「 [ C#演算子](https://msdn.microsoft.com/library/0301e31f-22ad-49af-ac3c-d5eae7f0ac43)と[where 句](~/docs/csharp/language-reference/keywords/where-clause.md)」を参照してください。  
  
 Web ページの作成時に定義した静的な値に基づいてフィルター処理するだけでなく、実行時に評価される動的な値に基づいてフィルター処理を行うことができます。 その場合は、値のプレースホルダーとして機能する名前付きパラメーターを <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> プロパティに追加します。 次に、一致する名前を持つパラメーターを <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> コレクションに追加します。  
  
 または、<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> プロパティを `true` に設定し、<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> コレクションでパラメーターを定義することもできます。 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> プロパティが `true`場合、<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> プロパティに名前付きパラメーターを含める必要はありません。 代わりに、<xref:System.Web.UI.WebControls.LinqDataSource> コントロールは、<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> プロパティのパラメーターから Where 句を自動的に生成します。  
  
 データをフィルター処理する方法の詳細については、「[チュートリアル: LinqDataSource コントロールと GridView コントロールを使用したデータのサブセットの選択とフィルター処理](https://msdn.microsoft.com/library/c1cca3e8-86e4-4e69-a29f-1c05b91f2205)」を参照してください。  
  
   
  
## Examples  
 次の例は、静的な条件に基づいてクエリから返されるデータをフィルター処理する方法を示しています。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default5.aspx#5)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default5.aspx#5)]  
  
 次の例は、実行時にユーザーが指定した値に基づいてデータをフィルター処理する方法を示しています。 この例では、<xref:System.Web.UI.WebControls.DropDownList> コントロールと <xref:System.Web.UI.WebControls.GridView> コントロールがページに表示されます。 ユーザーが <xref:System.Web.UI.WebControls.DropDownList> コントロールのいずれかの値を選択すると、<xref:System.Web.UI.WebControls.LinqDataSource> コントロールは `Products` テーブルから選択された値と等しい `UserPrice` 値を持つ行のみを選択します。 <xref:System.Web.UI.WebControls.GridView> コントロールは、フィルター処理されたデータを表示します。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default6.aspx#6)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default6.aspx#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WhereParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection WhereParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection WhereParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WhereParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ WhereParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WhereParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.WhereParameters" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.WhereParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Where 句の作成に使用されるパラメーターのコレクションを取得します。</summary>
        <value>Where 句を作成するために使用される、<see cref="P:System.Web.UI.WebControls.LinqDataSource.Where" /> プロパティのパラメーターのコレクション。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールは、<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> コレクションのパラメーターを使用して、実行時に Where 句を作成します。 Where 句で1つ以上の条件をプログラムによって設定する場合は、<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> コレクションにパラメーターを追加します。 たとえば、データベーステーブルで、<xref:System.Web.UI.WebControls.TextBox> コントロールの値と同じ姓を持つレコードを検索することができます。 その場合は、テキストボックスの値の <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> コレクションにパラメーターを追加します。  
  
 実行時に Where 句で値を設定する必要がない場合は、<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> コレクションを使用する必要はありません。 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> プロパティで取得するフィールドを定義できます。 たとえば、マークアップで `LastName` が "Adams" と等しいデータベーステーブルから値を返すには、<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> プロパティをパラメーターなしで `'LastName = "Adams"'` に設定します。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> コレクションに値を設定するには、各パラメーターに名前を割り当ててから、そのパラメーターの <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> プロパティにプレースホルダーを追加します。 Where 句で、各パラメーター名の先頭に @ 記号を付けます。  
  
   
  
## Examples  
 次の例では、<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> コレクションを使用して Where 句を動的に作成する方法を示します。 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールは、<xref:System.Web.UI.WebControls.DropDownList> コントロールでユーザーが選択した値よりも大きい `Price` 列の値を持つすべてのレコードを返します。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default6.aspx#6)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default6.aspx#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
