<Type Name="CustomValidator" FullName="System.Web.UI.WebControls.CustomValidator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e4c21965774062912a6c2b45968018e2ff30da4f" /><Meta Name="ms.sourcegitcommit" Value="a8ff98b48bda124cfcb2605f5da9b21bc6dcd791" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/14/2020" /><Meta Name="ms.locfileid" Value="77244630" /></Metadata><TypeSignature Language="C#" Value="public class CustomValidator : System.Web.UI.WebControls.BaseValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CustomValidator extends System.Web.UI.WebControls.BaseValidator" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.CustomValidator" />
  <TypeSignature Language="VB.NET" Value="Public Class CustomValidator&#xA;Inherits BaseValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class CustomValidator : System::Web::UI::WebControls::BaseValidator" />
  <TypeSignature Language="F#" Value="type CustomValidator = class&#xA;    inherit BaseValidator" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.BaseValidator</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("ServerValidate")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Web.UI.ToolboxData("&lt;{0}:CustomValidator runat="server" ErrorMessage="CustomValidator"&gt;&lt;/{0}:CustomValidator&gt;")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.Web.UI.ToolboxData("&lt;{0}:CustomValidator runat=server ErrorMessage="CustomValidator"&gt;&lt;/{0}:CustomValidator&gt;")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>入力コントロールのユーザー定義検証を実行します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.CustomValidator> コントロールを使用して、入力コントロールにユーザー定義の検証関数を提供します。 <xref:System.Web.UI.WebControls.CustomValidator> コントロールは、検証対象の入力コントロールとは別のコントロールであり、検証メッセージを表示する場所を制御できます。

 検証コントロールは、常にサーバーで検証を実行します。 また、スクリプト対応のブラウザー (Microsoft Internet Explorer 4.0 以降など) がクライアントで検証を実行することを可能にする、完全なクライアント側の実装も用意されています。 クライアント側の検証では、サーバーに送信される前にユーザー入力をチェックすることにより、検証プロセスを強化します。 これにより、フォームが送信される前にクライアントでエラーが検出されるため、サーバー側の検証に必要な情報のラウンドトリップが回避されます。

 サーバー側の検証関数を作成するには、検証を実行する <xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> イベントのハンドラーを指定します。 検証する入力コントロールの文字列は、パラメーターとしてイベントハンドラーに渡される <xref:System.Web.UI.WebControls.ServerValidateEventArgs> オブジェクトの <xref:System.Web.UI.WebControls.ServerValidateEventArgs.Value%2A> プロパティを使用してアクセスできます。 検証の結果は、<xref:System.Web.UI.WebControls.ServerValidateEventArgs> オブジェクトの <xref:System.Web.UI.WebControls.ServerValidateEventArgs.IsValid%2A> プロパティに格納されます。

 クライアント側の検証関数を作成するには、先に説明したサーバー側の検証関数を追加します。 次に、クライアント側の検証スクリプト関数を ASP.NET (.aspx) ページに追加します。

 Visual Basic Scripting Edition (VBScript) を使用している場合、関数は次の形式にする必要があります。

```
Sub ValidationFunctionName(source, arguments)
```

 JScript を使用している場合、関数は次の形式である必要があります。

```
function ValidationFunctionName(source, arguments)
```

 `source` パラメーターは、<xref:System.Web.UI.WebControls.CustomValidator> コントロールに対してレンダリングされる \<スパン > 要素への参照です。 これにより、<xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> 属性の変更など、\<スパン > タグをプログラムで制御できます。 `arguments` パラメーターは、Value と IsValid の2つのプロパティを持つオブジェクトです。 このパラメーターを使用すると、検証するコントロールの値を取得し、カスタム検証ルーチンに基づいて値が有効かどうかを示すことができます。

 <xref:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction%2A> プロパティを使用して、<xref:System.Web.UI.WebControls.CustomValidator> コントロールに関連付けられたクライアント側の検証スクリプト関数の名前を指定します。 スクリプト関数はクライアントで実行されるため、関数は、対象のブラウザーがサポートしている言語 (VBScript や JScript など) である必要があります。

> [!NOTE]
>  <xref:System.Web.UI.UpdatePanel> コントロール内で <xref:System.Web.UI.WebControls.CustomValidator> コントロールを使用する場合は、検証コントロールとそれが関連付けられているコントロールが同じパネル内にあることを確認してください。 部分ページ更新に <xref:System.Web.UI.UpdatePanel> コントロールを使用する方法の詳細については、「[部分ページレンダリングの概要](https://docs.microsoft.com/previous-versions/aspnet/bb386573(v=vs.100))」を参照してください。

 サーバー側の検証と同様に、入力コントロールから検証する文字列は、`arguments` パラメーターの <xref:System.Web.UI.WebControls.ServerValidateEventArgs.Value%2A> プロパティを使用してアクセスされます。 `arguments` パラメーターの <xref:System.Web.UI.WebControls.ServerValidateEventArgs.IsValid%2A> プロパティを設定して、検証の結果を返します。

> [!CAUTION]
>  検証コントロールを使用する場合は、処理を実行する前に、常にサーバー側の検証の結果を確認する必要があります。 ポストバック後、イベントメソッドが呼び出される前に、ページはバリデーターコントロールを呼び出し、結果を <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> プロパティに集計します。 (`Validate` メソッドを使用して、バリデーターコントロールを明示的に呼び出すこともできます)。独自のコードでは、入力を処理する前に、<xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> プロパティが `true` を返すことを確認する必要があります。 検証チェックに失敗した場合、スクリプト対応のブラウザーでもクライアントでポストバックが発生しない可能性がありますが、検証済みデータを処理する前に、サーバーコード内の <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> も確認する必要があります。

 複数の検証コントロールを個々の入力コントロールと共に使用して、さまざまな条件を検証できます。 たとえば、<xref:System.Web.UI.WebControls.TextBox> コントロールに複数の検証コントロールを適用して、買い物かごに追加する項目の数量をユーザーが入力できるようにすることができます。 <xref:System.Web.UI.WebControls.CustomValidator> コントロールを使用して、指定された値が在庫数より小さくなるようにすることができます。また、ユーザーが <xref:System.Web.UI.WebControls.TextBox> コントロールに値を入力するように <xref:System.Web.UI.WebControls.RequiredFieldValidator> コントロールを使用することもできます。

> [!NOTE]
>  入力コントロールが空の場合、検証関数は呼び出されず、検証は成功します。 <xref:System.Web.UI.WebControls.RequiredFieldValidator> コントロールを使用して、ユーザーが入力コントロールにデータを入力することを要求します。

 <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> プロパティを設定せずに <xref:System.Web.UI.WebControls.CustomValidator> コントロールを使用することもできます。 これは、複数の入力コントロールを検証する場合や、<xref:System.Web.UI.WebControls.CheckBox> コントロールなどの検証コントロールで使用できない入力コントロールを検証する場合に一般的に行われます。 この場合、<xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> イベントのイベントハンドラーに渡された `arguments` パラメーターの <xref:System.Web.UI.WebControls.ServerValidateEventArgs.Value%2A> プロパティと、クライアント側の検証関数には、常に空の文字列 ("") が含まれます。 ただし、これらの検証関数は、サーバーとクライアントの両方の有効性を判断するために、必要に応じて呼び出されます。 検証する値にアクセスするには、検証対象の入力コントロールをプログラムによって参照し、適切なプロパティから値を取得する必要があります。 たとえば、サーバー上の <xref:System.Web.UI.WebControls.CheckBox> コントロールを検証するには、検証コントロールの <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> プロパティを設定しないで、<xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> イベントのハンドラーに次のコードを使用します。

```vb
Sub ServerValidation (source As object, args As ServerValidateEventArgs)
    args.IsValid = (CheckBox1.Checked = True)
 End Sub
```

```csharp
void ServerValidation (object source, ServerValidateEventArgs args)
 {
    args.IsValid = (CheckBox1.Checked == true);
 }
```

 検証コントロールの詳細については、「<xref:System.Web.UI.WebControls.BaseValidator>」を参照してください。

## <a name="accessibility"></a>アクセシビリティ
 ユーザー補助の標準に準拠したマークアップを生成するようにこのコントロールを構成する方法については、「 [Visual Studio でのユーザー補助と ASP.NET](https://docs.microsoft.com/previous-versions/ms228004(v=vs.140))と[ASP.NET のコントロールとアクセシビリティ](https://docs.microsoft.com/previous-versions/ms227996(v=vs.140))」を参照してください。



## Examples
 次のコード例は、サーバー側の <xref:System.Web.UI.WebControls.CustomValidator> コントロールを作成する方法を示しています。

> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[スクリプトによる攻略の概要](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))」を参照してください。

 [!code-aspx-csharp[CustomValidatorServerValidate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorServerValidate/CS/customvalidatorservervalidatecs.aspx#1)]
 [!code-aspx-vb[CustomValidatorServerValidate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorServerValidate/VB/customvalidatorservervalidatevb.aspx#1)]

 クライアント側の <xref:System.Web.UI.WebControls.CustomValidator> コントロールを作成する方法を次のコード例に示します。

 [!code-aspx-csharp[CustomValidatorClient#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorClient/CS/customvalidatorclientcs.aspx#1)]
 [!code-aspx-vb[CustomValidatorClient#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorClient/VB/customvalidatorclientvb.aspx#1)]

 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.BaseValidator" />
    <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
    <altmember cref="P:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction" />
    <altmember cref="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" />
    <altmember cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" />
    <altmember cref="T:System.Web.UI.WebControls.ServerValidateEventArgs" />
    <altmember cref="P:System.Web.UI.WebControls.ServerValidateEventArgs.Value" />
    <altmember cref="P:System.Web.UI.WebControls.ServerValidateEventArgs.IsValid" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CustomValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CustomValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.CustomValidator" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.WebControls.BaseValidator" />
        <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
        <altmember cref="P:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction" />
        <altmember cref="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" />
        <altmember cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" />
        <altmember cref="T:System.Web.UI.WebControls.ServerValidateEventArgs" />
        <altmember cref="P:System.Web.UI.WebControls.ServerValidateEventArgs.Value" />
        <altmember cref="P:System.Web.UI.WebControls.ServerValidateEventArgs.IsValid" />
      </Docs>
    </Member>
    <Member MemberName="AddAttributesToRender">
      <MemberSignature Language="C#" Value="protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddAttributesToRender(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub AddAttributesToRender (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void AddAttributesToRender(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.AddAttributesToRender : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="customValidator.AddAttributesToRender writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">クライアントに表示する出力ストリームを格納する <see cref="T:System.Web.UI.HtmlTextWriter" />。</param>
        <summary><see cref="T:System.Web.UI.WebControls.CustomValidator" /> コントロールのプロパティを、クライアントに表示する出力ストリームに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 次のコード例は、<xref:System.Web.UI.WebControls.CustomValidator> のエラーメッセージが常に太字で表示されるように、カスタムサーバーコントロールの <xref:System.Web.UI.WebControls.CustomValidator.AddAttributesToRender%2A> メソッドをオーバーライドする方法を示しています。

> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[スクリプトによる攻略の概要](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))」を参照してください。

 [!code-aspx-csharp[CustomCustomValidatorAddAttributesToRender#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorAddAttributesToRender/CS/custom_customvalidator_addattributestorendercs.aspx#1)]
 [!code-aspx-vb[CustomCustomValidatorAddAttributesToRender#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorAddAttributesToRender/VB/custom_customvalidator_addattributestorendervb.aspx#1)]
[!code-csharp[CustomCustomValidatorAddAttributesToRender#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorAddAttributesToRender/CS/custom_customvalidator_addattributestorender.cs#2)]
[!code-vb[CustomCustomValidatorAddAttributesToRender#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorAddAttributesToRender/VB/custom_customvalidator_addattributestorender.vb#2)]

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientValidationFunction">
      <MemberSignature Language="C#" Value="public string ClientValidationFunction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ClientValidationFunction" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction" />
      <MemberSignature Language="VB.NET" Value="Public Property ClientValidationFunction As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ClientValidationFunction { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ClientValidationFunction : string with get, set" Usage="System.Web.UI.WebControls.CustomValidator.ClientValidationFunction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>検証に使用するカスタム クライアント側スクリプト関数の名前を取得または設定します。</summary>
        <value>検証に使用するカスタム クライアント スクリプト関数の名前。 既定値は <see cref="F:System.String.Empty" /> で、このプロパティが設定されていないことを示します。

 <block subset="none" type="note"><para>
関数名にはかっこやパラメーターは使用できません。

</para></block></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 このプロパティを、クライアント側の検証を実行する関数の名前に設定します。

 クライアント検証関数はターゲットブラウザーで実行されるため、JScript や VBScript など、ブラウザーでサポートされているスクリプト言語を使用して関数を記述する必要があります。

 このプロパティは、テーマまたはスタイル シート テーマによって設定することはできません。 詳細については、「<xref:System.Web.UI.ThemeableAttribute> and [ASP.NET theme And スキン](https://docs.microsoft.com/previous-versions/aspnet/ykzx33wh(v=vs.100))」を参照してください。



## Examples
 次のコード例は、<xref:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction%2A> プロパティを使用して、クライアント側の検証を実行する関数の名前を指定する方法を示しています。 検証関数は、偶数かどうかをチェックします。 関数のパラメーターの説明については、「<xref:System.Web.UI.WebControls.CustomValidator>」の「解説」を参照してください。

> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[スクリプトによる攻略の概要](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))」を参照してください。

 [!code-aspx-csharp[CustomValidatorClient#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorClient/CS/customvalidatorclientcs.aspx#1)]
 [!code-aspx-vb[CustomValidatorClient#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorClient/VB/customvalidatorclientvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="F:System.String.Empty" />
      </Docs>
    </Member>
    <Member MemberName="ControlPropertiesValid">
      <MemberSignature Language="C#" Value="protected override bool ControlPropertiesValid ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ControlPropertiesValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.ControlPropertiesValid" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ControlPropertiesValid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool ControlPropertiesValid();" />
      <MemberSignature Language="F#" Value="override this.ControlPropertiesValid : unit -&gt; bool" Usage="customValidator.ControlPropertiesValid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロールのプロパティで値が有効かどうかを確認します。</summary>
        <returns>コントロールのプロパティが有効な場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 次のコード例は、<xref:System.Web.UI.WebControls.CustomValidator> コントロールの <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> プロパティがページ上にあり、検証プロパティが含まれている限り、カスタムサーバーコントロールの <xref:System.Web.UI.WebControls.CustomValidator.ControlPropertiesValid%2A> メソッドをオーバーライドして、常に visible プロパティの値を返す方法を示しています。

 [!code-aspx-csharp[CustomCustomValidatorControlPropertiesValid#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorControlPropertiesValid/CS/custom_customvalidator_controlpropertiesvalidcs.aspx#1)]
 [!code-aspx-vb[CustomCustomValidatorControlPropertiesValid#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorControlPropertiesValid/VB/custom_customvalidator_controlpropertiesvalidvb.aspx#1)]
[!code-csharp[CustomCustomValidatorControlPropertiesValid#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorControlPropertiesValid/CS/custom_customvalidator_controlpropertiesvalid.cs#2)]
[!code-vb[CustomCustomValidatorControlPropertiesValid#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorControlPropertiesValid/VB/custom_customvalidator_controlpropertiesvalid.vb#2)]

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EvaluateIsValid">
      <MemberSignature Language="C#" Value="protected override bool EvaluateIsValid ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool EvaluateIsValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.EvaluateIsValid" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function EvaluateIsValid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool EvaluateIsValid();" />
      <MemberSignature Language="F#" Value="override this.EvaluateIsValid : unit -&gt; bool" Usage="customValidator.EvaluateIsValid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="M:System.Web.UI.MobileControls.BaseValidator.EvaluateIsValid" /> メソッドをオーバーライドします。</summary>
        <returns>入力コントロールの値が有効である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 次のコード例は、カスタムサーバーコントロールの <xref:System.Web.UI.WebControls.CustomValidator.EvaluateIsValid%2A> メソッドをオーバーライドする方法を示しています。

> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[スクリプトによる攻略の概要](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))」を参照してください。

 [!code-aspx-csharp[CustomCustomValidatorEvaluateIsValid#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorEvaluateIsValid/CS/custom_customvalidator_evaluateisvalidcs.aspx#1)]
 [!code-aspx-vb[CustomCustomValidatorEvaluateIsValid#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorEvaluateIsValid/VB/custom_customvalidator_evaluateisvalidvb.aspx#1)]
[!code-csharp[CustomCustomValidatorEvaluateIsValid#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorEvaluateIsValid/CS/custom_customvalidator_evaluateisvalid.cs#2)]
[!code-vb[CustomCustomValidatorEvaluateIsValid#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorEvaluateIsValid/VB/custom_customvalidator_evaluateisvalid.vb#2)]

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnServerValidate">
      <MemberSignature Language="C#" Value="protected virtual bool OnServerValidate (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnServerValidate(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnServerValidate (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnServerValidate(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnServerValidate : string -&gt; bool&#xA;override this.OnServerValidate : string -&gt; bool" Usage="customValidator.OnServerValidate value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">検証する値。</param>
        <summary><see cref="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" /> コントロールの <see cref="T:System.Web.UI.WebControls.CustomValidator" /> イベントを発生させます。</summary>
        <returns><see langword="true" /> パラメーターで指定された値が検証に合格する場合は <paramref name="value" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> イベントは、サーバーで検証が実行されるときに発生します。

 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。

 <xref:System.Web.UI.WebControls.CustomValidator.OnServerValidate%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。



## Examples
 次のコード例は、サーバー側の <xref:System.Web.UI.WebControls.CustomValidator> コントロールのハンドラーを指定し、コーディングする方法を示しています。

> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[スクリプトによる攻略の概要](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))」を参照してください。

 [!code-aspx-csharp[CustomValidatorServerValidate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorServerValidate/CS/customvalidatorservervalidatecs.aspx#1)]
 [!code-aspx-vb[CustomValidatorServerValidate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorServerValidate/VB/customvalidatorservervalidatevb.aspx#1)]

 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" /> メソッドを呼び出してください。</para></block>
        <altmember cref="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" />
      </Docs>
    </Member>
    <Member MemberName="ServerValidate">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ServerValidateEventHandler ServerValidate;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ServerValidateEventHandler ServerValidate" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ServerValidate As ServerValidateEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ServerValidateEventHandler ^ ServerValidate;" />
      <MemberSignature Language="F#" Value="member this.ServerValidate : System.Web.UI.WebControls.ServerValidateEventHandler " Usage="member this.ServerValidate : System.Web.UI.WebControls.ServerValidateEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ServerValidateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サーバーで検証が実行されると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> イベントは、サーバーで検証が実行されるときに発生します。 このイベントは、<xref:System.Web.UI.WebControls.TextBox> コントロールなどの入力コントロールにカスタム検証ルーチンを提供するために使用されます。

 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。



## Examples
 次のコード例は、サーバー側の <xref:System.Web.UI.WebControls.CustomValidator> コントロールのハンドラーを指定し、コーディングする方法を示しています。 このメソッドは、カスタム検証ルーチンを作成し、偶数の <xref:System.Web.UI.WebControls.TextBox> コントロールの値を検証して、検証の結果を表示します。

> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[スクリプトによる攻略の概要](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))」を参照してください。

 [!code-aspx-csharp[CustomValidatorServerValidate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorServerValidate/CS/customvalidatorservervalidatecs.aspx#1)]
 [!code-aspx-vb[CustomValidatorServerValidate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorServerValidate/VB/customvalidatorservervalidatevb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" />
        <altmember cref="T:System.Web.UI.WebControls.ServerValidateEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="ValidateEmptyText">
      <MemberSignature Language="C#" Value="public bool ValidateEmptyText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidateEmptyText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.CustomValidator.ValidateEmptyText" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidateEmptyText As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidateEmptyText { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ValidateEmptyText : bool with get, set" Usage="System.Web.UI.WebControls.CustomValidator.ValidateEmptyText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>空のテキストを検証するかどうかを示すブール値を取得または設定します。</summary>
        <value>空のテキストを検証する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 各検証コントロールは、対象のコントロールに関連付けることができます。 以前のバージョンの .NET Framework では、対象のコントロールに空の文字列値 (<xref:System.String.Empty?displayProperty=nameWithType>の値を持つ <xref:System.Web.UI.WebControls.TextBox.Text%2A> プロパティなど) がある場合、<xref:System.Web.UI.WebControls.RequiredFieldValidator> バリデーターは対象のコントロールを評価せず、検証に合格したことを返します。

 <xref:System.Web.UI.WebControls.CustomValidator.ValidateEmptyText%2A> プロパティは、.NET Framework バージョン2.0 の新しいものです。  <xref:System.Web.UI.WebControls.CustomValidator.ValidateEmptyText%2A> が `true`に設定されている場合、検証コントロールは、(<xref:System.Web.UI.WebControls.CustomValidator> コントロールに指定された条件を使用して) コントロールの値を評価し、検証結果を返します。 このプロパティを使用すると、開発者は、対象となるコントロールの値に関係なく、<xref:System.Web.UI.WebControls.CustomValidator> コントロールの結果を評価できます。

 このプロパティは、テーマまたはスタイル シート テーマによって設定することはできません。 詳細については、「<xref:System.Web.UI.ThemeableAttribute> and [ASP.NET theme And スキン](https://docs.microsoft.com/previous-versions/aspnet/ykzx33wh(v=vs.100))」を参照してください。

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.BaseValidator" />
        <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
      </Docs>
    </Member>
  </Members>
</Type>
