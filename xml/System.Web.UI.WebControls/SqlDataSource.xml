<Type Name="SqlDataSource" FullName="System.Web.UI.WebControls.SqlDataSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e0ad5837d65289d83f5186d05fa63de579e46b62" /><Meta Name="ms.sourcegitcommit" Value="a8ff98b48bda124cfcb2605f5da9b21bc6dcd791" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/14/2020" /><Meta Name="ms.locfileid" Value="77246593" /></Metadata><TypeSignature Language="C#" Value="public class SqlDataSource : System.Web.UI.DataSourceControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SqlDataSource extends System.Web.UI.DataSourceControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.SqlDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class SqlDataSource&#xA;Inherits DataSourceControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlDataSource : System::Web::UI::DataSourceControl" />
  <TypeSignature Language="F#" Value="type SqlDataSource = class&#xA;    inherit DataSourceControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.DataSourceControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Selecting")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("SelectQuery")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.SqlDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.SqlDataSource))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.SqlDataSourceDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>データ バインド コントロールに対して SQL データベースを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 このトピックの内容:

-   [はじめに](#introduction)

-   [データ接続](#data_connections)

-   [データ操作の実行](#performing_data_operations)

-   [Data Provider](#data_provider)

-   [キャッシュ](#caching)

-   [その他の機能](#additional_features)

-   [データソースビュー](#data_source_view)

-   [宣言型の構文](#declarative_syntax)

<a name="introduction"></a>
## <a name="introduction"></a>はじめに
 <xref:System.Web.UI.WebControls.SqlDataSource> データソースコントロールは、データバインドコントロールに対する SQL リレーショナルデータベース内のデータを表します。 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールをデータバインドコントロールと組み合わせて使用すると、リレーショナルデータベースからデータを取得したり、コードをほとんどまたはまったく使用せずに、Web ページ上のデータの表示、編集、並べ替えを行うことができます。

<a name="data_connections"></a>
## <a name="data-connections"></a>データ接続
 データベースに接続するには、<xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> プロパティを有効な接続文字列に設定する必要があります。 <xref:System.Web.UI.WebControls.SqlDataSource> は、`SqlClient`、`OleDb`、`Odbc`、`OracleClient` プロバイダーなど、ADO.NET プロバイダーを使用して接続できる任意の SQL リレーショナルデータベースをサポートできます。 接続文字列をセキュリティで保護する方法の詳細については、「[方法: データソースコントロールを使用するときに接続文字列をセキュリティで保護](https://docs.microsoft.com/previous-versions/aspnet/ms178372(v=vs.100))する」を参照してください。

 基になるデータベースからデータを取得するには、SQL クエリを使用して <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> プロパティを設定します。 <xref:System.Web.UI.WebControls.SqlDataSource> が関連付けられているデータベースがストアドプロシージャをサポートしている場合は、<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> プロパティをストアドプロシージャの名前に設定できます。 指定する SQL クエリは、パラメーター化クエリにすることもできます。 パラメーター化されたクエリに関連付けられている <xref:System.Web.UI.WebControls.Parameter> オブジェクトを <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> コレクションに追加できます。 パラメーター化された SQL クエリとその構文の詳細については、「[フィルター処理のためのデータソースコントロールでのパラメーターの使用](https://docs.microsoft.com/previous-versions/aspnet/xt50s8kz(v=vs.100))」を参照してください。

 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールは、<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドが呼び出されるたびにデータを取得します。 このメソッドは、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> プロパティによって指定されたメソッドにプログラムでアクセスできるようにします。 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドは、<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> メソッドが呼び出されたときに <xref:System.Web.UI.WebControls.SqlDataSource> にバインドされているコントロールによって自動的に呼び出されます。 データバインドコントロールの <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSourceID%2A> プロパティを設定した場合、コントロールは必要に応じてデータソースのデータに自動的にバインドされます。 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールをデータバインドコントロールにバインドするには、`DataSourceID` プロパティを設定することをお勧めします。 または、`DataSource` プロパティを使用することもできますが、その場合は、データバインドコントロールの <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> メソッドを明示的に呼び出す必要があります。 <xref:System.Web.UI.WebControls.SqlDataSource> を使用できるデータバインドコントロールの例としては、<xref:System.Web.UI.WebControls.DataGrid>、<xref:System.Web.UI.WebControls.DetailsView>、<xref:System.Web.UI.WebControls.DataList>、<xref:System.Web.UI.WebControls.DropDownList>があります。 基になるデータベースからデータを取得するために、いつでもプログラムを使用して <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドを呼び出すことができます。

 宣言型のプログラムによる ASP.NET のシナリオでは、データバインドコントロールの <xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A> プロパティを <xref:System.Web.UI.WebControls.SqlDataSource> コントロールの ID に設定できます。 また、<xref:System.Web.UI.WebControls.SqlDataSource> クラスのインスタンスを、データバインドコントロールの <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSource%2A> プロパティに割り当てることもできます。 データバインドコントロールをデータソースコントロールにバインドする方法の詳細については、「 [ASP.NET Data Access Options](https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110))」を参照してください。

<a name="performing_data_operations"></a>
## <a name="performing-data-operations"></a>データ操作の実行
 基になるデータベース製品の機能と <xref:System.Web.UI.WebControls.SqlDataSource> クラスのインスタンスの構成に応じて、更新、挿入、削除などのデータ操作を実行できます。 これらのデータ操作を実行するには、実行する操作の適切なコマンドテキストおよび関連するパラメーターを設定します。 たとえば、更新操作の場合は、<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> プロパティを SQL 文字列またはストアドプロシージャの名前に設定し、必要なパラメーターを <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> コレクションに追加します。 この更新は、<xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> メソッドをコードによって明示的に呼び出すか、データバインドコントロールによって自動的に呼び出されると実行されます。 <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> と <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> 操作についても、同じ一般的なパターンに従います。

 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>、<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>、<xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>、および <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> プロパティで使用する SQL クエリおよびコマンドは、パラメーター化できます。 これは、クエリまたはコマンドがリテラル値ではなくプレースホルダーを使用して、プレースホルダーをアプリケーション変数またはユーザー定義変数にバインドできることを意味します。 SQL クエリのパラメーターは、セッション変数、Web フォームページのクエリ文字列で渡される値、他のサーバーコントロールのプロパティ値などにバインドできます。 <xref:System.Web.UI.WebControls.SqlDataSource>を使用して SQL クエリでパラメーターを使用する方法の詳細については、「[データソースコントロールでのパラメーターの使用](https://docs.microsoft.com/previous-versions/aspnet/xt50s8kz(v=vs.100))」を参照してください。フィルター処理と[、SqlDataSource コントロールでのパラメーター](https://docs.microsoft.com/previous-versions/aspnet/z72eefad(v=vs.100))の使用に関する情報を参照してください。

> [!NOTE]
>  既定では、`Select` コマンドを実行したときにパラメーターの1つが `null` と、データは返されず、例外はスローされません。 この動作を変更するには、<xref:System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter%2A> プロパティを `false`に設定します。

<a name="data_provider"></a>
## <a name="data-provider"></a>データ プロバイダー
 既定では、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールは SQL Server の .NET Framework Data Provider で動作しますが、<xref:System.Web.UI.WebControls.SqlDataSource> は Microsoft SQL Server 固有ではありません。 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールは、マネージ ADO.NET プロバイダーがある任意のデータベース製品に接続できます。 <xref:System.Data.OleDb?displayProperty=nameWithType> プロバイダーと共に使用すると、<xref:System.Web.UI.WebControls.SqlDataSource> は OLE DB に準拠しているデータベースを操作できます。 <xref:System.Data.Odbc?displayProperty=nameWithType> プロバイダーと共に使用する場合、<xref:System.Web.UI.WebControls.SqlDataSource> は、IBM DB2、MySQL、PostgreSQL などの任意の ODBC ドライバーおよびデータベースで使用できます。 <xref:System.Data.OracleClient?displayProperty=nameWithType> プロバイダーと共に使用すると、<xref:System.Web.UI.WebControls.SqlDataSource> は Oracle 8.1.7 以降データベース以降で動作します。 使用可能なプロバイダーの一覧は、構成ファイルの `DbProviderFactories` セクションに、machine.config または web.config ファイルのいずれかで登録されます。 詳細については、「 [SqlDataSource コントロールを使用したデータの選択](https://docs.microsoft.com/previous-versions/aspnet/w1kdt8w2(v=vs.100))」を参照してください。

<a name="caching"></a>
## <a name="caching"></a>キャッシュ
 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールを使用してページにデータを表示する場合は、データソースコントロールのデータキャッシュ機能を使用してページのパフォーマンスを向上させることができます。 キャッシュを行うと、Web サーバー上のメモリを犠牲にして、データベースサーバーの処理負荷が軽減されます。ほとんどの場合、これは良いトレードオフです。 <xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A> プロパティが `true` に設定され、<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> プロパティがキャッシュエントリを破棄する前にデータを格納する秒数に設定されている場合、<xref:System.Web.UI.WebControls.SqlDataSource> はデータを自動的にキャッシュします。 <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> と省略可能な <xref:System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency%2A> 値を指定することもできます。

<a name="additional_features"></a>
## <a name="additional-features"></a>追加機能
 <xref:System.Web.UI.WebControls.SqlDataSource> には、次の表に示すような追加機能が用意されています。

|機能|要件|
|----------------|------------------|
|キャッシュ|キャッシュされたデータに対して必要なキャッシュ動作に従って、<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> プロパティを <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> 値、<xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A> プロパティを `true`に設定し、<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> プロパティと <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> プロパティを設定します。|
|削除中|<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> プロパティを、データの削除に使用する SQL ステートメントに設定します。 このステートメントは通常、パラメーター化されています。|
|Filtering|<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> プロパティを <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> の値に設定します。 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドが呼び出されたときにデータをフィルター処理するために使用されるフィルター式に <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> プロパティを設定します。|
|挿入|データの挿入に使用する SQL ステートメントに <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> プロパティを設定します。 このステートメントは通常、パラメーター化されています。|
|ページング|現在、<xref:System.Web.UI.WebControls.SqlDataSource>ではサポートされていません。ただし、<xref:System.Web.UI.WebControls.GridView>などの一部のデータバインドコントロールでは、<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> プロパティを <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> 値に設定するとページングがサポートされます。|
|次を選択する|<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> プロパティを、データを取得するために使用する SQL ステートメントに設定します。|
|並べ替え|<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> プロパティを <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> に設定します。|
|更新中|<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> プロパティを、データの更新に使用する SQL ステートメントに設定します。 このステートメントは通常、パラメーター化されています。|

<a name="data_source_view"></a>
## <a name="data-source-view"></a>[データ ソース ビュー]
 すべてのデータソースコントロールと同様に、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールはデータソースビュークラスに関連付けられています。 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールには、関連付けられた <xref:System.Web.UI.WebControls.SqlDataSourceView>が1つだけあり、常に `Table`という名前が付けられます。

 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールの視覚的なレンダリングはありません。これはコントロールとして実装されるため、宣言によって作成し、必要に応じて状態管理に参加させることができます。 このため、<xref:System.Web.UI.WebControls.SqlDataSource> は、<xref:System.Web.UI.DataSourceControl.EnableTheming%2A> または <xref:System.Web.UI.DataSourceControl.SkinID%2A> プロパティによって提供される機能などのビジュアル機能をサポートしていません。

<a name="declarative_syntax"></a>
## <a name="declarative-syntax"></a>宣言型の構文

```
<asp:SqlDataSource
    CacheDuration="string|Infinite"
    CacheExpirationPolicy="Absolute|Sliding"
    CacheKeyDependency="string"
    CancelSelectOnNullParameter="True|False"
    ConflictDetection="OverwriteChanges|CompareAllValues"
    ConnectionString="string"
    DataSourceMode="DataReader|DataSet"
    DeleteCommand="string"
    DeleteCommandType="Text|StoredProcedure"
    EnableCaching="True|False"
    EnableTheming="True|False"
    EnableViewState="True|False"
    FilterExpression="string"
    ID="string"
    InsertCommand="string"
    InsertCommandType="Text|StoredProcedure"
    OldValuesParameterFormatString="string"
    OnDataBinding="DataBinding event handler"
    OnDeleted="Deleted event handler"
    OnDeleting="Deleting event handler"
    OnDisposed="Disposed event handler"
    OnFiltering="Filtering event handler"
    OnInit="Init event handler"
    OnInserted="Inserted event handler"
    OnInserting="Inserting event handler"
    OnLoad="Load event handler"
    OnPreRender="PreRender event handler"
    OnSelected="Selected event handler"
    OnSelecting="Selecting event handler"
    OnUnload="Unload event handler"
    OnUpdated="Updated event handler"
    OnUpdating="Updating event handler"
    ProviderName="string|System.Data.Odbc|System.Data.OleDb|
        System.Data.OracleClient|System.Data.SqlClient|
        Microsoft.SqlServerCe.Client"
    runat="server"
    SelectCommand="string"
    SelectCommandType="Text|StoredProcedure"
    SkinID="string"
    SortParameterName="string"
    SqlCacheDependency="string"
    UpdateCommand="string"
    UpdateCommandType="Text|StoredProcedure"
    Visible="True|False"
>
        <DeleteParameters>
                <asp:ControlParameter
                    ControlID="string"
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    PropertyName="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:CookieParameter
                    ConvertEmptyStringToNull="True|False"
                    CookieName="string"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:FormParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    FormField="string"
                    Name="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:Parameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:ProfileParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    PropertyName="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:QueryStringParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    QueryStringField="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:SessionParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    SessionField="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
        </DeleteParameters>
        <FilterParameters>
                <asp:ControlParameter
                    ControlID="string"
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    PropertyName="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:CookieParameter
                    ConvertEmptyStringToNull="True|False"
                    CookieName="string"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:FormParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    FormField="string"
                    Name="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:Parameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:ProfileParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    PropertyName="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:QueryStringParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    QueryStringField="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:SessionParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    SessionField="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
        </FilterParameters>
        <InsertParameters>
                <asp:ControlParameter
                    ControlID="string"
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    PropertyName="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:CookieParameter
                    ConvertEmptyStringToNull="True|False"
                    CookieName="string"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:FormParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    FormField="string"
                    Name="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:Parameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:ProfileParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    PropertyName="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:QueryStringParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    QueryStringField="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:SessionParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    SessionField="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
        </InsertParameters>
        <SelectParameters>
                <asp:ControlParameter
                    ControlID="string"
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    PropertyName="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:CookieParameter
                    ConvertEmptyStringToNull="True|False"
                    CookieName="string"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:FormParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    FormField="string"
                    Name="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:Parameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:ProfileParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    PropertyName="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:QueryStringParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    QueryStringField="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:SessionParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    SessionField="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
        </SelectParameters>
        <UpdateParameters>
                <asp:ControlParameter
                    ControlID="string"
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    PropertyName="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:CookieParameter
                    ConvertEmptyStringToNull="True|False"
                    CookieName="string"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:FormParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    FormField="string"
                    Name="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:Parameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:ProfileParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    PropertyName="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:QueryStringParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    QueryStringField="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:SessionParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    SessionField="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
        </UpdateParameters>
</asp:SqlDataSource>
```

## Examples

このセクションには、次の4つのコード例が含まれます。

-   最初のコード例では、宣言型の構文を使用して、<xref:System.Web.UI.WebControls.GridView> コントロールの SQL Server のデータを表示する方法を示します。

-   2番目のコード例では、宣言型の構文を使用して、<xref:System.Web.UI.WebControls.GridView> コントロールに ODBC 準拠のデータベースのデータを表示する方法を示します。

-   3番目のコード例は、<xref:System.Web.UI.WebControls.GridView> コントロールのデータを表示および更新する方法を示しています。

-   4番目のコード例では、<xref:System.Web.UI.WebControls.DropDownList> コントロールのデータを表示および更新する方法を示します。

    > [!NOTE]
    >  これらの例では、データアクセスに対して宣言型構文を使用する方法を示します。 マークアップではなくコードを使用してデータにアクセスする方法の詳細については、「 [Visual Studio でのデータ](/visualstudio/data-tools/accessing-data-in-visual-studio)へのアクセス」を参照してください。

 次のコード例は、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールを宣言によって使用して SQL Server からデータを取得し、<xref:System.Web.UI.WebControls.GridView> コントロールに表示する方法を示しています。

 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_3sql/CS/sql3cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_3sql/VB/sql3vb.aspx#1)]

 次のコード例は、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールを宣言によって使用して、ODBC 準拠のデータベースからデータを取得し、それを <xref:System.Web.UI.WebControls.GridView> コントロールに表示する方法を示しています。 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> プロパティは、ODBC の Data Provider .NET Framework の名前です。これは <xref:System.Data.Odbc?displayProperty=nameWithType>です。

 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_3odbc#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_3odbc/CS/odbc3cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_3odbc#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_3odbc/VB/odbc3vb.aspx#1)]

 次のコード例は、<xref:System.Web.UI.WebControls.GridView> コントロールを使用した一般的な表示と更新のシナリオを示しています。 前の例と同様に、Northwind データベースのデータは <xref:System.Web.UI.WebControls.GridView> コントロールに表示されます。 また、<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> プロパティが指定され、<xref:System.Web.UI.WebControls.GridView.AutoGenerateEditButton%2A> プロパティが `true`に設定されているため、追加のコードを使用せずにレコードを編集および更新することができます。 <xref:System.Web.UI.WebControls.GridView> コントロールは、<xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> コレクションへのパラメーターの追加を自動的に処理し、<xref:System.Web.UI.WebControls.GridView> コントロールの **[更新]** ボタンがクリックされたときに <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> メソッドを呼び出します。

 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_5sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_5sql/CS/sql5cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_5sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_5sql/VB/sql5vb.aspx#1)]

 次のコード例は、<xref:System.Web.UI.WebControls.DropDownList> および <xref:System.Web.UI.WebControls.TextBox> コントロールを使用した一般的な表示と更新のシナリオを示しています。 <xref:System.Web.UI.WebControls.DropDownList> コントロールでは、更新パラメーターが <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> コレクションに自動的に追加されたり、<xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> メソッドが呼び出されたりすることはありません。そのため、この操作を行う必要があります。 更新パラメーターは宣言によって指定され、イベントが発生したときに <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> 操作を実行するイベントハンドラーを追加できます。

> [!IMPORTANT]
>  この例には、セキュリティ上の脅威となる可能性のあるユーザー入力を受け付けるテキストボックスが含まれています。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[スクリプトによる攻略の概要](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))」を参照してください。

 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/CS/sql8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/VB/sql8vb.aspx#1)]

 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceView" />
    <altmember cref="T:System.Web.UI.WebControls.AccessDataSource" />
    <altmember cref="T:System.Web.UI.DataSourceControl" />
    <related type="Article" href="/visualstudio/data-tools/accessing-data-in-visual-studio">Visual Studio でのデータへのアクセス</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178472(v=vs.100)">ASP.NET ページのライフサイクルの概要</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> クラスの新しいインスタンスを初期化します。</summary>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceView" />
        <altmember cref="T:System.Web.UI.WebControls.AccessDataSource" />
        <altmember cref="T:System.Web.UI.DataSourceControl" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceView" />
        <altmember cref="T:System.Web.UI.WebControls.AccessDataSource" />
        <altmember cref="T:System.Web.UI.DataSourceControl" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlDataSource (string connectionString, string selectCommand);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, string selectCommand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, selectCommand As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlDataSource(System::String ^ connectionString, System::String ^ selectCommand);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.SqlDataSource : string * string -&gt; System.Web.UI.WebControls.SqlDataSource" Usage="new System.Web.UI.WebControls.SqlDataSource (connectionString, selectCommand)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="selectCommand" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">基になるデータベースに接続するために使用する接続文字列。</param>
        <param name="selectCommand">基になるデータベースからデータを取得するために使用する SQL クエリ。 SQL クエリがパラメーター化された SQL 文字列の場合、<see cref="T:System.Web.UI.WebControls.Parameter" /> コレクションへの <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" /> オブジェクトの追加が必要になることがあります。</param>
        <summary>接続文字列と SELECT コマンドを指定して、<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 データベース製品によって使用される SQL の種類は異なるため、`selectCommand` の構文は、使用されている現在の ADO.NET プロバイダーによって異なります。これは、<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> プロパティによって識別されます。 SQL 文字列がパラメーター化されたクエリまたはコメントである場合は、パラメーターのプレースホルダーも現在使用している ADO.NET プロバイダーによって決まります。 たとえば、プロバイダーが <xref:System.Web.UI.WebControls.SqlDataSource> クラスの既定のプロバイダーである <xref:System.Data.SqlClient?displayProperty=nameWithType>の場合、パラメーターのプレースホルダーは `'@parameterName'`ます。 ただし、プロバイダーが <xref:System.Data.Odbc?displayProperty=nameWithType> または <xref:System.Data.OleDb?displayProperty=nameWithType>に設定されている場合、パラメーターのプレースホルダーは `'?'`ます。 パラメーター化された SQL クエリとコマンドの詳細については、「 [SqlDataSource コントロールでのパラメーターの使用](https://docs.microsoft.com/previous-versions/aspnet/z72eefad(v=vs.100))」を参照してください。

 データソースでストアドプロシージャがサポートされている場合、<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> の値には、SQL 文字列またはストアドプロシージャの名前を指定できます。



## Examples
 次のコード例は、<xref:System.Web.UI.WebControls.SqlDataSource.%23ctor%2A> コンストラクターを使用して <xref:System.Web.UI.WebControls.SqlDataSource> コントロールを作成する方法を示しています。 この例は、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールが Web フォームページではなく、ビジネスオブジェクトがデータベースと対話するための簡単な方法として、中間層オブジェクトの実装で使用されている点では異常です。 この例では、web.config ファイルに格納されている接続文字列を使用します。

 このコード例は、<xref:System.Web.UI.WebControls.ObjectDataSource> クラス用に用意されている大規模な例の一部です。

 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/northwindemployee1.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/northwindemployee1.vb#3)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.ConnectionString" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlDataSource (string providerName, string connectionString, string selectCommand);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string providerName, string connectionString, string selectCommand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.#ctor(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (providerName As String, connectionString As String, selectCommand As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlDataSource(System::String ^ providerName, System::String ^ connectionString, System::String ^ selectCommand);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.SqlDataSource : string * string * string -&gt; System.Web.UI.WebControls.SqlDataSource" Usage="new System.Web.UI.WebControls.SqlDataSource (providerName, connectionString, selectCommand)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="providerName" Type="System.String" />
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="selectCommand" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="providerName"><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> が使用するデータ プロバイダーの名前。 プロバイダーが設定されていない場合、<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> は Microsoft SQL Server の ADO.NET プロバイダーを既定で使用します。</param>
        <param name="connectionString">基になるデータベースに接続するために使用する接続文字列。</param>
        <param name="selectCommand">基になるデータベースからデータを取得するために使用する SQL クエリ。 SQL クエリがパラメーター化された SQL 文字列の場合、<see cref="T:System.Web.UI.WebControls.Parameter" /> コレクションへの <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" /> オブジェクトの追加が必要になることがあります。</param>
        <summary>接続文字列と SELECT コマンドを指定して、<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 データベース製品によって使用される SQL の種類は異なるため、`selectCommand` の構文は、使用されている現在の ADO.NET プロバイダーによって異なります。これは、`providerName` パラメーターによって識別されます。 SQL 文字列がパラメーター化されたクエリまたはコメントである場合は、パラメーターのプレースホルダーも現在使用している ADO.NET プロバイダーによって決まります。 たとえば、プロバイダーが <xref:System.Data.SqlClient?displayProperty=nameWithType>で、<xref:System.Web.UI.WebControls.SqlDataSource> クラスの既定のプロバイダーである場合、パラメーターのプレースホルダーは `'@parameterName'`ます。 ただし、プロバイダーが <xref:System.Data.Odbc?displayProperty=nameWithType> または <xref:System.Data.OleDb?displayProperty=nameWithType>に設定されている場合、パラメーターのプレースホルダーは `'?'`ます。 パラメーター化された SQL クエリとコマンドの詳細については、「 [SqlDataSource コントロールでのパラメーターの使用](https://docs.microsoft.com/previous-versions/aspnet/z72eefad(v=vs.100))」を参照してください。

 データソースがストアドプロシージャをサポートしている場合は、<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> プロパティに SQL 文字列またはストアドプロシージャの名前を指定できます。

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.ProviderName" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.ConnectionString" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
      </Docs>
    </Member>
    <Member MemberName="CacheDuration">
      <MemberSignature Language="C#" Value="public virtual int CacheDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CacheDuration" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.CacheDuration" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheDuration As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int CacheDuration { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CacheDuration : int with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.CacheDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.DataSourceCacheDurationConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" /> メソッドによって取得したデータを、データ ソース コントロールがキャッシュする時間 (秒単位) を取得または設定します。</summary>
        <value><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> が <see cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" /> 操作の結果をキャッシュする秒数。 既定値は 0 です。 この値を負にすることはできません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールは、データキャッシュをサポートしています。 データがキャッシュされている間、<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドは、基になるデータベースからではなく、キャッシュからデータを取得します。 キャッシュが期限切れになると、<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドによって基になるデータベースからデータが取得され、データが再度キャッシュされます。

 <xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A> プロパティが `true` に設定され、<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> プロパティが0より大きい値に設定されている場合、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールはデータを自動的にキャッシュします。これは、キャッシュエントリが破棄される前にキャッシュがデータを格納する秒数を示します。 値が0の場合は、キャッシュが無限に長くなることを示します。

 キャッシュの動作は、duration と <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> プロパティの組み合わせによって決まります。 <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> プロパティが <xref:System.Web.UI.DataSourceCacheExpiry.Absolute> 値に設定されている場合、<xref:System.Web.UI.WebControls.SqlDataSource> は最初のデータ取得操作でデータをキャッシュし、<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> プロパティで指定された時間だけ、メモリ内に格納します。 メモリが必要な場合は、期間の前にデータが解放される可能性があります。 キャッシュは、次の操作中に更新されます。 <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> プロパティが <xref:System.Web.UI.DataSourceCacheExpiry.Sliding> 値に設定されている場合、データソースコントロールは最初のデータ取得操作でデータをキャッシュしますが、その後の操作ごとにキャッシュを保持している時間枠をリセットします。 最後の <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 操作以降の <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> 値と同じ時間にアクティビティがない場合、キャッシュの有効期限が切れます。

 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールは、<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> モードのときにのみデータをキャッシュできます。 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールが <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader> 値に設定され、キャッシュも有効になっている場合、<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドによって <xref:System.NotSupportedException> 例外がスローされます。

> [!IMPORTANT]
>  Microsoft Windows 認証でクライアントの偽装を使用している場合は、最初のユーザーがデータにアクセスしたときにデータがキャッシュされます。 別のユーザーが同じデータを要求した場合、データはキャッシュから取得されます。 データへのユーザーのアクセスを確認するために、データベースに対して別の呼び出しを行っても、データは取得されません。 複数のユーザーがデータにアクセスすることが予想される場合に、各データの取得をデータベースのセキュリティ構成によって検証する必要がある場合は、キャッシュを使用しないでください。



## Examples
 次のコード例は、Microsoft SQL Server で Northwind データベースからデータを取得し、データキャッシュが有効になっている <xref:System.Web.UI.WebControls.GridView> コントロールに表示する方法を示しています。 <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> は20秒に設定されており、<xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> プロパティは既定で <xref:System.Web.UI.DataSourceCacheExpiry.Absolute> 値に設定されているので、このページのユーザーには20秒ごとに新しいデータが表示されます。

 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_18sql/CS/sql18cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_18sql/VB/sql18vb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.EnableCaching" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
      </Docs>
    </Member>
    <Member MemberName="CacheExpirationPolicy">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheExpirationPolicy As DataSourceCacheExpiry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::DataSourceCacheExpiry CacheExpirationPolicy { System::Web::UI::DataSourceCacheExpiry get(); void set(System::Web::UI::DataSourceCacheExpiry value); };" />
      <MemberSignature Language="F#" Value="member this.CacheExpirationPolicy : System.Web.UI.DataSourceCacheExpiry with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceCacheExpiry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>存続期間と組み合わせた場合の、データ ソース コントロールが使用するキャッシュの動作を記述するキャッシュの有効期限の動作を取得または設定します。</summary>
        <value><see cref="T:System.Web.UI.DataSourceCacheExpiry" /> 値のいずれか 1 つです。 既定値は、<see cref="F:System.Web.UI.DataSourceCacheExpiry.Absolute" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールは、データキャッシュをサポートしています。 データがキャッシュされている間、<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドは、基になるデータベースからではなく、キャッシュからデータを取得します。 キャッシュが期限切れになると、<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドによって基になるデータベースからデータが取得され、データが再度キャッシュされます。

 キャッシュの動作は、<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> と <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> の設定の組み合わせによって決まります。 <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> プロパティが <xref:System.Web.UI.DataSourceCacheExpiry.Absolute> 値に設定されている場合、<xref:System.Web.UI.WebControls.SqlDataSource> は最初のデータ取得操作でデータをキャッシュし、<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> プロパティで指定された時間だけメモリ内に保持して、経過後に破棄します。 キャッシュは、次の操作中に更新されます。 <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> プロパティが <xref:System.Web.UI.DataSourceCacheExpiry.Sliding> 値に設定されている場合、データソースコントロールは最初のデータ取得操作でデータをキャッシュしますが、その後の操作ごとにキャッシュを保持している時間枠をリセットします。 最後の <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 操作以降の <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> 値と同じ時間にアクティビティがない場合、キャッシュの有効期限が切れます。

 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールは、<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> モードの場合にのみデータをキャッシュできます。 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールが <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader> 値に設定され、キャッシュも有効になっている場合、<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドによって <xref:System.NotSupportedException> 例外がスローされます。

> [!IMPORTANT]
>  Microsoft Windows 認証でクライアントの偽装を使用している場合は、最初のユーザーがデータにアクセスしたときにデータがキャッシュされます。 別のユーザーが同じデータを要求した場合、データはキャッシュから取得されます。 データへのユーザーのアクセスを確認するために、データベースに対して別の呼び出しを行っても、データは取得されません。 複数のユーザーがデータにアクセスすることが予想される場合に、各データの取得をデータベースのセキュリティ構成によって検証する必要がある場合は、キャッシュを使用しないでください。



## Examples
 次のコード例は、Microsoft SQL Server で Northwind データベースからデータを取得し、データキャッシュが有効になっている <xref:System.Web.UI.WebControls.GridView> コントロールに表示する方法を示しています。 <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> プロパティは <xref:System.Web.UI.DataSourceCacheExpiry.Sliding> 値に設定されているため、<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> 値が20秒の場合でも、ユーザーには最新のデータが表示されません。 キャッシュされたデータが更新されるのは、ページに最後のページが読み込まれてから20秒以上が経過していない場合のみです。

 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_19sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_19sql/CS/sql19cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_19sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_19sql/VB/sql19vb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.EnableCaching" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
      </Docs>
    </Member>
    <Member MemberName="CacheKeyDependency">
      <MemberSignature Language="C#" Value="public virtual string CacheKeyDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CacheKeyDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheKeyDependency As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CacheKeyDependency { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CacheKeyDependency : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ ソース コントロールによって作成されたすべてのデータ キャッシュ オブジェクトにリンクされる、ユーザー定義のキー依存関係を取得または設定します。 キーの有効期限が切れると、すべてのキャッシュ オブジェクトが明示的に期限切れになります。</summary>
        <value><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> によって作成されたすべてのキャッシュ オブジェクトを識別するキー。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールは、データキャッシュをサポートしています。 データがキャッシュされている間、<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドは、基になるデータベースからではなく、キャッシュからデータを取得します。 キャッシュが期限切れになると、<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドによって基になるデータベースからデータが取得され、データが再度キャッシュされます。

 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールとキーで作成されたすべてのキャッシュエントリの間に依存関係を作成するには、<xref:System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency%2A> プロパティを設定します。 キーの有効期限が切れると、いつでもプログラムによってすべてのキャッシュエントリの有効期限が切れます。

 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールは、<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> モードの場合にのみデータをキャッシュできます。 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールが <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader> 値に設定され、キャッシュも有効になっている場合、<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドによって <xref:System.NotSupportedException> 例外がスローされます。

 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>、<xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A>、および <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> プロパティのすべての組み合わせに対して一意のキャッシュエントリが作成されます。 コントロールが同じ基になるデータベースから同じデータを読み込むシナリオでは、複数の <xref:System.Web.UI.WebControls.SqlDataSource> コントロールで同じキャッシュエントリを使用できます。

> [!IMPORTANT]
>  Microsoft Windows 認証でクライアントの偽装を使用している場合は、最初のユーザーがデータにアクセスしたときにデータがキャッシュされます。 別のユーザーが同じデータを要求した場合、データはキャッシュから取得されます。 データへのユーザーのアクセスを確認するために、データベースに対して別の呼び出しを行っても、データは取得されません。 複数のユーザーがデータにアクセスすることが予想される場合に、各データの取得をデータベースのセキュリティ構成によって検証する必要がある場合は、キャッシュを使用しないでください。

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.CacheDuration" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
      </Docs>
    </Member>
    <Member MemberName="CancelSelectOnNullParameter">
      <MemberSignature Language="C#" Value="public virtual bool CancelSelectOnNullParameter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CancelSelectOnNullParameter" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CancelSelectOnNullParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CancelSelectOnNullParameter { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CancelSelectOnNullParameter : bool with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" /> コレクションに格納されているパラメーターが <see langword="null" /> と評価されたときに、データ取得操作をキャンセルするかどうかを示す値を取得または設定します。</summary>
        <value><see langword="true" /> コレクションに格納されているパラメーターが <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" /> と評価されたときに、データ取得操作をキャンセルする場合は <see langword="null" />。それ以外の場合は <see langword="false" />。 既定では、 <see langword="true" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter%2A> プロパティの値は、ビューステートに格納されます。

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
      </Docs>
    </Member>
    <Member MemberName="ConflictDetection">
      <MemberSignature Language="C#" Value="public System.Web.UI.ConflictOptions ConflictDetection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.ConflictOptions ConflictDetection" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.ConflictDetection" />
      <MemberSignature Language="VB.NET" Value="Public Property ConflictDetection As ConflictOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ConflictOptions ConflictDetection { System::Web::UI::ConflictOptions get(); void set(System::Web::UI::ConflictOptions value); };" />
      <MemberSignature Language="F#" Value="member this.ConflictDetection : System.Web.UI.ConflictOptions with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.ConflictDetection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ConflictOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>基になるデータベース内の行のデータが操作中に変更される場合に、<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> コントロールで更新と削除を実行する方法を示す値を取得または設定します。</summary>
        <value><see cref="T:System.Web.UI.ConflictOptions" /> 値のいずれか 1 つです。 既定値は、<see cref="F:System.Web.UI.ConflictOptions.OverwriteChanges" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> プロパティは、古い値と新しい値のパラメーターが `Update` メソッドに適用されるかどうかを決定します。 たとえば、<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> プロパティによって指定されたコマンドが、`Name` および `Number` 列を持つ <xref:System.Data.DataTable> オブジェクトを返し、<xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> プロパティが <xref:System.Web.UI.ConflictOptions.OverwriteChanges> の値に設定されている場合、`Name` 用のパラメーターと `Number` メソッドの `Update` が作成されます。 <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> プロパティが <xref:System.Web.UI.ConflictOptions.CompareAllValues> 値に設定されている場合、`Name`、`Number`、`original_Name`、および `original_Number`に対してパラメーターが作成されます。 (元の値のパラメーターの正確な名前は、<xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A> プロパティによって異なります)。次に、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールは、<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> プロパティに指定されている `Update` メソッドに一致するパラメーターがあるかどうかを判断します。

 同時実行制御は、複数のクライアントが同じデータにアクセスして操作しているときに、ストア内のデータの読み取りと変更の方法を制御するためにデータストアで使用される手法です。 たとえば、あるクライアントがデータを読み取り、ユーザーに提示し、別のクライアントが同じデータを読み取って別のユーザーに提示する場合などです。 両方のユーザーがデータを更新してデータストレージに送信した場合、両方のクライアントが同じデータに対して異なる値を更新する可能性があるため、予期しない結果が発生する可能性があります。 これは、競合と見なされます。 <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> プロパティを <xref:System.Web.UI.ConflictOptions.CompareAllValues> 値に設定することによって、`Update` メソッドは、古い値と新しい値を元のデータソースと比較して、必要に応じて競合を検出して処理することができます。

 <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> プロパティは、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールに関連付けられている <xref:System.Web.UI.WebControls.SqlDataSourceView> オブジェクトの <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A> プロパティに委任されます。

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ConflictOptions" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
      </Docs>
    </Member>
    <Member MemberName="ConnectionString">
      <MemberSignature Language="C#" Value="public virtual string ConnectionString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConnectionString" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.ConnectionString" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ConnectionString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ConnectionString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConnectionString : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.ConnectionString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.SqlDataSourceConnectionStringEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.SqlDataSourceConnectionStringEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>基になるデータベースに接続するために <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> コントロールが使用する ADO.NET プロバイダー固有の接続文字列を取得または設定します。</summary>
        <value><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> が表す SQL データベースへの接続に使用する、.NET Framework データプロバイダー固有の文字列。 既定値は、空の文字列 ("") です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールは、さまざまな ADO.NET プロバイダーで使用できます。基になるデータソースへの接続に使用される接続文字列の構文は、プロバイダーに固有です。

 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールを構成する場合は、<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> プロパティをデータベースの種類 (既定値は <xref:System.Data.SqlClient?displayProperty=nameWithType>) に設定し、データベースに接続するために必要な情報を含む接続文字列を <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> プロパティに設定します。 接続文字列の内容は、データソースコントロールがアクセスしているデータベースの種類によって異なります。 たとえば、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールには、サーバー名、データベース (カタログ) 名、および SQL Server に接続するときにユーザーを認証する方法に関する情報が必要です。 接続文字列の内容の詳細については、<xref:System.Data.SqlClient.SqlConnection> クラスの <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> プロパティ、<xref:System.Data.OracleClient.OracleConnection> クラスの <xref:System.Data.OracleClient.OracleConnection.ConnectionString%2A> プロパティ、<xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A> クラスの <xref:System.Data.OleDb.OleDbConnection> プロパティ、または <xref:System.Data.Odbc.OdbcConnection.ConnectionString%2A> クラスの <xref:System.Data.Odbc.OdbcConnection> プロパティを参照してください。

 <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> プロパティを変更すると、<xref:System.Web.UI.IDataSource.DataSourceChanged> イベントが発生し、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールにバインドされているコントロールが再バインドされます。

> [!IMPORTANT]
>  接続文字列の格納の詳細については、「[方法: データソースコントロールを使用するときに接続文字列をセキュリティで保護](https://docs.microsoft.com/previous-versions/aspnet/ms178372(v=vs.100))する」を参照してください。



## Examples
 このセクションには、2 つのコード例が含まれています。 最初のコード例では、<xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> プロパティを設定して Microsoft SQL Server データベースに接続し、<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> プロパティの結果を <xref:System.Web.UI.WebControls.GridView> コントロールに表示する方法を示します。 2番目のコード例では、より複雑なシナリオを示します。ここでは、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールを使用して、パスワードで保護された Microsoft Access データベースのデータを表示および更新します。 どちらの場合も、web.config ファイルの `connectionStrings` 要素が最初に表示され、次に <xref:System.Web.UI.WebControls.SqlDataSource> コントロールを含む ASP.NET ページが表示されます。

 次のコード例では、<xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> プロパティを設定して SQL Server データベースに接続し、<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> プロパティの結果を <xref:System.Web.UI.WebControls.GridView> コントロールに表示する方法を示します。



 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_3sql/CS/sql3cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_3sql/VB/sql3vb.aspx#1)]

 次のコード例は、前のコード例よりも複雑なシナリオを示しています。ここでは、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールを使用して、パスワードで保護された Access データベースのデータを表示および更新しています。 <xref:System.Web.UI.WebControls.SqlDataSource> は Access で使用されるため、<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> プロパティは <xref:System.Data.OleDb> プロバイダーに設定され、<xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> プロパティは UNC 共有アクセスデータベースの適切な接続文字列に設定されます。 <xref:System.Web.UI.WebControls.GridView> コントロールは、出荷日を含む注文を表示します。 適切なチェックボックスをオンにして、**[更新]** ボタンをクリックすることで、注文を更新できます。

> [!IMPORTANT]
>  この例では、説明のためだけにパスワードがプレーンテキストで含まれています。 実稼働アプリケーションでは、パスワードを含む接続文字列を暗号化する必要があります。 詳細については、「[接続情報の保護](~/docs/framework/data/adonet/protecting-connection-information.md)」を参照してください。

 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_22sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_22sql/CS/sql22cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_22sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_22sql/VB/sql22vb.aspx#1)]

 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_22sql#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_22sql/CS/sql22cs.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_22sql#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_22sql/VB/sql22vb.aspx#2)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.ProviderName" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178472(v=vs.100)">ASP.NET ページのライフサイクルの概要</related>
      </Docs>
    </Member>
    <Member MemberName="CreateDataSourceView">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.SqlDataSourceView CreateDataSourceView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.SqlDataSourceView CreateDataSourceView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateDataSourceView (viewName As String) As SqlDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::SqlDataSourceView ^ CreateDataSourceView(System::String ^ viewName);" />
      <MemberSignature Language="F#" Value="abstract member CreateDataSourceView : string -&gt; System.Web.UI.WebControls.SqlDataSourceView&#xA;override this.CreateDataSourceView : string -&gt; System.Web.UI.WebControls.SqlDataSourceView" Usage="sqlDataSource.CreateDataSourceView viewName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">データ ソース ビューの名前。</param>
        <summary>データ ソース コントロールに関連付けられたデータ ソース ビュー オブジェクトを作成します。</summary>
        <returns><see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> に関連付けられた <see cref="T:System.Web.UI.WebControls.SqlDataSource" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.SqlDataSource> クラスから派生したクラスは、<xref:System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView%2A> メソッドをオーバーライドして、厳密に型指定されたデータソースビューオブジェクトを返すことができます。

 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.GetView(System.String)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.GetViewNames" />
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceView" />
        <altmember cref="T:System.Web.UI.DataSourceView" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
      </Docs>
    </Member>
    <Member MemberName="DataSourceMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceMode DataSourceMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceMode DataSourceMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.DataSourceMode" />
      <MemberSignature Language="VB.NET" Value="Public Property DataSourceMode As SqlDataSourceMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceMode DataSourceMode { System::Web::UI::WebControls::SqlDataSourceMode get(); void set(System::Web::UI::WebControls::SqlDataSourceMode value); };" />
      <MemberSignature Language="F#" Value="member this.DataSourceMode : System.Web.UI.WebControls.SqlDataSourceMode with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.DataSourceMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> コントロールがデータのフェッチに使用するデータ取得モードを取得または設定します。</summary>
        <value><see cref="T:System.Web.UI.WebControls.SqlDataSourceMode" /> 値のいずれか 1 つです。 既定値は <see cref="F:System.Web.UI.WebControls.SqlDataSourceMode.DataSet" /> の値です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 データ取得モードは、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールが基になるデータベースからデータを取得する方法を識別します。

 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> プロパティが <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> 値に設定されている場合、データは <xref:System.Data.DataSet> オブジェクトに読み込まれ、サーバー上のメモリに格納されます。 これにより、<xref:System.Web.UI.WebControls.GridView>などのユーザーインターフェイスコントロールが、並べ替え、フィルター処理、ページングなどの機能を提供できるようになります。

 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> プロパティが <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader> 値に設定されている場合、データは、順方向専用の読み取り専用カーソルである <xref:System.Data.IDataReader> オブジェクトによって取得されます。 <xref:System.Data.IDataReader> オブジェクトの特定の種類は、<xref:System.Web.UI.WebControls.SqlDataSource> が使用する NET data provider によって異なります。これは、<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> プロパティによって識別されます。 既定では、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールは、Microsoft SQL Server のプロバイダー、<xref:System.Data.SqlClient?displayProperty=nameWithType>、およびデータリーダーが <xref:System.Data.SqlClient.SqlDataReader> オブジェクトを使用します。

 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> プロパティを変更すると、<xref:System.Web.UI.IDataSource.DataSourceChanged> イベントが発生し、<xref:System.Web.UI.WebControls.SqlDataSource> にバインドされているすべてのコントロールが再バインドされます。

 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> プロパティの値は、ビューステートに格納されます。



## Examples
 次のコード例では、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールの <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> プロパティを、並べ替え、ページング、フィルター処理を必要としない <xref:System.Web.UI.WebControls.ListBox> コントロールを持つシナリオの <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader> 値に設定する方法を示します。

 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_1sql/CS/sql1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_1sql/VB/sql1vb.aspx#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.Web.UI.WebControls.SqlDataSource.DataSourceMode" /> プロパティが <see cref="T:System.Web.UI.WebControls.SqlDataSourceMode" /> に定義されている値ではありません。</exception>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceMode" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178472(v=vs.100)">ASP.NET ページのライフサイクルの概要</related>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public int Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Delete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.Delete" />
      <MemberSignature Language="VB.NET" Value="Public Function Delete () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Delete();" />
      <MemberSignature Language="F#" Value="member this.Delete : unit -&gt; int" Usage="sqlDataSource.Delete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" /> SQL 文字列と <see cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" /> コレクション内にある任意のパラメーターを使用して、削除操作を実行します。</summary>
        <returns>基になるデータベースから削除された行数を表す値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 削除操作が実行される前に、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A> メソッドが呼び出され、<xref:System.Web.UI.WebControls.SqlDataSource.Deleting> イベントが発生します。 このイベントを処理して、パラメーターの値を調べたり、削除操作の前に前処理を実行したりすることができます。

 操作が完了すると、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted%2A> メソッドが呼び出され、<xref:System.Web.UI.WebControls.SqlDataSource.Deleted> イベントが発生します。 このイベントを処理して、戻り値とエラーコードを確認し、後処理を実行できます。

 <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> メソッドは、`Delete` メソッドにプログラムでアクセスするために用意されています。 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールがデータバインドコントロールに関連付けられている場合、データバインドコントロールは自動的に**Delete**メソッドを呼び出します。

 <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> メソッドは、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールに関連付けられている <xref:System.Web.UI.WebControls.SqlDataSourceView> オブジェクトの <xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A> メソッドにデリゲートします。 この操作を実行するために、<xref:System.Web.UI.WebControls.SqlDataSourceView> は <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> テキストと関連付けられている <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> 値を使用して <xref:System.Data.Common.DbCommand> オブジェクトを構築し、基になるデータベースに対して <xref:System.Data.Common.DbCommand> を実行します。



## Examples
 次のコード例は、<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> テキストを設定して、Northwind データベースから注文を削除する方法を示しています。 最初に、データは Orders テーブルから取得され、<xref:System.Web.UI.WebControls.DropDownList> コントロールに表示されます。 <xref:System.Web.UI.WebControls.DropDownList> などのデータバインドコントロールを使用する場合は、<xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> プロパティを明示的に宣言し、<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> メソッドを呼び出す必要があります (<xref:System.Web.UI.WebControls.GridView> や <xref:System.Web.UI.WebControls.DetailsView>などの他のコントロールとは異なり、データソースコントロールのパラメーターを自動的に設定して、<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> メソッドを呼び出すことができます)。 この例では、<xref:System.Web.UI.WebControls.Button.OnClick%2A> イベントは、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールの <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> メソッドを明示的に呼び出すプライベート `OnDelete` イベントハンドラーに委任されます。

 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_11sql/CS/sql11cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_11sql/VB/sql11vb.aspx#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> が、基になるデータ ソースとの接続を確立できません。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178472(v=vs.100)">ASP.NET ページのライフサイクルの概要</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public string DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteCommand As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DeleteCommand { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DeleteCommand : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.DeleteCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>基になるデータベースからデータを削除するために <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> コントロールが使用する SQL 文字列を取得または設定します。</summary>
        <value>データを削除するために <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> が使用する SQL 文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> は、SQL クエリまたはストアドプロシージャの名前を表し、<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> メソッドによって使用されます。

 データベース製品ごとに使用する SQL が異なるため、SQL 文字列の構文は、現在使用している ADO.NET プロバイダーによって決まります。これは、<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> プロパティから識別できます。 SQL 文字列がパラメーター化クエリまたはコマンドである場合、パラメーターの構文は、使用されている ADO.NET プロバイダーにも依存します。 たとえば、プロバイダーが <xref:System.Web.UI.WebControls.SqlDataSource> クラスの既定のプロバイダーである <xref:System.Data.SqlClient?displayProperty=nameWithType>の場合、パラメーターの構文は `'@parameterName'`ます。 ただし、プロバイダーが <xref:System.Data.Odbc?displayProperty=nameWithType> または <xref:System.Data.OleDb?displayProperty=nameWithType>に設定されている場合、パラメーターのプレースホルダーは `'?'`ます。 パラメーター化された SQL クエリとコマンドの詳細については、「 [SqlDataSource コントロールでのパラメーターの使用](https://docs.microsoft.com/previous-versions/aspnet/z72eefad(v=vs.100))」を参照してください。

 データベースがストアドプロシージャをサポートしている場合は、<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> プロパティに SQL 文字列またはストアドプロシージャの名前を指定できます。

 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> プロパティは、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールに関連付けられている <xref:System.Web.UI.WebControls.SqlDataSourceView> オブジェクトの <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A> プロパティに委任されます。

> [!IMPORTANT]
>  セキュリティ上の理由から、<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> プロパティはビューステートに格納されません。 クライアントでビューステートの内容をデコードできるため、データベース構造に関する機密情報をビューステートに格納すると、情報漏えいの脆弱性が生じる可能性があります。



## Examples
 次のコード例は、<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> テキストを設定して、Northwind データベースの Orders テーブルから注文を削除する方法を示しています。 データは Orders テーブルから取得され、<xref:System.Web.UI.WebControls.GridView> コントロールに表示されます。 <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> プロパティが `true`に設定されている場合、<xref:System.Web.UI.WebControls.GridView> は **[削除]** ボタンを自動的に表示します。 また、**[削除]** ボタンをクリックすると、<xref:System.Web.UI.WebControls.GridView> コントロールによって <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> コレクションが自動的に設定され、<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> メソッドが呼び出されます。 最後に、このコード例ではデータを削除するので、<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> 操作が実行される前にデータベースをディスクにバックアップするようにイベントハンドラーが追加されます。

 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/CS/sql10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/VB/sql10vb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Delete" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178472(v=vs.100)">ASP.NET ページのライフサイクルの概要</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType DeleteCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType DeleteCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommandType" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteCommandType As SqlDataSourceCommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceCommandType DeleteCommandType { System::Web::UI::WebControls::SqlDataSourceCommandType get(); void set(System::Web::UI::WebControls::SqlDataSourceCommandType value); };" />
      <MemberSignature Language="F#" Value="member this.DeleteCommandType : System.Web.UI.WebControls.SqlDataSourceCommandType with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.DeleteCommandType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" /> プロパティのテキストが SQL ステートメントまたは格納されたプロシージャの名前のいずれであるかを示す値を取得または設定します。</summary>
        <value><see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 値のいずれか 1 つです。 既定値は、<see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommandType%2A> プロパティは、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールに関連付けられている <xref:System.Web.UI.WebControls.SqlDataSourceView> オブジェクトの <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommandType%2A> プロパティに委任されます。

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Deleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Deleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleted As SqlDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceStatusEventHandler ^ Deleted;" />
      <MemberSignature Language="F#" Value="member this.Deleted : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " Usage="member this.Deleted : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>削除操作が完了したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.SqlDataSource.Deleted> イベントを処理して、削除操作の完了後に出力パラメーターの値を確認します。 出力パラメーターは、イベントに関連付けられている <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs> オブジェクトから使用できます。

 イベントを処理する方法の詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。

 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Deleting" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178472(v=vs.100)">ASP.NET ページのライフサイクルの概要</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection DeleteParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeleteParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ DeleteParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeleteParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" /> コントロールに関連付けられた <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> オブジェクトから、<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> プロパティで使用されるパラメーターを格納するパラメーター コレクションを取得します。</summary>
        <value><see cref="T:System.Web.UI.WebControls.ParameterCollection" /> プロパティによって使用されるパラメーターを格納している <see cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> プロパティにパラメーター化された SQL クエリが含まれている場合、<xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> コレクションには、SQL 文字列のパラメータープレースホルダーに対応する <xref:System.Web.UI.WebControls.Parameter> オブジェクトが含まれます。

> [!NOTE]
>  <xref:System.Web.UI.WebControls.SqlDataSource> コントロールにバインドするデータバインドコントロールの <xref:System.Web.UI.WebControls.BoundField> コントロールが、<xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> コレクション内のパラメーター名と一致する名前を持っていないことを確認します。 バインドされたフィールドと同じ名前のパラメーターが SQL コマンドから除外され、"パラメーターが指定されていません" エラーが発生する可能性があります。

 <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> プロパティが <xref:System.Web.UI.ConflictOptions.CompareAllValues> 値に設定されている場合、データの新旧両方の値に対してパラメーターが作成されます。 古い値のパラメーターは、<xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A> プロパティに従って名前が付けられます。

 ADO.NET プロバイダーによっては、<xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> コレクション内のパラメーターの順序が重要になる場合があります。 <xref:System.Data.OleDb?displayProperty=nameWithType> プロバイダーと <xref:System.Data.Odbc?displayProperty=nameWithType> プロバイダーは、パラメーター化された SQL クエリ内のパラメーターの順序に従って、コレクション内のパラメーターを関連付けます。 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールの既定の ADO.NET プロバイダーである <xref:System.Data.SqlClient?displayProperty=nameWithType> プロバイダーは、パラメーターの名前と SQL クエリのプレースホルダーを照合することによって、コレクション内のパラメーターを関連付けます。 パラメーター化された SQL クエリとコマンドの詳細については、「 [SqlDataSource コントロールでのパラメーターの使用](https://docs.microsoft.com/previous-versions/aspnet/z72eefad(v=vs.100))」を参照してください。

 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> プロパティは、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールに関連付けられている <xref:System.Web.UI.WebControls.SqlDataSourceView> オブジェクトに含まれる <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters%2A> プロパティを取得します。

> [!IMPORTANT]
>  値は、検証なしでパラメーターに挿入されます。これは、セキュリティ上の脅威となる可能性があります。 クエリを実行する前に、<xref:System.Web.UI.WebControls.SqlDataSource.Deleting> イベントを使用してパラメーター値を検証してください。 詳細については、「[スクリプトによる攻略の概要](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))」を参照してください。



## Examples
 次のコード例は、<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> テキストを設定して、Northwind データベースから注文を削除する方法を示しています。 最初に、データは Orders テーブルから取得され、<xref:System.Web.UI.WebControls.DropDownList> コントロールに表示されます。 <xref:System.Web.UI.WebControls.DropDownList> などのデータバインドコントロールを使用する場合は、<xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> プロパティを明示的に宣言し、<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> メソッドを呼び出す必要があります (<xref:System.Web.UI.WebControls.GridView> や <xref:System.Web.UI.WebControls.DetailsView>などの他のコントロールとは異なり、データソースコントロールで自動的にパラメーターを設定して <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> を呼び出します)。 この例では、<xref:System.Web.UI.WebControls.Button.OnClick%2A> イベントは、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールの <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> メソッドを明示的に呼び出すプライベート `OnDelete` イベントハンドラーに委任されます。

 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_11sql/CS/sql11cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_11sql/VB/sql11vb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Delete" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178472(v=vs.100)">ASP.NET ページのライフサイクルの概要</related>
      </Docs>
    </Member>
    <Member MemberName="Deleting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Deleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Deleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Deleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleting As SqlDataSourceCommandEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceCommandEventHandler ^ Deleting;" />
      <MemberSignature Language="F#" Value="member this.Deleting : System.Web.UI.WebControls.SqlDataSourceCommandEventHandler " Usage="member this.Deleting : System.Web.UI.WebControls.SqlDataSourceCommandEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>削除操作の前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.SqlDataSource.Deleting> イベントを処理して、アプリケーション固有の追加の初期化操作を実行したり、パラメーターの値を検証したり、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールで削除操作を実行する前にパラメーター値を変更したりします。

 イベントハンドラーデリゲートが呼び出されても、基になるデータソースへの接続はまだ開いていません。 したがって、<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> オブジェクトによって公開されている <xref:System.Data.Common.DbCommand> オブジェクトの <xref:System.Data.Common.DbCommand.Cancel%2A> メソッドを呼び出すことによって、操作を直接取り消すことはできません。 ただし、<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> オブジェクトの <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> プロパティを `true`に設定することによって、データベース操作を取り消すことができます。

 イベントを処理する方法の詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。



## Examples
 次のコード例は、<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> 操作が発生する前に発生する <xref:System.Web.UI.WebControls.SqlDataSource.Deleting> イベントを処理する方法を示しています。 この例では、Northwind データベースからデータを削除するので、<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> 操作を実行する前に、データベースをディスクにバックアップしようとする <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A> ハンドラーが追加されます。

 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/CS/sql10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/VB/sql10vb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Deleted" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178472(v=vs.100)">ASP.NET ページのライフサイクルの概要</related>
      </Docs>
    </Member>
    <Member MemberName="EnableCaching">
      <MemberSignature Language="C#" Value="public virtual bool EnableCaching { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCaching" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.EnableCaching" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EnableCaching As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EnableCaching { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableCaching : bool with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.EnableCaching" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> コントロールでデータ キャッシュが有効かどうかを示す値を取得または設定します。</summary>
        <value>データ ソース コントロールでデータ キャッシュが有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定では、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールは、データキャッシュをサポートしています。 データがキャッシュされている間、<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドは、基になるデータベースからではなく、キャッシュからデータを取得します。 キャッシュが期限切れになると、<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドによって基になるデータベースからデータが取得され、データが再度キャッシュされます。

 <xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A> プロパティが `true` に設定され、<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> プロパティが0より大きい値に設定されている場合、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールはデータを自動的にキャッシュします。これは、キャッシュが新しいセットを取得する前にデータを格納する秒数を示します。

> [!IMPORTANT]
>  Microsoft Windows 認証でクライアントの偽装を使用している場合は、最初のユーザーがデータにアクセスしたときにデータがキャッシュされます。 別のユーザーが同じデータを要求した場合、データはキャッシュから取得されます。 データへのユーザーのアクセスを確認するために、データベースに対して別の呼び出しを行っても、データは取得されません。 複数のユーザーがデータにアクセスすることが予想される場合に、各データの取得をデータベースのセキュリティ構成によって検証する必要がある場合は、キャッシュを使用しないでください。



## Examples
 次のコード例は、Microsoft SQL Server で Northwind データベースからデータを取得し、データキャッシュが有効になっている <xref:System.Web.UI.WebControls.GridView> コントロールに表示する方法を示しています。 <xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A> プロパティが `true` に設定されており、<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> が20秒に設定されています。 既定では、<xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> プロパティは <xref:System.Web.UI.DataSourceCacheExpiry.Absolute> フィールドに設定されているため、このページのユーザーには20秒ごとに新しいデータが表示されます。

 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_18sql/CS/sql18cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_18sql/VB/sql18vb.aspx#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><see cref="P:System.Web.UI.WebControls.SqlDataSource.EnableCaching" /> でキャッシュがサポートされていない場合、<see langword="true" /> プロパティは <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> に設定されます。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
      </Docs>
    </Member>
    <Member MemberName="FilterExpression">
      <MemberSignature Language="C#" Value="public string FilterExpression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FilterExpression" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.FilterExpression" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterExpression As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FilterExpression { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FilterExpression : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.FilterExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" /> メソッドが呼び出されるときに適用されるフィルター式を取得または設定します。</summary>
        <value><see cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" /> メソッドを使用してデータを取得するときに適用されるフィルター式を表す文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> プロパティ値は、文字列に含まれるすべての置換パラメーターに対して <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> コレクションの値を使用する書式指定文字列式 (<xref:System.String.Format%2A?displayProperty=nameWithType> メソッドによって処理される文字列) です。 フィルター式は、<xref:System.Data.DataView.RowFilter%2A> プロパティで許容される構文と同じです。これは、フィルター式が <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドの実行から返される <xref:System.Data.DataView> オブジェクトの <xref:System.Data.DataView.RowFilter%2A> プロパティに適用されるためです。 詳細については、<xref:System.Data.DataColumn.Expression%2A> を参照してください。

 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> コレクションにパラメーターを追加する場合は、書式設定文字列のプレースホルダーを含めることもできます (たとえば、パラメーター値の代わりとなる式の `"{0}")`)。 プレースホルダーは、<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> コレクション内のパラメーターのインデックスに従って置き換えられます。 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> コレクション内のオブジェクトが `null`場合、オブジェクトは空の文字列に置き換えられます。

 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> プロパティにパラメーターを含めることができます。 パラメーターが文字列型または文字型の場合は、パラメーターを単一引用符で囲みます。 パラメーターが数値型の場合、引用符は必要ありません。 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> コレクションには、<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> プロパティで検出されたプレースホルダーに対して評価されるパラメーターが含まれています。

 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールは、<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> モードの場合にのみデータのフィルター処理をサポートします。

 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> プロパティは、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールに関連付けられている <xref:System.Web.UI.WebControls.SqlDataSourceView> オブジェクトの <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A> プロパティに委任されます。



## Examples
 次のコード例では、Northwind データベースからデータを取得し、<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> 文字列と <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> コレクションを使用してフィルター処理する方法を示します。 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> プロパティは、データを取得するために <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドが実行されるたびに適用されます。 この例では、<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> に、<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> コレクションに含まれるフィルターパラメーターのプレースホルダーが含まれています。 また、filter パラメーターは、<xref:System.Web.UI.WebControls.DropDownList> コントロールの <xref:System.Web.UI.WebControls.ListControl.SelectedValue%2A> プロパティにバインドされた <xref:System.Web.UI.WebControls.ControlParameter> オブジェクトです。 <xref:System.Web.UI.WebControls.DropDownList> コントロールの <xref:System.Web.UI.WebControls.ListControl.AutoPostBack%2A> プロパティは `true`に設定されているので、<xref:System.Web.UI.WebControls.DropDownList> コントロールの選択項目を変更すると、ページによってサーバーに情報がポストバックされ、新しいフィルターを使用してデータソースコントロールに再バインドするための <xref:System.Web.UI.WebControls.GridView> コントロールが発生します。

 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/CS/sql17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/VB/sql17vb.aspx#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><see cref="P:System.Web.UI.WebControls.SqlDataSource.FilterExpression" /> プロパティが設定され、<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> が <see cref="F:System.Web.UI.WebControls.SqlDataSourceMode.DataReader" /> モードです。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.FilterParameters" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DataSourceMode" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
      </Docs>
    </Member>
    <Member MemberName="Filtering">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler Filtering;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler Filtering" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Filtering" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Filtering As SqlDataSourceFilteringEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceFilteringEventHandler ^ Filtering;" />
      <MemberSignature Language="F#" Value="member this.Filtering : System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler " Usage="member this.Filtering : System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フィルター操作の前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールがフィルター操作を実行する前に、フィルターパラメーター値に対して検証操作を実行するために <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> イベントを処理します。 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドを取り消すには、<xref:System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs> オブジェクトの <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> プロパティを `true`に設定します。 イベントは、<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> プロパティが設定されている場合にのみ発生します。

 <xref:System.Web.UI.WebControls.SqlDataSource.Filtering?displayProperty=nameWithType> イベントは、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールに関連付けられている <xref:System.Web.UI.WebControls.SqlDataSourceView> オブジェクトの <xref:System.Web.UI.WebControls.SqlDataSourceView.Filtering?displayProperty=nameWithType> イベントにデリゲートします。

 イベントを処理する方法の詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178472(v=vs.100)">ASP.NET ページのライフサイクルの概要</related>
      </Docs>
    </Member>
    <Member MemberName="FilterParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection FilterParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection FilterParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.FilterParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FilterParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ FilterParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FilterParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.SqlDataSource.FilterParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Web.UI.WebControls.SqlDataSource.FilterExpression" /> 文字列のパラメーター プレースホルダーに関連付けられたパラメーターのコレクションを取得します。</summary>
        <value><see cref="T:System.Web.UI.WebControls.ParameterCollection" /> プロパティに含まれる任意のパラメーター プレースホルダーに関連付けられたパラメーターのセットを格納している <see cref="P:System.Web.UI.WebControls.SqlDataSource.FilterExpression" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> コレクション内のパラメーターは、<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> プロパティで指定されているすべてのパラメーターに関連付けられています。 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> プロパティで指定されているパラメーターのプレースホルダーは、<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドが呼び出されたときに、<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> コレクション内のパラメーターオブジェクトに順番に一致します。

 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> プロパティは、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールに関連付けられている <xref:System.Web.UI.WebControls.SqlDataSourceView> オブジェクトに含まれる <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A> プロパティを取得します。

> [!IMPORTANT]
>  値は、検証なしでパラメーターに挿入されます。これは、セキュリティ上の脅威となる可能性があります。 クエリを実行する前に、<xref:System.Web.UI.WebControls.SqlDataSource.Filtering> イベントを使用してパラメーター値を検証してください。 詳細については、「[スクリプトによる攻略の概要](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))」を参照してください。



## Examples
 次のコード例では、Northwind データベースからデータを取得し、<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> および <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> プロパティを使用してフィルター処理する方法を示します。 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールの <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> プロパティは、データを取得するために <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドが実行されるたびに適用されます。 この例では、<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> プロパティに、<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> コレクションに含まれているフィルターパラメーターのプレースホルダーが含まれています。 また、filter パラメーターは、<xref:System.Web.UI.WebControls.DropDownList> コントロールの <xref:System.Web.UI.WebControls.ListControl.SelectedValue%2A> プロパティにバインドされた <xref:System.Web.UI.WebControls.ControlParameter> オブジェクトです。 <xref:System.Web.UI.WebControls.DropDownList> コントロールの <xref:System.Web.UI.WebControls.ListControl.AutoPostBack%2A> プロパティは `true`に設定されているので、<xref:System.Web.UI.WebControls.DropDownList> の選択を変更すると、ページによってサーバーに情報がポストバックされ、新しいフィルターを使用してデータソースコントロールに再バインドするための <xref:System.Web.UI.WebControls.GridView> コントロールが発生します。

 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/CS/sql17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/VB/sql17vb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.FilterExpression" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DataSourceMode" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178472(v=vs.100)">ASP.NET ページのライフサイクルの概要</related>
      </Docs>
    </Member>
    <Member MemberName="GetDbProviderFactory">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.DbProviderFactory GetDbProviderFactory ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.DbProviderFactory GetDbProviderFactory() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.GetDbProviderFactory" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetDbProviderFactory () As DbProviderFactory" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::Common::DbProviderFactory ^ GetDbProviderFactory();" />
      <MemberSignature Language="F#" Value="abstract member GetDbProviderFactory : unit -&gt; System.Data.Common.DbProviderFactory&#xA;override this.GetDbProviderFactory : unit -&gt; System.Data.Common.DbProviderFactory" Usage="sqlDataSource.GetDbProviderFactory " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbProviderFactory</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Data.Common.DbProviderFactory" /> プロパティで識別される ADO.NET プロバイダーに関連付けられた <see cref="P:System.Web.UI.WebControls.SqlDataSource.ProviderName" /> オブジェクトを返します。</summary>
        <returns>識別された ADO.NET プロバイダーを表す <see cref="T:System.Data.Common.DbProviderFactory" />。それ以外の場合、プロバイダーが設定されていないときは <see cref="N:System.Data.SqlClient" /> のインスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Common.DbProviderFactory> プロパティは、データベースと対話するときに、正しい ADO.NET connection、command、および parameter オブジェクトを作成するために、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールによって使用されます。

 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.Common.DbProviderFactory" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
      </Docs>
    </Member>
    <Member MemberName="GetView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.DataSourceView GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.DataSourceView GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.GetView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetView (viewName As String) As DataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::DataSourceView ^ GetView(System::String ^ viewName);" />
      <MemberSignature Language="F#" Value="override this.GetView : string -&gt; System.Web.UI.DataSourceView" Usage="sqlDataSource.GetView viewName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">取得するビューの名前。 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> がサポートするビューは 1 つだけであるため、<paramref name="viewName" /> は無視されます。</param>
        <summary>データ ソース コントロールに関連付けられた名前付きデータ ソース ビューを取得します。</summary>
        <returns><see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> に関連付けられた "Table" という名前の <see cref="T:System.Web.UI.WebControls.SqlDataSource" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールでサポートされるデータソースビューは1つだけです。 すべてのデータソースビューオブジェクトと同様に、データソースコントロールに関連付けられている <xref:System.Web.UI.WebControls.SqlDataSourceView> オブジェクトは、その機能を定義し、基になるデータベースからデータを取得するために必要なすべての処理を実行して、並べ替え、挿入、削除、更新などの操作を実行します。

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="viewName" /> が <see langword="null" /> であるか、<c>Table</c> 以外の値です。</exception>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceView" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.GetViewNames" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
      </Docs>
    </Member>
    <Member MemberName="GetViewNames">
      <MemberSignature Language="C#" Value="protected override System.Collections.ICollection GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Collections.ICollection GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.GetViewNames" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetViewNames () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Collections::ICollection ^ GetViewNames();" />
      <MemberSignature Language="F#" Value="override this.GetViewNames : unit -&gt; System.Collections.ICollection" Usage="sqlDataSource.GetViewNames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> コントロールに関連付けられたビュー オブジェクトのリストを表す名前のコレクションを取得します。</summary>
        <returns><see cref="T:System.Collections.ICollection" /> に関連付けられたビューの名前が格納されている <see cref="T:System.Web.UI.WebControls.SqlDataSource" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールは、基になるデータに対して `"Table"`という名前のビューを1つだけサポートします。 <xref:System.Web.UI.WebControls.SqlDataSource.GetViewNames%2A> メソッドは、この1つのビュー名の単一要素コレクションを返します。

 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.GetView(System.String)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public int Insert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Insert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.Insert" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Insert();" />
      <MemberSignature Language="F#" Value="member this.Insert : unit -&gt; int" Usage="sqlDataSource.Insert " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" /> SQL 文字列と <see cref="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" /> コレクション内にある任意のパラメーターを使用して、挿入操作を実行します。</summary>
        <returns>基になるデータベースに挿入された行数を表す値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 挿入操作が実行される前に、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> メソッドが呼び出され、<xref:System.Web.UI.WebControls.SqlDataSource.Inserting> イベントが発生します。 このイベントを処理して、パラメーターの値を調べたり、<xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> 操作の前に前処理を実行したりすることができます。 挿入操作を実行するために、<xref:System.Web.UI.WebControls.SqlDataSourceView> オブジェクトは <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> テキストと関連付けられている <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> プロパティを使用して <xref:System.Data.Common.DbCommand> オブジェクトを構築し、基になるデータベースに対して <xref:System.Data.Common.DbCommand> オブジェクトを実行します。

 操作が完了すると、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> メソッドが呼び出され、<xref:System.Web.UI.WebControls.SqlDataSource.Inserted> イベントが発生します。 このイベントを処理して、戻り値とエラーコードを確認し、後処理を実行できます。

 <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> メソッドは、`Insert` メソッドにプログラムでアクセスするために用意されています。 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールがデータバインドコントロールに関連付けられている場合、データバインドコントロールは自動的に `Insert` メソッドを呼び出します。

 <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> メソッドは、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールに関連付けられている <xref:System.Web.UI.WebControls.SqlDataSourceView> オブジェクトの <xref:System.Web.UI.WebControls.SqlDataSourceView.Insert%2A> メソッドにデリゲートします。

> [!IMPORTANT]
>  値は、検証なしでパラメーターに挿入されます。これは、セキュリティ上の脅威となる可能性があります。 クエリを実行する前に、<xref:System.Web.UI.WebControls.SqlDataSource.Filtering> イベントを使用してパラメーター値を検証してください。 詳細については、「[スクリプトによる攻略の概要](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))」を参照してください。



## Examples
 次のコード例では、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールと単純な Web フォームページを使用してデータベースにデータを挿入する方法を示します。 データテーブル内の現在のデータが <xref:System.Web.UI.WebControls.DropDownList> コントロールに表示されます。 新しいレコードを追加するには、<xref:System.Web.UI.WebControls.TextBox> コントロールに値を入力し、**[挿入]** ボタンをクリックします。 **[挿入]** ボタンがクリックされると、指定された値がデータベースに挿入され、<xref:System.Web.UI.WebControls.DropDownList> が更新されます。

> [!IMPORTANT]
>  この例には、セキュリティ上の脅威となる可能性のあるユーザー入力を受け付けるテキストボックスが含まれています。検証を行わずにパラメーターに値を挿入することもできます。 クエリを実行する前に、<xref:System.Web.UI.WebControls.SqlDataSource.Inserting> イベントを使用してパラメーター値を検証してください。 詳細については、「[スクリプトによる攻略の概要](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))」を参照してください。

> [!NOTE]
>  この例では、データアクセスに対して宣言型構文を使用する方法を示します。 マークアップではなくコードを使用してデータにアクセスする方法の詳細については、「 [Visual Studio でのデータ](/visualstudio/data-tools/accessing-data-in-visual-studio)へのアクセス」を参照してください。

 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/CS/sql24cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/VB/sql24vb.aspx#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> が、基になるデータ ソースとの接続を確立できません。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178472(v=vs.100)">ASP.NET ページのライフサイクルの概要</related>
      </Docs>
    </Member>
    <Member MemberName="InsertCommand">
      <MemberSignature Language="C#" Value="public string InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertCommand As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InsertCommand { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InsertCommand : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.InsertCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>基になるデータベースにデータを挿入するために <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> コントロールが使用する SQL 文字列を取得または設定します。</summary>
        <value>データを挿入するために <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> が使用する SQL 文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> は、SQL クエリまたはストアドプロシージャの名前のいずれかを表し、<xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> メソッドによって使用されます。

 データベース製品ごとに使用する SQL が異なるため、SQL 文字列の構文は、現在使用している ADO.NET プロバイダーによって決まります。これは、<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> プロパティから識別できます。 SQL 文字列がパラメーター化されたクエリまたはコメントである場合は、パラメーターのプレースホルダーも現在使用している ADO.NET プロバイダーによって決まります。 たとえば、プロバイダーが <xref:System.Web.UI.WebControls.SqlDataSource> クラスの既定のプロバイダーである <xref:System.Data.SqlClient?displayProperty=nameWithType>の場合、パラメーターのプレースホルダーは `'@parameterName'`ます。 ただし、プロバイダーが <xref:System.Data.Odbc?displayProperty=nameWithType> または <xref:System.Data.OleDb?displayProperty=nameWithType>に設定されている場合、パラメーターのプレースホルダーは `'?'`ます。 パラメーター化された SQL クエリとコマンドの詳細については、「 [SqlDataSource コントロールでのパラメーターの使用](https://docs.microsoft.com/previous-versions/aspnet/z72eefad(v=vs.100))」を参照してください。

 データソースでストアドプロシージャがサポートされている場合、<xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> には SQL 文字列またはストアドプロシージャの名前を指定できます。

 このプロパティは、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールに関連付けられている <xref:System.Web.UI.WebControls.SqlDataSourceView> の <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A> プロパティに委任されます。

> [!IMPORTANT]
>  セキュリティ上の理由から、[<xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>] プロパティは [ビューステート] として格納されていません。 クライアントでビューステートの内容をデコードできるため、データベース構造に関する機密情報をビューステートに格納すると、情報漏えいの脆弱性が生じる可能性があります。

> [!IMPORTANT]
>  値は、検証なしでパラメーターに挿入されます。これは、セキュリティ上の脅威となる可能性があります。 クエリを実行する前に、<xref:System.Web.UI.WebControls.SqlDataSource.Filtering> イベントを使用してパラメーター値を検証してください。 詳細については、「[スクリプトによる攻略の概要](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))」を参照してください。



## Examples
 このセクションには、2 つのコード例が含まれています。 最初のコード例では、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールと単純な Web フォームページを使用してデータベースにデータを挿入する方法を示します。 2番目のコード例は、Microsoft SQL Server からデータを取得して <xref:System.Web.UI.WebControls.GridView> コントロールに表示する方法と、<xref:System.Web.UI.WebControls.DetailsView> コントロールを使用して、選択した行の詳細を <xref:System.Web.UI.WebControls.GridView> コントロールに表示する方法と、新しいレコードを挿入するためのフォームとして使用する方法を示しています。

> [!NOTE]
>  これらの例では、データアクセスに対して宣言型構文を使用する方法を示します。 マークアップではなくコードを使用してデータにアクセスする方法の詳細については、「 [Visual Studio でのデータ](/visualstudio/data-tools/accessing-data-in-visual-studio)へのアクセス」を参照してください。

 次のコード例では、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールと単純な Web フォームページを使用してデータベースにデータを挿入する方法を示します。 データテーブル内の現在のデータが <xref:System.Web.UI.WebControls.DropDownList> コントロールに表示されます。 新しいレコードを追加するには、<xref:System.Web.UI.WebControls.TextBox> コントロールに値を入力し、**[挿入]** ボタンをクリックします。 **[挿入]** ボタンをクリックすると、指定した値がデータベースに挿入され、<xref:System.Web.UI.WebControls.DropDownList> コントロールが更新されます。

> [!IMPORTANT]
>  この例には、セキュリティ上の脅威となる可能性のあるユーザー入力を受け付けるテキストボックスが含まれています。検証なしでパラメーターに値が挿入されます。これは、潜在的なセキュリティ上の脅威でもあります。 クエリを実行する前に、<xref:System.Web.UI.WebControls.SqlDataSource.Inserting> イベントを使用してパラメーター値を検証してください。 詳細については、「[スクリプトによる攻略の概要](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))」を参照してください。

 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/CS/sql24cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/VB/sql24vb.aspx#1)]

 次のコード例は、SQL Server からデータを取得して <xref:System.Web.UI.WebControls.GridView> コントロールに表示する方法と、<xref:System.Web.UI.WebControls.DetailsView> コントロールを使用して <xref:System.Web.UI.WebControls.GridView> コントロールで選択された行の詳細を表示する方法と、新しいレコードを挿入するためのフォームとして使用する方法を示しています。

 初期状態では、データは <xref:System.Web.UI.WebControls.GridView> コントロールに表示され、<xref:System.Web.UI.WebControls.GridView> の選択した行は <xref:System.Web.UI.WebControls.DetailsView> コントロールにも表示されます。 <xref:System.Web.UI.WebControls.GridView> コントロールと <xref:System.Web.UI.WebControls.DetailsView> コントロールは、異なるデータソースコントロールを使用します。<xref:System.Web.UI.WebControls.DetailsView> に関連付けられているプロパティには、<xref:System.Web.UI.WebControls.GridView> の選択した行が表示されるように、<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> プロパティと <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> プロパティがあります。

 <xref:System.Web.UI.WebControls.DetailsView> コントロールの [自動的に生成された**挿入**] ボタンをクリックすると、新しいレコードを挿入するために使用される別のユーザーインターフェイスが <xref:System.Web.UI.WebControls.DetailsView> に表示されます。 この例では、ストアドプロシージャを使用してレコードを挿入し、挿入された行の主キーを返します。 レコードを挿入すると、<xref:System.Web.UI.WebControls.DetailsView> によって <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> コレクションにバインドされた列の値が自動的に設定され、<xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> メソッドが呼び出されます。 <xref:System.Web.UI.WebControls.DetailsView> は、ASP.NET 双方向のデータバインディング構文が使用されている場合に、任意の <xref:System.Web.UI.WebControls.BoundField> オブジェクトと <xref:System.Web.UI.WebControls.TemplateField> オブジェクトのパラメーターを使用して、正しいパラメーターを推論できます。 この例では、ストアドプロシージャによって返される主キーを処理するために、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> イベントハンドラーに追加のパラメーターが追加されています。

 最後に、<xref:System.Web.UI.WebControls.DetailsView> コントロールによってデータベースにデータが挿入された後、<xref:System.Web.UI.WebControls.SqlDataSource.Inserted> イベントを処理するために <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> イベントハンドラーが呼び出され、挿入された行の主キーの値が表示され、<xref:System.Web.UI.WebControls.GridView> コントロールの <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> メソッドがデータを更新するために明示的に呼び出されます。

 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Insert" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178472(v=vs.100)">ASP.NET ページのライフサイクルの概要</related>
      </Docs>
    </Member>
    <Member MemberName="InsertCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType InsertCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType InsertCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.InsertCommandType" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertCommandType As SqlDataSourceCommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceCommandType InsertCommandType { System::Web::UI::WebControls::SqlDataSourceCommandType get(); void set(System::Web::UI::WebControls::SqlDataSourceCommandType value); };" />
      <MemberSignature Language="F#" Value="member this.InsertCommandType : System.Web.UI.WebControls.SqlDataSourceCommandType with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.InsertCommandType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" /> プロパティのテキストが SQL ステートメントまたは格納されたプロシージャの名前のいずれであるかを示す値を取得または設定します。</summary>
        <value><see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 値のいずれか 1 つです。 既定値は、<see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommandType%2A> プロパティは、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールに関連付けられている <xref:System.Web.UI.WebControls.SqlDataSourceView> オブジェクトの <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommandType%2A> プロパティに委任されます。



## Examples
 次のコード例は、Microsoft SQL Server データベースからデータを取得し、それを <xref:System.Web.UI.WebControls.GridView> コントロールに表示する方法を示しています。 また、<xref:System.Web.UI.WebControls.DetailsView> コントロールを使用して、<xref:System.Web.UI.WebControls.GridView> 内の選択した行の詳細を表示したり、新しいレコードを挿入するためのフォームとして使用したりする方法も示します。

 <xref:System.Web.UI.WebControls.GridView> コントロールにはデータのセットが表示され、<xref:System.Web.UI.WebControls.DetailsView> には特定の行の詳細が表示されます。 <xref:System.Web.UI.WebControls.DetailsView> コントロールの [自動的に生成された**挿入**] ボタンをクリックすると、新しいレコードを挿入するために使用される別のユーザーインターフェイスが <xref:System.Web.UI.WebControls.DetailsView> に表示されます。 この例では、ストアドプロシージャを使用してレコードを挿入し、挿入された行の主キーを返します。 ストアドプロシージャ名は、<xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> プロパティで設定され、<xref:System.Web.UI.WebControls.SqlDataSource.InsertCommandType%2A> プロパティを <xref:System.Web.UI.WebControls.SqlDataSourceCommandType.StoredProcedure> 値に設定することにより、ストアドプロシージャとして識別されます。

 <xref:System.Web.UI.WebControls.DetailsView> コントロールによってデータベースにデータが挿入された後、<xref:System.Web.UI.WebControls.SqlDataSource.Inserted> イベントを処理するために <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> イベントハンドラーが呼び出され、挿入された行の主キーの値が表示されます。また、<xref:System.Web.UI.WebControls.GridView> コントロールの <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> メソッドは、データを更新するために明示的に呼び出されます。

 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178472(v=vs.100)">ASP.NET ページのライフサイクルの概要</related>
      </Docs>
    </Member>
    <Member MemberName="Inserted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Inserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Inserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Inserted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserted As SqlDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceStatusEventHandler ^ Inserted;" />
      <MemberSignature Language="F#" Value="member this.Inserted : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " Usage="member this.Inserted : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>挿入操作が完了したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 挿入操作が完了した後の出力パラメーターの値を確認するには、<xref:System.Web.UI.WebControls.SqlDataSource.Inserted> イベントを処理します。 出力パラメーターは、イベントに関連付けられている <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs> オブジェクトから使用できます。

 イベントを処理する方法の詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。



## Examples
 次のコード例は、Microsoft SQL Server からデータを取得して <xref:System.Web.UI.WebControls.GridView> コントロールに表示する方法と、<xref:System.Web.UI.WebControls.DetailsView> コントロールを使用して <xref:System.Web.UI.WebControls.GridView> 内の選択した行の詳細を表示する方法と、新しいレコードを挿入するためのフォームとして使用する方法を示しています。

> [!NOTE]
>  この例では、データアクセスに対して宣言型構文を使用する方法を示します。 マークアップではなくコードを使用してデータにアクセスする方法の詳細については、「 [Visual Studio でのデータ](/visualstudio/data-tools/accessing-data-in-visual-studio)へのアクセス」を参照してください。

 初期状態では、データは <xref:System.Web.UI.WebControls.GridView> コントロールに表示され、<xref:System.Web.UI.WebControls.GridView> の選択した行は <xref:System.Web.UI.WebControls.DetailsView> コントロールにも表示されます。 <xref:System.Web.UI.WebControls.GridView> コントロールと <xref:System.Web.UI.WebControls.DetailsView> コントロールは、異なるデータソースコントロールを使用します。<xref:System.Web.UI.WebControls.DetailsView> に関連付けられているプロパティには、<xref:System.Web.UI.WebControls.GridView> の選択した行が表示されるように、<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> プロパティと <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> プロパティがあります。

 <xref:System.Web.UI.WebControls.DetailsView> コントロールの [自動的に生成された**挿入**] ボタンをクリックすると、新しいレコードを挿入するために使用される別のユーザーインターフェイスが <xref:System.Web.UI.WebControls.DetailsView> に表示されます。 この例では、ストアドプロシージャを使用してレコードを挿入し、挿入された行の主キーを返します。 レコードを挿入すると、<xref:System.Web.UI.WebControls.DetailsView> によって <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> コレクションにバインドされた列の値が自動的に設定され、<xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> メソッドが呼び出されます。 <xref:System.Web.UI.WebControls.DetailsView> は、ASP.NET 双方向のデータバインディング構文が使用されている場合に、任意の <xref:System.Web.UI.WebControls.BoundField> オブジェクトと <xref:System.Web.UI.WebControls.TemplateField> オブジェクトのパラメーターを使用して、正しいパラメーターを推論できます。 この例では、ストアドプロシージャによって返される主キーを処理するために、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> イベントハンドラーに追加のパラメーターが追加されています。

 最後に、<xref:System.Web.UI.WebControls.DetailsView> コントロールによってデータベースにデータが挿入された後、<xref:System.Web.UI.WebControls.SqlDataSource.Inserted> イベントを処理するために <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> イベントハンドラーが呼び出され、挿入された行の主キーの値が表示されます。また、<xref:System.Web.UI.WebControls.GridView> コントロールの <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> メソッドは、データを更新するために明示的に呼び出されます。

 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Inserting" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Insert" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178472(v=vs.100)">ASP.NET ページのライフサイクルの概要</related>
      </Docs>
    </Member>
    <Member MemberName="Inserting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Inserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Inserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Inserting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserting As SqlDataSourceCommandEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceCommandEventHandler ^ Inserting;" />
      <MemberSignature Language="F#" Value="member this.Inserting : System.Web.UI.WebControls.SqlDataSourceCommandEventHandler " Usage="member this.Inserting : System.Web.UI.WebControls.SqlDataSourceCommandEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>挿入操作の前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> イベントを処理して、アプリケーション固有の追加の初期化操作を実行したり、パラメーターの値を検証したり、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールが挿入操作を実行する前にパラメーター値を変更したりします。 イベントハンドラーデリゲートが呼び出されても、基になるデータソースへの接続はまだ開いていません。 したがって、<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> プロパティによって公開されている <xref:System.Data.Common.DbCommand> オブジェクトの <xref:System.Data.Common.DbCommand.Cancel%2A> メソッドを呼び出すことによって、操作を直接取り消すことはできません。 ただし、<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> オブジェクトの <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> プロパティを `true`に設定することによって、データベース操作を取り消すことができます。

 イベントを処理する方法の詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。



## Examples
 次のコード例は、Microsoft SQL Server からデータを取得して <xref:System.Web.UI.WebControls.GridView> コントロールに表示する方法と、<xref:System.Web.UI.WebControls.DetailsView> コントロールを使用して <xref:System.Web.UI.WebControls.GridView> 内の選択した行の詳細を表示する方法と、新しいレコードを挿入するためのフォームとして使用する方法を示しています。

> [!NOTE]
>  この例では、データアクセスに対して宣言型構文を使用する方法を示します。 マークアップではなくコードを使用してデータにアクセスする方法の詳細については、「 [Visual Studio でのデータ](/visualstudio/data-tools/accessing-data-in-visual-studio)へのアクセス」を参照してください。

 初期状態では、データは <xref:System.Web.UI.WebControls.GridView> コントロールに表示され、<xref:System.Web.UI.WebControls.GridView> の選択した行は <xref:System.Web.UI.WebControls.DetailsView> コントロールにも表示されます。 <xref:System.Web.UI.WebControls.GridView> コントロールと <xref:System.Web.UI.WebControls.DetailsView> コントロールは、異なるデータソースコントロールを使用します。<xref:System.Web.UI.WebControls.DetailsView> に関連付けられているプロパティには、<xref:System.Web.UI.WebControls.GridView> の選択した行が表示されるように、<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> プロパティと <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> プロパティがあります。

 <xref:System.Web.UI.WebControls.DetailsView> コントロールの [自動的に生成された**挿入**] ボタンをクリックすると、新しいレコードを挿入するために使用される別のユーザーインターフェイスが <xref:System.Web.UI.WebControls.DetailsView> に表示されます。 この例では、ストアドプロシージャを使用してレコードを挿入し、挿入された行の主キーを返します。 レコードを挿入すると、<xref:System.Web.UI.WebControls.DetailsView> によって <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> コレクションにバインドされた列の値が自動的に設定され、<xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> メソッドが呼び出されます。 <xref:System.Web.UI.WebControls.DetailsView> は、ASP.NET 双方向のデータバインディング構文が使用されている場合に、任意の <xref:System.Web.UI.WebControls.BoundField> オブジェクトと <xref:System.Web.UI.WebControls.TemplateField> のパラメーターを使用して、正しいパラメーターを推論できます。 この例では、ストアドプロシージャによって返される主キーを処理するために、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> イベントハンドラーに追加のパラメーターが追加されています。

 最後に、<xref:System.Web.UI.WebControls.DetailsView> コントロールによってデータベースにデータが挿入された後、<xref:System.Web.UI.WebControls.SqlDataSource.Inserted> イベントを処理するために <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> イベントハンドラーが呼び出され、挿入された行の主キーの値が表示されます。また、<xref:System.Web.UI.WebControls.GridView> コントロールの `DataBind` メソッドは、データを更新するために明示的に呼び出されます。

 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Inserted" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Insert" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178472(v=vs.100)">ASP.NET ページのライフサイクルの概要</related>
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection InsertParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ InsertParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InsertParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" /> コントロールに関連付けられた <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> オブジェクトから、<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> プロパティで使用されるパラメーターを格納するパラメーター コレクションを取得します。</summary>
        <value><see cref="T:System.Web.UI.WebControls.ParameterCollection" /> プロパティによって使用されるパラメーターを格納している <see cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> プロパティは、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールに関連付けられている <xref:System.Web.UI.WebControls.SqlDataSourceView> オブジェクトに含まれる <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters%2A> プロパティを取得します。

 <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> プロパティにパラメーター化された SQL クエリが含まれている場合、<xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> コレクションには、SQL 文字列のパラメータープレースホルダーに対応する <xref:System.Web.UI.WebControls.Parameter> オブジェクトが含まれます。

 ADO.NET プロバイダーによっては、<xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> コレクション内のパラメーターの順序が重要になる場合があります。 <xref:System.Data.OleDb?displayProperty=nameWithType> プロバイダーと <xref:System.Data.Odbc?displayProperty=nameWithType> プロバイダーは、パラメーター化された SQL クエリに含まれるパラメーターの順序に従って、コレクション内のパラメーターを関連付けます。 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールの既定の ADO.NET プロバイダーである <xref:System.Data.SqlClient?displayProperty=nameWithType> プロバイダーは、パラメーターの名前と SQL クエリのプレースホルダーエイリアスを照合することによって、コレクション内のパラメーターを関連付けます。 パラメーター化された SQL クエリとコマンドの詳細については、「 [SqlDataSource コントロールでのパラメーターの使用](https://docs.microsoft.com/previous-versions/aspnet/z72eefad(v=vs.100))」を参照してください。

> [!IMPORTANT]
>  値は、検証なしでパラメーターに挿入されます。これは、セキュリティ上の脅威となる可能性があります。 クエリを実行する前に、<xref:System.Web.UI.WebControls.SqlDataSource.Filtering> イベントを使用してパラメーター値を検証してください。 詳細については、「[スクリプトによる攻略の概要](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))」を参照してください。



## Examples
 次のコード例では、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールと単純な Web フォームページを使用してデータベースにデータを挿入する方法を示します。 データテーブル内の現在のデータが <xref:System.Web.UI.WebControls.DropDownList> コントロールに表示されます。 新しいレコードを追加するには、<xref:System.Web.UI.WebControls.TextBox> コントロールに値を入力し、**[挿入]** ボタンをクリックします。 **[挿入]** ボタンをクリックすると、指定した値がデータベースに挿入され、<xref:System.Web.UI.WebControls.DropDownList> コントロールが更新されます。

> [!IMPORTANT]
>  この例には、セキュリティ上の脅威となる可能性のあるユーザー入力を受け付けるテキストボックスが含まれています。検証なしでパラメーターに値が挿入されます。これは、潜在的なセキュリティ上の脅威でもあります。 クエリを実行する前に、<xref:System.Web.UI.WebControls.SqlDataSource.Inserting> イベントを使用してパラメーター値を検証してください。 詳細については、「[スクリプトによる攻略の概要](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))」を参照してください。

> [!NOTE]
>  この例では、データアクセスに対して宣言型構文を使用する方法を示します。 マークアップではなくコードを使用してデータにアクセスする方法の詳細については、「 [Visual Studio でのデータ](/visualstudio/data-tools/accessing-data-in-visual-studio)へのアクセス」を参照してください。

 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/CS/sql24cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/VB/sql24vb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Insert" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178472(v=vs.100)">ASP.NET ページのライフサイクルの概要</related>
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub LoadViewState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void LoadViewState(System::Object ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.LoadViewState : obj -&gt; unit" Usage="sqlDataSource.LoadViewState savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState"><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> の状態を表すオブジェクト。</param>
        <summary>永続化する必要がある <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> コントロールのプロパティの状態を読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.SqlDataSource.LoadViewState%2A> メソッドは、以前に保存した <xref:System.Web.UI.WebControls.SqlDataSource> コントロールのビューステートを読み込むために使用されます。

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
      </Docs>
    </Member>
    <Member MemberName="OldValuesParameterFormatString">
      <MemberSignature Language="C#" Value="public string OldValuesParameterFormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OldValuesParameterFormatString" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString" />
      <MemberSignature Language="VB.NET" Value="Public Property OldValuesParameterFormatString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OldValuesParameterFormatString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OldValuesParameterFormatString : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("{0}")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="M:System.Web.UI.WebControls.SqlDataSource.Delete" /> メソッドまたは <see cref="M:System.Web.UI.WebControls.SqlDataSource.Update" /> メソッドに渡される任意のパラメーター名に適用される書式指定文字列を取得または設定します。</summary>
        <value><paramref name="oldValues" /> メソッドまたは <see cref="M:System.Web.UI.WebControls.SqlDataSource.Delete" /> メソッドに渡される任意の <see cref="M:System.Web.UI.WebControls.SqlDataSource.Update" /> パラメーターの名前に適用される書式指定文字列を表す文字列。 既定値は "{0}" です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A> 書式指定文字列は、主キーにのみ適用されます。たとえば、関連付けられたデータバインドコントロールの `DataKeyNames` プロパティによって識別されるものや、<xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A> プロパティが <xref:System.Web.UI.ConflictOptions.CompareAllValues> 値に設定され、`oldValues` のセットが対応するデータメソッドに渡される削除および更新のシナリオなどです。 この場合、書式文字列は `oldValues` コレクション内の各パラメーター名に適用されます。

 <xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A> プロパティを変更する2つの一般的なシナリオを次に示します。

-   更新プログラムの古い値と新しい値を区別するため。 <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> プロパティが <xref:System.Web.UI.ConflictOptions.CompareAllValues> 値に設定されている場合、元の値と新しい値の両方のパラメーターが <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> コレクションに追加されます。 書式設定文字列がない場合、データフィールドごとに同じ名前の2つのパラメーターが作成されます。 元の値パラメーターの名前を変更することで、データを元のデータソースと比較して競合を検出し、キー値を比較することができます。

-   一部のビジュアルデザイナーでは、元の値とキーに対して特定の名前付けスキームが実装されています。

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="sqlDataSource.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary><see cref="E:System.Web.UI.Page.LoadComplete" /> コントロールを格納する <see cref="T:System.Web.UI.Page" /> コントロールに <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> イベント ハンドラーを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.SqlDataSource> オブジェクトによって追加されたイベントハンドラーによって、<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> と <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> の値が更新されます。 値が更新されると、<xref:System.Web.UI.IDataSource.DataSourceChanged> イベントが発生し、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールにバインドされているコントロールが再バインドされます。

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178472(v=vs.100)">ASP.NET ページのライフサイクルの概要</related>
      </Docs>
    </Member>
    <Member MemberName="ProviderName">
      <MemberSignature Language="C#" Value="public virtual string ProviderName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.ProviderName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ProviderName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ProviderName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProviderName : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.ProviderName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Web.UI.Design.WebControls.DataProviderNameConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Web.UI.Design.WebControls.DataProviderNameConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> コントロールが基になるデータ ソースに接続するために使用する .NET Framework データ プロバイダーの名前を取得または設定します。</summary>
        <value><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> が使用するデータ プロバイダーの名前。それ以外の場合、プロバイダーが設定されていないときは、Microsoft SQL Server の ADO.NET プロバイダー。 既定値は、Microsoft SQL Server の ADO.NET プロバイダーです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 .NET Framework には、次のデータプロバイダーが含まれています。

-   <xref:System.Data.SqlClient?displayProperty=nameWithType> プロバイダーは SQL Server の既定の .NET Framework Data Provider です。

-   <xref:System.Data.OleDb?displayProperty=nameWithType> プロバイダーは OLE DB の .NET Framework Data Provider です。

-   <xref:System.Data.Odbc?displayProperty=nameWithType> プロバイダーは、ODBC の .NET Framework Data Provider です。

-   <xref:System.Data.OracleClient?displayProperty=nameWithType> プロバイダーは、Oracle の .NET Framework Data Provider です。

 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> プロパティは、`MSDAORA`など、アンマネージ ADO.NET プロバイダーの名前には設定されません。 詳細については、「 [SqlDataSource コントロールを使用したデータの選択](https://docs.microsoft.com/previous-versions/aspnet/w1kdt8w2(v=vs.100))」を参照してください。

 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> プロパティを変更すると、<xref:System.Web.UI.IDataSource.DataSourceChanged> イベントが発生し、<xref:System.Web.UI.WebControls.SqlDataSource> にバインドされているすべてのコントロールが再バインドされます。

 使用可能なプロバイダーの一覧は、machine.config ファイルの `system.data` セクションの `DbProviderFactories` サブセクションで指定します。



## Examples
 このセクションには、2 つのコード例が含まれています。 最初のコードでは、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールの SQL Server に既定の .NET Framework Data Provider を使用して SQL Server データベースに接続する方法を示します。<xref:System.Data.SqlClient?displayProperty=nameWithType> 2番目のコード例では、odbc の .NET Framework Data Provider、<xref:System.Data.Odbc?displayProperty=nameWithType>を使用して ODBC データベースに接続する方法を示します。

 次のコード例は、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールの既定のデータプロバイダーである <xref:System.Data.SqlClient?displayProperty=nameWithType>を使用して SQL Server データベースに接続する方法を示しています。 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> プロパティが明示的に設定されていない場合は常に、既定のプロバイダーが使用されます。 <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> プロパティは、プロバイダー固有です。

 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_1sql/CS/sql1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_1sql/VB/sql1vb.aspx#1)]

 次のコード例は、前のコード例と機能的には同じですが、odbc の .NET Framework Data Provider (<xref:System.Data.Odbc?displayProperty=nameWithType>) を使用して ODBC データベースに接続する方法を示しています。 <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> プロパティは、ODBC データベースに接続するために使用される ODBC データソース名 (DSN) の名前に設定されます。

 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_1odbc#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_1odbc/CS/odbc1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_1odbc#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_1odbc/VB/odbc1vb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.ConnectionString" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178472(v=vs.100)">ASP.NET ページのライフサイクルの概要</related>
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function SaveViewState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Object ^ SaveViewState();" />
      <MemberSignature Language="F#" Value="override this.SaveViewState : unit -&gt; obj" Usage="sqlDataSource.SaveViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> コントロールの現在のビューステートを保存します。</summary>
        <returns><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> の保存された状態を格納しているオブジェクト。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.IStateManager.SaveViewState" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerable Select (System.Web.UI.DataSourceSelectArguments arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IEnumerable Select(class System.Web.UI.DataSourceSelectArguments arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />
      <MemberSignature Language="VB.NET" Value="Public Function Select (arguments As DataSourceSelectArguments) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerable ^ Select(System::Web::UI::DataSourceSelectArguments ^ arguments);" />
      <MemberSignature Language="F#" Value="member this.Select : System.Web.UI.DataSourceSelectArguments -&gt; System.Collections.IEnumerable" Usage="sqlDataSource.Select arguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Web.UI.DataSourceSelectArguments" />
      </Parameters>
      <Docs>
        <param name="arguments">基本的なデータ取得を超えたデータ操作を要求する場合に使用する <see cref="T:System.Web.UI.DataSourceSelectArguments" /> オブジェクト。</param>
        <summary><see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" /> SQL 文字列、および <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" /> コレクション内の任意のパラメーターを使用して、基になるデータベースからデータを取得します。</summary>
        <returns>データ行の <see cref="T:System.Collections.IEnumerable" /> リスト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドは、ページライフサイクルの <xref:System.Web.UI.Control.PreRender> フェーズで自動的に呼び出されます。 このメソッドは、<xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A> プロパティを通じて <xref:System.Web.UI.WebControls.SqlDataSource> コントロールにアタッチされているデータバインドコントロールによって呼び出されます。

 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> プロパティが <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> 値に設定されている場合、<xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> メソッドは <xref:System.Data.DataView> オブジェクトを返します。 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> プロパティが <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader> 値に設定されている場合、<xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> メソッドは <xref:System.Data.IDataReader> オブジェクトを返します。 データの読み取りが終了したら、<xref:System.Data.IDataReader> オブジェクトを閉じます。

 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 操作が実行される前に、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting%2A> メソッドが呼び出されて、<xref:System.Web.UI.WebControls.SqlDataSource.Selecting> イベントが発生します。 このイベントを処理して、パラメーターの値を調べたり、<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 操作の前に処理を実行したりすることができます。

 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 操作が完了すると、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelected%2A> メソッドが呼び出され、<xref:System.Web.UI.WebControls.SqlDataSource.Selected> イベントが発生します。 このイベントを処理して、戻り値とエラーコードを確認し、後処理を実行できます。

 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> プロパティが <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet?displayProperty=nameWithType> に設定されていて、キャッシュが有効になっている場合、<xref:System.Web.UI.WebControls.SqlDataSource> オブジェクトはからデータを取得し、<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 操作中にデータをキャッシュに保存します。 キャッシュは、<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> と <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> のプロパティの組み合わせによって指定されたキャッシュの動作に基づいて、作成、破棄、または更新されます。

> [!IMPORTANT]
>  Microsoft Windows 認証でクライアントの偽装を使用している場合は、最初のユーザーがデータにアクセスしたときにデータがキャッシュされます。 別のユーザーが同じデータを要求した場合、データはキャッシュから取得されます。 データへのユーザーのアクセスを確認するために、データベースに対して別の呼び出しを行っても、データは取得されません。 複数のユーザーがデータにアクセスすることを想定しており、各データの取得をデータベースのセキュリティ構成によって検証する場合は、キャッシュを使用しないでください。

 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> プロパティが <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet?displayProperty=nameWithType> に設定されていて、<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> プロパティが指定されている場合は、指定された <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> プロパティを使用してフィルター式が評価され、結果として得られるフィルターが <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 操作中にデータのリストに適用されます。

 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドは、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールに関連付けられている <xref:System.Web.UI.WebControls.SqlDataSourceView> オブジェクトの <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> メソッドにデリゲートします。 データ取得操作を実行するために、<xref:System.Web.UI.WebControls.SqlDataSourceView> は <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> テキストと関連付けられている <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> 値を使用して <xref:System.Data.Common.DbCommand> オブジェクトを作成し、基になるデータベースに対して <xref:System.Data.Common.DbCommand> を実行します。

> [!IMPORTANT]
>  値は、検証なしでパラメーターに挿入されます。これは、セキュリティ上の脅威となる可能性があります。 クエリを実行する前に、<xref:System.Web.UI.WebControls.SqlDataSource.Filtering> イベントを使用してパラメーター値を検証してください。 詳細については、「[スクリプトによる攻略の概要](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))」を参照してください。



## Examples
 次の例は、プログラムで <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドを呼び出し、クエリの結果に基づいて値を設定する方法を示しています。 次の例は、Web コントロールの宣言型コードを示しています。

 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource.Select#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource.Select/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource.Select#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource.Select/VB/Default.aspx#1)]

 次の例は、プログラムで <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドを呼び出す方法を示しています。 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールは整数を返します。 整数の値は、<xref:System.Web.UI.WebControls.Label> コントロールのテキストを設定し、<xref:System.Web.UI.WebControls.HyperLink> コントロールを表示するかどうかを決定するために使用されます。

 [!code-csharp[System.Web.UI.WebControls.SqlDataSource.Select#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource.Select/CS/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource.Select#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource.Select/VB/Default.aspx.vb#2)]

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> オブジェクトが、基になるデータ ソースとの接続を確立できません。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178472(v=vs.100)">ASP.NET ページのライフサイクルの概要</related>
      </Docs>
    </Member>
    <Member MemberName="SelectCommand">
      <MemberSignature Language="C#" Value="public string SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCommand As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SelectCommand { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectCommand : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>基になるデータベースからデータを取得するために <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> コントロールが使用する SQL 文字列を取得または設定します。</summary>
        <value><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> でデータを取得する際に使用する SQL 文字列またはストアド プロシージャ名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> プロパティは、SQL クエリまたはストアドプロシージャの名前を表し、<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドによって SQL Server データベースからデータを取得するために使用されます。 Select コマンドでアスタリスク (*) を使用してすべての列を選択し、自動コード生成を使用して更新操作または削除操作を実行する場合は、列名にスペースが含まれていないことを確認してください。

 データベース製品ごとに使用する SQL が異なるため、SQL 文字列の構文は、現在使用している ADO.NET プロバイダーによって決まります。これは、<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> プロパティから識別できます。 SQL 文字列がパラメーター化されたクエリまたはコメントである場合は、パラメーターのプレースホルダーも現在使用している ADO.NET プロバイダーによって決まります。 たとえば、プロバイダーが <xref:System.Web.UI.WebControls.SqlDataSource> クラスの既定のプロバイダーである <xref:System.Data.SqlClient?displayProperty=nameWithType>の場合、パラメーターのプレースホルダーは `'@parameterName'`ます。 ただし、プロバイダーが <xref:System.Data.Odbc?displayProperty=nameWithType> または <xref:System.Data.OleDb?displayProperty=nameWithType>に設定されている場合、パラメーターのプレースホルダーは `'?'`ます。 パラメーター化された SQL クエリとコマンドの詳細については、「 [SqlDataSource コントロールでのパラメーターの使用](https://docs.microsoft.com/previous-versions/aspnet/z72eefad(v=vs.100))」を参照してください。

 データソースがストアドプロシージャをサポートしている場合は、<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> プロパティに SQL 文字列またはストアドプロシージャの名前を指定できます。

 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> プロパティは、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールに関連付けられている <xref:System.Web.UI.WebControls.SqlDataSourceView> オブジェクトの <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A> プロパティに委任されます。

> [!IMPORTANT]
>  セキュリティ上の理由から、[<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>] プロパティは [ビューステート] として格納されていません。 クライアントでビューステートの内容をデコードできるため、データベース構造に関する機密情報をビューステートに格納すると、情報漏えいの脆弱性が生じる可能性があります。

> [!IMPORTANT]
>  値は、検証なしでパラメーターに挿入されます。これは、セキュリティ上の脅威となる可能性があります。 クエリを実行する前に、<xref:System.Web.UI.WebControls.SqlDataSource.Filtering> イベントを使用してパラメーター値を検証してください。 詳細については、「[スクリプトによる攻略の概要](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))」を参照してください。



## Examples
 このセクションには、2 つのコード例が含まれています。 最初のコード例では、<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> テキストを基本的な SQL クエリに設定し、ODBC 準拠のデータベースからデータを取得して <xref:System.Web.UI.WebControls.GridView> コントロールに表示する方法を示します。 2番目のコード例では、<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> テキストをストアドプロシージャの名前に設定し、<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A> プロパティを <xref:System.Web.UI.WebControls.SqlDataSourceCommandType.StoredProcedure> 値に設定して Microsoft SQL Server データベースからデータを取得し、それを <xref:System.Web.UI.WebControls.DropDownList> コントロールに表示する方法を示します。

 どちらの例でも、<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドを明示的に呼び出す必要はありません。これは、<xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A> プロパティを介してデータソースコントロールにアタッチされているデータバインドコントロールが <xref:System.Web.UI.Control.PreRender> フェーズ中に <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドを自動的に呼び出すためです。

 次のコード例では、<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> テキストを基本的な SQL クエリに設定し、ODBC 準拠のデータベースからデータを取得して <xref:System.Web.UI.WebControls.GridView> コントロールに表示する方法を示します。

 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_4odbc#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_4odbc/CS/odbc4cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_4odbc#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_4odbc/VB/odbc4vb.aspx#1)]

 次のコード例では、<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> テキストをストアドプロシージャの名前に設定し、<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A> プロパティを <xref:System.Web.UI.WebControls.SqlDataSourceCommandType.StoredProcedure> 値に設定して SQL Server データベースからデータを取得し、それを <xref:System.Web.UI.WebControls.DropDownList> コントロールに表示する方法を示します。 データソースがストアドプロシージャをサポートしている場合は、<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> プロパティに SQL クエリまたはストアドプロシージャの名前を指定できます。

 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/CS/sql14cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/VB/sql14vb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/z72eefad(v=vs.100)">SqlDataSource コントロールでのパラメーターの使用</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178472(v=vs.100)">ASP.NET ページのライフサイクルの概要</related>
      </Docs>
    </Member>
    <Member MemberName="SelectCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType SelectCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType SelectCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.SelectCommandType" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCommandType As SqlDataSourceCommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceCommandType SelectCommandType { System::Web::UI::WebControls::SqlDataSourceCommandType get(); void set(System::Web::UI::WebControls::SqlDataSourceCommandType value); };" />
      <MemberSignature Language="F#" Value="member this.SelectCommandType : System.Web.UI.WebControls.SqlDataSourceCommandType with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.SelectCommandType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" /> プロパティのテキストが SQL クエリまたは格納されたプロシージャの名前のいずれであるかを示す値を取得または設定します。</summary>
        <value><see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 値のいずれか 1 つです。 既定値は、<see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A> プロパティは、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールに関連付けられている <xref:System.Web.UI.WebControls.SqlDataSourceView> オブジェクトの <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommandType%2A> プロパティに委任されます。



## Examples
 次のコード例では、Microsoft SQL Server データベースからデータを取得して <xref:System.Web.UI.WebControls.DropDownList> コントロールに表示するために、<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> テキストをストアドプロシージャの名前に設定し、<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A> プロパティを <xref:System.Web.UI.WebControls.SqlDataSourceCommandType.StoredProcedure> 値に設定する方法を示します。

 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/CS/sql14cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/VB/sql14vb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Selected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Selected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selected As SqlDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceStatusEventHandler ^ Selected;" />
      <MemberSignature Language="F#" Value="member this.Selected : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " Usage="member this.Selected : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ取得操作が完了したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 データ取得操作の完了後に出力パラメーターの値を確認するには、<xref:System.Web.UI.WebControls.SqlDataSource.Selected> イベントを処理します。 出力パラメーターは、イベントに関連付けられている <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs> オブジェクトから使用できます。

 イベントを処理する方法の詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。

 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Selecting" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelected(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178472(v=vs.100)">ASP.NET ページのライフサイクルの概要</related>
      </Docs>
    </Member>
    <Member MemberName="Selecting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler Selecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler Selecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Selecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selecting As SqlDataSourceSelectingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceSelectingEventHandler ^ Selecting;" />
      <MemberSignature Language="F#" Value="member this.Selecting : System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler " Usage="member this.Selecting : System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ取得操作の前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.SqlDataSource.Selecting> イベントを処理して、アプリケーション固有の追加の初期化操作を実行したり、パラメーターの値を検証したり、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールで選択操作を実行する前にパラメーター値を変更したりします。 Select 引数は、イベントに関連付けられている <xref:System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs> オブジェクトから使用できます。

 イベントを処理する方法の詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。

 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Selected" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting(System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178472(v=vs.100)">ASP.NET ページのライフサイクルの概要</related>
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection SelectParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ SelectParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" /> コントロールに関連付けられた <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> オブジェクトから、<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> プロパティで使用されるパラメーターを格納するパラメーター コレクションを取得します。</summary>
        <value><see cref="T:System.Web.UI.WebControls.ParameterCollection" /> プロパティによって使用されるパラメーターを格納している <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> プロパティにパラメーター化された SQL クエリが含まれている場合、<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> コレクションには、SQL 文字列のパラメータープレースホルダーに対応する <xref:System.Web.UI.WebControls.Parameter> オブジェクトが含まれます。

 ADO.NET プロバイダーによっては、<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> コレクション内のパラメーターの順序が重要になる場合があります。 <xref:System.Data.OleDb?displayProperty=nameWithType> プロバイダーと <xref:System.Data.Odbc?displayProperty=nameWithType> プロバイダーは、パラメーター化された SQL クエリに含まれるパラメーターの順序に従って、コレクション内のパラメーターを関連付けます。 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールの既定の ADO.NET プロバイダーである <xref:System.Data.SqlClient?displayProperty=nameWithType> プロバイダーは、パラメーターの名前と SQL クエリのプレースホルダーエイリアスを照合することによって、コレクション内のパラメーターを関連付けます。 パラメーター化された SQL クエリとコマンドの詳細については、「 [SqlDataSource コントロールでのパラメーターの使用](https://docs.microsoft.com/previous-versions/aspnet/z72eefad(v=vs.100))」を参照してください。

 <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> プロパティは、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールに関連付けられている <xref:System.Web.UI.WebControls.SqlDataSourceView> オブジェクトに含まれる <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters%2A> プロパティを取得します。

> [!IMPORTANT]
>  値は、検証なしでパラメーターに挿入されます。これは、セキュリティ上の脅威となる可能性があります。 クエリを実行する前に、<xref:System.Web.UI.WebControls.SqlDataSource.Selecting> イベントを使用してパラメーター値を検証してください。 詳細については、「[スクリプトによる攻略の概要](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))」を参照してください。



## Examples
 次のコード例では、<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> プロパティを SQL クエリに設定することによって、Microsoft SQL Server の Northwind データベースからデータを取得する方法を示します。 SQL クエリがパラメーター化され、<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> プロパティのプレースホルダーが、<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> コレクションに追加された <xref:System.Web.UI.WebControls.ControlParameter> オブジェクトと照合されます。 <xref:System.Web.UI.WebControls.ControlParameter> にバインドされている <xref:System.Web.UI.WebControls.DropDownList> コントロールは、<xref:System.Web.UI.WebControls.ListBox> コントロールに表示される内容のフィルターとして機能します。

 使用できるその他の種類のパラメーターの詳細については、「<xref:System.Web.UI.WebControls.Parameter> クラスの概要」を参照してください。

> [!NOTE]
>  パラメーターは WHERE 句で使用されるため、コード例での <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> プロパティの使用は、<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> プロパティと <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> プロパティの使用と機能的には同じです。

 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_2sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_2sql/CS/sql2cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_2sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_2sql/VB/sql2vb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178472(v=vs.100)">ASP.NET ページのライフサイクルの概要</related>
      </Docs>
    </Member>
    <Member MemberName="SortParameterName">
      <MemberSignature Language="C#" Value="public string SortParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SortParameterName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.SortParameterName" />
      <MemberSignature Language="VB.NET" Value="Public Property SortParameterName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SortParameterName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SortParameterName : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.SortParameterName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ストアド プロシージャを使用してデータ取得を実行する際、取得したデータの並べ替えに使用するストアド プロシージャ パラメーターの名前を取得または設定します。</summary>
        <value>ストアド プロシージャを使用してデータ取得を実行する際、取得したデータの並べ替えに使用するストアド プロシージャ パラメーターの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A> プロパティは、<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A> プロパティに含まれる SQL コマンドがストアドプロシージャの名前である場合にのみ評価されます。 この場合、<xref:System.Web.UI.WebControls.SqlDataSource.SortParameterName%2A> プロパティが設定されていると、ストアドプロシージャの結果の並べ替えに使用されるパラメーターの名前が格納されます。

 <xref:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix%2A> プロパティが設定されている場合は、<xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A> プロパティの前に付加されます。

 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
      </Docs>
    </Member>
    <Member MemberName="SqlCacheDependency">
      <MemberSignature Language="C#" Value="public virtual string SqlCacheDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SqlCacheDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SqlCacheDependency As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SqlCacheDependency { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SqlCacheDependency : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Microsoft SQL Server キャッシュの依存関係で使用するデータベースとテーブルを示す、セミコロンで区切られた文字列を取得または設定します。</summary>
        <value>SQL Server キャッシュの依存関係で使用するデータベースとテーブルを示す文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールでは、データキャッシュの <xref:System.Web.Caching.SqlCacheDependency> オブジェクトに基づくオプションの有効期限ポリシーがサポートされています (サービスをデータベースサーバー用に構成する必要があります)。

 <xref:System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency%2A> 文字列は、`@ Page` ディレクティブによって使用されるのと同じ形式に従ってデータベースとテーブルを識別します。ここで、文字列の最初の部分は Microsoft SQL Server データベースへの接続文字列、末尾にコロンの区切り文字、最後にデータベーステーブルの名前 (`"connectionstring1:table1"`など) を指定します。 <xref:System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency%2A> プロパティが複数のテーブルに依存している場合、接続文字列とテーブル名のペアはセミコロンで区切られます (たとえば、`"connectionstring1:table1";connectionstring2:table2"`)。

> [!IMPORTANT]
>  Microsoft Windows 認証でクライアントの偽装を使用している場合は、最初のユーザーがデータにアクセスしたときにデータがキャッシュされます。 別のユーザーが同じデータを要求した場合、データはキャッシュから取得されます。 データへのユーザーのアクセスを確認するために、データベースに対して別の呼び出しを行っても、データは取得されません。 複数のユーザーがデータにアクセスすることが予想される場合に、各データの取得をデータベースのセキュリティ構成によって検証する必要がある場合は、キャッシュを使用しないでください。



## Examples
 次のコード例は、SQL Server キャッシュ依存関係を作成し、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールの <xref:System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency%2A> プロパティを設定する方法を示しています。 この例では、データベースは120秒ごとにポーリングされます。 Northwind Traders Employees テーブル内のデータがその時間内に変更された場合、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールによってキャッシュされ、<xref:System.Web.UI.WebControls.GridView> コントロールによって表示されるデータは、次回データベースがポーリングされたときに <xref:System.Web.UI.WebControls.SqlDataSource> コントロールによって更新されます。

 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_23sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_23sql/CS/sql23cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_23sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_23sql/VB/sql23vb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.SqlCacheDependency" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void TrackViewState();" />
      <MemberSignature Language="F#" Value="override this.TrackViewState : unit -&gt; unit" Usage="sqlDataSource.TrackViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> コントロールのビューステートの変更を追跡し、変更がコントロールの <see cref="T:System.Web.UI.StateBag" /> オブジェクトに格納されるようにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.SqlDataSource.TrackViewState%2A> メソッドは、コントロールのビューステートの一部として、コントロールの変更の追跡と保存を開始する開始点をマークするためにオーバーライドされます。

 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.IStateManager.TrackViewState" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.Update" />
      <MemberSignature Language="VB.NET" Value="Public Function Update () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update();" />
      <MemberSignature Language="F#" Value="member this.Update : unit -&gt; int" Usage="sqlDataSource.Update " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" /> SQL 文字列と <see cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" /> コレクション内にある任意のパラメーターを使用して、更新操作を実行します。</summary>
        <returns>基になるデータベースで更新された行数を表す値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> メソッドは、データが変更された場合にポストバック中に、<xref:System.Web.UI.WebControls.GridView>、<xref:System.Web.UI.WebControls.DetailsView>、および <xref:System.Web.UI.WebControls.FormView> コントロールによって自動的に呼び出されます。 他のコントロールで変更されたデータの場合、<xref:System.Windows.Forms.Form.Load> イベント中にポストバック時に <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> メソッドを明示的に呼び出すことができます。

 <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> 操作が実行される前に、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating%2A> メソッドが呼び出されて、<xref:System.Web.UI.WebControls.SqlDataSource.Updating> イベントが発生します。 このイベントを処理して、パラメーターの値を調べたり、<xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> 操作の前に前処理を実行したりすることができます。

 <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> 操作が完了すると、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated%2A> メソッドが呼び出され、<xref:System.Web.UI.WebControls.SqlDataSource.Updated> イベントが発生します。 このイベントを処理して、戻り値とエラーコードを確認し、後処理を実行できます。

 <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> メソッドは、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールに関連付けられている <xref:System.Web.UI.WebControls.SqlDataSourceView> オブジェクトの <xref:System.Web.UI.WebControls.SqlDataSourceView.Update%2A> メソッドにデリゲートします。 更新操作を実行するために、<xref:System.Web.UI.WebControls.SqlDataSourceView> は <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> テキストと関連付けられている <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> プロパティを使用して <xref:System.Data.Common.DbCommand> オブジェクトを作成し、基になるデータベースに対して <xref:System.Data.Common.DbCommand> オブジェクトを実行します。

> [!IMPORTANT]
>  値は、検証なしでパラメーターに挿入されます。これは、セキュリティ上の脅威となる可能性があります。 クエリを実行する前に、<xref:System.Web.UI.WebControls.SqlDataSource.Updating> イベントを使用してパラメーター値を検証してください。 詳細については、「[スクリプトによる攻略の概要](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))」を参照してください。



## Examples
 このセクションには、2 つのコード例が含まれています。 最初のコード例では、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールを使用して <xref:System.Web.UI.WebControls.DropDownList> コントロールにデータを表示し、**[送信]** ボタンがクリックされたときにデータを更新する方法を示します。 2番目のコード例では、<xref:System.Web.UI.WebControls.DropDownList> コントロールの Microsoft SQL Server データベースから取得されたデータを表示し、<xref:System.Web.UI.WebControls.TextBox> コントロールを使用してレコードを更新する方法を示します。

 次のコード例では、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールを使用して <xref:System.Web.UI.WebControls.DropDownList> コントロールにデータを表示し、**[送信]** ボタンがクリックされたときにデータを更新する方法を示します。 パラメーター化された SQL ステートメントを使用して <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> プロパティが設定され、<xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> コレクションに2つの <xref:System.Web.UI.WebControls.ControlParameter> パラメーターが追加されます。 **[送信]** ボタンがクリックされると、<xref:System.Web.UI.WebControls.Button.OnClick%2A> イベントが処理され、<xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> メソッドが明示的に呼び出されます。

 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/CS/sql8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/VB/sql8vb.aspx#1)]

 次のコード例は、<xref:System.Web.UI.WebControls.DropDownList> コントロールの SQL Server データベースから取得されたデータを表示し、<xref:System.Web.UI.WebControls.TextBox> コントロールを使用してレコードを更新する方法を示しています。 この例では、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールを使用してデータを更新するときに、<xref:System.Data.Common.DbTransaction> オブジェクトを使用してトランザクションコンテキストを追加する方法を示します。

 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/CS/sql9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/VB/sql9vb.aspx#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> が、基になるデータ ソースとの接続を確立できません。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178472(v=vs.100)">ASP.NET ページのライフサイクルの概要</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateCommand">
      <MemberSignature Language="C#" Value="public string UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCommand As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UpdateCommand { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateCommand : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.UpdateCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>基になるデータベース内のデータを更新するために <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> コントロールが使用する SQL 文字列を取得または設定します。</summary>
        <value>データを更新するために <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> が使用する SQL 文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> は、SQL クエリまたはストアドプロシージャの名前を表し、<xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> メソッドによって使用されます。

 データベース製品ごとに使用する SQL が異なるため、SQL 文字列の構文は、現在使用している ADO.NET プロバイダーによって決まります。これは、<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> プロパティから識別できます。 SQL 文字列がパラメーター化されたクエリまたはコメントである場合は、パラメーターのプレースホルダーも現在使用している ADO.NET プロバイダーによって決まります。 たとえば、プロバイダーが <xref:System.Web.UI.WebControls.SqlDataSource> クラスの既定のプロバイダーである <xref:System.Data.SqlClient?displayProperty=nameWithType>の場合、パラメーターのプレースホルダーは `'@parameterName'`ます。 ただし、プロバイダーが <xref:System.Data.Odbc?displayProperty=nameWithType> または <xref:System.Data.OleDb?displayProperty=nameWithType>に設定されている場合、パラメーターのプレースホルダーは `'?'`ます。 パラメーター化された SQL クエリとコマンドの詳細については、「 [SqlDataSource コントロールでのパラメーターの使用](https://docs.microsoft.com/previous-versions/aspnet/z72eefad(v=vs.100))」を参照してください。

 データソースがストアドプロシージャをサポートしている場合は、<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> プロパティに SQL 文字列またはストアドプロシージャの名前を指定できます。

 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> プロパティは、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールに関連付けられている <xref:System.Web.UI.WebControls.SqlDataSourceView> オブジェクトの <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A> プロパティに委任されます。

> [!IMPORTANT]
>  セキュリティ上の理由から、[<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>] プロパティは [ビューステート] として格納されていません。 クライアントでビューステートの内容をデコードできるため、データベース構造に関する機密情報をビューステートに格納すると、情報漏えいの脆弱性が生じる可能性があります。

> [!IMPORTANT]
>  値は、検証なしでパラメーターに挿入されます。これは、セキュリティ上の脅威となる可能性があります。 クエリを実行する前に、<xref:System.Web.UI.WebControls.SqlDataSource.Filtering> イベントを使用してパラメーター値を検証してください。 詳細については、「[スクリプトによる攻略の概要](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))」を参照してください。



## Examples
 このセクションには、2 つのコード例が含まれています。 最初のコード例では、<xref:System.Web.UI.WebControls.GridView> コントロールを使用して、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールの <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> プロパティを設定し、Microsoft SQL Server データベースのデータを更新する方法を示します。 2番目のコード例では、<xref:System.Web.UI.WebControls.GridView> コントロールを使用して ODBC データベースのデータを更新する方法を示します。

 次のコード例では、<xref:System.Web.UI.WebControls.GridView> コントロールを使用して、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールの <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> プロパティを設定し、SQL Server データベースのデータを更新する方法を示します。 <xref:System.Web.UI.WebControls.GridView> は、<xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> コレクションを自動的に作成し、<xref:System.Web.UI.WebControls.BoundField> オブジェクトからパラメーターを推論し、編集可能な <xref:System.Web.UI.WebControls.GridView> の**更新**リンクが選択されている場合に <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> メソッドを呼び出します。 この例には、後処理も含まれています。レコードが更新されると、通知電子メールメッセージが送信されます。

 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_7sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7sql/CS/sql7cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_7sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7sql/VB/sql7vb.aspx#1)]

 次のコード例は、前のコード例と機能的には同じですが、<xref:System.Web.UI.WebControls.GridView> コントロールを使用して ODBC データベースのデータを更新する方法を示しています。 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> が ODBC の ADO.NET provider、<xref:System.Data.Odbc?displayProperty=nameWithType>、および <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> プロパティが ODBC データソース名 (DSN) の名前に設定されています。

 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/CS/odbc7cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/VB/odbc7vb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Update" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178472(v=vs.100)">ASP.NET ページのライフサイクルの概要</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType UpdateCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType UpdateCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommandType" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCommandType As SqlDataSourceCommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceCommandType UpdateCommandType { System::Web::UI::WebControls::SqlDataSourceCommandType get(); void set(System::Web::UI::WebControls::SqlDataSourceCommandType value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateCommandType : System.Web.UI.WebControls.SqlDataSourceCommandType with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.UpdateCommandType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" /> プロパティのテキストが SQL ステートメントまたは格納されたプロシージャの名前のいずれであるかを示す値を取得または設定します。</summary>
        <value><see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 値のいずれか 1 つです。 既定値は、<see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommandType%2A> プロパティは、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールに関連付けられている <xref:System.Web.UI.WebControls.SqlDataSourceView> オブジェクトの <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommandType%2A> プロパティに委任されます。

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Updated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Updated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updated As SqlDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceStatusEventHandler ^ Updated;" />
      <MemberSignature Language="F#" Value="member this.Updated : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " Usage="member this.Updated : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>更新操作が完了したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 更新操作が完了した後の出力パラメーターの値を確認するには、<xref:System.Web.UI.WebControls.SqlDataSource.Updated> イベントを処理します。 出力パラメーターは、イベントに関連付けられている <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs> オブジェクトから使用できます。

 イベントを処理する方法の詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。



## Examples
 次のコード例は、<xref:System.Web.UI.WebControls.GridView> コントロールの ODBC データベースから取得されたデータを表示および更新する方法を示しています。 レコードが正常に更新されると、<xref:System.Web.UI.WebControls.SqlDataSource.Updated> イベントは、電子メール通知が送信される後処理手順を実行するために、イベントハンドラーによって処理されます。

 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/CS/odbc7cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/VB/odbc7vb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Updating" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Update" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178472(v=vs.100)">ASP.NET ページのライフサイクルの概要</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection UpdateParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UpdateParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ UpdateParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UpdateParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" /> コントロールに関連付けられた <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> コントロールから、<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> プロパティで使用されるパラメーターを格納するパラメーター コレクションを取得します。</summary>
        <value><see cref="T:System.Web.UI.WebControls.ParameterCollection" /> プロパティによって使用されるパラメーターを格納している <see cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> プロパティにパラメーター化された SQL クエリが含まれている場合、<xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> コレクションには、SQL 文字列のパラメータープレースホルダーに対応する <xref:System.Web.UI.WebControls.Parameter> オブジェクトが含まれます。

 パラメーター名は、<xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A> プロパティの影響を受ける可能性があります。特に、データバインドコントロールの `DataKeyNames` プロパティを使用して指定されたキーなどの主キーを識別する場合や、<xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> プロパティが <xref:System.Web.UI.ConflictOptions.CompareAllValues> 値に設定され、`oldValues` のセットが対応するデータメソッドに渡される場合の削除と更新のシナリオで発生します。 この場合、書式文字列は `oldValues` コレクション内の各パラメーター名に適用されます。

 ADO.NET プロバイダーによっては、<xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> コレクション内のパラメーターの順序が重要になる場合があります。 <xref:System.Data.OleDb?displayProperty=nameWithType> プロバイダーと <xref:System.Data.Odbc?displayProperty=nameWithType> プロバイダーは、パラメーター化された SQL クエリに含まれるパラメーターの順序に従って、コレクション内のパラメーターを関連付けます。 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールの既定の ADO.NET プロバイダーである <xref:System.Data.SqlClient?displayProperty=nameWithType> プロバイダーは、パラメーターの名前と SQL クエリのプレースホルダーエイリアスを照合することによって、コレクション内のパラメーターを関連付けます。 パラメーター化された SQL クエリとコマンドの詳細については、「 [SqlDataSource コントロールでのパラメーターの使用](https://docs.microsoft.com/previous-versions/aspnet/z72eefad(v=vs.100))」を参照してください。

 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> プロパティは、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールに関連付けられている <xref:System.Web.UI.WebControls.SqlDataSourceView> オブジェクトに含まれる <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters%2A> プロパティを取得します。

> [!IMPORTANT]
>  値は、検証なしでパラメーターに挿入されます。これは、セキュリティ上の脅威となる可能性があります。 クエリを実行する前に、<xref:System.Web.UI.WebControls.SqlDataSource.Filtering> イベントを使用してパラメーター値を検証してください。 詳細については、「[スクリプトによる攻略の概要](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))」を参照してください。



## Examples
 次のコード例では、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールを使用して <xref:System.Web.UI.WebControls.DropDownList> コントロールにデータを表示し、**[送信]** ボタンがクリックされたときにデータを更新する方法を示します。 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> には、パラメーター化された SQL ステートメントを使用して設定し、<xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> コレクションに2つの <xref:System.Web.UI.WebControls.ControlParameter> パラメーターを追加します。 **[送信]** ボタンがクリックされると、<xref:System.Web.UI.WebControls.Button.OnClick%2A> イベントが処理され、<xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> メソッドが明示的に呼び出されます。

> [!IMPORTANT]
>  この例には、セキュリティ上の脅威となる可能性のあるユーザー入力を受け付けるテキストボックスが含まれています。検証なしでパラメーターに値が挿入されます。これは、潜在的なセキュリティ上の脅威でもあります。 クエリを実行する前に、<xref:System.Web.UI.WebControls.SqlDataSource.Inserting> イベントを使用してパラメーター値を検証してください。 詳細については、「[スクリプトによる攻略の概要](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))」を参照してください。

 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/CS/sql8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/VB/sql8vb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Update" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178472(v=vs.100)">ASP.NET ページのライフサイクルの概要</related>
      </Docs>
    </Member>
    <Member MemberName="Updating">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Updating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Updating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Updating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updating As SqlDataSourceCommandEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceCommandEventHandler ^ Updating;" />
      <MemberSignature Language="F#" Value="member this.Updating : System.Web.UI.WebControls.SqlDataSourceCommandEventHandler " Usage="member this.Updating : System.Web.UI.WebControls.SqlDataSourceCommandEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>更新操作の前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.SqlDataSource.Updating> イベントを処理して、アプリケーション固有の追加の初期化操作を実行したり、パラメーターの値を検証したり、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールが更新操作を実行する前にパラメーター値を変更したりします。 イベントハンドラーデリゲートが呼び出されても、基になるデータソースへの接続はまだ開いていません。 したがって、<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> オブジェクトによって公開されている <xref:System.Data.Common.DbCommand> オブジェクトで <xref:System.Data.Common.DbCommand.Cancel%2A> メソッドを呼び出すことによって、<xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> データベース操作を直接取り消すことはできません。 ただし、<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> の [<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>] プロパティを `true`に設定して、データベース操作を取り消すことができます。

 イベントを処理する方法の詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。

> [!IMPORTANT]
>  値は、検証なしでパラメーターに挿入されます。これは、セキュリティ上の脅威となる可能性があります。 クエリを実行する前に、<xref:System.Web.UI.WebControls.SqlDataSource.Updating> イベントを使用してパラメーター値を検証してください。 詳細については、「[スクリプトによる攻略の概要](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))」を参照してください。



## Examples
 次のコード例は、<xref:System.Web.UI.WebControls.DropDownList> コントロールの Microsoft SQL Server データベースから取得されたデータを表示し、<xref:System.Web.UI.WebControls.TextBox> コントロールを使用してレコードを更新する方法を示しています。 この例では、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールを使用してデータを更新するときに、<xref:System.Data.Common.DbTransaction> オブジェクトを使用してトランザクションコンテキストを追加する方法を示します。

 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/CS/sql9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/VB/sql9vb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Updated" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Update" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">データ ソース Web サーバー コントロール</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web サーバーコントロールの概要</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178472(v=vs.100)">ASP.NET ページのライフサイクルの概要</related>
      </Docs>
    </Member>
  </Members>
</Type>
