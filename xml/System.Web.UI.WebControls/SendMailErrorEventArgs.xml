<Type Name="SendMailErrorEventArgs" FullName="System.Web.UI.WebControls.SendMailErrorEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="67b6ada54aa22017fa7c4aa9f6e0d8df83ac6f79" /><Meta Name="ms.sourcegitcommit" Value="355778a8154b2dab885accd76cc040b19ea80e32" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/03/2020" /><Meta Name="ms.locfileid" Value="78243692" /></Metadata><TypeSignature Language="C#" Value="public class SendMailErrorEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SendMailErrorEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.SendMailErrorEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class SendMailErrorEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class SendMailErrorEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type SendMailErrorEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="T:System.Web.UI.WebControls.ChangePassword" />、<see cref="T:System.Web.UI.WebControls.CreateUserWizard" />、<see cref="T:System.Web.UI.WebControls.PasswordRecovery" /> など各コントロールの <see langword="SendMailError" /> イベントのデータを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> オブジェクトには、<xref:System.Web.UI.WebControls.ChangePassword> コントロールまたは <xref:System.Web.UI.WebControls.CreateUserWizard> コントロールが電子メールメッセージを送信できない場合に SMTP メールプロバイダーによって発生するエラーメッセージが含まれています。 このような場合は、<xref:System.Web.UI.WebControls.SendMailErrorEventArgs> オブジェクトが <xref:System.Web.UI.WebControls.SendMailErrorEventHandler>に送信されます。  
  
 イベントを処理するための <xref:System.Web.UI.WebControls.SendMailErrorEventHandler> デリゲートを作成します。 イベントを処理すると、例外が発生した場合でも Web アプリケーションを引き続き実行できます。 これは、電子メールメッセージを送信することが重要ではない場合に便利です。 たとえば、ユーザーがマルチステップウィザードを使用して作業しているときに例外が発生した場合は、エラーをログに記録し、情報メッセージをユーザーに表示し、ユーザーがウィザードを完了できるようにすると便利です。  
  
 <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Exception%2A> プロパティを調べて、例外の実際の原因を特定します。 例外の最も一般的な理由は、マシン構成ファイルの[&lt;smtp&gt; 要素 (ネットワーク設定)](~/docs/framework/configure-apps/file-schema/network/smtp-element-network-settings.md)の構成エラーです。 このようなエラーは、通常、アプリケーションの開発とデバッグ中に検出されますが、メールサーバーは運用環境では予期せず失敗する可能性があり、そのような状況でアプリケーション全体を失敗させるかどうかを判断する必要があります。 それ以外の場合は、イベントを処理することで、アプリケーションを続行できます。  
  
 例外が処理されたことを通知するには、<xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> プロパティを `true` に設定する必要があります。それ以外の場合は、例外が再スローされ、元の呼び出し履歴とエラーメッセージが含まれます。  
  
 <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> イベントのイベントハンドラーを作成しない場合、またはイベントハンドラーを作成し、<xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> プロパティを `false`に設定したままにした場合、電子メールメッセージの送信時にエラーが発生すると Web アプリケーションは実行を停止し、ASP.NET にはエラーメッセージが表示されます。  
  
 <xref:System.Web.UI.WebControls.ChangePassword.OnSendMailError%2A> メソッドでは、<xref:System.Web.UI.WebControls.SendMailErrorEventHandler>によって実行されるのではなく、派生クラスでイベントを処理することもできます。 これは、<xref:System.Web.UI.WebControls.ChangePassword> または <xref:System.Web.UI.WebControls.CreateUserWizard>から派生したクラスでイベントを処理する場合に推奨される手法です。  
  
 イベントの処理の詳細については、「 [ASP.NET Web Forms Pages のサーバーイベント処理](https://docs.microsoft.com/previous-versions/aspnet/xax2hw3x(v=vs.100))」を参照してください。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Web.UI.WebControls.ChangePassword> Web コントロールを使用し、SendMailError という名前の <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> イベントのイベントハンドラーを含む ASP.NET ページを示しています。 このコード例では、ASP.NET Web サイトが ASP.NET メンバーシップとフォーム認証を使用するように構成されていること、および名前とパスワードがわかっているユーザーが作成されていることを前提としています。 詳細については、「[方法: 単純なフォーム認証を実装する](https://docs.microsoft.com/previous-versions/aspnet/xdt4thhy(v=vs.100))」を参照してください。  
  
 パスワードの変更が成功した場合、`SendingMail` イベントハンドラーのコードは、ユーザーに電子メールメッセージを送信して変更を確認しようとします。 このコード例を機能させるには、サーバーで SMTP が既に構成されている必要があります。 SMTP サーバーを構成する方法については、「[方法: IIS 6.0 で Smtp 仮想サーバーをインストールおよび構成](https://docs.microsoft.com/previous-versions/aspnet/8b83ac7t(v=vs.100))する」を参照してください。 この例では、SMTP サーバーを構成する必要はありません。この例は、電子メールメッセージの送信に失敗したかをテストするために構築されています。  
  
 メールサーバーが正しく構成されていない場合、またはその他のエラーが発生し、電子メールメッセージを送信できない場合は、`SendMailError` 関数が呼び出されます。 ユーザーにメッセージが表示されます。 さらに、MySamplesSite という名前のイベントソースが既に存在することを前提として、イベントが Windows アプリケーションイベントログに記録されます。 指定されたイベントソースを作成するには、次のコード例を参照してください。 イベントソースの作成の詳細については、「 [ASP.NET Web Forms Pages」の「サーバーイベント処理](https://docs.microsoft.com/previous-versions/aspnet/xax2hw3x(v=vs.100))」を参照してください。 <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> オブジェクトの <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> プロパティは `true` に設定され、エラーが処理されたことを示します。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/CS/changepassword_cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/VB/changepassword_vb.aspx#1)]  
  
 MySamplesSite という名前のイベントソースをアプリケーションログにプログラムによって追加する必要がある場合は、次のコード例を使用します。 最初のコード例が正しく機能するためには、このイベントソースが存在している必要があります。 次のコード例では、管理者特権が必要です。  
  
 [!code-csharp[System.Diagnostics.EventLog.CreateEventSource#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/CS/createeventsource.cs#1)]
 [!code-vb[System.Diagnostics.EventLog.CreateEventSource#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/VB/createeventsource.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Web.UI.WebControls.ChangePassword.OnSendMailError(System.Web.UI.WebControls.SendMailErrorEventArgs)" /> をオーバーライドする場合は、基本クラスの <see cref="M:System.Web.UI.WebControls.ChangePassword.OnSendMailError(System.Web.UI.WebControls.SendMailErrorEventArgs)" /> メソッドを呼び出して、登録されているデリゲートがイベントを受け取ることができるようにします。</para></block>
    <altmember cref="E:System.Web.UI.WebControls.CreateUserWizard.SendMailError" />
    <altmember cref="E:System.Web.UI.WebControls.ChangePassword.SendMailError" />
    <altmember cref="E:System.Web.UI.WebControls.PasswordRecovery.SendMailError" />
    <altmember cref="T:System.Net.Mail.MailMessage" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/xax2hw3x(v=vs.100)">ASP.NET Web ページでのサーバーイベント処理</related>
    <related type="Article" href="~/docs/standard/events/index.md">イベントの処理と発生</related>
    <related type="Article" href="https://msdn.microsoft.com/library/448f7802-0aa8-4304-abf7-82e138877dc8">Web サイト管理ツールの [アプリケーション] タブ</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178346(v=vs.100)">ログインコントロールのセキュリティ保護</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/zdh19h94(v=vs.100)">Web アプリケーションのセキュリティに関する基本的な対策</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SendMailErrorEventArgs (Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SendMailErrorEventArgs.#ctor(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (e As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SendMailErrorEventArgs(Exception ^ e);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.SendMailErrorEventArgs : Exception -&gt; System.Web.UI.WebControls.SendMailErrorEventArgs" Usage="new System.Web.UI.WebControls.SendMailErrorEventArgs e" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="e">例外を格納した <see cref="T:System.Exception" /> オブジェクト。</param>
        <summary><see cref="T:System.Web.UI.WebControls.SendMailErrorEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Web.UI.WebControls.CreateUserWizard.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.ChangePassword.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.PasswordRecovery.SendMailError" />
        <altmember cref="T:System.Net.Mail.MailMessage" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/xax2hw3x(v=vs.100)">ASP.NET Web ページでのサーバーイベント処理</related>
        <related type="Article" href="~/docs/standard/events/index.md">イベントの処理と発生</related>
        <related type="Article" href="https://msdn.microsoft.com/library/448f7802-0aa8-4304-abf7-82e138877dc8">Web サイト管理ツールの [アプリケーション] タブ</related>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SendMailErrorEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public Property Exception As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Exception { Exception ^ get(); void set(Exception ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Exception : Exception with get, set" Usage="System.Web.UI.WebControls.SendMailErrorEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>電子メール メッセージを送信できなかったときに、SMTP メール サービスによってスローされる例外を返します。</summary>
        <value>例外を格納した <see cref="T:System.Exception" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Exception%2A> プロパティには、<xref:System.Web.UI.WebControls.ChangePassword> コントロールまたは <xref:System.Web.UI.WebControls.CreateUserWizard>が電子メールメッセージを送信できない場合に SMTP メールプロバイダーによってスローされる例外が含まれています。 この例外の最も一般的な原因は、コンピューター構成ファイルの[&lt;smtp&gt; 要素 (ネットワーク設定)](~/docs/framework/configure-apps/file-schema/network/smtp-element-network-settings.md)の構成エラーです。これにより、次の例外メッセージが生成されます。 `The transport failed to connect to the server.`  
  
 <xref:System.Web.UI.WebControls.MailDefinition.EmbeddedObjects%2A>を使用してファイルを埋め込むときに電子メールメッセージにエラーがある場合、例外はスローされません。 代わりに、メールメッセージが表示されると、埋め込みファイルが破損しているように見えます。  
  
 例外が処理されたことを通知するには、<xref:System.Web.UI.WebControls.SendMailErrorEventArgs>の `e` パラメーターとして渡される <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> オブジェクトを `true` に設定する必要があります。それ以外の場合は、例外が再スローされ、元のコールスタックとエラーメッセージが含まれます。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Web.UI.WebControls.ChangePassword> Web コントロールを使用し、`SendMailError`という名前の <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> イベントのイベントハンドラーを含む ASP.NET ページを示しています。 このコード例では、ASP.NET Web サイトが ASP.NET メンバーシップとフォーム認証を使用するように構成されていること、および名前とパスワードがわかっているユーザーが作成されていることを前提としています。 詳細については、「[方法: 単純なフォーム認証を実装する](https://docs.microsoft.com/previous-versions/aspnet/xdt4thhy(v=vs.100))」を参照してください。  
  
 パスワードの変更が成功した場合、`SendingMail` イベントハンドラーのコードは、ユーザーに電子メールメッセージを送信して変更を確認しようとします。 このコード例を機能させるには、サーバーで SMTP が既に構成されている必要があります。 SMTP サーバーを構成する方法については、「[方法: IIS 6.0 で Smtp 仮想サーバーをインストールおよび構成](https://docs.microsoft.com/previous-versions/aspnet/8b83ac7t(v=vs.100))する」を参照してください。 この例では、SMTP サーバーを構成する必要はありません。この例は、電子メールメッセージの送信に失敗したかをテストするために構築されています。  
  
 メールサーバーが正しく構成されていない場合、またはその他のエラーが発生し、電子メールメッセージを送信できない場合は、`SendMailError` 関数が呼び出されます。 ユーザーにメッセージが表示されます。 さらに、MySamplesSite という名前のイベントソースが既に存在することを前提として、イベントが Windows アプリケーションイベントログに記録されます。 指定されたイベントソースを作成するには、次のコード例を参照してください。 イベントソースの作成の詳細については、「 [ASP.NET Web Forms Pages」の「サーバーイベント処理](https://docs.microsoft.com/previous-versions/aspnet/xax2hw3x(v=vs.100))」を参照してください。 <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> オブジェクトの <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> プロパティは `true` に設定され、エラーが処理されたことを示します。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/CS/changepassword_cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/VB/changepassword_vb.aspx#1)]  
  
 MySamplesSite という名前のイベントソースをアプリケーションログにプログラムによって追加する必要がある場合は、次のコード例を使用します。 最初のコード例が正しく機能するためには、このイベントソースが存在している必要があります。 次のコード例では、管理者特権が必要です。  
  
 [!code-csharp[System.Diagnostics.EventLog.CreateEventSource#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/CS/createeventsource.cs#1)]
 [!code-vb[System.Diagnostics.EventLog.CreateEventSource#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/VB/createeventsource.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.CreateUserWizard.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.ChangePassword.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.PasswordRecovery.SendMailError" />
        <altmember cref="T:System.Net.Mail.MailMessage" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/xax2hw3x(v=vs.100)">ASP.NET Web ページでのサーバーイベント処理</related>
        <related type="Article" href="~/docs/standard/events/index.md">イベントの処理と発生</related>
        <related type="Article" href="https://msdn.microsoft.com/library/448f7802-0aa8-4304-abf7-82e138877dc8">Web サイト管理ツールの [アプリケーション] タブ</related>
      </Docs>
    </Member>
    <Member MemberName="Handled">
      <MemberSignature Language="C#" Value="public bool Handled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Handled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled" />
      <MemberSignature Language="VB.NET" Value="Public Property Handled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Handled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Handled : bool with get, set" Usage="System.Web.UI.WebControls.SendMailErrorEventArgs.Handled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Web.UI.WebControls.SendMailErrorEventArgs.Exception" /> プロパティに格納されている SMTP 例外が処理されたかどうかを示します。</summary>
        <value><see langword="true" /> の場合、その例外は <see cref="T:System.Web.UI.WebControls.SendMailErrorEventHandler" /> デリゲートによって処理されています。 <see langword="false" /> の場合、元のコール スタックとエラー メッセージを含んだ例外が再度スローされます。  
  
既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> プロパティは、<xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Exception%2A> が処理されたかどうかを示します。 この例外は、<xref:System.Web.UI.WebControls.ChangePassword> コントロールまたは <xref:System.Web.UI.WebControls.CreateUserWizard>が電子メールメッセージを送信できない場合に、SMTP メールプロバイダーによって発生します。 例外の最も一般的な理由は、マシン構成ファイルの[&lt;smtp&gt; 要素 (ネットワーク設定)](~/docs/framework/configure-apps/file-schema/network/smtp-element-network-settings.md)の構成エラーです。 このようなエラーは、通常、アプリケーションの開発とデバッグ中に検出されますが、メールサーバーは運用環境では予期せず失敗する可能性があり、そのような状況でアプリケーション全体を失敗させるかどうかを判断する必要があります。 それ以外の場合は、イベントを処理することで、アプリケーションを続行できます。  
  
 <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> イベントのイベントハンドラーを作成しない場合、またはイベントハンドラーを作成し、<xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> プロパティを `false`に設定したままにした場合、電子メールメッセージの送信時にエラーが発生すると Web アプリケーションは実行を停止し、ASP.NET にはエラーメッセージが表示されます。 イベントを処理すると、例外が発生した場合でも Web アプリケーションを引き続き実行できます。 これは、電子メールメッセージを送信することが重要ではない場合に便利です。 たとえば、ユーザーがマルチステップウィザードを使用して作業しているときに例外が発生した場合は、エラーをログに記録し、情報メッセージをユーザーに表示し、ユーザーがウィザードを完了できるようにすると便利です。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Web.UI.WebControls.ChangePassword> Web コントロールを使用し、`SendMailError`という名前の <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> イベントのイベントハンドラーを含む ASP.NET ページを示しています。 このコード例では、ASP.NET Web サイトが ASP.NET メンバーシップとフォーム認証を使用するように構成されていること、および名前とパスワードがわかっているユーザーが作成されていることを前提としています。 詳細については、「[方法: 単純なフォーム認証を実装する](https://docs.microsoft.com/previous-versions/aspnet/xdt4thhy(v=vs.100))」を参照してください。  
  
 パスワードの変更が成功した場合、`SendingMail` イベントハンドラーのコードは、ユーザーに電子メールメッセージを送信して変更を確認しようとします。 このコード例を機能させるには、サーバーで SMTP が既に構成されている必要があります。 SMTP サーバーを構成する方法については、「[方法: IIS 6.0 で Smtp 仮想サーバーをインストールおよび構成](https://docs.microsoft.com/previous-versions/aspnet/8b83ac7t(v=vs.100))する」を参照してください。 この例では、SMTP サーバーを構成する必要はありません。この例は、電子メールメッセージの送信に失敗したかをテストするために構築されています。  
  
 メールサーバーが正しく構成されていない場合、またはその他のエラーが発生し、電子メールメッセージを送信できない場合は、`SendMailError` 関数が呼び出されます。 ユーザーにメッセージが表示されます。 さらに、MySamplesSite という名前のイベントソースが既に存在することを前提として、イベントが Windows アプリケーションイベントログに記録されます。 指定されたイベントソースを作成するには、次のコード例を参照してください。 イベントソースの作成の詳細については、「 [ASP.NET Web Forms Pages」の「サーバーイベント処理](https://docs.microsoft.com/previous-versions/aspnet/xax2hw3x(v=vs.100))」を参照してください。 <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> オブジェクトの <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> プロパティは `true` に設定され、エラーが処理されたことを示します。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/CS/changepassword_cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/VB/changepassword_vb.aspx#1)]  
  
 MySamplesSite という名前のイベントソースをアプリケーションログにプログラムによって追加する必要がある場合は、次のコード例を使用します。 最初のコード例が正しく機能するためには、このイベントソースが存在している必要があります。 次のコード例では、管理者特権が必要です。  
  
 [!code-csharp[System.Diagnostics.EventLog.CreateEventSource#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/CS/createeventsource.cs#1)]
 [!code-vb[System.Diagnostics.EventLog.CreateEventSource#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/VB/createeventsource.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.CreateUserWizard.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.ChangePassword.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.PasswordRecovery.SendMailError" />
        <altmember cref="T:System.Net.Mail.MailMessage" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/xax2hw3x(v=vs.100)">ASP.NET Web ページでのサーバーイベント処理</related>
        <related type="Article" href="~/docs/standard/events/index.md">イベントの処理と発生</related>
        <related type="Article" href="https://msdn.microsoft.com/library/448f7802-0aa8-4304-abf7-82e138877dc8">Web サイト管理ツールの [アプリケーション] タブ</related>
      </Docs>
    </Member>
  </Members>
</Type>
