<Type Name="FormViewUpdatedEventArgs" FullName="System.Web.UI.WebControls.FormViewUpdatedEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f9ccf3e15c16341531659ffe79c632f418cbe7fd" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83978638" /></Metadata><TypeSignature Language="C#" Value="public class FormViewUpdatedEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FormViewUpdatedEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.FormViewUpdatedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class FormViewUpdatedEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class FormViewUpdatedEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type FormViewUpdatedEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" /> イベントのデータを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView> コントロールは、コントロール内で更新ボタン (その `CommandName` プロパティが "Update" に設定されたボタン) をクリックしたときに、<xref:System.Web.UI.WebControls.FormView> コントロールがレコードを更新した後に、<xref:System.Web.UI.WebControls.FormView.ItemUpdated> イベントを発生させます。 これにより、このイベントが発生するたびに、更新操作の結果を確認するなどのカスタムルーチンを実行するイベント処理メソッドを提供できます。  
  
 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs> オブジェクトがイベント処理メソッドに渡されます。これにより、影響を受けるレコードの数と発生した可能性のある例外を確認できます。 更新操作によって影響を受けたレコードの数を確認するには、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A> プロパティを使用します。 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A> プロパティを使用して、例外が発生したかどうかを確認します。 また、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A> プロパティを設定して、イベント処理メソッドで例外が処理されたかどうかを示すこともできます。 更新されたレコードの元のキーフィールドの値にアクセスする必要がある場合は、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A> プロパティを使用します。 元のキー以外のフィールド値には、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues%2A> プロパティを使用してアクセスできます。 更新された値 (キーフィールドの編集をユーザーに許可した場合、更新されたキーフィールド値が含まれます) には、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> プロパティを使用してアクセスします。  
  
 既定では、<xref:System.Web.UI.WebControls.FormView> コントロールは、更新操作の後、<xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> プロパティによって指定されたモードに戻ります。 更新操作中に発生した例外を処理する場合は、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A> プロパティを `true`に設定して、<xref:System.Web.UI.WebControls.FormView> コントロールを編集モードのままにすることができます。  
  
 イベントを処理する方法の詳細については、次を参照してください。[処理とイベントの発生](/dotnet/standard/events/)します。  
  
 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs> クラスのインスタンスの初期プロパティ値一覧については、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.%23ctor%2A> コンストラクターに関するトピックを参照してください。  
  
   
  
## Examples  
 次の例では、<xref:System.Web.UI.WebControls.FormView.ItemUpdated> イベントのイベント処理メソッドに渡された <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs> オブジェクトを使用して、更新操作中に例外が発生したかどうかを判断する方法を示します。  
  
 [!code-aspx-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.FormView" />
    <altmember cref="T:System.Web.UI.WebControls.FormViewUpdatedEventHandler" />
    <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
    <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows" />
    <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception" />
    <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled" />
    <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormViewUpdatedEventArgs (int affectedRows, Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 affectedRows, class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormViewUpdatedEventArgs.#ctor(System.Int32,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (affectedRows As Integer, e As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FormViewUpdatedEventArgs(int affectedRows, Exception ^ e);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.FormViewUpdatedEventArgs : int * Exception -&gt; System.Web.UI.WebControls.FormViewUpdatedEventArgs" Usage="new System.Web.UI.WebControls.FormViewUpdatedEventArgs (affectedRows, e)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="affectedRows" Type="System.Int32" />
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="affectedRows">更新操作の影響を受けた行の数。</param>
        <param name="e">更新操作の実行時に発生した例外を表す <see cref="T:System.Exception" />。 例外が発生しない場合は、このパラメーターに <see langword="null" /> を使用します。</param>
        <summary><see cref="T:System.Web.UI.WebControls.FormViewUpdatedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターを使用して、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs> クラスの新しいインスタンスを初期化します。  
  
 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs> クラスのインスタンスのプロパティの初期値を次の表に示します。  
  
|プロパティ|初期値|  
|--------------|-------------------|  
|<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A>|`affectedRows` パラメーターの値。|  
|<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A>|`e` パラメーターに格納されている <xref:System.Exception?displayProperty=nameWithType> オブジェクト。|  
|<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A>|`false`に初期化されます。|  
|<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A>|`false`に初期化されます。|  
  
> [!NOTE]
>  このコンストラクターは、イベントを発生させるときに、主にコントロールの開発者によって使用されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormView" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdatedEventHandler" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode" />
      </Docs>
    </Member>
    <Member MemberName="AffectedRows">
      <MemberSignature Language="C#" Value="public int AffectedRows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AffectedRows" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AffectedRows As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AffectedRows { int get(); };" />
      <MemberSignature Language="F#" Value="member this.AffectedRows : int" Usage="System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>更新操作の影響を受けた行の数を取得します。</summary>
        <value>更新操作の影響を受けた行の数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 更新操作の影響を受けるレコードの数を確認するには、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A> プロパティを使用します。 このプロパティは、通常、次の状況で正しいレコード数が更新されたことを確認するために使用されます。  
  
-   1つのレコードだけが更新されたことを確認します。 不適切に記述された update ステートメントによって、複数のレコードが更新されることがあります。  
  
-   更新操作中に例外を発生させないエラーが発生したときに、レコードが更新されたことを確認します。  
  
-   競合の検出をサポートするデータソースコントロール (オプティミスティック同時実行チェック) (<xref:System.Web.UI.WebControls.SqlDataSource> や <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールなど) が、`ConflictOptions.CompareAllValues` 列挙値に設定された <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> プロパティを持つ場合に、レコードが更新されたことを確認します。 この設定では、別のユーザーによって同時に変更されたレコードは更新されない可能性があります。  
  
   
  
## Examples  
 次の例では、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A> プロパティを使用して、レコードが更新されたことを確認する方法を示します。  
  
 [!code-aspx-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormView" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdatedEventHandler" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled" />
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Exception { Exception ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Exception : Exception" Usage="System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>更新操作中に例外が発生した場合は、その例外を取得します。</summary>
        <value>更新操作中に発生した例外を表す <see cref="T:System.Exception" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 更新操作中に発生した例外 (存在する場合) を確認するには、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A> プロパティを使用します。 例外が発生しなかった場合、このプロパティは `null` を返します。  
  
> [!NOTE]
>  例外が発生し、イベントハンドラーで例外を処理する場合は、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A> プロパティを `true`に設定してください。それ以外の場合は、<xref:System.Web.UI.WebControls.FormView> コントロールによって例外が再度スローされます。  
  
   
  
## Examples  
 次の例では、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A> プロパティを使用して、更新操作中に例外が発生したかどうかを判断する方法を示します。  
  
 [!code-aspx-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormView" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdatedEventHandler" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled" />
      </Docs>
    </Member>
    <Member MemberName="ExceptionHandled">
      <MemberSignature Language="C#" Value="public bool ExceptionHandled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExceptionHandled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled" />
      <MemberSignature Language="VB.NET" Value="Public Property ExceptionHandled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExceptionHandled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ExceptionHandled : bool with get, set" Usage="System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>更新操作中に発生した例外がイベント ハンドラーで処理されたかどうかを示す値を取得または設定します。</summary>
        <value>イベント ハンドラーで例外が処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定では、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 更新操作中に例外が発生した場合は、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A> プロパティを使用して、例外がイベントハンドラーで処理されたかどうかを示します。 このプロパティが `true`に設定されている場合、例外は処理済みと見なされ、<xref:System.Web.UI.WebControls.FormView> コントロールによって再度スローされることはありません。 このプロパティが `false`に設定されている場合、例外が再度スローされます。 発生した例外を特定するには、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A> プロパティを使用します。  
  
   
  
## Examples  
 次の例では、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A> プロパティを使用して、例外がイベントハンドラーで処理されたことを示す方法を示します。  
  
 [!code-aspx-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormView" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdatedEventHandler" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception" />
      </Docs>
    </Member>
    <Member MemberName="KeepInEditMode">
      <MemberSignature Language="C#" Value="public bool KeepInEditMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeepInEditMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode" />
      <MemberSignature Language="VB.NET" Value="Public Property KeepInEditMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool KeepInEditMode { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.KeepInEditMode : bool with get, set" Usage="System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>更新操作の後で、<see cref="T:System.Web.UI.WebControls.FormView" /> コントロールを編集モードのまま維持するかどうかを示す値を取得または設定します。</summary>
        <value>更新操作後に編集モードのままにする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定では、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定では、<xref:System.Web.UI.WebControls.FormView> コントロールは、更新操作の後、<xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> プロパティによって指定されたモードに戻ります。 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A> プロパティを使用して、<xref:System.Web.UI.WebControls.FormView> コントロールを編集モードのままにするかどうかを指定します。 <xref:System.Web.UI.WebControls.FormView> コントロールを編集モードのままにするには、このプロパティを `true`に設定します。  
  
> [!NOTE]
>  このプロパティは、通常とは異なる方法でコントロールの動作を必要とする状況 (例外が発生しているなど) が発生した場合にのみ使用してください。 既定で <xref:System.Web.UI.WebControls.FormView> コントロールを編集モードのままにする必要がある場合は、代わりに <xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> プロパティを設定します。  
  
   
  
## Examples  
 次の例は、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A> プロパティを使用して、例外が発生したときに <xref:System.Web.UI.WebControls.FormView> コントロールを編集モードに保つ方法を示しています。  
  
 [!code-aspx-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormView" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdatedEventHandler" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.DefaultMode" />
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.IOrderedDictionary Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.IOrderedDictionary Keys" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Keys As IOrderedDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::IOrderedDictionary ^ Keys { System::Collections::Specialized::IOrderedDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Keys : System.Collections.Specialized.IOrderedDictionary" Usage="System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.IOrderedDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>更新されたレコードの元のキー フィールドの名前と値のペアが格納されているディクショナリを取得します。</summary>
        <value>更新されたレコードの元のキー フィールドの名前と値のペアのディクショナリが格納されている <see cref="T:System.Collections.Specialized.IOrderedDictionary" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A> プロパティには、<xref:System.Web.UI.WebControls.FormView> コントロールの <xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A> プロパティに一覧表示されるキーフィールドの元の値が格納されます。 更新されたレコードのキーフィールドの値にアクセスするには、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A> プロパティを使用します。 たとえば、これらの値を使用して、更新されたレコードのログを保持することができます。  
  
> [!NOTE]
>  キーフィールドの値を更新することをユーザーに許可した場合、<xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> プロパティには元のキーフィールド値が含まれます。 更新された値は、<xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A> プロパティに格納されます。  
  
 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A> プロパティは、<xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=nameWithType> インターフェイスを実装する <xref:System.Collections.Specialized.OrderedDictionary> オブジェクトを返します。 <xref:System.Collections.Specialized.OrderedDictionary> オブジェクトには、更新されたレコードのフィールドを表す <xref:System.Collections.DictionaryEntry?displayProperty=nameWithType> オブジェクトが含まれています。 フィールド名にアクセスするには、<xref:System.Collections.Specialized.OrderedDictionary> オブジェクトの <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> プロパティを使用します。 同様に、<xref:System.Collections.Specialized.OrderedDictionary.Values%2A> プロパティを使用してフィールド値にアクセスすることもできます。  
  
> [!NOTE]
>  ショートカットとして、<xref:System.Collections.Specialized.OrderedDictionary> オブジェクトのインデクサーを使用して、フィールド値に直接アクセスすることもできます。 フィールドの順序に依存するデータソースコントロール (<xref:System.Web.UI.WebControls.AccessDataSource>など) は、インデックスによってのみフィールド値にアクセスできます。  
  
   
  
## Examples  
 次の例では、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A> プロパティを使用して、更新されたレコードのキーフィールドの値にアクセスする方法を示します。  
  
 [!code-aspx-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormView" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdatedEventHandler" />
        <altmember cref="T:System.Collections.Specialized.IOrderedDictionary" />
        <altmember cref="T:System.Collections.Specialized.OrderedDictionary" />
        <altmember cref="T:System.Collections.DictionaryEntry" />
        <altmember cref="P:System.Collections.Specialized.OrderedDictionary.Keys" />
        <altmember cref="P:System.Collections.Specialized.OrderedDictionary.Values" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
      </Docs>
    </Member>
    <Member MemberName="NewValues">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.IOrderedDictionary NewValues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.IOrderedDictionary NewValues" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NewValues As IOrderedDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::IOrderedDictionary ^ NewValues { System::Collections::Specialized::IOrderedDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NewValues : System.Collections.Specialized.IOrderedDictionary" Usage="System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.IOrderedDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>更新されたレコードの新しいフィールドの名前と値のペアが格納されているディクショナリを取得します。</summary>
        <value>更新されたレコードの新しいフィールドの名前と値のペアのディクショナリが格納されている <see cref="T:System.Collections.Specialized.IOrderedDictionary" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 更新されたレコードの新しいフィールド値にアクセスするには、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> プロパティを使用します。 たとえば、これらの値を使用して、更新されたレコードのログを保持することができます。  
  
> [!NOTE]
>  キーフィールドの値を更新することをユーザーに許可した場合、<xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> プロパティには元のキーフィールド値が含まれます。 更新された値は、<xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A> プロパティに格納されます。  
  
 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> プロパティは、<xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=nameWithType> インターフェイスを実装する <xref:System.Collections.Specialized.OrderedDictionary> オブジェクトを返します。 <xref:System.Collections.Specialized.OrderedDictionary> オブジェクトには、更新されたレコードのフィールドを表す <xref:System.Collections.DictionaryEntry?displayProperty=nameWithType> オブジェクトが含まれています。 フィールド名にアクセスするには、<xref:System.Collections.Specialized.OrderedDictionary> オブジェクトの <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> プロパティを使用します。 同様に、<xref:System.Collections.Specialized.OrderedDictionary.Values%2A> プロパティを使用してフィールド値にアクセスすることもできます。  
  
> [!NOTE]
>  ショートカットとして、<xref:System.Collections.Specialized.OrderedDictionary> オブジェクトのインデクサーを使用して、フィールド値に直接アクセスすることもできます。 フィールドの順序に依存するデータソースコントロール (<xref:System.Web.UI.WebControls.AccessDataSource>など) は、インデックスによってのみフィールド値にアクセスできます。  
  
   
  
## Examples  
 次の例では、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> プロパティを使用して、更新されたレコードの非キーフィールドに対してユーザーが入力した新しい値にアクセスする方法を示します。  
  
 [!code-aspx-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormView" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewInsertedEventHandler" />
        <altmember cref="T:System.Collections.Specialized.IOrderedDictionary" />
        <altmember cref="T:System.Collections.Specialized.OrderedDictionary" />
        <altmember cref="T:System.Collections.DictionaryEntry" />
        <altmember cref="P:System.Collections.Specialized.OrderedDictionary.Keys" />
        <altmember cref="P:System.Collections.Specialized.OrderedDictionary.Values" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
      </Docs>
    </Member>
    <Member MemberName="OldValues">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.IOrderedDictionary OldValues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.IOrderedDictionary OldValues" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OldValues As IOrderedDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::IOrderedDictionary ^ OldValues { System::Collections::Specialized::IOrderedDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OldValues : System.Collections.Specialized.IOrderedDictionary" Usage="System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.IOrderedDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>更新されたレコードの元のキー以外のフィールドの名前と値のペアが格納されているディクショナリを取得します。</summary>
        <value>更新されたレコードの元のフィールドの名前と値のペアのディクショナリが格納されている <see cref="T:System.Collections.Specialized.IOrderedDictionary" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 更新されたレコードの元のキー以外のフィールド値にアクセスするには、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues%2A> プロパティを使用します。 たとえば、これらの値を使用して、更新されたレコードのログを保持することができます。 <xref:System.Web.UI.WebControls.SqlDataSource> や <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールなどの競合検出 (オプティミスティック同時実行チェック) をサポートするデータソースコントロール。 <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> プロパティを `ConflictOptions.CompareAllValues` に設定すると、更新操作が実行される前に、これらの元の値とデータベース内のレコードとの比較も行われます。 レコードが別のユーザーによって同時に変更されている場合、レコードは更新されません。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.OldValues%2A> プロパティにキーフィールドが含まれていません。 キーフィールドの値を更新することをユーザーに許可した場合、元のキーフィールドの値は <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> プロパティに格納されます。 更新された値は、<xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A> プロパティに格納されます。  
  
 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> プロパティは、<xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=nameWithType> インターフェイスを実装する <xref:System.Collections.Specialized.OrderedDictionary> オブジェクトを返します。 <xref:System.Collections.Specialized.OrderedDictionary> オブジェクトには、更新されたレコードのフィールドを表す <xref:System.Collections.DictionaryEntry?displayProperty=nameWithType> オブジェクトが含まれています。 フィールド名にアクセスするには、<xref:System.Collections.Specialized.OrderedDictionary> オブジェクトの <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> プロパティを使用します。 同様に、<xref:System.Collections.Specialized.OrderedDictionary.Values%2A> プロパティを使用してフィールド値にアクセスすることもできます。  
  
> [!NOTE]
>  ショートカットとして、<xref:System.Collections.Specialized.OrderedDictionary> オブジェクトのインデクサーを使用して、フィールド値に直接アクセスすることもできます。 フィールドの順序に依存するデータソースコントロール (<xref:System.Web.UI.WebControls.AccessDataSource>など) は、インデックスによってのみフィールド値にアクセスできます。  
  
   
  
## Examples  
 次の例では、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues%2A> プロパティを使用して、更新されたレコードのキー以外のフィールドの元の値にアクセスする方法を示します。  
  
 [!code-aspx-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormView" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdatedEventHandler" />
        <altmember cref="T:System.Collections.Specialized.IOrderedDictionary" />
        <altmember cref="T:System.Collections.Specialized.OrderedDictionary" />
        <altmember cref="T:System.Collections.DictionaryEntry" />
        <altmember cref="P:System.Collections.Specialized.OrderedDictionary.Keys" />
        <altmember cref="P:System.Collections.Specialized.OrderedDictionary.Values" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
      </Docs>
    </Member>
  </Members>
</Type>
