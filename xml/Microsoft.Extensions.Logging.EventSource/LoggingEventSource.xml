<Type Name="LoggingEventSource" FullName="Microsoft.Extensions.Logging.EventSource.LoggingEventSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4a0d9418fc6fd1112e04bdbe206324340fc5f3bb" /><Meta Name="ms.sourcegitcommit" Value="385ff23cc00fe9aa1c93460c62603b45c2041d0b" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="11/22/2019" /><Meta Name="ms.locfileid" Value="74385926" /></Metadata><TypeSignature Language="C#" Value="public sealed class LoggingEventSource : System.Diagnostics.Tracing.EventSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LoggingEventSource extends System.Diagnostics.Tracing.EventSource" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Logging.EventSource.LoggingEventSource" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LoggingEventSource&#xA;Inherits EventSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class LoggingEventSource sealed : System::Diagnostics::Tracing::EventSource" />
  <TypeSignature Language="F#" Value="type LoggingEventSource = class&#xA;    inherit EventSource" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Logging.EventSource</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.Tracing.EventSource</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="dotnet-plat-ext-3.0">
      <AttributeName>System.Diagnostics.Tracing.EventSource(Name="Microsoft-Extensions-Logging")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="ee25b-101">LoggingEventSource は、ILogger ベースのすべてのログ記録から EventSource/EventListener ログ記録へのブリッジとなります。</span><span class="sxs-lookup"><span data-stu-id="ee25b-101">The LoggingEventSource is the bridge from all ILogger based logging to EventSource/EventListener logging.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ee25b-102">このログ記録を有効にするには、`Microsoft-Extensions-Logging`という EventSource を有効にします。</span><span class="sxs-lookup"><span data-stu-id="ee25b-102">You turn this logging on by enabling the EventSource called `Microsoft-Extensions-Logging`.</span></span>
            
<span data-ttu-id="ee25b-103">EventSource を有効にすると、設定した EventLevel は、ILogger に関連付けられているレベルに明確な方法で変換されます (そのため、デバッグ = verbose、情報 =...Critical = = 重大)</span><span class="sxs-lookup"><span data-stu-id="ee25b-103">When you enabled the EventSource, the EventLevel you set is translated in the obvious way to the level associated with the ILogger (thus Debug = verbose, Informational = Informational ... Critical == Critical)</span></span>
            
<span data-ttu-id="ee25b-104">これにより、簡単な方法で、イベント レベルでフィルター処理できます。</span><span class="sxs-lookup"><span data-stu-id="ee25b-104">This allows you to filter by event level in a straightforward way.</span></span>
            
<span data-ttu-id="ee25b-105">より細かく制御するには、`FilterSpecs`という名前の EventSource 引数を指定します。</span><span class="sxs-lookup"><span data-stu-id="ee25b-105">For finer control you can specify a EventSource Argument called `FilterSpecs`.</span></span>
            
<span data-ttu-id="ee25b-106">`FilterSpecs` 引数は、セミコロンで区切られた仕様のリストです。</span><span class="sxs-lookup"><span data-stu-id="ee25b-106">The `FilterSpecs` argument is a semicolon separated list of specifications.</span></span> <span data-ttu-id="ee25b-107">各仕様は次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="ee25b-107">Where each specification is</span></span>

```
SPEC =                          // empty spec, same as *
     | NAME                     // Just a name the level is the default level
     | NAME : LEVEL            // specifies level for a particular logger (can have a * suffix).
```
            
<span data-ttu-id="ee25b-108">ここで、Name は ILoggger の名前です (大文字と小文字が区別されます)。名前には、サフィックスとしてワイルドカードとして機能する \* を指定できます。</span><span class="sxs-lookup"><span data-stu-id="ee25b-108">Where Name is the name of a ILoggger (case matters), Name can have a \* which acts as a wildcard AS A SUFFIX.</span></span> <span data-ttu-id="ee25b-109">このため、Net\* は、' Net ' で始まるすべてのロガーと一致します。</span><span class="sxs-lookup"><span data-stu-id="ee25b-109">Thus, Net\* will match any loggers that start with the 'Net'.</span></span>
            
<span data-ttu-id="ee25b-110">LEVEL は、数値または LogLevel 文字列です。</span><span class="sxs-lookup"><span data-stu-id="ee25b-110">The LEVEL is a number or a LogLevel string.</span></span> <span data-ttu-id="ee25b-111">0=Trace, 1=Debug, 2=Information, 3=Warning,  4=Error, Critical=5 これにより、関連付けられているパターンのレベルが指定されます。</span><span class="sxs-lookup"><span data-stu-id="ee25b-111">0=Trace, 1=Debug, 2=Information, 3=Warning,  4=Error, Critical=5 This specifies the level for the associated pattern.</span></span>  <span data-ttu-id="ee25b-112">数値が指定されていない場合 (仕様の最初の形式)、EventSource の既定のレベルになります。</span><span class="sxs-lookup"><span data-stu-id="ee25b-112">If the number is not specified, (first form of the specification) it is the default level for the EventSource.</span></span>
            
<span data-ttu-id="ee25b-113">特定の名前が複数のパターンに一致する場合は、最初に一致するものが使用されます。</span><span class="sxs-lookup"><span data-stu-id="ee25b-113">First match is used if a particular name matches more than one pattern.</span></span>
            
<span data-ttu-id="ee25b-114">レベルと FilterSpec 引数に加えて、EventSource キーワードを設定することもできます。</span><span class="sxs-lookup"><span data-stu-id="ee25b-114">In addition to the level and FilterSpec argument, you can also set EventSource Keywords.</span></span> <span data-ttu-id="ee25b-115">以下の Keywords の定義を参照してください。しかし、基本的には、含める必要があるかどうかを判断することになります</span><span class="sxs-lookup"><span data-stu-id="ee25b-115">See the Keywords definition below, but basically you get to decide if you wish to have</span></span>
            
* <span data-ttu-id="ee25b-116">Keywords. Message-データを解析された形式でイベントを取得します。</span><span class="sxs-lookup"><span data-stu-id="ee25b-116">Keywords.Message - You get the event with the data in parsed form.</span></span>
* <span data-ttu-id="ee25b-117">Keywords. JsonMessage-データを解析形式で取得しますが、JSON blob として取得します (引数によって分割されていません)。</span><span class="sxs-lookup"><span data-stu-id="ee25b-117">Keywords.JsonMessage - you get an event with the data in parse form but as a JSON blob (not broken up by argument ...)</span></span>
* <span data-ttu-id="ee25b-118">FormattedMessage-データを文字列として書式設定してイベントを取得します。</span><span class="sxs-lookup"><span data-stu-id="ee25b-118">Keywords.FormattedMessage - you get an event with the data formatted as a string</span></span>
            
<span data-ttu-id="ee25b-119">これらのキーワードは一度に1つだけ有効にすることが想定されていますが、これらすべてをオンにして、同じデータを3つの異なる方法で記録することもできます。</span><span class="sxs-lookup"><span data-stu-id="ee25b-119">It is expected that you will turn only one of these keywords on at a time, but you can turn them all on and get the same data logged three different ways.</span></span>
            
## Examples
            
<span data-ttu-id="ee25b-120">次の例は、EventListener を使用して ILogging 情報を取得する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="ee25b-120">The following example shows how to use an EventListener to get ILogging information:</span></span>
            
```csharp
class MyEventListener : EventListener 
{
    protected override void OnEventSourceCreated(EventSource eventSource) 
    {
        if (eventSource.Name == "Microsoft-Extensions-Logging") 
        {
            // initialize a string, string dictionary of arguments to pass to the EventSource.
            // Turn on loggers matching App* to Information, everything else (*) is the default level (which is EventLevel.Error)
            var args = new Dictionary&lt;string, string&gt;() { { "FilterSpecs", "App*:Information;*" } };
            // Set the default level (verbosity) to Error, and only ask for the formatted messages in this case.
            EnableEvents(eventSource, EventLevel.Error, LoggingEventSource.Keywords.FormattedMessage, args);
        }
    }

    protected override void OnEventWritten(EventWrittenEventArgs eventData) 
    {
        // Look for the formatted message event, which has the following argument layout (as defined in the LoggingEventSource.
        // FormattedMessage(LogLevel Level, int FactoryID, string LoggerName, string EventId, string FormattedMessage);
        if (eventData.EventName == "FormattedMessage")
            Console.WriteLine("Logger {0}: {1}", eventData.Payload[2], eventData.Payload[4]);
    }
}
```

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="OnEventCommand">
      <MemberSignature Language="C#" Value="protected override void OnEventCommand (System.Diagnostics.Tracing.EventCommandEventArgs command);" FrameworkAlternate="dotnet-plat-ext-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnEventCommand(class System.Diagnostics.Tracing.EventCommandEventArgs command) cil managed" FrameworkAlternate="dotnet-plat-ext-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.EventSource.LoggingEventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)" FrameworkAlternate="dotnet-plat-ext-3.0" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnEventCommand (command As EventCommandEventArgs)" FrameworkAlternate="dotnet-plat-ext-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnEventCommand(System::Diagnostics::Tracing::EventCommandEventArgs ^ command);" FrameworkAlternate="dotnet-plat-ext-3.0" />
      <MemberSignature Language="F#" Value="override this.OnEventCommand : System.Diagnostics.Tracing.EventCommandEventArgs -&gt; unit" Usage="loggingEventSource.OnEventCommand command" FrameworkAlternate="dotnet-plat-ext-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.EventSource</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Diagnostics.Tracing.EventCommandEventArgs" Index="0" FrameworkAlternate="dotnet-plat-ext-3.0" />
      </Parameters>
      <Docs>
        <param name="command">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
