<Type Name="LoggingEventSource" FullName="Microsoft.Extensions.Logging.EventSource.LoggingEventSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6971d9c39297efc4e895f22b6d96a3785890c8e9" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73408408" /></Metadata><TypeSignature Language="C#" Value="public sealed class LoggingEventSource : System.Diagnostics.Tracing.EventSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LoggingEventSource extends System.Diagnostics.Tracing.EventSource" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Logging.EventSource.LoggingEventSource" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LoggingEventSource&#xA;Inherits EventSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class LoggingEventSource sealed : System::Diagnostics::Tracing::EventSource" />
  <TypeSignature Language="F#" Value="type LoggingEventSource = class&#xA;    inherit EventSource" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Logging.EventSource</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.Tracing.EventSource</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="dotnet-plat-ext-3.0">
      <AttributeName>System.Diagnostics.Tracing.EventSource(Name="Microsoft-Extensions-Logging")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>LoggingEventSource は、ILogger ベースのすべてのログ記録から EventSource/EventListener ログ記録へのブリッジとなります。
            
このログ記録をオンにするには、以下の EventSource を有効にします 
Microsoft-Extensions-Logging 
EventSource を有効にした場合、設定した EventLevel が、ILogger に関連付けられているレベルに明確な方法で変換されます (したがって、Debug = verbose, Informational = Informational ...Critical == Critical) 
これにより、簡単な方法で、イベント レベルでフィルター処理できます。
            
より細かく制御する場合は、以下の EventSource 引数を指定できます 
FilterSpecs 
FilterSpecs 引数は、セミコロンで区切られた仕様のリストです。   各仕様は次のとおりです。 
SPEC =                          // * と同じ、空の仕様 | NAME                     // レベルが既定レベルである単なる名前 | NAME :LEVEL            // 特定のロガーのレベルを指定します (* サフィックスを含めることができます).
            
ここで、Name は ILoggger の名前です (大文字と小文字が区別されます)。Name には、サフィックスと同様にワイルドカードとして機能する * を含めることができます。   したがって、Net* の場合、'Net' で始まるすべてのロガーと一致します。
            
LEVEL は、数値または LogLevel 文字列です。 0=Trace, 1=Debug, 2=Information, 3=Warning,  4=Error, Critical=5 これにより、関連付けられているパターンのレベルが指定されます。  数値が指定されていない場合 (仕様の最初の形式)、EventSource の既定のレベルになります。
            
特定の名前が複数のパターンに一致する場合は、最初に一致するものが使用されます。
            
レベルと FilterSpec 引数に加え、EventSource Keywords を設定することもできます。  以下の Keywords の定義を参照してください。しかし、基本的には、含める必要があるかどうかを判断することになります 
* Keywords. Message - 解析形式のデータを含むイベントを取得します。
* Keywords. JsonMessage - 解析形式ではあるが、JSON BLOB としてデータが含まれるイベントを取得します (引数 ... によって分割されません) * Keywords.FormattedMessage - 文字列として書式設定されたデータを含むイベントを取得します 
これらのキーワードは一度に 1 つのみをオンにすることが想定されますが、すべてをオンにする (および同じデータを 3 つの異なる方法でログに記録する) ことができます。
            
使用例 
この例では、EventListener を使用して ILogging 情報を取得する方法を示します 
class MyEventListener :EventListener { protected override void OnEventSourceCreated(EventSource eventSource) { if (eventSource.Name == "Microsoft-Extensions-Logging") { // EventSource に渡す引数の string, string dictionary を初期化します。
App* が Information と一致するロガーをオンにします。他のすべての (*) は既定のレベル (EventLevel.Error) var args = new Dictionary&lt;string, string&gt;() { { "FilterSpecs", "App*:Information;*" } }; // 既定のレベル (詳細) を Error に設定します。この場合、書式設定されたメッセージのみを要求します。
EnableEvents(eventSource, EventLevel.Error, LoggingEventSource.Keywords.FormattedMessage, args); } } protected override void OnEventWritten(EventWrittenEventArgs eventData) { // 次の引数のレイアウトを持つ、書式設定されたメッセージ イベントを検索します (LoggingEventSource で定義。
// FormattedMessage(LogLevel Level, int FactoryID, string LoggerName, string EventId, string FormattedMessage); if (eventData.EventName == "FormattedMessage") Console.WriteLine("Logger {0}: {1}", eventData.Payload[2], eventData.Payload[4]); } }</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="OnEventCommand">
      <MemberSignature Language="C#" Value="protected override void OnEventCommand (System.Diagnostics.Tracing.EventCommandEventArgs command);" FrameworkAlternate="dotnet-plat-ext-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnEventCommand(class System.Diagnostics.Tracing.EventCommandEventArgs command) cil managed" FrameworkAlternate="dotnet-plat-ext-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.EventSource.LoggingEventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)" FrameworkAlternate="dotnet-plat-ext-3.0" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnEventCommand (command As EventCommandEventArgs)" FrameworkAlternate="dotnet-plat-ext-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnEventCommand(System::Diagnostics::Tracing::EventCommandEventArgs ^ command);" FrameworkAlternate="dotnet-plat-ext-3.0" />
      <MemberSignature Language="F#" Value="override this.OnEventCommand : System.Diagnostics.Tracing.EventCommandEventArgs -&gt; unit" Usage="loggingEventSource.OnEventCommand command" FrameworkAlternate="dotnet-plat-ext-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.EventSource</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Diagnostics.Tracing.EventCommandEventArgs" Index="0" FrameworkAlternate="dotnet-plat-ext-3.0" />
      </Parameters>
      <Docs>
        <param name="command">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
