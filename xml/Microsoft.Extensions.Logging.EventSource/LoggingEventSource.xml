<Type Name="LoggingEventSource" FullName="Microsoft.Extensions.Logging.EventSource.LoggingEventSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6971d9c39297efc4e895f22b6d96a3785890c8e9" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73408408" /></Metadata><TypeSignature Language="C#" Value="public sealed class LoggingEventSource : System.Diagnostics.Tracing.EventSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LoggingEventSource extends System.Diagnostics.Tracing.EventSource" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Logging.EventSource.LoggingEventSource" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LoggingEventSource&#xA;Inherits EventSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class LoggingEventSource sealed : System::Diagnostics::Tracing::EventSource" />
  <TypeSignature Language="F#" Value="type LoggingEventSource = class&#xA;    inherit EventSource" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Logging.EventSource</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.Tracing.EventSource</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="dotnet-plat-ext-3.0">
      <AttributeName>System.Diagnostics.Tracing.EventSource(Name="Microsoft-Extensions-Logging")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="4f15b-101">LoggingEventSource は、ILogger ベースのすべてのログ記録から EventSource/EventListener ログ記録へのブリッジとなります。</span><span class="sxs-lookup"><span data-stu-id="4f15b-101">The LoggingEventSource is the bridge from all ILogger based logging to EventSource/EventListener logging.</span></span>
            
<span data-ttu-id="4f15b-102">このログ記録をオンにするには、以下の EventSource を有効にします</span><span class="sxs-lookup"><span data-stu-id="4f15b-102">You turn this logging on by enabling the EventSource called</span></span> 
<span data-ttu-id="4f15b-103">Microsoft-Extensions-Logging</span><span class="sxs-lookup"><span data-stu-id="4f15b-103">Microsoft-Extensions-Logging</span></span> 
<span data-ttu-id="4f15b-104">EventSource を有効にした場合、設定した EventLevel が、ILogger に関連付けられているレベルに明確な方法で変換されます (したがって、Debug = verbose, Informational = Informational ...Critical == Critical)</span><span class="sxs-lookup"><span data-stu-id="4f15b-104">When you enabled the EventSource, the EventLevel you set is translated in the obvious way to the level associated with the ILogger (thus Debug = verbose, Informational = Informational ... Critical == Critical)</span></span> 
<span data-ttu-id="4f15b-105">これにより、簡単な方法で、イベント レベルでフィルター処理できます。</span><span class="sxs-lookup"><span data-stu-id="4f15b-105">This allows you to filter by event level in a straightforward way.</span></span>
            
<span data-ttu-id="4f15b-106">より細かく制御する場合は、以下の EventSource 引数を指定できます</span><span class="sxs-lookup"><span data-stu-id="4f15b-106">For finer control you can specify a EventSource Argument called</span></span> 
<span data-ttu-id="4f15b-107">FilterSpecs</span><span class="sxs-lookup"><span data-stu-id="4f15b-107">FilterSpecs</span></span> 
<span data-ttu-id="4f15b-108">FilterSpecs 引数は、セミコロンで区切られた仕様のリストです。</span><span class="sxs-lookup"><span data-stu-id="4f15b-108">The FilterSpecs argument is a semicolon separated list of specifications.</span></span>   <span data-ttu-id="4f15b-109">各仕様は次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="4f15b-109">Where each specification is</span></span> 
<span data-ttu-id="4f15b-110">SPEC =                          // \* と同じ、空の仕様 | NAME                     // レベルが既定レベルである単なる名前 | NAME :LEVEL            // 特定のロガーのレベルを指定します (\* サフィックスを含めることができます).</span><span class="sxs-lookup"><span data-stu-id="4f15b-110">SPEC =                          // empty spec, same as \* | NAME                     // Just a name the level is the default level | NAME : LEVEL            // specifies level for a particular logger (can have a \* suffix).</span></span>
            
<span data-ttu-id="4f15b-111">ここで、Name は ILoggger の名前です (大文字と小文字が区別されます)。Name には、サフィックスと同様にワイルドカードとして機能する \* を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="4f15b-111">Where Name is the name of a ILoggger (case matters), Name can have a \* which acts as a wildcard AS A SUFFIX.</span></span>   <span data-ttu-id="4f15b-112">したがって、Net\* の場合、'Net' で始まるすべてのロガーと一致します。</span><span class="sxs-lookup"><span data-stu-id="4f15b-112">Thus Net\* will match any loggers that start with the 'Net'.</span></span>
            
<span data-ttu-id="4f15b-113">LEVEL は、数値または LogLevel 文字列です。</span><span class="sxs-lookup"><span data-stu-id="4f15b-113">The LEVEL is a number or a LogLevel string.</span></span> <span data-ttu-id="4f15b-114">0=Trace, 1=Debug, 2=Information, 3=Warning,  4=Error, Critical=5 これにより、関連付けられているパターンのレベルが指定されます。</span><span class="sxs-lookup"><span data-stu-id="4f15b-114">0=Trace, 1=Debug, 2=Information, 3=Warning,  4=Error, Critical=5 This specifies the level for the associated pattern.</span></span>  <span data-ttu-id="4f15b-115">数値が指定されていない場合 (仕様の最初の形式)、EventSource の既定のレベルになります。</span><span class="sxs-lookup"><span data-stu-id="4f15b-115">If the number is not specified, (first form of the specification) it is the default level for the EventSource.</span></span>
            
<span data-ttu-id="4f15b-116">特定の名前が複数のパターンに一致する場合は、最初に一致するものが使用されます。</span><span class="sxs-lookup"><span data-stu-id="4f15b-116">First match is used if a particular name matches more than one pattern.</span></span>
            
<span data-ttu-id="4f15b-117">レベルと FilterSpec 引数に加え、EventSource Keywords を設定することもできます。</span><span class="sxs-lookup"><span data-stu-id="4f15b-117">In addition the level and FilterSpec argument, you can also set EventSource Keywords.</span></span>  <span data-ttu-id="4f15b-118">以下の Keywords の定義を参照してください。しかし、基本的には、含める必要があるかどうかを判断することになります</span><span class="sxs-lookup"><span data-stu-id="4f15b-118">See the Keywords definition below, but basically you get to decide if you wish to have</span></span> 
<span data-ttu-id="4f15b-119">\* Keywords. Message - 解析形式のデータを含むイベントを取得します。</span><span class="sxs-lookup"><span data-stu-id="4f15b-119">\* Keywords.Message - You get the event with the data in parsed form.</span></span>
<span data-ttu-id="4f15b-120">\* Keywords. JsonMessage - 解析形式ではあるが、JSON BLOB としてデータが含まれるイベントを取得します (引数 ... によって分割されません) \* Keywords.FormattedMessage - 文字列として書式設定されたデータを含むイベントを取得します</span><span class="sxs-lookup"><span data-stu-id="4f15b-120">\* Keywords.JsonMessage - you get an event with the data in parse form but as a JSON blob (not broken up by argument ...) \* Keywords.FormattedMessage - you get an event with the data formatted as a string</span></span> 
<span data-ttu-id="4f15b-121">これらのキーワードは一度に 1 つのみをオンにすることが想定されますが、すべてをオンにする (および同じデータを 3 つの異なる方法でログに記録する) ことができます。</span><span class="sxs-lookup"><span data-stu-id="4f15b-121">It is expected that you will turn only one of these keywords on at a time, but you can turn them all on (and get the same data logged three different ways.</span></span>
            
<span data-ttu-id="4f15b-122">使用例</span><span class="sxs-lookup"><span data-stu-id="4f15b-122">Example Usage</span></span> 
<span data-ttu-id="4f15b-123">この例では、EventListener を使用して ILogging 情報を取得する方法を示します</span><span class="sxs-lookup"><span data-stu-id="4f15b-123">This example shows how to use an EventListener to get ILogging information</span></span> 
<span data-ttu-id="4f15b-124">class MyEventListener :EventListener { protected override void OnEventSourceCreated(EventSource eventSource) { if (eventSource.Name == "Microsoft-Extensions-Logging") { // EventSource に渡す引数の string, string dictionary を初期化します。</span><span class="sxs-lookup"><span data-stu-id="4f15b-124">class MyEventListener : EventListener { protected override void OnEventSourceCreated(EventSource eventSource) { if (eventSource.Name == "Microsoft-Extensions-Logging") { // initialize a string, string dictionary of arguments to pass to the EventSource.</span></span>
<span data-ttu-id="4f15b-125">App\* が Information と一致するロガーをオンにします。他のすべての (*) は既定のレベル (EventLevel.Error) var args = new Dictionary&lt;string, string&gt;() { { "FilterSpecs", "App*:Information;\*" } }; // 既定のレベル (詳細) を Error に設定します。この場合、書式設定されたメッセージのみを要求します。</span><span class="sxs-lookup"><span data-stu-id="4f15b-125">// Turn on loggers matching App\* to Information, everything else (*) is the default level (which is EventLevel.Error) var args = new Dictionary&lt;string, string&gt;() { { "FilterSpecs", "App*:Information;\*" } }; // Set the default level (verbosity) to Error, and only ask for the formatted messages in this case.</span></span>
<span data-ttu-id="4f15b-126">EnableEvents(eventSource, EventLevel.Error, LoggingEventSource.Keywords.FormattedMessage, args); } } protected override void OnEventWritten(EventWrittenEventArgs eventData) { // 次の引数のレイアウトを持つ、書式設定されたメッセージ イベントを検索します (LoggingEventSource で定義。</span><span class="sxs-lookup"><span data-stu-id="4f15b-126">EnableEvents(eventSource, EventLevel.Error, LoggingEventSource.Keywords.FormattedMessage, args); } } protected override void OnEventWritten(EventWrittenEventArgs eventData) { // Look for the formatted message event, which has the following argument layout (as defined in the LoggingEventSource.</span></span>
<span data-ttu-id="4f15b-127">// FormattedMessage(LogLevel Level, int FactoryID, string LoggerName, string EventId, string FormattedMessage); if (eventData.EventName == "FormattedMessage") Console.WriteLine("Logger {0}: {1}", eventData.Payload[2], eventData.Payload[4]); } }</span><span class="sxs-lookup"><span data-stu-id="4f15b-127">// FormattedMessage(LogLevel Level, int FactoryID, string LoggerName, string EventId, string FormattedMessage); if (eventData.EventName == "FormattedMessage") Console.WriteLine("Logger {0}: {1}", eventData.Payload[2], eventData.Payload[4]); } }</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="OnEventCommand">
      <MemberSignature Language="C#" Value="protected override void OnEventCommand (System.Diagnostics.Tracing.EventCommandEventArgs command);" FrameworkAlternate="dotnet-plat-ext-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnEventCommand(class System.Diagnostics.Tracing.EventCommandEventArgs command) cil managed" FrameworkAlternate="dotnet-plat-ext-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.EventSource.LoggingEventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)" FrameworkAlternate="dotnet-plat-ext-3.0" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnEventCommand (command As EventCommandEventArgs)" FrameworkAlternate="dotnet-plat-ext-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnEventCommand(System::Diagnostics::Tracing::EventCommandEventArgs ^ command);" FrameworkAlternate="dotnet-plat-ext-3.0" />
      <MemberSignature Language="F#" Value="override this.OnEventCommand : System.Diagnostics.Tracing.EventCommandEventArgs -&gt; unit" Usage="loggingEventSource.OnEventCommand command" FrameworkAlternate="dotnet-plat-ext-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.EventSource</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Diagnostics.Tracing.EventCommandEventArgs" Index="0" FrameworkAlternate="dotnet-plat-ext-3.0" />
      </Parameters>
      <Docs>
        <param name="command">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
