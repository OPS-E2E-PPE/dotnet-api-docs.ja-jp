<Type Name="IArgumentProvider" FullName="System.Linq.Expressions.IArgumentProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4707d5b432079f7fbab7d53beca370220bc24978" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75131296" /></Metadata><TypeSignature Language="C#" Value="public interface IArgumentProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IArgumentProvider" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.IArgumentProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IArgumentProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IArgumentProvider" />
  <TypeSignature Language="F#" Value="type IArgumentProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="b15f5-101">複数のツリー ノード (DynamicExpression、ElementInit、MethodCallExpression、InvocationExpression、NewExpression および IndexExpression) の引数にアクセスするための内部インターフェイスを提供します。</span><span class="sxs-lookup"><span data-stu-id="b15f5-101">Provides an internal interface for accessing the arguments of multiple tree nodes (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression, and IndexExpression).</span></span>  <span data-ttu-id="b15f5-102">この API は、内部でだけ使用します。</span><span class="sxs-lookup"><span data-stu-id="b15f5-102">This API is for internal use only.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[
      
## Remarks

<span data-ttu-id="b15f5-103">この API を使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="b15f5-103">You should not use this API.</span></span>  <span data-ttu-id="b15f5-104">これは、アセンブリのリファクタリングによってのみ公開され、内部パフォーマンスの最適化のためだけに存在します。</span><span class="sxs-lookup"><span data-stu-id="b15f5-104">It is public only due to assembly refactoring, and it exists only for internal performance optimizations.</span></span> <span data-ttu-id="b15f5-105">これにより、ツリーのサイズを縮小する2つの最適化が可能になります。</span><span class="sxs-lookup"><span data-stu-id="b15f5-105">It enables two optimizations that reduce the size of the trees:</span></span>
  
1. <span data-ttu-id="b15f5-106">これにより、ノードが <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>ではなく <xref:System.Collections.Generic.IList%601> に保持されるようになります。</span><span class="sxs-lookup"><span data-stu-id="b15f5-106">It enables the nodes to hold onto an <xref:System.Collections.Generic.IList%601> instead of a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.</span></span>  <span data-ttu-id="b15f5-107">これにより、各ノードに読み取り専用コレクションを割り当てるコストが削減されます。</span><span class="sxs-lookup"><span data-stu-id="b15f5-107">This saves the cost of allocating the read-only collection for each node.</span></span>
  
2. <span data-ttu-id="b15f5-108">これにより、特定の数の引数 (`Block2`、`Block2`、`Block4`など) を保持する特殊なサブクラスを作成できます。</span><span class="sxs-lookup"><span data-stu-id="b15f5-108">It enables specialized subclasses to be created that hold on to a specific number of arguments (for example, `Block2`, `Block2`, `Block4`).</span></span>  <span data-ttu-id="b15f5-109">そのため、これらのノードは、要素を格納するために <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> と配列の両方を割り当てないようにして、ノードごとに32バイトを節約します。</span><span class="sxs-lookup"><span data-stu-id="b15f5-109">Therefore, these nodes avoid allocating both a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> and an array for storing their elements, thus saving 32 bytes per node.</span></span>  <span data-ttu-id="b15f5-110">この手法は、<xref:System.Linq.Expressions.BlockExpression>、<xref:System.Linq.Expressions.InvocationExpression>、<xref:System.Linq.Expressions.MethodCallExpression>など、さまざまなノードで使用されます。</span><span class="sxs-lookup"><span data-stu-id="b15f5-110">This technique is used by various nodes, including <xref:System.Linq.Expressions.BlockExpression>, <xref:System.Linq.Expressions.InvocationExpression>, and <xref:System.Linq.Expressions.MethodCallExpression>.</span></span>
            
<span data-ttu-id="b15f5-111">式ツリーノードは、<xref:System.Collections.ObjectModel.ReadOnlyCollection%601> オブジェクトの元の LINQ プロパティを引き続き公開します。</span><span class="sxs-lookup"><span data-stu-id="b15f5-111">The expression tree nodes continue to expose the original LINQ properties of <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> objects.</span></span> <span data-ttu-id="b15f5-112">これを行うには、配列または配列に通常格納される要素の両方を格納するためのフィールドを再利用します。</span><span class="sxs-lookup"><span data-stu-id="b15f5-112">They do this by reusing a field for storing both the array or an element that would normally be stored in the array.</span></span>
            
<span data-ttu-id="b15f5-113">配列の場合、コレクションは <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>ではなく <xref:System.Collections.Generic.IList%601> に型指定されます。</span><span class="sxs-lookup"><span data-stu-id="b15f5-113">For the array case, the collection is typed to <xref:System.Collections.Generic.IList%601> instead of <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.</span></span> <span data-ttu-id="b15f5-114">ノードが最初に構築されるときには、配列になります。</span><span class="sxs-lookup"><span data-stu-id="b15f5-114">When the node is initially constructed, it is an array.</span></span>  <span data-ttu-id="b15f5-115">このライブラリ内のコンパイラまたはユーティリティは、このインターフェイスを介して要素にアクセスします。</span><span class="sxs-lookup"><span data-stu-id="b15f5-115">The compiler or utilities in this library access the elements through this interface.</span></span> <span data-ttu-id="b15f5-116">配列要素にアクセスすると、配列が <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>に昇格します。</span><span class="sxs-lookup"><span data-stu-id="b15f5-116">Accessing array elements promotes the array to a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.</span></span>
            
<span data-ttu-id="b15f5-117">オブジェクトの場合、最初の引数は <xref:System.Object>に型指定されたフィールドに格納されます。</span><span class="sxs-lookup"><span data-stu-id="b15f5-117">For the object case, the first argument is stored in a field typed to <xref:System.Object>.</span></span> <span data-ttu-id="b15f5-118">ノードが最初に構築されるときに、このフィールドは最初の引数の <xref:System.Linq.Expressions.Expression> を保持します。</span><span class="sxs-lookup"><span data-stu-id="b15f5-118">When the node is initially constructed, this field holds the <xref:System.Linq.Expressions.Expression> of the first argument.</span></span>  <span data-ttu-id="b15f5-119">このライブラリ内のコンパイラとユーティリティが引数にアクセスすると、このインターフェイスを再度使用します。最初の引数のアクセサーは、内部 `Expression.ReturnObject<T>(System.Object)` ヘルパーメソッドを使用して、<xref:System.Linq.Expressions.Expression> または <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> ケースを処理するオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="b15f5-119">When the compiler and utilities in this library access the arguments, they again use this interface, and the accessor for the first argument uses the internal `Expression.ReturnObject<T>(System.Object)` helper method to return the object that handles the <xref:System.Linq.Expressions.Expression> or <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> case.</span></span> <span data-ttu-id="b15f5-120">ユーザーが <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>にアクセスすると、オブジェクトフィールドが更新され、<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>に直接保持されます。</span><span class="sxs-lookup"><span data-stu-id="b15f5-120">When the user accesses the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>, the object field is updated to hold directly onto the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.</span></span>
            
<span data-ttu-id="b15f5-121"><xref:System.Linq.Expressions.Expression> プロパティは一貫して同じ <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>を返すことが重要です。</span><span class="sxs-lookup"><span data-stu-id="b15f5-121">It is important that <xref:System.Linq.Expressions.Expression> properties consistently return the same <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.</span></span> <span data-ttu-id="b15f5-122">それ以外の場合、式の訪問者によって使用されるリライターツリーウォーカーは中断されます。</span><span class="sxs-lookup"><span data-stu-id="b15f5-122">Otherwise, the rewriter tree walker used by expression visitors will break.</span></span> <span data-ttu-id="b15f5-123">これは、同じ <xref:System.Linq.Expressions.Expression> ノードから異なる <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> を返すために、LINQ v1 からの互換性に影響する変更点です。</span><span class="sxs-lookup"><span data-stu-id="b15f5-123">It is a breaking change from LINQ v1 to return different <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> from the same <xref:System.Linq.Expressions.Expression> node.</span></span> <span data-ttu-id="b15f5-124">現時点では、ユーザーはオブジェクト id に依存して、ノードが変更されたかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="b15f5-124">Currently, users can rely on object identity to tell if the node has changed.</span></span>  <span data-ttu-id="b15f5-125">オーバーロードされたフィールドに <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> を格納すると、メモリ使用量が減少し、パブリック API の互換性が維持されます。</span><span class="sxs-lookup"><span data-stu-id="b15f5-125">Storing the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> in an overloaded field both reduces memory usage and maintains compatibility for the public API.</span></span>

      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ArgumentCount">
      <MemberSignature Language="C#" Value="public int ArgumentCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ArgumentCount" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ArgumentCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ArgumentCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ArgumentCount : int" Usage="System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b15f5-126">式ツリー ノードに引数の数を返します。</span><span class="sxs-lookup"><span data-stu-id="b15f5-126">Returns the number of arguments to the expression tree node.</span></span> <span data-ttu-id="b15f5-127">この API は、内部でだけ使用します。</span><span class="sxs-lookup"><span data-stu-id="b15f5-127">This API is for internal use only.</span></span></summary>
        <value><span data-ttu-id="b15f5-128"><see cref="T:System.Int32" /> として式ツリー ノードに引数の数を返します。</span><span class="sxs-lookup"><span data-stu-id="b15f5-128">The number of arguments to the expression tree node as <see cref="T:System.Int32" />.</span></span></value>
        <remarks><span data-ttu-id="b15f5-129">この API を使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="b15f5-129">You should not use this API.</span></span> <span data-ttu-id="b15f5-130">これは、アセンブリのリファクタリングによってのみ公開され、パフォーマンスの最適化のために内部的に使用されます。</span><span class="sxs-lookup"><span data-stu-id="b15f5-130">It is public only due to assembly refactoring, and it is used internally for performance optimizations.</span></span></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArgument">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression GetArgument (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression GetArgument(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetArgument (index As Integer) As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ GetArgument(int index);" />
      <MemberSignature Language="F#" Value="abstract member GetArgument : int -&gt; System.Linq.Expressions.Expression" Usage="iArgumentProvider.GetArgument index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="b15f5-131">引数のインデックス。</span><span class="sxs-lookup"><span data-stu-id="b15f5-131">The index of the argument.</span></span></param>
        <summary><span data-ttu-id="b15f5-132"><paramref name="index" /> の引数を返し、<paramref name="index" /> が範囲外にある場合にスローします。</span><span class="sxs-lookup"><span data-stu-id="b15f5-132">Returns the argument at <paramref name="index" />, throwing if <paramref name="index" /> is out of bounds.</span></span> <span data-ttu-id="b15f5-133">この API は、内部でだけ使用します。</span><span class="sxs-lookup"><span data-stu-id="b15f5-133">This API is for internal use only.</span></span></summary>
        <returns><span data-ttu-id="b15f5-134">インデックスの引数。</span><span class="sxs-lookup"><span data-stu-id="b15f5-134">The argument at index.</span></span></returns>
        <remarks><span data-ttu-id="b15f5-135">この API を使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="b15f5-135">You should not use this API.</span></span>  <span data-ttu-id="b15f5-136">これは、アセンブリ リファクタリングのためパブリックのみで、パフォーマンスの最適化のために内部で使用されます。</span><span class="sxs-lookup"><span data-stu-id="b15f5-136">It is only public due to assembly refactoring, and it is used internally for performance optimizations.</span></span></remarks>
      </Docs>
    </Member>
  </Members>
</Type>
