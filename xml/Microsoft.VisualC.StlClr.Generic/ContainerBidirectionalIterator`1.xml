<Type Name="ContainerBidirectionalIterator&lt;TValue&gt;" FullName="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="481b1260c0f2656a3eba7490780a3a5e3cb888b2" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73377094" /></Metadata><TypeSignature Language="C#" Value="public class ContainerBidirectionalIterator&lt;TValue&gt; : Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator&lt;TValue&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ContainerBidirectionalIterator`1&lt;TValue&gt; extends System.Object implements class Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1&lt;!TValue&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />
  <TypeSignature Language="VB.NET" Value="Public Class ContainerBidirectionalIterator(Of TValue)&#xA;Implements IBidirectionalIterator(Of TValue)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TValue&gt;&#xA;public ref class ContainerBidirectionalIterator : Microsoft::VisualC::StlClr::Generic::IBidirectionalIterator&lt;TValue&gt;" />
  <TypeSignature Language="F#" Value="type ContainerBidirectionalIterator&lt;'Value&gt; = class&#xA;    interface IBidirectionalIterator&lt;'Value&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IBaseIterator&lt;TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator&lt;TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IForwardIterator&lt;TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IOutputIterator&lt;TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TValue">[!INCLUDE[cpp_iter_arg](~/includes/cpp-iter-arg-md.md)]</typeparam>
    <summary><span data-ttu-id="676c9-101">インクリメント演算子を使用して前方向に、またデクリメント演算子を使用して後方向にコンテナーの要素にアクセスできる反復子を定義します。</span><span class="sxs-lookup"><span data-stu-id="676c9-101">Defines an iterator that can access elements in a container in the forward direction by using the increment operator and in the backward direction by using the decrement operator.</span></span> <span data-ttu-id="676c9-102">反復子が指す要素については、読み書きの両方を何回でも実行できます。</span><span class="sxs-lookup"><span data-stu-id="676c9-102">The element that the iterator points to can be both written to and read from any number of times.</span></span> <span data-ttu-id="676c9-103">双方向反復子は、入力反復子または出力反復子が必要な場所であればどこででも使用できます。</span><span class="sxs-lookup"><span data-stu-id="676c9-103">Bidirectional iterators can be used anywhere that an input or output iterator is required.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[unnamed_parm](~/includes/unnamed-parm-md.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="676c9-104">新しい <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> オブジェクトを割り当て、初期化します。</span><span class="sxs-lookup"><span data-stu-id="676c9-104">Allocates and initializes a new <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContainerBidirectionalIterator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ContainerBidirectionalIterator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="676c9-105">新しい <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> オブジェクトを割り当て、初期化します。</span><span class="sxs-lookup"><span data-stu-id="676c9-105">Allocates and initializes a new <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContainerBidirectionalIterator (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (_Right As ContainerBidirectionalIterator(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ContainerBidirectionalIterator(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; : Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; -&gt; Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt;" Usage="new Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; _Right" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right"><span data-ttu-id="676c9-106">コピーする既存の <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="676c9-106">An existing <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> object to copy.</span></span></param>
        <summary><span data-ttu-id="676c9-107">既存の <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> オブジェクトから、新しい <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> オブジェクトを割り当て、初期化します。</span><span class="sxs-lookup"><span data-stu-id="676c9-107">Allocates and initializes a new <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> object from an existing <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContainerBidirectionalIterator (Microsoft.VisualC.StlClr.Generic.INode&lt;TValue&gt; _Node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.VisualC.StlClr.Generic.INode`1&lt;!TValue&gt; _Node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (_Node As INode(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ContainerBidirectionalIterator(Microsoft::VisualC::StlClr::Generic::INode&lt;TValue&gt; ^ _Node);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; : Microsoft.VisualC.StlClr.Generic.INode&lt;'Value&gt; -&gt; Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt;" Usage="new Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; _Node" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="_Node" Type="Microsoft.VisualC.StlClr.Generic.INode&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Node"><span data-ttu-id="676c9-108">反復子が指すノード。</span><span class="sxs-lookup"><span data-stu-id="676c9-108">The node that the iterator will point to.</span></span></param>
        <summary><span data-ttu-id="676c9-109">指定のノードを指す新しい <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> オブジェクトを割り当て、初期化します。</span><span class="sxs-lookup"><span data-stu-id="676c9-109">Allocates and initializes a new <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> object that points to the given node.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="containerBidirectionalIterator.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="676c9-110">現在の <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> オブジェクトのコピーを返します。</span><span class="sxs-lookup"><span data-stu-id="676c9-110">Returns a copy of the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="676c9-111">現在の <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> オブジェクトのコピー。</span><span class="sxs-lookup"><span data-stu-id="676c9-111">A copy of the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="container">
      <MemberSignature Language="C#" Value="public virtual object container ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object container() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.container" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function container () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ container();" />
      <MemberSignature Language="F#" Value="abstract member container : unit -&gt; obj&#xA;override this.container : unit -&gt; obj" Usage="containerBidirectionalIterator.container " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="676c9-112">反復子が走査するコンテナーを取得します。</span><span class="sxs-lookup"><span data-stu-id="676c9-112">Gets the container that the iterator is traversing.</span></span></summary>
        <returns><span data-ttu-id="676c9-113">反復子が走査するコンテナー。</span><span class="sxs-lookup"><span data-stu-id="676c9-113">The container that the iterator is traversing.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="equal_to">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="676c9-114">2 つの反復子が同じオブジェクトであるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="676c9-114">Determines if two iterators are the same object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="equal_to">
      <MemberSignature Language="C#" Value="public bool equal_to (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool equal_to(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Function equal_to (_Right As ContainerBidirectionalIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool equal_to(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.equal_to : Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; -&gt; bool" Usage="containerBidirectionalIterator.equal_to _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right"><span data-ttu-id="676c9-115">現在の <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> オブジェクトと比較する <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="676c9-115">The <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> object to compare with the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> object.</span></span></param>
        <summary><span data-ttu-id="676c9-116">指定の <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> オブジェクトが現在の <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> オブジェクトと同じかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="676c9-116">Determines whether the given <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> object is the same as the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="676c9-117">2 つの <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> オブジェクトが同じオブジェクトである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="676c9-117"><see langword="true" /> if the two <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> objects are the same object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="equal_to">
      <MemberSignature Language="C#" Value="public virtual bool equal_to (Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool equal_to(class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function equal_to (_Right As IInputIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool equal_to(Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="abstract member equal_to : Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; -&gt; bool&#xA;override this.equal_to : Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; -&gt; bool" Usage="containerBidirectionalIterator.equal_to _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right"><span data-ttu-id="676c9-118">現在の <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> オブジェクトと比較する <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="676c9-118">The <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> object to compare with the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> object.</span></span></param>
        <summary><span data-ttu-id="676c9-119">指定の <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> オブジェクトが現在の <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> オブジェクトと同じかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="676c9-119">Determines if the given <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> object is the same as the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="676c9-120">2 つの反復子が同じオブジェクトである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="676c9-120"><see langword="true" /> if the two iterators are the same object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="get_bias">
      <MemberSignature Language="C#" Value="public virtual int get_bias ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 get_bias() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.get_bias" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function get_bias () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int get_bias();" />
      <MemberSignature Language="F#" Value="abstract member get_bias : unit -&gt; int&#xA;override this.get_bias : unit -&gt; int" Usage="containerBidirectionalIterator.get_bias " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="676c9-121">反復子のバイアスを取得します。</span><span class="sxs-lookup"><span data-stu-id="676c9-121">Gets the bias of the iterator.</span></span> <span data-ttu-id="676c9-122">バイアスとは、要素ゼロを基準とした反復子のオフセットです。</span><span class="sxs-lookup"><span data-stu-id="676c9-122">The bias is the offset of the iterator from element zero.</span></span></summary>
        <returns><span data-ttu-id="676c9-123">反復子のバイアス。</span><span class="sxs-lookup"><span data-stu-id="676c9-123">The bias of the iterator.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="get_cref">
      <MemberSignature Language="C#" Value="public virtual ref TValue get_cref ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TValue get_cref() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.get_cref" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function get_cref () As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TValue % get_cref();" />
      <MemberSignature Language="F#" Value="abstract member get_cref : unit -&gt; 'Value&#xA;override this.get_cref : unit -&gt; 'Value" Usage="containerBidirectionalIterator.get_cref " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="676c9-124">反復子が現在指している要素への定数参照を返します。</span><span class="sxs-lookup"><span data-stu-id="676c9-124">Returns a constant reference to the element that the iterator is currently pointing to.</span></span></summary>
        <returns><span data-ttu-id="676c9-125">反復子が現在指している要素への定数参照。</span><span class="sxs-lookup"><span data-stu-id="676c9-125">A constant reference to the element that the iterator is currently pointing to.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="get_node">
      <MemberSignature Language="C#" Value="public virtual object get_node ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object get_node() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.get_node" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function get_node () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ get_node();" />
      <MemberSignature Language="F#" Value="abstract member get_node : unit -&gt; obj&#xA;override this.get_node : unit -&gt; obj" Usage="containerBidirectionalIterator.get_node " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="676c9-126">反復子が指しているノード、つまり要素を取得します。</span><span class="sxs-lookup"><span data-stu-id="676c9-126">Gets the node, or element, that the iterator is pointing to.</span></span></summary>
        <returns><span data-ttu-id="676c9-127">反復子が指しているノード。</span><span class="sxs-lookup"><span data-stu-id="676c9-127">The node that the iterator is pointing to.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="get_ref">
      <MemberSignature Language="C#" Value="public virtual ref TValue get_ref ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TValue get_ref() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.get_ref" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function get_ref () As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TValue % get_ref();" />
      <MemberSignature Language="F#" Value="abstract member get_ref : unit -&gt; 'Value&#xA;override this.get_ref : unit -&gt; 'Value" Usage="containerBidirectionalIterator.get_ref " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="676c9-128">反復子が現在指している要素への参照を返します。</span><span class="sxs-lookup"><span data-stu-id="676c9-128">Returns a reference to the element that the iterator is currently pointing to.</span></span></summary>
        <returns><span data-ttu-id="676c9-129">反復子が現在指している要素への参照。</span><span class="sxs-lookup"><span data-stu-id="676c9-129">A reference to the element that the iterator is currently pointing to.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="next">
      <MemberSignature Language="C#" Value="public virtual void next ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void next() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.next" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub next ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void next();" />
      <MemberSignature Language="F#" Value="abstract member next : unit -&gt; unit&#xA;override this.next : unit -&gt; unit" Usage="containerBidirectionalIterator.next " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="676c9-130">基になるコンテナー内の次の位置に反復子をインクリメントします。コンテナーの走査が完了した場合は、コンテナーの末尾を越えた最初の位置にインクリメントします。</span><span class="sxs-lookup"><span data-stu-id="676c9-130">Increments the iterator to the next position in the underlying container, or to the first position beyond the end of container if the container has been completely traversed.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Assign">
      <MemberSignature Language="C#" Value="public Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; op_Assign (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; op_Assign(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public op_Assign (_Right As ContainerBidirectionalIterator(Of TValue)) As ContainerBidirectionalIterator(Of TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ op_Assign(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.op_Assign : Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; -&gt; Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt;" Usage="containerBidirectionalIterator.op_Assign _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right"><span data-ttu-id="676c9-131">現在のオブジェクトに代入する <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="676c9-131">The <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> object to assign to the current object.</span></span></param>
        <summary><span data-ttu-id="676c9-132">指定の <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> オブジェクトを現在のオブジェクトに代入します。</span><span class="sxs-lookup"><span data-stu-id="676c9-132">Assigns the given <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> object to the current object.</span></span></summary>
        <returns><span data-ttu-id="676c9-133">現在のオブジェクト (\*this)。</span><span class="sxs-lookup"><span data-stu-id="676c9-133">The current object (\*this).</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Decrement">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="676c9-134">1 要素ずつ反復子をデクリメントします。</span><span class="sxs-lookup"><span data-stu-id="676c9-134">Decrements the iterator by one element.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Decrement">
      <MemberSignature Language="C#" Value="public void operator -- (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance void op_Decrement(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public op_Decrement (ByRef  As ContainerBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ operator --(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="member this.op_Decrement : ContainerBidirectionalIterator -&gt; unit" Usage="containerBidirectionalIterator.op_Decrement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name=""><span data-ttu-id="676c9-135">現在の反復子への参照。</span><span class="sxs-lookup"><span data-stu-id="676c9-135">A reference to the current iterator.</span></span></param>
        <summary><span data-ttu-id="676c9-136">1 要素ずつ反復子をデクリメントします。</span><span class="sxs-lookup"><span data-stu-id="676c9-136">Decrements the iterator by one element.</span></span> <span data-ttu-id="676c9-137">これは前置バージョンのデクリメント演算子です。</span><span class="sxs-lookup"><span data-stu-id="676c9-137">This is the prefix version of the decrement operator.</span></span></summary>
        <returns><span data-ttu-id="676c9-138">反復子。</span><span class="sxs-lookup"><span data-stu-id="676c9-138">An iterator.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Decrement">
      <MemberSignature Language="C#" Value="public void operator -- (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; , int );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class System.void op_Decrement(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; , int32 ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public op_Decrement (ByRef  As ContainerBidirectionalIterator(Of TValue),  As Integer) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ operator --(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % , int );" />
      <MemberSignature Language="F#" Value="member this.op_Decrement :  * int -&gt; unit" Usage="containerBidirectionalIterator.op_Decrement (, )" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="System.Int32" RefType="ref" />
        <Parameter Name="A_0" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name=""><span data-ttu-id="676c9-139">現在の反復子への参照。</span><span class="sxs-lookup"><span data-stu-id="676c9-139">A reference to the current iterator.</span></span></param>
        <param name="A_0"><span data-ttu-id="676c9-140">これが後置バージョンの演算子であることを示す未使用のパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="676c9-140">An unused parameter that indicates this is the postfix version of the operator.</span></span></param>
        <summary><span data-ttu-id="676c9-141">1 要素ずつ反復子をデクリメントします。</span><span class="sxs-lookup"><span data-stu-id="676c9-141">Decrements the iterator by one element.</span></span> <span data-ttu-id="676c9-142">これは、後置バージョンのデクリメント演算子です。</span><span class="sxs-lookup"><span data-stu-id="676c9-142">This is the postfix version of the decrement operator.</span></span></summary>
        <returns><span data-ttu-id="676c9-143">反復子。</span><span class="sxs-lookup"><span data-stu-id="676c9-143">An iterator.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Equality">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="676c9-144">2 つの反復子が同じオブジェクトであるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="676c9-144">Determines whether two iterators are the same object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public bool operator == (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_Equality(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Operator == (_Right As ContainerBidirectionalIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator ==(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.( = ) : Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; -&gt; bool" Usage="= _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right"><span data-ttu-id="676c9-145">現在の <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> オブジェクトと比較する <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="676c9-145">The <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> object to compare with the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> object.</span></span></param>
        <summary><span data-ttu-id="676c9-146">指定の <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> オブジェクトが現在の <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> オブジェクトと同じかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="676c9-146">Determines whether the given <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> object is the same as the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="676c9-147">2 つの反復子が同じオブジェクトである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="676c9-147"><see langword="true" /> if the two iterators are the same object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public bool operator == (Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_Equality(class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Operator == (_Right As IInputIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator ==(Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.( = ) : Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; -&gt; bool" Usage="= _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right"><span data-ttu-id="676c9-148">現在の <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> オブジェクトと比較する <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="676c9-148">The <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> object to compare with the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> object.</span></span></param>
        <summary><span data-ttu-id="676c9-149">指定の <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> オブジェクトが現在の <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> オブジェクトと同じかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="676c9-149">Determines whether the given <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> object is the same as the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="676c9-150">2 つの反復子が同じオブジェクトである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="676c9-150"><see langword="true" /> if the two iterators are the same object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public implicit operator Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator&lt;TValue&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1&lt;!TValue&gt; op_Implicit() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Widening Operator CType () As IBidirectionalIterator(Of TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; operator Microsoft::VisualC::StlClr::Generic::IBidirectionalIterator&lt;TValue&gt; ^();" />
      <MemberSignature Language="F#" Value="member this.op_Implicit : unit -&gt; Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator&lt;'Value&gt;" Usage="containerBidirectionalIterator.op_Implicit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="676c9-151"><see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> を <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" /> に変換します。</span><span class="sxs-lookup"><span data-stu-id="676c9-151">Converts a <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> to an <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />.</span></span></summary>
        <returns><span data-ttu-id="676c9-152"><see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" /> としての現在の反復子。</span><span class="sxs-lookup"><span data-stu-id="676c9-152">The current iterator as an <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Increment">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="676c9-153">1 要素ずつ反復子をインクリメントします。</span><span class="sxs-lookup"><span data-stu-id="676c9-153">Increments the iterator by one element.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Increment">
      <MemberSignature Language="C#" Value="public void operator ++ (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance void op_Increment(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public op_Increment (ByRef  As ContainerBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ operator ++(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="member this.op_Increment : ContainerBidirectionalIterator -&gt; unit" Usage="containerBidirectionalIterator.op_Increment " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name=""><span data-ttu-id="676c9-154">現在の反復子への参照。</span><span class="sxs-lookup"><span data-stu-id="676c9-154">A reference to the current iterator.</span></span></param>
        <summary><span data-ttu-id="676c9-155">1 要素ずつ反復子をインクリメントします。</span><span class="sxs-lookup"><span data-stu-id="676c9-155">Increments the iterator by one element.</span></span> <span data-ttu-id="676c9-156">これは前置バージョンのインクリメント演算子です。</span><span class="sxs-lookup"><span data-stu-id="676c9-156">This is the prefix version of the increment operator.</span></span></summary>
        <returns><span data-ttu-id="676c9-157">反復子。</span><span class="sxs-lookup"><span data-stu-id="676c9-157">An iterator.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Increment">
      <MemberSignature Language="C#" Value="public void operator ++ (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; , int );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class System.void op_Increment(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; , int32 ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public op_Increment (ByRef  As ContainerBidirectionalIterator(Of TValue),  As Integer) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ operator ++(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % , int );" />
      <MemberSignature Language="F#" Value="member this.op_Increment :  * int -&gt; unit" Usage="containerBidirectionalIterator.op_Increment (, )" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="System.Int32" RefType="ref" />
        <Parameter Name="A_0" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name=""><span data-ttu-id="676c9-158">現在の反復子への参照。</span><span class="sxs-lookup"><span data-stu-id="676c9-158">A reference to the current iterator.</span></span></param>
        <param name="A_0"><span data-ttu-id="676c9-159">これが後置バージョンの演算子であることを示す未使用のパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="676c9-159">An unused parameter that indicates this is the postfix version of the operator.</span></span></param>
        <summary><span data-ttu-id="676c9-160">1 要素ずつ反復子をインクリメントします。</span><span class="sxs-lookup"><span data-stu-id="676c9-160">Increments the iterator by one element.</span></span> <span data-ttu-id="676c9-161">これは、後置バージョンのインクリメント演算子です。</span><span class="sxs-lookup"><span data-stu-id="676c9-161">This is the postfix version of the increment operator.</span></span></summary>
        <returns><span data-ttu-id="676c9-162">反復子。</span><span class="sxs-lookup"><span data-stu-id="676c9-162">An iterator.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Inequality">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="676c9-163">2 つの反復子が同じオブジェクトでないかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="676c9-163">Determines whether two iterators are not the same object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public bool operator != (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_Inequality(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Operator != (_Right As ContainerBidirectionalIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator !=(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.op_Inequality : Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; -&gt; bool" Usage="containerBidirectionalIterator.op_Inequality _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right"><span data-ttu-id="676c9-164">現在の <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> オブジェクトと比較する <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="676c9-164">The <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> object to compare with the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> object.</span></span></param>
        <summary><span data-ttu-id="676c9-165">指定の <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> オブジェクトが現在の <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> オブジェクトと異なるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="676c9-165">Determines whether the given <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> object differs from the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="676c9-166">2 つの反復子が異なるオブジェクトの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="676c9-166"><see langword="true" /> if the two iterators are different objects; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public bool operator != (Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_Inequality(class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Operator != (_Right As IInputIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator !=(Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.op_Inequality : Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; -&gt; bool" Usage="containerBidirectionalIterator.op_Inequality _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right"><span data-ttu-id="676c9-167">現在の <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> オブジェクトと比較する <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="676c9-167">The <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> object to compare with the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> object.</span></span></param>
        <summary><span data-ttu-id="676c9-168">指定の <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> オブジェクトが現在の <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> オブジェクトと異なるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="676c9-168">Determines whether the given <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> object differs from the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="676c9-169">2 つの反復子が異なるオブジェクトの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="676c9-169"><see langword="true" /> if the two iterators are different objects; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_MemberSelection">
      <MemberSignature Language="C#" Value="public static ref TValue op_MemberSelection (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Left);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname !TValue op_MemberSelection(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Left) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_MemberSelection (_Left As ContainerBidirectionalIterator(Of TValue)) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TValue % op_MemberSelection(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Left);" />
      <MemberSignature Language="F#" Value="static member op_MemberSelection : Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; -&gt; 'Value" Usage="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt;.op_MemberSelection _Left" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1000")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue RefType="Ref">
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Left" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Left"><span data-ttu-id="676c9-170">演算子が適用される反復子。</span><span class="sxs-lookup"><span data-stu-id="676c9-170">The iterator that the operator is applied to.</span></span></param>
        <summary><span data-ttu-id="676c9-171">反復子が現在指している要素への参照を返します。</span><span class="sxs-lookup"><span data-stu-id="676c9-171">Returns the element that the iterator is currently pointing to.</span></span></summary>
        <returns><span data-ttu-id="676c9-172">反復子が現在指している要素。</span><span class="sxs-lookup"><span data-stu-id="676c9-172">The element that the iterator is currently pointing to.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_PointerDereference">
      <MemberSignature Language="C#" Value="public static ref TValue op_PointerDereference (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Left);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname !TValue op_PointerDereference(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Left) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_PointerDereference (_Left As ContainerBidirectionalIterator(Of TValue)) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TValue % op_PointerDereference(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Left);" />
      <MemberSignature Language="F#" Value="static member op_PointerDereference : Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; -&gt; 'Value" Usage="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt;.op_PointerDereference _Left" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1000")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue RefType="Ref">
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Left" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Left"><span data-ttu-id="676c9-173">演算子が適用される反復子。</span><span class="sxs-lookup"><span data-stu-id="676c9-173">The iterator that the operator is applied to.</span></span></param>
        <summary><span data-ttu-id="676c9-174">反復子が現在指している要素への参照を返します。</span><span class="sxs-lookup"><span data-stu-id="676c9-174">Returns the element that the iterator is currently pointing to.</span></span></summary>
        <returns><span data-ttu-id="676c9-175">反復子が現在指している要素。</span><span class="sxs-lookup"><span data-stu-id="676c9-175">The element that the iterator is currently pointing to.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="prev">
      <MemberSignature Language="C#" Value="public virtual void prev ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void prev() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.prev" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub prev ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void prev();" />
      <MemberSignature Language="F#" Value="abstract member prev : unit -&gt; unit&#xA;override this.prev : unit -&gt; unit" Usage="containerBidirectionalIterator.prev " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1.prev</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="676c9-176">現在の要素の直前の要素に反復子を移動します。</span><span class="sxs-lookup"><span data-stu-id="676c9-176">Positions the iterator to the element immediately before the current element.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="valid">
      <MemberSignature Language="C#" Value="public virtual bool valid ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool valid() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.valid" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function valid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool valid();" />
      <MemberSignature Language="F#" Value="abstract member valid : unit -&gt; bool&#xA;override this.valid : unit -&gt; bool" Usage="containerBidirectionalIterator.valid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="676c9-177">反復子が有効で、基になるコンテナーの走査のために安全に使用できるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="676c9-177">Determines whether the iterator is valid and can be safely used to traverse the underlying container.</span></span></summary>
        <returns><span data-ttu-id="676c9-178">反復子が有効で安全に使用できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="676c9-178"><see langword="true" /> if the iterator is valid and safe to use; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
