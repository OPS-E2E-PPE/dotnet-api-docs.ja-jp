<Type Name="ExportProvider" FullName="System.ComponentModel.Composition.Hosting.ExportProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f4a366a8164cfcae2b12638c58afc7e811df7546" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73375263" /></Metadata><TypeSignature Language="C#" Value="public abstract class ExportProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExportProvider extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Composition.Hosting.ExportProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExportProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExportProvider abstract" />
  <TypeSignature Language="F#" Value="type ExportProvider = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Composition</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>指定した <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> オブジェクトと一致するエクスポートを取得します。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExportProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExportProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportsChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; ExportsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; ExportsChanged" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ExportsChanged As EventHandler(Of ExportsChangeEventArgs) " FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::ComponentModel::Composition::Hosting::ExportsChangeEventArgs ^&gt; ^ ExportsChanged;" />
      <MemberSignature Language="F#" Value="member this.ExportsChanged : EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; " Usage="member this.ExportsChanged : System.EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; " />
      <MemberSignature Language="VB.NET" Value="Public Event ExportsChanged As EventHandler(Of ExportsChangeEventArgs) " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> 内のエクスポートが変更されたときに発生します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportsChanging">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; ExportsChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; ExportsChanging" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ExportsChanging As EventHandler(Of ExportsChangeEventArgs) " FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::ComponentModel::Composition::Hosting::ExportsChangeEventArgs ^&gt; ^ ExportsChanging;" />
      <MemberSignature Language="F#" Value="member this.ExportsChanging : EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; " Usage="member this.ExportsChanging : System.EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; " />
      <MemberSignature Language="VB.NET" Value="Public Event ExportsChanging As EventHandler(Of ExportsChangeEventArgs) " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>提供されるエクスポートが変更されているときに発生します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExport&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したエクスポートを取得します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExport&lt;T&gt;">
      <MemberSignature Language="C#" Value="public Lazy&lt;T&gt; GetExport&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Lazy`1&lt;!!T&gt; GetExport&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport(Of T) () As Lazy(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; Lazy&lt;T&gt; ^ GetExport();" />
      <MemberSignature Language="F#" Value="member this.GetExport : unit -&gt; Lazy&lt;'T&gt;" Usage="exportProvider.GetExport " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">返す <see cref="T:System.Lazy`1" /> オブジェクトの型パラメーター。 コントラクト名もこの型パラメーターから派生します。</typeparam>
        <summary>指定した型パラメーターから派生したコントラクト名を持つエクスポートを返します。 一致するエクスポートが 1 つだけある場合以外は、例外がスローされます。</summary>
        <returns>指定した型パラメーターから派生したコントラクト名を持つエクスポート。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コントラクト名は、`T` で <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> メソッドを呼び出した結果です。  
  
 コントラクト名を比較するには、<xref:System.StringComparer.Ordinal%2A> プロパティを使用して、大文字と小文字を区別する、非言語的な比較を実行します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException"><see cref="T:System.Lazy`1" /> オブジェクト内に、<paramref name="T" /> から派生したコントラクト名を持つ <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> オブジェクトがありません。  
  
- または - 
<see cref="T:System.Lazy`1" /> オブジェクト内に、<paramref name="T" /> から派生したコントラクト名を持つ <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> オブジェクトが複数あります。</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> オブジェクトは破棄されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExport&lt;T&gt;">
      <MemberSignature Language="C#" Value="public Lazy&lt;T&gt; GetExport&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Lazy`1&lt;!!T&gt; GetExport&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport(Of T) (contractName As String) As Lazy(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; Lazy&lt;T&gt; ^ GetExport(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExport : string -&gt; Lazy&lt;'T&gt;" Usage="exportProvider.GetExport contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">返す <see cref="T:System.Lazy`1" /> オブジェクトの型パラメーター。</typeparam>
        <param name="contractName">返す <see cref="T:System.Lazy`1" /> オブジェクトのコントラクト名。<see langword="null" /> または空の文字列 ("") を指定すると、既定のコントラクト名が使用されます。</param>
        <summary>指定したコントラクト名を持つエクスポートを返します。 一致するエクスポートが 1 つだけある場合以外は、例外がスローされます。</summary>
        <returns>指定したコントラクト名を持つエクスポート。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定のコントラクト名は、`T`で <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> メソッドを呼び出した結果です。  
  
 コントラクト名を比較するには、<xref:System.StringComparer.Ordinal%2A> プロパティを使用して、大文字と小文字を区別する、非言語的な比較を実行します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException"><see cref="T:System.Lazy`1" /> オブジェクト内に、<paramref name="T" /> から派生したコントラクト名を持つ <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> オブジェクトがありません。  
  
- または - 
<see cref="T:System.Lazy`1" /> オブジェクト内に、<paramref name="T" /> から派生したコントラクト名を持つ <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> オブジェクトが複数あります。</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> オブジェクトは破棄されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExport&lt;T,TMetadataView&gt;">
      <MemberSignature Language="C#" Value="public Lazy&lt;T,TMetadataView&gt; GetExport&lt;T,TMetadataView&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Lazy`2&lt;!!T, !!TMetadataView&gt; GetExport&lt;T, TMetadataView&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport(Of T, TMetadataView) () As Lazy(Of T, TMetadataView)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TMetadataView&gt;&#xA; Lazy&lt;T, TMetadataView&gt; ^ GetExport();" />
      <MemberSignature Language="F#" Value="member this.GetExport : unit -&gt; Lazy&lt;'T, 'MetadataView&gt;" Usage="exportProvider.GetExport " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;T,TMetadataView&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TMetadataView" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">返す <see cref="T:System.Lazy`2" /> オブジェクトの型パラメーター。 コントラクト名もこの型パラメーターから派生します。</typeparam>
        <typeparam name="TMetadataView">返す <see cref="T:System.Lazy`2" /> オブジェクトのメタデータ ビューの型。</typeparam>
        <summary>指定した型パラメーターから派生したコントラクト名を持つエクスポートを返します。 一致するエクスポートが 1 つだけある場合以外は、例外がスローされます。</summary>
        <returns>System.Lazy`2</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コントラクト名は、`T` で <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> メソッドを呼び出した結果です。  
  
 コントラクト名を比較するには、<xref:System.StringComparer.Ordinal%2A> プロパティを使用して、大文字と小文字を区別する、非言語的な比較を実行します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException"><see cref="T:System.Lazy`2" /> オブジェクト内に、<paramref name="T" /> から派生したコントラクト名を持つ <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> オブジェクトがありません。  
  
- または - 
<see cref="T:System.Lazy`2" /> オブジェクト内に、<paramref name="T" /> から派生したコントラクト名を持つ <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> オブジェクトが複数あります。</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> オブジェクトは破棄されました。</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="TMetadataView" /> が、有効なメタデータ ビューの型ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExport&lt;T,TMetadataView&gt;">
      <MemberSignature Language="C#" Value="public Lazy&lt;T,TMetadataView&gt; GetExport&lt;T,TMetadataView&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Lazy`2&lt;!!T, !!TMetadataView&gt; GetExport&lt;T, TMetadataView&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport(Of T, TMetadataView) (contractName As String) As Lazy(Of T, TMetadataView)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TMetadataView&gt;&#xA; Lazy&lt;T, TMetadataView&gt; ^ GetExport(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExport : string -&gt; Lazy&lt;'T, 'MetadataView&gt;" Usage="exportProvider.GetExport contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;T,TMetadataView&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TMetadataView" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">返す <see cref="T:System.Lazy`2" /> オブジェクトの型パラメーター。</typeparam>
        <typeparam name="TMetadataView">返す <see cref="T:System.Lazy`2" /> オブジェクトのメタデータ ビューの型。</typeparam>
        <param name="contractName">返す <see cref="T:System.Lazy`2" /> オブジェクトのコントラクト名。<see langword="null" /> または空の文字列 ("") を指定すると、既定のコントラクト名が使用されます。</param>
        <summary>指定したコントラクト名を持つエクスポートを返します。 一致するエクスポートが 1 つだけある場合以外は、例外がスローされます。</summary>
        <returns>指定したコントラクト名を持つエクスポート。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定のコントラクト名は、`T`で <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> メソッドを呼び出した結果です。  
  
 コントラクト名を比較するには、<xref:System.StringComparer.Ordinal%2A> プロパティを使用して、大文字と小文字を区別する、非言語的な比較を実行します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException"><see cref="T:System.Lazy`2" /> オブジェクト内に、<paramref name="T" /> から派生したコントラクト名を持つ <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> オブジェクトがありません。  
  
- または - 
<see cref="T:System.Lazy`2" /> オブジェクト内に、<paramref name="T" /> から派生したコントラクト名を持つ <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> オブジェクトが複数あります。</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> オブジェクトは破棄されました。</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="TMetadataView" /> が、有効なメタデータ ビューの型ではありません。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExportedValue&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>エクスポート オブジェクトを取得します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExportedValue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetExportedValue&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetExportedValue&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValue(Of T) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetExportedValue();" />
      <MemberSignature Language="F#" Value="member this.GetExportedValue : unit -&gt; 'T" Usage="exportProvider.GetExportedValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">返すエクスポート オブジェクトの型。 コントラクト名もこの型パラメーターから派生します。</typeparam>
        <summary>指定した型パラメーターから派生したコントラクト名を持つエクスポート オブジェクトを返します。 一致するエクスポート オブジェクトが 1 つだけある場合以外は、例外がスローされます。</summary>
        <returns>指定した型パラメーターから派生したコントラクト名を持つエクスポート オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コントラクト名は、`T` で <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> メソッドを呼び出した結果です。  
  
 コントラクト名を比較するには、<xref:System.StringComparer.Ordinal%2A> プロパティを使用して、大文字と小文字を区別する、非言語的な比較を実行します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException"><see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 内に、<paramref name="T" /> から派生したコントラクト名を持つエクスポート オブジェクトがありません。  
  
- または - 
<see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 内に、<paramref name="T" /> から派生したコントラクト名を持つエクスポート オブジェクトが複数あります。</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> オブジェクトは破棄されました。</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">基になるエクスポート オブジェクトを <paramref name="T" /> にキャストすることはできません。</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">合成中にエラーが発生しました。 <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> には、発生したエラーのコレクションが格納されます。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExportedValue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetExportedValue&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetExportedValue&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValue(Of T) (contractName As String) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetExportedValue(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExportedValue : string -&gt; 'T" Usage="exportProvider.GetExportedValue contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">返すエクスポート オブジェクトの型。</typeparam>
        <param name="contractName">返すエクスポート オブジェクトのコントラクト名。<see langword="null" /> または空の文字列 ("") を指定すると、既定のコントラクト名が使用されます。</param>
        <summary>指定したコントラクト名を持つエクスポート オブジェクトを返します。 一致するエクスポート オブジェクトが 1 つだけある場合以外は、例外がスローされます。</summary>
        <returns>指定したコントラクト名を持つエクスポート オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定のコントラクト名は、`T`で <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> メソッドを呼び出した結果です。  
  
 コントラクト名を比較するには、<xref:System.StringComparer.Ordinal%2A> プロパティを使用して、大文字と小文字を区別する、非言語的な比較を実行します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException"><see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 内に、<paramref name="T" /> から派生したコントラクト名を持つエクスポート オブジェクトがありません。  
  
- または - 
<see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 内に、<paramref name="T" /> から派生したコントラクト名を持つエクスポート オブジェクトが複数あります。</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> オブジェクトは破棄されました。</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">基になるエクスポート オブジェクトを <paramref name="T" /> にキャストすることはできません。</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">合成中にエラーが発生しました。 <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> には、発生したエラーのコレクションが格納されます。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExportedValueOrDefault&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したエクスポート オブジェクトを取得します。一致するオブジェクトがない場合は、既定値を取得します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExportedValueOrDefault&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetExportedValueOrDefault&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetExportedValueOrDefault&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValueOrDefault(Of T) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetExportedValueOrDefault();" />
      <MemberSignature Language="F#" Value="member this.GetExportedValueOrDefault : unit -&gt; 'T" Usage="exportProvider.GetExportedValueOrDefault " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">返すエクスポート オブジェクトの型。 コントラクト名もこの型パラメーターから派生します。</typeparam>
        <summary>指定した型パラメーターから派生したコントラクト名を持つエクスポート オブジェクト、または指定した型の既定値を取得します。一致するエクスポート オブジェクトが複数ある場合は、例外がスローされます。</summary>
        <returns><paramref name="T" /> から派生したコントラクト名を持つエクスポート オブジェクトが見つかった場合はそのオブジェクト。それ以外の場合は <paramref name="T" /> の既定値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 エクスポートされたオブジェクトが見つからない場合、このメソッドは `T`に対して適切な既定値を返します。たとえば、整数型の場合は0、ブール型の場合は `false`、参照型の場合は `null` です。  
  
 コントラクト名は、`T` で <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> メソッドを呼び出した結果です。  
  
 コントラクト名を比較するには、<xref:System.StringComparer.Ordinal%2A> プロパティを使用して、大文字と小文字を区別する、非言語的な比較を実行します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException"><see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 内に、<paramref name="T" /> から派生したコントラクト名を持つエクスポート オブジェクトが複数あります。</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> オブジェクトは破棄されました。</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">基になるエクスポート オブジェクトを <paramref name="T" /> にキャストすることはできません。</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">合成中にエラーが発生しました。 <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> には、発生したエラーのコレクションが格納されます。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExportedValueOrDefault&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetExportedValueOrDefault&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetExportedValueOrDefault&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValueOrDefault(Of T) (contractName As String) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetExportedValueOrDefault(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExportedValueOrDefault : string -&gt; 'T" Usage="exportProvider.GetExportedValueOrDefault contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">返すエクスポート オブジェクトの型。</typeparam>
        <param name="contractName">返すエクスポート オブジェクトのコントラクト名。<see langword="null" /> または空の文字列 ("") を指定すると、既定のコントラクト名が使用されます。</param>
        <summary>指定したコントラクト名を持つエクスポート オブジェクト、または指定した型の既定値を取得します。一致するエクスポート オブジェクトが複数ある場合は、例外がスローされます。</summary>
        <returns>指定したコントラクト名を持つエクスポート オブジェクトが見つかった場合はそのオブジェクト。それ以外の場合は <paramref name="T" /> の既定値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 エクスポートされたオブジェクトが見つからない場合、このメソッドは `T`に対して適切な既定値を返します。たとえば、整数型の場合は0、ブール型の場合は `false`、参照型の場合は `null` です。  
  
 既定のコントラクト名は、`T`で <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> メソッドを呼び出した結果です。  
  
 コントラクト名を比較するには、<xref:System.StringComparer.Ordinal%2A> プロパティを使用して、大文字と小文字を区別する、非言語的な比較を実行します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException"><see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 内に、指定されたコントラクト名を持つエクスポート オブジェクトが複数あります。</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> オブジェクトは破棄されました。</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">基になるエクスポート オブジェクトを <paramref name="T" /> にキャストすることはできません。</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">合成中にエラーが発生しました。 <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> には、発生したエラーのコレクションが格納されます。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExportedValues&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>1 つ以上のエクスポート オブジェクトを取得します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExportedValues&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;T&gt; GetExportedValues&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; GetExportedValues&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValues(Of T) () As IEnumerable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::Generic::IEnumerable&lt;T&gt; ^ GetExportedValues();" />
      <MemberSignature Language="F#" Value="member this.GetExportedValues : unit -&gt; seq&lt;'T&gt;" Usage="exportProvider.GetExportedValues " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">返すエクスポート オブジェクトの型。 コントラクト名もこの型パラメーターから派生します。</typeparam>
        <summary>指定した型パラメーターから派生したコントラクト名を持つすべてのエクスポート オブジェクトを取得します。</summary>
        <returns>指定した型パラメーターから派生したコントラクト名を持つエクスポート オブジェクトが見つかった場合は、それらのオブジェクト。それ以外の場合は、空の <see cref="T:System.Collections.ObjectModel.Collection`1" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コントラクト名は、`T` で <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> メソッドを呼び出した結果です。  
  
 コントラクト名を比較するには、<xref:System.StringComparer.Ordinal%2A> プロパティを使用して、大文字と小文字を区別する、非言語的な比較を実行します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> オブジェクトは破棄されました。</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">1 つ以上の基になるエクスポートされたオブジェクトを <paramref name="T" /> にキャストすることはできません。</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">合成中にエラーが発生しました。 <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> には、発生したエラーのコレクションが格納されます。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExportedValues&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;T&gt; GetExportedValues&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; GetExportedValues&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValues(Of T) (contractName As String) As IEnumerable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::Generic::IEnumerable&lt;T&gt; ^ GetExportedValues(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExportedValues : string -&gt; seq&lt;'T&gt;" Usage="exportProvider.GetExportedValues contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">返すエクスポート オブジェクトの型。</typeparam>
        <param name="contractName">返すエクスポート オブジェクトのコントラクト名。<see langword="null" /> または空の文字列 ("") を指定すると、既定のコントラクト名が使用されます。</param>
        <summary>指定したコントラクト名を持つすべてのエクスポート オブジェクトを取得します。</summary>
        <returns>指定したコントラクト名を持つエクスポート オブジェクトが見つかった場合は、それらのオブジェクト。それ以外の場合は、空の <see cref="T:System.Collections.ObjectModel.Collection`1" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定のコントラクト名は、`T`で <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> メソッドを呼び出した結果です。  
  
 コントラクト名を比較するには、<xref:System.StringComparer.Ordinal%2A> プロパティを使用して、大文字と小文字を区別する、非言語的な比較を実行します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> オブジェクトは破棄されました。</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">1 つ以上の基になるエクスポートされた値を <paramref name="T" /> にキャストすることはできません。</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">合成中にエラーが発生しました。 <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> には、発生したエラーのコレクションが格納されます。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExports">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した条件に一致するすべてのエクスポートを取得します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExports">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt; GetExports (System.ComponentModel.Composition.Primitives.ImportDefinition definition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.Export&gt; GetExports(class System.ComponentModel.Composition.Primitives.ImportDefinition definition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports (definition As ImportDefinition) As IEnumerable(Of Export)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::Export ^&gt; ^ GetExports(System::ComponentModel::Composition::Primitives::ImportDefinition ^ definition);" />
      <MemberSignature Language="F#" Value="member this.GetExports : System.ComponentModel.Composition.Primitives.ImportDefinition -&gt; seq&lt;System.ComponentModel.Composition.Primitives.Export&gt;" Usage="exportProvider.GetExports definition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
      </Parameters>
      <Docs>
        <param name="definition">取得する <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> オブジェクトの条件を定義するオブジェクト。</param>
        <summary>指定したインポート定義の条件に一致するすべてのエクスポートを取得します。</summary>
        <returns><paramref name="definition" /> で指定した条件に一致するすべての <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> オブジェクトのコレクション。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException"><see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> が <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> であり、<see cref="T:System.ComponentModel.Composition.Primitives.Export" /> で指定された条件に一致する <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> オブジェクトの数がゼロです。  
  
- または - 
 <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> が <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> または <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> であり、<see cref="T:System.ComponentModel.Composition.Primitives.Export" /> で指定された条件に一致する <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> オブジェクトが 2 つ以上あります。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="definition" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt; GetExports (System.ComponentModel.Composition.Primitives.ImportDefinition definition, System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.Export&gt; GetExports(class System.ComponentModel.Composition.Primitives.ImportDefinition definition, class System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::Export ^&gt; ^ GetExports(System::ComponentModel::Composition::Primitives::ImportDefinition ^ definition, System::ComponentModel::Composition::Hosting::AtomicComposition ^ atomicComposition);" />
      <MemberSignature Language="F#" Value="member this.GetExports : System.ComponentModel.Composition.Primitives.ImportDefinition * System.ComponentModel.Composition.Hosting.AtomicComposition -&gt; seq&lt;System.ComponentModel.Composition.Primitives.Export&gt;" Usage="exportProvider.GetExports (definition, atomicComposition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
        <Parameter Name="atomicComposition" Type="System.ComponentModel.Composition.Hosting.AtomicComposition" />
      </Parameters>
      <Docs>
        <param name="definition">取得する <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> オブジェクトの条件を定義するオブジェクト。</param>
        <param name="atomicComposition">合成のトランザクション コンテナー。</param>
        <summary>指定されたインポート定義および合成の条件に一致するすべてのエクスポートを取得します。</summary>
        <returns><paramref name="definition" /> および <paramref name="atomicComposition" /> で指定した条件に一致するすべての <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> オブジェクトのコレクション。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException"><see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> が <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> であり、<see cref="T:System.ComponentModel.Composition.Primitives.Export" /> で指定された条件に一致する <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> オブジェクトの数がゼロです。  
  
- または - 
 <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> が <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> または <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> であり、<see cref="T:System.ComponentModel.Composition.Primitives.Export" /> で指定された条件に一致する <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> オブジェクトが 2 つ以上あります。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="definition" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="atomicComposition" /> は <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;object,object&gt;&gt; GetExports (Type type, Type metadataViewType, string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`2&lt;object, object&gt;&gt; GetExports(class System.Type type, class System.Type metadataViewType, string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.Type,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;System::Object ^, System::Object ^&gt; ^&gt; ^ GetExports(Type ^ type, Type ^ metadataViewType, System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExports : Type * Type * string -&gt; seq&lt;Lazy&lt;obj, obj&gt;&gt;" Usage="exportProvider.GetExports (type, metadataViewType, contractName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;System.Object,System.Object&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="metadataViewType" Type="System.Type" />
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">返す <see cref="T:System.Lazy`2" /> オブジェクトの型パラメーター。</param>
        <param name="metadataViewType">返す <see cref="T:System.Lazy`2" /> オブジェクトのメタデータ ビューの型。</param>
        <param name="contractName">返す <see cref="T:System.Lazy`2" /> オブジェクトのコントラクト名。<see langword="null" /> または空の文字列 ("") を指定すると、既定のコントラクト名が使用されます。</param>
        <summary>指定したコントラクト名を持つすべてのエクスポートを取得します。</summary>
        <returns><paramref name="contractName" /> に一致するコントラクトのすべての <see cref="T:System.Lazy`2" /> オブジェクトのコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定のコントラクト名は、`type`で <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> メソッドを呼び出した結果です。  
  
 コントラクト名を比較するには、<xref:System.StringComparer.Ordinal%2A> プロパティを使用して、大文字と小文字を区別する、非言語的な比較を実行します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> オブジェクトは破棄されました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="type" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="metadataViewType" /> が、有効なメタデータ ビューの型ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;T&gt;&gt; GetExports&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`1&lt;!!T&gt;&gt; GetExports&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports(Of T) () As IEnumerable(Of Lazy(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;T&gt; ^&gt; ^ GetExports();" />
      <MemberSignature Language="F#" Value="member this.GetExports : unit -&gt; seq&lt;Lazy&lt;'T&gt;&gt;" Usage="exportProvider.GetExports " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">返す <see cref="T:System.Lazy`1" /> オブジェクトの型パラメーター。 コントラクト名もこの型パラメーターから派生します。</typeparam>
        <summary>指定した型パラメーターから派生したコントラクト名を持つすべてのエクスポートを取得します。</summary>
        <returns><paramref name="T" /> から派生したコントラクト名を持つ <see cref="T:System.Lazy`1" /> オブジェクトが見つかった場合は、それらのオブジェクト。それ以外の場合は、空の <see cref="T:System.Collections.Generic.IEnumerable`1" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コントラクト名は、`T` で <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> メソッドを呼び出した結果です。  
  
 コントラクト名を比較するには、<xref:System.StringComparer.Ordinal%2A> プロパティを使用して、大文字と小文字を区別する、非言語的な比較を実行します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> オブジェクトは破棄されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;T&gt;&gt; GetExports&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`1&lt;!!T&gt;&gt; GetExports&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports(Of T) (contractName As String) As IEnumerable(Of Lazy(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;T&gt; ^&gt; ^ GetExports(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExports : string -&gt; seq&lt;Lazy&lt;'T&gt;&gt;" Usage="exportProvider.GetExports contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">返す <see cref="T:System.Lazy`1" /> オブジェクトの型パラメーター。</typeparam>
        <param name="contractName">返す <see cref="T:System.Lazy`1" /> オブジェクトのコントラクト名。<see langword="null" /> または空の文字列 ("") を指定すると、既定のコントラクト名が使用されます。</param>
        <summary>指定したコントラクト名を持つすべてのエクスポートを取得します。</summary>
        <returns>指定したコントラクト名を持つ <see cref="T:System.Lazy`1" /> オブジェクトが見つかった場合は、それらのオブジェクト。それ以外の場合は、空の <see cref="T:System.Collections.Generic.IEnumerable`1" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定のコントラクト名は、`T`で <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> メソッドを呼び出した結果です。  
  
 コントラクト名を比較するには、<xref:System.StringComparer.Ordinal%2A> プロパティを使用して、大文字と小文字を区別する、非言語的な比較を実行します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> オブジェクトは破棄されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports&lt;T,TMetadataView&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;T,TMetadataView&gt;&gt; GetExports&lt;T,TMetadataView&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`2&lt;!!T, !!TMetadataView&gt;&gt; GetExports&lt;T, TMetadataView&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports(Of T, TMetadataView) () As IEnumerable(Of Lazy(Of T, TMetadataView))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TMetadataView&gt;&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;T, TMetadataView&gt; ^&gt; ^ GetExports();" />
      <MemberSignature Language="F#" Value="member this.GetExports : unit -&gt; seq&lt;Lazy&lt;'T, 'MetadataView&gt;&gt;" Usage="exportProvider.GetExports " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;T,TMetadataView&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TMetadataView" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">返す <see cref="T:System.Lazy`2" /> オブジェクトの型パラメーター。 コントラクト名もこの型パラメーターから派生します。</typeparam>
        <typeparam name="TMetadataView">返す <see cref="T:System.Lazy`2" /> オブジェクトのメタデータ ビューの型。</typeparam>
        <summary>指定した型パラメーターから派生したコントラクト名を持つすべてのエクスポートを取得します。</summary>
        <returns><paramref name="T" /> から派生したコントラクト名を持つ <see cref="T:System.Lazy`2" /> オブジェクトが見つかった場合は、それらのオブジェクト。それ以外の場合は、空の <see cref="T:System.Collections.Generic.IEnumerable`1" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コントラクト名は、`T` で <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> メソッドを呼び出した結果です。  
  
 コントラクト名を比較するには、<xref:System.StringComparer.Ordinal%2A> プロパティを使用して、大文字と小文字を区別する、非言語的な比較を実行します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> オブジェクトは破棄されました。</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="TMetadataView" /> が、有効なメタデータ ビューの型ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports&lt;T,TMetadataView&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;T,TMetadataView&gt;&gt; GetExports&lt;T,TMetadataView&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`2&lt;!!T, !!TMetadataView&gt;&gt; GetExports&lt;T, TMetadataView&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports(Of T, TMetadataView) (contractName As String) As IEnumerable(Of Lazy(Of T, TMetadataView))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TMetadataView&gt;&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;T, TMetadataView&gt; ^&gt; ^ GetExports(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExports : string -&gt; seq&lt;Lazy&lt;'T, 'MetadataView&gt;&gt;" Usage="exportProvider.GetExports contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;T,TMetadataView&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TMetadataView" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">返す <see cref="T:System.Lazy`2" /> オブジェクトの型パラメーター。 コントラクト名もこの型パラメーターから派生します。</typeparam>
        <typeparam name="TMetadataView">返す <see cref="T:System.Lazy`2" /> オブジェクトのメタデータ ビューの型。</typeparam>
        <param name="contractName">返す <see cref="T:System.Lazy`2" /> オブジェクトのコントラクト名。<see langword="null" /> または空の文字列 ("") を指定すると、既定のコントラクト名が使用されます。</param>
        <summary>指定したコントラクト名を持つすべてのエクスポートを取得します。</summary>
        <returns>指定したコントラクト名を持つ <see cref="T:System.Lazy`2" /> オブジェクトが見つかった場合は、それらのオブジェクト。それ以外の場合は、空の <see cref="T:System.Collections.Generic.IEnumerable`1" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定のコントラクト名は、`T`で <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> メソッドを呼び出した結果です。  
  
 コントラクト名を比較するには、<xref:System.StringComparer.Ordinal%2A> プロパティを使用して、大文字と小文字を区別する、非言語的な比較を実行します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> オブジェクトは破棄されました。</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="TMetadataView" /> が、有効なメタデータ ビューの型ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExportsCore">
      <MemberSignature Language="C#" Value="protected abstract System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt; GetExportsCore (System.ComponentModel.Composition.Primitives.ImportDefinition definition, System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.Export&gt; GetExportsCore(class System.ComponentModel.Composition.Primitives.ImportDefinition definition, class System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::Export ^&gt; ^ GetExportsCore(System::ComponentModel::Composition::Primitives::ImportDefinition ^ definition, System::ComponentModel::Composition::Hosting::AtomicComposition ^ atomicComposition);" />
      <MemberSignature Language="F#" Value="abstract member GetExportsCore : System.ComponentModel.Composition.Primitives.ImportDefinition * System.ComponentModel.Composition.Hosting.AtomicComposition -&gt; seq&lt;System.ComponentModel.Composition.Primitives.Export&gt;" Usage="exportProvider.GetExportsCore (definition, atomicComposition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
        <Parameter Name="atomicComposition" Type="System.ComponentModel.Composition.Hosting.AtomicComposition" />
      </Parameters>
      <Docs>
        <param name="definition">返す <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> オブジェクトの条件を定義するオブジェクト。</param>
        <param name="atomicComposition">合成のトランザクション コンテナー。</param>
        <summary>指定した定義によって定義される制約に一致するすべてのエクスポートを取得します。</summary>
        <returns>指定された条件に一致するすべてのエクスポートを含んでいるコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドのオーバーライドでは、カーディナリティに関連する不一致をエラーとして扱うことはできません。また、例外をスローしないようにする必要があります。 たとえば、<xref:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality%2A> が <xref:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne>、指定された <xref:System.ComponentModel.Composition.Primitives.ImportDefinition>の条件に一致するゼロ <xref:System.ComponentModel.Composition.Primitives.Export> オブジェクトがある場合は、空の <xref:System.Collections.Generic.IEnumerable%601> コレクションが返されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnExportsChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnExportsChanged (System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnExportsChanged(class System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanged(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnExportsChanged (e As ExportsChangeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnExportsChanged(System::ComponentModel::Composition::Hosting::ExportsChangeEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnExportsChanged : System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs -&gt; unit&#xA;override this.OnExportsChanged : System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs -&gt; unit" Usage="exportProvider.OnExportsChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" />。</param>
        <summary><see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnExportsChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnExportsChanging (System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnExportsChanging(class System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanging(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnExportsChanging (e As ExportsChangeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnExportsChanging(System::ComponentModel::Composition::Hosting::ExportsChangeEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnExportsChanging : System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs -&gt; unit&#xA;override this.OnExportsChanging : System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs -&gt; unit" Usage="exportProvider.OnExportsChanging e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" />。</param>
        <summary><see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetExports">
      <MemberSignature Language="C#" Value="public bool TryGetExports (System.ComponentModel.Composition.Primitives.ImportDefinition definition, System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition, out System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt; exports);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetExports(class System.ComponentModel.Composition.Primitives.ImportDefinition definition, class System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition, [out] class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.Export&gt;&amp; exports) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.TryGetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export}@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetExports(System::ComponentModel::Composition::Primitives::ImportDefinition ^ definition, System::ComponentModel::Composition::Hosting::AtomicComposition ^ atomicComposition, [Runtime::InteropServices::Out] System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::Export ^&gt; ^ % exports);" />
      <MemberSignature Language="F#" Value="member this.TryGetExports : System.ComponentModel.Composition.Primitives.ImportDefinition * System.ComponentModel.Composition.Hosting.AtomicComposition * seq -&gt; bool" Usage="exportProvider.TryGetExports (definition, atomicComposition, exports)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
        <Parameter Name="atomicComposition" Type="System.ComponentModel.Composition.Hosting.AtomicComposition" />
        <Parameter Name="exports" Type="System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="definition">取得する <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> オブジェクトの条件を定義するオブジェクト。</param>
        <param name="atomicComposition">合成のトランザクション コンテナー。</param>
        <param name="exports"><see cref="T:System.ComponentModel.Composition.Primitives.Export" /> で定義される条件に一致する <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> オブジェクトが見つかった場合は、このメソッドから戻るときに、それらのオブジェクトが格納されます。それ以外の場合は、空の <see cref="T:System.Collections.Generic.IEnumerable`1" /> オブジェクトが格納されます。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定されたインポートの条件に一致するすべてのエクスポートを取得します。</summary>
        <returns><see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> が <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> または <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrMore" /> で、指定した <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> の条件と一致する <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> オブジェクトがない場合は <see langword="true" />、<see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> が <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> または <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> で、指定した <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> の条件と一致する <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> が 1 つだけの場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="definition" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
