<Type Name="Utf8Parser" FullName="System.Buffers.Text.Utf8Parser">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e7c97aa30b0f66ba4914fa5689ce6b625e6eab97" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83485409" /></Metadata><TypeSignature Language="C#" Value="public static class Utf8Parser" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Utf8Parser extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Buffers.Text.Utf8Parser" />
  <TypeSignature Language="VB.NET" Value="Public Class Utf8Parser" />
  <TypeSignature Language="C++ CLI" Value="public ref class Utf8Parser abstract sealed" />
  <TypeSignature Language="F#" Value="type Utf8Parser = class" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Memory" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="931ca-101">Utf8 文字列を一般的なデータ型に解析するための静的メソッドを提供します。</span><span class="sxs-lookup"><span data-stu-id="931ca-101">Provides static methods to parse Utf8 strings to common data types.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out bool value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] bool&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Boolean@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Boolean, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; * bool * int * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Boolean" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="931ca-102">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="931ca-102">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="931ca-103">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="931ca-103">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="931ca-104">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="931ca-104">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="931ca-105">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="931ca-105">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="931ca-106">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="931ca-106">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="931ca-107">Utf8 文字列の先頭で <see cref="T:System.Boolean" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="931ca-107">Parses a <see cref="T:System.Boolean" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="931ca-108">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="931ca-108"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="931ca-109">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="931ca-109">Formats supported:</span></span> 

|<span data-ttu-id="931ca-110">[書式設定文字列]</span><span class="sxs-lookup"><span data-stu-id="931ca-110">Format string</span></span>|<span data-ttu-id="931ca-111">想定される形式の例</span><span class="sxs-lookup"><span data-stu-id="931ca-111">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="931ca-112">G (既定値)</span><span class="sxs-lookup"><span data-stu-id="931ca-112">G (default)</span></span>|<span data-ttu-id="931ca-113">True または False</span><span class="sxs-lookup"><span data-stu-id="931ca-113">True/False</span></span>|
|<span data-ttu-id="931ca-114">l</span><span class="sxs-lookup"><span data-stu-id="931ca-114">l</span></span>|<span data-ttu-id="931ca-115">true/false</span><span class="sxs-lookup"><span data-stu-id="931ca-115">true/false</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out byte value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] unsigned int8&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Byte@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Byte, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; * byte * int * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Byte" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="931ca-116">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="931ca-116">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="931ca-117">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="931ca-117">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="931ca-118">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="931ca-118">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="931ca-119">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="931ca-119">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="931ca-120">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="931ca-120">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="931ca-121">Utf8 文字列の先頭で <see cref="T:System.Byte" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="931ca-121">Parses a <see cref="T:System.Byte" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="931ca-122">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="931ca-122"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="931ca-123">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="931ca-123">Formats supported:</span></span> 

|<span data-ttu-id="931ca-124">[書式設定文字列]</span><span class="sxs-lookup"><span data-stu-id="931ca-124">Format string</span></span>|<span data-ttu-id="931ca-125">想定される形式の例</span><span class="sxs-lookup"><span data-stu-id="931ca-125">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="931ca-126">G/g (既定値)</span><span class="sxs-lookup"><span data-stu-id="931ca-126">G/g (default)</span></span>| |
|<span data-ttu-id="931ca-127">D/d</span><span class="sxs-lookup"><span data-stu-id="931ca-127">D/d</span></span>|<span data-ttu-id="931ca-128">122</span><span class="sxs-lookup"><span data-stu-id="931ca-128">122</span></span>|
|<span data-ttu-id="931ca-129">N/n</span><span class="sxs-lookup"><span data-stu-id="931ca-129">N/n</span></span>|<span data-ttu-id="931ca-130">122</span><span class="sxs-lookup"><span data-stu-id="931ca-130">122</span></span>|       
|<span data-ttu-id="931ca-131">X/x</span><span class="sxs-lookup"><span data-stu-id="931ca-131">X/x</span></span>|<span data-ttu-id="931ca-132">7a</span><span class="sxs-lookup"><span data-stu-id="931ca-132">7a</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out DateTime value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] valuetype System.DateTime&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.DateTime@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As DateTime, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; * DateTime * int * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTime" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="931ca-133">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="931ca-133">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="931ca-134">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="931ca-134">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="931ca-135">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="931ca-135">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="931ca-136">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="931ca-136">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="931ca-137">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="931ca-137">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="931ca-138">Utf8 文字列の先頭で <see cref="T:System.DateTime" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="931ca-138">Parses a <see cref="T:System.DateTime" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="931ca-139">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="931ca-139"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="931ca-140">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="931ca-140">Formats supported:</span></span>

|<span data-ttu-id="931ca-141">[書式設定文字列]</span><span class="sxs-lookup"><span data-stu-id="931ca-141">Format string</span></span>|<span data-ttu-id="931ca-142">想定される形式の例</span><span class="sxs-lookup"><span data-stu-id="931ca-142">Example expected format</span></span>|<span data-ttu-id="931ca-143">説明</span><span class="sxs-lookup"><span data-stu-id="931ca-143">Comments</span></span>|
|--|--|--|
|<span data-ttu-id="931ca-144">G (既定値)</span><span class="sxs-lookup"><span data-stu-id="931ca-144">G  (default)</span></span>|<span data-ttu-id="931ca-145">05/25/2017 10:30:15</span><span class="sxs-lookup"><span data-stu-id="931ca-145">05/25/2017 10:30:15</span></span>| |
|<span data-ttu-id="931ca-146">R</span><span class="sxs-lookup"><span data-stu-id="931ca-146">R</span></span>|<span data-ttu-id="931ca-147">火曜日、03年1月 2017 08:08:05 GMT</span><span class="sxs-lookup"><span data-stu-id="931ca-147">Tue, 03 Jan 2017 08:08:05 GMT</span></span>|<span data-ttu-id="931ca-148">(RFC 1123)</span><span class="sxs-lookup"><span data-stu-id="931ca-148">(RFC 1123)</span></span>|
|<span data-ttu-id="931ca-149">l</span><span class="sxs-lookup"><span data-stu-id="931ca-149">l</span></span>|<span data-ttu-id="931ca-150">火曜日、03年1月 2017 08:08:05 gmt</span><span class="sxs-lookup"><span data-stu-id="931ca-150">tue, 03 jan 2017 08:08:05 gmt</span></span>|<span data-ttu-id="931ca-151">(小文字 RFC 1123)</span><span class="sxs-lookup"><span data-stu-id="931ca-151">(Lowercase RFC 1123)</span></span>|
|<span data-ttu-id="931ca-152">O</span><span class="sxs-lookup"><span data-stu-id="931ca-152">O</span></span>|<span data-ttu-id="931ca-153">2017-06-12T05:30:45.7680000-07:00</span><span class="sxs-lookup"><span data-stu-id="931ca-153">2017-06-12T05:30:45.7680000-07:00</span></span>|<span data-ttu-id="931ca-154">(ラウンドトライ可能)</span><span class="sxs-lookup"><span data-stu-id="931ca-154">(Round-trippable)</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out DateTimeOffset value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] valuetype System.DateTimeOffset&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.DateTimeOffset@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As DateTimeOffset, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; * DateTimeOffset * int * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="931ca-155">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="931ca-155">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="931ca-156">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="931ca-156">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="931ca-157">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="931ca-157">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="931ca-158">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="931ca-158">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="931ca-159">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="931ca-159">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="931ca-160">Utf8 文字列の先頭で <see cref="T:System.DateTimeOffset" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="931ca-160">Parses a <see cref="T:System.DateTimeOffset" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="931ca-161">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="931ca-161"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="931ca-162">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="931ca-162">Formats supported:</span></span>

|<span data-ttu-id="931ca-163">[書式設定文字列]</span><span class="sxs-lookup"><span data-stu-id="931ca-163">Format string</span></span>|<span data-ttu-id="931ca-164">想定される形式の例</span><span class="sxs-lookup"><span data-stu-id="931ca-164">Example expected format</span></span>|<span data-ttu-id="931ca-165">説明</span><span class="sxs-lookup"><span data-stu-id="931ca-165">Comments</span></span>|
|--|--|--|
|<span data-ttu-id="931ca-166">G (既定値)</span><span class="sxs-lookup"><span data-stu-id="931ca-166">G  (default)</span></span>|<span data-ttu-id="931ca-167">05/25/2017 10:30:15</span><span class="sxs-lookup"><span data-stu-id="931ca-167">05/25/2017 10:30:15</span></span>| |
|<span data-ttu-id="931ca-168">R</span><span class="sxs-lookup"><span data-stu-id="931ca-168">R</span></span>|<span data-ttu-id="931ca-169">火曜日、03年1月 2017 08:08:05 GMT</span><span class="sxs-lookup"><span data-stu-id="931ca-169">Tue, 03 Jan 2017 08:08:05 GMT</span></span>|<span data-ttu-id="931ca-170">(RFC 1123)</span><span class="sxs-lookup"><span data-stu-id="931ca-170">(RFC 1123)</span></span>|
|<span data-ttu-id="931ca-171">l</span><span class="sxs-lookup"><span data-stu-id="931ca-171">l</span></span>|<span data-ttu-id="931ca-172">火曜日、03年1月 2017 08:08:05 gmt</span><span class="sxs-lookup"><span data-stu-id="931ca-172">tue, 03 jan 2017 08:08:05 gmt</span></span>|<span data-ttu-id="931ca-173">(小文字 RFC 1123)</span><span class="sxs-lookup"><span data-stu-id="931ca-173">(Lowercase RFC 1123)</span></span>|
|<span data-ttu-id="931ca-174">O</span><span class="sxs-lookup"><span data-stu-id="931ca-174">O</span></span>|<span data-ttu-id="931ca-175">2017-06-12T05:30:45.7680000-07:00</span><span class="sxs-lookup"><span data-stu-id="931ca-175">2017-06-12T05:30:45.7680000-07:00</span></span>|<span data-ttu-id="931ca-176">(ラウンドトライ可能)</span><span class="sxs-lookup"><span data-stu-id="931ca-176">(Round-trippable)</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out decimal value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] valuetype System.Decimal&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Decimal@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Decimal, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; * decimal * int * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Decimal" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="931ca-177">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="931ca-177">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="931ca-178">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="931ca-178">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="931ca-179">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="931ca-179">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="931ca-180">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="931ca-180">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="931ca-181">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="931ca-181">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="931ca-182">Utf8 文字列の先頭で <see cref="T:System.Decimal" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="931ca-182">Parses a <see cref="T:System.Decimal" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="931ca-183">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="931ca-183"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="931ca-184">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="931ca-184">Formats supported:</span></span>

|<span data-ttu-id="931ca-185">[書式設定文字列]</span><span class="sxs-lookup"><span data-stu-id="931ca-185">Format string</span></span>|<span data-ttu-id="931ca-186">想定される形式の例</span><span class="sxs-lookup"><span data-stu-id="931ca-186">Example expected format</span></span>|<span data-ttu-id="931ca-187">説明</span><span class="sxs-lookup"><span data-stu-id="931ca-187">Comments</span></span>|
|--|--|--|
|<span data-ttu-id="931ca-188">G/g (既定値)</span><span class="sxs-lookup"><span data-stu-id="931ca-188">G/g  (default)</span></span>| |  
|<span data-ttu-id="931ca-189">F または f</span><span class="sxs-lookup"><span data-stu-id="931ca-189">F/f</span></span>|<span data-ttu-id="931ca-190">12.45</span><span class="sxs-lookup"><span data-stu-id="931ca-190">12.45</span></span>|<span data-ttu-id="931ca-191">固定ポイント</span><span class="sxs-lookup"><span data-stu-id="931ca-191">Fixed point</span></span>|
|<span data-ttu-id="931ca-192">E/e</span><span class="sxs-lookup"><span data-stu-id="931ca-192">E/e</span></span>|<span data-ttu-id="931ca-193">1.245000 e1</span><span class="sxs-lookup"><span data-stu-id="931ca-193">1.245000e1</span></span>|<span data-ttu-id="931ca-194">指数</span><span class="sxs-lookup"><span data-stu-id="931ca-194">Exponential</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out double value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] float64&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Double@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Double, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; * double * int * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Double" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="931ca-195">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="931ca-195">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="931ca-196">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="931ca-196">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="931ca-197">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="931ca-197">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="931ca-198">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="931ca-198">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="931ca-199">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="931ca-199">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="931ca-200">Utf8 文字列の先頭で <see cref="T:System.Double" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="931ca-200">Parses a <see cref="T:System.Double" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="931ca-201">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="931ca-201"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="931ca-202">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="931ca-202">Formats supported:</span></span>

|<span data-ttu-id="931ca-203">[書式設定文字列]</span><span class="sxs-lookup"><span data-stu-id="931ca-203">Format string</span></span>|<span data-ttu-id="931ca-204">想定される形式の例</span><span class="sxs-lookup"><span data-stu-id="931ca-204">Example expected format</span></span>|<span data-ttu-id="931ca-205">説明</span><span class="sxs-lookup"><span data-stu-id="931ca-205">Comments</span></span>|
|--|--|--|
|<span data-ttu-id="931ca-206">G/g (既定値)</span><span class="sxs-lookup"><span data-stu-id="931ca-206">G/g  (default)</span></span>| |  
|<span data-ttu-id="931ca-207">F または f</span><span class="sxs-lookup"><span data-stu-id="931ca-207">F/f</span></span>|<span data-ttu-id="931ca-208">12.45</span><span class="sxs-lookup"><span data-stu-id="931ca-208">12.45</span></span>|<span data-ttu-id="931ca-209">固定ポイント</span><span class="sxs-lookup"><span data-stu-id="931ca-209">Fixed point</span></span>|
|<span data-ttu-id="931ca-210">E/e</span><span class="sxs-lookup"><span data-stu-id="931ca-210">E/e</span></span>|<span data-ttu-id="931ca-211">1.245000 e1</span><span class="sxs-lookup"><span data-stu-id="931ca-211">1.245000e1</span></span>|<span data-ttu-id="931ca-212">指数</span><span class="sxs-lookup"><span data-stu-id="931ca-212">Exponential</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out Guid value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] valuetype System.Guid&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Guid@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Guid, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; * Guid * int * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Guid" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="931ca-213">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="931ca-213">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="931ca-214">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="931ca-214">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="931ca-215">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="931ca-215">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="931ca-216">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="931ca-216">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="931ca-217">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="931ca-217">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="931ca-218">Utf8 文字列の先頭で <see cref="T:System.Guid" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="931ca-218">Parses a <see cref="T:System.Guid" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="931ca-219">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="931ca-219"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="931ca-220">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="931ca-220">Formats supported:</span></span>

|<span data-ttu-id="931ca-221">[書式設定文字列]</span><span class="sxs-lookup"><span data-stu-id="931ca-221">Format string</span></span>|<span data-ttu-id="931ca-222">形式が必要です</span><span class="sxs-lookup"><span data-stu-id="931ca-222">Expected format</span></span>|
|--|--|
|<span data-ttu-id="931ca-223">D (既定値)</span><span class="sxs-lookup"><span data-stu-id="931ca-223">D (default)</span></span>|<span data-ttu-id="931ca-224">nnnnnnnn-nnnn-nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn</span><span class="sxs-lookup"><span data-stu-id="931ca-224">nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn</span></span>|
|<span data-ttu-id="931ca-225">B</span><span class="sxs-lookup"><span data-stu-id="931ca-225">B</span></span>|<span data-ttu-id="931ca-226">{nnnnnnnn-nnnn-nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn}</span><span class="sxs-lookup"><span data-stu-id="931ca-226">{nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn}</span></span>|
|<span data-ttu-id="931ca-227">P</span><span class="sxs-lookup"><span data-stu-id="931ca-227">P</span></span>|<span data-ttu-id="931ca-228">(nnnnnnnn-nnnn-nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn)</span><span class="sxs-lookup"><span data-stu-id="931ca-228">(nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn)</span></span>|
|<span data-ttu-id="931ca-229">N</span><span class="sxs-lookup"><span data-stu-id="931ca-229">N</span></span>|<span data-ttu-id="931ca-230">nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn</span><span class="sxs-lookup"><span data-stu-id="931ca-230">nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out short value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int16&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int16@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Short, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; * int16 * int * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int16" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="931ca-231">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="931ca-231">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="931ca-232">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="931ca-232">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="931ca-233">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="931ca-233">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="931ca-234">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="931ca-234">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="931ca-235">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="931ca-235">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="931ca-236">Utf8 文字列の先頭で <see cref="T:System.Int16" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="931ca-236">Parses an <see cref="T:System.Int16" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="931ca-237">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="931ca-237"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="931ca-238">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="931ca-238">Formats supported:</span></span>

|<span data-ttu-id="931ca-239">[書式設定文字列]</span><span class="sxs-lookup"><span data-stu-id="931ca-239">Format string</span></span>|<span data-ttu-id="931ca-240">想定される形式の例</span><span class="sxs-lookup"><span data-stu-id="931ca-240">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="931ca-241">G/g (既定値)</span><span class="sxs-lookup"><span data-stu-id="931ca-241">G/g (default)</span></span>| |
|<span data-ttu-id="931ca-242">D/d</span><span class="sxs-lookup"><span data-stu-id="931ca-242">D/d</span></span>|<span data-ttu-id="931ca-243">32767</span><span class="sxs-lookup"><span data-stu-id="931ca-243">32767</span></span>|
|<span data-ttu-id="931ca-244">N/n</span><span class="sxs-lookup"><span data-stu-id="931ca-244">N/n</span></span>|<span data-ttu-id="931ca-245">32,767</span><span class="sxs-lookup"><span data-stu-id="931ca-245">32,767</span></span>|       
|<span data-ttu-id="931ca-246">X/x</span><span class="sxs-lookup"><span data-stu-id="931ca-246">X/x</span></span>|<span data-ttu-id="931ca-247">7fff</span><span class="sxs-lookup"><span data-stu-id="931ca-247">7fff</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out int value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int32&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int32@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Integer, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; * int * int * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int32" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="931ca-248">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="931ca-248">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="931ca-249">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="931ca-249">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="931ca-250">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="931ca-250">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="931ca-251">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="931ca-251">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="931ca-252">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="931ca-252">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="931ca-253">Utf8 文字列の先頭で <see cref="T:System.Int32" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="931ca-253">Parses an <see cref="T:System.Int32" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="931ca-254">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="931ca-254"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="931ca-255">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="931ca-255">Formats supported:</span></span>

|<span data-ttu-id="931ca-256">[書式設定文字列]</span><span class="sxs-lookup"><span data-stu-id="931ca-256">Format string</span></span>|<span data-ttu-id="931ca-257">想定される形式の例</span><span class="sxs-lookup"><span data-stu-id="931ca-257">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="931ca-258">G/g (既定値)</span><span class="sxs-lookup"><span data-stu-id="931ca-258">G/g (default)</span></span>| |
|<span data-ttu-id="931ca-259">D/d</span><span class="sxs-lookup"><span data-stu-id="931ca-259">D/d</span></span>|<span data-ttu-id="931ca-260">32767</span><span class="sxs-lookup"><span data-stu-id="931ca-260">32767</span></span>|
|<span data-ttu-id="931ca-261">N/n</span><span class="sxs-lookup"><span data-stu-id="931ca-261">N/n</span></span>|<span data-ttu-id="931ca-262">32,767</span><span class="sxs-lookup"><span data-stu-id="931ca-262">32,767</span></span>|       
|<span data-ttu-id="931ca-263">X/x</span><span class="sxs-lookup"><span data-stu-id="931ca-263">X/x</span></span>|<span data-ttu-id="931ca-264">7fff</span><span class="sxs-lookup"><span data-stu-id="931ca-264">7fff</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out long value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int64&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int64@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Long, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; * int64 * int * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int64" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="931ca-265">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="931ca-265">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="931ca-266">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="931ca-266">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="931ca-267">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="931ca-267">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="931ca-268">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="931ca-268">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="931ca-269">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="931ca-269">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="931ca-270">Utf8 文字列の先頭で <see cref="T:System.Int64" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="931ca-270">Parses an <see cref="T:System.Int64" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="931ca-271">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="931ca-271"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="931ca-272">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="931ca-272">Formats supported:</span></span>

|<span data-ttu-id="931ca-273">[書式設定文字列]</span><span class="sxs-lookup"><span data-stu-id="931ca-273">Format string</span></span>|<span data-ttu-id="931ca-274">想定される形式の例</span><span class="sxs-lookup"><span data-stu-id="931ca-274">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="931ca-275">G/g (既定値)</span><span class="sxs-lookup"><span data-stu-id="931ca-275">G/g (default)</span></span>| |
|<span data-ttu-id="931ca-276">D/d</span><span class="sxs-lookup"><span data-stu-id="931ca-276">D/d</span></span>|<span data-ttu-id="931ca-277">32767</span><span class="sxs-lookup"><span data-stu-id="931ca-277">32767</span></span>|
|<span data-ttu-id="931ca-278">N/n</span><span class="sxs-lookup"><span data-stu-id="931ca-278">N/n</span></span>|<span data-ttu-id="931ca-279">32,767</span><span class="sxs-lookup"><span data-stu-id="931ca-279">32,767</span></span>|       
|<span data-ttu-id="931ca-280">X/x</span><span class="sxs-lookup"><span data-stu-id="931ca-280">X/x</span></span>|<span data-ttu-id="931ca-281">7fff</span><span class="sxs-lookup"><span data-stu-id="931ca-281">7fff</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out sbyte value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int8&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.SByte@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As SByte, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; * sbyte * int * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.SByte" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="931ca-282">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="931ca-282">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="931ca-283">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="931ca-283">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="931ca-284">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="931ca-284">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="931ca-285">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="931ca-285">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="931ca-286">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="931ca-286">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="931ca-287">Utf8 文字列の先頭で <see cref="T:System.SByte" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="931ca-287">Parses an <see cref="T:System.SByte" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="931ca-288">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="931ca-288"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="931ca-289">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="931ca-289">Formats supported:</span></span> 

|<span data-ttu-id="931ca-290">[書式設定文字列]</span><span class="sxs-lookup"><span data-stu-id="931ca-290">Format string</span></span>|<span data-ttu-id="931ca-291">想定される形式の例</span><span class="sxs-lookup"><span data-stu-id="931ca-291">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="931ca-292">G/g (既定値)</span><span class="sxs-lookup"><span data-stu-id="931ca-292">G/g (default)</span></span>| |
|<span data-ttu-id="931ca-293">D/d</span><span class="sxs-lookup"><span data-stu-id="931ca-293">D/d</span></span>|<span data-ttu-id="931ca-294">122</span><span class="sxs-lookup"><span data-stu-id="931ca-294">122</span></span>|
|<span data-ttu-id="931ca-295">N/n</span><span class="sxs-lookup"><span data-stu-id="931ca-295">N/n</span></span>|<span data-ttu-id="931ca-296">122</span><span class="sxs-lookup"><span data-stu-id="931ca-296">122</span></span>|       
|<span data-ttu-id="931ca-297">X/x</span><span class="sxs-lookup"><span data-stu-id="931ca-297">X/x</span></span>|<span data-ttu-id="931ca-298">7a</span><span class="sxs-lookup"><span data-stu-id="931ca-298">7a</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out float value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] float32&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Single@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Single, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; * single * int * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Single" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="931ca-299">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="931ca-299">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="931ca-300">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="931ca-300">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="931ca-301">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="931ca-301">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="931ca-302">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="931ca-302">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="931ca-303">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="931ca-303">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="931ca-304">Utf8 文字列の先頭で <see cref="T:System.Single" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="931ca-304">Parses a <see cref="T:System.Single" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="931ca-305">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="931ca-305"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="931ca-306">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="931ca-306">Formats supported:</span></span> 

<span data-ttu-id="931ca-307">[書式設定文字列]</span><span class="sxs-lookup"><span data-stu-id="931ca-307">Format string</span></span>|<span data-ttu-id="931ca-308">想定される fornmat の例</span><span class="sxs-lookup"><span data-stu-id="931ca-308">Example expected fornmat</span></span>|<span data-ttu-id="931ca-309">説明</span><span class="sxs-lookup"><span data-stu-id="931ca-309">Comments</span></span>|
|--|--|--|
|<span data-ttu-id="931ca-310">G/g (既定値)</span><span class="sxs-lookup"><span data-stu-id="931ca-310">G/g  (default)</span></span>| |  
|<span data-ttu-id="931ca-311">F または f</span><span class="sxs-lookup"><span data-stu-id="931ca-311">F/f</span></span>|<span data-ttu-id="931ca-312">12.45</span><span class="sxs-lookup"><span data-stu-id="931ca-312">12.45</span></span>|<span data-ttu-id="931ca-313">固定ポイント</span><span class="sxs-lookup"><span data-stu-id="931ca-313">Fixed point</span></span>|
|<span data-ttu-id="931ca-314">E/e</span><span class="sxs-lookup"><span data-stu-id="931ca-314">E/e</span></span>|<span data-ttu-id="931ca-315">1.245000 e1</span><span class="sxs-lookup"><span data-stu-id="931ca-315">1.245000e1</span></span>|<span data-ttu-id="931ca-316">指数</span><span class="sxs-lookup"><span data-stu-id="931ca-316">Exponential</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out TimeSpan value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] valuetype System.TimeSpan&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.TimeSpan@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As TimeSpan, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; * TimeSpan * int * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.TimeSpan" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="931ca-317">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="931ca-317">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="931ca-318">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="931ca-318">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="931ca-319">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="931ca-319">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="931ca-320">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="931ca-320">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="931ca-321">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="931ca-321">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="931ca-322">Utf8 文字列の先頭で <see cref="T:System.TimeSpan" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="931ca-322">Parses a <see cref="T:System.TimeSpan" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="931ca-323">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="931ca-323"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="931ca-324">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="931ca-324">Formats supported:</span></span> 

|<span data-ttu-id="931ca-325">[書式設定文字列]</span><span class="sxs-lookup"><span data-stu-id="931ca-325">Format string</span></span>|<span data-ttu-id="931ca-326">形式が必要です</span><span class="sxs-lookup"><span data-stu-id="931ca-326">Expected format</span></span>|<span data-ttu-id="931ca-327">説明</span><span class="sxs-lookup"><span data-stu-id="931ca-327">Comments</span></span>|
|--|--|--|
|<span data-ttu-id="931ca-328">c/t/T (既定値)</span><span class="sxs-lookup"><span data-stu-id="931ca-328">c/t/T (default)</span></span>|<span data-ttu-id="931ca-329">[-][d.]hh: mm: ss [. fffffff]</span><span class="sxs-lookup"><span data-stu-id="931ca-329">[-][d.]hh:mm:ss[.fffffff]</span></span>|<span data-ttu-id="931ca-330">(定数形式)</span><span class="sxs-lookup"><span data-stu-id="931ca-330">(constant format)</span></span>|
|<span data-ttu-id="931ca-331">G</span><span class="sxs-lookup"><span data-stu-id="931ca-331">G</span></span>|<span data-ttu-id="931ca-332">[-] d 月 hh: mm: ss. fffffff</span><span class="sxs-lookup"><span data-stu-id="931ca-332">[-]d:hh:mm:ss.fffffff</span></span>||<span data-ttu-id="931ca-333">(一般長)</span><span class="sxs-lookup"><span data-stu-id="931ca-333">(general long)</span></span>|
|<span data-ttu-id="931ca-334">g</span><span class="sxs-lookup"><span data-stu-id="931ca-334">g</span></span>|<span data-ttu-id="931ca-335">[-][d:][h] h:mm: ss [f [f [f [f [f]]]]]]</span><span class="sxs-lookup"><span data-stu-id="931ca-335">[-][d:][h]h:mm:ss[.f[f[f[f[f[f[f]]]]]]</span></span>|<span data-ttu-id="931ca-336">(一般的な短い)</span><span class="sxs-lookup"><span data-stu-id="931ca-336">(general short)</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out ushort value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] unsigned int16&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt16@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As UShort, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; * uint16 * int * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt16" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="931ca-337">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="931ca-337">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="931ca-338">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="931ca-338">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="931ca-339">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="931ca-339">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="931ca-340">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="931ca-340">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="931ca-341">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="931ca-341">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="931ca-342">Utf8 文字列の先頭で <see cref="T:System.UInt16" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="931ca-342">Parses a <see cref="T:System.UInt16" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="931ca-343">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="931ca-343"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="931ca-344">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="931ca-344">Formats supported:</span></span>

|<span data-ttu-id="931ca-345">[書式設定文字列]</span><span class="sxs-lookup"><span data-stu-id="931ca-345">Format string</span></span>|<span data-ttu-id="931ca-346">想定される形式の例</span><span class="sxs-lookup"><span data-stu-id="931ca-346">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="931ca-347">G/g (既定値)</span><span class="sxs-lookup"><span data-stu-id="931ca-347">G/g (default)</span></span>| |
|<span data-ttu-id="931ca-348">D/d</span><span class="sxs-lookup"><span data-stu-id="931ca-348">D/d</span></span>|<span data-ttu-id="931ca-349">32767</span><span class="sxs-lookup"><span data-stu-id="931ca-349">32767</span></span>|
|<span data-ttu-id="931ca-350">N/n</span><span class="sxs-lookup"><span data-stu-id="931ca-350">N/n</span></span>|<span data-ttu-id="931ca-351">32,767</span><span class="sxs-lookup"><span data-stu-id="931ca-351">32,767</span></span>|       
|<span data-ttu-id="931ca-352">X/x</span><span class="sxs-lookup"><span data-stu-id="931ca-352">X/x</span></span>|<span data-ttu-id="931ca-353">7fff</span><span class="sxs-lookup"><span data-stu-id="931ca-353">7fff</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out uint value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] unsigned int32&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt32@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As UInteger, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; * uint32 * int * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt32" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="931ca-354">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="931ca-354">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="931ca-355">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="931ca-355">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="931ca-356">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="931ca-356">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="931ca-357">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="931ca-357">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="931ca-358">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="931ca-358">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="931ca-359">Utf8 文字列の先頭で <see cref="T:System.UInt32" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="931ca-359">Parses a <see cref="T:System.UInt32" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="931ca-360">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="931ca-360"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="931ca-361">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="931ca-361">Formats supported:</span></span>

|<span data-ttu-id="931ca-362">[書式設定文字列]</span><span class="sxs-lookup"><span data-stu-id="931ca-362">Format string</span></span>|<span data-ttu-id="931ca-363">想定される形式の例</span><span class="sxs-lookup"><span data-stu-id="931ca-363">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="931ca-364">G/g (既定値)</span><span class="sxs-lookup"><span data-stu-id="931ca-364">G/g (default)</span></span>| |
|<span data-ttu-id="931ca-365">D/d</span><span class="sxs-lookup"><span data-stu-id="931ca-365">D/d</span></span>|<span data-ttu-id="931ca-366">32767</span><span class="sxs-lookup"><span data-stu-id="931ca-366">32767</span></span>|
|<span data-ttu-id="931ca-367">N/n</span><span class="sxs-lookup"><span data-stu-id="931ca-367">N/n</span></span>|<span data-ttu-id="931ca-368">32,767</span><span class="sxs-lookup"><span data-stu-id="931ca-368">32,767</span></span>|       
|<span data-ttu-id="931ca-369">X/x</span><span class="sxs-lookup"><span data-stu-id="931ca-369">X/x</span></span>|<span data-ttu-id="931ca-370">7fff</span><span class="sxs-lookup"><span data-stu-id="931ca-370">7fff</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out ulong value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] unsigned int64&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt64@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As ULong, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; * uint64 * int * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt64" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="931ca-371">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="931ca-371">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="931ca-372">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="931ca-372">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="931ca-373">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="931ca-373">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="931ca-374">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="931ca-374">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="931ca-375">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="931ca-375">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="931ca-376">Utf8 文字列の先頭で <see cref="T:System.UInt64" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="931ca-376">Parses a <see cref="T:System.UInt64" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="931ca-377">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="931ca-377"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="931ca-378">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="931ca-378">Formats supported:</span></span>

|<span data-ttu-id="931ca-379">[書式設定文字列]</span><span class="sxs-lookup"><span data-stu-id="931ca-379">Format string</span></span>|<span data-ttu-id="931ca-380">想定される形式の例</span><span class="sxs-lookup"><span data-stu-id="931ca-380">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="931ca-381">G/g (既定値)</span><span class="sxs-lookup"><span data-stu-id="931ca-381">G/g (default)</span></span>| |
|<span data-ttu-id="931ca-382">D/d</span><span class="sxs-lookup"><span data-stu-id="931ca-382">D/d</span></span>|<span data-ttu-id="931ca-383">32767</span><span class="sxs-lookup"><span data-stu-id="931ca-383">32767</span></span>|
|<span data-ttu-id="931ca-384">N/n</span><span class="sxs-lookup"><span data-stu-id="931ca-384">N/n</span></span>|<span data-ttu-id="931ca-385">32,767</span><span class="sxs-lookup"><span data-stu-id="931ca-385">32,767</span></span>|       
|<span data-ttu-id="931ca-386">X/x</span><span class="sxs-lookup"><span data-stu-id="931ca-386">X/x</span></span>|<span data-ttu-id="931ca-387">7fff</span><span class="sxs-lookup"><span data-stu-id="931ca-387">7fff</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
