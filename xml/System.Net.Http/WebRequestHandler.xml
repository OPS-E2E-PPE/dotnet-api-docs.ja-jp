<Type Name="WebRequestHandler" FullName="System.Net.Http.WebRequestHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c95dbdd6f8467f1aa93b70ddcea2548f02e03ba2" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83956177" /></Metadata><TypeSignature Language="C#" Value="public class WebRequestHandler : System.Net.Http.HttpClientHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebRequestHandler extends System.Net.Http.HttpClientHandler" />
  <TypeSignature Language="DocId" Value="T:System.Net.Http.WebRequestHandler" />
  <TypeSignature Language="VB.NET" Value="Public Class WebRequestHandler&#xA;Inherits HttpClientHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebRequestHandler : System::Net::Http::HttpClientHandler" />
  <TypeSignature Language="F#" Value="type WebRequestHandler = class&#xA;    inherit HttpClientHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Http.WebRequest</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Net.Http.HttpClientHandler</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="b7766-101">Windows ストア アプリや他の環境では利用できないデスクトップ固有の機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="b7766-101">Provides desktop-specific features not available to Windows Store apps or other environments.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7766-102">このクラスは、<xref:System.Net.HttpWebRequest> インスタンスを使用して HTTP 要求をサーバーに送信するトランスポートハンドラーを実装します。</span><span class="sxs-lookup"><span data-stu-id="b7766-102">This class implements a transport handler using <xref:System.Net.HttpWebRequest> instances to send HTTP requests to servers.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebRequestHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.WebRequestHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebRequestHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.WebRequest</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b7766-103"><see cref="T:System.Net.Http.WebRequestHandler" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="b7766-103">Initializes a new instance of the <see cref="T:System.Net.Http.WebRequestHandler" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowPipelining">
      <MemberSignature Language="C#" Value="public bool AllowPipelining { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowPipelining" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.WebRequestHandler.AllowPipelining" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowPipelining As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowPipelining { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowPipelining : bool with get, set" Usage="System.Net.Http.WebRequestHandler.AllowPipelining" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.WebRequest</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7766-104">インターネット リソースへの要求をパイプライン処理するかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="b7766-104">Gets or sets a value that indicates whether to pipeline the request to the Internet resource.</span></span></summary>
        <value><span data-ttu-id="b7766-105"><see cref="T:System.Boolean" /> が返されます。</span><span class="sxs-lookup"><span data-stu-id="b7766-105">Returns <see cref="T:System.Boolean" />.</span></span>  
  
 <span data-ttu-id="b7766-106">要求をパイプライン処理する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b7766-106"><see langword="true" /> if the request should be pipelined; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="b7766-107">既定では、 <see langword="true" />です。</span><span class="sxs-lookup"><span data-stu-id="b7766-107">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7766-108">アプリケーションでは、<xref:System.Net.Http.WebRequestHandler.AllowPipelining%2A> プロパティを使用して、パイプライン接続の優先順位を指定します。</span><span class="sxs-lookup"><span data-stu-id="b7766-108">An application uses the <xref:System.Net.Http.WebRequestHandler.AllowPipelining%2A> property to indicate a preference for pipelined connections.</span></span> <span data-ttu-id="b7766-109"><xref:System.Net.Http.WebRequestHandler.AllowPipelining%2A> が `true`されると、アプリケーションはそれらをサポートするサーバーにパイプライン接続を行います。</span><span class="sxs-lookup"><span data-stu-id="b7766-109">When <xref:System.Net.Http.WebRequestHandler.AllowPipelining%2A> is `true`, an application makes pipelined connections to the servers that support them.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AuthenticationLevel">
      <MemberSignature Language="C#" Value="public System.Net.Security.AuthenticationLevel AuthenticationLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Security.AuthenticationLevel AuthenticationLevel" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.WebRequestHandler.AuthenticationLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property AuthenticationLevel As AuthenticationLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Security::AuthenticationLevel AuthenticationLevel { System::Net::Security::AuthenticationLevel get(); void set(System::Net::Security::AuthenticationLevel value); };" />
      <MemberSignature Language="F#" Value="member this.AuthenticationLevel : System.Net.Security.AuthenticationLevel with get, set" Usage="System.Net.Http.WebRequestHandler.AuthenticationLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.WebRequest</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Security.AuthenticationLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7766-110">この要求で使用される認証レベルおよび偽装レベルを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="b7766-110">Gets or sets a value indicating the level of authentication and impersonation used for this request.</span></span></summary>
        <value><span data-ttu-id="b7766-111"><see cref="T:System.Net.Security.AuthenticationLevel" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="b7766-111">A bitwise combination of the <see cref="T:System.Net.Security.AuthenticationLevel" /> values.</span></span> <span data-ttu-id="b7766-112">既定値は <see cref="F:System.Net.Security.AuthenticationLevel.MutualAuthRequested" /> です。</span><span class="sxs-lookup"><span data-stu-id="b7766-112">The default value is <see cref="F:System.Net.Security.AuthenticationLevel.MutualAuthRequested" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7766-113">相互認証では、クライアントとサーバーの両方が、それらの身元を証明する資格情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="b7766-113">In mutual authentication, both the client and server present credentials to establish their identity.</span></span> <span data-ttu-id="b7766-114"><xref:System.Net.Security.AuthenticationLevel.MutualAuthRequired> と <xref:System.Net.Security.AuthenticationLevel.MutualAuthRequested> は、Kerberos 認証に関連する値です。</span><span class="sxs-lookup"><span data-stu-id="b7766-114">The <xref:System.Net.Security.AuthenticationLevel.MutualAuthRequired> and <xref:System.Net.Security.AuthenticationLevel.MutualAuthRequested> values are relevant for Kerberos authentication.</span></span> <span data-ttu-id="b7766-115">Kerberos 認証は、直接サポートすることも、Negotiate セキュリティ プロトコルを使用して実際のセキュリティ プロトコルを選択する場合に使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="b7766-115">Kerberos authentication can be supported directly, or can be used if the Negotiate security protocol is used to select the actual security protocol.</span></span> <span data-ttu-id="b7766-116">認証プロトコルの詳細については、「[インターネット認証](/dotnet/framework/network-programming/internet-authentication)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="b7766-116">For more information about authentication protocols, see [Internet Authentication](/dotnet/framework/network-programming/internet-authentication).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CachePolicy">
      <MemberSignature Language="C#" Value="public System.Net.Cache.RequestCachePolicy CachePolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Cache.RequestCachePolicy CachePolicy" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.WebRequestHandler.CachePolicy" />
      <MemberSignature Language="VB.NET" Value="Public Property CachePolicy As RequestCachePolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Cache::RequestCachePolicy ^ CachePolicy { System::Net::Cache::RequestCachePolicy ^ get(); void set(System::Net::Cache::RequestCachePolicy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CachePolicy : System.Net.Cache.RequestCachePolicy with get, set" Usage="System.Net.Http.WebRequestHandler.CachePolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.WebRequest</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Cache.RequestCachePolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7766-117">この要求のキャッシュ ポリシーを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="b7766-117">Gets or sets the cache policy for this request.</span></span></summary>
        <value><span data-ttu-id="b7766-118">キャッシュ ポリシーを定義する <see cref="T:System.Net.Cache.RequestCachePolicy" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b7766-118">A <see cref="T:System.Net.Cache.RequestCachePolicy" /> object that defines a cache policy.</span></span> <span data-ttu-id="b7766-119">既定では、 <see cref="P:System.Net.WebRequest.DefaultCachePolicy" />です。</span><span class="sxs-lookup"><span data-stu-id="b7766-119">The default is <see cref="P:System.Net.WebRequest.DefaultCachePolicy" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7766-120">キャッシュから応答を取得できるかどうかは、現在のキャッシュポリシーとキャッシュ内の要求されたリソースの存在によって決まります。</span><span class="sxs-lookup"><span data-stu-id="b7766-120">The current cache policy and the presence of the requested resource in the cache determine whether a response can be retrieved from the cache.</span></span> <span data-ttu-id="b7766-121">キャッシュされた応答を使用すると、通常はアプリケーションのパフォーマンスが向上しますが、キャッシュ内の応答がサーバーの応答と一致しないというリスクがあります。</span><span class="sxs-lookup"><span data-stu-id="b7766-121">Using cached responses usually improves application performance, but there is a risk that the response in the cache does not match the response on the server.</span></span>  
  
 <span data-ttu-id="b7766-122">既定のキャッシュポリシーは、machine.config 構成ファイルで指定することも、<xref:System.Net.HttpWebRequest.DefaultCachePolicy%2A> プロパティを設定することによって指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="b7766-122">The default cache policy can be specified in the Machine.config configuration file or by setting the <xref:System.Net.HttpWebRequest.DefaultCachePolicy%2A> property.</span></span>  
  
 <span data-ttu-id="b7766-123">リソースのコピーは、リソースの応答ストリームが取得され、ストリームの末尾に読み取られる場合にのみ、キャッシュに追加されます。</span><span class="sxs-lookup"><span data-stu-id="b7766-123">A copy of a resource is only added to the cache if the response stream for the resource is retrieved and read to the end of the stream.</span></span> <span data-ttu-id="b7766-124">そのため、同じリソースに対する別の要求では、この要求のキャッシュポリシーレベルに応じて、キャッシュされたコピーを使用できます。</span><span class="sxs-lookup"><span data-stu-id="b7766-124">So another request for the same resource could use a cached copy, depending on the cache policy level for this request.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientCertificates">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.WebRequestHandler.ClientCertificates" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClientCertificates As X509CertificateCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::X509Certificates::X509CertificateCollection ^ ClientCertificates { System::Security::Cryptography::X509Certificates::X509CertificateCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ClientCertificates : System.Security.Cryptography.X509Certificates.X509CertificateCollection" Usage="System.Net.Http.WebRequestHandler.ClientCertificates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.WebRequest</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509CertificateCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7766-125">この要求に関連付けられているセキュリティ証明書のコレクションを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="b7766-125">Gets or sets the collection of security certificates that are associated with this request.</span></span></summary>
        <value><span data-ttu-id="b7766-126">この要求に関連付けられているセキュリティ証明書のコレクション。</span><span class="sxs-lookup"><span data-stu-id="b7766-126">The collection of security certificates associated with this request.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContinueTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan ContinueTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan ContinueTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.WebRequestHandler.ContinueTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property ContinueTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan ContinueTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.ContinueTimeout : TimeSpan with get, set" Usage="System.Net.Http.WebRequestHandler.ContinueTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.WebRequest</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7766-127">アプリケーションがデータをアップロードするまで、サーバーから 100-continue を待機する、ミリ秒単位の時間を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="b7766-127">Gets or sets the amount of time, in milliseconds, the application will wait for 100-continue from the server before uploading data.</span></span></summary>
        <value><span data-ttu-id="b7766-128">アプリケーションがデータをアップロードするまで、サーバーから 100-continue を待機する、ミリ秒単位の時間。</span><span class="sxs-lookup"><span data-stu-id="b7766-128">The amount of time, in milliseconds, the application will wait for 100-continue from the server before uploading data.</span></span> <span data-ttu-id="b7766-129">既定値は350ミリ秒です。</span><span class="sxs-lookup"><span data-stu-id="b7766-129">The default value is 350 milliseconds.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImpersonationLevel">
      <MemberSignature Language="C#" Value="public System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Principal.TokenImpersonationLevel ImpersonationLevel" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.WebRequestHandler.ImpersonationLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ImpersonationLevel As TokenImpersonationLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Principal::TokenImpersonationLevel ImpersonationLevel { System::Security::Principal::TokenImpersonationLevel get(); void set(System::Security::Principal::TokenImpersonationLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ImpersonationLevel : System.Security.Principal.TokenImpersonationLevel with get, set" Usage="System.Net.Http.WebRequestHandler.ImpersonationLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.WebRequest</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Principal.TokenImpersonationLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7766-130">現在の要求に対する偽装レベルを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="b7766-130">Gets or sets the impersonation level for the current request.</span></span></summary>
        <value><span data-ttu-id="b7766-131">要求の偽装レベル。</span><span class="sxs-lookup"><span data-stu-id="b7766-131">The impersonation level for the request.</span></span> <span data-ttu-id="b7766-132">既定では、 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />です。</span><span class="sxs-lookup"><span data-stu-id="b7766-132">The default is <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7766-133">偽装レベルによって、サーバーがクライアントの資格情報をどのように使用できるかが決まります。</span><span class="sxs-lookup"><span data-stu-id="b7766-133">The impersonation level determines how the server can use the client's credentials.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxResponseHeadersLength">
      <MemberSignature Language="C#" Value="public int MaxResponseHeadersLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxResponseHeadersLength" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.WebRequestHandler.MaxResponseHeadersLength" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxResponseHeadersLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxResponseHeadersLength { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxResponseHeadersLength : int with get, set" Usage="System.Net.Http.WebRequestHandler.MaxResponseHeadersLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.WebRequest</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7766-134">応答ヘッダーの許容最大長を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="b7766-134">Gets or sets the maximum allowed length of the response headers.</span></span></summary>
        <value><span data-ttu-id="b7766-135">応答ヘッダーの長さ (KB 単位、1 KB = 1024 バイト)。</span><span class="sxs-lookup"><span data-stu-id="b7766-135">The length, in kilobytes (1024 bytes), of the response headers.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7766-136">応答ヘッダーの長さには、応答ステータス行、および HTTP プロトコルの一部として受信される追加の制御文字が含まれます。</span><span class="sxs-lookup"><span data-stu-id="b7766-136">The length of the response header includes the response status line and any extra control characters that are received as part of HTTP protocol.</span></span> <span data-ttu-id="b7766-137">値-1 は、応答ヘッダーに制限が適用されないことを意味します。値0は、すべての要求が失敗することを意味します。</span><span class="sxs-lookup"><span data-stu-id="b7766-137">A value of -1 means no limit is imposed on the response headers; a value of 0 means that all requests fail.</span></span>  
  
 <span data-ttu-id="b7766-138"><xref:System.Net.Http.WebRequestHandler.MaxResponseHeadersLength%2A> プロパティが明示的に設定されていない場合は、<xref:System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength%2A> プロパティの値が既定値に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b7766-138">If the <xref:System.Net.Http.WebRequestHandler.MaxResponseHeadersLength%2A> property is not explicitly set, it defaults to the value of the <xref:System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength%2A> property.</span></span>  
  
 <span data-ttu-id="b7766-139">受信した応答ヘッダーの長さが <xref:System.Net.Http.WebRequestHandler.MaxResponseHeadersLength%2A> プロパティの値を超えると、応答にアクセスしたときに例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="b7766-139">If the length of the response header received exceeds the value of the <xref:System.Net.Http.WebRequestHandler.MaxResponseHeadersLength%2A> property, an exception is thrown when the response is accessed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadWriteTimeout">
      <MemberSignature Language="C#" Value="public int ReadWriteTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadWriteTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.WebRequestHandler.ReadWriteTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property ReadWriteTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ReadWriteTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ReadWriteTimeout : int with get, set" Usage="System.Net.Http.WebRequestHandler.ReadWriteTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.WebRequest</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7766-140">サーバーへの要求の書き込み時またはサーバーからの応答の読み取り時のタイムアウト (ミリ秒単位) を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="b7766-140">Gets or sets a time-out in milliseconds when writing a request to or reading a response from a server.</span></span></summary>
        <value><span data-ttu-id="b7766-141">書き込みまたは読み取りがタイムアウトするまでのミリ秒数。既定値は30万ミリ秒 (5 分) です。</span><span class="sxs-lookup"><span data-stu-id="b7766-141">The number of milliseconds before the writing or reading times out. The default value is 300,000 milliseconds (5 minutes).</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServerCertificateValidationCallback">
      <MemberSignature Language="C#" Value="public System.Net.Security.RemoteCertificateValidationCallback ServerCertificateValidationCallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Security.RemoteCertificateValidationCallback ServerCertificateValidationCallback" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback" />
      <MemberSignature Language="VB.NET" Value="Public Property ServerCertificateValidationCallback As RemoteCertificateValidationCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Security::RemoteCertificateValidationCallback ^ ServerCertificateValidationCallback { System::Net::Security::RemoteCertificateValidationCallback ^ get(); void set(System::Net::Security::RemoteCertificateValidationCallback ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServerCertificateValidationCallback : System.Net.Security.RemoteCertificateValidationCallback with get, set" Usage="System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.WebRequest</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Security.RemoteCertificateValidationCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7766-142">サーバー証明書を検証するコールバック メソッドを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="b7766-142">Gets or sets a callback method to validate the server certificate.</span></span></summary>
        <value><span data-ttu-id="b7766-143">サーバー証明書を検証するコールバック メソッド。</span><span class="sxs-lookup"><span data-stu-id="b7766-143">A callback method to validate the server certificate.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7766-144"><xref:System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback%2A> が `null`場合、サーバー証明書は、標準の既知の証明機関を使用して検証されます。</span><span class="sxs-lookup"><span data-stu-id="b7766-144">If the <xref:System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback%2A> is `null`, the server certificate will be validated using standard well-known  certificate authorities.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnsafeAuthenticatedConnectionSharing">
      <MemberSignature Language="C#" Value="public bool UnsafeAuthenticatedConnectionSharing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UnsafeAuthenticatedConnectionSharing" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing" />
      <MemberSignature Language="VB.NET" Value="Public Property UnsafeAuthenticatedConnectionSharing As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UnsafeAuthenticatedConnectionSharing { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UnsafeAuthenticatedConnectionSharing : bool with get, set" Usage="System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.WebRequest</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7766-145">高速 NTLM 認証された接続共有を許可するかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="b7766-145">Gets or sets a value that indicates whether to allow high-speed NTLM-authenticated connection sharing.</span></span></summary>
        <value><span data-ttu-id="b7766-146"><see cref="T:System.Boolean" /> が返されます。</span><span class="sxs-lookup"><span data-stu-id="b7766-146">Returns <see cref="T:System.Boolean" />.</span></span>  
  
 <span data-ttu-id="b7766-147">認証された接続を確立し続ける場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b7766-147"><see langword="true" /> to keep the authenticated connection open; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7766-148">このプロパティの既定値は `false`です。これにより、要求の完了後に現在の接続が閉じられます。</span><span class="sxs-lookup"><span data-stu-id="b7766-148">The default value for this property is `false`, which causes the current connection to be closed after a request is completed.</span></span> <span data-ttu-id="b7766-149">アプリケーションは、新しい要求を発行するたびに認証シーケンスを通過する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b7766-149">Your application must go through the authentication sequence every time it issues a new request.</span></span> <span data-ttu-id="b7766-150">このプロパティが `true`に設定されている場合、認証が実行された後も、応答を取得するために使用される接続は開いたままになります。</span><span class="sxs-lookup"><span data-stu-id="b7766-150">If this property is set to `true`, the connection used to retrieve the response remains open after the authentication has been performed.</span></span> <span data-ttu-id="b7766-151">この場合、このプロパティが `true` に設定されている他の要求では、再認証を行わずに接続を使用することができます。</span><span class="sxs-lookup"><span data-stu-id="b7766-151">In this case, other requests that have this property set to `true` may use the connection without re-authenticating.</span></span> <span data-ttu-id="b7766-152">言い換えると、接続がユーザー A に対して認証されている場合、ユーザー B は接続を再利用する可能性があります。ユーザー B の要求は、ユーザー A の資格情報に基づいて満たされます。</span><span class="sxs-lookup"><span data-stu-id="b7766-152">In other words, if a connection has been authenticated for user A, user B may reuse A's connection; user B's request is fulfilled based on the credentials of user A.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="b7766-153">アプリケーションが認証されずに接続を使用する可能性があるため、このプロパティを `true`に設定する場合は、システムに管理上の脆弱性がないことを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b7766-153">Because it is possible for an application to use the connection without being authenticated, you need to be sure that there is no administrative vulnerability in your system when setting this property to `true`.</span></span> <span data-ttu-id="b7766-154">アプリケーションが複数のユーザーに対して要求を送信し、リソースを保護するために認証に依存している場合は、次に示すように接続グループを使用しない限り、このプロパティを `true` に設定しないでください。</span><span class="sxs-lookup"><span data-stu-id="b7766-154">If your application sends requests for multiple users (impersonates multiple user accounts) and relies on authentication to protect resources, do not set this property to `true` unless you use connection groups as described below.</span></span>  
  
 <span data-ttu-id="b7766-155">パフォーマンスの問題が発生し、アプリケーションが統合 Windows 認証を使用する Web サーバーで実行されている場合は、このメカニズムを有効にすることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="b7766-155">You may want to consider enabling this mechanism if your are having performance problems and your application is running on a Web server with integrated Windows authentication.</span></span>  
  
 <span data-ttu-id="b7766-156">この設定を有効にすると、システムがセキュリティ上のリスクになります。</span><span class="sxs-lookup"><span data-stu-id="b7766-156">Enabling this setting opens the system to security risks.</span></span> <span data-ttu-id="b7766-157"><xref:System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing%2A> プロパティをに設定する場合は `true` 次の予防措置を講じてください。</span><span class="sxs-lookup"><span data-stu-id="b7766-157">If you set the <xref:System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing%2A> property to `true` be sure to take the following precautions:</span></span>  
  
-   <span data-ttu-id="b7766-158">保護された環境でアプリケーションを実行して、接続の悪用を防ぐことができます。</span><span class="sxs-lookup"><span data-stu-id="b7766-158">Run your application in a protected environment to help avoid possible connection exploits.</span></span>  
  
 <span data-ttu-id="b7766-159">バックエンドサーバーを制御する場合は、代替手段として、認証の永続化を無効にすることを検討してください。</span><span class="sxs-lookup"><span data-stu-id="b7766-159">If you control the back-end server, as an alternative you might consider turning off authentication persistence.</span></span> <span data-ttu-id="b7766-160">これにより、パフォーマンスが低下しますが、安全性は向上します。</span><span class="sxs-lookup"><span data-stu-id="b7766-160">This increases performance to a lesser degree, but it is safer.</span></span> <span data-ttu-id="b7766-161">詳細については、MSDN ライブラリの「 [https://msdn.microsoft.com/library](https://msdn.microsoft.com/library)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="b7766-161">For more details, search for AuthPersistence in the MSDN library at [https://msdn.microsoft.com/library](https://msdn.microsoft.com/library).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
