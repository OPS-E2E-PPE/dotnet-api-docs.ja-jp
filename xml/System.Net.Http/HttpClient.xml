<Type Name="HttpClient" FullName="System.Net.Http.HttpClient">
  <Metadata><Meta Name="ms.openlocfilehash" Value="34786b416b30a5cc5fe4d3ed116f0d06eb2fb878" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83543229" /></Metadata><TypeSignature Language="C#" Value="public class HttpClient : System.Net.Http.HttpMessageInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HttpClient extends System.Net.Http.HttpMessageInvoker" />
  <TypeSignature Language="DocId" Value="T:System.Net.Http.HttpClient" />
  <TypeSignature Language="VB.NET" Value="Public Class HttpClient&#xA;Inherits HttpMessageInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpClient : System::Net::Http::HttpMessageInvoker" />
  <TypeSignature Language="F#" Value="type HttpClient = class&#xA;    inherit HttpMessageInvoker" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Http</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Net.Http" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Net.Http.HttpMessageInvoker</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="f0817-101">URI で識別されるリソースに HTTP 要求を送信し、そのリソースから HTTP 応答を受信するための基本クラスを提供します。</span><span class="sxs-lookup"><span data-stu-id="f0817-101">Provides a base class for sending HTTP requests and receiving HTTP responses from a resource identified by a URI.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-102"><xref:System.Net.Http.HttpClient> クラスのインスタンスは、HTTP 要求を送信するためのセッションとして機能します。</span><span class="sxs-lookup"><span data-stu-id="f0817-102">The <xref:System.Net.Http.HttpClient> class instance acts as a session to send HTTP requests.</span></span> <span data-ttu-id="f0817-103"><xref:System.Net.Http.HttpClient> インスタンスは、そのインスタンスによって実行されるすべての要求に適用される設定のコレクションです。</span><span class="sxs-lookup"><span data-stu-id="f0817-103">An <xref:System.Net.Http.HttpClient> instance is a collection of settings applied to all requests executed by that instance.</span></span> <span data-ttu-id="f0817-104">さらに、すべての <xref:System.Net.Http.HttpClient> インスタンスは独自の接続プールを使用するため、他の <xref:System.Net.Http.HttpClient> インスタンスによって実行される要求から要求が分離されます。</span><span class="sxs-lookup"><span data-stu-id="f0817-104">In addition, every <xref:System.Net.Http.HttpClient> instance uses its own connection pool, isolating its requests from requests executed by other <xref:System.Net.Http.HttpClient> instances.</span></span>  
  
 <span data-ttu-id="f0817-105"><xref:System.Net.Http.HttpClient> は、より具体的な HTTP クライアントの基本クラスとしても機能します。</span><span class="sxs-lookup"><span data-stu-id="f0817-105">The <xref:System.Net.Http.HttpClient> also acts as a base class for more specific HTTP clients.</span></span> <span data-ttu-id="f0817-106">例として、Facebook web サービスに固有の追加のメソッド (たとえば、GetFriends メソッド) を提供する FacebookHttpClient があります。</span><span class="sxs-lookup"><span data-stu-id="f0817-106">An example would be a FacebookHttpClient providing additional methods specific to a Facebook web service (a GetFriends method, for instance).</span></span> <span data-ttu-id="f0817-107">派生クラスでは、クラスの仮想メソッドをオーバーライドしないでください。</span><span class="sxs-lookup"><span data-stu-id="f0817-107">Derived classes should not override the virtual methods on the class.</span></span> <span data-ttu-id="f0817-108">代わりに、<xref:System.Net.Http.HttpMessageHandler> を受け入れるコンストラクターのオーバーロードを使用して、要求前または要求後の処理を構成します。</span><span class="sxs-lookup"><span data-stu-id="f0817-108">Instead, use a constructor overload that accepts <xref:System.Net.Http.HttpMessageHandler> to configure any pre- or post-request processing instead.</span></span>
  
 <span data-ttu-id="f0817-109">.NET Framework と Mono では、既定で <xref:System.Net.HttpWebRequest> を使用してサーバーに要求が送信されます。</span><span class="sxs-lookup"><span data-stu-id="f0817-109">By default on .NET Framework and Mono, <xref:System.Net.HttpWebRequest> is used to send requests to the server.</span></span> <span data-ttu-id="f0817-110">この動作は、<xref:System.Net.Http.HttpMessageHandler> インスタンスをパラメーターとして受け取るコンストラクターのオーバーロードの1つで別のチャネルを指定することによって変更できます。</span><span class="sxs-lookup"><span data-stu-id="f0817-110">This behavior can be modified by specifying a different channel in one of the constructor overloads taking a <xref:System.Net.Http.HttpMessageHandler> instance as parameter.</span></span> <span data-ttu-id="f0817-111">認証やキャッシュなどの機能が必要な場合は、<xref:System.Net.Http.WebRequestHandler> を使用して設定を構成し、インスタンスをコンストラクターに渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="f0817-111">If features like authentication or caching are required, <xref:System.Net.Http.WebRequestHandler> can be used to configure settings and the instance can be passed to the constructor.</span></span> <span data-ttu-id="f0817-112">返されたハンドラーは、<xref:System.Net.Http.HttpMessageHandler> パラメーターを受け取るコンストラクターのオーバーロードの1つに渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="f0817-112">The returned handler can be passed to one of the constructor overloads taking a <xref:System.Net.Http.HttpMessageHandler> parameter.</span></span>  
  
 <span data-ttu-id="f0817-113"><xref:System.Net.Http> 名前空間の <xref:System.Net.Http.HttpClient> および関連するクラスを使用しているアプリで大量のデータ (50 mb 以上) をダウンロードする場合、アプリはこれらのダウンロードをストリーミングし、既定のバッファリングを使用しないようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f0817-113">If an app using <xref:System.Net.Http.HttpClient> and related classes in the <xref:System.Net.Http> namespace intends to download large amounts of data (50 megabytes or more), then the app should stream those downloads and not use the default buffering.</span></span> <span data-ttu-id="f0817-114">既定のバッファリングを使用すると、クライアントのメモリ使用量が非常に大きくなり、パフォーマンスが大幅に低下する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f0817-114">If the default buffering is used the client memory usage will get very large, potentially resulting in substantially reduced performance.</span></span>  

 <span data-ttu-id="f0817-115">未処理の要求がスレッドセーフではないため、<xref:System.Net.Http.HttpClient> のプロパティは変更しないでください。</span><span class="sxs-lookup"><span data-stu-id="f0817-115">Properties of <xref:System.Net.Http.HttpClient> should not be modified while there are outstanding requests, because it is not thread-safe.</span></span>

   
 <span data-ttu-id="f0817-116">次のメソッドはスレッドセーフです。</span><span class="sxs-lookup"><span data-stu-id="f0817-116">The following methods are thread safe:</span></span>  
  
1.  <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A>  
  
2.  <xref:System.Net.Http.HttpClient.DeleteAsync%2A>  
  
3.  <xref:System.Net.Http.HttpClient.GetAsync%2A>  
  
4.  <xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A>  
  
5.  <xref:System.Net.Http.HttpClient.GetStreamAsync%2A>  
  
6.  <xref:System.Net.Http.HttpClient.GetStringAsync%2A>  
  
7.  <xref:System.Net.Http.HttpClient.PostAsync%2A>  
  
8.  <xref:System.Net.Http.HttpClient.PutAsync%2A>  
  
9. <xref:System.Net.Http.HttpClient.SendAsync%2A>  
  
 <span data-ttu-id="f0817-117"><xref:System.Net.Http.HttpClient> は、一度インスタンス化し、アプリケーションの実行中に再利用することを目的としています。</span><span class="sxs-lookup"><span data-stu-id="f0817-117"><xref:System.Net.Http.HttpClient> is intended to be instantiated once and re-used throughout the life of an application.</span></span> <span data-ttu-id="f0817-118">すべての要求に対して HttpClient クラスをインスタンス化すると、大量の読み込みで使用可能なソケットの数が枯渇します。</span><span class="sxs-lookup"><span data-stu-id="f0817-118">Instantiating an HttpClient class for every request will exhaust the number of sockets available under heavy loads.</span></span> <span data-ttu-id="f0817-119">これにより、SocketException エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f0817-119">This will result in SocketException errors.</span></span> <span data-ttu-id="f0817-120">HttpClient を正しく使用する例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="f0817-120">Below is an example using HttpClient correctly.</span></span>  
  
```csharp
public class GoodController : ApiController
{
    private static readonly HttpClient HttpClient;

    static GoodController()
    {
        HttpClient = new HttpClient();
    }
}
```

```vb
  Public Class GoodController
    Inherits ApiController  
   
    Private Shared ReadOnly HttpClient As HttpClient  
  
    Shared Sub New()  
        HttpClient = New HttpClient()
    End Sub
End Class
```

<span data-ttu-id="f0817-121"><xref:System.Net.Http.HttpClient> は、実行されている各プラットフォームで使用可能な低レベルの機能をラップする高レベルの API です。</span><span class="sxs-lookup"><span data-stu-id="f0817-121">The <xref:System.Net.Http.HttpClient> is a high-level API that wraps the lower-level functionality available on each platform where it runs.</span></span>

<span data-ttu-id="f0817-122">各プラットフォームでは、<xref:System.Net.Http.HttpClient> が最適なトランスポートを使用しようとします。</span><span class="sxs-lookup"><span data-stu-id="f0817-122">On each platform, <xref:System.Net.Http.HttpClient> tries to use the best available transport:</span></span>

| <span data-ttu-id="f0817-123">**ホスト/ランタイム**</span><span class="sxs-lookup"><span data-stu-id="f0817-123">**Host/Runtime**</span></span>            | <span data-ttu-id="f0817-124">**バック**</span><span class="sxs-lookup"><span data-stu-id="f0817-124">**Backend**</span></span>                                                                               |
| --------------------------- | ----------------------------------------------------------------------------------------- |
| <span data-ttu-id="f0817-125">Windows/.NET Framework</span><span class="sxs-lookup"><span data-stu-id="f0817-125">Windows/.NET Framework</span></span>      | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="f0817-126">Windows/Mono</span><span class="sxs-lookup"><span data-stu-id="f0817-126">Windows/Mono</span></span>                | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="f0817-127">Windows/UWP</span><span class="sxs-lookup"><span data-stu-id="f0817-127">Windows/UWP</span></span>                 | <span data-ttu-id="f0817-128">Windows ネイティブ <xref:System.Net.Http.WinHttpHandler> (HTTP 2.0 対応)</span><span class="sxs-lookup"><span data-stu-id="f0817-128">Windows native <xref:System.Net.Http.WinHttpHandler> (HTTP 2.0 capable)</span></span>                   |
| <span data-ttu-id="f0817-129">Windows/.NET Core 1.0-2.0</span><span class="sxs-lookup"><span data-stu-id="f0817-129">Windows/.NET Core 1.0-2.0</span></span>   | <span data-ttu-id="f0817-130">Windows ネイティブ <xref:System.Net.Http.WinHttpHandler> (HTTP 2.0 対応)</span><span class="sxs-lookup"><span data-stu-id="f0817-130">Windows native <xref:System.Net.Http.WinHttpHandler> (HTTP 2.0 capable)</span></span>                   |
| <span data-ttu-id="f0817-131">Android/Xamarin</span><span class="sxs-lookup"><span data-stu-id="f0817-131">Android/Xamarin</span></span>             | <span data-ttu-id="f0817-132">ビルド時に選択されます。</span><span class="sxs-lookup"><span data-stu-id="f0817-132">Selected at build-time.</span></span> <span data-ttu-id="f0817-133"><xref:System.Net.HttpWebRequest> を使用するか、Android のネイティブ[`HttpURLConnection`](https://developer.xamarin.com/api/type/Java.Net.HttpURLConnection/)を使用するように構成することができます</span><span class="sxs-lookup"><span data-stu-id="f0817-133">Can either use <xref:System.Net.HttpWebRequest> or be configured to use Android's native [`HttpURLConnection`](https://developer.xamarin.com/api/type/Java.Net.HttpURLConnection/)</span></span> |
| <span data-ttu-id="f0817-134">iOS、tvOS、watchOS/Xamarin</span><span class="sxs-lookup"><span data-stu-id="f0817-134">iOS, tvOS, watchOS/Xamarin</span></span>  | <span data-ttu-id="f0817-135">ビルド時に選択されます。</span><span class="sxs-lookup"><span data-stu-id="f0817-135">Selected at build-time.</span></span> <span data-ttu-id="f0817-136"><xref:System.Net.HttpWebRequest> を使用することも、Apple の[`NSUrlSession`](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/)を使用するように構成することもできます (HTTP 2.0 対応)。</span><span class="sxs-lookup"><span data-stu-id="f0817-136">Can either use <xref:System.Net.HttpWebRequest> or be configured to use Apple's [`NSUrlSession`](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) (HTTP 2.0 capable)</span></span> |
| <span data-ttu-id="f0817-137">macOS/Xamarin</span><span class="sxs-lookup"><span data-stu-id="f0817-137">macOS/Xamarin</span></span>               | <span data-ttu-id="f0817-138">ビルド時に選択されます。</span><span class="sxs-lookup"><span data-stu-id="f0817-138">Selected at build-time.</span></span> <span data-ttu-id="f0817-139"><xref:System.Net.HttpWebRequest> を使用することも、Apple の[`NSUrlSession`](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/)を使用するように構成することもできます (HTTP 2.0 対応)。</span><span class="sxs-lookup"><span data-stu-id="f0817-139">Can either use <xref:System.Net.HttpWebRequest> or be configured to use Apple's [`NSUrlSession`](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) (HTTP 2.0 capable)</span></span> |
| <span data-ttu-id="f0817-140">macOS/Mono</span><span class="sxs-lookup"><span data-stu-id="f0817-140">macOS/Mono</span></span>                  | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="f0817-141">macOS/.NET Core 1.0-2.0</span><span class="sxs-lookup"><span data-stu-id="f0817-141">macOS/.NET Core 1.0-2.0</span></span>     | <span data-ttu-id="f0817-142">`libcurl`ベースの HTTP トランスポート (HTTP 2.0 対応)</span><span class="sxs-lookup"><span data-stu-id="f0817-142">`libcurl`-based HTTP transport (HTTP 2.0 capable)</span></span>                                         |
| <span data-ttu-id="f0817-143">Linux/Mono</span><span class="sxs-lookup"><span data-stu-id="f0817-143">Linux/Mono</span></span>                  | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="f0817-144">Linux/.NET Core 1.0-2.0</span><span class="sxs-lookup"><span data-stu-id="f0817-144">Linux/.NET Core 1.0-2.0</span></span>     | <span data-ttu-id="f0817-145">`libcurl`ベースの HTTP トランスポート (HTTP 2.0 対応)</span><span class="sxs-lookup"><span data-stu-id="f0817-145">`libcurl`-based HTTP transport (HTTP 2.0 capable)</span></span>                                         |
| <span data-ttu-id="f0817-146">.NET Core 2.1 以降</span><span class="sxs-lookup"><span data-stu-id="f0817-146">.NET Core 2.1 and later</span></span>     | <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType>                    |

<span data-ttu-id="f0817-147">ユーザーは、<xref:System.Net.Http.HttpMessageHandler>を受け取る <xref:System.Net.Http.HttpClient.%23ctor*> コンストラクターを呼び出すことによって、<xref:System.Net.Http.HttpClient> の特定のトランスポートを構成することもできます。</span><span class="sxs-lookup"><span data-stu-id="f0817-147">Users can also configure a specific transport for <xref:System.Net.Http.HttpClient> by invoking the <xref:System.Net.Http.HttpClient.%23ctor*> constructor that takes an <xref:System.Net.Http.HttpMessageHandler>.</span></span>

### <a name="httpclient-and-net-core"></a><span data-ttu-id="f0817-148">HttpClient と .NET Core</span><span class="sxs-lookup"><span data-stu-id="f0817-148">HttpClient and .NET Core</span></span>

<span data-ttu-id="f0817-149">.NET Core 2.1 以降、`HttpClientHandler` ではなく、<xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType> クラスによって、`HttpClient`などの上位レベルの HTTP ネットワーククラスで使用される実装が提供されます。</span><span class="sxs-lookup"><span data-stu-id="f0817-149">Starting with .NET Core 2.1, the <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType> class instead of `HttpClientHandler` provides the implementation used by higher-level HTTP networking classes such as `HttpClient`.</span></span> <span data-ttu-id="f0817-150"><xref:System.Net.Http.SocketsHttpHandler> の使用には、次のような利点があります。</span><span class="sxs-lookup"><span data-stu-id="f0817-150">The use of <xref:System.Net.Http.SocketsHttpHandler> offers a number of advantages:</span></span>

- <span data-ttu-id="f0817-151">以前の実装と比較して、パフォーマンスが大幅に向上しています。</span><span class="sxs-lookup"><span data-stu-id="f0817-151">A significant performance improvement when compared with the previous implementation.</span></span>

- <span data-ttu-id="f0817-152">プラットフォームの依存関係を削除することで、デプロイとサービスが簡単になります。</span><span class="sxs-lookup"><span data-stu-id="f0817-152">The elimination of platform dependencies, which simplifies deployment and servicing.</span></span> <span data-ttu-id="f0817-153">たとえば、`libcurl` は macOS の .NET Core および Linux 用 .NET Core に依存しなくなりました。</span><span class="sxs-lookup"><span data-stu-id="f0817-153">For example, `libcurl` is no longer a dependency on .NET Core for macOS and .NET Core for Linux.</span></span>

- <span data-ttu-id="f0817-154">すべての .NET プラットフォームでの一貫した動作。</span><span class="sxs-lookup"><span data-stu-id="f0817-154">Consistent behavior across all .NET platforms.</span></span>

<span data-ttu-id="f0817-155">この変更が望ましくない場合は、古い <xref:System.Net.Http.HttpClientHandler?displayProperty=nameWithType> を使用するようにアプリケーションを構成できます。これには、次のようなさまざまな方法があります。</span><span class="sxs-lookup"><span data-stu-id="f0817-155">If this change is undesirable, you can configure your application to use the older <xref:System.Net.Http.HttpClientHandler?displayProperty=nameWithType> instead in a number of ways:</span></span>

- <span data-ttu-id="f0817-156">次のように <xref:System.AppContext.SetSwitch%2A?displayProperty=nameWithType> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="f0817-156">By calling the <xref:System.AppContext.SetSwitch%2A?displayProperty=nameWithType> method as follows:</span></span>

   ```csharp
   AppContext.SetSwitch("System.Net.Http.UseSocketsHttpHandler", false);
   ```

   ```vb
   AppContext.SetSwitch("System.Net.Http.UseSocketsHttpHandler", False)
   ``` 
- <span data-ttu-id="f0817-157">`System.Net.Http.UseSocketsHttpHandler` スイッチを定義するには、次のように*します*。</span><span class="sxs-lookup"><span data-stu-id="f0817-157">By defining the `System.Net.Http.UseSocketsHttpHandler` switch in the *.netcore.runtimeconfig.json* configuration file:</span></span>

  ```json
  "runtimeOptions": {
    "configProperties": {
        "System.Net.Http.UseSocketsHttpHandler": false
    }
  }
  ```
  
- <span data-ttu-id="f0817-158">`DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER` という名前の環境変数を定義し、それを `false` または0のいずれかに設定します。</span><span class="sxs-lookup"><span data-stu-id="f0817-158">By defining an environment variable named `DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER` and setting it to either `false` or 0.</span></span>

## Examples  
 [!code-csharp[System.Net.Http.HttpClient#1](~/samples/snippets/csharp/VS_Snippets_Misc/system.net.http.httpclient/cs/source.cs#1)]  
 [!code-vb[System.Net.Http.HttpClient#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/system.net.http.httpclient/vb/source.vb#1)]

 <span data-ttu-id="f0817-159">前のコード例では、`async Task Main()` のエントリポイントを使用しています。</span><span class="sxs-lookup"><span data-stu-id="f0817-159">The preceding code example uses an `async Task Main()` entry point.</span></span> <span data-ttu-id="f0817-160">この機能にC#は7.1 以降が必要です。</span><span class="sxs-lookup"><span data-stu-id="f0817-160">That feature requires C# 7.1 or later.</span></span>
 
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=245696"><span data-ttu-id="f0817-161">Web サービスへの接続</span><span class="sxs-lookup"><span data-stu-id="f0817-161">Connecting to a web service</span></span></related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=245697"><span data-ttu-id="f0817-162">クイックスタート: HttpClient を使用した接続</span><span class="sxs-lookup"><span data-stu-id="f0817-162">Quickstart: Connecting using HttpClient</span></span></related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=245699"><span data-ttu-id="f0817-163">HttpClient ハンドラーを使う方法</span><span class="sxs-lookup"><span data-stu-id="f0817-163">How to use HttpClient handlers</span></span></related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=245698"><span data-ttu-id="f0817-164">HttpClient の接続をセキュリティで保護する方法</span><span class="sxs-lookup"><span data-stu-id="f0817-164">How to secure HttpClient connections</span></span></related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=242550"><span data-ttu-id="f0817-165">HttpClient のサンプル</span><span class="sxs-lookup"><span data-stu-id="f0817-165">HttpClient Sample</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f0817-166"><see cref="T:System.Net.Http.HttpClient" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="f0817-166">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-167"><xref:System.Net.Http.HttpClient> は、一度インスタンス化し、アプリケーションの実行中に再利用することを目的としています。</span><span class="sxs-lookup"><span data-stu-id="f0817-167"><xref:System.Net.Http.HttpClient> is intended to be instantiated once and re-used throughout the life of an application.</span></span> <span data-ttu-id="f0817-168">すべての要求に対して HttpClient クラスをインスタンス化すると、大量の読み込みで使用可能なソケットの数が枯渇します。</span><span class="sxs-lookup"><span data-stu-id="f0817-168">Instantiating an HttpClient class for every request will exhaust the number of sockets available under heavy loads.</span></span> <span data-ttu-id="f0817-169">これにより、SocketException エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f0817-169">This will result in SocketException errors.</span></span> <span data-ttu-id="f0817-170">HttpClient を正しく使用する例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="f0817-170">Below is an example using HttpClient correctly.</span></span>  
  
```csharp  
public class GoodController : ApiController  
{  
    private static readonly HttpClient HttpClient;  
  
    static GoodController()  
    {  
        HttpClient = new HttpClient();  
    }  
}  
```

```vb
  Public Class GoodController
    Inherits ApiController  
   
    Private Shared ReadOnly HttpClient As HttpClient
  
    Shared Sub New()  
        HttpClient = New HttpClient()
    End Sub
End Class
```

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpClient();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f0817-171">このインスタンスが破棄されたときに破棄される <see cref="T:System.Net.Http.HttpClientHandler" /> を使用して、<see cref="T:System.Net.Http.HttpClient" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="f0817-171">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class using a <see cref="T:System.Net.Http.HttpClientHandler" /> that is disposed when this instance is disposed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[    
## Remarks  
<span data-ttu-id="f0817-172">このコンストラクターを使用することは、 [`HttpClient(new HttpClientHandler(), true)`](xref:System.Net.Http.HttpClient.%23ctor(System.Net.Http.HttpMessageHandler,System.Boolean))コンストラクターを呼び出すことと同じです。</span><span class="sxs-lookup"><span data-stu-id="f0817-172">Using this constructor is equivalent to calling the [`HttpClient(new HttpClientHandler(), true)`](xref:System.Net.Http.HttpClient.%23ctor(System.Net.Http.HttpMessageHandler,System.Boolean)) constructor.</span></span>
]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpClient (System.Net.Http.HttpMessageHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Http.HttpMessageHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As HttpMessageHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpClient(System::Net::Http::HttpMessageHandler ^ handler);" />
      <MemberSignature Language="F#" Value="new System.Net.Http.HttpClient : System.Net.Http.HttpMessageHandler -&gt; System.Net.Http.HttpClient" Usage="new System.Net.Http.HttpClient handler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Net.Http.HttpMessageHandler" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="f0817-173">要求の送信に使用する HTTP ハンドラー スタック</span><span class="sxs-lookup"><span data-stu-id="f0817-173">The HTTP handler stack to use for sending requests.</span></span></param>
        <summary><span data-ttu-id="f0817-174">指定したハンドラーを使用して、<see cref="T:System.Net.Http.HttpClient" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="f0817-174">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class with the specified handler.</span></span> <span data-ttu-id="f0817-175">このインスタンスが破棄されたときに、ハンドラーは破棄されます。</span><span class="sxs-lookup"><span data-stu-id="f0817-175">The handler is disposed when this instance is disposed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[    
## Remarks  
<span data-ttu-id="f0817-176">このコンストラクターを使用することは、 [`HttpClient(handler, true)`](xref:System.Net.Http.HttpClient.%23ctor(System.Net.Http.HttpMessageHandler,System.Boolean))コンストラクターを呼び出すことと同じです。</span><span class="sxs-lookup"><span data-stu-id="f0817-176">Using this constructor is equivalent to calling the [`HttpClient(handler, true)`](xref:System.Net.Http.HttpClient.%23ctor(System.Net.Http.HttpMessageHandler,System.Boolean)) constructor.</span></span>

<span data-ttu-id="f0817-177">指定された `handler` は、 [Httpclient. Dispose](xref:System.Net.Http.HttpMessageInvoker.Dispose)を呼び出すことによって破棄されます。</span><span class="sxs-lookup"><span data-stu-id="f0817-177">The specified `handler` will be disposed of by calling [HttpClient.Dispose](xref:System.Net.Http.HttpMessageInvoker.Dispose).</span></span>  
]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f0817-178"><paramref name="handler" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f0817-178">The <paramref name="handler" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpClient (System.Net.Http.HttpMessageHandler handler, bool disposeHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Http.HttpMessageHandler handler, bool disposeHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As HttpMessageHandler, disposeHandler As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpClient(System::Net::Http::HttpMessageHandler ^ handler, bool disposeHandler);" />
      <MemberSignature Language="F#" Value="new System.Net.Http.HttpClient : System.Net.Http.HttpMessageHandler * bool -&gt; System.Net.Http.HttpClient" Usage="new System.Net.Http.HttpClient (handler, disposeHandler)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Net.Http.HttpMessageHandler" />
        <Parameter Name="disposeHandler" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="f0817-179">HTTP 応答メッセージの処理を行う <see cref="T:System.Net.Http.HttpMessageHandler" />。</span><span class="sxs-lookup"><span data-stu-id="f0817-179">The <see cref="T:System.Net.Http.HttpMessageHandler" /> responsible for processing the HTTP response messages.</span></span></param>
        <param name="disposeHandler"><span data-ttu-id="f0817-180">内部ハンドラーを [HttpClient.Dispose](xref:System.Net.Http.HttpMessageInvoker.Dispose) で破棄する場合は <see langword="true" />。内部ハンドラーを再利用する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f0817-180"><see langword="true" /> if the inner handler should be disposed of by [HttpClient.Dispose](xref:System.Net.Http.HttpMessageInvoker.Dispose); <see langword="false" /> if you intend to reuse the inner handler.</span></span></param>
        <summary><span data-ttu-id="f0817-181">提供されたハンドラーを使用して、<see cref="T:System.Net.Http.HttpClient" /> クラスの新しいインスタンスを初期化し、このインスタンスが破棄されるときにそのハンドラーを破棄するかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="f0817-181">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class with the provided handler, and specifies whether that handler should be disposed when this instance is disposed.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f0817-182"><paramref name="handler" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f0817-182">The <paramref name="handler" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BaseAddress">
      <MemberSignature Language="C#" Value="public Uri BaseAddress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri BaseAddress" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.BaseAddress" />
      <MemberSignature Language="VB.NET" Value="Public Property BaseAddress As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ BaseAddress { Uri ^ get(); void set(Uri ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BaseAddress : Uri with get, set" Usage="System.Net.Http.HttpClient.BaseAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f0817-183">要求の送信時に使用されるインターネット リソースの URI (Uniform Resource Identifier) の基本アドレスを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="f0817-183">Gets or sets the base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.</span></span></summary>
        <value><span data-ttu-id="f0817-184">要求を送信するときに使用する、インターネット リソースの Uniform Resource Identifier (URI) のベース アドレス。</span><span class="sxs-lookup"><span data-stu-id="f0817-184">The base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-185">相対 Uri を使用して <xref:System.Net.Http.HttpRequestMessage> を送信する場合、メッセージ Uri が <xref:System.Net.Http.HttpClient.BaseAddress%2A> プロパティに追加されて絶対 Uri が作成されます。</span><span class="sxs-lookup"><span data-stu-id="f0817-185">When sending a <xref:System.Net.Http.HttpRequestMessage> with a relative Uri, the message Uri will be added to the <xref:System.Net.Http.HttpClient.BaseAddress%2A> property to create an absolute Uri.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelPendingRequests">
      <MemberSignature Language="C#" Value="public void CancelPendingRequests ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelPendingRequests() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.CancelPendingRequests" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelPendingRequests ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelPendingRequests();" />
      <MemberSignature Language="F#" Value="member this.CancelPendingRequests : unit -&gt; unit" Usage="httpClient.CancelPendingRequests " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f0817-186">このインスタンスでのすべての保留中の要求をキャンセルします。</span><span class="sxs-lookup"><span data-stu-id="f0817-186">Cancel all pending requests on this instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-187">このメソッドを呼び出した後も、<xref:System.Net.Http.HttpClient> インスタンスを使用して追加の要求を実行できます。</span><span class="sxs-lookup"><span data-stu-id="f0817-187">After calling this method, the <xref:System.Net.Http.HttpClient> instance can still be used to execute additional requests.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultProxy">
      <MemberSignature Language="C#" Value="public static System.Net.IWebProxy DefaultProxy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Net.IWebProxy DefaultProxy" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.DefaultProxy" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultProxy As IWebProxy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Net::IWebProxy ^ DefaultProxy { System::Net::IWebProxy ^ get(); void set(System::Net::IWebProxy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultProxy : System.Net.IWebProxy with get, set" Usage="System.Net.Http.HttpClient.DefaultProxy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IWebProxy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f0817-188">グローバル HTTP プロキシを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="f0817-188">Gets or sets the global Http proxy.</span></span></summary>
        <value><span data-ttu-id="f0817-189"><see cref="T:System.Net.HttpWebRequest" />をインスタンス化するすべての呼び出しによって使用されるプロキシ。</span><span class="sxs-lookup"><span data-stu-id="f0817-189">A proxy used by every call that instantiates a <see cref="T:System.Net.HttpWebRequest" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks
<span data-ttu-id="f0817-190">この静的プロパティは、コンストラクターを介して渡された <xref:System.Net.Http.HttpClientHandler> にプロキシが明示的に設定されていない場合に、すべての <xref:System.Net.Http.HttpClient> インスタンスが使用する既定のプロキシを決定します。</span><span class="sxs-lookup"><span data-stu-id="f0817-190">This static property determines the default proxy that all <xref:System.Net.Http.HttpClient> instances use if no proxy is set explicitly in the <xref:System.Net.Http.HttpClientHandler> passed through its constructor.</span></span> 

<span data-ttu-id="f0817-191">このプロパティによって返される既定のインスタンスは、プラットフォームに応じて異なる規則のセットに従って初期化されます。</span><span class="sxs-lookup"><span data-stu-id="f0817-191">The default instance returned by this property will initialize following a different set of rules depending on your platform:</span></span>
* <span data-ttu-id="f0817-192">**Windows の場合:** 環境変数から、または定義されていない場合は、ユーザーのプロキシ設定からプロキシ構成を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f0817-192">**For Windows:** Reads proxy configuration from environment variables or, if those are not defined, from the user's proxy settings.</span></span>

* <span data-ttu-id="f0817-193">**MacOS の場合:** 環境変数から、または定義されていない場合はシステムのプロキシ設定からプロキシ構成を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f0817-193">**For macOS:** Reads proxy configuration from environment variables or, if those are not defined, from the system's proxy settings.</span></span>

* <span data-ttu-id="f0817-194">**Linux の場合:** 環境変数からプロキシ構成を読み取ります。これらが定義されていない場合、このプロパティは、すべてのアドレスをバイパスする構成されていないインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="f0817-194">**For Linux:** Reads proxy configuration from environment variables or, in case those are not defined, this property initializes a non-configured instance that bypasses all addresses.</span></span>

<span data-ttu-id="f0817-195">Windows および Unix ベースのプラットフォームでの `DefaultProxy` の初期化に使用される環境変数は次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="f0817-195">The environment variables used for `DefaultProxy` initialization on Windows and Unix-based platforms are:</span></span>
* <span data-ttu-id="f0817-196">HTTP_PROXY: HTTP 要求で使用されるプロキシサーバーのホスト名または IP アドレス。</span><span class="sxs-lookup"><span data-stu-id="f0817-196">HTTP_PROXY: the hostname or IP address of the proxy server used on HTTP requests.</span></span>
* <span data-ttu-id="f0817-197">HTTPS_PROXY: HTTPS 要求で使用されるプロキシサーバーのホスト名または IP アドレス。</span><span class="sxs-lookup"><span data-stu-id="f0817-197">HTTPS_PROXY: the hostname or IP address of the proxy server used on HTTPS requests.</span></span>
* <span data-ttu-id="f0817-198">ALL_PROXY: HTTP および/または HTTPS 要求で使用されるプロキシサーバーのホスト名または IP アドレス (HTTP_PROXY または HTTPS_PROXY が定義されていない場合)。</span><span class="sxs-lookup"><span data-stu-id="f0817-198">ALL_PROXY: the hostname or IP address of the proxy server used on HTTP and/or HTTPS requests in case HTTP_PROXY and/or HTTPS_PROXY are not defined.</span></span>
* <span data-ttu-id="f0817-199">NO_PROXY: プロキシから除外する必要があるホスト名のコンマ区切りのリスト。</span><span class="sxs-lookup"><span data-stu-id="f0817-199">NO_PROXY: a comma-separated list of hostnames that should be excluded from proxying.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f0817-200">渡される値を <see langword="null" /> とすることはできません。</span><span class="sxs-lookup"><span data-stu-id="f0817-200">The value passed cannot be <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultRequestHeaders">
      <MemberSignature Language="C#" Value="public System.Net.Http.Headers.HttpRequestHeaders DefaultRequestHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Http.Headers.HttpRequestHeaders DefaultRequestHeaders" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.DefaultRequestHeaders" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultRequestHeaders As HttpRequestHeaders" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Http::Headers::HttpRequestHeaders ^ DefaultRequestHeaders { System::Net::Http::Headers::HttpRequestHeaders ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultRequestHeaders : System.Net.Http.Headers.HttpRequestHeaders" Usage="System.Net.Http.HttpClient.DefaultRequestHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Http.Headers.HttpRequestHeaders</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f0817-201">各要求と共に送信されるヘッダーを取得します。</span><span class="sxs-lookup"><span data-stu-id="f0817-201">Gets the headers which should be sent with each request.</span></span></summary>
        <value><span data-ttu-id="f0817-202">各要求と一緒に送信する必要があるヘッダー。</span><span class="sxs-lookup"><span data-stu-id="f0817-202">The headers which should be sent with each request.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-203">このプロパティで設定されたヘッダーは、要求メッセージで再度設定する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="f0817-203">Headers set on this property don't need to be set on request messages again.</span></span> <span data-ttu-id="f0817-204">未処理の要求がスレッドセーフではないため、`DefaultRequestHeaders` は変更しないでください。</span><span class="sxs-lookup"><span data-stu-id="f0817-204">`DefaultRequestHeaders` should not be modified while there are outstanding requests, because it is not thread-safe.</span></span>
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultRequestVersion">
      <MemberSignature Language="C#" Value="public Version DefaultRequestVersion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Version DefaultRequestVersion" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.DefaultRequestVersion" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultRequestVersion As Version" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Version ^ DefaultRequestVersion { Version ^ get(); void set(Version ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultRequestVersion : Version with get, set" Usage="System.Net.Http.HttpClient.DefaultRequestVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Version</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f0817-205">この <see cref="T:System.Net.Http.HttpClient" /> インスタンスによって行われる後続の要求で使用される、既定の HTTP バージョンを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="f0817-205">Gets or sets the default HTTP version used on subsequent requests made by this <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></summary>
        <value><span data-ttu-id="f0817-206">この <see cref="T:System.Net.Http.HttpClient" /> インスタンスを使用して行われたすべての要求に使用する既定のバージョン。</span><span class="sxs-lookup"><span data-stu-id="f0817-206">The default version to use for any requests made with this <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="f0817-207">`DefaultRequestVersion` は既定では <xref:System.Net.HttpVersion.Version11?displayProperty=nameWithType> です。</span><span class="sxs-lookup"><span data-stu-id="f0817-207">`DefaultRequestVersion` is <xref:System.Net.HttpVersion.Version11?displayProperty=nameWithType> by default.</span></span>

<span data-ttu-id="f0817-208">`DefaultRequestVersion` プロパティは、送信する <xref:System.Net.Http.HttpRequestMessage> を構築するときに、この <xref:System.Net.Http.HttpClient> インスタンスを使用して送信される要求に使用する既定の HTTP バージョンを指定します。具体的には、<xref:System.Net.Http.HttpClient.DeleteAsync%2A>、<xref:System.Net.Http.HttpClient.GetAsync%2A>、<xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A>、<xref:System.Net.Http.HttpClient.GetStreamAsync%2A>、<xref:System.Net.Http.HttpClient.GetStringAsync%2A>、<xref:System.Net.Http.HttpClient.PatchAsync%2A>、<xref:System.Net.Http.HttpClient.PostAsync%2A>、<xref:System.Net.Http.HttpClient.PutAsync%2A>などのメソッドの呼び出しを使用します。</span><span class="sxs-lookup"><span data-stu-id="f0817-208">The `DefaultRequestVersion` property specifies the default HTTP version to use for requests sent using this <xref:System.Net.Http.HttpClient> instance when it constructs the <xref:System.Net.Http.HttpRequestMessage> to send, specifically with calls to methods such as <xref:System.Net.Http.HttpClient.DeleteAsync%2A>, <xref:System.Net.Http.HttpClient.GetAsync%2A>, <xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A>, <xref:System.Net.Http.HttpClient.GetStreamAsync%2A>, <xref:System.Net.Http.HttpClient.GetStringAsync%2A>, <xref:System.Net.Http.HttpClient.PatchAsync%2A>, <xref:System.Net.Http.HttpClient.PostAsync%2A>, and <xref:System.Net.Http.HttpClient.PutAsync%2A>.</span></span>

<span data-ttu-id="f0817-209">`DefaultRequestVersion` プロパティは、<xref:System.Net.Http.HttpClient.SendAsync%2A> メソッドには適用されません。</span><span class="sxs-lookup"><span data-stu-id="f0817-209">The `DefaultRequestVersion` property doesn't apply to the <xref:System.Net.Http.HttpClient.SendAsync%2A> method.</span></span> <span data-ttu-id="f0817-210"><xref:System.Net.Http.HttpClient.SendAsync%2A> メソッドに引数として渡される <xref:System.Net.Http.HttpRequestMessage> パラメーターには、要求に使用される HTTP バージョンを制御する独自の `Version` プロパティがあります。</span><span class="sxs-lookup"><span data-stu-id="f0817-210">The <xref:System.Net.Http.HttpRequestMessage> parameter passed as the argument to the <xref:System.Net.Http.HttpClient.SendAsync%2A> method has its own `Version` property that controls the HTTP version used for the request.</span></span>

<span data-ttu-id="f0817-211">`DefaultRequestVersion` プロパティは、<xref:System.Net.Http.HttpClient> インスタンスが要求を開始していない限り変更できます。</span><span class="sxs-lookup"><span data-stu-id="f0817-211">The `DefaultRequestVersion` property can be changed as long as the <xref:System.Net.Http.HttpClient> instance has not started any request.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f0817-212">設定操作で、<see langword="DefaultRequestVersion" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f0817-212">In a set operation, <see langword="DefaultRequestVersion" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f0817-213"><see cref="T:System.Net.Http.HttpClient" /> インスタンスにより 1 つ以上の要求が既に開始されています。</span><span class="sxs-lookup"><span data-stu-id="f0817-213">The <see cref="T:System.Net.Http.HttpClient" /> instance has already started one or more requests.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="f0817-214"><see cref="T:System.Net.Http.HttpClient" /> インスタンスは既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="f0817-214">The <see cref="T:System.Net.Http.HttpClient" /> instance has already been disposed.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f0817-215">指定された URI に DELETE 要求を非同期操作として送信します。</span><span class="sxs-lookup"><span data-stu-id="f0817-215">Send a DELETE request to the specified Uri as an asynchronous operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (string requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteAsync (requestUri As String) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : string -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="f0817-216">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="f0817-216">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="f0817-217">指定された URI に DELETE 要求を非同期操作として送信します。</span><span class="sxs-lookup"><span data-stu-id="f0817-217">Send a DELETE request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="f0817-218">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f0817-218">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-219">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-219">This operation will not block.</span></span> <span data-ttu-id="f0817-220">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答全体 (コンテンツを含む) が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="f0817-220">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f0817-221"><paramref name="requestUri" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f0817-221">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f0817-222">要求メッセージは <see cref="T:System.Net.Http.HttpClient" /> インスタンスによって既に送信されました。</span><span class="sxs-lookup"><span data-stu-id="f0817-222">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="f0817-223">ネットワーク接続、DNS エラー、サーバー証明書の検証、タイムアウトなどの根本的な問題が原因で要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="f0817-223">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteAsync (requestUri As Uri) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : Uri -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="f0817-224">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="f0817-224">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="f0817-225">指定された URI に DELETE 要求を非同期操作として送信します。</span><span class="sxs-lookup"><span data-stu-id="f0817-225">Send a DELETE request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="f0817-226">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f0817-226">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-227">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-227">This operation will not block.</span></span> <span data-ttu-id="f0817-228">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答全体 (コンテンツを含む) が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="f0817-228">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f0817-229"><paramref name="requestUri" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f0817-229">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f0817-230">要求メッセージは <see cref="T:System.Net.Http.HttpClient" /> インスタンスによって既に送信されました。</span><span class="sxs-lookup"><span data-stu-id="f0817-230">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="f0817-231">ネットワーク接続、DNS エラー、サーバー証明書の検証、タイムアウトなどの根本的な問題が原因で要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="f0817-231">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (string requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(string requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteAsync (requestUri As String, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(System::String ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="f0817-232">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="f0817-232">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="f0817-233">キャンセル通知を受け取るために他のオブジェクトやスレッドで使用できるキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="f0817-233">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="f0817-234">非同期操作としてキャンセル トークンを使用して削除要求を指定された Uri に送信します。</span><span class="sxs-lookup"><span data-stu-id="f0817-234">Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="f0817-235">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f0817-235">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-236">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-236">This operation will not block.</span></span> <span data-ttu-id="f0817-237">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答全体 (コンテンツを含む) が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="f0817-237">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f0817-238"><paramref name="requestUri" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f0817-238">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f0817-239">要求メッセージは <see cref="T:System.Net.Http.HttpClient" /> インスタンスによって既に送信されました。</span><span class="sxs-lookup"><span data-stu-id="f0817-239">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="f0817-240">ネットワーク接続、DNS エラー、サーバー証明書の検証、タイムアウトなどの根本的な問題が原因で要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="f0817-240">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (Uri requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(class System.Uri requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteAsync (requestUri As Uri, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(Uri ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="f0817-241">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="f0817-241">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="f0817-242">キャンセル通知を受け取るために他のオブジェクトやスレッドで使用できるキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="f0817-242">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="f0817-243">非同期操作としてキャンセル トークンを使用して削除要求を指定された Uri に送信します。</span><span class="sxs-lookup"><span data-stu-id="f0817-243">Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="f0817-244">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f0817-244">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-245">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-245">This operation will not block.</span></span> <span data-ttu-id="f0817-246">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答全体 (コンテンツを含む) が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="f0817-246">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f0817-247"><paramref name="requestUri" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f0817-247">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f0817-248">要求メッセージは <see cref="T:System.Net.Http.HttpClient" /> インスタンスによって既に送信されました。</span><span class="sxs-lookup"><span data-stu-id="f0817-248">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="f0817-249">ネットワーク接続、DNS エラー、サーバー証明書の検証、タイムアウトなどの根本的な問題が原因で要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="f0817-249">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="httpClient.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="f0817-250">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f0817-250"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to releases only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="f0817-251"><see cref="T:System.Net.Http.HttpClient" />が使用しているアンマネージド リソースを解放します。オプションとして、マネージド リソースを破棄することもできます。</span><span class="sxs-lookup"><span data-stu-id="f0817-251">Releases the unmanaged resources used by the <see cref="T:System.Net.Http.HttpClient" /> and optionally disposes of the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-252">このメソッドは、パブリックな `Dispose()` メソッドと <xref:System.Object.Finalize%2A> メソッドによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="f0817-252">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="f0817-253">`Dispose()` は、`disposing` パラメーターを `true`に設定して、protected `Dispose(Boolean)` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="f0817-253">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="f0817-254"><xref:System.Object.Finalize%2A> は `disposing` を `false`に設定して `Dispose` を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="f0817-254"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="f0817-255">`disposing` パラメーターが `true` の場合、このメソッドは、この <xref:System.Net.Http.HttpClient> が参照しているすべてのマネージド オブジェクトによって保持されているリソースをすべて解放します。</span><span class="sxs-lookup"><span data-stu-id="f0817-255">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Http.HttpClient> references.</span></span> <span data-ttu-id="f0817-256">このメソッドは、参照される各オブジェクトの `Dispose()` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="f0817-256">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 <span data-ttu-id="f0817-257">このメソッドが呼び出されると、<xref:System.Net.Http.HttpClient.CancelPendingRequests%2A> メソッドが呼び出され、保留中のすべての要求が中止されます。</span><span class="sxs-lookup"><span data-stu-id="f0817-257">When this method is called, the <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A> method is called to abort all pending requests.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f0817-258">指定された URI に GET 要求を非同期操作として送信します。</span><span class="sxs-lookup"><span data-stu-id="f0817-258">Send a GET request to the specified Uri as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-259">操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-259">The operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As String) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="f0817-260">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="f0817-260">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="f0817-261">指定された URI に GET 要求を非同期操作として送信します。</span><span class="sxs-lookup"><span data-stu-id="f0817-261">Send a GET request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="f0817-262">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f0817-262">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-263">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-263">This operation will not block.</span></span> <span data-ttu-id="f0817-264">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答全体 (コンテンツを含む) が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="f0817-264">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f0817-265"><paramref name="requestUri" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f0817-265">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="f0817-266">ネットワーク接続、DNS エラー、サーバー証明書の検証、タイムアウトなどの根本的な問題が原因で要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="f0817-266">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As Uri) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="f0817-267">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="f0817-267">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="f0817-268">指定された URI に GET 要求を非同期操作として送信します。</span><span class="sxs-lookup"><span data-stu-id="f0817-268">Send a GET request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="f0817-269">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f0817-269">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-270">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-270">This operation will not block.</span></span> <span data-ttu-id="f0817-271">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答全体 (コンテンツを含む) が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="f0817-271">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f0817-272"><paramref name="requestUri" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f0817-272">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="f0817-273">ネットワーク接続、DNS エラー、サーバー証明書の検証、タイムアウトなどの根本的な問題が原因で要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="f0817-273">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri, System.Net.Http.HttpCompletionOption completionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As String, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri, System::Net::Http::HttpCompletionOption completionOption);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string * System.Net.Http.HttpCompletionOption -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="f0817-274">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="f0817-274">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="f0817-275">操作が完了したものと見なすタイミングを示す HTTP 完了オプション値。</span><span class="sxs-lookup"><span data-stu-id="f0817-275">An HTTP completion option value that indicates when the operation should be considered completed.</span></span></param>
        <summary><span data-ttu-id="f0817-276">非同期操作としてHTTP 完了オプションを使用して GET 要求を指定された Uri に送信します。</span><span class="sxs-lookup"><span data-stu-id="f0817-276">Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="f0817-277">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f0817-277">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-278">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-278">This operation will not block.</span></span> <span data-ttu-id="f0817-279">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、一部またはすべての応答 (コンテンツを含む) が読み取られた後に `completionOption` パラメーターに基づいて完了します。</span><span class="sxs-lookup"><span data-stu-id="f0817-279">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f0817-280"><paramref name="requestUri" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f0817-280">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="f0817-281">ネットワーク接続、DNS エラー、サーバー証明書の検証、タイムアウトなどの根本的な問題が原因で要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="f0817-281">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As String, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="f0817-282">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="f0817-282">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="f0817-283">キャンセル通知を受け取るために他のオブジェクトやスレッドで使用できるキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="f0817-283">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="f0817-284">非同期操作としてキャンセル トークンを使用して GET 要求を指定された Uri に送信します。</span><span class="sxs-lookup"><span data-stu-id="f0817-284">Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="f0817-285">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f0817-285">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-286">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-286">This operation will not block.</span></span> <span data-ttu-id="f0817-287">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答全体 (コンテンツを含む) が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="f0817-287">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f0817-288"><paramref name="requestUri" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f0817-288">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="f0817-289">ネットワーク接続、DNS エラー、サーバー証明書の検証、タイムアウトなどの根本的な問題が原因で要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="f0817-289">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri, System.Net.Http.HttpCompletionOption completionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As Uri, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri, System::Net::Http::HttpCompletionOption completionOption);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri * System.Net.Http.HttpCompletionOption -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="f0817-290">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="f0817-290">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="f0817-291">操作が完了したものと見なすタイミングを示す HTTP 完了オプション値。</span><span class="sxs-lookup"><span data-stu-id="f0817-291">An HTTP completion option value that indicates when the operation should be considered completed.</span></span></param>
        <summary><span data-ttu-id="f0817-292">非同期操作としてHTTP 完了オプションを使用して GET 要求を指定された Uri に送信します。</span><span class="sxs-lookup"><span data-stu-id="f0817-292">Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="f0817-293">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f0817-293">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-294">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-294">This operation will not block.</span></span> <span data-ttu-id="f0817-295">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、一部またはすべての応答 (コンテンツを含む) が読み取られた後に `completionOption` パラメーターに基づいて完了します。</span><span class="sxs-lookup"><span data-stu-id="f0817-295">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f0817-296"><paramref name="requestUri" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f0817-296">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="f0817-297">ネットワーク接続、DNS エラー、サーバー証明書の検証、タイムアウトなどの根本的な問題が原因で要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="f0817-297">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As Uri, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="f0817-298">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="f0817-298">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="f0817-299">キャンセル通知を受け取るために他のオブジェクトやスレッドで使用できるキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="f0817-299">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="f0817-300">非同期操作としてキャンセル トークンを使用して GET 要求を指定された Uri に送信します。</span><span class="sxs-lookup"><span data-stu-id="f0817-300">Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="f0817-301">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f0817-301">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-302">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-302">This operation will not block.</span></span> <span data-ttu-id="f0817-303">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答全体 (コンテンツを含む) が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="f0817-303">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f0817-304"><paramref name="requestUri" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f0817-304">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="f0817-305">ネットワーク接続、DNS エラー、サーバー証明書の検証、タイムアウトなどの根本的な問題が原因で要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="f0817-305">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As String, completionOption As HttpCompletionOption, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string * System.Net.Http.HttpCompletionOption * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="f0817-306">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="f0817-306">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="f0817-307">操作が完了したものと見なすタイミングを示す HTTP 完了オプション値。</span><span class="sxs-lookup"><span data-stu-id="f0817-307">An HTTP  completion option value that indicates when the operation should be considered completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="f0817-308">キャンセル通知を受け取るために他のオブジェクトやスレッドで使用できるキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="f0817-308">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="f0817-309">非同期操作としてキャンセル トークンおよび HTTP 完了オプションを使用して GET 要求を指定された Uri に送信します。</span><span class="sxs-lookup"><span data-stu-id="f0817-309">Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="f0817-310">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f0817-310">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-311">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-311">This operation will not block.</span></span> <span data-ttu-id="f0817-312">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、一部またはすべての応答 (コンテンツを含む) が読み取られた後に `completionOption` パラメーターに基づいて完了します。</span><span class="sxs-lookup"><span data-stu-id="f0817-312">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f0817-313"><paramref name="requestUri" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f0817-313">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="f0817-314">ネットワーク接続、DNS エラー、サーバー証明書の検証、タイムアウトなどの根本的な問題が原因で要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="f0817-314">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As Uri, completionOption As HttpCompletionOption, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri * System.Net.Http.HttpCompletionOption * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="f0817-315">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="f0817-315">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="f0817-316">操作が完了したものと見なすタイミングを示す HTTP 完了オプション値。</span><span class="sxs-lookup"><span data-stu-id="f0817-316">An HTTP  completion option value that indicates when the operation should be considered completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="f0817-317">キャンセル通知を受け取るために他のオブジェクトやスレッドで使用できるキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="f0817-317">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="f0817-318">非同期操作としてキャンセル トークンおよび HTTP 完了オプションを使用して GET 要求を指定された Uri に送信します。</span><span class="sxs-lookup"><span data-stu-id="f0817-318">Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="f0817-319">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f0817-319">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-320">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-320">This operation will not block.</span></span> <span data-ttu-id="f0817-321">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、一部またはすべての応答 (コンテンツを含む) が読み取られた後に `completionOption` パラメーターに基づいて完了します。</span><span class="sxs-lookup"><span data-stu-id="f0817-321">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f0817-322"><paramref name="requestUri" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f0817-322">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="f0817-323">ネットワーク接続、DNS エラー、サーバー証明書の検証、タイムアウトなどの根本的な問題が原因で要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="f0817-323">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteArrayAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f0817-324">指定 URI に GET 要求を送信し、非同期操作で応答本体をバイト配列として返します。</span><span class="sxs-lookup"><span data-stu-id="f0817-324">Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-325">操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-325">The operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteArrayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (string requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; GetByteArrayAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetByteArrayAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteArrayAsync (requestUri As String) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ GetByteArrayAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetByteArrayAsync : string -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="httpClient.GetByteArrayAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="f0817-326">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="f0817-326">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="f0817-327">指定 URI に GET 要求を送信し、非同期操作で応答本体をバイト配列として返します。</span><span class="sxs-lookup"><span data-stu-id="f0817-327">Sends a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="f0817-328">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f0817-328">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-329">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-329">This operation will not block.</span></span> <span data-ttu-id="f0817-330">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答本体全体が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="f0817-330">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f0817-331"><paramref name="requestUri" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f0817-331">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="f0817-332">ネットワーク接続、DNS エラー、サーバー証明書の検証、タイムアウトなどの根本的な問題が原因で要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="f0817-332">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetByteArrayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; GetByteArrayAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteArrayAsync (requestUri As Uri) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ GetByteArrayAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetByteArrayAsync : Uri -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="httpClient.GetByteArrayAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="f0817-333">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="f0817-333">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="f0817-334">指定 URI に GET 要求を送信し、非同期操作で応答本体をバイト配列として返します。</span><span class="sxs-lookup"><span data-stu-id="f0817-334">Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="f0817-335">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f0817-335">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-336">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-336">This operation will not block.</span></span> <span data-ttu-id="f0817-337">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答本体全体が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="f0817-337">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f0817-338"><paramref name="requestUri" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f0817-338">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="f0817-339">ネットワーク接続、DNS エラー、サーバー証明書の検証、タイムアウトなどの根本的な問題が原因で要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="f0817-339">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetByteArrayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (string requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; GetByteArrayAsync(string requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetByteArrayAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteArrayAsync (requestUri As String, cancellationToken As CancellationToken) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ GetByteArrayAsync(System::String ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetByteArrayAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="httpClient.GetByteArrayAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetByteArrayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (Uri requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; GetByteArrayAsync(class System.Uri requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteArrayAsync (requestUri As Uri, cancellationToken As CancellationToken) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ GetByteArrayAsync(Uri ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetByteArrayAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="httpClient.GetByteArrayAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetStreamAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f0817-340">指定 URI に GET 要求を送信し、非同期操作で応答本体をストリームとして返します。</span><span class="sxs-lookup"><span data-stu-id="f0817-340">Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-341">操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-341">The operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetStreamAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (string requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetStreamAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStreamAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStreamAsync (requestUri As String) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ GetStreamAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStreamAsync : string -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="httpClient.GetStreamAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="f0817-342">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="f0817-342">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="f0817-343">指定 URI に GET 要求を送信し、非同期操作で応答本体をストリームとして返します。</span><span class="sxs-lookup"><span data-stu-id="f0817-343">Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="f0817-344">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f0817-344">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-345">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-345">This operation will not block.</span></span> <span data-ttu-id="f0817-346">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答ヘッダーが読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="f0817-346">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the response headers are read.</span></span> <span data-ttu-id="f0817-347">このメソッドは、応答本文の読み取りもバッファーも行いません。</span><span class="sxs-lookup"><span data-stu-id="f0817-347">This method does not read nor buffer the response body.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f0817-348"><paramref name="requestUri" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f0817-348">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="f0817-349">ネットワーク接続、DNS エラー、サーバー証明書の検証、タイムアウトなどの根本的な問題が原因で要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="f0817-349">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetStreamAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetStreamAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStreamAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStreamAsync (requestUri As Uri) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ GetStreamAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStreamAsync : Uri -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="httpClient.GetStreamAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="f0817-350">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="f0817-350">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="f0817-351">指定 URI に GET 要求を送信し、非同期操作で応答本体をストリームとして返します。</span><span class="sxs-lookup"><span data-stu-id="f0817-351">Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="f0817-352">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f0817-352">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-353">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-353">This operation will not block.</span></span> <span data-ttu-id="f0817-354">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答ヘッダーが読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="f0817-354">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the response headers are read.</span></span> <span data-ttu-id="f0817-355">このメソッドは、応答本文の読み取りもバッファーも行いません。</span><span class="sxs-lookup"><span data-stu-id="f0817-355">This method does not read nor buffer the response body.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f0817-356"><paramref name="requestUri" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f0817-356">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="f0817-357">ネットワーク接続、DNS エラー、サーバー証明書の検証、タイムアウトなどの根本的な問題が原因で要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="f0817-357">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetStreamAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (string requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetStreamAsync(string requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStreamAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStreamAsync (requestUri As String, cancellationToken As CancellationToken) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ GetStreamAsync(System::String ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetStreamAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="httpClient.GetStreamAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStreamAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (Uri requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetStreamAsync(class System.Uri requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStreamAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStreamAsync (requestUri As Uri, cancellationToken As CancellationToken) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ GetStreamAsync(Uri ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetStreamAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="httpClient.GetStreamAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetStringAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f0817-358">指定 URI に GET 要求を送信し、非同期操作で応答本体を文字列として返します。</span><span class="sxs-lookup"><span data-stu-id="f0817-358">Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-359">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-359">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (string requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; GetStringAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStringAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStringAsync (requestUri As String) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ GetStringAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStringAsync : string -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="httpClient.GetStringAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="f0817-360">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="f0817-360">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="f0817-361">指定 URI に GET 要求を送信し、非同期操作で応答本体を文字列として返します。</span><span class="sxs-lookup"><span data-stu-id="f0817-361">Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="f0817-362">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f0817-362">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-363">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-363">This operation will not block.</span></span> <span data-ttu-id="f0817-364">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答本体全体が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="f0817-364">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f0817-365"><paramref name="requestUri" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f0817-365">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="f0817-366">ネットワーク接続、DNS エラー、サーバー証明書の検証、タイムアウトなどの根本的な問題が原因で要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="f0817-366">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; GetStringAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStringAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStringAsync (requestUri As Uri) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ GetStringAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStringAsync : Uri -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="httpClient.GetStringAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="f0817-367">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="f0817-367">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="f0817-368">指定 URI に GET 要求を送信し、非同期操作で応答本体を文字列として返します。</span><span class="sxs-lookup"><span data-stu-id="f0817-368">Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="f0817-369">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f0817-369">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-370">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-370">This operation will not block.</span></span> <span data-ttu-id="f0817-371">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答本体全体が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="f0817-371">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f0817-372"><paramref name="requestUri" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f0817-372">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="f0817-373">ネットワーク接続、DNS エラー、サーバー証明書の検証、タイムアウトなどの根本的な問題が原因で要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="f0817-373">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (string requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; GetStringAsync(string requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStringAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStringAsync (requestUri As String, cancellationToken As CancellationToken) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ GetStringAsync(System::String ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetStringAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="httpClient.GetStringAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (Uri requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; GetStringAsync(class System.Uri requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStringAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStringAsync (requestUri As Uri, cancellationToken As CancellationToken) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ GetStringAsync(Uri ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetStringAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="httpClient.GetStringAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxResponseContentBufferSize">
      <MemberSignature Language="C#" Value="public long MaxResponseContentBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxResponseContentBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.MaxResponseContentBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxResponseContentBufferSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxResponseContentBufferSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxResponseContentBufferSize : int64 with get, set" Usage="System.Net.Http.HttpClient.MaxResponseContentBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f0817-374">応答コンテンツの閲覧時のバッファーの最大バイトを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="f0817-374">Gets or sets the maximum number of bytes to buffer when reading the response content.</span></span></summary>
        <value><span data-ttu-id="f0817-375">応答コンテンツを読み取るときに、バッファーに格納できる最大バイト数。</span><span class="sxs-lookup"><span data-stu-id="f0817-375">The maximum number of bytes to buffer when reading the response content.</span></span> <span data-ttu-id="f0817-376">このプロパティの既定値は 2 GB です。</span><span class="sxs-lookup"><span data-stu-id="f0817-376">The default value for this property is 2 gigabytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-377">アプリでは、<xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> プロパティを小さい値に設定して、応答の読み取り時に、応答のサイズをバッファーに制限することができます。</span><span class="sxs-lookup"><span data-stu-id="f0817-377">An app can set the <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> property to a lower value to limit the size of the response to buffer when reading the response.</span></span> <span data-ttu-id="f0817-378">応答コンテンツのサイズが <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> プロパティより大きい場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f0817-378">If the size of the response content is greater than the  <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> property, an exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f0817-379">指定されたサイズが 0 以下です。</span><span class="sxs-lookup"><span data-stu-id="f0817-379">The size specified is less than or equal to zero.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f0817-380">操作は現在のインスタンス上で既に開始されました。</span><span class="sxs-lookup"><span data-stu-id="f0817-380">An operation has already been started on the current instance.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="f0817-381">現在のインスタンスは破棄されています。</span><span class="sxs-lookup"><span data-stu-id="f0817-381">The current instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (string requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(string requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.String,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PatchAsync (requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : string * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="f0817-382">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="f0817-382">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="f0817-383">サーバーに送信される HTTP 要求の内容。</span><span class="sxs-lookup"><span data-stu-id="f0817-383">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="f0817-384">文字列として指定されている URI に PATCH 要求を非同期操作として送信します。</span><span class="sxs-lookup"><span data-stu-id="f0817-384">Sends a PATCH request to a Uri designated as a string as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="f0817-385">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f0817-385">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-386">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-386">This operation will not block.</span></span> <span data-ttu-id="f0817-387">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答全体 (コンテンツを含む) が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="f0817-387">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (Uri requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.Uri,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PatchAsync (requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : Uri * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="f0817-388">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="f0817-388">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="f0817-389">サーバーに送信される HTTP 要求の内容。</span><span class="sxs-lookup"><span data-stu-id="f0817-389">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="f0817-390">非同期操作として PATCH 要求を送信します。</span><span class="sxs-lookup"><span data-stu-id="f0817-390">Sends a PATCH request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="f0817-391">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f0817-391">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-392">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-392">This operation will not block.</span></span> <span data-ttu-id="f0817-393">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答全体 (コンテンツを含む) が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="f0817-393">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(string requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function PatchAsync (requestUri As String, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : string * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="f0817-394">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="f0817-394">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="f0817-395">サーバーに送信される HTTP 要求の内容。</span><span class="sxs-lookup"><span data-stu-id="f0817-395">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="f0817-396">キャンセル通知を受け取るために他のオブジェクトやスレッドで使用できるキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="f0817-396">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="f0817-397">文字列として表現されている URI に PATCH 要求をキャンセル トークン付きで非同期操作として送信します。</span><span class="sxs-lookup"><span data-stu-id="f0817-397">Sends a PATCH request with a cancellation token to a Uri represented as a string as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="f0817-398">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f0817-398">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-399">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-399">This operation will not block.</span></span> <span data-ttu-id="f0817-400">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答全体 (コンテンツを含む) が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="f0817-400">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function PatchAsync (requestUri As Uri, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : Uri * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="f0817-401">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="f0817-401">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="f0817-402">サーバーに送信される HTTP 要求の内容。</span><span class="sxs-lookup"><span data-stu-id="f0817-402">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="f0817-403">キャンセル通知を受け取るために他のオブジェクトやスレッドで使用できるキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="f0817-403">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="f0817-404">PATCH 要求をキャンセル トークンと共に非同期操作として送信します。</span><span class="sxs-lookup"><span data-stu-id="f0817-404">Sends a PATCH request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="f0817-405">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f0817-405">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-406">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-406">This operation will not block.</span></span> <span data-ttu-id="f0817-407">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答全体 (コンテンツを含む) が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="f0817-407">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PostAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f0817-408">指定された URI に POST 要求を非同期操作として送信します。</span><span class="sxs-lookup"><span data-stu-id="f0817-408">Send a POST request to the specified Uri as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-409">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-409">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (string requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(string requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PostAsync (requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : string * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="f0817-410">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="f0817-410">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="f0817-411">サーバーに送信される HTTP 要求の内容。</span><span class="sxs-lookup"><span data-stu-id="f0817-411">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="f0817-412">指定された URI に POST 要求を非同期操作として送信します。</span><span class="sxs-lookup"><span data-stu-id="f0817-412">Send a POST request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="f0817-413">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f0817-413">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-414">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-414">This operation will not block.</span></span> <span data-ttu-id="f0817-415">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答全体 (コンテンツを含む) が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="f0817-415">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f0817-416"><paramref name="requestUri" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f0817-416">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="f0817-417">ネットワーク接続、DNS エラー、サーバー証明書の検証、タイムアウトなどの根本的な問題が原因で要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="f0817-417">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (Uri requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PostAsync (requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : Uri * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="f0817-418">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="f0817-418">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="f0817-419">サーバーに送信される HTTP 要求の内容。</span><span class="sxs-lookup"><span data-stu-id="f0817-419">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="f0817-420">指定された URI に POST 要求を非同期操作として送信します。</span><span class="sxs-lookup"><span data-stu-id="f0817-420">Send a POST request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="f0817-421">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f0817-421">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-422">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-422">This operation will not block.</span></span> <span data-ttu-id="f0817-423">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答全体 (コンテンツを含む) が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="f0817-423">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f0817-424"><paramref name="requestUri" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f0817-424">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="f0817-425">ネットワーク接続、DNS エラー、サーバー証明書の検証、タイムアウトなどの根本的な問題が原因で要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="f0817-425">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(string requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function PostAsync (requestUri As String, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : string * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="f0817-426">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="f0817-426">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="f0817-427">サーバーに送信される HTTP 要求の内容。</span><span class="sxs-lookup"><span data-stu-id="f0817-427">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="f0817-428">キャンセル通知を受け取るために他のオブジェクトやスレッドで使用できるキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="f0817-428">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="f0817-429">POST 要求をキャンセル トークンとともに非同期操作として送信します。</span><span class="sxs-lookup"><span data-stu-id="f0817-429">Send a POST request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="f0817-430">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f0817-430">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-431">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-431">This operation will not block.</span></span> <span data-ttu-id="f0817-432">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答全体 (コンテンツを含む) が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="f0817-432">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f0817-433"><paramref name="requestUri" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f0817-433">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="f0817-434">ネットワーク接続、DNS エラー、サーバー証明書の検証、タイムアウトなどの根本的な問題が原因で要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="f0817-434">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function PostAsync (requestUri As Uri, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : Uri * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="f0817-435">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="f0817-435">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="f0817-436">サーバーに送信される HTTP 要求の内容。</span><span class="sxs-lookup"><span data-stu-id="f0817-436">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="f0817-437">キャンセル通知を受け取るために他のオブジェクトやスレッドで使用できるキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="f0817-437">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="f0817-438">POST 要求をキャンセル トークンとともに非同期操作として送信します。</span><span class="sxs-lookup"><span data-stu-id="f0817-438">Send a POST request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="f0817-439">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f0817-439">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-440">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-440">This operation will not block.</span></span> <span data-ttu-id="f0817-441">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答全体 (コンテンツを含む) が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="f0817-441">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f0817-442"><paramref name="requestUri" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f0817-442">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="f0817-443">ネットワーク接続、DNS エラー、サーバー証明書の検証、タイムアウトなどの根本的な問題が原因で要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="f0817-443">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="PutAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f0817-444">指定された URI に PUT 要求を非同期操作として送信します。</span><span class="sxs-lookup"><span data-stu-id="f0817-444">Send a PUT request to the specified Uri as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-445">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-445">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (string requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(string requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PutAsync (requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : string * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="f0817-446">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="f0817-446">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="f0817-447">サーバーに送信される HTTP 要求の内容。</span><span class="sxs-lookup"><span data-stu-id="f0817-447">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="f0817-448">指定された URI に PUT 要求を非同期操作として送信します。</span><span class="sxs-lookup"><span data-stu-id="f0817-448">Send a PUT request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="f0817-449">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f0817-449">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-450">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-450">This operation will not block.</span></span> <span data-ttu-id="f0817-451">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答全体 (コンテンツを含む) が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="f0817-451">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f0817-452"><paramref name="requestUri" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f0817-452">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="f0817-453">ネットワーク接続、DNS エラー、サーバー証明書の検証、タイムアウトなどの根本的な問題が原因で要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="f0817-453">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (Uri requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PutAsync (requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : Uri * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="f0817-454">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="f0817-454">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="f0817-455">サーバーに送信される HTTP 要求の内容。</span><span class="sxs-lookup"><span data-stu-id="f0817-455">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="f0817-456">指定された URI に PUT 要求を非同期操作として送信します。</span><span class="sxs-lookup"><span data-stu-id="f0817-456">Send a PUT request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="f0817-457">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f0817-457">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-458">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-458">This operation will not block.</span></span> <span data-ttu-id="f0817-459">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答全体 (コンテンツを含む) が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="f0817-459">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f0817-460"><paramref name="requestUri" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f0817-460">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="f0817-461">ネットワーク接続、DNS エラー、サーバー証明書の検証、タイムアウトなどの根本的な問題が原因で要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="f0817-461">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(string requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function PutAsync (requestUri As String, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : string * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="f0817-462">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="f0817-462">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="f0817-463">サーバーに送信される HTTP 要求の内容。</span><span class="sxs-lookup"><span data-stu-id="f0817-463">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="f0817-464">キャンセル通知を受け取るために他のオブジェクトやスレッドで使用できるキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="f0817-464">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="f0817-465">PUT 要求をとキャンセル トークンと共に非同期操作として送信します。</span><span class="sxs-lookup"><span data-stu-id="f0817-465">Send a PUT request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="f0817-466">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f0817-466">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-467">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-467">This operation will not block.</span></span> <span data-ttu-id="f0817-468">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答全体 (コンテンツを含む) が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="f0817-468">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f0817-469"><paramref name="requestUri" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f0817-469">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="f0817-470">ネットワーク接続、DNS エラー、サーバー証明書の検証、タイムアウトなどの根本的な問題が原因で要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="f0817-470">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function PutAsync (requestUri As Uri, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : Uri * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="f0817-471">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="f0817-471">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="f0817-472">サーバーに送信される HTTP 要求の内容。</span><span class="sxs-lookup"><span data-stu-id="f0817-472">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="f0817-473">キャンセル通知を受け取るために他のオブジェクトやスレッドで使用できるキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="f0817-473">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="f0817-474">PUT 要求をとキャンセル トークンと共に非同期操作として送信します。</span><span class="sxs-lookup"><span data-stu-id="f0817-474">Send a PUT request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="f0817-475">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f0817-475">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-476">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-476">This operation will not block.</span></span> <span data-ttu-id="f0817-477">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答全体 (コンテンツを含む) が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="f0817-477">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f0817-478"><paramref name="requestUri" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f0817-478">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="f0817-479">ネットワーク接続、DNS エラー、サーバー証明書の検証、タイムアウトなどの根本的な問題が原因で要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="f0817-479">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f0817-480">非同期操作として HTTP 要求を送信します。</span><span class="sxs-lookup"><span data-stu-id="f0817-480">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-481">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-481">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (request As HttpRequestMessage) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="f0817-482">送信する HTTP 要求メッセージ。</span><span class="sxs-lookup"><span data-stu-id="f0817-482">The HTTP request message to send.</span></span></param>
        <summary><span data-ttu-id="f0817-483">非同期操作として HTTP 要求を送信します。</span><span class="sxs-lookup"><span data-stu-id="f0817-483">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="f0817-484">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f0817-484">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-485">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-485">This operation will not block.</span></span> <span data-ttu-id="f0817-486">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、コンテンツを含む応答全体が読み込まれると完了します。</span><span class="sxs-lookup"><span data-stu-id="f0817-486">The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f0817-487"><paramref name="request" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f0817-487">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f0817-488">要求メッセージは <see cref="T:System.Net.Http.HttpClient" /> インスタンスによって既に送信されました。</span><span class="sxs-lookup"><span data-stu-id="f0817-488">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="f0817-489">ネットワーク接続、DNS エラー、サーバー証明書の検証、タイムアウトなどの根本的な問題が原因で要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="f0817-489">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.Http.HttpCompletionOption completionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (request As HttpRequestMessage, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request, System::Net::Http::HttpCompletionOption completionOption);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage * System.Net.Http.HttpCompletionOption -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync (request, completionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="f0817-490">送信する HTTP 要求メッセージ。</span><span class="sxs-lookup"><span data-stu-id="f0817-490">The HTTP request message to send.</span></span></param>
        <param name="completionOption"><span data-ttu-id="f0817-491">操作が完了したとき (応答が使用できる状態になった後か、応答コンテンツ全体が読み取られた後)。</span><span class="sxs-lookup"><span data-stu-id="f0817-491">When the operation should complete (as soon as a response is available or after reading the whole response content).</span></span></param>
        <summary><span data-ttu-id="f0817-492">非同期操作として HTTP 要求を送信します。</span><span class="sxs-lookup"><span data-stu-id="f0817-492">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="f0817-493">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f0817-493">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-494">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-494">This operation will not block.</span></span> <span data-ttu-id="f0817-495">`completionOption` パラメーターの値に応じて、返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答が使用可能になるか、コンテンツ全体が読み取られるとすぐに完了します。</span><span class="sxs-lookup"><span data-stu-id="f0817-495">Depending on the value of the `completionOption` parameter, the returned <xref:System.Threading.Tasks.Task%601> object will complete as soon as a response is available or the entire response including content is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f0817-496"><paramref name="request" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f0817-496">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f0817-497">要求メッセージは <see cref="T:System.Net.Http.HttpClient" /> インスタンスによって既に送信されました。</span><span class="sxs-lookup"><span data-stu-id="f0817-497">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="f0817-498">ネットワーク接続、DNS エラー、サーバー証明書の検証、タイムアウトなどの根本的な問題が原因で要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="f0817-498">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function SendAsync (request As HttpRequestMessage, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync (request, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="f0817-499">送信する HTTP 要求メッセージ。</span><span class="sxs-lookup"><span data-stu-id="f0817-499">The HTTP request message to send.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="f0817-500">操作をキャンセルするキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="f0817-500">The cancellation token to cancel operation.</span></span></param>
        <summary><span data-ttu-id="f0817-501">非同期操作として HTTP 要求を送信します。</span><span class="sxs-lookup"><span data-stu-id="f0817-501">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="f0817-502">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f0817-502">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-503">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-503">This operation will not block.</span></span> <span data-ttu-id="f0817-504">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、コンテンツを含む応答全体が読み込まれると完了します。</span><span class="sxs-lookup"><span data-stu-id="f0817-504">The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f0817-505"><paramref name="request" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f0817-505">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f0817-506">要求メッセージは <see cref="T:System.Net.Http.HttpClient" /> インスタンスによって既に送信されました。</span><span class="sxs-lookup"><span data-stu-id="f0817-506">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="f0817-507">ネットワーク接続、DNS エラー、サーバー証明書の検証、タイムアウトなどの根本的な問題が原因で要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="f0817-507">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.Http.HttpCompletionOption completionOption, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (request As HttpRequestMessage, completionOption As HttpCompletionOption, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage * System.Net.Http.HttpCompletionOption * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync (request, completionOption, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="f0817-508">送信する HTTP 要求メッセージ。</span><span class="sxs-lookup"><span data-stu-id="f0817-508">The HTTP request message to send.</span></span></param>
        <param name="completionOption"><span data-ttu-id="f0817-509">操作が完了したとき (応答が使用できる状態になった後か、応答コンテンツ全体が読み取られた後)。</span><span class="sxs-lookup"><span data-stu-id="f0817-509">When the operation should complete (as soon as a response is available or after reading the whole response content).</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="f0817-510">操作をキャンセルするキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="f0817-510">The cancellation token to cancel operation.</span></span></param>
        <summary><span data-ttu-id="f0817-511">非同期操作として HTTP 要求を送信します。</span><span class="sxs-lookup"><span data-stu-id="f0817-511">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="f0817-512">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f0817-512">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-513">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="f0817-513">This operation will not block.</span></span> <span data-ttu-id="f0817-514">`completionOption` パラメーターの値に応じて、返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答が使用可能になるか、コンテンツ全体が読み取られるとすぐに完了します。</span><span class="sxs-lookup"><span data-stu-id="f0817-514">Depending on the value of the `completionOption` parameter, the returned <xref:System.Threading.Tasks.Task%601> object will complete as soon as a response is available or the entire response including content is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f0817-515"><paramref name="request" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f0817-515">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f0817-516">要求メッセージは <see cref="T:System.Net.Http.HttpClient" /> インスタンスによって既に送信されました。</span><span class="sxs-lookup"><span data-stu-id="f0817-516">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="f0817-517">ネットワーク接続、DNS エラー、サーバー証明書の検証、タイムアウトなどの根本的な問題が原因で要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="f0817-517">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public TimeSpan Timeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Timeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.Timeout" />
      <MemberSignature Language="VB.NET" Value="Public Property Timeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Timeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.Timeout : TimeSpan with get, set" Usage="System.Net.Http.HttpClient.Timeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f0817-518">要求がタイムアウトするまで待機する期間を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="f0817-518">Gets or sets the timespan to wait before the request times out.</span></span></summary>
        <value><span data-ttu-id="f0817-519">要求がタイムアウトするまで待機する期間。</span><span class="sxs-lookup"><span data-stu-id="f0817-519">The timespan to wait before the request times out.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0817-520">既定値は 100,000 ミリ秒 (100 秒) です。</span><span class="sxs-lookup"><span data-stu-id="f0817-520">The default value is 100,000 milliseconds (100 seconds).</span></span>  
  
 <span data-ttu-id="f0817-521">無限のタイムアウトを設定するには、プロパティの値を <xref:System.Threading.Timeout.InfiniteTimeSpan>に設定します。</span><span class="sxs-lookup"><span data-stu-id="f0817-521">To set an infinite timeout, set the property value to <xref:System.Threading.Timeout.InfiniteTimeSpan>.</span></span>  
  
 <span data-ttu-id="f0817-522">ドメインネームシステム (DNS) のクエリが返されるか、タイムアウトになるまでに最大15秒かかることがあります。解決が必要なホスト名が要求に含まれており、<xref:System.Net.Http.HttpClient.Timeout%2A> を15秒未満に設定した場合は、要求のタイムアウトを示すために <xref:System.Net.WebException> がスローされる前に15秒以上かかることがあります。</span><span class="sxs-lookup"><span data-stu-id="f0817-522">A Domain Name System (DNS) query may take up to 15 seconds to return or time out. If your request contains a host name that requires resolution and you set <xref:System.Net.Http.HttpClient.Timeout%2A> to a value less than 15 seconds, it may take 15 seconds or more before a <xref:System.Net.WebException> is thrown to indicate a timeout on your request.</span></span>  
  
 <span data-ttu-id="f0817-523">この <xref:System.Net.Http.HttpClient> インスタンスを使用しているすべての要求に対して、同じタイムアウトが適用されます。</span><span class="sxs-lookup"><span data-stu-id="f0817-523">The same timeout will apply for all requests using this <xref:System.Net.Http.HttpClient> instance.</span></span>  <span data-ttu-id="f0817-524">また、タスクの <xref:System.Threading.CancellationTokenSource> を使用して、個々の要求に対して異なるタイムアウトを設定することもできます。</span><span class="sxs-lookup"><span data-stu-id="f0817-524">You may also set different timeouts for individual requests using a <xref:System.Threading.CancellationTokenSource> on a task.</span></span> <span data-ttu-id="f0817-525">2つのタイムアウトのうち、短い方だけが適用されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="f0817-525">Note that only the shorter of the two timeouts will apply.</span></span>  
  
 ## Examples
 
 <span data-ttu-id="f0817-526">次の例では、`Timeout` プロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="f0817-526">The following example sets the `Timeout` property.</span></span>
  
```csharp
HttpClient httpClient = new HttpClient();
httpClient.Timeout = TimeSpan.FromMinutes(10);
```

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f0817-527">指定したタイムアウトが 0 以下のため <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="f0817-527">The timeout specified is less than or equal to zero and is not <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f0817-528">操作は現在のインスタンス上で既に開始されました。</span><span class="sxs-lookup"><span data-stu-id="f0817-528">An operation has already been started on the current instance.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="f0817-529">現在のインスタンスは破棄されています。</span><span class="sxs-lookup"><span data-stu-id="f0817-529">The current instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
